{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'data' is declared as a non-const pointer (void *data) although there is no evidence in this function that the object pointed-to is modified. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible (e.g. const void *data). If the event handler and callers do not need to modify the pointed-to data, the function signature should be changed to use const void *data (and the EventHandler prototype updated accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NotifyEvent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NotifyEvent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NotifyEvent:\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_NotifyEvent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper to log control flow and state to /tmp/logs/1313.txt */\nstatic void OS_NotifyEvent_Log(const char *stage, OS_Event_t event, osal_id_t object_id, void *data, int32 status)\n{\n    FILE *f = fopen(\"/tmp/logs/1313.txt\", \"a\");\n    if (f != NULL)\n    {\n        /*\n         * Log the stage, event and object identifiers (as integer types),\n         * the raw pointer value for 'data' (do NOT dereference it), and the status.\n         * Casting to uintmax_t is intended to be safe for typical integral event/id types.\n         */\n        fprintf(f, \"[OS_NotifyEvent] %s: event=%\" PRIuMAX \", object_id=%\" PRIuMAX \", data_ptr=%p, status=%d\\n\",\n                stage,\n                (uintmax_t)event,\n                (uintmax_t)object_id,\n                data,\n                status);\n        fclose(f);\n    }\n}\n\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    /* Log function entry and the pointer value for 'data' to capture the violation scenario. */\n    OS_NotifyEvent_Log(\"enter\", event, object_id, data, -1);\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        OS_NotifyEvent_Log(\"handler_present_before_call\", event, object_id, data, -1);\n\n        /* Preserve original logic: invoke the event handler with the same parameters. */\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n\n        /* Log the outcome after the handler returns. */\n        OS_NotifyEvent_Log(\"after_handler_call\", event, object_id, data, status);\n    }\n    else\n    {\n        /* Log that no handler was present and the default success status used. */\n        OS_NotifyEvent_Log(\"no_handler\", event, object_id, data, (int32)OS_SUCCESS);\n\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n"
}