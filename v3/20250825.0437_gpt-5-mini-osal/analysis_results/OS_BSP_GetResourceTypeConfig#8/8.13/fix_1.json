{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic const uint32 OS_OBJECT_TYPE_USER = 100u;\nstruct OS_BSP_Global_t\n{\n    /* Intentionally non-const pointer to demonstrate Rule 8.13 scenario */\n    uint32 *ResoureConfig;\n};\nstatic uint32 resource_array[100];\nstatic void ensure_log_dir(void)\n{\n    int rc = mkdir(\"/tmp/logs\", 0777);\n    (void)rc; /* ignore result; if directory exists mkdir may fail with EEXIST */\n}\nstatic void append_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Logging best-effort only */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nuint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    /* Log entry and input state */\n    append_log(\"ENTER: OS_BSP_GetResourceTypeConfig(ResourceType=%u)\", ResourceType);\n    append_log(\"OS_OBJECT_TYPE_USER=%u\", (unsigned)OS_OBJECT_TYPE_USER);\n    append_log(\"ResoureConfig pointer=%p\", (void *)OS_BSP_Global.ResoureConfig);\n\n    if (ResourceType < OS_OBJECT_TYPE_USER)\n    {\n        /* Log decision path */\n        append_log(\"Path: ResourceType < OS_OBJECT_TYPE_USER -> read from ResoureConfig[ResourceType]\");\n\n        /* Preserve original behavior: read from the non-const pointer */\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n\n        /* Log the value read; also log the index and a sample of nearby elements for context */\n        append_log(\"Read: index=%u, value=%u\", ResourceType, ConfigOptionValue);\n\n        /* Attempt to log up to 3 neighboring entries if available (best-effort; stay within array used here) */\n        if (ResourceType > 0U)\n        {\n            append_log(\"Neighbor[-1] value=%u\", OS_BSP_Global.ResoureConfig[ResourceType - 1U]);\n        }\n        if (ResourceType + 1U < OS_OBJECT_TYPE_USER)\n        {\n            append_log(\"Neighbor[+1] value=%u\", OS_BSP_Global.ResoureConfig[ResourceType + 1U]);\n        }\n    }\n    else\n    {\n        /* Log decision path */\n        append_log(\"Path: ResourceType >= OS_OBJECT_TYPE_USER -> return 0\");\n        ConfigOptionValue = 0u;\n    }\n\n    /* Log exit state */\n    append_log(\"EXIT: OS_BSP_GetResourceTypeConfig -> return %u\", ConfigOptionValue);\n\n    return ConfigOptionValue;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmprgqbpg17/src/src/bsp/shared/src/bsp_default_resourcecfg.c:39:\n/tmp/tmprgqbpg17/src/src/os/inc/osapi-idmap.h:52:36: error: expected identifier or '(' before numeric constant\n   52 | #define OS_OBJECT_TYPE_USER        0x10 /**< @brief Object user type */\n      |                                    ^~~~\n/tmp/tmprgqbpg17/src/src/bsp/shared/src/bsp_default_resourcecfg.c:60:21: note: in expansion of macro 'OS_OBJECT_TYPE_USER'\n   60 | static const uint32 OS_OBJECT_TYPE_USER = 100u;\n      |                     ^~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal_bsp.dir/build.make:132: CMakeFiles/osal_bsp.dir/src/bsp/shared/src/bsp_default_resourcecfg.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:735: CMakeFiles/osal_bsp.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_BSP_GetResourceTypeConfig as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static const uint32 OS_BSP_OBJECT_TYPE_USER = 100u;\nstruct OS_BSP_Global_t\n{\n    /* Intentionally non-const pointer to demonstrate Rule 8.13 scenario */\n    uint32 *ResoureConfig;\n};\n/* Reference the global instance defined elsewhere in the project */\nextern struct OS_BSP_Global_t OS_BSP_Global;\nstatic uint32 resource_array[100];\nstatic void ensure_log_dir(void)\n{\n    int rc = mkdir(\"/tmp/logs\", 0777);\n    (void)rc; /* ignore result; if directory exists mkdir may fail with EEXIST */\n}\nstatic void append_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Logging best-effort only */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nuint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    /* Log entry and input state */\n    append_log(\"ENTER: OS_BSP_GetResourceTypeConfig(ResourceType=%u)\", ResourceType);\n    append_log(\"OS_OBJECT_TYPE_USER=%u\", (unsigned)OS_BSP_OBJECT_TYPE_USER);\n    append_log(\"ResoureConfig pointer=%p\", (void *)OS_BSP_Global.ResoureConfig);\n\n    if (ResourceType < OS_BSP_OBJECT_TYPE_USER)\n    {\n        /* Log decision path */\n        append_log(\"Path: ResourceType < OS_OBJECT_TYPE_USER -> read from ResoureConfig[ResourceType]\");\n\n        /* Preserve original behavior: read from the non-const pointer */\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n\n        /* Log the value read; also log the index and a sample of nearby elements for context */\n        append_log(\"Read: index=%u, value=%u\", ResourceType, ConfigOptionValue);\n\n        /* Attempt to log up to 3 neighboring entries if available (best-effort; stay within array used here) */\n        if (ResourceType > 0U)\n        {\n            append_log(\"Neighbor[-1] value=%u\", OS_BSP_Global.ResoureConfig[ResourceType - 1U]);\n        }\n        if (ResourceType + 1U < OS_BSP_OBJECT_TYPE_USER)\n        {\n            append_log(\"Neighbor[+1] value=%u\", OS_BSP_Global.ResoureConfig[ResourceType + 1U]);\n        }\n    }\n    else\n    {\n        /* Log decision path */\n        append_log(\"Path: ResourceType >= OS_OBJECT_TYPE_USER -> return 0\");\n        ConfigOptionValue = 0u;\n    }\n\n    /* Log exit state */\n    append_log(\"EXIT: OS_BSP_GetResourceTypeConfig -> return %u\", ConfigOptionValue);\n\n    return ConfigOptionValue;\n}\n",
  "explanation": "The build error was due to a name clash with an existing macro OS_OBJECT_TYPE_USER from an included header. I renamed the local constant to OS_BSP_OBJECT_TYPE_USER and updated all references to use the new identifier so the macro no longer interferes. I also added an extern declaration for OS_BSP_Global to reference the global instance defined elsewhere in the project. No macros were added, and the original function logic and logging behavior are preserved."
}