{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetResourceTypeConfig:\n```c\nuint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    if (ResourceType < OS_OBJECT_TYPE_USER)\n    {\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n    }\n    else\n    {\n        ConfigOptionValue = 0;\n    }\n\n    return ConfigOptionValue;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BSP_GetResourceTypeConfig:\nextern OS_BSP_GlobalData_t OS_BSP_Global\n...\ntypedef uint32_t  uint32\n...\n#define OS_OBJECT_TYPE_USER 0x10\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "Violation occurs if OS_BSP_Global.ResoureConfig is declared as a pointer to a non-const type (for example: uint32 *ResoureConfig). In this function the array elements are only read, so the pointer should be to a const-qualified type (const uint32 *ResoureConfig or const uint32 ResoureConfig[]). If ResoureConfig is instead an array of non-const uint32 (i.e. a non-pointer member) or already const-qualified, then Rule 8.13 would not be violated."
}