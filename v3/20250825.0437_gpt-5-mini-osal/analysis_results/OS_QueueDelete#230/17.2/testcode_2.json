{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdFinalizeDelete calls OS_NotifyEvent which invokes the user-supplied EventHandler (OS_SharedGlobalVars.EventHandler). If that callback calls back into OS APIs that perform deletes (for example OS_QueueDelete for the same object id), the call chain can be: OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> EventHandler -> OS_QueueDelete -> ... -> OS_ObjectIdFinalizeDelete, producing indirect recursion. Thus OS_ObjectIdFinalizeDelete can be re-entered indirectly via the event callback.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2306.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueDelete:\n```c\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_QueueDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/*\n * Probe logging helper: append human-readable entries to /tmp/logs/2306.txt.\n * This helper is intentionally simple and is only used for debugging/probing\n * the control flow around OS_QueueDelete and the object-finalize path.\n */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2306.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *tm = localtime(&t);\n    if (tm != NULL)\n    {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec);\n    }\n    else\n    {\n        fprintf(f, \"[no-time] \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    os_probe_log(\"OS_QueueDelete ENTRY: queue_id=%llu\", (unsigned long long)queue_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    os_probe_log(\"OS_QueueDelete: OS_ObjectIdGetById returned %d for queue_id=%llu (token_addr=%p)\",\n                 (int)return_code, (unsigned long long)queue_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_probe_log(\"OS_QueueDelete: calling OS_QueueDelete_Impl for queue_id=%llu\", (unsigned long long)queue_id);\n        return_code = OS_QueueDelete_Impl(&token);\n        os_probe_log(\"OS_QueueDelete: OS_QueueDelete_Impl returned %d for queue_id=%llu\", (int)return_code, (unsigned long long)queue_id);\n\n        /* Complete the operation via the common routine */\n        os_probe_log(\"OS_QueueDelete: calling OS_ObjectIdFinalizeDelete for queue_id=%llu (pre-finalize rc=%d)\",\n                     (unsigned long long)queue_id, (int)return_code);\n\n        /* The following call may invoke user-supplied callbacks which could re-enter OS APIs. */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        os_probe_log(\"OS_QueueDelete: OS_ObjectIdFinalizeDelete returned %d for queue_id=%llu (post-finalize)\",\n                     (int)return_code, (unsigned long long)queue_id);\n    }\n    else\n    {\n        os_probe_log(\"OS_QueueDelete: skipping delete since OS_ObjectIdGetById failed with %d for queue_id=%llu\",\n                     (int)return_code, (unsigned long long)queue_id);\n    }\n\n    os_probe_log(\"OS_QueueDelete EXIT: queue_id=%llu return_code=%d\", (unsigned long long)queue_id, (int)return_code);\n\n    return return_code;\n}\n"
}