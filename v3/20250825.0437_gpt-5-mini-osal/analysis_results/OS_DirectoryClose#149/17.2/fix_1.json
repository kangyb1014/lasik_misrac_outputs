{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n    /* Ensure the log directory exists (best-effort) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/1496.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect normal operation */\n    }\n\n    /* timestamp + pid + thread id */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    localtime_r(&t, &tm_buf);\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d PID:%ld TID:%lu: \",\n            tm_buf.tm_year + 1900,\n            tm_buf.tm_mon + 1,\n            tm_buf.tm_mday,\n            tm_buf.tm_hour,\n            tm_buf.tm_min,\n            tm_buf.tm_sec,\n            (long)getpid(),\n            (unsigned long)pthread_self());\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void os_probe_log_token(const void *token, size_t token_size)\n{\n    const unsigned char *p = (const unsigned char *)token;\n    size_t i, max = (token_size > 16) ? 16 : token_size;\n\n    os_probe_log(\"Token at %p (size=%zu):\", token, token_size);\n    if (p == NULL || token_size == 0)\n    {\n        os_probe_log(\"  <empty token>\");\n        return;\n    }\n\n    {\n        char buf[3 * 16 + 1];\n        size_t pos = 0;\n        for (i = 0; i < max; ++i)\n        {\n            int n = snprintf(&buf[pos], sizeof(buf) - pos, \"%02x \", p[i]);\n            if (n <= 0) break;\n            pos += (size_t)n;\n            if (pos >= sizeof(buf)) break;\n        }\n        buf[pos > 0 ? pos - 1 : 0] = '\\0'; /* trim trailing space */\n        os_probe_log(\"  bytes[0..%zu]: %s\", max ? (max - 1) : 0, buf);\n    }\n}\n\nint32 OS_DirectoryClose(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    os_probe_log(\"Enter OS_DirectoryClose dir_id=%lu\", (unsigned long)dir_id);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, dir_id, &token);\n    os_probe_log(\"After OS_ObjectIdGetById: return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log a small dump of the token to help correlate subsequent behavior */\n        os_probe_log_token(&token, sizeof(token));\n\n        os_probe_log(\"Calling OS_DirClose_Impl with token=%p\", (void *)&token);\n        return_code = OS_DirClose_Impl(&token);\n        os_probe_log(\"Returned from OS_DirClose_Impl: return_code=%ld\", (long)return_code);\n\n        /* Complete the operation via the common routine */\n        os_probe_log(\"Calling OS_ObjectIdFinalizeDelete with return_code=%ld, token=%p\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_probe_log(\"Returned from OS_ObjectIdFinalizeDelete: final_return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        os_probe_log(\"OS_ObjectIdGetById failed, skipping close/finalize. return_code=%ld\", (long)return_code);\n    }\n\n    os_probe_log(\"Exit OS_DirectoryClose dir_id=%lu return_code=%ld\", (unsigned long)dir_id, (long)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpm9n1a0ld/src/src/os/shared/src/osapi-dir.c: In function 'os_probe_log':\n/tmp/tmpm9n1a0ld/src/src/os/shared/src/osapi-dir.c:171:15: error: storage size of 'tm_buf' isn't known\n  171 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpm9n1a0ld/src/src/os/shared/src/osapi-dir.c:174:5: error: aggregate value used where an integer was expected\n  174 |     fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d PID:%ld TID:%lu: \",\n      |     ^~~~~~~\n/tmp/tmpm9n1a0ld/src/src/os/shared/src/osapi-dir.c:185:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  185 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-dir.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-dir.dir/__/__/os/shared/src/osapi-dir.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3477: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-dir.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_DirectoryClose as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n    /* Ensure the log directory exists (best-effort) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/1496.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect normal operation */\n    }\n\n    /* timestamp + pid + thread id */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    localtime_r(&t, &tm_buf);\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d PID:%ld TID:%lu: \",\n            tm_buf.tm_year + 1900,\n            tm_buf.tm_mon + 1,\n            tm_buf.tm_mday,\n            tm_buf.tm_hour,\n            tm_buf.tm_min,\n            tm_buf.tm_sec,\n            (long)getpid(),\n            (unsigned long)pthread_self());\n\n    va_start(ap, fmt);\n    /* Cast to the system va_list in case a project-local typedef was used */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void os_probe_log_token(const void *token, size_t token_size)\n{\n    const unsigned char *p = (const unsigned char *)token;\n    size_t i, max = (token_size > 16) ? 16 : token_size;\n\n    os_probe_log(\"Token at %p (size=%zu):\", token, token_size);\n    if (p == NULL || token_size == 0)\n    {\n        os_probe_log(\"  <empty token>\");\n        return;\n    }\n\n    {\n        char buf[3 * 16 + 1];\n        size_t pos = 0;\n        for (i = 0; i < max; ++i)\n        {\n            int n = snprintf(&buf[pos], sizeof(buf) - pos, \"%02x \", p[i]);\n            if (n <= 0) break;\n            pos += (size_t)n;\n            if (pos >= sizeof(buf)) break;\n        }\n        buf[pos > 0 ? pos - 1 : 0] = '\\0'; /* trim trailing space */\n        os_probe_log(\"  bytes[0..%zu]: %s\", max ? (max - 1) : 0, buf);\n    }\n}\n\nint32 OS_DirectoryClose(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    os_probe_log(\"Enter OS_DirectoryClose dir_id=%lu\", (unsigned long)dir_id);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, dir_id, &token);\n    os_probe_log(\"After OS_ObjectIdGetById: return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log a small dump of the token to help correlate subsequent behavior */\n        os_probe_log_token(&token, sizeof(token));\n\n        os_probe_log(\"Calling OS_DirClose_Impl with token=%p\", (void *)&token);\n        return_code = OS_DirClose_Impl(&token);\n        os_probe_log(\"Returned from OS_DirClose_Impl: return_code=%ld\", (long)return_code);\n\n        /* Complete the operation via the common routine */\n        os_probe_log(\"Calling OS_ObjectIdFinalizeDelete with return_code=%ld, token=%p\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_probe_log(\"Returned from OS_ObjectIdFinalizeDelete: final_return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        os_probe_log(\"OS_ObjectIdGetById failed, skipping close/finalize. return_code=%ld\", (long)return_code);\n    }\n\n    os_probe_log(\"Exit OS_DirectoryClose dir_id=%lu return_code=%ld\", (unsigned long)dir_id, (long)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Added the necessary standard headers (stdio.h, stdarg.h, time.h, sys/stat.h, unistd.h, pthread.h, etc.) so struct tm, va_list, mkdir, getpid, pthread_self and related declarations are known. To address the va_list type mismatch seen in the build (project-local typedefs such as OCS_va_list), vfprintf is now called with an explicit cast to the system va_list: (va_list)ap. No logic of OS_DirectoryClose was changed; only portability/compile fixes were applied."
}