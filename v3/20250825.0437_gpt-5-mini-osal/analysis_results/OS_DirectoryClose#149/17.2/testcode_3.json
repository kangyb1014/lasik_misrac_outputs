{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_SharedGlobalVars.EventHandler is set to point to OS_NotifyEvent (or to a handler that calls OS_NotifyEvent), then calling OS_NotifyEvent results in an indirect recursive call (e.g. OS_SharedGlobalVars.EventHandler = OS_NotifyEvent; followed by OS_NotifyEvent(...)), causing infinite recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryClose code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1496.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryClose as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryClose:\n```c\nint32 OS_DirectoryClose(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryClose code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <pthread.h>\n\n/* Probe logging helpers -------------------------------------------------- */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n    /* Ensure the log directory exists (best-effort) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/1496.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect normal operation */\n    }\n\n    /* timestamp + pid + thread id */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    localtime_r(&t, &tm_buf);\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d PID:%ld TID:%lu: \",\n            tm_buf.tm_year + 1900,\n            tm_buf.tm_mon + 1,\n            tm_buf.tm_mday,\n            tm_buf.tm_hour,\n            tm_buf.tm_min,\n            tm_buf.tm_sec,\n            (long)getpid(),\n            (unsigned long)pthread_self());\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Print a compact hex dump of the token structure (up to 16 bytes) */\nstatic void os_probe_log_token(const void *token, size_t token_size)\n{\n    const unsigned char *p = (const unsigned char *)token;\n    size_t i, max = (token_size > 16) ? 16 : token_size;\n\n    os_probe_log(\"Token at %p (size=%zu):\", token, token_size);\n    if (p == NULL || token_size == 0)\n    {\n        os_probe_log(\"  <empty token>\");\n        return;\n    }\n\n    {\n        char buf[3 * 16 + 1];\n        size_t pos = 0;\n        for (i = 0; i < max; ++i)\n        {\n            int n = snprintf(&buf[pos], sizeof(buf) - pos, \"%02x \", p[i]);\n            if (n <= 0) break;\n            pos += (size_t)n;\n            if (pos >= sizeof(buf)) break;\n        }\n        buf[pos > 0 ? pos - 1 : 0] = '\\0'; /* trim trailing space */\n        os_probe_log(\"  bytes[0..%zu]: %s\", max ? (max - 1) : 0, buf);\n    }\n}\n\n/* Preserve original OS_DirectoryClose semantics; add lightweight probes */\nint32 OS_DirectoryClose(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    os_probe_log(\"Enter OS_DirectoryClose dir_id=%lu\", (unsigned long)dir_id);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, dir_id, &token);\n    os_probe_log(\"After OS_ObjectIdGetById: return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log a small dump of the token to help correlate subsequent behavior */\n        os_probe_log_token(&token, sizeof(token));\n\n        os_probe_log(\"Calling OS_DirClose_Impl with token=%p\", (void *)&token);\n        return_code = OS_DirClose_Impl(&token);\n        os_probe_log(\"Returned from OS_DirClose_Impl: return_code=%ld\", (long)return_code);\n\n        /* Complete the operation via the common routine */\n        os_probe_log(\"Calling OS_ObjectIdFinalizeDelete with return_code=%ld, token=%p\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_probe_log(\"Returned from OS_ObjectIdFinalizeDelete: final_return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        os_probe_log(\"OS_ObjectIdGetById failed, skipping close/finalize. return_code=%ld\", (long)return_code);\n    }\n\n    os_probe_log(\"Exit OS_DirectoryClose dir_id=%lu return_code=%ld\", (unsigned long)dir_id, (long)return_code);\n\n    return return_code;\n}\n"
}