{
  "user_message": "An agent A claimed that the following UtList_NewNode code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UtList_NewNode.\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'Data' is declared as void * but is only read (passed as the source argument to memcpy). Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible \u2014 i.e. the parameter should be declared as const void *Data. (The destination AllocNode->Node.Data is writable and may remain non-const.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nUtList_NewNode: Entry\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : (nil)\n  Destination pointer    : (nil)\n----------------------------------------\nUtList_NewNode: After malloc\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aea930\n  Destination pointer    : (nil)\n----------------------------------------\nUtList_NewNode: Before memcpy\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aea930\n  Destination pointer    : 0x565357aea950\n----------------------------------------\nUtList_NewNode: After memcpy\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aea930\n  Destination pointer    : 0x565357aea950\n----------------------------------------\nUtList_NewNode: Return\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aea930\n  Destination pointer    : 0x565357aea950\n----------------------------------------\nUtList_NewNode: Entry\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : (nil)\n  Destination pointer    : (nil)\n----------------------------------------\nUtList_NewNode: After malloc\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aea9a0\n  Destination pointer    : (nil)\n----------------------------------------\nUtList_NewNode: Before memcpy\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aea9a0\n  Destination pointer    : 0x565357aea9c0\n----------------------------------------\nUtList_NewNode: After memcpy\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aea9a0\n  Destination pointer    : 0x565357aea9c0\n----------------------------------------\nUtList_NewNode: Return\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aea9a0\n  Destination pointer    : 0x565357aea9c0\n----------------------------------------\nUtList_NewNode: Entry\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : (nil)\n  Destination pointer    : (nil)\n----------------------------------------\nUtList_NewNode: After malloc\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aeaa10\n  Destination pointer    : (nil)\n----------------------------------------\nUtList_NewNode: Before memcpy\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aeaa10\n  Destination pointer    : 0x565357aeaa30\n----------------------------------------\nUtList_NewNode: After memcpy\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aeaa10\n  Destination pointer    : 0x565357aeaa30\n----------------------------------------\nUtList_NewNode: Return\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aeaa10\n  Destination pointer    : 0x565357aeaa30\n----------------------------------------\nUtList_NewNode: Entry\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : (nil)\n  Destination pointer    : (nil)\n----------------------------------------\nUtList_NewNode: After malloc\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aeaa80\n  Destination pointer    : (nil)\n----------------------------------------\nUtList_NewNode: Before memcpy\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aeaa80\n  Destination pointer    : 0x565357aeaaa0\n----------------------------------------\nUtList_NewNode: After memcpy\n  Data parameter pointer : 0x7ffce0076710\n  DataSize               : 64\n  AllocNode pointer      : 0x565357aeaa80\n  Destination pointer    : 0x565357\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The parameter Data is only read (passed as the source to memcpy) and is never modified; per MISRA C 2023 Rule 8.13 it should therefore be declared to point to a const-qualified type (i.e. const void *Data). Changing the prototype to const void *Data is safe here because memcpy takes a const void *source and no other code in this function writes through the Data pointer. (If API compatibility prevents the change, a documented justification is required; otherwise update the signature to remove the violation.)"
}