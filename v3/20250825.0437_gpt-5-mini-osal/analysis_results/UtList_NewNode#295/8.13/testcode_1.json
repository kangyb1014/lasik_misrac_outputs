{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'Data' is declared as void * but is only read (used as the source argument to memcpy). It should be declared as 'const void *Data' so the pointer points to a const-qualified type. Change signature to: UtListNode_t *UtList_NewNode(const void *Data, uint32 DataSize).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2953.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "UtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    FILE *log = NULL;\n    size_t allocSize = sizeof(union NodeAllocator) + (size_t)DataSize;\n    unsigned int i;\n    unsigned int toDump;\n    unsigned char *src = NULL;\n    unsigned char *dest = NULL;\n\n    /* Open log for append so multiple calls are recorded */\n    log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"=== UtList_NewNode entry ===\\n\");\n        fprintf(log, \"Parameters: Data=%p, DataSize=%u\\n\", Data, (unsigned)DataSize);\n    }\n\n    AllocNode = malloc(allocSize);\n    if (log) fprintf(log, \"malloc(%zu) -> %p\\n\", allocSize, (void *)AllocNode);\n\n    if (!AllocNode)\n    {\n        if (log) {\n            fprintf(log, \"malloc failed, returning NULL\\n\");\n            fprintf(log, \"=== UtList_NewNode exit ===\\n\\n\");\n            fclose(log);\n        }\n        return NULL;\n    }\n\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    if (log) fprintf(log, \"memset on union header (%zu bytes) done\\n\", sizeof(union NodeAllocator));\n\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    if (log) fprintf(log, \"Node.Data set to %p, Node.DataSize=%u\\n\", AllocNode->Node.Data, (unsigned)AllocNode->Node.DataSize);\n\n    /* Log up to the first 32 bytes of source data (if available) to capture what is being copied */\n    if (log)\n    {\n        if (Data && DataSize > 0)\n        {\n            src = (unsigned char *)Data;\n            toDump = (DataSize < 32u) ? (unsigned)DataSize : 32u;\n            fprintf(log, \"About to memcpy %u bytes from source %p. First %u bytes (hex):\", (unsigned)DataSize, Data, toDump);\n            for (i = 0; i < toDump; ++i)\n            {\n                fprintf(log, \" %02X\", src[i]);\n            }\n            fprintf(log, \"\\n\");\n        }\n        else\n        {\n            fprintf(log, \"About to memcpy: no source data (Data=%p, DataSize=%u)\\n\", Data, (unsigned)DataSize);\n        }\n    }\n\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    if (log)\n    {\n        dest = (unsigned char *)AllocNode->Node.Data;\n        toDump = (DataSize < 32u) ? (unsigned)DataSize : 32u;\n        fprintf(log, \"After memcpy, dest %p first %u bytes (hex):\", dest, toDump);\n        for (i = 0; i < toDump; ++i)\n        {\n            fprintf(log, \" %02X\", dest[i]);\n        }\n        fprintf(log, \"\\n\");\n    }\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    if (log)\n    {\n        fprintf(log, \"Node.Next=%p, Node.Prev=%p\\n\", AllocNode->Node.Next, AllocNode->Node.Prev);\n        fprintf(log, \"Returning node %p\\n\", (void *)&AllocNode->Node);\n        fprintf(log, \"=== UtList_NewNode exit ===\\n\\n\");\n        fclose(log);\n    }\n\n    return &AllocNode->Node;\n}\n"
}