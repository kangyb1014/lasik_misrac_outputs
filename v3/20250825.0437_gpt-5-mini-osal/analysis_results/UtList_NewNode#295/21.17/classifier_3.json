{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nAllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The code does not guard the size computation sizeof(union NodeAllocator) + DataSize against overflow. If DataSize is large enough that the sum wraps around size_t, malloc will allocate a much smaller block than intended and the subsequent memcpy(AllocNode->Node.Data, Data, DataSize) will write beyond the allocated object. Example: if sizeof(union NodeAllocator) == 32 and DataSize == SIZE_MAX - 16, the sum wraps to 15; malloc(15) returns a 15\u2011byte block but memcpy will copy DataSize bytes, overrunning the allocation and violating Rule 21.17. (Also note: if malloc returns NULL, the later memset/memcpy dereference NULL \u2014 another defect to check, though distinct from a pure buffer\u2011size arithmetic overflow.)"
}