{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code does not guard the size computation sizeof(union NodeAllocator) + DataSize against overflow. If DataSize is large enough that the sum wraps around size_t, malloc will allocate a much smaller block than intended and the subsequent memcpy(AllocNode->Node.Data, Data, DataSize) will write beyond the allocated object. Example: if sizeof(union NodeAllocator) == 32 and DataSize == SIZE_MAX - 16, the sum wraps to 15; malloc(15) returns a 15\u2011byte block but memcpy will copy DataSize bytes, overrunning the allocation and violating Rule 21.17. (Also note: if malloc returns NULL, the later memset/memcpy dereference NULL \u2014 another defect to check, though distinct from a pure buffer\u2011size arithmetic overflow.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2959.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Minimal typedefs so this test code is self-contained and compilable. */\ntypedef unsigned int uint32;\n\ntypedef struct UtListNode\n{\n    void *Data;\n    uint32 DataSize;\n    struct UtListNode *Next;\n    struct UtListNode *Prev;\n} UtListNode_t;\n\n/* Simple logging helper that appends lines to /tmp/logs/2959.txt. */\nstatic void UtList_Logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2959.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, there's nothing more we can do here. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    /* Log entry and parameters. */\n    UtList_Logf(\"UtList_NewNode entry: Data=%p DataSize=%u\", Data, (unsigned)DataSize);\n\n    /* Compute sizes in size_t to observe potential wrap/overflow. */\n    size_t header_size = sizeof(union NodeAllocator);\n    size_t requested = header_size + (size_t)DataSize;\n\n    UtList_Logf(\"Computed sizes: header_size=%zu requested_total=%zu\", header_size, requested);\n\n    if (requested < header_size)\n    {\n        UtList_Logf(\"SIZE_ARITHMETIC_OVERFLOW_DETECTED: requested (%zu) < header_size (%zu)\", requested, header_size);\n    }\n    else\n    {\n        UtList_Logf(\"No size wrap detected: requested >= header_size\");\n    }\n\n    /* Preserve original allocation behavior (including the potential wrap) */\n    AllocNode = malloc(requested);\n    UtList_Logf(\"malloc(%zu) returned %p\", requested, (void *)AllocNode);\n\n    /* Log just before the first dereference (memset). This ensures the log is flushed\n       even if the subsequent operations crash due to the original bug. */\n    UtList_Logf(\"About to memset(AllocNode=%p, 0, header_size=%zu)\", (void *)AllocNode, header_size);\n\n    /* Original behavior retained: zero-initialize only the header portion. */\n    memset(AllocNode, 0, header_size);\n    UtList_Logf(\"memset completed\");\n\n    /* Assign the Data pointer and DataSize as in the original code. Log the assignments. */\n    AllocNode->Node.Data     = &AllocNode[1];\n    UtList_Logf(\"Assigned Node.Data=%p (points to &AllocNode[1])\", AllocNode->Node.Data);\n\n    AllocNode->Node.DataSize = DataSize;\n    UtList_Logf(\"Assigned Node.DataSize=%u\", (unsigned)AllocNode->Node.DataSize);\n\n    /* Log details about the forthcoming memcpy so the size mismatch is visible in logs. */\n    UtList_Logf(\"About to memcpy(dest=%p, src=%p, n=%u)\", AllocNode->Node.Data, Data, (unsigned)DataSize);\n\n    /* Perform the copy as originally written (this is the site that can overrun the allocation\n       when requested wrapped during the size computation). */\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n    UtList_Logf(\"memcpy completed\");\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n    UtList_Logf(\"Node.Next and Node.Prev initialized to %p\", (void *)&AllocNode->Node);\n\n    UtList_Logf(\"UtList_NewNode exit: returning %p\", (void *)&AllocNode->Node);\n\n    return &AllocNode->Node;\n}\n"
}