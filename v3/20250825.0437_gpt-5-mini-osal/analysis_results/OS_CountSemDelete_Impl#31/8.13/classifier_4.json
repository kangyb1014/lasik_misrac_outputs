{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete_Impl:\n```c\nint32 OS_CountSemDelete_Impl(const OS_object_token_t *token)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_destroy(&impl->id) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemDelete_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nsem_destroy(&impl->id)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The function sem_destroy has prototype int sem_destroy(sem_t *), which requires a pointer to a mutable sem_t because the semaphore object is modified/destroyed. Here impl is a non-const pointer to OS_impl_countsem_internal_record_t, so &impl->id yields a sem_t * \u2014 this is appropriate and does not violate Rule 8.13. A violation would occur if impl or the id member were declared const (e.g. const OS_impl_countsem_internal_record_t *impl or const sem_t id) such that a pointer to a const-qualified type would be supplied where a non-const pointer is required (or a const-qualified pointer used where modification is needed)."
}