{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete_Impl:\n```c\nint32 OS_CountSemDelete_Impl(const OS_object_token_t *token)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_destroy(&impl->id) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemDelete_Impl:\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments in the provided code indicate direct or indirect recursion. Specifically:\n- OS_CountSemDelete_Impl only performs three operations: it obtains a pointer into a static table via the OS_OBJECT_TABLE_GET macro, calls sem_destroy(&impl->id), and returns a status. None of these are calls back to OS_CountSemDelete_Impl.\n- The OS_OBJECT_TABLE_GET macro expands to taking an index via OS_ObjectIndexFromToken(&(tok)) and indexing the static array; OS_ObjectIndexFromToken is a simple static inline accessor that returns token->obj_idx and does not call any other functions (certainly not OS_CountSemDelete_Impl).\n- sem_destroy is an external POSIX API call; there is no indication in the provided code that it would call back into application code (and no function pointers/callbacks are invoked here that could cause indirect recursion).\n- Accessing the static table OS_impl_count_sem_table is a plain array lookup and does not invoke functions.\n- No function pointers, callbacks, or other mechanisms that could create an indirect call chain back to OS_CountSemDelete_Impl are present in the shown code.\n\nTherefore there are no fragments that require investigation for Rule 17.2 in the supplied code."
}