{
  "user_message": "An agent A claimed that the following OS_FileSys_FindVirtMountPoint code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileSys_FindVirtMountPoint.\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter ref is declared as void * but is only used as a pointer to read characters (it is immediately cast to const char *). According to Rule 8.13 the pointer should be const-qualified whenever possible \u2014 e.g. change the prototype to bool OS_FileSys_FindVirtMountPoint(const void *ref, const OS_object_token_t *token, const OS_common_record_t *obj).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_FileSys_FindVirtMountPoint:\ntypedef struct\n{\n    char device_name[OS_FS_DEV_NAME_LEN]; /**< The name of the underlying block device, if applicable */\n    char volume_name[OS_FS_VOL_NAME_LEN];\n    char system_mountpt[OS_MAX_LOCAL_PATH_LEN]; /**< The name/prefix where the contents are accessible in the host\n                                                   operating system */\n    char virtual_mountpt[OS_MAX_PATH_LEN]; /**< The name/prefix in the OSAL Virtual File system exposed to applications\n                                            */\n    char *            address;\n    size_t            blocksize;\n    osal_blockcount_t numblocks;\n    uint8             flags;\n    uint8             fstype;\n} OS_filesys_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_filesys_internal_record_t OS_filesys_table[LOCAL_NUM_OBJECTS]\n...\n#define OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL 0x20\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct OS_common_record OS_common_record_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct in the common case. In the body of OS_FileSys_FindVirtMountPoint the parameter ref is immediately cast to const char * and only read from; the function does not modify the object pointed to by ref. MISRA C 2023 Rule 8.13 requires that pointers point to a const-qualified type whenever possible, so the parameter should be declared const-qualified (for example const void *ref or const char *ref) to reflect the read-only usage.\n\nOne important caveat: if this function must match an existing callback or API signature that requires a plain void * (i.e. it is used via a function pointer type that expects void *), then the prototype cannot be changed and the current code is required for compatibility. In that case the apparent violation is unavoidable. Absent such a signature constraint, changing the parameter to const void *ref (or const char *) fixes the violation and is source-compatible for callers (non-const pointers may still be passed to a const parameter)."
}