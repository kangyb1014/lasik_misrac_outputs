{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If the search target (ref) is a shorter buffer or not null-terminated and shorter than mplen then the code can access beyond the target buffer. Example: filesys->virtual_mountpt == \"/mnt/abc\" so mplen == 8, but target points to a buffer containing \"/mnt\" (length 4) or a non-terminated buffer smaller than 8. The prior strncmp(target, filesys->virtual_mountpt, mplen) would already read beyond the bounds of target (violating Rule 21.17) and the subsequent access target[mplen] would also be out-of-bounds. There is no check that target is at least mplen+1 bytes long, so the code can violate the rule in this scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1759.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stdarg.h>\n\n/*\n * Probe logger: append human-readable logs to /tmp/logs/1759.txt\n */\nstatic void OS_FileSys_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1759.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    OS_FileSys_LogProbe(\"ENTER: OS_FileSys_FindVirtMountPoint ref=%p token=%p obj=%p\", (void *)ref, (const void *)token, (const void *)obj);\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    OS_FileSys_LogProbe(\"filesys ptr=%p\", (void *)filesys);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        OS_FileSys_LogProbe(\"EXIT: not a virtual mount (flags=0x%08x)\", (unsigned)filesys->flags);\n        return false;\n    }\n\n    OS_FileSys_LogProbe(\"flags indicate virtual mount (flags=0x%08x)\", (unsigned)filesys->flags);\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /* Safely capture the virtual_mountpt up to mplen bytes for logging */\n    {\n        char vbuf[sizeof(filesys->virtual_mountpt) + 1];\n        size_t vcount = (mplen < sizeof(filesys->virtual_mountpt)) ? mplen : (sizeof(filesys->virtual_mountpt) - 1);\n        if (vcount > 0)\n        {\n            memcpy(vbuf, filesys->virtual_mountpt, vcount);\n        }\n        vbuf[vcount] = '\\0';\n        OS_FileSys_LogProbe(\"virtual_mountpt (len reported) = %zu, safe-copied = '%s'\", mplen, vbuf);\n    }\n\n    /* Preserve original short-circuit behavior: do not call strncmp unless mplen checks pass */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt))\n    {\n        OS_FileSys_LogProbe(\"EXIT: invalid mplen (mplen=%zu, sizeof= %zu)\", mplen, sizeof(filesys->virtual_mountpt));\n        return false;\n    }\n\n    /* Now perform the same comparison as original code and log the result */\n    {\n        OS_FileSys_LogProbe(\"About to call strncmp(target=%p, virtual_mountpt=%p, mplen=%zu)\", (void *)target, (void *)filesys->virtual_mountpt, mplen);\n        int cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n        OS_FileSys_LogProbe(\"strncmp result = %d\", cmp);\n\n        if (cmp != 0)\n        {\n            OS_FileSys_LogProbe(\"EXIT: substring not matching (strncmp != 0)\");\n            return false;\n        }\n    }\n\n    /* Final boundary check: this will evaluate exactly as the original code does */\n    {\n        unsigned char ch = (unsigned char)target[mplen];\n        bool result = (ch == '/' || ch == 0);\n        OS_FileSys_LogProbe(\"boundary check: target[%zu] (as unsigned) = 0x%02x ('%c' if printable) => result=%s\",\n                            mplen, (unsigned)ch, (ch >= 32 && ch < 127) ? (char)ch : '?', result ? \"true\" : \"false\");\n        OS_FileSys_LogProbe(\"EXIT: returning %s\", result ? \"true\" : \"false\");\n        return result;\n    }\n}\n"
}