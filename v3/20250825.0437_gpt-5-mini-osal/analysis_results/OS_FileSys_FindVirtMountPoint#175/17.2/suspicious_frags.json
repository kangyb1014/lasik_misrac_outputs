{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_FileSys_FindVirtMountPoint:\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nstatic inline size_t OS_strnlen(const char *s, size_t maxlen)\n{\n    const char *end = (const char *)memchr(s, 0, maxlen);\n    if (end != NULL)\n    {\n        /* actual length of string is difference */\n        maxlen = end - s;\n    }\n    return maxlen;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}",
    "strncmp(target, filesys->virtual_mountpt, mplen) != 0",
    "static inline size_t OS_strnlen(const char *s, size_t maxlen)\n{\n    const char *end = (const char *)memchr(s, 0, maxlen);\n    if (end != NULL)\n    {\n        /* actual length of string is difference */\n        maxlen = end - s;\n    }\n    return maxlen;\n}",
    "mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));",
    "filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);",
    "const char *end = (const char *)memchr(s, 0, maxlen);"
  ],
  "explanation": "Only expressions that invoke functions (or macros that may expand to function calls) can participate in direct or indirect recursion. The fragments above cover all function-like invocations present in the supplied code and the related snippets: the OS_OBJECT_TABLE_GET usage (macro/lookup), the call to OS_strnlen (and its implementation), strncmp, and the memchr call used by OS_strnlen. These are the only places where control transfers to other functions; they therefore warrant investigation to ensure no call chain eventually re-enters OS_FileSys_FindVirtMountPoint.\n\nOther parts of the code do not need investigation for Rule 17.2 because they contain no function calls and cannot introduce recursion: reading and testing a flag ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0), the assignment and use of the local variable mplen, sizeof() expressions, the substring checks (mplen == 0, mplen >= sizeof(...)), the early returns (return false;), and the final direct character-index test (target[mplen] == '/' || target[mplen] == 0) are plain computations or memory accesses and cannot be part of a call chain that would constitute recursion. These non-call operations therefore do not need further inspection for Rule 17.2."
}