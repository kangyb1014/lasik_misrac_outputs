{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdGetBySearch takes a parameter 'void *arg' but is used with a const pointer: OS_TaskFindIdBySystemData passes (void *)sysdata where sysdata is 'const void *'. The match function OS_TaskIdMatchSystemData_Impl treats the argument as const (casts to 'const pthread_t *' and does not modify it). Casting away const in the caller and declaring the parameter non-const means the pointer does not point to a const-qualified type when it could, violating MISRA C 2023 Rule 8.13. The signature should be changed to accept 'const void *arg' (and the OS_ObjectMatchFunc_t prototype adjusted accordingly) to avoid discarding the const qualifier.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskFindIdBySystemData code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2573.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskFindIdBySystemData as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskFindIdBySystemData:\n```c\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskFindIdBySystemData code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging helper that appends messages to /tmp/logs/2573.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2573.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* Try to create the directory and reopen */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        fp = fopen(\"/tmp/logs/2573.txt\", \"a\");\n    }\n\n    if (fp != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(fp, fmt, ap);\n        fprintf(fp, \"\\n\");\n        va_end(ap);\n        fclose(fp);\n    }\n}\n\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    probe_log(\"ENTER: OS_TaskFindIdBySystemData(task_id=%p, sysdata=%p (const), sysdata_size=%zu)\",\n              (void *)task_id, sysdata, sysdata_size);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    probe_log(\"After OS_TaskValidateSystemData_Impl: return_code=%d\", return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"EXIT: Validation failed, returning %d\", return_code);\n        return return_code;\n    }\n\n    probe_log(\"Calling OS_ObjectIdGetBySearch with cast (void*)sysdata -> %p (originally const %p)\", (void *)sysdata, sysdata);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n    probe_log(\"After OS_ObjectIdGetBySearch: return_code=%d, token_addr=%p\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        /* Try to log the assigned id in a portable way by casting through uintptr_t */\n        probe_log(\"Match found: assigned task_id pointer=%p, value(as uintptr)=%\" PRIuMAX,\n                  (void *)task_id, (uintmax_t)(uintptr_t)(*task_id));\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Released token at %p\", (void *)&token);\n    }\n    else\n    {\n        probe_log(\"No match found or error, returning %d\", return_code);\n    }\n\n    probe_log(\"EXIT: OS_TaskFindIdBySystemData returning %d\", return_code);\n    return return_code;\n}\n"
}