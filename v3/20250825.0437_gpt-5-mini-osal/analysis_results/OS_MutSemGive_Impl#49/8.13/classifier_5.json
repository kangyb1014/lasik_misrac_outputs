{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGive_Impl:\n```c\nint32 OS_MutSemGive_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n     ** Unlock the mutex\n     */\n    status = pthread_mutex_unlock(&(impl->id));\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemGive_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t\n...\nOS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntypedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The fragment defines a struct with a pthread_mutex_t member; Rule 8.13 concerns pointer types, but this declaration contains no pointer. In the surrounding code a non-const OS_impl_mutex_internal_record_t * is required because pthread_mutex_unlock operates on a mutable pthread_mutex_t; qualifying the pointer or the mutex member as const would prevent correct use. A possible violation scenario would be if a pointer-to-object that is not modified (read-only) were declared as a non-const pointer instead of a pointer-to-const (e.g., using OS_impl_mutex_internal_record_t *impl when impl is only read); that is not the case here."
}