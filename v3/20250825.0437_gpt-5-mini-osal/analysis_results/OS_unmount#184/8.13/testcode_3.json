{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code explicitly casts a const char * (mountpoint) to void *: (void *)mountpoint when calling OS_ObjectIdGetBySearch. This discards the const qualifier and allows a non-const pointer type to be passed, violating Rule 8.13. The correct approach is to preserve const qualification (e.g. change OS_ObjectIdGetBySearch to accept const void *arg and the match callback to accept const void *ref), or otherwise avoid casting away const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1843.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_unmount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_unmount:\n```c\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_unmount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\nstatic void OS_unmount_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1843.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Log entry and parameter state */\n    if (mountpoint != NULL)\n    {\n        size_t _len = strnlen(mountpoint, 256);\n        OS_unmount_log(\"OS_unmount: entry mountpoint=%p, len=%zu, str='%.*s'\", (void *)mountpoint, _len, (int)_len, mountpoint);\n    }\n    else\n    {\n        OS_unmount_log(\"OS_unmount: entry mountpoint=NULL\");\n    }\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* Log the upcoming cast that discards const qualification */\n    OS_unmount_log(\"OS_unmount: about to call OS_ObjectIdGetBySearch; casting const char* -> void* (this discards const qualifier)\");\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    OS_unmount_log(\"OS_unmount: OS_ObjectIdGetBySearch returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        OS_unmount_log(\"OS_unmount: token=%llu, filesys_ptr=%p, filesys_flags=0x%08x\",\n                       (unsigned long long)token, (void *)filesys,\n                       (unsigned int)(filesys ? filesys->flags : 0U));\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            OS_unmount_log(\"OS_unmount: filesys state check failed (flags=0x%08x)\", (unsigned int)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            OS_unmount_log(\"OS_unmount: state ok, calling OS_FileSysUnmountVolume_Impl for token=%llu\", (unsigned long long)token);\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n            OS_unmount_log(\"OS_unmount: OS_FileSysUnmountVolume_Impl returned %d\", return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            unsigned int old_flags = filesys->flags;\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n            OS_unmount_log(\"OS_unmount: updated filesys flags from 0x%08x to 0x%08x\",\n                           (unsigned int)old_flags, (unsigned int)filesys->flags);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_unmount_log(\"OS_unmount: released token=%llu\", (unsigned long long)token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_unmount_log(\"OS_unmount: finalizing with error, mapping return_code %d -> OS_ERR_NAME_NOT_FOUND\", return_code);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n    else\n    {\n        OS_unmount_log(\"OS_unmount: completed successfully\");\n    }\n\n    OS_unmount_log(\"OS_unmount: returning %d\", return_code);\n\n    return return_code;\n}\n"
}