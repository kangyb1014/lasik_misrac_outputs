{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'StubPtr' is declared as 'UT_StubTableEntry_t *' but is only used for reading the object (Count = StubPtr->Data.Rc.Count;). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. Declaring it as 'const UT_StubTableEntry_t *StubPtr' (and leaving the call to UT_GetStubEntry unchanged, since a non-const-to-const pointer assignment is allowed) would avoid this violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetStubCount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3063.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetStubCount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetStubCount:\n```c\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        Count = StubPtr->Data.Rc.Count;\n    }\n    else\n    {\n        Count = 0;\n    }\n\n    return Count;\n}\n```\n</target_code>\nPlease provide the modified UT_GetStubCount code.\n",
  "test_code": "typedef struct FILE FILE;\nextern FILE *fopen(const char *, const char *);\nextern int fprintf(FILE *, const char *, ...);\nextern int fclose(FILE *);\n\nstatic void UT_LogStubProbe(const char *stage, UT_StubTableEntry_t *StubPtr, uint32 Count)\n{\n    FILE *f = fopen(\"/tmp/logs/3063.txt\", \"a\");\n    if (f != (FILE *)0)\n    {\n        if (StubPtr != (UT_StubTableEntry_t *)0)\n        {\n            /* Log pointer address, the stored Count field, and the value that will be returned */\n            (void)fprintf(f, \"%s: StubPtr=%p, CountField=%u, ReturnedCount=%u\\n\",\n                          stage, (void *)StubPtr, (unsigned)StubPtr->Data.Rc.Count, (unsigned)Count);\n        }\n        else\n        {\n            (void)fprintf(f, \"%s: StubPtr=NULL, ReturnedCount=%u\\n\", stage, (unsigned)Count);\n        }\n        (void)fclose(f);\n    }\n}\n\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n\n    /* Probe after obtaining the stub entry to capture whether the pointer is NULL */\n    UT_LogStubProbe(\"AfterGetStubEntry\", StubPtr, 0u);\n\n    if (StubPtr != NULL)\n    {\n        Count = StubPtr->Data.Rc.Count;\n        /* Probe before returning non-NULL case to record the value read from the structure */\n        UT_LogStubProbe(\"BeforeReturn_NonNull\", StubPtr, Count);\n    }\n    else\n    {\n        Count = 0;\n        /* Probe before returning NULL case */\n        UT_LogStubProbe(\"BeforeReturn_Null\", StubPtr, Count);\n    }\n\n    return Count;\n}\n"
}