{
  "user_message": "An agent A claimed that the following OS_FdSet_ConvertOut_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_FdSet_ConvertOut_Impl.\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter OS_set is declared as fd_set * but is only inspected (used with FD_ISSET) and not modified. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible (e.g. const fd_set *OS_set). As written the non-const pointer is unnecessary and thus violates the rule. If the FD_ISSET macro/prototype requires a non-const fd_set *, a const-correct wrapper or an explicit, documented cast should be used instead of leaving the parameter non-const.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_FdSet_ConvertOut_Impl the parameter OS_set is only inspected (via FD_ISSET) and never used to modify the underlying fd_set, so by MISRA C 2023 Rule 8.13 the pointer should be declared to point to a const-qualified type (e.g. const fd_set *OS_set). This makes the intent clear and prevents accidental modification. The only caveat is compatibility with FD_ISSET implementations: if FD_ISSET is a macro (as it commonly is) declaring OS_set as const works fine; if an implementation requires a non-const fd_set * (e.g. a library function prototype), then an explicit, documented cast or a small wrapper should be used when calling that API. Either way the present non-const parameter is needless and constitutes a violation of Rule 8.13."
}