{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter OS_set is declared as fd_set * but is only inspected (used with FD_ISSET) and not modified. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible (e.g. const fd_set *OS_set). As written the non-const pointer is unnecessary and thus violates the rule. If the FD_ISSET macro/prototype requires a non-const fd_set *, a const-correct wrapper or an explicit, documented cast should be used instead of leaving the parameter non-const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FdSet_ConvertOut_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/803.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FdSet_ConvertOut_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertOut_Impl:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_FdSet_ConvertOut_Impl code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    /* Open log file for append. If it fails, continue without logging to avoid\n       interfering with normal operation. */\n    FILE *log = fopen(\"/tmp/logs/803.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTRY: OS_FdSet_ConvertOut_Impl: OS_set=%p OSAL_set=%p\\n\",\n                (void *)OS_set, (void *)OSAL_set);\n    }\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        if (log != NULL)\n        {\n            fprintf(log, \" offset=%lu initial_objids=0x%02X\\n\", (unsigned long)offset, (unsigned int)objids);\n        }\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if (log != NULL)\n            {\n                fprintf(log, \"  bit=%lu id=%llu objids=0x%02X\\n\",\n                        (unsigned long)bit, (unsigned long long)id, (unsigned int)objids);\n            }\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (log != NULL)\n                {\n                    /* Log the osfd value and the result of FD_ISSET check. */\n                    int fdset_is_set = FD_ISSET(osfd, OS_set);\n                    fprintf(log, \"   -> osfd=%d FD_ISSET=%d\\n\", osfd, fdset_is_set);\n                }\n\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    if (log != NULL)\n                    {\n                        unsigned int before = (unsigned int)OSAL_set->object_ids[offset];\n                        unsigned int after;\n\n                        OSAL_set->object_ids[offset] &= ~(1 << bit);\n                        after = (unsigned int)OSAL_set->object_ids[offset];\n\n                        fprintf(log, \"    CLEAR bit=%lu at offset=%lu: before=0x%02X after=0x%02X\\n\",\n                                (unsigned long)bit, (unsigned long)offset, before, after);\n                    }\n                    else\n                    {\n                        OSAL_set->object_ids[offset] &= ~(1 << bit);\n                    }\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: OS_FdSet_ConvertOut_Impl\\n\\n\");\n        fclose(log);\n    }\n}\n"
}