{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetIdByName:\n```c\nint32 OS_BinSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nint32 OS_BinSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The function itself does not call any <string.h> routines \u2014 it only checks pointers and forwards sem_name to OS_ObjectIdFindByName. Therefore this fragment does not itself violate Rule 21.17. A concrete violation scenario would be: if the implementation of OS_ObjectIdFindByName uses a string.h function (e.g. strlen, strcpy, strncpy, strcat, memcpy, etc.) on sem_name without ensuring sem_name is a NUL-terminated string or without checking destination buffer sizes, then those calls could read or write beyond the bounds of the referenced objects (for example, calling strlen(sem_name) when sem_name is not NUL-terminated, or strcpy(dest, sem_name) when dest is smaller than the length of sem_name), which would violate Rule 21.17."
}