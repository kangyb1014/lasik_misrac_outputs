{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the prototype of OS_ObjectIdFindByName declares the name parameter as a non-const pointer (e.g. int32 OS_ObjectIdFindByName(uint32 type, char *name, osal_id_t *id)); passing sem_name (const char *) to such a parameter discards the const qualifier and violates MISRA C 2023 Rule 8.13. If, however, OS_ObjectIdFindByName is declared to take a const char * for its name parameter, then no rule violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1193.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetIdByName:\n```c\nint32 OS_BinSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper. Appends human-readable logs to /tmp/logs/1193.txt\n * Keeps the original logic of OS_BinSemGetIdByName unchanged; only records\n * control flow and state to help reproduce the const-discard scenario.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1193.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\nint32 OS_BinSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Log entry and parameters */\n    probe_log(\"ENTRY: OS_BinSemGetIdByName called\");\n    probe_log(\"  sem_id pointer = %p\", (void *)sem_id);\n    probe_log(\"  sem_name pointer = %p\", (const void *)sem_name);\n    if (sem_name != NULL)\n    {\n        /* Log the string content pointed to by sem_name (const-qualified) */\n        probe_log(\"  sem_name content = '%s'\", sem_name);\n    }\n    else\n    {\n        probe_log(\"  sem_name is NULL\");\n    }\n\n    /* Check parameters (original logic preserved) */\n    OS_CHECK_POINTER(sem_id);\n    probe_log(\"  After OS_CHECK_POINTER(sem_id)\");\n    OS_CHECK_POINTER(sem_name);\n    probe_log(\"  After OS_CHECK_POINTER(sem_name)\");\n\n    /* Log the intention to call OS_ObjectIdFindByName. This is the call\n     * that may trigger the const-discard violation if its prototype is\n     * declared as taking a non-const char * for the name parameter.\n     */\n    probe_log(\"  About to call OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id)\");\n    probe_log(\"    Passing sem_name pointer = %p (const char *)\", (const void *)sem_name);\n\n    /* Original call preserved exactly */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    /* Log return state */\n    probe_log(\"  OS_ObjectIdFindByName returned %d\", (int)return_code);\n    probe_log(\"  sem_id pointer (after call) = %p\", (void *)sem_id);\n\n    probe_log(\"EXIT: OS_BinSemGetIdByName returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}