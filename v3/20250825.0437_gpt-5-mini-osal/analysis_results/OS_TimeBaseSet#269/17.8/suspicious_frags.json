{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseSet:\n```c\nint32 OS_TimeBaseSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Internally the implementation represents the interval as a\n     * signed 32-bit integer, but the parameter is unsigned because a negative interval\n     * does not make sense.\n     *\n     * Note that the units are intentionally left unspecified.  The external sync period\n     * could be measured in microseconds or hours -- it is whatever the application requires.\n     */\n    ARGCHECK(start_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Need to take the time base lock to ensure that no ticks are currently being processed */\n        OS_TimeBaseLock_Impl(&token);\n\n        return_code = OS_TimeBaseSet_Impl(&token, start_time, interval_time);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Save the value since we were successful */\n            timebase->nominal_start_time    = start_time;\n            timebase->nominal_interval_time = interval_time;\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TimeBaseSet:\n#define ARGCHECK(cond, errcode) if(!(cond)){returnerrcode;}\n...\nint32 OS_TimeBaseSet_Impl(const OS_object_token_t *token, uint32 start_time, uint32 interval_time)\n{\n    OS_impl_timebase_internal_record_t *local;\n    struct itimerspec                   timeout;\n    int32                               return_code;\n    int                                 status;\n    OS_timebase_internal_record_t *     timebase;\n\n    local       = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n    timebase    = OS_OBJECT_TABLE_GET(OS_timebase_table, *token);\n    return_code = OS_SUCCESS;\n\n    /* There is only something to do here if we are generating a simulated tick */\n    if (local->assigned_signal != 0)\n    {\n        /*\n        ** Convert from Microseconds to timespec structures\n        */\n        memset(&timeout, 0, sizeof(timeout));\n        OS_UsecToTimespec(start_time, &timeout.it_value);\n        OS_UsecToTimespec(interval_time, &timeout.it_interval);\n\n        /*\n        ** Program the real timer\n        */\n        status = timer_settime(local->host_timerid, 0, /* Flags field can be zero */\n                               &timeout,               /* struct itimerspec */\n                               NULL);                  /* Oldvalue */\n\n        if (status < 0)\n        {\n            OS_DEBUG(\"Error in timer_settime: %s\\n\", strerror(errno));\n            return_code = OS_TIMER_ERR_INTERNAL;\n        }\n        else if (interval_time > 0)\n        {\n            timebase->accuracy_usec = (uint32)((timeout.it_interval.tv_nsec + 999) / 1000);\n        }\n        else\n        {\n            timebase->accuracy_usec = (uint32)((timeout.it_value.tv_nsec + 999) / 1000);\n        }\n    }\n\n    local->reset_flag = (return_code == OS_SUCCESS);\n    return return_code;\n}\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nstatic inline osal_objtype_t OS_ObjectIdToType_Impl(osal_id_t id)\n{\n    return (OS_ObjectIdToInteger(id) >> OS_OBJECT_TYPE_SHIFT);\n}\n...\nosal_id_t OS_TaskGetId_Impl(void)\n{\n    OS_VoidPtrValueWrapper_t self_record;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    self_record.opaque_arg = pthread_getspecific(POSIX_GlobalVars.ThreadKey);\n\n    return self_record.id;\n}\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nvoid OS_TimeBaseLock_Impl(const OS_object_token_t *token)\n{\n    OS_impl_timebase_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n\n    pthread_mutex_lock(&impl->handler_mutex);\n}\n...\nvoid OS_TimeBaseUnlock_Impl(const OS_object_token_t *token)\n{\n    OS_impl_timebase_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n\n    pthread_mutex_unlock(&impl->handler_mutex);\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_timebase_internal_record_t OS_timebase_table[OS_MAX_TIMEBASES]\n...\ntypedef struct\n{\n    char           timebase_name[OS_MAX_API_NAME];\n    OS_TimerSync_t external_sync;\n    uint32         accuracy_usec;\n    osal_id_t      first_cb;\n    uint32         freerun_time;\n    uint32         nominal_start_time;\n    uint32         nominal_interval_time;\n} OS_timebase_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I reviewed all uses of the function parameters in the provided code and related symbols. Rule 17.8 forbids modifying a function parameter itself (for example assigning to the parameter variable), but allows modifying the object pointed to by a pointer parameter. No assignments to any parameter variables are present in the code fragments: - OS_TimeBaseSet parameters (timer_id, start_time, interval_time) are only read and/or stored into object members; they are never assigned to. - OS_TimeBaseSet_Impl parameter token is a pointer-to-const and is only dereferenced (used to index tables); the code never assigns to the token parameter itself. - OS_ObjectIdGetById uses token to store members (token->obj_idx, token->obj_id) \u2014 these modify the object pointed to, which is permitted. - OS_TimeBaseLock_Impl / OS_TimeBaseUnlock_Impl and OS_ObjectIndexFromToken only dereference token; they do not reassign the parameter. - The OS_OBJECT_TABLE_GET macro takes &(tok) but does not perform any assignment to a parameter; it merely computes an address based on the token. - Other helper calls (OS_ObjectIdTransactionInit, OS_ObjectIdConvertToken, OS_ObjectIdTransactionCancel, OS_UsecToTimespec, timer_settime, etc.) are invoked with parameters but no evidence here shows that the pointer parameters themselves are reassigned within these call sites. Therefore there are no code fragments in the supplied code that appear to violate MISRA C 2023 Rule 17.8; nothing needs further investigation with respect to modifying function parameters."
}