{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memset(token, 0, sizeof(*token)) can write outside the object if the caller passes an invalid pointer (for example token == NULL) or a pointer to a smaller buffer than sizeof(OS_object_token_t). For example, if some caller invokes OS_ObjectIdTransactionInit(lock_mode, idtype, NULL) then memset will dereference a NULL pointer and perform out\u2011of\u2011bounds access, violating the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseSet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2699.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseSet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseSet:\n```c\nint32 OS_TimeBaseSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Internally the implementation represents the interval as a\n     * signed 32-bit integer, but the parameter is unsigned because a negative interval\n     * does not make sense.\n     *\n     * Note that the units are intentionally left unspecified.  The external sync period\n     * could be measured in microseconds or hours -- it is whatever the application requires.\n     */\n    ARGCHECK(start_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Need to take the time base lock to ensure that no ticks are currently being processed */\n        OS_TimeBaseLock_Impl(&token);\n\n        return_code = OS_TimeBaseSet_Impl(&token, start_time, interval_time);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Save the value since we were successful */\n            timebase->nominal_start_time    = start_time;\n            timebase->nominal_interval_time = interval_time;\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseSet code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2699.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_TimeBaseSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and input state */\n    OS_Probe_Log(\"OS_TimeBaseSet ENTRY: timer_id=%lu start_time=%lu interval_time=%lu\",\n                 (unsigned long)timer_id, (unsigned long)start_time, (unsigned long)interval_time);\n    OS_Probe_Log(\"Local token address=%p sizeof(token)=%lu\", (void *)&token, (unsigned long)sizeof(token));\n\n    /*\n     * Internally the implementation represents the interval as a\n     * signed 32-bit integer, but the parameter is unsigned because a negative interval\n     * does not make sense.\n     *\n     * Note that the units are intentionally left unspecified.  The external sync period\n     * could be measured in microseconds or hours -- it is whatever the application requires.\n     */\n    OS_Probe_Log(\"ARGCHECK: about to validate start_time and interval_time\");\n    ARGCHECK(start_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_Probe_Log(\"OS_ObjectIdToType_Impl returned objtype=%ld\", (long)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_Probe_Log(\"OS_TimeBaseSet: called from a timebase context - incorrect state\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    OS_Probe_Log(\"Calling OS_ObjectIdGetById with token_addr=%p sizeof(token)=%lu\",\n                 (void *)&token, (unsigned long)sizeof(token));\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    OS_Probe_Log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n        OS_Probe_Log(\"OS_OBJECT_TABLE_GET returned timebase_ptr=%p\", (void *)timebase);\n\n        /* Need to take the time base lock to ensure that no ticks are currently being processed */\n        OS_Probe_Log(\"About to call OS_TimeBaseLock_Impl with token_addr=%p\", (void *)&token);\n        OS_TimeBaseLock_Impl(&token);\n        OS_Probe_Log(\"Returned from OS_TimeBaseLock_Impl\");\n\n        OS_Probe_Log(\"Calling OS_TimeBaseSet_Impl with start_time=%lu interval_time=%lu\",\n                     (unsigned long)start_time, (unsigned long)interval_time);\n        return_code = OS_TimeBaseSet_Impl(&token, start_time, interval_time);\n        OS_Probe_Log(\"OS_TimeBaseSet_Impl returned %ld\", (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Save the value since we were successful */\n            timebase->nominal_start_time    = start_time;\n            timebase->nominal_interval_time = interval_time;\n            OS_Probe_Log(\"Saved nominal_start_time=%lu nominal_interval_time=%lu\",\n                         (unsigned long)timebase->nominal_start_time,\n                         (unsigned long)timebase->nominal_interval_time);\n        }\n\n        OS_Probe_Log(\"About to call OS_TimeBaseUnlock_Impl with token_addr=%p\", (void *)&token);\n        OS_TimeBaseUnlock_Impl(&token);\n        OS_Probe_Log(\"Returned from OS_TimeBaseUnlock_Impl\");\n\n        OS_Probe_Log(\"Releasing object id token at addr=%p\", (void *)&token);\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        OS_Probe_Log(\"OS_TimeBaseSet: OS_ObjectIdGetById failed with code=%ld\", (long)return_code);\n    }\n\n    OS_Probe_Log(\"OS_TimeBaseSet EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}