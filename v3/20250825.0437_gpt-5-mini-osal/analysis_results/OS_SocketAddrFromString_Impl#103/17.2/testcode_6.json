{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the OS_DEBUG macro/function itself calls OS_printf (for example OS_DEBUG(...) expands to OS_printf(...)), then the call chain is: OS_printf -> OS_DEBUG -> OS_printf, which is an indirect recursion and therefore violates MISRA C 2023 Rule 17.2. (If OS_DEBUG does not call OS_printf, e.g. it calls OS_ConsoleWrite directly, then no recursion occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrFromString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1036.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrFromString_Impl:\n```c\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrFromString_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n\n/* Probe logging helper: append messages to /tmp/logs/1036.txt.\n * This function deliberately uses direct stdio calls to avoid calling\n * any project-specific logging utilities that might themselves call\n * OS_printf (which could hide the recursion scenario being investigated).\n */\nstatic void probe_log_msg(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1036.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    /* Print a simple timestamp and the message */\n    fprintf(fp, \"[%ld] \", (long)now);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* Original function with inserted probes. */\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    /* Preserve original behavior: obtain accessor pointer */\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log entry and key state: Addr pointer, input string, and family */\n    probe_log_msg(\"ENTER: OS_SocketAddrFromString_Impl Addr=%p string=\\\"%s\\\" family=%d\",\n                  (void *)Addr,\n                  (string != NULL) ? string : \"(null)\",\n                  (int)Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            probe_log_msg(\"BRANCH: AF_INET selected, addrbuffer=%p\", addrbuffer);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            probe_log_msg(\"BRANCH: AF_INET6 selected, addrbuffer=%p\", addrbuffer);\n            break;\n#endif\n        default:\n            probe_log_msg(\"ERROR: Unsupported family=%d -> returning OS_ERR_BAD_ADDRESS\",\n                          (int)Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    {\n        int inet_result = inet_pton(Accessor->sa.sa_family, string, addrbuffer);\n        probe_log_msg(\"CALL: inet_pton(family=%d, string=\\\"%s\\\") returned %d errno=%d\",\n                      (int)Accessor->sa.sa_family,\n                      (string != NULL) ? string : \"(null)\",\n                      inet_result,\n                      errno);\n        if (inet_result != 1)\n        {\n            probe_log_msg(\"RESULT: inet_pton failed -> returning OS_ERROR\");\n            return OS_ERROR;\n        }\n    }\n\n    probe_log_msg(\"RESULT: success -> returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n"
}