{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(&conn_token, 0, sizeof(conn_token)); is executed but has no effect on program behavior. In OS_SocketAccept the conn_token is only used after a successful OS_ObjectIdAllocateNew(&conn_token) call (which initializes the token). If allocation fails the conn_token is never used. Therefore removing this memset would not change program behavior \u2014 it only exists to appease static analysis or for defensive initialization. This qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2442.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append logs to /tmp/logs/2442.txt */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2442.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry and parameter */\n    OS_ProbeLog(\"OS_SocketBindAddress ENTRY: sock_id=%lu, Addr=%p\", (unsigned long)sock_id, (const void *)Addr);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    OS_ProbeLog(\"OS_SocketBindAddress: Addr check passed\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_ProbeLog(\"OS_SocketBindAddress: OS_ObjectIdGetById returned %ld; token address=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        OS_ProbeLog(\"OS_SocketBindAddress: record=%p, stream=%p\", (void *)record, (void *)stream);\n\n        /* Log stream properties used for decision making */\n        OS_ProbeLog(\"OS_SocketBindAddress: stream->socket_domain=%d, stream->stream_state=0x%08lx\",\n                    (int)stream->socket_domain, (unsigned long)stream->stream_state);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            OS_ProbeLog(\"OS_SocketBindAddress: Not a socket -> OS_ERR_INCORRECT_OBJ_TYPE\");\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            OS_ProbeLog(\"OS_SocketBindAddress: Incorrect obj state (already bound or connected) -> OS_ERR_INCORRECT_OBJ_STATE\");\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            OS_ProbeLog(\"OS_SocketBindAddress: Calling OS_SocketBindAddress_Impl with token=%p, Addr=%p\", (void *)&token, (const void *)Addr);\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n            OS_ProbeLog(\"OS_SocketBindAddress: OS_SocketBindAddress_Impl returned %ld\", (long)return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n\n                OS_ProbeLog(\"OS_SocketBindAddress: Bind success: created name \"%\" and updated state to 0x%08lx\", (const void *)stream->stream_name, (unsigned long)stream->stream_state);\n            }\n            else\n            {\n                OS_ProbeLog(\"OS_SocketBindAddress: Bind implementation failed with %ld\", (long)return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ProbeLog(\"OS_SocketBindAddress: Released token=%p\", (void *)&token);\n    }\n    else\n    {\n        OS_ProbeLog(\"OS_SocketBindAddress: OS_ObjectIdGetById failed with %ld\", (long)return_code);\n    }\n\n    OS_ProbeLog(\"OS_SocketBindAddress EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}