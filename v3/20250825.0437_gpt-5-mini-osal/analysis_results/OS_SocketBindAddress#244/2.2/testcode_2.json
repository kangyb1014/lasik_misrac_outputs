{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketAccept the local pointer variable 'sock' is explicitly assigned NULL (\"sock = NULL;\") before any conditional that reassigns it from the object table (sock = OS_OBJECT_TABLE_GET(...)) when return_code == OS_SUCCESS. The initial assignment is executed but always overwritten before any use (and has no effect on execution when return_code != OS_SUCCESS), so removing this assignment would not change program behavior. This constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2442.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper: append formatted messages to /tmp/logs/2442.txt */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Try to ensure the directory exists; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2442.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    (void)fputc('\\n', f);\n    va_end(ap);\n\n    (void)fclose(f);\n}\n\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    OS_ProbeLog(\"OS_SocketBindAddress ENTRY: sock_id=%llu Addr=%p\", (unsigned long long)sock_id, (const void *)Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_ProbeLog(\"OS_SocketBindAddress: OS_ObjectIdGetById returned %d (token addr=%p)\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        OS_ProbeLog(\"OS_SocketBindAddress: record=%p stream=%p\", (void *)record, (void *)stream);\n\n        /* Guard prints: only dereference stream if non-NULL to avoid side effects */\n        if (stream != NULL)\n        {\n            OS_ProbeLog(\"OS_SocketBindAddress: stream->socket_domain=%u stream->stream_state=0x%08x\", (unsigned)stream->socket_domain, (unsigned)stream->stream_state);\n        }\n        else\n        {\n            OS_ProbeLog(\"OS_SocketBindAddress: stream is NULL - unexpected\");\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            OS_ProbeLog(\"OS_SocketBindAddress: Not a socket -> OS_ERR_INCORRECT_OBJ_TYPE\");\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            OS_ProbeLog(\"OS_SocketBindAddress: Incorrect state (bound/connected) -> OS_ERR_INCORRECT_OBJ_STATE (state=0x%08x)\", (unsigned)stream->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            OS_ProbeLog(\"OS_SocketBindAddress: Calling OS_SocketBindAddress_Impl with token addr=%p Addr=%p\", (void *)&token, (const void *)Addr);\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n            OS_ProbeLog(\"OS_SocketBindAddress: OS_SocketBindAddress_Impl returned %d\", (int)return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n                OS_ProbeLog(\"OS_SocketBindAddress: BIND SUCCESS - name_entry=%p stream_name=%p new_state=0x%08x\", (void *)record->name_entry, (void *)stream->stream_name, (unsigned)stream->stream_state);\n            }\n            else\n            {\n                OS_ProbeLog(\"OS_SocketBindAddress: BIND FAILED with code %d\", (int)return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ProbeLog(\"OS_SocketBindAddress: OS_ObjectIdRelease called for token addr=%p\", (void *)&token);\n    }\n    else\n    {\n        OS_ProbeLog(\"OS_SocketBindAddress: OS_ObjectIdGetById failed with %d - skipping rest\", (int)return_code);\n    }\n\n    OS_ProbeLog(\"OS_SocketBindAddress EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}