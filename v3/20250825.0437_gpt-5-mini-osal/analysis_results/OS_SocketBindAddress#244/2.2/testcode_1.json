{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&sock_token, 0, sizeof(sock_token)); is executed but has no effect on program behaviour: sock_token is later initialized by OS_ObjectIdGetById (on the path where it is used) and conn_token is initialized by OS_ObjectIdAllocateNew before use. OS_ObjectIdRelease/FinalizeNew are only called when the corresponding allocation/get call succeeded, so the zeroing is only present to suppress static-analysis warnings about potentially uninitialized variables. Removing the memset would not change runtime behaviour, therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2442.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/2442.txt.\n   This helper is deliberately minimal and does not affect the function's\n   return values or program state. It tolerates failures to open the file.\n*/\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2442.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* Attempt to create the directory and retry once */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        fp = fopen(\"/tmp/logs/2442.txt\", \"a\");\n        if (fp == NULL)\n        {\n            return; /* best-effort logging only */\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* Dump up to 'max' bytes of an object in hex after it is known to be initialized. */\nstatic void probe_dump_bytes(const void *obj, size_t obj_size, size_t max)\n{\n    const unsigned char *p = (const unsigned char *)obj;\n    size_t i, n = (obj_size < max) ? obj_size : max;\n\n    for (i = 0; i < n; ++i)\n    {\n        probe_logf(\"  byte[%zu]=%02X\", i, (unsigned)p[i]);\n    }\n    if (obj_size > max)\n    {\n        probe_logf(\"  ... (%zu more bytes)\", obj_size - max);\n    }\n}\n\n/* Modified function with probes inserted. Original logic preserved. */\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    probe_logf(\"ENTER OS_SocketBindAddress: sock_id=%llu Addr=%p\", (unsigned long long)sock_id, (const void *)Addr);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    probe_logf(\"OS_ObjectIdGetById returned %d\", return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Token is expected to be initialized by OS_ObjectIdGetById; dump some of its bytes for evidence. */\n        probe_logf(\"OS_ObjectIdGetById succeeded; token at %p, sizeof(token)=%zu\", (void *)&token, sizeof(token));\n        /* Dump up to 32 bytes of the token structure for debugging (only after successful init) */\n        probe_dump_bytes(&token, sizeof(token), 32);\n\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log key fields used in the decision branches */\n        probe_logf(\"stream pointer=%p\", (void *)stream);\n        if (stream != NULL)\n        {\n            probe_logf(\"stream->socket_domain=%d\", (int)stream->socket_domain);\n            probe_logf(\"stream->stream_state=0x%08X\", (unsigned)stream->stream_state);\n            /* If there is a name, log that pointer (do not dereference in case of NULL) */\n            probe_logf(\"stream->stream_name=%p\", (void *)stream->stream_name);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            probe_logf(\"Path: Not a socket. Setting return_code = OS_ERR_INCORRECT_OBJ_TYPE\");\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            probe_logf(\"Path: Socket already bound or connected. stream_state=0x%08X; Setting return_code = OS_ERR_INCORRECT_OBJ_STATE\", (unsigned)stream->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            probe_logf(\"Path: Valid unbound socket. Calling OS_SocketBindAddress_Impl\");\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n            probe_logf(\"OS_SocketBindAddress_Impl returned %d\", return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                probe_logf(\"Bind succeeded; calling OS_CreateSocketName and updating state\");\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n                probe_logf(\"After bind: record->name_entry=%p stream->stream_state=0x%08X\", (void *)record->name_entry, (unsigned)stream->stream_state);\n            }\n        }\n\n        probe_logf(\"Releasing token via OS_ObjectIdRelease\");\n        OS_ObjectIdRelease(&token);\n        probe_logf(\"Token released\");\n    }\n    else\n    {\n        probe_logf(\"OS_ObjectIdGetById failed; skipping socket processing\");\n    }\n\n    probe_logf(\"EXIT OS_SocketBindAddress: return_code=%d\", return_code);\n    return return_code;\n}\n"
}