{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis assignment can violate MISRA C 2023 Rule 8.13 if the destination pointer is not const-qualified while the source refers to data that should be const. For example, if stream->stream_name is declared as 'const char *' (pointer to const data) and record->name_entry is declared as 'char *' (pointer to non-const), then record->name_entry = stream->stream_name; discards the const qualifier and allows the possibility of modifying const data \u2014 this violates Rule 8.13. If, however, both fields have the same const qualification (e.g. both are 'const char *' or both are 'char *'), then this single assignment does not by itself violate Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper - writes logs to /tmp/logs/2443.txt */\nstatic void OS_SocketBind_LogProbe(const char *tag,\n                                   const void *token_ptr,\n                                   const void *record_ptr,\n                                   const void *stream_ptr,\n                                   const void *addr_ptr,\n                                   int32_t return_code)\n{\n    FILE *fp;\n    /* Ensure directory exists - ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/2443.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not affect normal logic */\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(fp, \"[%ld] TAG=%s token=%p record=%p stream=%p addr=%p return=%d\\n\",\n            (long)now, tag, token_ptr, record_ptr, stream_ptr, addr_ptr, (int)return_code);\n    fflush(fp);\n    fclose(fp);\n}\n\n/* More detailed probe to dump stream/record pointer fields that are commonly relevant\n   Note: uses only safe reads and does not modify program state. */\nstatic void OS_SocketBind_LogDetails(const char *tag,\n                                     const void *token_ptr,\n                                     const void *record_ptr,\n                                     const void *stream_ptr)\n{\n    FILE *fp;\n    (void)mkdir(\"/tmp/logs\", 0777);\n    fp = fopen(\"/tmp/logs/2443.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"DETAILED: TAG=%s token=%p record=%p stream=%p\\n\",\n            tag, token_ptr, record_ptr, stream_ptr);\n\n    if (stream_ptr != NULL)\n    {\n        /* Attempt to safely print common fields if layout matches expected names. */\n        /* We cannot rely on concrete structure here, so cast to char** for name pointer extraction\n           This is only a probe in the same compilation unit where the real types exist; in that\n           environment these casts will align with actual members. */\n        const void *stream_obj = stream_ptr;\n        /* Try to read probable offsets using known semantics in surrounding code: */\n        /* - stream->stream_name is expected to be a pointer stored somewhere in the structure\n           We attempt to find it by scanning the first 64 bytes of the structure for a non-NULL pointer\n           This is defensive and best-effort only. */\n\n        const char *detected_name = NULL;\n        const void *p = stream_obj;\n        size_t i;\n        for (i = 0; i + sizeof(void *) <= 64; i += sizeof(void *))\n        {\n            const void **candidate = (const void **)((const unsigned char *)p + i);\n            /* Avoid dereferencing invalid pointers - wrap in a try to limit UB risk is not possible in C;\n               but in practice, when compiled in the surrounding project, this will be safe because the\n               object pointed to is a valid object. This is a best-effort help to get a pointer value. */\n            if (*candidate != NULL)\n            {\n                /* Heuristic: treat candidate as a string pointer and try to print first few chars */\n                detected_name = (const char *)(*candidate);\n                break;\n            }\n        }\n\n        if (detected_name != NULL)\n        {\n            /* Print up to 128 chars but ensure a null-terminated temporary buffer */\n            char buf[129];\n            size_t j;\n            for (j = 0; j < 128; ++j)\n            {\n                int c = (unsigned char)detected_name[j];\n                if (c == '\\0')\n                {\n                    buf[j] = '\\0';\n                    break;\n                }\n                /* sanitize non-printable */\n                buf[j] = (c >= 32 && c < 127) ? (char)c : '.';\n            }\n            buf[128] = '\\0';\n            fprintf(fp, \"  stream_name_guess=%p \\\"%s\\\"\\n\", (void *)detected_name, buf);\n        }\n        else\n        {\n            fprintf(fp, \"  stream_name_guess=(null) or not found in first 64 bytes\\n\");\n        }\n    }\n\n    if (record_ptr != NULL)\n    {\n        const void *rec_obj = record_ptr;\n        /* Similar heuristic for record->name_entry */\n        const char *detected_name = NULL;\n        const void *p = rec_obj;\n        size_t i;\n        for (i = 0; i + sizeof(void *) <= 64; i += sizeof(void *))\n        {\n            const void **candidate = (const void **)((const unsigned char *)p + i);\n            if (*candidate != NULL)\n            {\n                detected_name = (const char *)(*candidate);\n                break;\n            }\n        }\n        if (detected_name != NULL)\n        {\n            char buf[129];\n            size_t j;\n            for (j = 0; j < 128; ++j)\n            {\n                int c = (unsigned char)detected_name[j];\n                if (c == '\\0')\n                {\n                    buf[j] = '\\0';\n                    break;\n                }\n                buf[j] = (c >= 32 && c < 127) ? (char)c : '.';\n            }\n            buf[128] = '\\0';\n            fprintf(fp, \"  record_name_entry_guess=%p \\\"%s\\\"\\n\", (void *)detected_name, buf);\n        }\n        else\n        {\n            fprintf(fp, \"  record_name_entry_guess=(null) or not found in first 64 bytes\\n\");\n        }\n    }\n\n    fflush(fp);\n    fclose(fp);\n}\n\n/* Modified OS_SocketBindAddress with probes inserted. The original logic is preserved. */\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry with Addr pointer (token unknown yet) */\n    OS_SocketBind_LogProbe(\"entry\", NULL, NULL, NULL, Addr, -1);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_SocketBind_LogProbe(\"after_GetById\", &token, NULL, NULL, Addr, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log the retrieved objects and some guessed internal details */\n        OS_SocketBind_LogProbe(\"objects_fetched\", &token, record, stream, Addr, return_code);\n        OS_SocketBind_LogDetails(\"objects_fetched_details\", &token, record, stream);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_SocketBind_LogProbe(\"not_socket\", &token, record, stream, Addr, return_code);\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketBind_LogProbe(\"incorrect_state\", &token, record, stream, Addr, return_code);\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n            OS_SocketBind_LogProbe(\"after_impl\", &token, record, stream, Addr, return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n\n                /* Log state immediately before the potentially problematic assignment */\n                OS_SocketBind_LogProbe(\"before_assignment\", &token, record, stream, Addr, return_code);\n                OS_SocketBind_LogDetails(\"before_assignment_details\", &token, record, stream);\n\n                /* Original assignment - preserved */\n                record->name_entry = stream->stream_name;\n\n                /* Log state immediately after the assignment */\n                OS_SocketBind_LogProbe(\"after_assignment\", &token, record, stream, Addr, return_code);\n                OS_SocketBind_LogDetails(\"after_assignment_details\", &token, record, stream);\n\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n                OS_SocketBind_LogProbe(\"after_state_set\", &token, record, stream, Addr, return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_SocketBind_LogProbe(\"after_release\", &token, record, stream, Addr, return_code);\n    }\n\n    OS_SocketBind_LogProbe(\"exit\", NULL, NULL, NULL, Addr, return_code);\n\n    return return_code;\n}\n"
}