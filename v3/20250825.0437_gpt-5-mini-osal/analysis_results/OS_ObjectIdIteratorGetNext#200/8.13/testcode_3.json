{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the function-pointer type iter->match is declared to accept non-const pointers (for example: bool (*match)(void *arg, OS_object_token_t *token, OS_common_record_t *record)). In that case the call iter->match(iter->arg, &iter->token, record) passes pointers to objects that are not intended to be modified, so the parameters should be const-qualified (const OS_object_token_t * and const OS_common_record_t *) and Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2003.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe helper: append a single-line log entry describing iterator state. */\nstatic void os_probe_log(const char *event, const void *iter_ptr, const void *arg_ptr,\n                         const void *match_ptr, unsigned long long obj_idx,\n                         unsigned long long obj_id, unsigned long long limit,\n                         const void *record_ptr, unsigned long long record_active_id)\n{\n    FILE *f = fopen(\"/tmp/logs/2003.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Write a concise single-line log. Cast all integer-like values to unsigned long long to\n       avoid format mismatches with unknown integer types from the surrounding code base. */\n    (void)fprintf(f,\n                  \"%s: iter=%p, arg=%p, match=%p, token.idx=%llu, token.id=%llu, limit=%llu, record=%p, record.active_id=%llu\\n\",\n                  event,\n                  iter_ptr,\n                  arg_ptr,\n                  match_ptr,\n                  obj_idx,\n                  obj_id,\n                  limit,\n                  record_ptr,\n                  record_active_id);\n\n    (void)fclose(f);\n}\n\n/* Convenience wrapper logging when a match call occurs and its boolean result. */\nstatic void os_probe_log_match(const char *event, const void *iter_ptr, const void *arg_ptr,\n                               const void *match_ptr, unsigned long long obj_idx,\n                               unsigned long long obj_id, unsigned long long limit,\n                               const void *record_ptr, unsigned long long record_active_id,\n                               int match_result)\n{\n    FILE *f = fopen(\"/tmp/logs/2003.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    (void)fprintf(f,\n                  \"%s: iter=%p, arg=%p, match=%p, token.idx=%llu, token.id=%llu, limit=%llu, record=%p, record.active_id=%llu, match_result=%d\\n\",\n                  event,\n                  iter_ptr,\n                  arg_ptr,\n                  match_ptr,\n                  obj_idx,\n                  obj_id,\n                  limit,\n                  record_ptr,\n                  record_active_id,\n                  match_result);\n\n    (void)fclose(f);\n}\n\n/* Modified function: preserves original logic but adds logging probes to record\n   control flow and state for troubleshooting the Rule 8.13 violation scenario. */\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log entry state */\n    os_probe_log(\"ENTER\", (const void *)iter, (const void *)iter->arg,\n                 (const void *)iter->match,\n                 (unsigned long long)iter->token.obj_idx,\n                 (unsigned long long)iter->token.obj_id,\n                 (unsigned long long)iter->limit,\n                 NULL, 0ULL);\n\n    do\n    {\n        ++iter->token.obj_idx;\n\n        /* Log after increment */\n        os_probe_log(\"AFTER_INCREMENT\", (const void *)iter, (const void *)iter->arg,\n                     (const void *)iter->match,\n                     (unsigned long long)iter->token.obj_idx,\n                     (unsigned long long)iter->token.obj_id,\n                     (unsigned long long)iter->limit,\n                     NULL, 0ULL);\n\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            os_probe_log(\"LIMIT_REACHED\", (const void *)iter, (const void *)iter->arg,\n                         (const void *)iter->match,\n                         (unsigned long long)iter->token.obj_idx,\n                         (unsigned long long)iter->token.obj_id,\n                         (unsigned long long)iter->limit,\n                         NULL, 0ULL);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n\n        /* Log the fetched record pointer and its active_id if available */\n        os_probe_log(\"RECORD_FETCHED\", (const void *)iter, (const void *)iter->arg,\n                     (const void *)iter->match,\n                     (unsigned long long)iter->token.obj_idx,\n                     (unsigned long long)iter->token.obj_id,\n                     (unsigned long long)iter->limit,\n                     (const void *)record,\n                     (unsigned long long)(record ? record->active_id : 0ULL));\n\n        if (iter->match == NULL)\n        {\n            os_probe_log(\"MATCH_NULL\", (const void *)iter, (const void *)iter->arg,\n                         (const void *)iter->match,\n                         (unsigned long long)iter->token.obj_idx,\n                         (unsigned long long)iter->token.obj_id,\n                         (unsigned long long)iter->limit,\n                         (const void *)record,\n                         (unsigned long long)(record ? record->active_id : 0ULL));\n\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n        else\n        {\n            /* Call the match function and log its result without changing original semantics */\n            int match_res = iter->match(iter->arg, &iter->token, record) ? 1 : 0;\n\n            os_probe_log_match(\"MATCH_CALLED\", (const void *)iter, (const void *)iter->arg,\n                               (const void *)iter->match,\n                               (unsigned long long)iter->token.obj_idx,\n                               (unsigned long long)iter->token.obj_id,\n                               (unsigned long long)iter->limit,\n                               (const void *)record,\n                               (unsigned long long)(record ? record->active_id : 0ULL),\n                               match_res);\n\n            if (match_res)\n            {\n                iter->token.obj_id = record->active_id;\n                got_next           = true;\n            }\n        }\n    } while (!got_next);\n\n    /* Final state on exit */\n    os_probe_log(\"EXIT\", (const void *)iter, (const void *)iter->arg,\n                 (const void *)iter->match,\n                 (unsigned long long)iter->token.obj_idx,\n                 (unsigned long long)iter->token.obj_id,\n                 (unsigned long long)iter->limit,\n                 (const void *)record,\n                 (unsigned long long)(record ? record->active_id : 0ULL));\n\n    return got_next;\n}\n"
}