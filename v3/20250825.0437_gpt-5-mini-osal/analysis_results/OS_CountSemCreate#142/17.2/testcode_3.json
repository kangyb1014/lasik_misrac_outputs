{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code fragment is inside OS_NotifyEvent which invokes a user-supplied callback via OS_SharedGlobalVars.EventHandler(event, object_id, data). If that callback (or any function it calls) calls OS_NotifyEvent again, this creates an indirect recursive call back into OS_NotifyEvent, violating MISRA C 2023 Rule 17.2. There is no mechanism in the shown code to prevent the EventHandler from calling OS_NotifyEvent (or a chain that leads to it), so indirect self-calls are possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1426.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <unistd.h>\n#include <stdlib.h>\n\n/* Probe/log helper - kept small and non-intrusive. */\nstatic void OS_CountSemCreate_Log(const char *stage,\n                                  int32 return_code,\n                                  const OS_object_token_t *token,\n                                  const char *sem_name,\n                                  uint32 sem_initial_value,\n                                  uint32 options,\n                                  const osal_id_t *sem_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1426.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    time_t now = time(NULL);\n    /* Write a concise single-line record with relevant state */\n    fprintf(f, \"%ld: stage=%s pid=%ld rc=%ld token=%p name=%s init=%lu opt=%lu sem_id=%p\\n\",\n            (long)now,\n            stage ? stage : \"(null)\",\n            (long)getpid(),\n            (long)return_code,\n            (void *)token,\n            sem_name ? sem_name : \"(null)\",\n            (unsigned long)sem_initial_value,\n            (unsigned long)options,\n            (const void *)sem_id);\n\n    fclose(f);\n}\n\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Log entry & input state */\n    OS_CountSemCreate_Log(\"entry\", -1, (const OS_object_token_t *)NULL, sem_name, sem_initial_value, options, sem_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt */\n    OS_CountSemCreate_Log(\"after_ObjectIdAllocateNew\", return_code, &token, sem_name, sem_initial_value, options, sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Log result of platform-specific create */\n        OS_CountSemCreate_Log(\"after_CountSemCreate_Impl\", return_code, &token, sem_name, sem_initial_value, options, sem_id);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Log finalization result and the assigned sem_id (if any) */\n        OS_CountSemCreate_Log(\"after_ObjectIdFinalizeNew\", return_code, &token, sem_name, sem_initial_value, options, sem_id);\n    }\n    else\n    {\n        /* Allocation failed - log the failure path as well */\n        OS_CountSemCreate_Log(\"alloc_failed\", return_code, (const OS_object_token_t *)NULL, sem_name, sem_initial_value, options, sem_id);\n    }\n\n    return return_code;\n}\n"
}