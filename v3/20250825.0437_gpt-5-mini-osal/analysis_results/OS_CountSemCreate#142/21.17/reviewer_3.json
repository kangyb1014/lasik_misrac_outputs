{
  "user_message": "An agent A claimed that the following OS_CountSemCreate code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemCreate.\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro calls strncpy(ref->namefield, nameval, sizeof(ref->namefield)-1) without ensuring the source object (nameval) is valid for at least that many bytes. strncpy may read up to n bytes from nameval; if the caller passes a pointer to a shorter/non\u2011nul\u2011terminated buffer (for example, a char array of length 10 while sizeof(ref->namefield)-1 is 19) this will cause reads beyond the bounds of the source object. Although memset ensures the destination is large enough and will remain NUL-terminated, the macro itself does not guarantee the source buffer size/termination, so the code can violate Rule 21.17 in that scenario.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER OS_CountSemCreate: sem_id=0x7ffeef5ee010 sem_name=0x5644ba6b0a6a sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -1, token=0x7ffeef5edfb0\nOS_ObjectIdAllocateNew failed with -1; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -1\nENTER OS_CountSemCreate: sem_id=0x7ffeef5ee010 sem_name=0x5644ba6b0a6a sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edfb0\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=(nil) sem_name=0x5644ba6b28fc sem_initial_value=1 options=0\nENTER OS_CountSemCreate: sem_id=0x7ffeef5edf70 sem_name=(nil) sem_initial_value=1 options=0\nENTER OS_CountSemCreate: sem_id=0x7ffeef5edf70 sem_name=0x7ffeef5edff0 sem_initial_value=1 options=0\nENTER OS_CountSemCreate: sem_id=0x7ffeef5edf70 sem_name=0x7ffeef5edfd0 sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edf30\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5edf70 sem_name=0x5644ba6b2ad5 sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edf30\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5edf70 sem_name=0x5644ba6b2b8c sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edf30\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5ee014 sem_name=0x5644ba6b2c32 sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edfe0\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5ee014 sem_name=0x5644ba6b2ce8 sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edfe0\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5ee014 sem_name=0x5644ba6b2da0 sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edfe0\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5ee014 sem_name=0x5644ba6b2e6b sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edfe0\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5ee014 sem_name=0x5644ba6b2e6b sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edfe0\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5edfec sem_name=0x5644ba6b2fd2 sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edfb0\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5edfec sem_name=0x5644ba6b30c4 sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edfb0\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\nENTER OS_CountSemCreate: sem_id=0x7ffeef5edfec sem_name=0x5644ba6b30c4 sem_initial_value=1 options=0\nOS_ObjectIdAllocateNew returned -35, token=0x7ffeef5edfb0\nOS_ObjectIdAllocateNew failed with -35; skipping allocation/finalize\nEXIT OS_CountSemCreate returning -35\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemCreate:\n#define OS_OBJECT_INIT(tok, ref, namefield, nameval) {memset(ref,0,sizeof(*ref));strncpy(ref->namefield,nameval,sizeof(ref->namefield)-1);OS_ObjectIdGlobalFromToken(&tok)->name_entry=ref->namefield;}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    char obj_name[OS_MAX_API_NAME];\n} OS_count_sem_internal_record_t\n...\nOS_count_sem_internal_record_t OS_count_sem_table[LOCAL_NUM_OBJECTS]\n...\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n...\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n...\n#define OS_CHECK_APINAME(str) OS_CHECK_STRING(str,OS_MAX_API_NAME,OS_ERR_NAME_TOO_LONG)\n...\n#define OS_MAX_API_NAME 20\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nint32 OS_CountSemCreate_Impl(const OS_object_token_t *token, uint32 sem_initial_value, uint32 options)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_initial_value > SEM_VALUE_MAX)\n    {\n        return OS_INVALID_SEM_VALUE;\n    }\n\n    if (sem_init(&impl->id, 0, sem_initial_value) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. The apparent unsafe use of strncpy is guarded by OS_CHECK_APINAME (which expands to OS_CHECK_STRING(..., OS_MAX_API_NAME, ...)). That API-level check is intended to validate the caller-supplied sem_name is a proper NUL-terminated string and no longer than OS_MAX_API_NAME-1 characters before the copy is performed. Given that precondition, the subsequent strncpy(ref->namefield, nameval, sizeof(ref->namefield)-1) cannot read past the bounds of the source string and therefore does not violate MISRA C 2023 Rule 21.17. (If, however, OS_CHECK_STRING were not implemented to ensure NUL-termination and the length bound, then a violation could occur \u2014 but based on the provided code the check exists and is the mechanism preventing the over-read.)"
}