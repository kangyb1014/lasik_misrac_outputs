{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemCreate:\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char obj_name[OS_MAX_API_NAME];\n} OS_count_sem_internal_record_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The call passes &token to OS_CountSemCreate_Impl which, according to the comment, only reads information from the token. If OS_CountSemCreate_Impl is declared to take OS_object_token_t * (non-const) but does not modify the pointee, this violates MISRA C 2023 Rule 8.13 because the pointer parameter should be to a const-qualified type (const OS_object_token_t *). If, however, the implementation actually modifies the token, then const is not appropriate and there is no violation."
}