{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &token to OS_CountSemCreate_Impl which, according to the comment, only reads information from the token. If OS_CountSemCreate_Impl is declared to take OS_object_token_t * (non-const) but does not modify the pointee, this violates MISRA C 2023 Rule 8.13 because the pointer parameter should be to a const-qualified type (const OS_object_token_t *). If, however, the implementation actually modifies the token, then const is not appropriate and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe helpers for logging token state and control flow. */\nstatic void OS_CountSemCreate_LogMessage(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nstatic void OS_CountSemCreate_LogFmt(const char *fmt, const char *s1, const char *s2)\n{\n    FILE *f = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (f != NULL)\n    {\n        if (fmt != NULL)\n        {\n            /* simple two-string formatter to avoid varargs */\n            fprintf(f, fmt, s1, s2);\n            fprintf(f, \"\\n\");\n        }\n        fclose(f);\n    }\n}\n\nstatic void OS_CountSemCreate_LogToken(const char *label, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Print basic info */\n    fprintf(f, \"%s: token_addr=%p sizeof(token)=%zu\\n\", label, (const void *)token, sizeof(*token));\n\n    /* Hex dump of the token bytes */\n    {\n        const uint8_t *bytes = (const uint8_t *)token;\n        size_t i;\n        for (i = 0u; i < sizeof(*token); ++i)\n        {\n            /* Print two hex digits per byte */\n            fprintf(f, \"%02X\", (unsigned)bytes[i]);\n            if ((i + 1u) % 32u == 0u)\n            {\n                fprintf(f, \"\\n\");\n            }\n            else\n            {\n                if (i + 1u < sizeof(*token))\n                {\n                    fprintf(f, \" \");\n                }\n            }\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Log entry and input parameters */\n    {\n        char buf[256];\n        (void) snprintf(buf, sizeof(buf), \"OS_CountSemCreate ENTER: sem_name=%s, sem_initial_value=%u, options=%u, sem_id_ptr=%p\",\n                        (sem_name != NULL) ? sem_name : \"(null)\", (unsigned)sem_initial_value, (unsigned)options, (void *)sem_id);\n        OS_CountSemCreate_LogMessage(buf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    {\n        char buf[128];\n        (void) snprintf(buf, sizeof(buf), \"OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n        OS_CountSemCreate_LogMessage(buf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Log token state just before calling platform-specific implementation */\n        OS_CountSemCreate_LogToken(\"BEFORE_OS_CountSemCreate_Impl\", &token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        {\n            int32 impl_rc;\n\n            impl_rc = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n            {\n                char buf[128];\n                (void) snprintf(buf, sizeof(buf), \"OS_CountSemCreate_Impl returned %ld\", (long)impl_rc);\n                OS_CountSemCreate_LogMessage(buf);\n            }\n\n            /* Log token state immediately after the call to detect any modifications */\n            OS_CountSemCreate_LogToken(\"AFTER_OS_CountSemCreate_Impl\", &token);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(impl_rc, &token, sem_id);\n        }\n    }\n\n    {\n        char buf[128];\n        (void) snprintf(buf, sizeof(buf), \"OS_CountSemCreate EXIT: return_code=%ld\", (long)return_code);\n        OS_CountSemCreate_LogMessage(buf);\n    }\n\n    return return_code;\n}\n"
}