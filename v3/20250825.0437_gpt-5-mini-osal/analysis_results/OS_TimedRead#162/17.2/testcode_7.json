{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS not initialized. If OS_DEBUG is (even indirectly) implemented using OS_printf (a common pattern), this yields indirect recursion: OS_printf -> OS_DEBUG -> OS_printf ... leading to a Rule 17.2 violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedRead code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1626.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimedRead as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimedRead:\n```c\nint32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimedRead code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\n/*\n * Probe logging helper: append human-readable events and state to the\n * file /tmp/logs/1626.txt. This uses only C library I/O to avoid\n * calling into OS-level logging that might trigger the recursion scenario.\n */\nstatic void probe_log_simple(const char *event, uintptr_t id, const void *buffer, size_t nbytes, int64_t timeout, int64_t rc)\n{\n    FILE *f = fopen(\"/tmp/logs/1626.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; do not change control flow */\n    }\n\n    time_t t = time(NULL);\n    (void)fprintf(f, \"%ld: %s - filedes=0x%jx buffer=%p nbytes=%zu timeout=%lld return=%lld\\n\",\n                  (long)t, event, (uintmax_t)id, buffer, nbytes, (long long)timeout, (long long)rc);\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with initial parameters */\n    probe_log_simple(\"OS_TimedRead:entry\", (uintptr_t)filedes, buffer, nbytes, (int64_t)timeout, (int64_t)-1);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    /* Log after parameter checks */\n    probe_log_simple(\"OS_TimedRead:params_valid\", (uintptr_t)filedes, buffer, nbytes, (int64_t)timeout, (int64_t)-1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log result of ObjectIdGetById */\n    probe_log_simple(\"OS_TimedRead:after_ObjectIdGetById\", (uintptr_t)filedes, buffer, nbytes, (int64_t)timeout, (int64_t)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation */\n        probe_log_simple(\"OS_TimedRead:before_GenericRead\", (uintptr_t)filedes, buffer, nbytes, (int64_t)timeout, (int64_t)-1);\n\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        /* Log after GenericRead_Impl returns */\n        probe_log_simple(\"OS_TimedRead:after_GenericRead\", (uintptr_t)filedes, buffer, nbytes, (int64_t)timeout, (int64_t)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        probe_log_simple(\"OS_TimedRead:after_Release\", (uintptr_t)filedes, buffer, nbytes, (int64_t)timeout, (int64_t)return_code);\n    }\n    else\n    {\n        /* Log that ObjectIdGetById failed and we will return the error */\n        probe_log_simple(\"OS_TimedRead:ObjectIdGetById_failed\", (uintptr_t)filedes, buffer, nbytes, (int64_t)timeout, (int64_t)return_code);\n    }\n\n    /* Final return log */\n    probe_log_simple(\"OS_TimedRead:exit\", (uintptr_t)filedes, buffer, nbytes, (int64_t)timeout, (int64_t)return_code);\n\n    return return_code;\n}\n"
}