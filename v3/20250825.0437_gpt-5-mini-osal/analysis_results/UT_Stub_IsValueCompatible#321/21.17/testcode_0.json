{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code only checks that the pointers are non-NULL before calling strcmp, but does not ensure the pointed-to objects are valid null-terminated character arrays or within known bounds. If Rvc->TypeName (or WantTypeName) points to a char buffer that is not NUL-terminated (e.g. char buf[3] = {'a','b','c'} or a pointer into a larger buffer where the terminator lies beyond the object bounds), strcmp will continue reading past the object and access memory beyond its bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_IsValueCompatible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_IsValueCompatible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_IsValueCompatible:\n```c\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n    }\n\n    return IsCompatible;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_IsValueCompatible code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe/log helper: append a single line to the log file. */\nstatic void UT_Stub_Log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/3219.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n\n    /* Log entry and pointer/state summary. Avoid dereferencing Rvc unless non-NULL for logging. */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf),\n                 \"UT_Stub_IsValueCompatible ENTRY: Rvc=%p, Rvc->TypeName=%p, WantTypeName=%p, Rvc->Genre=%d, WantGenre=%d\",\n                 (void *)Rvc,\n                 (void *)(Rvc ? Rvc->TypeName : NULL),\n                 (void *)WantTypeName,\n                 (int)(Rvc ? Rvc->Genre : -1),\n                 (int)WantGenre);\n        UT_Stub_Log(buf);\n    }\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"Both type-name pointers non-NULL: Rvc->TypeName=%p, WantTypeName=%p - calling strcmp\",\n                 (void *)Rvc->TypeName, (void *)WantTypeName);\n        UT_Stub_Log(buf);\n\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n\n        snprintf(buf, sizeof(buf), \"strcmp result: %s\", IsCompatible ? \"equal\" : \"not-equal\");\n        UT_Stub_Log(buf);\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        UT_Stub_Log(\"At least one type-name pointer is NULL -> direct type-name compatibility false\");\n        IsCompatible = false;\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        UT_Stub_Log(\"Genre fallback: genre matches and is not OPAQUE -> compatible\");\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n    }\n    else if (!IsCompatible)\n    {\n        UT_Stub_Log(\"No compatibility found after genre fallback\");\n    }\n\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"UT_Stub_IsValueCompatible EXIT: IsCompatible=%s\", IsCompatible ? \"true\" : \"false\");\n        UT_Stub_Log(buf);\n    }\n\n    return IsCompatible;\n}\n"
}