{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member Rvc->TypeName is declared as a non-const pointer (e.g. \"char *TypeName\" in UT_RetvalConfigEntry_t), this is a violation: the pointer should be declared as \"const char *TypeName\" because it is only read and is passed to strcmp(const char*, const char*).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_IsValueCompatible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3213.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_IsValueCompatible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_IsValueCompatible:\n```c\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n    }\n\n    return IsCompatible;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_IsValueCompatible code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe logger: write control-flow and state information to /tmp/logs/3213.txt */\nstatic void UT_Log_IsValueCompatible_Probe(const void *Rvc_ptr, const char *TypeName, const char *WantTypeName, int GenreRvc, int WantGenre, const char *stage, int strcmp_result, bool IsCompatible)\n{\n    FILE *f = fopen(\"/tmp/logs/3213.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect original logic */\n    }\n\n    fprintf(f, \"UT_Stub_IsValueCompatible - stage: %s\\n\", stage);\n    fprintf(f, \" Rvc pointer: %p\\n\", Rvc_ptr);\n    fprintf(f, \" Rvc->TypeName pointer: %p\\n\", (const void *)TypeName);\n    fprintf(f, \" Rvc->TypeName string: %s\\n\", (TypeName != NULL) ? TypeName : \"(NULL)\");\n    fprintf(f, \" WantTypeName pointer: %p\\n\", (const void *)WantTypeName);\n    fprintf(f, \" WantTypeName string: %s\\n\", (WantTypeName != NULL) ? WantTypeName : \"(NULL)\");\n    fprintf(f, \" strcmp_result: %d\\n\", strcmp_result);\n    fprintf(f, \" Rvc->Genre: %d, WantGenre: %d\\n\", GenreRvc, WantGenre);\n    fprintf(f, \" IsCompatible: %d\\n\", IsCompatible ? 1 : 0);\n    fprintf(f, \"----\\n\");\n\n    fclose(f);\n}\n\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n    int cmp_result = -9999; /* sentinel meaning: strcmp not evaluated yet */\n\n    /* Entry probe */\n    UT_Log_IsValueCompatible_Probe((const void *)Rvc,\n                                  (Rvc != NULL) ? Rvc->TypeName : NULL,\n                                  WantTypeName,\n                                  (Rvc != NULL) ? (int)Rvc->Genre : -1,\n                                  (int)WantGenre,\n                                  \"entry\",\n                                  cmp_result,\n                                  false);\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        cmp_result = strcmp(Rvc->TypeName, WantTypeName);\n        IsCompatible = (cmp_result == 0);\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n    }\n\n    /* Probe after type-name comparison */\n    UT_Log_IsValueCompatible_Probe((const void *)Rvc,\n                                  (Rvc != NULL) ? Rvc->TypeName : NULL,\n                                  WantTypeName,\n                                  (Rvc != NULL) ? (int)Rvc->Genre : -1,\n                                  (int)WantGenre,\n                                  \"after_type_compare\",\n                                  cmp_result,\n                                  IsCompatible);\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n    }\n\n    /* Probe before return */\n    UT_Log_IsValueCompatible_Probe((const void *)Rvc,\n                                  (Rvc != NULL) ? Rvc->TypeName : NULL,\n                                  WantTypeName,\n                                  (Rvc != NULL) ? (int)Rvc->Genre : -1,\n                                  (int)WantGenre,\n                                  \"before_return\",\n                                  cmp_result,\n                                  IsCompatible);\n\n    return IsCompatible;\n}\n"
}