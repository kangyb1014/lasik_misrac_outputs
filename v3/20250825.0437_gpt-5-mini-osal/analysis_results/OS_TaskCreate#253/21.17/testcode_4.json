{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CHECK_APINAME expands to OS_CHECK_STRING(str, OS_MAX_API_NAME, ...). If OS_CHECK_STRING internally uses standard string functions such as strlen() to validate the name length, a caller that provides a buffer of exactly OS_MAX_API_NAME characters without a terminating NUL (or a non-NUL-terminated memory region) will cause strlen() to read past the end of the buffer. Example: char name[OS_MAX_API_NAME]; /* filled with OS_MAX_API_NAME bytes, no '\\0' */ OS_TaskCreate(..., name, ...); -> OS_CHECK_APINAME -> strlen(name) will access beyond name[] bounds. Therefore this usage can violate MISRA C 2023 Rule 21.17 unless OS_CHECK_STRING is implemented to avoid unbounded reads (for example by using a bounded-scan routine that stops after OS_MAX_API_NAME characters or by first ensuring the input is NUL-terminated).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "static void OS_TaskCreate_LogState(const char *stage, const char *task_name, int32 return_code,\n                                           osal_stackptr_t stack_pointer, size_t stack_size,\n                                           osal_priority_t priority, uint32 flags, osal_id_t *task_id)\n{\n    FILE *f = fopen(\"/tmp/logs/2539.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[OS_TaskCreate] stage=%s return_code=%ld task_id_ptr=%p task_name_ptr=%p stack_ptr=%p stack_size=%zu priority=%ld flags=0x%08x\\n\",\n            (stage ? stage : \"(null)\"), (long)return_code, (void *)task_id, (void *)task_name,\n            (void *)stack_pointer, stack_size, (long)priority, (unsigned)flags);\n\n    /* Do a bounded scan for NUL within OS_MAX_API_NAME to detect the non-NUL-terminated case described in the violation scenario.\n       This loop is explicitly bounded by OS_MAX_API_NAME to avoid unbounded reads. */\n    if (task_name != NULL)\n    {\n        size_t i;\n        for (i = 0; i < (size_t)OS_MAX_API_NAME; ++i)\n        {\n            /* Note: indexing up to OS_MAX_API_NAME-1 is intended and bounded */\n            if (task_name[i] == '\\0')\n            {\n                fprintf(f, \"[OS_TaskCreate] task_name has NUL at pos=%zu\\n\", i);\n                break;\n            }\n        }\n        if (i == (size_t)OS_MAX_API_NAME)\n        {\n            fprintf(f, \"[OS_TaskCreate] task_name has NO NUL within first %d bytes (possible unterminated buffer)\\n\", (int)OS_MAX_API_NAME);\n            /* additionally log a hex dump of the bytes up to the bound to aid reproduction */\n            fprintf(f, \"[OS_TaskCreate] bytes(0..%d-1): \", (int)OS_MAX_API_NAME);\n            for (i = 0; i < (size_t)OS_MAX_API_NAME; ++i)\n            {\n                unsigned char uc = (unsigned char)task_name[i];\n                fprintf(f, \"%02x\", uc);\n                if (i + 1 < (size_t)OS_MAX_API_NAME) fprintf(f, \" \");\n            }\n            fprintf(f, \"\\n\");\n        }\n    }\n\n    fclose(f);\n}\n\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry and initial state (best-effort). Do not dereference potentially invalid pointers except in a bounded way in logger. */\n    OS_TaskCreate_LogState(\"entry\", task_name, -1, stack_pointer, stack_size, priority, flags, task_id);\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n\n    /* Log just before the API name check so the log contains the pointer and bounded scan prior to whatever OS_CHECK_APINAME does. */\n    OS_TaskCreate_LogState(\"pre-APINAME-check\", task_name, -1, stack_pointer, stack_size, priority, flags, task_id);\n\n    OS_CHECK_APINAME(task_name);\n\n    /* Log immediately after API name check to capture whether the check allowed continuation. */\n    OS_TaskCreate_LogState(\"post-APINAME-check\", task_name, -1, stack_pointer, stack_size, priority, flags, task_id);\n\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log result of allocation attempt */\n    OS_TaskCreate_LogState(\"after-ObjectIdAllocateNew\", task_name, return_code, stack_pointer, stack_size, priority, flags, task_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Log the fully-initialized task record fields just before the platform-specific create. */\n        OS_TaskCreate_LogState(\"before-Impl\", task_name, -1, stack_pointer, stack_size, priority, flags, task_id);\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Log result from OS-specific implementation */\n        OS_TaskCreate_LogState(\"after-Impl\", task_name, return_code, stack_pointer, stack_size, priority, flags, task_id);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        /* Final log before returning */\n        OS_TaskCreate_LogState(\"finalize\", task_name, return_code, stack_pointer, stack_size, priority, flags, task_id);\n    }\n\n    return return_code;\n}\n"
}