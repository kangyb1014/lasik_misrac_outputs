{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts away the const qualifier by passing a const char * (name) as a plain void *: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); This removes const-qualification and means the pointer passed does not point to a const-qualified type, violating the intent of Rule 8.13. Fix by changing the API to accept const void * (or const char *) or avoid the cast so the pointer remains const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2533.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper to record control flow and state into /tmp/logs/2533.txt\n * This helper is intentionally conservative in its use of types to avoid\n * relying on internal structure details of the OS types. It prints addresses\n * and basic scalar values only. It does not modify any program state. */\nstatic void OS_Probe_Log(const char *event,\n                         const void *task_id_ptr,\n                         const char *task_name,\n                         const void *function_pointer,\n                         const void *stack_pointer,\n                         size_t stack_size,\n                         long priority_val,\n                         unsigned long flags_val,\n                         long return_code_val,\n                         const void *token_ptr,\n                         const void *task_rec_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2533.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do nothing to preserve original behavior. */\n        return;\n    }\n\n    fprintf(f,\n            \"EVENT=%s task_id=%p task_name=\\\"%s\\\" function_ptr=%p stack_ptr=%p stack_size=%zu priority=%ld flags=0x%lx return_code=%ld token=%p task_rec=%p\\n\",\n            event,\n            task_id_ptr,\n            (task_name != NULL) ? task_name : \"(null)\",\n            function_pointer,\n            stack_pointer,\n            stack_size,\n            priority_val,\n            flags_val,\n            return_code_val,\n            token_ptr,\n            task_rec_ptr);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry and incoming parameters */\n    OS_Probe_Log(\"ENTRY\", (const void *)task_id, task_name, (const void *)function_pointer,\n                 (const void *)stack_pointer, stack_size, (long)priority, (unsigned long)flags,\n                 (long)0 /* return code unknown at entry */, NULL, NULL);\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log result of allocate attempt */\n    OS_Probe_Log(\"AFTER_ALLOC\", (const void *)task_id, task_name, (const void *)function_pointer,\n                 (const void *)stack_pointer, stack_size, (long)priority, (unsigned long)flags,\n                 (long)return_code, (const void *)&token, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Log state before calling implementation */\n        OS_Probe_Log(\"BEFORE_IMPL\", (const void *)task_id, task_name, (const void *)function_pointer,\n                     (const void *)stack_pointer, stack_size, (long)priority, (unsigned long)flags,\n                     (long)0 /* impl not yet called */, (const void *)&token, (const void *)task);\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Log result of OS-specific implementation */\n        OS_Probe_Log(\"AFTER_IMPL\", (const void *)task_id, task_name, (const void *)function_pointer,\n                     (const void *)stack_pointer, stack_size, (long)priority, (unsigned long)flags,\n                     (long)return_code, (const void *)&token, (const void *)task);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        /* Log after finalization */\n        OS_Probe_Log(\"AFTER_FINALIZE\", (const void *)task_id, task_name, (const void *)function_pointer,\n                     (const void *)stack_pointer, stack_size, (long)priority, (unsigned long)flags,\n                     (long)return_code, (const void *)&token, (const void *)task);\n    }\n\n    /* Final exit log */\n    OS_Probe_Log(\"EXIT\", (const void *)task_id, task_name, (const void *)function_pointer,\n                 (const void *)stack_pointer, stack_size, (long)priority, (unsigned long)flags,\n                 (long)return_code, (const void *)&token, (const void *)task);\n\n    return return_code;\n}\n"
}