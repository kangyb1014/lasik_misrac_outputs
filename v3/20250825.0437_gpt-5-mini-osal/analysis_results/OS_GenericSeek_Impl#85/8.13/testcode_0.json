{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as OS_impl_file_internal_record_t *impl (pointer to non-const). In OS_GenericSeek_Impl it is only used for read-only access (impl->fd is read to call lseek), so the pointer should be to a const-qualified type (const OS_impl_file_internal_record_t *impl). Therefore this code violates MISRA C 2023 Rule 8.13. (Assigning the address of the global non-const table element to a const pointer is allowed; change the declaration to const OS_impl_file_internal_record_t *impl.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericSeek_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericSeek_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericSeek_Impl:\n```c\nint32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            /*\n             * this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n        }\n        else\n        {\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            retval = OS_ERROR;\n        }\n    }\n    else\n    {\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n    }\n\n    return retval;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericSeek_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n\n/* Probe helpers: write useful diagnostic information to /tmp/logs/853.txt */\nstatic void OS_GenericSeek_Impl_log_impl_info(const char *stage,\n                                              const void *token_ptr,\n                                              const void *impl_ptr,\n                                              int fd,\n                                              int32_t offset,\n                                              uint32_t whence,\n                                              int where)\n{\n    FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"[%s] token_ptr=%p impl_ptr=%p fd=%d offset=%d whence=%u where=%d\\n\",\n            stage, token_ptr, impl_ptr, fd, (int)offset, (unsigned)whence, where);\n    fclose(fp);\n}\n\nstatic void OS_GenericSeek_Impl_log_lseek_result(const char *stage,\n                                                  off_t os_result,\n                                                  int saved_errno)\n{\n    FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    if (os_result == (off_t)-1)\n    {\n        fprintf(fp, \"[%s] lseek returned -1 errno=%d (%s)\\n\",\n                stage, saved_errno, strerror(saved_errno));\n    }\n    else\n    {\n        /* print as signed long long for portability */\n        fprintf(fp, \"[%s] lseek returned %lld\\n\", stage, (long long)os_result);\n    }\n\n    fclose(fp);\n}\n\nint32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log the fact we retrieved the table entry and the pointer/address. */\n    OS_GenericSeek_Impl_log_impl_info(\"after_get_impl\", token, (void *)impl,\n                                      (impl != NULL) ? impl->fd : -1,\n                                      offset, whence, -1);\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n            /* Log invalid whence before returning */\n            OS_GenericSeek_Impl_log_impl_info(\"invalid_whence\", token, (void *)impl,\n                                              (impl != NULL) ? impl->fd : -1,\n                                              offset, whence, -1);\n            return OS_ERROR;\n    }\n\n    /* Log the parameters just before calling lseek */\n    OS_GenericSeek_Impl_log_impl_info(\"before_lseek\", token, (void *)impl,\n                                      (impl != NULL) ? impl->fd : -1,\n                                      offset, whence, where);\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n\n    /* Capture errno immediately to avoid it being overwritten by logging */\n    int saved_errno = errno;\n    OS_GenericSeek_Impl_log_lseek_result(\"after_lseek\", os_result, saved_errno);\n\n    if (os_result == (off_t)-1)\n    {\n        if (saved_errno == ESPIPE)\n        {\n            /*\n             * this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n\n            /* log branch taken */\n            OS_GenericSeek_Impl_log_impl_info(\"error_espipe\", token, (void *)impl,\n                                              impl->fd, offset, whence, where);\n        }\n        else\n        {\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(saved_errno));\n            retval = OS_ERROR;\n\n            /* log branch taken and errno details */\n            FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"[error_other] errno=%d (%s)\\n\", saved_errno, strerror(saved_errno));\n                fclose(fp);\n            }\n        }\n    }\n    else\n    {\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n\n        /* log success and the returned value */\n        FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"[success] retval=%d os_result=%lld\\n\", (int)retval, (long long)os_result);\n            fclose(fp);\n        }\n    }\n\n    /* final return value log */\n    OS_GenericSeek_Impl_log_impl_info(\"returning\", token, (void *)impl,\n                                      (impl != NULL) ? impl->fd : -1,\n                                      offset, whence, retval);\n\n    return retval;\n}\n"
}