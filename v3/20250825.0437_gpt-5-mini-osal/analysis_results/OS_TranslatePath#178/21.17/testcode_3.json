{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to strncmp(target, filesys->virtual_mountpt, mplen) can read up to mplen bytes from target even though OS_FileSys_FindVirtMountPoint does not ensure that the target buffer is at least mplen bytes long. Example: filesys->virtual_mountpt has length mplen = 10, but target points to a short string (e.g. \"/a\" length 2). strncmp will attempt to read 10 bytes from target, accessing memory beyond the end of the target string and violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1789.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends diagnostics to /tmp/logs/1789.txt */\nstatic void OS_TranslatePath_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1789.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /* Log entry and pointers */\n    OS_TranslatePath_Log(\"OS_TranslatePath ENTRY: VirtualPath=%p, LocalPath=%p\", (void*)VirtualPath, (void*)LocalPath);\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n\n    /* Log the computed virtual path length and a truncated preview of the string */\n    {\n        size_t preview = (VirtPathLen < 128 ? VirtPathLen : 128);\n        OS_TranslatePath_Log(\"VirtualPath length=%zu (preview %zu bytes): '%.*s'\", VirtPathLen, preview, (int)preview, VirtualPath);\n    }\n\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_Log(\"VirtualPath too long: %zu >= %d\", VirtPathLen, OS_MAX_PATH_LEN);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_Log(\"No '/' found in VirtualPath\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_Log(\"Filename too long starting at %p (no null within %d bytes)\", (void*)name_ptr, OS_MAX_FILE_NAME);\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_Log(\"VirtualPath does not start with '/': first_char=(%c)\", VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    OS_TranslatePath_Log(\"Calling OS_ObjectIdGetBySearch with VirtualPath=%p (len=%zu)\", (void*)VirtualPath, VirtPathLen);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TranslatePath_Log(\"OS_ObjectIdGetBySearch returned %d\", return_code);\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log some details about the filesys record before using it */\n        {\n            size_t vmp_len = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            size_t smp_len = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            size_t vmp_preview = (vmp_len < 128 ? vmp_len : 128);\n            size_t smp_preview = (smp_len < 128 ? smp_len : 128);\n\n            OS_TranslatePath_Log(\"Found filesys token=%p: flags=0x%08x, virtual_mountpt_len=%zu, system_mountpt_len=%zu\",\n                                  (void*)filesys, (unsigned int)filesys->flags, vmp_len, smp_len);\n            OS_TranslatePath_Log(\"virtual_mountpt preview: '%.*s'\", (int)vmp_preview, filesys->virtual_mountpt);\n            OS_TranslatePath_Log(\"system_mountpt preview: '%.*s'\", (int)smp_preview, filesys->system_mountpt);\n        }\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n            OS_TranslatePath_Log(\"After measuring: SysMountPointLen=%zu, VirtPathBegin=%zu\", SysMountPointLen, VirtPathBegin);\n\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                OS_TranslatePath_Log(\"About to memcpy system_mountpt -> LocalPath: bytes=%zu, LocalPath=%p\", SysMountPointLen, (void*)LocalPath);\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            OS_TranslatePath_Log(\"Filesystem not mounted system: flags=0x%08x\", (unsigned int)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_TranslatePath_Log(\"Proceeding with path combination: VirtPathLen=%zu, VirtPathBegin=%zu, SysMountPointLen=%zu\",\n                              VirtPathLen, VirtPathBegin, SysMountPointLen);\n\n        if (VirtPathLen < VirtPathBegin)\n        {\n            OS_TranslatePath_Log(\"VirtPathLen < VirtPathBegin (%zu < %zu) => invalid\", VirtPathLen, VirtPathBegin);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            OS_TranslatePath_Log(\"Bytes to append from VirtualPath: VirtPathBegin=%zu, remaining=%zu\", VirtPathBegin, VirtPathLen);\n\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                OS_TranslatePath_Log(\"About to memcpy VirtualPath fragment -> LocalPath offset %zu: bytes=%zu\", SysMountPointLen, VirtPathLen);\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                OS_TranslatePath_Log(\"LocalPath constructed: '%.*s'\", (int)(SysMountPointLen + VirtPathLen), LocalPath);\n            }\n            else\n            {\n                OS_TranslatePath_Log(\"Resulting path too long: SysMountPointLen(%zu) + VirtPathLen(%zu) >= OS_MAX_LOCAL_PATH_LEN(%d)\",\n                                      SysMountPointLen, VirtPathLen, OS_MAX_LOCAL_PATH_LEN);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    OS_TranslatePath_Log(\"OS_TranslatePath EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}