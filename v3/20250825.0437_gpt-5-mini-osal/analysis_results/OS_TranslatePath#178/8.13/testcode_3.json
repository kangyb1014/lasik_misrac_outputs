{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away the const qualifier: VirtualPath is const char * but is passed as (void *)VirtualPath to OS_ObjectIdGetBySearch whose arg parameter is void * and whose MatchFunc (OS_FileSys_FindVirtMountPoint) takes void *ref (then casts it back to const char *). This discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. Recommended fix: change the API to use const void * for the arg and MatchFunc parameter (and adjust OS_ObjectIdGetBySearch prototype accordingly) so the const qualifier is preserved.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1783.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logger: append textual logs to /tmp/logs/1783.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1783.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE >= 200809L\n    localtime_r(&t, &tm_buf);\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d : \",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n#else\n    {\n        struct tm *lt = localtime(&t);\n        if (lt != NULL)\n        {\n            fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d : \",\n                    lt->tm_year + 1900, lt->tm_mon + 1, lt->tm_mday,\n                    lt->tm_hour, lt->tm_min, lt->tm_sec);\n        }\n        else\n        {\n            fprintf(f, \"unknown-time : \");\n        }\n    }\n#endif\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /* Log entry and pointer addresses (safe after the NULL checks) */\n    probe_log(\"OS_TranslatePath entry: VirtualPath=%p, LocalPath=%p\", (const void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    probe_log(\"VirtPathLen computed: %zu\", VirtPathLen);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        probe_log(\"VirtPathLen >= OS_MAX_PATH_LEN -> returning OS_FS_ERR_PATH_TOO_LONG\");\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    probe_log(\"strrchr returned name_ptr=%p (VirtualPath=%p)\", (const void *)name_ptr, (const void *)VirtualPath);\n    if (name_ptr == NULL)\n    {\n        probe_log(\"No '/' found in path -> returning OS_FS_ERR_PATH_INVALID\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    probe_log(\"name_ptr advanced to %p (points at '%c' if valid)\", (const void *)name_ptr,\n              (name_ptr && *name_ptr) ? *name_ptr : '?');\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        probe_log(\"No null terminator within OS_MAX_FILE_NAME -> returning OS_FS_ERR_NAME_TOO_LONG\");\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        probe_log(\"VirtualPath does not start with '/' (first char='%c') -> returning OS_FS_ERR_PATH_INVALID\", VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    probe_log(\"Calling OS_ObjectIdGetBySearch with VirtualPath cast to (void *). VirtualPath=%p, casted_arg=%p\",\n              (const void *)VirtualPath, (void *)VirtualPath);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    probe_log(\"OS_ObjectIdGetBySearch returned %d\", return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"OS_ObjectIdGetBySearch failed -> setting return_code=OS_FS_ERR_PATH_INVALID\");\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        probe_log(\"OS_OBJECT_TABLE_GET returned filesys pointer=%p\", (void *)filesys);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            probe_log(\"Mounted system: flags=0x%lx, system_mountpt='%s', virtual_mountpt='%s', SysMountPointLen=%zu, VirtPathBegin=%zu\",\n                      (unsigned long)filesys->flags,\n                      filesys->system_mountpt ? filesys->system_mountpt : \"(null)\",\n                      filesys->virtual_mountpt ? filesys->virtual_mountpt : \"(null)\",\n                      SysMountPointLen, VirtPathBegin);\n\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n                probe_log(\"Copied system_mountpt to LocalPath (len=%zu)\", SysMountPointLen);\n            }\n            else\n            {\n                probe_log(\"SysMountPointLen >= OS_MAX_LOCAL_PATH_LEN (=%d) -> potential truncation avoided; value=%zu\",\n                          OS_MAX_LOCAL_PATH_LEN, SysMountPointLen);\n            }\n        }\n        else\n        {\n            probe_log(\"Filesystem not mounted system flag set -> returning OS_ERR_INCORRECT_OBJ_STATE\");\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Released token via OS_ObjectIdRelease\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            probe_log(\"VirtPathLen < VirtPathBegin (%zu < %zu) -> returning OS_FS_ERR_PATH_INVALID\", VirtPathLen, VirtPathBegin);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            probe_log(\"After subtracting VirtPathBegin, VirtPathLen=%zu, SysMountPointLen=%zu\", VirtPathLen, SysMountPointLen);\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                probe_log(\"Constructed LocalPath='%s' (total_len=%zu)\", LocalPath, SysMountPointLen + VirtPathLen);\n            }\n            else\n            {\n                probe_log(\"Local path too long: SysMountPointLen(%zu) + VirtPathLen(%zu) >= OS_MAX_LOCAL_PATH_LEN(%d)\",\n                          SysMountPointLen, VirtPathLen, OS_MAX_LOCAL_PATH_LEN);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    probe_log(\"OS_TranslatePath exit: return_code=%d\", return_code);\n    return return_code;\n}\n"
}