{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_GetStubEntry the loop uses while (1) whose controlling expression is the invariant constant 1. This loop is not intended to be an infinite loop (it relies on internal break conditions to terminate when SearchLen >= SearchLimit or when a matching entry is found), so the invariant controlling expression violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3025.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger that appends control-flow and state information to /tmp/logs/3025.txt */\nstatic void UT_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3025.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fclose(f);\n    }\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    UT_ProbeLog(\"ENTRY: UT_DoSetHookFunction(FuncKey=%lu, EntryType=%lu, Value.Addr=%p, UserObj=%p, IsVarg=%d)\\n\",\n                (unsigned long)FuncKey, (unsigned long)EntryType, (void *)Value.Addr, UserObj, (int)IsVarg);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    UT_ProbeLog(\"After UT_GetStubEntry(initial): StubPtr=%p\\n\", (void *)StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        UT_ProbeLog(\"No existing entry and Value.Addr != NULL -> searching for UNUSED slot\\n\");\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        UT_ProbeLog(\"After UT_GetStubEntry(UNUSED): StubPtr=%p\\n\", (void *)StubPtr);\n        if (StubPtr == NULL)\n        {\n            UT_ProbeLog(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low? Aborting via UtAssert_Abort()\\n\");\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ProbeLog(\"Deleting entry at StubPtr=%p (FuncKey=%lu, EntryType=%lu)\\n\",\n                    (void *)StubPtr, (unsigned long)FuncKey, (unsigned long)EntryType);\n        UT_ClearStubEntry(StubPtr);\n        UT_ProbeLog(\"Entry deleted: StubPtr=%p\\n\", (void *)StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_ProbeLog(\"Setting entry at StubPtr=%p -> FuncKey=%lu, EntryType=%lu, UserObj=%p, Value.Addr=%p, IsVarg=%d\\n\",\n                    (void *)StubPtr, (unsigned long)FuncKey, (unsigned long)EntryType, UserObj, (void *)Value.Addr, (int)IsVarg);\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        UT_ProbeLog(\"Entry set: StubPtr=%p\\n\", (void *)StubPtr);\n    }\n\n    UT_ProbeLog(\"EXIT: UT_DoSetHookFunction(FuncKey=%lu)\\n\", (unsigned long)FuncKey);\n}\n"
}