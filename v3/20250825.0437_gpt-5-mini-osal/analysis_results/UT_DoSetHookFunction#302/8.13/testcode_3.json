{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter UserObj is declared as void * (non-const) and the code stores it into StubPtr->Data.Cb.CallbackArg. If CallbackArg is also a non-const pointer (e.g. void *CallbackArg) and the pointed-to object is not intended to be modified by the stub system, then the pointer types should be const-qualified (const void *) per MISRA C 2023 Rule 8.13. Thus this assignment represents a violation: a pointer is declared/used without const qualification where a const-qualified pointer would be appropriate. (If CallbackArg is already declared as const void * or there is a deliberate need to modify the pointee, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helpers for capturing control flow and state into\n * /tmp/logs/3023.txt (falls back to /tmp/3023.txt if needed).\n */\nstatic void UT_LogToFile(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3023.txt\", \"a\");\n    if (f == NULL)\n    {\n        f = fopen(\"/tmp/3023.txt\", \"a\");\n        if (f == NULL)\n        {\n            /* If logging cannot be opened, silently return to avoid changing behavior */\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void UT_LogStubState(const char *stage,\n                            UT_EntryKey_t FuncKey,\n                            UT_EntryType_t EntryType,\n                            UT_HookFuncPtr_t Value,\n                            void *UserObj,\n                            bool IsVarg,\n                            const UT_StubTableEntry_t *StubPtr)\n{\n    /* Print pointer values and basic state. Cast numeric/enum types to unsigned long long.\n     * Avoid altering any program state. */\n    UT_LogToFile(\"Stage=%s: FuncKey=%llu, EntryType=%llu, Value.Addr=%p, UserObj=%p, IsVarg=%d, StubPtr=%p\",\n                 stage,\n                 (unsigned long long)(uintptr_t)FuncKey,\n                 (unsigned long long)(uintptr_t)EntryType,\n                 (void *)Value.Addr,\n                 UserObj,\n                 (int)IsVarg,\n                 (const void *)StubPtr);\n\n    if (StubPtr != NULL)\n    {\n        /* Attempt to print existing CallbackArg if available. Use a try/catch style of checking fields\n         * by assuming the structure layout exists in the compilation unit (it does in the target code).\n         */\n        UT_LogToFile(\"  -> Existing CallbackArg (at stage %s) = %p\", stage, (void *)StubPtr->Data.Cb.CallbackArg);\n    }\n}\n\nstatic void UT_LogAbortMessage(const char *msg,\n                               UT_EntryKey_t FuncKey,\n                               UT_EntryType_t EntryType,\n                               UT_HookFuncPtr_t Value,\n                               void *UserObj,\n                               bool IsVarg)\n{\n    UT_LogToFile(\"ABORT: %s -- FuncKey=%llu, EntryType=%llu, Value.Addr=%p, UserObj=%p, IsVarg=%d\",\n                 msg,\n                 (unsigned long long)(uintptr_t)FuncKey,\n                 (unsigned long long)(uintptr_t)EntryType,\n                 (void *)Value.Addr,\n                 UserObj,\n                 (int)IsVarg);\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry into function with parameters */\n    UT_LogStubState(\"entry\", FuncKey, EntryType, Value, UserObj, IsVarg, NULL);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n\n    /* Log after initial search */\n    UT_LogStubState(\"after_initial_search\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        UT_LogToFile(\"Creating force-fail entry: initial StubPtr NULL and Value.Addr != NULL (Value.Addr=%p)\", (void *)Value.Addr);\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        /* Log after grabbing unused slot attempt */\n        UT_LogStubState(\"after_get_unused_slot\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        if (StubPtr == NULL)\n        {\n            /* Log abort reason and parameters then call abort routine as originally coded */\n            UT_LogAbortMessage(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\", FuncKey, EntryType, Value, UserObj, IsVarg);\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_LogStubState(\"before_delete\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n        UT_ClearStubEntry(StubPtr);\n        UT_LogStubState(\"after_delete\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_LogStubState(\"before_set\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n\n        /* Log the pointer values involved in the potentially problematic assignment */\n        UT_LogToFile(\"Assigning CallbackArg: StubPtr=%p, old CallbackArg=%p, New UserObj=%p\", (void *)StubPtr,\n                     (void *)StubPtr->Data.Cb.CallbackArg,\n                     UserObj);\n\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        /* Log state after assignment to capture evidence of the assignment */\n        UT_LogStubState(\"after_set\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n    }\n\n    /* Final exit log */\n    UT_LogStubState(\"exit\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n}\n"
}