{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nUT_BSP_DoText calls strlen(OutputMessage) with no check that OutputMessage is non-NULL or that it points to a NUL-terminated character array. If a caller passes a buffer that is not NUL-terminated (for example: char buf[10]; memcpy(buf, src, 10); UT_BSP_DoText(..., buf);) or passes a NULL pointer, strlen will read past the bounds of the object (or dereference NULL), thereby violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3029.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <stdint.h>\n\n/* Helper - open the log file (create directory if necessary) */\nstatic FILE *UT_OpenLog(void)\n{\n    FILE *f = fopen(\"/tmp/logs/3029.txt\", \"a\");\n    if (f != NULL)\n    {\n        return f;\n    }\n\n    /* Try to create the directory if it doesn't exist and reopen */\n    if (mkdir(\"/tmp/logs\", 0755) == 0 || errno == EEXIST)\n    {\n        f = fopen(\"/tmp/logs/3029.txt\", \"a\");\n    }\n\n    return f;\n}\n\n/* Helper - write a formatted log line */\nstatic void UT_Log(const char *fmt, ...)\n{\n    FILE *f = UT_OpenLog();\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry and observable parameters (only pointer-like values to avoid type assumptions) */\n    UT_Log(\"ENTER UT_DoSetHookFunction: Value.Addr=%p UserObj=%p IsVarg=%d\",\n           (void *)(uintptr_t)Value.Addr, UserObj, IsVarg ? 1 : 0);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    UT_Log(\"After first UT_GetStubEntry: StubPtr=%p\", (void *)StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        UT_Log(\"No existing stub found and Value.Addr != NULL, searching for unused slot\");\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        UT_Log(\"After second UT_GetStubEntry (UNUSED): StubPtr=%p\", (void *)StubPtr);\n        if (StubPtr == NULL)\n        {\n            UT_Log(\"ERROR: Cannot set hook function - UT_MAX_FUNC_STUBS too low? About to call UtAssert_Abort\");\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_Log(\"Deleting entry: StubPtr=%p (clearing)\", (void *)StubPtr);\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_Log(\"Setting entry: StubPtr=%p FuncKey=? EntryType=? UserObj=%p Value.Addr=%p IsVarg=%d\",\n               (void *)StubPtr, UserObj, (void *)(uintptr_t)Value.Addr, IsVarg ? 1 : 0);\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        UT_Log(\"Set complete: StubPtr=%p (FuncKey/EntryType assigned)\", (void *)StubPtr);\n    }\n\n    UT_Log(\"EXIT UT_DoSetHookFunction: StubPtr=%p\", (void *)StubPtr);\n}\n"
}