{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nUtAssert_DoReport calls strlen(File) without validating that File points to a valid, null-terminated buffer. UtAssertEx forwards its File parameter to UtAssert_DoReport unchanged and does not check for NULL. If a caller passes File == NULL (or a non\u2013null-terminated buffer), strlen(File) will access memory beyond the bounds of the referenced object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_DoReport code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2819.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_DoReport as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_DoReport:\n```c\nvoid UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    FileLen = strlen(File);\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_DoReport code.\n",
  "test_code": "void UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    /* Probe log file to capture control flow and state for debugging the potential strlen() misuse. */\n    FILE *log = fopen(\"/tmp/logs/2819.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: UtAssert_DoReport\\n\");\n        fprintf(log, \"  Params: File=%p, LineNum=%u, SegmentNum=%u, TestSeq=%u, MessageType=%u\\n\",\n                (const void *)File, (unsigned)LineNum, (unsigned)SegmentNum, (unsigned)TestSeq, (unsigned)MessageType);\n        fprintf(log, \"  Pointers: SubsysName=%p, ShortDesc=%p\\n\", (const void *)SubsysName, (const void *)ShortDesc);\n        fflush(log);\n        /* Keep file open to log subsequent state changes. */\n    }\n\n    /* The original call to strlen is preserved to allow reproduction of the reported violation. */\n    FileLen = strlen(File);\n\n    if (log)\n    {\n        fprintf(log, \"  After strlen(): FileLen=%u\\n\", (unsigned)FileLen);\n        fflush(log);\n    }\n\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (log)\n        {\n            /* Log each step as the code walks backwards to find the base filename. */\n            fprintf(log, \"    Loop: BasePtr=%p, *BasePtr='%c', RemainingLen=%u\\n\",\n                    (const void *)BasePtr, (*BasePtr >= ' ' && *BasePtr <= '~') ? *BasePtr : '?', (unsigned)FileLen);\n            fflush(log);\n        }\n\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            if (log)\n            {\n                fprintf(log, \"    Found separator, final BasePtr=%p\\n\", (const void *)BasePtr);\n                fflush(log);\n            }\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    if (log)\n    {\n        fprintf(log, \"  ReportBuffer: %s\\n\", ReportBuffer);\n        fprintf(log, \"EXIT: UtAssert_DoReport\\n\\n\");\n        fclose(log);\n    }\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n"
}