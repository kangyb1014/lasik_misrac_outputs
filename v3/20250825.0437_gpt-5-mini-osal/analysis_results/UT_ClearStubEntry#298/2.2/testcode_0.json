{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment \"Counter = 0;\" in UT_DefaultStubImplWithArgs is dead code. Immediately after this line the code obtains/creates a counter table entry and, on the non-abort path, always assigns Counter = StubPtr->Data.Rc.Count before any use of Counter. If StubPtr remains NULL the function calls UtAssert_Abort (control does not continue). Therefore the initial assignment is executed but has no effect on subsequent behaviour and could be removed without changing the program.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2982.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ClearStubEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\nPlease provide the modified UT_ClearStubEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Helper probe: log the state and decisions for UT_ClearStubEntry.\n * Writes an append-only log to /tmp/logs/2982.txt. */\nstatic void UT_LogClearStubEntry(const void *StubPtr, const char *stage, unsigned int EntryType, void *BasePtr, unsigned int ModeFlags)\n{\n    FILE *f = fopen(\"/tmp/logs/2982.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging; do not affect behaviour */\n    }\n\n    fprintf(f, \"UT_ClearStubEntry %s: StubPtr=%p, EntryType=%u, BasePtr=%p, ModeFlags=0x%08X\\n\",\n            stage, StubPtr, EntryType, BasePtr, ModeFlags);\n\n    fclose(f);\n}\n\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    /* Log entry state before any action */\n    UT_LogClearStubEntry(StubPtr, \"enter\", StubPtr->EntryType, (void *)StubPtr->Data.Buff.BasePtr, StubPtr->ModeFlags);\n\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        /* Log that we are about to free the buffer */\n        UT_LogClearStubEntry(StubPtr, \"before_free\", StubPtr->EntryType, (void *)StubPtr->Data.Buff.BasePtr, StubPtr->ModeFlags);\n\n        free(StubPtr->Data.Buff.BasePtr);\n\n        /* Log after free (buffer pointer still contains the old value until memset) */\n        UT_LogClearStubEntry(StubPtr, \"after_free\", StubPtr->EntryType, (void *)StubPtr->Data.Buff.BasePtr, StubPtr->ModeFlags);\n    }\n\n    /* Log immediately before clearing the entire entry */\n    UT_LogClearStubEntry(StubPtr, \"before_memset\", StubPtr->EntryType, (void *)StubPtr->Data.Buff.BasePtr, StubPtr->ModeFlags);\n\n    memset(StubPtr, 0, sizeof(*StubPtr));\n\n    /* Log completion of clear \u2014 note StubPtr contents are now zeroed; log only the pointer address */\n    UT_LogClearStubEntry(StubPtr, \"after_memset\", 0u, NULL, 0u);\n}\n"
}