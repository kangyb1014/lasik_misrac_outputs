{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe source pointer Data.Rvc.Buf.IndirectPtr is used only for reading (passed as the source to memcpy) but is likely declared as a non-const pointer (e.g. void * or uint8_t *). Under MISRA C 2023 Rule 8.13 this is a violation: the pointer should be declared to point to a const-qualified type (e.g. const void * or const uint8_t *) when the pointed-to data is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2983.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ClearStubEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\nPlease provide the modified UT_ClearStubEntry code.\n",
  "test_code": "static void UT_Log_ClearStubEntry(const UT_StubTableEntry_t *StubPtr, const char *stage)\n{\n    /* Probe function: log control flow and the raw state of the stub entry to a file.\n       Uses const-qualified pointer to avoid suggesting modification of the pointed-to data. */\n    FILE *fp = fopen(\"/tmp/logs/2983.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging isn't possible, do not affect main logic. */\n    }\n\n    /* Log high-level fields that are known to exist in the structure. */\n    fprintf(fp, \"UT_ClearStubEntry: stage=%s, StubPtr=%p, struct_size=%zu\\n\",\n            stage, (const void *)StubPtr, sizeof(*StubPtr));\n\n    /* EntryType and ModeFlags are referenced in the original function; log them. */\n    fprintf(fp, \"  EntryType=%u, ModeFlags=0x%08lx\\n\",\n            (unsigned int)StubPtr->EntryType,\n            (unsigned long)StubPtr->ModeFlags);\n\n    /* Log the BasePtr pointer value (we do not dereference it). */\n    fprintf(fp, \"  Data.Buff.BasePtr=%p\\n\", (const void *)StubPtr->Data.Buff.BasePtr);\n\n    /* Dump raw bytes of the structure to capture any embedded pointer values (e.g. IndirectPtr)\n       without depending on specific field names. This captures the state for later inspection\n       and does not dereference any pointers contained in the struct. */\n    {\n        const unsigned char *bytes = (const unsigned char *)StubPtr;\n        size_t i;\n        fprintf(fp, \"  RawBytes=\");\n        for (i = 0; i < sizeof(*StubPtr); ++i)\n        {\n            fprintf(fp, \"%02X\", (unsigned)bytes[i]);\n        }\n        fprintf(fp, \"\\n\");\n    }\n\n    fclose(fp);\n}\n\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    /* Log entry state prior to any potential free */\n    UT_Log_ClearStubEntry((const UT_StubTableEntry_t *)StubPtr, \"pre-clear\");\n\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        /* Log that free will be performed and record state just before free */\n        UT_Log_ClearStubEntry((const UT_StubTableEntry_t *)StubPtr, \"before-free\");\n        free(StubPtr->Data.Buff.BasePtr);\n        /* Log state after free (note: we only log the struct contents; we do not dereference freed memory) */\n        UT_Log_ClearStubEntry((const UT_StubTableEntry_t *)StubPtr, \"after-free\");\n    }\n\n    memset(StubPtr, 0, sizeof(*StubPtr));\n\n    /* Log final cleared state */\n    UT_Log_ClearStubEntry((const UT_StubTableEntry_t *)StubPtr, \"after-memset\");\n}\n"
}