{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns a const char * (TypeName) to StubPtr->Data.Buff.ContentTypeStr which is apparently a non-const pointer (char *). This discards the const qualifier and allows a non-const pointer to reference const data \u2014 violating MISRA C 2023 Rule 8.13. (Fix: declare ContentTypeStr as const char * so the pointer is const-qualified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2983.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ClearStubEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\nPlease provide the modified UT_ClearStubEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/2983.txt */\nstatic void UT_CreateLogDir(void)\n{\n    /* best-effort create directory; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void UT_LogStubEntryState(const UT_StubTableEntry_t *StubPtr, const char *Stage)\n{\n    FILE *F;\n\n    UT_CreateLogDir();\n    F = fopen(\"/tmp/logs/2983.txt\", \"a\");\n    if (F == NULL)\n    {\n        return; /* if logging is not possible, do not interfere with original logic */\n    }\n\n    /* Log control stage and key state fields used in UT_ClearStubEntry. Casts used to avoid format-mismatch */\n    fprintf(F, \"---- UT_ClearStubEntry LOG (%s) ----\\n\", Stage);\n    fprintf(F, \"StubPtr=%p, sizeof_stub=%zu\\n\", (const void *)StubPtr, sizeof(*StubPtr));\n\n    /* EntryType and ModeFlags exist in the original structure; print as unsigned long for safety */\n    fprintf(F, \"EntryType=%lu, ModeFlags=0x%lx\\n\",\n            (unsigned long)StubPtr->EntryType,\n            (unsigned long)StubPtr->ModeFlags);\n\n    /* Data.Buff.BasePtr is the buffer pointer that may be freed; print its value */\n    fprintf(F, \"Data.Buff.BasePtr=%p\\n\", (const void *)StubPtr->Data.Buff.BasePtr);\n\n    /* Mark end of entry */\n    fprintf(F, \"------------------------------------\\n\");\n    fflush(F);\n    fclose(F);\n}\n\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Log initial state */\n    UT_LogStubEntryState(StubPtr, \"initial\");\n\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        /* Log just before free to capture pointer and flags leading to free */\n        UT_LogStubEntryState(StubPtr, \"before_free\");\n\n        free(StubPtr->Data.Buff.BasePtr);\n\n        /* Log immediately after free to capture the fact that free was performed */\n        UT_LogStubEntryState(StubPtr, \"after_free\");\n    }\n\n    memset(StubPtr, 0, sizeof(*StubPtr));\n\n    /* Log final state after clearing */\n    UT_LogStubEntryState(StubPtr, \"after_memset\");\n}\n"
}