{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nParamPtr is declared as 'const void *' but ArgPtr is (non-const) 'void *' so the assignment StubPtr->Data.Context.ArgPtr[...] = ParamPtr discards the const qualifier. This violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_RegisterContextWithMetaData code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_RegisterContextWithMetaData as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_RegisterContextWithMetaData:\n```c\nvoid UT_Stub_RegisterContextWithMetaData(UT_EntryKey_t FuncKey, const char *Name, UT_StubContext_Arg_Type_t ParamType,\n                                         const void *ParamPtr, size_t ParamSize)\n{\n    UT_StubTableEntry_t * StubPtr;\n    UT_StubArgMetaData_t *MetaPtr;\n\n    /*\n     * First find an existing context entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (StubPtr == NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey   = FuncKey;\n        StubPtr->EntryType = UT_ENTRYTYPE_CALLBACK_CONTEXT;\n        if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;\n\n            /*\n             * If name was specified, then trim any leading address operator (&)\n             * and/or whitespace, keeping only the actual name part.\n             */\n            if (Name != NULL)\n            {\n                /*\n                 * If the _address_ of the stack variable was actually passed in,\n                 * the mark this as indirect (i.e. hook must dereference ArgPtr\n                 * to get actual parameter value).  Otherwise assume it as direct.\n                 */\n                MetaPtr->Name = Name;\n                while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n                }\n            }\n            ++StubPtr->Data.Context.ArgCount;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_RegisterContextWithMetaData code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe/log helper - keeps const correctness and does not change program logic */\nstatic void UT_Log3223(size_t FuncKey, const char *Stage, void *StubPtr, const void *ParamPtr,\n                       size_t ParamSize, const char *Name, int ParamType, size_t ArgIndex)\n{\n    FILE *f = fopen(\"/tmp/logs/3223.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect original logic; just return */\n        return;\n    }\n\n    fprintf(f, \"Stage: %s\\n\", Stage);\n    fprintf(f, \" FuncKey: %zu\\n\", FuncKey);\n    fprintf(f, \" StubPtr: %p\\n\", StubPtr);\n    fprintf(f, \" ParamPtr (value): %p\\n\", ParamPtr);\n    fprintf(f, \" ParamSize: %zu\\n\", ParamSize);\n    fprintf(f, \" Name: %s\\n\", (Name != NULL) ? Name : \"(null)\");\n    fprintf(f, \" ParamType (int): %d\\n\", ParamType);\n    fprintf(f, \" ArgIndex (expected ArgCount): %zu\\n\", ArgIndex);\n    fprintf(f, \"-----------------------------\\n\");\n    fclose(f);\n}\n\nvoid UT_Stub_RegisterContextWithMetaData(UT_EntryKey_t FuncKey, const char *Name, UT_StubContext_Arg_Type_t ParamType,\n                                         const void *ParamPtr, size_t ParamSize)\n{\n    UT_StubTableEntry_t * StubPtr;\n    UT_StubArgMetaData_t *MetaPtr;\n\n    /* Log entry with the initial parameters */\n    UT_Log3223((size_t)FuncKey, \"enter\", NULL, ParamPtr, ParamSize, Name, (int)ParamType, 0);\n\n    /*\n     * First find an existing context entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n\n    /* Log after first lookup */\n    UT_Log3223((size_t)FuncKey, \"after_first_lookup\", StubPtr, ParamPtr, ParamSize, Name, (int)ParamType,\n               (StubPtr != NULL) ? StubPtr->Data.Context.ArgCount : 0);\n\n    if (StubPtr == NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    /* Log after second lookup (possibly still NULL) */\n    UT_Log3223((size_t)FuncKey, \"after_second_lookup\", StubPtr, ParamPtr, ParamSize, Name, (int)ParamType,\n               (StubPtr != NULL) ? StubPtr->Data.Context.ArgCount : 0);\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey   = FuncKey;\n        StubPtr->EntryType = UT_ENTRYTYPE_CALLBACK_CONTEXT;\n        if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            /* Log state just before assignment that triggers the reported const-discard */\n            UT_Log3223((size_t)FuncKey, \"before_assignment\", StubPtr, ParamPtr, ParamSize, Name, (int)ParamType,\n                       StubPtr->Data.Context.ArgCount);\n\n            /* This is the assignment that (in the static analysis) discards const qualifier */\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            /* Log state immediately after assignment */\n            UT_Log3223((size_t)FuncKey, \"after_assignment\", StubPtr, ParamPtr, ParamSize, Name, (int)ParamType,\n                       StubPtr->Data.Context.ArgCount);\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;\n\n            /*\n             * If name was specified, then trim any leading address operator (&)\n             * and/or whitespace, keeping only the actual name part.\n             */\n            if (Name != NULL)\n            {\n                /*\n                 * If the _address_ of the stack variable was actually passed in,\n                 * the mark this as indirect (i.e. hook must dereference ArgPtr\n                 * to get actual parameter value).  Otherwise assume it as direct.\n                 */\n                MetaPtr->Name = Name;\n                while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n                }\n            }\n\n            /* Log final state for this registration */\n            UT_Log3223((size_t)FuncKey, \"final_before_increment\", StubPtr, ParamPtr, ParamSize, Name,\n                       (int)ParamType, StubPtr->Data.Context.ArgCount);\n\n            ++StubPtr->Data.Context.ArgCount;\n\n            /* Log after ArgCount increment */\n            UT_Log3223((size_t)FuncKey, \"final_after_increment\", StubPtr, ParamPtr, ParamSize, Name,\n                       (int)ParamType, StubPtr->Data.Context.ArgCount);\n        }\n    }\n}\n"
}