{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_Stub_RegisterContextWithMetaData:\n```c\nvoid UT_Stub_RegisterContextWithMetaData(UT_EntryKey_t FuncKey, const char *Name, UT_StubContext_Arg_Type_t ParamType,\n                                         const void *ParamPtr, size_t ParamSize)\n{\n    UT_StubTableEntry_t * StubPtr;\n    UT_StubArgMetaData_t *MetaPtr;\n\n    /*\n     * First find an existing context entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (StubPtr == NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey   = FuncKey;\n        StubPtr->EntryType = UT_ENTRYTYPE_CALLBACK_CONTEXT;\n        if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;\n\n            /*\n             * If name was specified, then trim any leading address operator (&)\n             * and/or whitespace, keeping only the actual name part.\n             */\n            if (Name != NULL)\n            {\n                /*\n                 * If the _address_ of the stack variable was actually passed in,\n                 * the mark this as indirect (i.e. hook must dereference ArgPtr\n                 * to get actual parameter value).  Otherwise assume it as direct.\n                 */\n                MetaPtr->Name = Name;\n                while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n                }\n            }\n            ++StubPtr->Data.Context.ArgCount;\n        }\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UT_Stub_RegisterContextWithMetaData:\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t TestMode)\n{\n    UT_StubTableEntry_t *StubPtr   = NULL;\n    uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */\n    uint32               SearchLen = 0;\n    uint32               SearchLimit;\n    UT_EntryKey_t        SearchKey;\n\n    /* If searching for an unused entry, look through the entire table.\n     * Otherwise bound the search */\n    if (TestMode == UT_ENTRYTYPE_UNUSED)\n    {\n        SearchLimit = UT_MAX_FUNC_STUBS;\n        SearchKey   = 0;\n    }\n    else\n    {\n        SearchLimit = UT_MaxStubSearchLen;\n        SearchKey   = FuncKey;\n    }\n\n    while (1)\n    {\n        if (SearchLen >= SearchLimit)\n        {\n            StubPtr = NULL;\n            break;\n        }\n        ++SearchLen;\n        StubPtr = &UT_StubTable[Idx];\n        if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            break;\n        }\n        ++Idx;\n        if (Idx >= UT_MAX_FUNC_STUBS)\n        {\n            Idx = 0;\n        }\n    }\n\n    /*\n     * Keep track of the longest search length since the last reset.\n     * This serves as the upper bound for future searches.\n     */\n    if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_MaxStubSearchLen = SearchLen;\n    }\n\n    return StubPtr;\n}\n...\nvoid UtAssert_Abort(const char *Message)\n{\n    UT_BSP_DoText(UTASSERT_CASETYPE_ABORT, Message);\n}\n...\n#define UT_STUBCONTEXT_MAXSIZE 8\n...\n#define UT_MAX_FUNC_STUBS 200\n...\ntypedef struct\n{\n    UT_EntryType_t EntryType;\n    uint32         ModeFlags;\n    UT_EntryKey_t  FuncKey;\n    UT_EntryData_t Data;\n} UT_StubTableEntry_t\n...\ntypedef struct\n{\n    UT_StubContext_Arg_Type_t Type;\n    const char *              Name;\n    size_t                    Size;\n} UT_StubArgMetaData_t\n...\ntypedef cpuaddr UT_EntryKey_t\n...\ntypedef enum\n{\n    UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED = 0,\n    UT_STUBCONTEXT_ARG_TYPE_DIRECT,  /**< Indicates \"ArgPtr\" is a direct copy of the actual parameter value */\n    UT_STUBCONTEXT_ARG_TYPE_INDIRECT /**< Indicates \"ArgPtr\" is a pointer to the argument value on the stack */\n} UT_StubContext_Arg_Type_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;",
    "if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n                }",
    "if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_MaxStubSearchLen = SearchLen;\n    }",
    "while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }",
    "if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            break;\n        }",
    "if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {",
    "if (SearchLen >= SearchLimit)\n    {\n        StubPtr = NULL;\n        break;\n    }"
  ],
  "explanation": "I selected fragments that can lead to potentially unreachable paths or that rely on run-time/invariant properties and therefore should be investigated for MISRA Rule 2.1 (no unreachable code):\n\n- The top-of-loop early-exit in UT_GetStubEntry (SearchLen >= SearchLimit) can cause the search loop body to never execute when SearchLimit is 0; this may make subsequent search-related code effectively unreachable in that invocation and needs verification of initial UT_MaxStubSearchLen behaviour.\n\n- The match-and-break condition (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey) deserves review because, for the UNUSED search mode SearchKey is forced to 0. If unused entries never have FuncKey==0, this branch will never be taken when searching for UNUSED entries and the intended behaviour may be wrong (or some code paths in the loop may be effectively unreachable).\n\n- The update of UT_MaxStubSearchLen (if (SearchLen > UT_MaxStubSearchLen) ...) could be unreachable depending on how SearchLen and UT_MaxStubSearchLen are bounded/initialized; verify that SearchLen can actually exceed UT_MaxStubSearchLen in normal operation.\n\n- The UtAssert_Abort() call inside UT_Stub_RegisterContextWithMetaData must be checked to determine whether it is a non-returning abort. If UtAssert_Abort (or UT_BSP_DoText it calls) does not return, code paths that follow from the caller might be unreachable; conversely if it does return then current structure is fine. This affects reachability of the else branch and subsequent code.\n\n- The Name-trimming while loop and the subsequent defaulting of MetaPtr->Type rely on MetaPtr->Name and MetaPtr->Type initial values. If MetaPtr->Name is not a valid null-terminated string or MetaPtr->Type is not initialized to UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED prior to this code, some branches inside the loop or the default-assignment may never be executed (or may access invalid memory). These are potential sources of unreachable/ill-formed behaviour and should be validated.\n\n- The block guarded by the ArgCount check (if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE) { ... }) prevents adding entries once the limit is reached but silently does nothing otherwise. Investigate whether the code path that would add beyond the limit is intended to be unreachable or should instead signal an error; if the silent-skip is unintended it may indicate unreachable-logic elsewhere.\n\nWhy other fragments need not be investigated for reachability: most straightforward assignments, pointer stores and the increment of ArgCount are standard control-flow and are reachable when their preconditions hold (e.g. when StubPtr != NULL and ArgCount < max). There are no obvious dead statements after return/break/continue that are obviously never executed (other than the cases highlighted above). The remaining code flow depends on run-time conditions (search results, ArgCount, Name being NULL) rather than static unreachable constructs, so it does not violate Rule 2.1 unless the runtime invariants (initialization of UT_MaxStubSearchLen, MetaPtr contents, behaviour of UtAssert_Abort) make certain branches impossible \u2014 those are exactly the places I've flagged for investigation."
}