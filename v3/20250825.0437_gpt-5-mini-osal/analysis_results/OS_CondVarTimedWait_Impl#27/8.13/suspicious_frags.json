{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait_Impl:\n```c\nint32 OS_CondVarTimedWait_Impl(const OS_object_token_t *token, const OS_time_t *abs_wakeup_time)\n{\n    struct timespec                    limit;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    limit.tv_sec  = OS_TimeGetTotalSeconds(*abs_wakeup_time);\n    limit.tv_nsec = OS_TimeGetNanosecondsPart(*abs_wakeup_time);\n\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_timedwait(&impl->cv, &impl->mut, &limit);\n    pthread_cleanup_pop(false);\n\n    if (status == ETIMEDOUT)\n    {\n        return OS_ERROR_TIMEOUT;\n    }\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarTimedWait_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    int64 ticks; /**< Ticks elapsed since reference point */\n} OS_time_t\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nstatic inline int64 OS_TimeGetTotalSeconds(OS_time_t tm)\n{\n    return (tm.ticks / OS_TIME_TICKS_PER_SECOND);\n}\n...\nstatic inline uint32 OS_TimeGetNanosecondsPart(OS_time_t tm)\n{\n    return (uint32)OS_TimeGetFractionalPart(tm) * OS_TIME_TICK_RESOLUTION_NS;\n}\n...\nstatic void OS_Posix_CondVarReleaseMutex(void *mut)\n{\n    pthread_mutex_unlock(mut);\n}\n...\n#define OS_ERROR_TIMEOUT (-4)\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "OS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]",
    "status = pthread_cond_timedwait(&impl->cv, &impl->mut, &limit);",
    "pthread_mutex_unlock(mut);",
    "limit.tv_nsec = OS_TimeGetNanosecondsPart(*abs_wakeup_time);",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);",
    "struct timespec                    limit;",
    "static void OS_Posix_CondVarReleaseMutex(void *mut)",
    "limit.tv_sec  = OS_TimeGetTotalSeconds(*abs_wakeup_time);",
    "OS_impl_condvar_internal_record_t *impl;",
    "pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);"
  ],
  "explanation": "Fragments not listed do not need investigation for MISRA C 2023 Rule 8.13 because they already use const where appropriate or involve objects that must be modifiable: - The function parameters in OS_CondVarTimedWait_Impl are already const-qualified (const OS_object_token_t *token, const OS_time_t *abs_wakeup_time). - OS_TimeGetTotalSeconds and OS_TimeGetNanosecondsPart take OS_time_t by value, so no pointer const-qualification applies. - The pthread_cond_timedwait first two arguments refer to mutex/condvar objects that are modified by the POSIX API, so those pointers must be to mutable objects. - OS_Posix_CondVarReleaseMutex performs an unlock operation which modifies the mutex state; its parameter cannot be const-qualified. - Return-value checks, error-code defines, and simple scalar variables (status, return statements) do not involve pointer const-qualification and thus are not relevant to Rule 8.13.\n\nThe listed fragments are provided for investigation because they involve taking addresses or using pointer arguments where a const qualification might be applicable (for example, the local timespec object whose address is passed to a function expecting a const timespec*, and usages/macros that obtain pointers to table entries)."
}