{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGive_Impl:\n```c\nint32 OS_CountSemGive_Impl(const OS_object_token_t *token)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_post(&impl->id) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the provided code for use of compiler-specific language extensions (for example: identifiers or constructs documented as extensions in compilers such as GCC/Clang/MSVC\u2014e.g. __attribute__, __asm, __declspec, typeof, __builtin_*, __extension__, inline assembler, integer kinds like __int128, or other vendor-specific keywords). None of these appear in the snippet.\n\nNotes on specific tokens in the code:\n- int32: this is a typedef name (not a built-in compiler extension). Using a typedef does not constitute a language extension.\n- sem_post: POSIX library function, not a compiler language extension.\n- OS_OBJECT_TABLE_GET and the OS_* types: these are project macros/types; macros and typedefs are part of standard C preprocessing/type system, not compiler language extensions by themselves. Without evidence the macro expands into a compiler-specific extension, it should not be flagged.\n\nTherefore there are no occurrences of explicit compiler language extensions in the fragment and no code fragments need further investigation for MISRA C 2023 Rule 1.2."
}