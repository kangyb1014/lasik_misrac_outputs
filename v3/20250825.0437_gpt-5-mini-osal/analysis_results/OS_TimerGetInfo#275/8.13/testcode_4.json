{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'timebase' is used only for reading (timebase = OS_OBJECT_TABLE_GET(...); then only timebase->accuracy_usec is read) but is declared as a pointer to a non-const type. According to MISRA C 2023 Rule 8.13 it should be const-qualified whenever possible. Change the declaration to: const OS_timebase_internal_record_t *timebase; (Assigning the address of a non-const array element to a pointer-to-const is allowed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append formatted log lines to the required file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    probe_log(\"OS_TimerGetInfo: entered; timer_id=%ld, timer_prop=%p\", (long)timer_id, (void *)timer_prop);\n\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    probe_log(\"OS_TimerGetInfo: current objtype=%ld\", (long)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_log(\"OS_TimerGetInfo: incorrect context (called from timebase). Returning %ld\", (long)OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    probe_log(\"OS_TimerGetInfo: cleared timer_prop at %p\", (void *)timer_prop);\n\n    probe_log(\"OS_TimerGetInfo: calling OS_ObjectIdGetById for timer_id=%ld\", (long)timer_id);\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    probe_log(\"OS_TimerGetInfo: OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        /* timebase is read-only in this function; record its address and contents for evidence */\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        probe_log(\"OS_TimerGetInfo: token=%p, record=%p, timecb=%p, timecb->timebase_token=%ld\", (void *)&token, (void *)record, (void *)timecb, (long)timecb->timebase_token);\n        probe_log(\"OS_TimerGetInfo: timebase pointer=%p, timebase->accuracy_usec=%ld\", (void *)timebase, (long)timebase->accuracy_usec);\n        probe_log(\"OS_TimerGetInfo: timecb->interval_time=%ld\", (long)timecb->interval_time);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        probe_log(\"OS_TimerGetInfo: copied name='%s' -> timer_prop->name at %p\", record->name_entry, (void *)timer_prop->name);\n\n        timer_prop->creator       = record->creator;\n        probe_log(\"OS_TimerGetInfo: set creator=%ld\", (long)timer_prop->creator);\n\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        probe_log(\"OS_TimerGetInfo: set interval_time=%lu\", (unsigned long)timer_prop->interval_time);\n\n        timer_prop->accuracy      = timebase->accuracy_usec;\n        probe_log(\"OS_TimerGetInfo: set accuracy=%ld (from timebase at %p)\", (long)timer_prop->accuracy, (void *)timebase);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"OS_TimerGetInfo: released token and about to return success\");\n    }\n    else\n    {\n        probe_log(\"OS_TimerGetInfo: OS_ObjectIdGetById failed with return_code=%ld; returning that code\", (long)return_code);\n    }\n\n    probe_log(\"OS_TimerGetInfo: exiting with return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}