{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as 'OS_common_record_t *record' but is only used to read fields (record->name_entry, record->creator). It is assigned from OS_OBJECT_TABLE_GET(OS_global_timecb_table, token) and never modified through the pointer, so it could and should be declared as 'const OS_common_record_t *record' to indicate read-only access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: append a line to the log file with contextual information. */\nstatic void OS_TimerGetInfo_log(const char *label, const char *message)\n{\n    FILE *f = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Write a simple two-column log: label and message */\n        fprintf(f, \"%s: %s\\n\", label, message);\n        fclose(f);\n    }\n}\n\nstatic void OS_TimerGetInfo_log_field(const char *label, const char *name, const char *value)\n{\n    FILE *f = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s: %s = %s\\n\", label, name, value ? value : \"(null)\");\n        fclose(f);\n    }\n}\n\nstatic void OS_TimerGetInfo_log_u32(const char *label, const char *name, uint32_t value)\n{\n    FILE *f = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s: %s = %u\\n\", label, name, (unsigned) value);\n        fclose(f);\n    }\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log function entry and parameters (timer_prop may be NULL; OS_CHECK_POINTER handles that) */\n    OS_TimerGetInfo_log(\"ENTRY\", \"OS_TimerGetInfo entered\");\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"timer_id=%u, timer_prop=%p\", (unsigned)timer_id, (void *)timer_prop);\n        OS_TimerGetInfo_log(\"PARAMS\", buf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /* Log that pointer check passed */\n    OS_TimerGetInfo_log(\"CHECK\", \"timer_prop pointer valid\");\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    {\n        char buf[64];\n        snprintf(buf, sizeof(buf), \"objtype=%u\", (unsigned)objtype);\n        OS_TimerGetInfo_log(\"OBJTYPE\", buf);\n    }\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerGetInfo_log(\"RETURN\", \"Incorrect object state: called from timebase context\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    OS_TimerGetInfo_log(\"ACTION\", \"timer_prop zeroed\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_ObjectIdGetById returned %d\", (int)return_code);\n        OS_TimerGetInfo_log(\"LOOKUP\", buf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Log object addresses obtained and key field values used below. */\n        {\n            char buf[256];\n            /* record and timecb/timebase pointers printed as pointers to help trace which entries were returned */\n            snprintf(buf, sizeof(buf), \"record=%p, timecb=%p, timebase=%p\", (void *)record, (void *)timecb, (void *)timebase);\n            OS_TimerGetInfo_log(\"OBJECTS\", buf);\n        }\n\n        /* Log fields that will be read and copied into timer_prop. This demonstrates the \"read-only\" usage of 'record'. */\n        OS_TimerGetInfo_log_field(\"RECORD_FIELD\", \"name_entry\", record ? record->name_entry : \"(null)\");\n        {\n            char buf[64];\n            snprintf(buf, sizeof(buf), \"%u\", (unsigned)(record ? record->creator : 0u));\n            OS_TimerGetInfo_log_field(\"RECORD_FIELD\", \"creator\", buf);\n        }\n\n        OS_TimerGetInfo_log_u32(\"TIMECB_FIELD\", \"interval_time\", (uint32_t)(timecb ? (uint32_t)timecb->interval_time : 0u));\n        OS_TimerGetInfo_log_u32(\"TIMEBASE_FIELD\", \"accuracy_usec\", (uint32_t)(timebase ? (uint32_t)timebase->accuracy_usec : 0u));\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        /* Log that values were copied to timer_prop */\n        OS_TimerGetInfo_log(\"ACTION\", \"Copied fields from internal records into timer_prop\");\n\n        OS_ObjectIdRelease(&token);\n        OS_TimerGetInfo_log(\"ACTION\", \"Released object token\");\n    }\n\n    {\n        char buf[64];\n        snprintf(buf, sizeof(buf), \"EXIT return_code=%d\", (int)return_code);\n        OS_TimerGetInfo_log(\"EXIT\", buf);\n    }\n\n    return return_code;\n}\n"
}