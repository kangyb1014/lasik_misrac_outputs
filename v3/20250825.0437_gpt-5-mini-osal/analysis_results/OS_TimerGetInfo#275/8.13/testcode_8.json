{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'timebase' is declared as OS_timebase_internal_record_t * but is only used for read-only access (timebase->accuracy_usec). It could be declared const OS_timebase_internal_record_t *timebase to indicate immutability. Assigning the result of OS_OBJECT_TABLE_GET (a non-const pointer) to a const pointer is allowed, so the current non-const declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\nstatic void write_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and incoming parameters */\n    write_log(\"OS_TimerGetInfo ENTRY: timer_id=%u\", (unsigned)timer_id);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n    write_log(\"OS_TimerGetInfo: timer_prop pointer validated: %p\", (void *)timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    write_log(\"OS_TimerGetInfo: current task objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        write_log(\"OS_TimerGetInfo: early return - incorrect object state (called from timebase)\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    write_log(\"OS_TimerGetInfo: cleared timer_prop structure\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    write_log(\"OS_TimerGetInfo: OS_ObjectIdGetById returned %d\", (int)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        /* capture the token used to look up the timebase */\n        write_log(\"OS_TimerGetInfo: token lookup - token(addr)=%p, record=%p, timecb=%p\", (void *)&token, (void *)record, (void *)timecb);\n\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n        write_log(\"OS_TimerGetInfo: timebase lookup - index_token=%u, timebase_ptr=%p\", (unsigned)timecb->timebase_token, (void *)timebase);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n\n        /* Log the read of timebase->accuracy_usec to demonstrate read-only access */\n        if (timebase != NULL)\n        {\n            write_log(\"OS_TimerGetInfo: reading timebase->accuracy_usec=%u (timebase ptr=%p)\", (unsigned)timebase->accuracy_usec, (void *)timebase);\n            /* Document that the pointer is used only for read access in this code path */\n            write_log(\"OS_TimerGetInfo: NOTE - timebase pointer is declared non-const in source but only read here\");\n            timer_prop->accuracy      = timebase->accuracy_usec;\n        }\n        else\n        {\n            write_log(\"OS_TimerGetInfo: WARNING - timebase lookup returned NULL\");\n            timer_prop->accuracy      = 0u;\n        }\n\n        OS_ObjectIdRelease(&token);\n        write_log(\"OS_TimerGetInfo: released object token and prepared return (success)\");\n    }\n    else\n    {\n        write_log(\"OS_TimerGetInfo: failed to get object id for timer_id=%u, return_code=%d\", (unsigned)timer_id, (int)return_code);\n    }\n\n    write_log(\"OS_TimerGetInfo EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}