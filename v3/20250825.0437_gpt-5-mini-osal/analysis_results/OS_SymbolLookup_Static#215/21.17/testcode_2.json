{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code may call strcmp(StaticSym->Module, ModuleName) when ModuleName != NULL but StaticSym->Module == NULL. The function checks only StaticSym->Name for NULL; there is no guarantee StaticSym->Module is non-NULL, so strcmp can be invoked with a NULL pointer, causing out-of-bounds access/UB and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2159.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe function: append diagnostic information to /tmp/logs/2159.txt\n * This function intentionally does not dereference string pointers\n * unless they have been checked for NULL to avoid introducing new UB. */\nstatic void OS_SymbolLookup_LogProbe(const struct OS_static_symbol_record_t *Sym,\n                                     const char *SymbolName,\n                                     const char *ModuleName,\n                                     int index)\n{\n    FILE *fp = fopen(\"/tmp/logs/2159.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"[OS_SymbolLookup] index=%d StaticSym=%p Name=%p Module=%p SymbolName=%p ModuleName=%p\\n\",\n            index,\n            (const void *)Sym,\n            (const void *)Sym->Name,\n            (const void *)Sym->Module,\n            (const void *)SymbolName,\n            (const void *)ModuleName);\n\n    /* Log first byte of each non-NULL string to give some content context\n     * without reading arbitrarily large amounts. */\n    if (Sym->Name != NULL)\n    {\n        unsigned int c = (unsigned char)Sym->Name[0];\n        fprintf(fp, \"  Name[0]=0x%02X\\n\", c);\n    }\n    else\n    {\n        fprintf(fp, \"  Name=NULL\\n\");\n    }\n\n    if (Sym->Module != NULL)\n    {\n        unsigned int c = (unsigned char)Sym->Module[0];\n        fprintf(fp, \"  Module[0]=0x%02X\\n\", c);\n    }\n    else\n    {\n        fprintf(fp, \"  Module=NULL\\n\");\n    }\n\n    if (SymbolName != NULL)\n    {\n        unsigned int c = (unsigned char)SymbolName[0];\n        fprintf(fp, \"  SymbolName[0]=0x%02X\\n\", c);\n    }\n    else\n    {\n        fprintf(fp, \"  SymbolName=NULL\\n\");\n    }\n\n    if (ModuleName != NULL)\n    {\n        unsigned int c = (unsigned char)ModuleName[0];\n        fprintf(fp, \"  ModuleName[0]=0x%02X\\n\", c);\n    }\n    else\n    {\n        fprintf(fp, \"  ModuleName=NULL\\n\");\n    }\n\n    /* Detect the specific scenario reported: ModuleName is non-NULL but\n     * the table entry's Module pointer is NULL. Log this fact as a warning\n     * immediately before the original code will (potentially) call strcmp. */\n    if (ModuleName != NULL && Sym->Module == NULL)\n    {\n        fprintf(fp, \"  WARNING: ModuleName != NULL && StaticSym->Module == NULL -> upcoming strcmp may be called with NULL\\n\");\n    }\n\n    fclose(fp);\n}\n\n/* Modified OS_SymbolLookup_Static with inserted probes. Original logic preserved. */\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    int                        index       = 0;\n\n    while (StaticSym != NULL)\n    {\n        /* Log the current entry and surrounding state for diagnostics. */\n        OS_SymbolLookup_LogProbe(StaticSym, SymbolName, ModuleName, index);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n        ++index;\n    }\n\n    return return_code;\n}\n"
}