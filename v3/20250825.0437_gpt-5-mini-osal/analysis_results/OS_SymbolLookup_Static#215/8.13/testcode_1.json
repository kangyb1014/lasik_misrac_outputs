{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nStaticSym is declared as a pointer to a non-const OS_static_symbol_record_t but the function only reads the pointed-to data (Name, Module, Address) and does not modify it. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. The declaration should be changed to: const OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; (or compatible const-qualified form), to prevent accidental modification of the symbol table.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Helper probe function to log control flow and state to /tmp/logs/2153.txt */\nstatic void OS_SymbolLookup_Static_Log(const char *event,\n                                       const void *static_sym_ptr,\n                                       const char *sym_name_field,\n                                       const char *module_field,\n                                       const char *searched_name,\n                                       const char *searched_module,\n                                       int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2153.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best effort logging - do not alter program flow on failure */\n    }\n\n    fprintf(f, \"Event: %s\\n\", event);\n    fprintf(f, \"  StaticSym ptr: %p\\n\", static_sym_ptr);\n    fprintf(f, \"  StaticSym->Name: %s\\n\", (sym_name_field != NULL) ? sym_name_field : \"(NULL)\");\n    fprintf(f, \"  StaticSym->Module: %s\\n\", (module_field != NULL) ? module_field : \"(NULL)\");\n    fprintf(f, \"  Searched Name: %s\\n\", (searched_name != NULL) ? searched_name : \"(NULL)\");\n    fprintf(f, \"  Searched Module: %s\\n\", (searched_module != NULL) ? searched_module : \"(NULL)\");\n    fprintf(f, \"  Return code (before action): %d\\n\", (int)return_code);\n    fprintf(f, \"---\\n\");\n\n    fclose(f);\n}\n\n/* Preserve original signature and logic. Insert logging probes only. */\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Log entry state */\n    OS_SymbolLookup_Static_Log(\"entry\", (const void *)StaticSym,\n                               (StaticSym != NULL) ? StaticSym->Name : NULL,\n                               (StaticSym != NULL) ? StaticSym->Module : NULL,\n                               SymbolName, ModuleName, return_code);\n\n    while (StaticSym != NULL)\n    {\n        /* Log iteration start */\n        OS_SymbolLookup_Static_Log(\"iteration_start\", (const void *)StaticSym,\n                                   StaticSym->Name, StaticSym->Module,\n                                   SymbolName, ModuleName, return_code);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n\n            OS_SymbolLookup_Static_Log(\"name_null_end_of_list\", (const void *)StaticSym,\n                                       StaticSym->Name, StaticSym->Module,\n                                       SymbolName, ModuleName, return_code);\n            break;\n        }\n\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n\n            OS_SymbolLookup_Static_Log(\"match_found\", (const void *)StaticSym,\n                                       StaticSym->Name, StaticSym->Module,\n                                       SymbolName, ModuleName, return_code);\n            break;\n        }\n\n        /* Log no-match for this entry */\n        OS_SymbolLookup_Static_Log(\"no_match_continue\", (const void *)StaticSym,\n                                   StaticSym->Name, StaticSym->Module,\n                                   SymbolName, ModuleName, return_code);\n\n        ++StaticSym;\n    }\n\n    /* Log exit state */\n    OS_SymbolLookup_Static_Log(\"exit\", (const void *)StaticSym,\n                               (StaticSym != NULL) ? StaticSym->Name : NULL,\n                               (StaticSym != NULL) ? StaticSym->Module : NULL,\n                               SymbolName, ModuleName, return_code);\n\n    return return_code;\n}"
}