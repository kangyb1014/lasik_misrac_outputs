{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String). If OS_DEBUG is implemented (or macro-expanded) to invoke OS_printf (directly or through other functions that in turn call OS_printf), this produces an indirect recursion: OS_printf -> OS_DEBUG -> ... -> OS_printf, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetFreeRun code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2666.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetFreeRun as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetFreeRun:\n```c\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        *freerun_val = timebase->freerun_time;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetFreeRun code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper probe function: append diagnostic log lines to /tmp/logs/2666.txt.\n   Uses only stdio functions to avoid relying on OS printf/debug infrastructure\n   which may be part of the recursion MISRA rule investigation. */\nstatic void probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2666.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Simple structured line: [TAG] formatted-message */\n    fprintf(f, \"[%s] \", tag);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and input state */\n    probe_log(\"ENTRY\", \"OS_TimeBaseGetFreeRun called: timebase_id=%lu freerun_val=%p\",\n              (unsigned long)timebase_id, (void *)freerun_val);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    probe_log(\"AFTER_CHECK_POINTER\", \"freerun_val=%p passed NULL check\", (void *)freerun_val);\n\n    probe_log(\"OBJGET_CALL\", \"Calling OS_ObjectIdGetById with timebase_id=%lu\", (unsigned long)timebase_id);\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n    probe_log(\"OBJGET_RET\", \"OS_ObjectIdGetById returned %d (token=%u)\", (int)return_code, (unsigned)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        probe_log(\"TIMEBASE_INFO\", \"timebase ptr=%p freerun_time=%u\", (void *)timebase, (unsigned)timebase->freerun_time);\n\n        probe_log(\"WRITE\", \"About to write freerun_time %u into provided pointer %p\",\n                  (unsigned)timebase->freerun_time, (void *)freerun_val);\n\n        *freerun_val = timebase->freerun_time;\n\n        probe_log(\"WRITE_DONE\", \"Wrote *freerun_val=%u\", (unsigned)*freerun_val);\n    }\n    else\n    {\n        probe_log(\"NOT_FOUND\", \"timebase_id=%lu not found, returning %d\", (unsigned long)timebase_id, (int)return_code);\n    }\n\n    probe_log(\"EXIT\", \"Exiting OS_TimeBaseGetFreeRun with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}