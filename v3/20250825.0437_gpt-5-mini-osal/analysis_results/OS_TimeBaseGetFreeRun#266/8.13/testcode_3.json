{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'timebase' is only used to read fields (timebase->freerun_time) and is never modified; it therefore could and should be declared as a pointer to a const-qualified type (const OS_timebase_internal_record_t *timebase). Declaring it non-const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetFreeRun code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetFreeRun as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetFreeRun:\n```c\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        *freerun_val = timebase->freerun_time;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetFreeRun code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted diagnostics to /tmp/logs/2663.txt */\nstatic void tb_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2663.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry with input pointers/ids */\n    tb_log_printf(\"ENTER: OS_TimeBaseGetFreeRun: timebase_id=%lu freerun_val_ptr=%p\",\n                  (unsigned long)timebase_id, (void *)freerun_val);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    /* Log result of object id lookup */\n    tb_log_printf(\"After OS_ObjectIdGetById: return_code=%ld token=%ld\",\n                  (long)return_code, (long)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the timebase pointer and the field being read before the write to caller */\n        tb_log_printf(\"Lookup success: timebase_ptr=%p freerun_time_field=%lu\",\n                      (void *)timebase,\n                      (unsigned long)timebase->freerun_time);\n\n        /* Preserve original logic: read the field and store to caller */\n        *freerun_val = timebase->freerun_time;\n\n        /* Log the write to the provided output pointer */\n        tb_log_printf(\"Wrote to caller: freerun_val_ptr=%p value_written=%lu\",\n                      (void *)freerun_val,\n                      (unsigned long)*freerun_val);\n    }\n    else\n    {\n        tb_log_printf(\"Lookup failed: return_code=%ld (no timebase read)\", (long)return_code);\n    }\n\n    tb_log_printf(\"EXIT: OS_TimeBaseGetFreeRun: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}