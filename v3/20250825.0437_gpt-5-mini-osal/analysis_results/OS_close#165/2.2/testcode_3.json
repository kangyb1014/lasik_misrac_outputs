{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe static inline function OS_ObjectIndexFromToken(const OS_object_token_t *token) is defined but not referenced anywhere in the supplied code. Because it has internal linkage (static) it can only be used in the same translation unit; no call sites are present here and the code accesses token->obj_idx directly elsewhere. Therefore removing this function would not affect program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2. (If in the actual translation unit there are call sites, then it would not be dead; but as shown, it is unused and thus violates the rule.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1652.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_close:\n```c\nint32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <inttypes.h>\n\n/* Probe logging helper - appends control flow and state info to the log file. */\nstatic void OS_1652_AppendLog(const char *stage, long long filedes_val, long long return_code_val, const void *token_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1652.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* timestamp is optional; keep output simple and deterministic */\n        fprintf(f, \"[OS_close] stage=%s filedes=%lld return_code=%lld token_ptr=%p\\n\",\n                stage, filedes_val, return_code_val, token_ptr);\n        fclose(f);\n    }\n}\n\n/* The original function, augmented with lightweight probes. The logic is preserved. */\nint32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and input state */\n    OS_1652_AppendLog(\"entry\", (long long)filedes, (long long)-1, (const void *)NULL);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log result of lookup and token pointer (token lives on stack; show its address) */\n    OS_1652_AppendLog(\"after_ObjectIdGetById\", (long long)filedes, (long long)return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Call the underlying implementation and log its return */\n        return_code = OS_GenericClose_Impl(&token);\n        OS_1652_AppendLog(\"after_GenericClose_Impl\", (long long)filedes, (long long)return_code, (const void *)&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Final state before returning */\n        OS_1652_AppendLog(\"after_ObjectIdFinalizeDelete\", (long long)filedes, (long long)return_code, (const void *)&token);\n    }\n    else\n    {\n        /* Log the path when lookup failed and no close attempted */\n        OS_1652_AppendLog(\"lookup_failed\", (long long)filedes, (long long)return_code, (const void *)&token);\n    }\n\n    return return_code;\n}\n"
}