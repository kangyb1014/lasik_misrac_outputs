{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe condition if (status < 0) can never be true for pthread_mutex_unlock: POSIX specifies that pthread_mutex_unlock returns 0 on success or a non\u2011zero (positive) error number on failure. Therefore status < 0 is always false and the entire if-branch is unreachable. (The BSP_DEBUG macro being defined empty only hides the body, but the branch remains logically unreachable.) Recommended fix: test for non-zero return (e.g. if (status != 0)) or otherwise handle the documented return values.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Unlock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/31.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Unlock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n#include <string.h>\n\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n    FILE *log = fopen(\"/tmp/logs/31.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry and calling thread id */\n        fprintf(log, \"OS_BSP_Unlock_Impl: entry, thread=%lu\\n\", (unsigned long)pthread_self());\n        fflush(log);\n    }\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n\n    if (log != NULL)\n    {\n        /* Record the raw return value so callers can reproduce the scenario */\n        fprintf(log, \"pthread_mutex_unlock returned: %d\\n\", status);\n        fflush(log);\n    }\n\n    if (status < 0)\n    {\n        if (log != NULL)\n        {\n            /* Mirror the original diagnostic use of strerror(status) so evidence is captured */\n            fprintf(log, \"branch: status < 0 taken; strerror(status)=%s\\n\", strerror(status));\n            fclose(log);\n        }\n\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"branch: else taken; restoring cancel state=%d\\n\", OS_BSP_GenericLinuxGlobal.AccessCancelState);\n            fclose(log);\n        }\n\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n"
}