{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is only used to read fields (record = OS_OBJECT_TABLE_GET(...); then record->name_entry and record->creator are read). It is declared as a non-const pointer: 'OS_common_record_t *record;'. It could and should be const-qualified (e.g. 'const OS_common_record_t *record;') because the pointed-to object is not modified in this function and assignment from the macro (OS_common_record_t *) to a pointer-to-const is allowed. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "/* Logging probe for OS_BinSemGetInfo violation investigation */\n#include <stdio.h>\n#include <string.h>\n\nstatic void OS_BinSemGetInfo_Log(const char *stage,\n                                 osal_id_t sem_id,\n                                 const OS_common_record_t *record,\n                                 const OS_object_token_t *token,\n                                 int32 return_code,\n                                 const OS_bin_sem_prop_t *bin_prop)\n{\n    FILE *fp = fopen(\"/tmp/logs/1203.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Print a compact, readable trace of the control flow and key state */\n    fprintf(fp, \"[OS_BinSemGetInfo] stage=%s sem_id=%llu ret=%ld token=%p record=%p\\n\",\n            (stage != NULL) ? stage : \"(null)\",\n            (unsigned long long)sem_id,\n            (long)return_code,\n            (void *)token,\n            (void *)record);\n\n    if (record != NULL)\n    {\n        /* record->name_entry assumed to be a NUL-terminated string; print safely */\n        const char *rname = \"(null)\";\n        if (record->name_entry != NULL)\n        {\n            rname = record->name_entry;\n        }\n        fprintf(fp, \"    record->name_entry=\\\"%s\\\" record->creator=%llu\\n\",\n                rname,\n                (unsigned long long)record->creator);\n    }\n\n    if (bin_prop != NULL)\n    {\n        const char *bname = \"(null)\";\n        if (bin_prop->name[0] != '\\0')\n        {\n            bname = bin_prop->name;\n        }\n        fprintf(fp, \"    bin_prop->name=\\\"%s\\\" bin_prop->creator=%llu\\n\",\n                bname,\n                (unsigned long long)bin_prop->creator);\n    }\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Log initial state after clearing bin_prop */\n    OS_BinSemGetInfo_Log(\"after_clear\", sem_id, NULL, NULL, -1, bin_prop);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_BinSemGetInfo_Log(\"after_getbyid\", sem_id, NULL, &token, return_code, bin_prop);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log record pointer and contents before any use */\n        OS_BinSemGetInfo_Log(\"after_record_assign\", sem_id, record, &token, return_code, bin_prop);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->name[sizeof(bin_prop->name) - 1] = '\\0';\n        bin_prop->creator = record->creator;\n\n        /* Log after copying fields into bin_prop */\n        OS_BinSemGetInfo_Log(\"after_copy_fields\", sem_id, record, &token, return_code, bin_prop);\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        /* Log after calling implementation function */\n        OS_BinSemGetInfo_Log(\"after_impl\", sem_id, record, &token, return_code, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing token */\n        OS_BinSemGetInfo_Log(\"after_release\", sem_id, record, &token, return_code, bin_prop);\n    }\n\n    /* Final return log */\n    OS_BinSemGetInfo_Log(\"return\", sem_id, NULL, NULL, return_code, bin_prop);\n\n    return return_code;\n}\n"
}