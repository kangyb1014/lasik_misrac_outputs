{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe symbol is declared as 'extern OS_common_record_t *const OS_global_bin_sem_table' \u2014 a const pointer to a non-const OS_common_record_t. In functions such as OS_BinSemGetInfo the table is only read (record is used for read-only accesses), so the pointed-to type could and should be const-qualified (e.g. 'extern const OS_common_record_t *const OS_global_bin_sem_table') to prevent accidental modification. Because the pointed-to type is not const-qualified here, this violates MISRA C 2023 Rule 8.13 unless there is a justified need to mutate the table entries.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe/log helper - appends human readable trace to /tmp/logs/1203.txt */\nstatic void OS_BinSemGetInfo_Log(const char *phase,\n                                 unsigned long long sem_id_val,\n                                 const void *token_addr,\n                                 const void *record_ptr,\n                                 const void *bin_prop_ptr,\n                                 long return_code)\n{\n    FILE *f;\n\n    /* Ensure directory exists; ignore errors if it cannot be created */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/1203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"Phase: %s\\n\", phase);\n    fprintf(f, \"  sem_id=%llu token_addr=%p return_code=%ld\\n\", sem_id_val, token_addr, return_code);\n\n    if (record_ptr != NULL)\n    {\n        /* The fields printed below mirror the fields accessed in the function under test. */\n        const char *name_entry = ((const char *)((const unsigned char *)record_ptr + 0));\n        /* We cannot safely assume offsets here in the probe; print the pointer and hope the caller prints meaningful fields separately. */\n        fprintf(f, \"  record_ptr=%p\\n\", record_ptr);\n    }\n    else\n    {\n        fprintf(f, \"  record_ptr=NULL\\n\");\n    }\n\n    if (bin_prop_ptr != NULL)\n    {\n        fprintf(f, \"  bin_prop_ptr=%p\\n\", bin_prop_ptr);\n    }\n\n    fprintf(f, \"-------------------------------\\n\");\n    fclose(f);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry with initial state */\n    OS_BinSemGetInfo_Log(\"ENTRY\", (unsigned long long)sem_id, &token, NULL, bin_prop, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Log after clearing output structure */\n    OS_BinSemGetInfo_Log(\"AFTER_MEMSET\", (unsigned long long)sem_id, &token, NULL, bin_prop, 0);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object id lookup */\n    OS_BinSemGetInfo_Log(\"AFTER_ObjectIdGetById\", (unsigned long long)sem_id, &token, NULL, bin_prop, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log the record pointer and some context before read */\n        OS_BinSemGetInfo_Log(\"BEFORE_RECORD_READ\", (unsigned long long)sem_id, &token, record, bin_prop, (long)return_code);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        /* Log state after populating bin_prop from the record */\n        OS_BinSemGetInfo_Log(\"AFTER_POPULATE_BIN_PROP\", (unsigned long long)sem_id, &token, record, bin_prop, (long)return_code);\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        /* Log after calling implementation-specific info function */\n        OS_BinSemGetInfo_Log(\"AFTER_Impl_Call\", (unsigned long long)sem_id, &token, record, bin_prop, (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final state before return */\n    OS_BinSemGetInfo_Log(\"RETURN\", (unsigned long long)sem_id, &token, (return_code == OS_SUCCESS) ? record : NULL, bin_prop, (long)return_code);\n\n    return return_code;\n}\n"
}