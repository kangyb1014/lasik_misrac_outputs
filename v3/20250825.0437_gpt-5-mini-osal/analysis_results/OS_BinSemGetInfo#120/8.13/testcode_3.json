{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BinSemGetInfo_Impl the local pointer is declared as a non-const: \"OS_impl_binsem_internal_record_t *sem;\". The pointer is only used to read fields (sem->current_value) and is not used to modify the object, so it could be const-qualified (const OS_impl_binsem_internal_record_t *sem). Therefore the pointer should be const-qualified per MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe helper: append a timestamped message to the log file. */\nstatic void os_binsem_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1203.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_MSC_VER)\n    /* MSVC uses localtime_s */\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n    char timebuf[64];\n    strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(fp, \"%s - \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and parameters */\n    os_binsem_log(\"ENTER OS_BinSemGetInfo: sem_id=%\" PRIuPTR \" bin_prop=%\" PRIuPTR,\n                  (uintptr_t)sem_id, (uintptr_t)bin_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    os_binsem_log(\"After memset bin_prop=%\" PRIuPTR \", size=%zu\",\n                  (uintptr_t)bin_prop, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    os_binsem_log(\"OS_ObjectIdGetById returned %ld for sem_id=%\" PRIuPTR \", token=%\" PRIuPTR,\n                  (long)return_code, (uintptr_t)sem_id, (uintptr_t)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log record information that is about to be copied */\n        if (record != NULL)\n        {\n            /* record->name_entry is expected to be a NUL-terminated string */\n            os_binsem_log(\"record=%\" PRIuPTR \" name_entry='%s' creator=%lu\",\n                          (uintptr_t)record,\n                          (record->name_entry != NULL) ? record->name_entry : \"(null)\",\n                          (unsigned long)record->creator);\n        }\n        else\n        {\n            os_binsem_log(\"record is NULL for token=%\" PRIuPTR, (uintptr_t)&token);\n        }\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        /* Log the state copied into bin_prop before calling the Impl function */\n        os_binsem_log(\"Prepared bin_prop before Impl: name='%s' creator=%lu bin_prop_addr=%\" PRIuPTR,\n                      bin_prop->name, (unsigned long)bin_prop->creator, (uintptr_t)bin_prop);\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        os_binsem_log(\"OS_BinSemGetInfo_Impl returned %ld for token=%\" PRIuPTR \" bin_prop=%\" PRIuPTR,\n                      (long)return_code, (uintptr_t)&token, (uintptr_t)bin_prop);\n\n        OS_ObjectIdRelease(&token);\n        os_binsem_log(\"Released token=%\" PRIuPTR, (uintptr_t)&token);\n    }\n    else\n    {\n        os_binsem_log(\"OS_BinSemGetInfo: ObjectIdGetById failed with %ld for sem_id=%\" PRIuPTR,\n                      (long)return_code, (uintptr_t)sem_id);\n    }\n\n    os_binsem_log(\"EXIT OS_BinSemGetInfo: return_code=%ld for sem_id=%\" PRIuPTR,\n                  (long)return_code, (uintptr_t)sem_id);\n\n    return return_code;\n}\n"
}