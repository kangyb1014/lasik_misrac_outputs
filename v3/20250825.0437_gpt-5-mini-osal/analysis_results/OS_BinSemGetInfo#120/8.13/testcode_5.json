{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. In OS_BinSemGetInfo_Impl the token parameter is declared as const OS_object_token_t *token and the function only reads from the table entry (sem->current_value). However the code does: sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token); which produces a non-const OS_impl_binsem_internal_record_t * (sem). The pointer should be a pointer-to-const (e.g. const OS_impl_binsem_internal_record_t *sem) because the object is only read. In addition, passing *token (a const lvalue) into the macro that takes &(tok) likely causes the const qualifier to be discarded when used by downstream APIs, further breaking const-correctness. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helpers - write append-only logs to /tmp/logs/1203.txt */\nstatic void OS_BinSemGetInfo_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1203.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic void OS_BinSemGetInfo_LogHex(const char *label, const void *data, size_t len)\n{\n    FILE *fp = fopen(\"/tmp/logs/1203.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    const unsigned char *p = (const unsigned char *)data;\n    fprintf(fp, \"%s: \", label);\n    for (size_t i = 0; i < len; ++i)\n    {\n        fprintf(fp, \"%02X\", p[i]);\n        if ((i + 1) < len) fprintf(fp, \" \");\n    }\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/*\n * Modified OS_BinSemGetInfo with probes. The original logic is preserved;\n * probes append diagnostic information to /tmp/logs/1203.txt so other agents\n * can observe the control flow and token contents involved in the\n * const-discard scenario described.\n */\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Entry log */\n    OS_BinSemGetInfo_Log(\"OS_BinSemGetInfo ENTRY: sem_id=%ld, bin_prop=%p\", (long)sem_id, (void *)bin_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    OS_BinSemGetInfo_Log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the token raw bytes and address so downstream agents can see what is being passed */\n        OS_BinSemGetInfo_Log(\"Token address: %p\", (void *)&token);\n        OS_BinSemGetInfo_LogHex(\"Token raw bytes\", (const void *)&token, sizeof(token));\n\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log the resolved record pointer and some of its visible fields */\n        OS_BinSemGetInfo_Log(\"Resolved record pointer: %p\", (void *)record);\n        if (record != NULL)\n        {\n            /* Attempt to log name_entry and creator if available; do not modify record */\n            OS_BinSemGetInfo_Log(\"record->name_entry: %s\", record->name_entry ? record->name_entry : \"(null)\");\n            OS_BinSemGetInfo_Log(\"record->creator: %lu\", (unsigned long)record->creator);\n        }\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        /* Log state before calling Impl - include bin_prop and token info */\n        OS_BinSemGetInfo_Log(\"Calling OS_BinSemGetInfo_Impl with token at %p (by value) and bin_prop at %p\", (void *)&token, (void *)bin_prop);\n        OS_BinSemGetInfo_LogHex(\"Token raw bytes before Impl\", (const void *)&token, sizeof(token));\n\n        return_code = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_BinSemGetInfo_Log(\"OS_BinSemGetInfo_Impl returned %ld\", (long)return_code);\n        OS_BinSemGetInfo_Log(\"bin_prop->name: %s\", bin_prop->name ? bin_prop->name : \"(null)\");\n        OS_BinSemGetInfo_Log(\"bin_prop->creator: %lu\", (unsigned long)bin_prop->creator);\n\n        OS_ObjectIdRelease(&token);\n        OS_BinSemGetInfo_Log(\"Token released: %p\", (void *)&token);\n    }\n    else\n    {\n        OS_BinSemGetInfo_Log(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    OS_BinSemGetInfo_Log(\"OS_BinSemGetInfo EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}