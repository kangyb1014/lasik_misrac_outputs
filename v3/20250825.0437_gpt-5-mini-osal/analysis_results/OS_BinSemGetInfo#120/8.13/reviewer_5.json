{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo.\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. In OS_BinSemGetInfo_Impl the token parameter is declared as const OS_object_token_t *token and the function only reads from the table entry (sem->current_value). However the code does: sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token); which produces a non-const OS_impl_binsem_internal_record_t * (sem). The pointer should be a pointer-to-const (e.g. const OS_impl_binsem_internal_record_t *sem) because the object is only read. In addition, passing *token (a const lvalue) into the macro that takes &(tok) likely causes the const qualifier to be discarded when used by downstream APIs, further breaking const-correctness. This violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_BinSemGetInfo ENTRY: sem_id=3735928559, bin_prop=0x7ffea1069df0\nOS_ObjectIdGetById returned -35\nOS_ObjectIdGetById failed, returning -35\nOS_BinSemGetInfo EXIT: return_code=-35\nOS_BinSemGetInfo ENTRY: sem_id=0, bin_prop=0x7ffea1069df0\nOS_ObjectIdGetById returned -35\nOS_ObjectIdGetById failed, returning -35\nOS_BinSemGetInfo EXIT: return_code=-35\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BinSemGetInfo:\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_bin_sem_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_bin_sem_table\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_SUCCESS (0)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent's core point is correct: OS_BinSemGetInfo_Impl only reads from the implementation record yet declares a non-const pointer (OS_impl_binsem_internal_record_t *sem). Under MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so sem should be declared as a pointer-to-const (for example: const OS_impl_binsem_internal_record_t *sem) because the pointed-to object is not modified in the function.\n\nThe secondary concern about passing *token through the OS_OBJECT_TABLE_GET macro is plausible but cannot be fully confirmed from the snippets shown: OS_OBJECT_TABLE_GET expands to &tbl[OS_ObjectIndexFromToken(&(tok))]. With tok == *token and token declared as const OS_object_token_t * the expression &( *token ) has type const OS_object_token_t *. Whether a const qualifier is discarded depends on the prototype of OS_ObjectIndexFromToken (not provided). If OS_ObjectIndexFromToken takes a const OS_object_token_t * (recommended) then no qualifier is discarded; if it takes a non-const OS_object_token_t * then that would discard const and also be a separate const-correctness issue.\n\nIn summary: the reported violation of MISRA C 2023 Rule 8.13 (the non-const sem pointer should be const) is correct. The additional claim about const being discarded when passing *token through the macro is possible but cannot be confirmed without the signature of OS_ObjectIndexFromToken; if that API is non-const, it would indeed be another const-correctness violation and should be fixed by making the parameter const or by avoiding discarding const qualifiers."
}