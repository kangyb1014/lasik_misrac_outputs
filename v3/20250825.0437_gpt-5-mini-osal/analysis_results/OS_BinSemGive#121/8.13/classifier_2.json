{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGive:\n```c\nint32 OS_BinSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_object_token_t token;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: in the fragment shown, token is declared as an object (OS_object_token_t token;) rather than as a pointer. MISRA C 2023 Rule 8.13 concerns pointer declarations and recommends that pointers point to const-qualified types when possible. Since token is not a pointer here (and is used via &token when calling functions), Rule 8.13 is not violated.\n\nHypothetical violation scenario: if OS_object_token_t were actually a typedef for a pointer type (for example typedef struct OS_object_token * OS_object_token_t;), then declaring OS_object_token_t token; would create a pointer variable that should, where appropriate, point to a const-qualified type (e.g. const struct OS_object_token *), and omitting that const qualification could violate Rule 8.13."
}