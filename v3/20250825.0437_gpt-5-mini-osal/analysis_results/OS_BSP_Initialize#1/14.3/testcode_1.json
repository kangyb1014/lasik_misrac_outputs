{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the controlling expression if (status < 0) is effectively invariant because pthread_mutex_init (POSIX) returns 0 on success or a positive error number on failure. Therefore status will never be negative on a conforming POSIX implementation and the condition is always false, making the controlling expression invariant and violating MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/15.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Initialize code.\n",
  "test_code": "void OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n    FILE *              logfp = NULL;\n    uid_t               euid;\n\n    /* Open (or create) log file to capture control flow and states */\n    logfp = fopen(\"/tmp/logs/15.txt\", \"a\");\n    if (logfp == NULL)\n    {\n        /* Try to create the directory and reopen (best-effort logging) */\n        (void)system(\"mkdir -p /tmp/logs\");\n        logfp = fopen(\"/tmp/logs/15.txt\", \"a\");\n    }\n    if (logfp != NULL)\n    {\n        fprintf(logfp, \"--- OS_BSP_Initialize enter ---\\n\");\n    }\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    euid = geteuid();\n    if (logfp != NULL)\n    {\n        fprintf(logfp, \"geteuid() = %d\\n\", (int)euid);\n    }\n\n    if (euid != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                if (logfp != NULL)\n                {\n                    fprintf(logfp, \"Read /proc/sys/fs/mqueue/msg_max => %s (MaxQueueDepth=%u)\\n\",\n                            buffer, (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                }\n            }\n            fclose(fp);\n        }\n        else if (logfp != NULL)\n        {\n            fprintf(logfp, \"fopen(/proc/sys/fs/mqueue/msg_max) failed\\n\");\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    if (logfp != NULL) { fprintf(logfp, \"Calling pthread_mutexattr_init()\\n\"); }\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (logfp != NULL)\n    {\n        fprintf(logfp, \"pthread_mutexattr_init returned status=%d; (status<0)=%s\\n\",\n                status, (status < 0) ? \"true\" : \"false\");\n    }\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n        if (logfp != NULL)\n        {\n            fprintf(logfp, \"pthread_mutexattr_init branch taken: strerror=%s\\n\", strerror(status));\n        }\n    }\n\n    if (logfp != NULL) { fprintf(logfp, \"Calling pthread_mutexattr_setprotocol(..., PTHREAD_PRIO_INHERIT)\\n\"); }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (logfp != NULL)\n    {\n        fprintf(logfp, \"pthread_mutexattr_setprotocol returned status=%d; (status<0)=%s\\n\",\n                status, (status < 0) ? \"true\" : \"false\");\n    }\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n        if (logfp != NULL)\n        {\n            fprintf(logfp, \"pthread_mutexattr_setprotocol branch taken: strerror=%s\\n\", strerror(status));\n        }\n    }\n\n    if (logfp != NULL) { fprintf(logfp, \"Calling pthread_mutex_init(&AccessMutex, &mutex_attr)\\n\"); }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (logfp != NULL)\n    {\n        fprintf(logfp, \"pthread_mutex_init returned status=%d; (status<0)=%s\\n\",\n                status, (status < 0) ? \"true\" : \"false\");\n    }\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n        if (logfp != NULL)\n        {\n            fprintf(logfp, \"pthread_mutex_init branch taken: strerror=%s\\n\", strerror(status));\n        }\n    }\n\n    if (logfp != NULL)\n    {\n        fprintf(logfp, \"--- OS_BSP_Initialize exit ---\\n\\n\");\n        fclose(logfp);\n    }\n}\n"
}