{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseDelete_Impl:\n```c\nint32 OS_TimeBaseDelete_Impl(const OS_object_token_t *token)\n{\n    OS_impl_timebase_internal_record_t *local;\n    int                                 status;\n\n    local = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n\n    pthread_cancel(local->handler_thread);\n\n    /*\n    ** Delete the timer\n    */\n    if (local->assigned_signal != 0)\n    {\n        status = timer_delete(local->host_timerid);\n        if (status < 0)\n        {\n            OS_DEBUG(\"Error deleting timer: %s\\n\", strerror(errno));\n            return OS_TIMER_ERR_INTERNAL;\n        }\n\n        local->assigned_signal = 0;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TimeBaseDelete_Impl:\n#define OS_DEBUG(__VA_ARGS__) \n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    pthread_t       handler_thread;\n    pthread_mutex_t handler_mutex;\n    timer_t         host_timerid;\n    int             assigned_signal;\n    sigset_t        sigset;\n    sig_atomic_t    reset_flag;\n    struct timespec softsleep;\n} OS_impl_timebase_internal_record_t\n...\nOS_impl_timebase_internal_record_t OS_impl_timebase_table[OS_MAX_TIMEBASES]\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n            OS_DEBUG(\"Error deleting timer: %s\\n\", strerror(errno));\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The call uses strerror(errno) which has prototype char *strerror(int) \u2014 it takes an int, not a pointer, and returns a pointer to an internal, null-terminated static string. MISRA C:2023 Rule 21.17 concerns string.h functions that can access objects via pointer parameters (e.g. memcpy, strcpy, strlen, etc.). This usage does not pass a pointer into a string.h function and therefore cannot cause out\u2011of\u2011bounds accesses as described by Rule 21.17."
}