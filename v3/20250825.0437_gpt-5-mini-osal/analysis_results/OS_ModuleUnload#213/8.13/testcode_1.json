{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'module' is declared as OS_module_internal_record_t * and assigned from OS_OBJECT_TABLE_GET(OS_module_table, token). In OS_ModuleUnload this pointer is only used for read access (module->module_type), so it could and should be a pointer to a const-qualified type (e.g. const OS_module_internal_record_t *module). Because the code uses a non-const pointer when a const-qualified pointer is possible, this violates MISRA C 2023 Rule 8.13. Note: the macro OS_OBJECT_TABLE_GET yields a non-const pointer, which contributes to the issue; making the local pointer const (or adjusting the macro/table usage) would address the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleUnload code.\n",
  "test_code": "int32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Helper probe: append trace lines to /tmp/logs/2133.txt.  This routine\n     * is intentionally lightweight and does not change program logic. */\n    static void OS_ModuleUnload_Log(const char *stage,\n                                     OS_module_internal_record_t *mod_ptr,\n                                     const OS_object_token_t *tok_ptr,\n                                     int32 rc)\n    {\n        FILE *fp = fopen(\"/tmp/logs/2133.txt\", \"a\");\n        if (fp != NULL)\n        {\n            /* Print stage, return code, token address (token value may be\n             * an integer or struct; printing its address provides a stable\n             * trace without assuming its concrete type), module pointer and\n             * module->module_type when available. */\n            fprintf(fp, \"[OS_ModuleUnload] stage=%s rc=%d token_addr=%p module_ptr=%p\",\n                    stage, (int)rc, (const void *)tok_ptr, (const void *)mod_ptr);\n\n            if (mod_ptr != NULL)\n            {\n                /* module_type is read-only here; log its value. Cast to int\n                 * for safe printing regardless of underlying enum type. */\n                fprintf(fp, \" module_type=%d\", (int)mod_ptr->module_type);\n            }\n\n            fprintf(fp, \"\\n\");\n            fclose(fp);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of id lookup */\n    OS_ModuleUnload_Log(\"after_ObjectIdGetById\", NULL, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log after obtaining module pointer from object table */\n        OS_ModuleUnload_Log(\"after_OBJECT_TABLE_GET\", module, &token, return_code);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            OS_ModuleUnload_Log(\"before_ModuleUnload_Impl_dynamic\", module, &token, return_code);\n            return_code = OS_ModuleUnload_Impl(&token);\n            OS_ModuleUnload_Log(\"after_ModuleUnload_Impl\", module, &token, return_code);\n        }\n        else\n        {\n            OS_ModuleUnload_Log(\"skip_unload_not_dynamic\", module, &token, return_code);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log finalization result */\n        OS_ModuleUnload_Log(\"after_ObjectIdFinalizeDelete\", module, &token, return_code);\n    }\n\n    return return_code;\n}\n"
}