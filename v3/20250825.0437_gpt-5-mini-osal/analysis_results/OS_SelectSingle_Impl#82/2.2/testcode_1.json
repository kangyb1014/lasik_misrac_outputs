{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment os_proto = 0; is executed unconditionally but has no effect on program behaviour: in all paths that reach the later use (socket(os_domain, os_type, os_proto)) os_proto is overwritten in the preceding switch (OS_SocketType_DATAGRAM or OS_SocketType_STREAM). The default branch returns before socket() is called, so the initial zero value is never observed. Therefore removing the assignment would not change behaviour \u2014 it is dead code (violates Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/822.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectSingle_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle_Impl:\n```c\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectSingle_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/822.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    os_log_probe(\"OS_SelectSingle_Impl ENTRY: token=%p SelectFlags=%p initial_SelectFlags=%u msecs=%d\",\n                 (void *)token, (void *)SelectFlags, (unsigned)(SelectFlags ? *SelectFlags : 0), (int)msecs);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_log_probe(\"After OS_OBJECT_TABLE_GET: impl=%p\", (void *)impl);\n    if (impl)\n    {\n        /* Log important implementation fields used below */\n        os_log_probe(\"impl state: selectable=%d fd=%d\", (int)impl->selectable, (int)impl->fd);\n    }\n    else\n    {\n        os_log_probe(\"impl is NULL\");\n    }\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        os_log_probe(\"Not selectable -> returning OS_ERR_OPERATION_NOT_SUPPORTED\");\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        os_log_probe(\"fd (%d) >= FD_SETSIZE (%d) -> returning OS_ERR_OPERATION_NOT_SUPPORTED\", (int)impl->fd, (int)FD_SETSIZE);\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        os_log_probe(\"SelectFlags != 0 -> entering select logic; initial SelectFlags=%u\", (unsigned)*SelectFlags);\n\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n            os_log_probe(\"Requested READABLE -> FD_SET(fd=%d) on rd_set\", (int)impl->fd);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n            os_log_probe(\"Requested WRITABLE -> FD_SET(fd=%d) on wr_set\", (int)impl->fd);\n        }\n\n        os_log_probe(\"Calling OS_DoSelect(fd=%d, msecs=%d)\", (int)impl->fd, (int)msecs);\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n        os_log_probe(\"OS_DoSelect returned %d\", (int)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            int rd_is_set = FD_ISSET(impl->fd, &rd_set);\n            int wr_is_set = FD_ISSET(impl->fd, &wr_set);\n            os_log_probe(\"FD_ISSET results: rd=%d wr=%d\", rd_is_set, wr_is_set);\n\n            if (!rd_is_set)\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n                os_log_probe(\"Cleared READABLE -> new SelectFlags=%u\", (unsigned)*SelectFlags);\n            }\n            if (!wr_is_set)\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n                os_log_probe(\"Cleared WRITABLE -> new SelectFlags=%u\", (unsigned)*SelectFlags);\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n            os_log_probe(\"OS_DoSelect failure -> SelectFlags set to 0\");\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        os_log_probe(\"SelectFlags == 0 -> nothing to check, returning OS_SUCCESS\");\n        return_code = OS_SUCCESS;\n    }\n\n    os_log_probe(\"EXIT: return_code=%d final_SelectFlags=%u\", (int)return_code, (unsigned)*SelectFlags);\n\n    return return_code;\n}\n"
}