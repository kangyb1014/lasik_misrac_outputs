{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(&ts_end, 0, sizeof(ts_end)); is executed in the else branch when msecs <= 0, but ts_end is only read later in the function when msecs > 0. For the executed case (msecs <= 0) ts_end is never used, so removing the memset would not affect program behaviour. This constitutes dead code (an executed operation whose removal would not change program behaviour).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/822.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectSingle_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle_Impl:\n```c\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectSingle_Impl code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void OS_SelectSingle_Log(const void *impl_ptr, unsigned int SelectFlags, int msecs, const char *event, int return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/822.txt\", \"a\");\n    if (fp != NULL)\n    {\n        if (impl_ptr != NULL)\n        {\n            /* Attempt to print basic fields if the structure layout is as expected. */\n            /* We print the pointer value and the provided parameters to avoid depending on internal fields. */\n            fprintf(fp, \"OS_SelectSingle: event=%s, impl=%p, SelectFlags=0x%08x, msecs=%d, return_code=%d\\n\",\n                    event, impl_ptr, SelectFlags, msecs, return_code);\n        }\n        else\n        {\n            fprintf(fp, \"OS_SelectSingle: event=%s, impl=NULL, SelectFlags=0x%08x, msecs=%d, return_code=%d\\n\",\n                    event, SelectFlags, msecs, return_code);\n        }\n\n        fclose(fp);\n    }\n}\n\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log entry state */\n    OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"entry\", -1);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        /* Log and return */\n        OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"not_selectable\", OS_ERR_OPERATION_NOT_SUPPORTED);\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"fd_out_of_range\", OS_ERR_OPERATION_NOT_SUPPORTED);\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n\n        /* Log before populating sets */\n        OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"before_populate_sets\", -1);\n\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        /* Log just before calling OS_DoSelect */\n        OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"before_select_call\", -1);\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        /* Log result of select call */\n        OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"after_select_call\", return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n                OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"cleared_readable\", return_code);\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n                OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"cleared_writable\", return_code);\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n            OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"select_error_cleared_flags\", return_code);\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n        OS_SelectSingle_Log((const void *)impl, (unsigned int)(*SelectFlags), (int)msecs, \"no_flags_zero_branch\", return_code);\n    }\n\n    return return_code;\n}\n"
}