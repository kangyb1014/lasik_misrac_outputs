{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the macro yields a non-const pointer where a const-qualified pointer could be used. In OS_SelectSingle_Impl the token parameter is const OS_object_token_t * and the call OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token) takes the address of a const object (&(tok)) inside the macro and returns &tbl[index] (type OS_impl_file_internal_record_t *). The code only reads the table entry (impl->selectable, impl->fd), so the pointer should be to a const-qualified record (const OS_impl_file_internal_record_t *). As written a non-const pointer is produced/used, effectively failing to prefer const qualification as required by MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/823.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectSingle_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle_Impl:\n```c\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectSingle_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe logging helper: append state and control-flow information to the log file. */\nstatic void os_log_probe(const void *token_ptr,\n                         const void *impl_ptr,\n                         int impl_selectable,\n                         int impl_fd,\n                         unsigned int selectFlags_val,\n                         int msecs,\n                         int return_code,\n                         const char *stage)\n{\n    /* Ensure the log directory exists; ignore errors if it already does. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/823.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging; do not affect original logic on failure. */\n    }\n\n    /* Print a simple record with key values for reproducing the scenario. */\n    fprintf(f, \"STAGE=%s token=%p impl=%p selectable=%d fd=%d SelectFlags=0x%08x msecs=%d return=%d\\n\",\n            stage,\n            token_ptr,\n            impl_ptr,\n            impl_selectable,\n            impl_fd,\n            selectFlags_val,\n            msecs,\n            return_code);\n\n    fclose(f);\n}\n\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Log entry into the function (impl unknown at this point). */\n    os_log_probe((const void *)token, (const void *)0, -1, -1, (unsigned int)(SelectFlags ? *SelectFlags : 0u), msecs, -999, \"ENTRY\");\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log after obtaining the table entry pointer and basic fields. */\n    os_log_probe((const void *)token, (const void *)impl,\n                 (impl != NULL) ? (impl->selectable ? 1 : 0) : -1,\n                 (impl != NULL) ? impl->fd : -1,\n                 (unsigned int)(SelectFlags ? *SelectFlags : 0u),\n                 msecs,\n                 -998,\n                 \"AFTER_LOOKUP\");\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        os_log_probe((const void *)token, (const void *)impl, impl->selectable, impl->fd,\n                     (unsigned int)(SelectFlags ? *SelectFlags : 0u), msecs,\n                     OS_ERR_OPERATION_NOT_SUPPORTED,\n                     \"NOT_SELECTABLE_RETURN\");\n\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        os_log_probe((const void *)token, (const void *)impl, impl->selectable, impl->fd,\n                     (unsigned int)(SelectFlags ? *SelectFlags : 0u), msecs,\n                     OS_ERR_OPERATION_NOT_SUPPORTED,\n                     \"FD_OUT_OF_RANGE_RETURN\");\n\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        /* Log before invoking OS_DoSelect */\n        os_log_probe((const void *)token, (const void *)impl, impl->selectable, impl->fd,\n                     (unsigned int)*SelectFlags, msecs, -997, \"BEFORE_DOSELECT\");\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        /* Log result of select */\n        os_log_probe((const void *)token, (const void *)impl, impl->selectable, impl->fd,\n                     (unsigned int)*SelectFlags, msecs, return_code, \"AFTER_DOSELECT\");\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n    }\n\n    /* Final state log before returning */\n    os_log_probe((const void *)token, (const void *)impl, impl->selectable, impl->fd,\n                 (unsigned int)(SelectFlags ? *SelectFlags : 0u), msecs, return_code, \"EXIT\");\n\n    return return_code;\n}\n"
}