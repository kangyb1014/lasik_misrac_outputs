{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of digest_get_size:\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are present in the provided snippet. Specifically:\n- There are no compiler-specific keywords or tokens such as __attribute__, __asm__, __builtin_*, __extension__, __inline__ (double-underscored), typeof, statement-expressions (GCC ({ ... })), or other documented compiler extensions.\n- The inline usage is not visible in the snippet itself (the identifier _MHD_static_inline is a macro name here); the snippet does not show any non-standard expansion. Macro names alone do not constitute a language extension unless their expansion uses one, which is not visible in this fragment.\n- Preprocessor conditionals (#ifdef/#endif) and return/if/struct usage are standard C constructs.\n- The use of identifiers beginning with an underscore is a naming convention/reserved-identifier concern, not a compiler language extension.\n- Assertions (mhd_assert) and symbolic constants (MD5_DIGEST_SIZE, etc.) are macros/identifiers; their definitions are not shown, so no evidence of extensions can be concluded from their usage.\n\nTherefore there are no fragments in this snippet that explicitly use compiler language extensions that must be reported under MISRA C 2023 Rule 1.2. If the macro definitions (e.g. _MHD_static_inline or mhd_assert) expand to compiler-specific extensions, those expansions must be inspected, but they are not present in the provided code."
}