{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as 'struct DigestAlgorithm *da' but the code (including the fragment 'if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)') only reads members of the pointed-to object. The pointer could and should be declared as 'const struct DigestAlgorithm *da' so the pointer points to a const-qualified type, satisfying MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2733.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_get_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_get_size:\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\nPlease provide the modified digest_get_size code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function: logs the state of the DigestAlgorithm pointer and the control location.\n   Writes to /tmp/logs/2733.txt in append mode so multiple calls are recorded.\n*/\nstatic void\nprobe_digest_get_size_log (const struct DigestAlgorithm *da, const char *location)\n{\n  FILE *f = fopen(\"/tmp/logs/2733.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  if (da == NULL)\n  {\n    fprintf(f, \"digest_get_size probe at %s: da=NULL\\n\", location);\n    fclose(f);\n    return;\n  }\n\n  /* Log key state that demonstrates the reported violation scenario: the\n     function only reads members of the pointed-to object. */\n  fprintf(f,\n          \"digest_get_size probe at %s: da=%p, uninitialised=%u, algo_selected=%u, algo=%u\\n\",\n          (void *) da,\n          (unsigned int) da->uninitialised,\n          (unsigned int) da->algo_selected,\n          (unsigned int) da->algo);\n  fclose(f);\n}\n\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  /* Log on entry so state is captured even if an assertion triggers. */\n  probe_digest_get_size_log(da, \"entry\");\n\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n    probe_digest_get_size_log(da, \"MD5\");\n    return MD5_DIGEST_SIZE;\n  }\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n    probe_digest_get_size_log(da, \"SHA256\");\n    return SHA256_DIGEST_SIZE;\n  }\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    probe_digest_get_size_log(da, \"SHA512_256\");\n    return SHA512_256_DIGEST_SIZE;\n  }\n#endif /* MHD_SHA512_256_SUPPORT */\n\n  /* Log unexpected path before asserting so the state is available for analysis. */\n  probe_digest_get_size_log(da, \"unexpected\");\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n"
}