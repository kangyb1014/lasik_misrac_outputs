{
  "user_message": "An agent A claimed that the following digest_get_size code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of digest_get_size.\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as struct DigestAlgorithm *da but the function only reads members (da->uninitialised, da->algo_selected, da->algo). The fragment compares da->algo to a constant: if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo). Since the pointee is not modified, the pointer should be declared to point to a const-qualified type (const struct DigestAlgorithm *da).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function only reads members of the object pointed to by da (mhd_assert checks and comparisons against da->algo) and does not modify the pointee. MISRA C 2023 Rule 8.13 recommends that pointers should point to a const-qualified type whenever possible, so the parameter should be declared as const struct DigestAlgorithm *da. No evidence in the snippet requires a mutable pointee (mhd_assert and the comparisons are reads), so this is a legitimate violation. (Only caveat: if there is an external need to match a non-const prototype or other API/compatibility constraints not shown here, that could justify leaving it non-const.)"
}