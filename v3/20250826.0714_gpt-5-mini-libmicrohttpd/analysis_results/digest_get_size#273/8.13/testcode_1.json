{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as struct DigestAlgorithm *da but the function only reads members (da->uninitialised, da->algo_selected, da->algo). The fragment compares da->algo to a constant: if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo). Since the pointee is not modified, the pointer should be declared to point to a const-qualified type (const struct DigestAlgorithm *da).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2733.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_get_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_get_size:\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\nPlease provide the modified digest_get_size code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: log control flow and state to /tmp/logs/2733.txt */\nstatic void\ndigest_log_probe(const struct DigestAlgorithm *da, const char *stage, const char *branch, unsigned ret)\n{\n  FILE *f = fopen(\"/tmp/logs/2733.txt\", \"a\");\n  if (f)\n    {\n      time_t t = time(NULL);\n      /* Log timestamp, stage, pointer value and important fields */\n      fprintf(f, \"%ld: %s: da=%p uninitialised=%d algo_selected=%d algo=%u branch=%s ret=%u\\n\",\n              (long)t,\n              stage ? stage : \"\",\n              (void *)da,\n              da ? (int)da->uninitialised : -1,\n              da ? (int)da->algo_selected : -1,\n              da ? (unsigned)da->algo : 0u,\n              branch ? branch : \"-\",\n              ret);\n      fclose(f);\n    }\n  else\n    {\n      /* If logfile can't be opened, best-effort to stderr for diagnostics */\n      fprintf(stderr, \"LOG OPEN FAIL: %s: da=%p\\n\", stage ? stage : \"\", (void *)da);\n    }\n}\n\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  /* Log entry and initial state */\n  digest_log_probe(da, \"ENTRY\", \"-\", 0u);\n\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    {\n      unsigned ret = MD5_DIGEST_SIZE;\n      digest_log_probe(da, \"BRANCH\", \"MD5\", ret);\n      return ret;\n    }\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    {\n      unsigned ret = SHA256_DIGEST_SIZE;\n      digest_log_probe(da, \"BRANCH\", \"SHA256\", ret);\n      return ret;\n    }\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    {\n      unsigned ret = SHA512_256_DIGEST_SIZE;\n      digest_log_probe(da, \"BRANCH\", \"SHA512_256\", ret);\n      return ret;\n    }\n#endif /* MHD_SHA512_256_SUPPORT */\n\n  /* Log unexpected path before asserting */\n  digest_log_probe(da, \"UNEXPECTED\", \"NONE\", 0u);\n  mhd_assert (0); /* May not happen */\n  return 0;\n}"
}