{
  "user_message": "An agent A claimed that the following digest_get_size code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of digest_get_size.\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as 'struct DigestAlgorithm *da' but the code (including the fragment 'if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)') only reads members of the pointed-to object. The pointer could and should be declared as 'const struct DigestAlgorithm *da' so the pointer points to a const-qualified type, satisfying MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function digest_get_size only inspects members of the object pointed to by da (mhd_assert reads da->uninitialised and da->algo_selected; subsequent comparisons read da->algo) and does not modify the pointed-to object. Per MISRA C 2023 Rule 8.13, the parameter should therefore be declared to point to a const-qualified type (i.e. const struct DigestAlgorithm *da). The only caveat would be if mhd_assert or some other macro used here requires a non-const pointer or performs a cast that violates const-correctness; absent such an unusual macro requirement, changing the parameter to const is the correct fix."
}