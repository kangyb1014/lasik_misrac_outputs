{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n  req = *req_cls;\n  if (NULL == req)\n  {\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n      return MHD_NO;\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n    return MHD_YES;\n  }\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    return ret;\n  }\n  /* create timer and suspend connection */\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  MHD_suspend_connection (connection);\n  return MHD_YES;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreq = malloc (sizeof(struct Request));\n    if (NULL == req)\n      return MHD_NO;\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n    return MHD_YES;\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The fragment only calls library functions (malloc) and initializes the newly allocated struct, then returns MHD_YES. It does not call ahc_echo (neither directly nor indirectly). Even if the external MHD framework later re-invokes the handler, that is an external invocation, not a direct/indirect self-call in the program's call graph required by MISRA C 2023 Rule 17.2."
}