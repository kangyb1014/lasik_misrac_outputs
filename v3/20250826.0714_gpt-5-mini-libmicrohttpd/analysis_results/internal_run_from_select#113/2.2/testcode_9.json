{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert call performs a pure runtime check that invokes MHD_thread_handle_ID_is_current_thread_(daemon->tid), which (presumably) has no side effects and only reports an invariant. In normal correct operation the predicate is true, so the assertion only evaluates a boolean and does not alter program state. Thus the invocation is an operation that is executed but whose removal would not affect program behaviour (unless the assertion path aborts on failure). This constitutes dead code under MISRA C 2023 Rule 2.2. Note: if mhd_assert is a compile-time no-op in release builds the expression is not executed; Rule 2.2 applies to the case where the assertion is executed (e.g. in debug builds).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified internal_run_from_select code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1132.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of internal_run_from_select as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of internal_run_from_select:\n```c\nstatic enum MHD_Result\ninternal_run_from_select (struct MHD_Daemon *daemon,\n                          const fd_set *read_fd_set,\n                          const fd_set *write_fd_set,\n                          const fd_set *except_fd_set,\n                          int fd_setsize)\n{\n  MHD_socket ds;\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  struct MHD_UpgradeResponseHandle *urh;\n  struct MHD_UpgradeResponseHandle *urhn;\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid)));\n  mhd_assert ((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (! MHD_thread_handle_ID_is_valid_ID_ (daemon->tid)));\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (MHD_thread_handle_ID_is_current_thread_ (daemon->tid)));\n\n  mhd_assert (0 < fd_setsize);\n  (void) fd_setsize; /* Mute compiler warning */\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize; /* Mute compiler warning */\n  mhd_assert (((int) FD_SETSIZE) <= fd_setsize);\n  fd_setsize = FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  /* Clear ITC to avoid spinning select */\n  /* Do it before any other processing so new signals\n     will trigger select again and will be processed */\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  { /* Have ITC */\n    bool need_to_clear_itc = true; /* ITC is always non-blocking, it is safe to clear even if ITC not activated */\n    if (MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (MHD_itc_r_fd_ (daemon->itc),\n                                         NULL, fd_setsize))\n      need_to_clear_itc = FD_ISSET (MHD_itc_r_fd_ (daemon->itc), \\\n                                    (fd_set *) _MHD_DROP_CONST (read_fd_set)); /* Skip clearing, if not needed */\n    if (need_to_clear_itc)\n      MHD_itc_clear_ (daemon->itc);\n  }\n\n  /* Reset. New value will be set when connections are processed. */\n  /* Note: no-op for thread-per-connection as it is always false in that mode. */\n  daemon->data_already_pending = false;\n\n  /* Process externally added connection if any */\n  if (daemon->have_new)\n    new_connections_list_process_ (daemon);\n\n  /* select connection thread handling type */\n  ds = daemon->listen_fd;\n  if ( (MHD_INVALID_SOCKET != ds) &&\n       (! daemon->was_quiesced) )\n  {\n    bool need_to_accept;\n    if (MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (ds, NULL, fd_setsize))\n      need_to_accept = FD_ISSET (ds,\n                                 (fd_set *) _MHD_DROP_CONST (read_fd_set));\n    else                                       /* Cannot check whether new connection are pending */\n      need_to_accept = daemon->listen_nonblk;  /* Try to accept if non-blocking */\n\n    if (need_to_accept)\n      (void) MHD_accept_connection (daemon);\n  }\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* do not have a thread per connection, process all connections now */\n    struct MHD_Connection *pos;\n    for (pos = daemon->connections_tail; NULL != pos; pos = pos->prev)\n    {\n      MHD_socket cs;\n      bool r_ready;\n      bool w_ready;\n      bool has_err;\n\n      cs = pos->socket_fd;\n      if (MHD_INVALID_SOCKET == cs)\n        continue;\n\n      if (MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (cs, NULL, fd_setsize))\n      {\n        r_ready = FD_ISSET (cs,\n                            (fd_set *) _MHD_DROP_CONST (read_fd_set));\n        w_ready = FD_ISSET (cs,\n                            (fd_set *) _MHD_DROP_CONST (write_fd_set));\n        has_err = (NULL != except_fd_set) &&\n                  FD_ISSET (cs,\n                            (fd_set *) _MHD_DROP_CONST (except_fd_set));\n      }\n      else\n      { /* Cannot check the real readiness */\n        r_ready = pos->sk_nonblck;\n        w_ready = r_ready;\n        has_err = false;\n      }\n      call_handlers (pos,\n                     r_ready,\n                     w_ready,\n                     has_err);\n    }\n  }\n\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  /* handle upgraded HTTPS connections */\n  for (urh = daemon->urh_tail; NULL != urh; urh = urhn)\n  {\n    urhn = urh->prev;\n    /* update urh state based on select() output */\n    urh_from_fdset (urh,\n                    read_fd_set,\n                    write_fd_set,\n                    except_fd_set,\n                    fd_setsize);\n    /* call generic forwarding function for passing data */\n    process_urh (urh);\n    /* Finished forwarding? */\n    if ( (0 == urh->in_buffer_size) &&\n         (0 == urh->out_buffer_size) &&\n         (0 == urh->in_buffer_used) &&\n         (0 == urh->out_buffer_used) )\n    {\n      MHD_connection_finish_forward_ (urh->connection);\n      urh->clean_ready = true;\n      /* Resuming will move connection to cleanup list. */\n      MHD_resume_connection (urh->connection);\n    }\n  }\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  MHD_cleanup_connections (daemon);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified internal_run_from_select code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe logging helper: append logs to /tmp/logs/1132.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1132.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic enum MHD_Result\ninternal_run_from_select (struct MHD_Daemon *daemon,\n                          const fd_set *read_fd_set,\n                          const fd_set *write_fd_set,\n                          const fd_set *except_fd_set,\n                          int fd_setsize)\n{\n  MHD_socket ds;\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  struct MHD_UpgradeResponseHandle *urh;\n  struct MHD_UpgradeResponseHandle *urhn;\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n\n  /* Evaluate assertion predicates once so we can log their values\n     and then invoke mhd_assert with the same boolean result. */\n  bool assert_p1 = ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \n              (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid)));\n  mhd_probe_log(\"assert_p1: (USE_SELECT_INTERNALLY=%d, tid=%p) => %d\",\n                (int)((daemon->options & MHD_USE_SELECT_INTERNALLY) != 0),\n                (void *) (uintptr_t) daemon->tid,\n                (int) assert_p1);\n  mhd_assert (assert_p1);\n\n  bool assert_p2 = ((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \n              (! MHD_thread_handle_ID_is_valid_ID_ (daemon->tid)));\n  mhd_probe_log(\"assert_p2: (USE_SELECT_INTERNALLY=%d, tid=%p) => %d\",\n                (int)((daemon->options & MHD_USE_SELECT_INTERNALLY) != 0),\n                (void *) (uintptr_t) daemon->tid,\n                (int) assert_p2);\n  mhd_assert (assert_p2);\n\n  bool assert_p3 = ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \n              (MHD_thread_handle_ID_is_current_thread_ (daemon->tid)));\n  mhd_probe_log(\"assert_p3: (USE_SELECT_INTERNALLY=%d, tid=%p) => %d\",\n                (int)((daemon->options & MHD_USE_SELECT_INTERNALLY) != 0),\n                (void *) (uintptr_t) daemon->tid,\n                (int) assert_p3);\n  mhd_assert (assert_p3);\n\n  bool assert_fdsize = (0 < fd_setsize);\n  mhd_probe_log(\"assert_fdsize: fd_setsize=%d => %d\", fd_setsize, (int) assert_fdsize);\n  mhd_assert (assert_fdsize);\n  (void) fd_setsize; /* Mute compiler warning */\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize; /* Mute compiler warning */\n  mhd_assert (((int) FD_SETSIZE) <= fd_setsize);\n  fd_setsize = FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  /* Clear ITC to avoid spinning select */\n  /* Do it before any other processing so new signals\n     will trigger select again and will be processed */\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  { /* Have ITC */\n    bool need_to_clear_itc = true; /* ITC is always non-blocking, it is safe to clear even if ITC not activated */\n    if (MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (MHD_itc_r_fd_ (daemon->itc),\n                                         NULL, fd_setsize))\n    {\n      int fdisset = FD_ISSET (MHD_itc_r_fd_ (daemon->itc), \n                                     (fd_set *) _MHD_DROP_CONST (read_fd_set)); /* Skip clearing, if not needed */\n      need_to_clear_itc = fdisset ? true : false;\n      mhd_probe_log(\"ITC FD fits fd_setsize; FD_ISSET(itc_r_fd)=%d => need_to_clear_itc=%d\",\n                    fdisset, (int) need_to_clear_itc);\n    }\n    else\n    {\n      mhd_probe_log(\"ITC FD does not fit fd_setsize; default need_to_clear_itc=%d\",\n                    (int) need_to_clear_itc);\n    }\n    if (need_to_clear_itc)\n    {\n      mhd_probe_log(\"Clearing ITC (itc=%p)\", (void *) (uintptr_t) daemon->itc);\n      MHD_itc_clear_ (daemon->itc);\n    }\n  }\n\n  /* Reset. New value will be set when connections are processed. */\n  /* Note: no-op for thread-per-connection as it is always false in that mode. */\n  daemon->data_already_pending = false;\n\n  /* Process externally added connection if any */\n  if (daemon->have_new)\n  {\n    mhd_probe_log(\"Processing externally added connections: have_new=true\");\n    new_connections_list_process_ (daemon);\n  }\n  else\n  {\n    mhd_probe_log(\"No externally added connections: have_new=false\");\n  }\n\n  /* select connection thread handling type */\n  ds = daemon->listen_fd;\n  if ( (MHD_INVALID_SOCKET != ds) &&\n       (! daemon->was_quiesced) )\n  {\n    bool need_to_accept;\n    if (MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (ds, NULL, fd_setsize))\n    {\n      need_to_accept = FD_ISSET (ds,\n                                 (fd_set *) _MHD_DROP_CONST (read_fd_set));\n      mhd_probe_log(\"Listen fd fits fd_setsize: listen_fd=%d, FD_ISSET(listen)=%d => need_to_accept=%d\",\n                    (int) ds, (int) need_to_accept, (int) need_to_accept);\n    }\n    else                                       /* Cannot check whether new connection are pending */\n    {\n      need_to_accept = daemon->listen_nonblk;  /* Try to accept if non-blocking */\n      mhd_probe_log(\"Listen fd does not fit fd_setsize: listen_fd=%d, listen_nonblk=%d => need_to_accept=%d\",\n                    (int) ds, (int) daemon->listen_nonblk, (int) need_to_accept);\n    }\n\n    if (need_to_accept)\n    {\n      mhd_probe_log(\"Accepting new connection (listen_fd=%d)\", (int) ds);\n      (void) MHD_accept_connection (daemon);\n    }\n    else\n    {\n      mhd_probe_log(\"No accept needed (listen_fd=%d)\", (int) ds);\n    }\n  }\n  else\n  {\n    mhd_probe_log(\"No listening accept step: ds=%d, was_quiesced=%d\",\n                  (int) ds, (int) daemon->was_quiesced);\n  }\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* do not have a thread per connection, process all connections now */\n    struct MHD_Connection *pos;\n    for (pos = daemon->connections_tail; NULL != pos; pos = pos->prev)\n    {\n      MHD_socket cs;\n      bool r_ready;\n      bool w_ready;\n      bool has_err;\n\n      cs = pos->socket_fd;\n      if (MHD_INVALID_SOCKET == cs)\n        continue;\n\n      if (MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (cs, NULL, fd_setsize))\n      {\n        r_ready = FD_ISSET (cs,\n                            (fd_set *) _MHD_DROP_CONST (read_fd_set));\n        w_ready = FD_ISSET (cs,\n                            (fd_set *) _MHD_DROP_CONST (write_fd_set));\n        has_err = (NULL != except_fd_set) &&\n                  FD_ISSET (cs,\n                            (fd_set *) _MHD_DROP_CONST (except_fd_set));\n        mhd_probe_log(\"Conn pos=%p socket=%d r_ready=%d w_ready=%d has_err=%d\",\n                      (void *) (uintptr_t) pos, (int) cs, (int) r_ready, (int) w_ready, (int) has_err);\n      }\n      else\n      { /* Cannot check the real readiness */\n        r_ready = pos->sk_nonblck;\n        w_ready = r_ready;\n        has_err = false;\n        mhd_probe_log(\"Conn pos=%p socket=%d (no FD_SET fit) using sk_nonblck=%d => r_ready/w_ready=%d\",\n                      (void *) (uintptr_t) pos, (int) cs, (int) pos->sk_nonblck, (int) r_ready);\n      }\n      call_handlers (pos,\n                     r_ready,\n                     w_ready,\n                     has_err);\n      mhd_probe_log(\"call_handlers invoked for pos=%p socket=%d\", (void *) (uintptr_t) pos, (int) cs);\n    }\n  }\n\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  /* handle upgraded HTTPS connections */\n  for (urh = daemon->urh_tail; NULL != urh; urh = urhn)\n  {\n    urhn = urh->prev;\n    /* update urh state based on select() output */\n    urh_from_fdset (urh,\n                    read_fd_set,\n                    write_fd_set,\n                    except_fd_set,\n                    fd_setsize);\n    /* call generic forwarding function for passing data */\n    process_urh (urh);\n    mhd_probe_log(\"Processed URH %p: in_buf=%d out_buf=%d in_used=%d out_used=%d\",\n                  (void *) (uintptr_t) urh,\n                  (int) urh->in_buffer_size,\n                  (int) urh->out_buffer_size,\n                  (int) urh->in_buffer_used,\n                  (int) urh->out_buffer_used);\n    /* Finished forwarding? */\n    if ( (0 == urh->in_buffer_size) &&\n         (0 == urh->out_buffer_size) &&\n         (0 == urh->in_buffer_used) &&\n         (0 == urh->out_buffer_used) )\n    {\n      MHD_connection_finish_forward_ (urh->connection);\n      urh->clean_ready = true;\n      /* Resuming will move connection to cleanup list. */\n      MHD_resume_connection (urh->connection);\n      mhd_probe_log(\"URH %p finished forwarding and resumed connection %p\", (void *) (uintptr_t) urh, (void *) (uintptr_t) urh->connection);\n    }\n  }\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  MHD_cleanup_connections (daemon);\n  mhd_probe_log(\"internal_run_from_select: cleanup done, returning MHD_YES\");\n  return MHD_YES;\n}\n"
}