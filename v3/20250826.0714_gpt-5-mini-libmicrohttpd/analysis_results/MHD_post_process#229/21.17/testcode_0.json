{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes pp->encoding and a fixed length (MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)) into MHD_str_equal_caseless_n_ without validating pp->encoding. If pp->encoding is NULL or points to a buffer shorter than the supplied length (e.g. pp->encoding == \"x\" or truncated), the underlying implementation of MHD_str_equal_caseless_n_ may call string.h functions (e.g. memcmp/strncasecmp) that read 'n' bytes from pp->encoding, causing an out-of-bounds access. For example, comparing against \"multipart/form-data\" (length 19) when pp->encoding has fewer than 19 bytes would trigger the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_post_process code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2299.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_post_process as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_post_process:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_post_process code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper to log control flow and state to /tmp/logs/2299.txt */\nstatic void MHD_post_process_log_probe(const char *stage,\n                                       const struct MHD_PostProcessor *pp,\n                                       const char *encoding,\n                                       size_t post_data_len,\n                                       size_t cmp_len,\n                                       const char *cmp_label,\n                                       int cmp_result)\n{\n  FILE *f = fopen(\"/tmp/logs/2299.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[MHD_post_process] stage=%s\\n\", stage);\n  fprintf(f, \"  post_data_len=%zu\\n\", post_data_len);\n  fprintf(f, \"  pp=%p\\n\", (const void *)pp);\n  fprintf(f, \"  pp->encoding_ptr=%p\\n\", (const void *)encoding);\n  fprintf(f, \"  encoding_is_null=%d\\n\", (encoding == NULL));\n  /* We deliberately DO NOT attempt to read the pointed-to string contents here\n     to avoid introducing out-of-bounds reads. We only log the pointer value and\n     whether it is NULL. */\n  if (cmp_label != NULL)\n    fprintf(f, \"  compare_target=%s\\n\", cmp_label);\n  if (cmp_len > 0)\n    fprintf(f, \"  compare_len=%zu\\n\", cmp_len);\n  if (cmp_result >= 0)\n    fprintf(f, \"  compare_result=%d\\n\", cmp_result);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  /* Log entry */\n  MHD_post_process_log_probe(\"entry\", pp, (pp ? pp->encoding : NULL), post_data_len, 0, NULL, -1);\n\n  if (0 == post_data_len) {\n    MHD_post_process_log_probe(\"return_zero_len\", pp, (pp ? pp->encoding : NULL), post_data_len, 0, NULL, -1);\n    return MHD_YES;\n  }\n  if (NULL == pp) {\n    MHD_post_process_log_probe(\"return_null_pp\", pp, NULL, post_data_len, 0, NULL, -1);\n    return MHD_NO;\n  }\n\n  /* First comparison: form-urlencoded */\n  MHD_post_process_log_probe(\"before_compare\", pp, pp->encoding, post_data_len,\n                             MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED),\n                             MHD_HTTP_POST_ENCODING_FORM_URLENCODED, -1);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED))) {\n    MHD_post_process_log_probe(\"after_compare_true\", pp, pp->encoding, post_data_len,\n                               MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED),\n                               MHD_HTTP_POST_ENCODING_FORM_URLENCODED, 1);\n    MHD_post_process_log_probe(\"calling_post_process_urlencoded\", pp, pp->encoding, post_data_len, 0, NULL, -1);\n    enum MHD_Result res = post_process_urlencoded (pp,\n                                                   post_data,\n                                                   post_data_len);\n    MHD_post_process_log_probe(\"returned_post_process_urlencoded\", pp, pp->encoding, post_data_len, 0, NULL, (int)res);\n    return res;\n  } else {\n    MHD_post_process_log_probe(\"after_compare_false\", pp, pp->encoding, post_data_len,\n                               MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED),\n                               MHD_HTTP_POST_ENCODING_FORM_URLENCODED, 0);\n  }\n\n  /* Second comparison: multipart/form-data */\n  MHD_post_process_log_probe(\"before_compare\", pp, pp->encoding, post_data_len,\n                             MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA),\n                             MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA, -1);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA))) {\n    MHD_post_process_log_probe(\"after_compare_true\", pp, pp->encoding, post_data_len,\n                               MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA),\n                               MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA, 1);\n    MHD_post_process_log_probe(\"calling_post_process_multipart\", pp, pp->encoding, post_data_len, 0, NULL, -1);\n    enum MHD_Result res = post_process_multipart (pp,\n                                                  post_data,\n                                                  post_data_len);\n    MHD_post_process_log_probe(\"returned_post_process_multipart\", pp, pp->encoding, post_data_len, 0, NULL, (int)res);\n    return res;\n  } else {\n    MHD_post_process_log_probe(\"after_compare_false\", pp, pp->encoding, post_data_len,\n                               MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA),\n                               MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA, 0);\n  }\n\n  /* this should never be reached */\n  MHD_post_process_log_probe(\"return_end_default\", pp, pp->encoding, post_data_len, 0, NULL, -1);\n  return MHD_NO;\n}\n"
}