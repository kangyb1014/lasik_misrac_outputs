{
  "user_message": "An agent A claimed that the following MHD_post_process code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_post_process.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf post_process_urlencoded is declared to take a non-const pointer for the post data (for example: enum MHD_Result post_process_urlencoded(struct MHD_PostProcessor *pp, char *post_data, size_t post_data_len);), then passing the const char *post_data from MHD_post_process discards the const qualifier. That constitutes a violation of MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible). If, instead, post_process_urlencoded is declared to accept a const char * for the data, there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report from agent A is not correct. MISRA C 2023 Rule 8.13 requires that pointer declarations should use const when the pointed-to object is not modified. In the shown code MHD_post_process declares post_data as const char * \u2014 that conforms to 8.13. If post_process_urlencoded were declared to take a non-const char * then the problem lies in that callee's prototype (it should be changed to accept const char * if it does not modify the data). Passing a const char * to a function declared to take char * is not allowed without an explicit cast; if such a cast were used it would be a different violation (casting away const/qualifier), not a violation of the MHD_post_process declaration under Rule 8.13. Therefore the reported violation of 8.13 in MHD_post_process is incorrect."
}