{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen MHD_FAVOR_SMALL_CODE is defined: len is obtained from strlen(str) and then passed as the destination limit to MHD_str_pct_decode_lenient_n_. The code then performs str[res] = 0 without a local check that res <= len (or that the caller supplied buffer is larger than len). If MHD_str_pct_decode_lenient_n_ were to return a value greater than len (for example because it does not enforce the passed dest length or due to a bug), the write at str[res] would write past the object\u2019s bounds and therefore violate Rule 21.17. (Also, if str is not NUL-terminated, the earlier strlen call itself can read out of bounds.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_pct_decode_in_place_lenient_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1549.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_pct_decode_in_place_lenient_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_pct_decode_in_place_lenient_:\n```c\nsize_t\nMHD_str_pct_decode_in_place_lenient_ (char *str,\n                                      bool *broken_encoding)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t len;\n  size_t res;\n\n  len = strlen (str);\n  res = MHD_str_pct_decode_lenient_n_ (str, len, str, len, broken_encoding);\n  str[res] = 0;\n\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  if (NULL != broken_encoding)\n    *broken_encoding = false;\n  r = 0;\n  w = 0;\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n      {\n        if (NULL != broken_encoding)\n          *broken_encoding = true;\n        str[w++] = chr; /* Copy \"as is\" */\n        str[w] = 0;\n        return w;\n      }\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n        {\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          str[w++] = chr; /* Copy \"as is\" */\n          str[w++] = d1; /* Copy \"as is\" */\n          str[w] = 0;\n          return w;\n        }\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n          {\n            if (NULL != broken_encoding)\n              *broken_encoding = true;\n            str[w++] = chr; /* Copy \"as is\" */\n            str[w++] = d1;\n            str[w++] = d2;\n            continue;\n          }\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n          continue;\n        }\n      }\n    }\n    str[w++] = chr;\n  }\n  str[w] = 0;\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n```\n</target_code>\nPlease provide the modified MHD_str_pct_decode_in_place_lenient_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* External dependencies declared so this test snippet can be compiled\n   in the test environment where the real definitions are provided. */\nextern size_t MHD_str_pct_decode_lenient_n_ (char *dst, size_t dst_len, char *src, size_t src_len, bool *broken_encoding);\nextern int toxdigitvalue (char ch);\n\n/* Simple probe logger that appends human-readable traces to the log file. */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1549.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nsize_t\nMHD_str_pct_decode_in_place_lenient_ (char *str,\n                                      bool *broken_encoding)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t len;\n  size_t res;\n\n  /* Log entry and pointer values */\n  mhd_probe_log (\"ENTER small: MHD_str_pct_decode_in_place_lenient_(str=%p, broken_encoding=%p)\", (void *) str, (void *) broken_encoding);\n\n  /* Preserve original behavior: obtain length via strlen as original code does. */\n  len = strlen (str);\n  mhd_probe_log (\"strlen returned len=%zu\", len);\n\n  /* Call into the length-limited decoder (as original). */\n  res = MHD_str_pct_decode_lenient_n_ (str, len, str, len, broken_encoding);\n  mhd_probe_log (\"MHD_str_pct_decode_lenient_n_ returned res=%zu\", res);\n\n  if (NULL != broken_encoding)\n    mhd_probe_log (\"broken_encoding ptr present, value=%d\", *broken_encoding ? 1 : 0);\n  else\n    mhd_probe_log (\"broken_encoding ptr is NULL\");\n\n  /* Log potential out-of-bounds condition prior to performing the same write\n     as the original code. We intentionally do NOT change the original write\n     to allow reproduction of the violation scenario; we only record evidence. */\n  if (res > len)\n    mhd_probe_log (\"WARNING: res (%zu) > len (%zu): writing NUL at str[res] may overflow buffer\", res, len);\n  else\n    mhd_probe_log (\"Safe case: res (%zu) <= len (%zu)\", res, len);\n\n  /* Original behavior preserved: write terminating NUL at computed position. */\n  str[res] = 0;\n  mhd_probe_log (\"Wrote NUL at str[%zu] (str=%p)\", res, (void *) str);\n\n  mhd_probe_log (\"RETURN small: %zu\", res);\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  if (NULL != broken_encoding)\n    *broken_encoding = false;\n\n  mhd_probe_log (\"ENTER large: MHD_str_pct_decode_in_place_lenient_(str=%p, broken_encoding=%p)\", (void *) str, (void *) broken_encoding);\n\n  r = 0;\n  w = 0;\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n      {\n        if (NULL != broken_encoding)\n          *broken_encoding = true;\n        mhd_probe_log (\"Early return: lone '%%' at input index %zu (r=%zu)\", (size_t) (r - 1), r);\n        str[w++] = chr; /* Copy \"as is\" */\n        str[w] = 0;\n        mhd_probe_log (\"RETURN large: %zu\", w);\n        return w;\n      }\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n        {\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          mhd_probe_log (\"Early return: '%%' followed by single hex character at input indexes %zu,%zu\", (size_t) (r - 2), (size_t) (r - 1));\n          str[w++] = chr; /* Copy \"as is\" */\n          str[w++] = d1; /* Copy \"as is\" */\n          str[w] = 0;\n          mhd_probe_log (\"RETURN large: %zu\", w);\n          return w;\n        }\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n          {\n            if (NULL != broken_encoding)\n              *broken_encoding = true;\n            mhd_probe_log (\"Non-hex sequence '%%%c%c' at input indexes %zu,%zu: copying as-is\", d1, d2, (size_t) (r - 2), (size_t) (r - 1));\n            str[w++] = chr; /* Copy \"as is\" */\n            str[w++] = d1;\n            str[w++] = d2;\n            continue;\n          }\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n          continue;\n        }\n      }\n    }\n    str[w++] = chr;\n  }\n  str[w] = 0;\n  mhd_probe_log (\"RETURN large: %zu\", w);\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n"
}