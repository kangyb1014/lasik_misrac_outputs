{
  "user_message": "An agent A claimed that the following add_new_users code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_new_users.\n```c\nstatic int\nadd_new_users (void)\n{\n  if (! add_new_user_entry (\"joepublic\",\n                            \"password\",\n                            REALM,\n                            ! 0,\n                            0))\n    return 0;\n\n  if (! add_new_user_entry (\"superadmin\",\n                            \"pA$$w0Rd\",\n                            REALM,\n                            ! 0,\n                            ! 0))\n    return 0;\n\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf add_new_user_entry is declared with non-const pointer parameters for the string arguments \u2014 for example: int add_new_user_entry(char *username, char *password, const char *realm, int f1, int f2) \u2014 then calling it with string literals (\"superadmin\", \"pA$$w0Rd\") shows the function accepts non-const pointers even though the pointed-to data need not be modified. That would violate MISRA C 2023 Rule 8.13. The correct declaration (to comply) would be: int add_new_user_entry(const char *username, const char *password, const char *realm, int f1, int f2).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct, but the correctness is conditional on the prototype/definition of add_new_user_entry. MISRA C 2023 Rule 8.13 requires that pointer types be const-qualified whenever the pointed-to object need not be modified. If add_new_user_entry is declared/defined as int add_new_user_entry(char *username, char *password, const char *realm, int f1, int f2) then the username and password parameters should be declared const char * (because the function need not \u2014 and should not \u2014 require writeable storage). That non-const parameter declaration would violate Rule 8.13. The violation is in the declaration/definition of add_new_user_entry (not in the call site add_new_users), and the fix is to change the parameters to const char *username and const char *password (and keep realm const if already so). If add_new_user_entry is already declared with const-qualified parameters, there is no Rule 8.13 violation in this code."
}