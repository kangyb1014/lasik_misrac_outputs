{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of process_short_params_str:\n```c\nstatic enum PerfRepl_param_result\nprocess_short_params_str (const char *params_str, const char *next_param)\n{\n  if (0 == params_str[0])\n  {\n    fprintf (stderr, \"Unrecognised parameter: -\\n\");\n    return PERF_RPL_PARAM_ERROR;\n  }\n  do\n  {\n    enum PerfRepl_param_result param_res;\n    param_res = process_short_param (params_str, next_param);\n    if (PERF_RPL_PARAM_ONE_CHAR != param_res)\n      return param_res;\n  } while (0 != (++params_str)[0]);\n  return PERF_RPL_PARAM_FULL_STR;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n} while (0 != (++params_str)[0]);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated: the fragment does not call any <string.h> functions covered by MISRA C 2023 Rule 21.17. The (++params_str)[0] expression only advances to and reads the NUL terminator (the initial params_str[0] == 0 check ensures the string is non-empty), so it does not access beyond the bounds of the referenced object provided params_str points to a valid NUL-terminated string."
}