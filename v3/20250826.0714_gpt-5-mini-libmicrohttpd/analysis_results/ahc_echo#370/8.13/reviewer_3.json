{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_for_upgrade (&uh_cb,\n                                              NULL);\n\n  MHD_add_response_header (response,\n                           MHD_HTTP_HEADER_UPGRADE,\n                           \"Echo Server\");\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_SWITCHING_PROTOCOLS,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement '*req_cls = &aptr;' stores the address of a non-const object (static int aptr) into a non-const void* target. The object pointed to is never modified, so it could be const-qualified (e.g. 'static const int aptr' or the function parameter changed to 'const void **req_cls'). According to MISRA C 2023 Rule 8.13, a pointer should point to a const\u2011qualified type whenever possible, so this assignment violates the rule.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Rule 8.13 asks that pointers be to const-qualified types when that is possible within the program\u2019s design, but here the code is implementing a callback that must match an external API (libmicrohttpd) whose signature uses void **req_cls. That signature prevents changing the parameter to a const-qualified form (e.g. const void **req_cls) without breaking the required prototype. Declaring aptr as const would then produce incompatible types when assigning &aptr into *req_cls (assigning a const int * into a void * would discard const). In short: although the object referred to (aptr) is never modified, you cannot both make aptr const and keep the required callback prototype. MISRA guidance permits const-qualification when feasible in the given context; because the external API constrains the types here, this code does not constitute a standalone violation of Rule 8.13."
}