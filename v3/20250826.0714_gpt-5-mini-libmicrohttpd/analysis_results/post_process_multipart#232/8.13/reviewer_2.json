{
  "user_message": "An agent A claimed that the following post_process_multipart code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of post_process_multipart.\n```c\nstatic enum MHD_Result\npost_process_multipart (struct MHD_PostProcessor *pp,\n                        const char *post_data,\n                        size_t post_data_len)\n{\n  char *buf;\n  size_t max;\n  size_t ioff;\n  size_t poff;\n  int state_changed;\n\n  buf = (char *) &pp[1];\n  ioff = 0;\n  poff = 0;\n  state_changed = 1;\n  while ( (poff < post_data_len) ||\n          ( (pp->buffer_pos > 0) &&\n            (0 != state_changed) ) )\n  {\n    /* first, move as much input data\n       as possible to our internal buffer */\n    max = pp->buffer_size - pp->buffer_pos;\n    if (max > post_data_len - poff)\n      max = post_data_len - poff;\n    memcpy (&buf[pp->buffer_pos],\n            &post_data[poff],\n            max);\n    poff += max;\n    pp->buffer_pos += max;\n    if ( (0 == max) &&\n         (0 == state_changed) &&\n         (poff < post_data_len) )\n    {\n      pp->state = PP_Error;\n      return MHD_NO;            /* out of memory */\n    }\n    state_changed = 0;\n\n    /* first state machine for '\\r'-'\\n' and '--' handling */\n    switch (pp->skip_rn)\n    {\n    case RN_Inactive:\n      break;\n    case RN_OptN:\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n    /* fall-through! */\n    case RN_Dash:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Dash2;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Full;\n    /* fall-through! */\n    case RN_Full:\n      if (buf[0] == '\\r')\n      {\n        if ( (pp->buffer_pos > 1) &&\n             ('\\n' == buf[1]) )\n        {\n          pp->skip_rn = RN_Inactive;\n          ioff += 2;\n        }\n        else\n        {\n          pp->skip_rn = RN_OptN;\n          ioff++;\n        }\n        goto AGAIN;\n      }\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Inactive;\n      pp->state = PP_Error;\n      return MHD_NO;            /* no '\\r\\n' */\n    case RN_Dash2:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Full;\n        pp->state = pp->dash_state;\n        goto AGAIN;\n      }\n      pp->state = PP_Error;\n      break;\n    }\n\n    /* main state engine */\n    switch (pp->state)\n    {\n    case PP_Error:\n      return MHD_NO;\n    case PP_Done:\n      /* did not expect to receive more data */\n      pp->state = PP_Error;\n      return MHD_NO;\n    case PP_Init:\n      /**\n       * Per RFC2046 5.1.1 NOTE TO IMPLEMENTORS, consume anything\n       * prior to the first multipart boundary:\n       *\n       * > There appears to be room for additional information prior\n       * > to the first boundary delimiter line and following the\n       * > final boundary delimiter line.  These areas should\n       * > generally be left blank, and implementations must ignore\n       * > anything that appears before the first boundary delimiter\n       * > line or after the last one.\n       */\n      (void) find_boundary (pp,\n                            pp->boundary,\n                            pp->blen,\n                            &ioff,\n                            PP_ProcessEntryHeaders,\n                            PP_Done);\n      break;\n    case PP_NextBoundary:\n      if (MHD_NO == find_boundary (pp,\n                                   pp->boundary,\n                                   pp->blen,\n                                   &ioff,\n                                   PP_ProcessEntryHeaders,\n                                   PP_Done))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        goto END;\n      }\n      break;\n    case PP_ProcessEntryHeaders:\n      pp->must_ikvi = true;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_PerformCheckMultipart))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_PerformCheckMultipart:\n      if ( (NULL != pp->content_type) &&\n           (MHD_str_equal_caseless_n_ (pp->content_type,\n                                       \"multipart/mixed\",\n                                       MHD_STATICSTR_LEN_ (\"multipart/mixed\"))))\n      {\n        pp->nested_boundary = strstr (pp->content_type,\n                                      \"boundary=\");\n        if (NULL == pp->nested_boundary)\n        {\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        pp->nested_boundary =\n          strdup (&pp->nested_boundary[MHD_STATICSTR_LEN_ (\"boundary=\")]);\n        if (NULL == pp->nested_boundary)\n        {\n          /* out of memory */\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        /* free old content type, we will need that field\n           for the content type of the nested elements */\n        free (pp->content_type);\n        pp->content_type = NULL;\n        pp->nlen = strlen (pp->nested_boundary);\n        pp->state = PP_Nested_Init;\n        state_changed = 1;\n        break;\n      }\n      pp->state = PP_ProcessValueToBoundary;\n      pp->value_offset = 0;\n      state_changed = 1;\n      break;\n    case PP_ProcessValueToBoundary:\n      if (MHD_NO == process_value_to_boundary (pp,\n                                               &ioff,\n                                               pp->boundary,\n                                               pp->blen,\n                                               PP_PerformCleanup,\n                                               PP_Done))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        break;\n      }\n      break;\n    case PP_PerformCleanup:\n      /* clean up state of one multipart form-data element! */\n      pp->have = NE_none;\n      free_unmarked (pp);\n      if (NULL != pp->nested_boundary)\n      {\n        free (pp->nested_boundary);\n        pp->nested_boundary = NULL;\n      }\n      pp->state = PP_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_Init:\n      if (NULL == pp->nested_boundary)\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      if (MHD_NO == find_boundary (pp,\n                                   pp->nested_boundary,\n                                   pp->nlen,\n                                   &ioff,\n                                   PP_Nested_PerformMarking,\n                                   PP_NextBoundary /* or PP_Error? */))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        goto END;\n      }\n      break;\n    case PP_Nested_PerformMarking:\n      /* remember what headers were given\n         globally */\n      pp->have = NE_none;\n      if (NULL != pp->content_name)\n        pp->have |= NE_content_name;\n      if (NULL != pp->content_type)\n        pp->have |= NE_content_type;\n      if (NULL != pp->content_filename)\n        pp->have |= NE_content_filename;\n      if (NULL != pp->content_transfer_encoding)\n        pp->have |= NE_content_transfer_encoding;\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessEntryHeaders:\n      pp->value_offset = 0;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_Nested_ProcessValueToBoundary))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessValueToBoundary:\n      if (MHD_NO == process_value_to_boundary (pp,\n                                               &ioff,\n                                               pp->nested_boundary,\n                                               pp->nlen,\n                                               PP_Nested_PerformCleanup,\n                                               PP_NextBoundary))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        break;\n      }\n      break;\n    case PP_Nested_PerformCleanup:\n      free_unmarked (pp);\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_ProcessKey:\n    case PP_ProcessValue:\n    case PP_Callback:\n    default:\n      MHD_PANIC (_ (\"internal error.\\n\")); /* should never happen! */\n    }\nAGAIN:\n    if (ioff > 0)\n    {\n      memmove (buf,\n               &buf[ioff],\n               pp->buffer_pos - ioff);\n      pp->buffer_pos -= ioff;\n      ioff = 0;\n      state_changed = 1;\n    }\n  }\nEND:\n  if (0 != ioff)\n  {\n    memmove (buf,\n             &buf[ioff],\n             pp->buffer_pos - ioff);\n    pp->buffer_pos -= ioff;\n  }\n  if (poff < post_data_len)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* serious error */\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes pp->nested_boundary (a pointer to a nul-terminated boundary string) to process_value_to_boundary. If process_value_to_boundary is declared to take a non-const char * (or pp->nested_boundary is declared as non-const when it is never modified), then the pointer should instead be const char * because the boundary buffer is only read. In that situation Rule 8.13 is violated: a pointer that could point to a const-qualified type is not const-qualified.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nEVENT:ENTER pp=0x557bd1f75820 state=2 buffer_pos=0 ioff=0 poff=0 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_Init_find_boundary pp=0x557bd1f75820 state=2 buffer_pos=1 ioff=0 poff=1 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:EXIT_SUCCESS pp=0x557bd1f75820 state=2 buffer_pos=1 ioff=0 poff=1 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:ENTER pp=0x557bd1f75820 state=2 buffer_pos=1 ioff=0 poff=0 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_Init_find_boundary pp=0x557bd1f75820 state=2 buffer_pos=231 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_ProcessEntryHeaders pp=0x557bd1f75820 state=7 buffer_pos=221 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_ProcessEntryHeaders pp=0x557bd1f75820 state=7 buffer_pos=174 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_PerformCheckMultipart pp=0x557bd1f75820 state=8 buffer_pos=172 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:CALL_process_value_to_boundary_main pp=0x557bd1f75820 state=9 buffer_pos=172 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_PerformCleanup pp=0x557bd1f75820 state=7 buffer_pos=152 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_ProcessEntryHeaders pp=0x557bd1f75820 state=7 buffer_pos=152 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_ProcessEntryHeaders pp=0x557bd1f75820 state=7 buffer_pos=85 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_ProcessEntryHeaders pp=0x557bd1f75820 state=7 buffer_pos=59 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=0x557bd1f75ef0\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_ProcessEntryHeaders pp=0x557bd1f75820 state=7 buffer_pos=24 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=0x557bd1f75ef0\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_PerformCheckMultipart pp=0x557bd1f75820 state=8 buffer_pos=22 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=0x557bd1f75ef0\nBOUNDARY_CONTENT:AaB03x\nEVENT:CALL_process_value_to_boundary_main pp=0x557bd1f75820 state=9 buffer_pos=22 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=0x557bd1f75ef0\nBOUNDARY_CONTENT:AaB03x\nEVENT:EXIT_SUCCESS pp=0x557bd1f75820 state=1 buffer_pos=0 ioff=0 poff=230 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=0x557bd1f75ef0\nBOUNDARY_CONTENT:AaB03x\nEVENT:ENTER pp=0x557bd1f75820 state=2 buffer_pos=0 ioff=0 poff=0 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_Init_find_boundary pp=0x557bd1f75820 state=2 buffer_pos=2 ioff=0 poff=2 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:EXIT_SUCCESS pp=0x557bd1f75820 state=2 buffer_pos=2 ioff=0 poff=2 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:ENTER pp=0x557bd1f75820 state=2 buffer_pos=2 ioff=0 poff=0 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_Init_find_boundary pp=0x557bd1f75820 state=2 buffer_pos=231 ioff=0 poff=229 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_ProcessEntryHeaders pp=0x557bd1f75820 state=7 buffer_pos=221 ioff=0 poff=229 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_ptr=(nil)\nBOUNDARY_CONTENT:AaB03x\nEVENT:PP_ProcessEntryHeaders pp=0x557bd1f75820 state=7 buffer_pos=174 ioff=0 poff=229 blen=6 nlen=0 boundary_ptr=0x557bc2daf041 content_type_p\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "I cannot confirm the claimed MISRA Rule 8.13 violation from the snippet alone. Rule 8.13 requires pointers to be declared to point to const-qualified types when they do not need to modify the referenced object. The code shown calls functions (e.g. process_value_to_boundary, find_boundary) passing pp->nested_boundary, and nested_boundary is allocated with strdup and later freed. But neither the struct definition of pp nor the prototypes of process_value_to_boundary/find_boundary are provided here, so we cannot tell whether any pointer declaration is missing a const qualifier.\n\nTwo important points:\n- If process_value_to_boundary (or other called functions) are declared to take a non-const char * but in fact do not modify the boundary string, then that function declaration would be a candidate for change to const char * (and that would be a Rule 8.13 issue in those function prototypes/definitions). But that is a problem in the callee declaration/definition, not in the post_process_multipart caller shown.\n- If pp->nested_boundary were changed to const char * (because it is only read), there is an interaction with free(pp->nested_boundary): passing a const char * to free (which expects void *) discards const and would require an explicit cast \u2014 that complicates making it const. Also nested_boundary is created by strdup (returns char *), so treating it as const would need careful ownership/usage documentation.\n\nConclusion: based solely on the supplied code, the report cannot be confirmed. To validate Agent A\u2019s claim you must inspect the declarations/definitions of the pp structure (type of nested_boundary) and the prototypes/implementations of process_value_to_boundary and other related functions. If those functions accept non-const pointers but do not modify the data, then they (and/or the pointer declarations) should be updated to use const, which would be a Rule 8.13 violation as claimed. Otherwise there is no proven violation in the provided snippet."
}