{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_session:\n```c\nstatic struct Session *\nget_session (struct MHD_Connection *connection)\n{\n  struct Session *ret;\n  const char *cookie;\n\n  cookie = MHD_lookup_connection_value (connection,\n                                        MHD_COOKIE_KIND,\n                                        COOKIE_NAME);\n  if (cookie != NULL)\n  {\n    /* find existing session */\n    ret = sessions;\n    while (NULL != ret)\n    {\n      if (0 == strcmp (cookie, ret->sid))\n        break;\n      ret = ret->next;\n    }\n    if (NULL != ret)\n    {\n      ret->rc++;\n      return ret;\n    }\n  }\n  /* create fresh session */\n  ret = calloc (1, sizeof (struct Session));\n  if (NULL == ret)\n  {\n    fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n    return NULL;\n  }\n  /* not a super-secure way to generate a random session ID,\n     but should do for a simple example... */\n  snprintf (ret->sid,\n            sizeof (ret->sid),\n            \"%X%X%X%X\",\n            (unsigned int) rand (),\n            (unsigned int) rand (),\n            (unsigned int) rand (),\n            (unsigned int) rand ());\n  ret->rc++;\n  ret->start = time (NULL);\n  ret->next = sessions;\n  sessions = ret;\n  return ret;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nret->rc++;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The statement increments the session reference count. Removing it would change program behaviour (session reference counting, lifetime management and any code that decrements/free based on rc), so it is not dead code. Therefore Rule 2.2 is not violated."
}