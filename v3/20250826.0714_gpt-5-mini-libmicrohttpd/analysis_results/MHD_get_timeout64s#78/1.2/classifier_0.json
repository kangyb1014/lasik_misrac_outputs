{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64s:\n```c\n_MHD_EXTERN int64_t\nMHD_get_timeout64s (struct MHD_Daemon *daemon)\n{\n  uint64_t utimeout;\n  if (MHD_NO == MHD_get_timeout64 (daemon, &utimeout))\n    return -1;\n  if (INT64_MAX < utimeout)\n    return INT64_MAX;\n\n  return (int64_t) utimeout;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n_MHD_EXTERN int64_t\nMHD_get_timeout64s (struct MHD_Daemon *daemon)\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No explicit compiler language extension is present in the fragment. _MHD_EXTERN is a macro name only; int64_t and the function declaration are standard. Therefore Rule 1.2 is not violated based on the shown code. (If _MHD_EXTERN expands to a compiler-specific extension such as __declspec(...) or __attribute__((...)), that expansion would constitute a Rule 1.2 violation, but the expansion is not shown here.)"
}