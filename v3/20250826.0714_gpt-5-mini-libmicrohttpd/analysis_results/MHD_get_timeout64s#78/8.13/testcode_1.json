{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MHD_Daemon *daemon' is not const-qualified even though the function body does not modify the daemon object (it only passes it to MHD_get_timeout64 and uses it read-only). According to MISRA C 2023 Rule 8.13, the parameter should be declared as 'const struct MHD_Daemon *daemon' when the pointed-to object is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_timeout64s code that contains useful probe functions that print useful logs to a file \"/tmp/logs/783.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_timeout64s as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64s:\n```c\n_MHD_EXTERN int64_t\nMHD_get_timeout64s (struct MHD_Daemon *daemon)\n{\n  uint64_t utimeout;\n  if (MHD_NO == MHD_get_timeout64 (daemon, &utimeout))\n    return -1;\n  if (INT64_MAX < utimeout)\n    return INT64_MAX;\n\n  return (int64_t) utimeout;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_timeout64s code.\n",
  "test_code": "_MHD_EXTERN int64_t\nMHD_get_timeout64s (struct MHD_Daemon *daemon)\n{\n  uint64_t utimeout;\n  FILE *logf = fopen(\"/tmp/logs/783.txt\", \"a\");\n\n  if (logf != NULL)\n  {\n    /* log entry of function call and pointer value */\n    fprintf(logf, \"MHD_get_timeout64s: called with daemon=%p\\n\", (void *)daemon);\n    fflush(logf);\n  }\n\n  if (MHD_NO == MHD_get_timeout64 (daemon, &utimeout))\n  {\n    if (logf != NULL)\n    {\n      fprintf(logf, \"MHD_get_timeout64 returned MHD_NO -> returning -1\\n\");\n      fclose(logf);\n    }\n    return -1;\n  }\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"MHD_get_timeout64 succeeded: utimeout=%llu\\n\", (unsigned long long)utimeout);\n    fflush(logf);\n  }\n\n  if (INT64_MAX < utimeout)\n  {\n    if (logf != NULL)\n    {\n      fprintf(logf, \"utimeout (%llu) > INT64_MAX (%lld) -> returning INT64_MAX\\n\",\n              (unsigned long long)utimeout, (long long)INT64_MAX);\n      fclose(logf);\n    }\n    return INT64_MAX;\n  }\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"Returning (int64_t)utimeout = %lld\\n\", (long long)((int64_t)utimeout));\n    fclose(logf);\n  }\n\n  return (int64_t) utimeout;\n}\n"
}