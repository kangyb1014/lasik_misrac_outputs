{
  "user_message": "An agent A claimed that the following call_connection_handler code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of call_connection_handler.\n```c\nstatic void\ncall_connection_handler (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  size_t processed;\n\n  if (NULL != connection->rp.response)\n    return;                     /* already queued a response */\n  processed = 0;\n  connection->rq.client_aware = true;\n  connection->in_access_handler = true;\n  if (MHD_NO ==\n      daemon->default_handler (daemon->default_handler_cls,\n                               connection,\n                               connection->rq.url,\n                               connection->rq.method,\n                               connection->rq.version,\n                               NULL,\n                               &processed,\n                               &connection->rq.client_context))\n  {\n    connection->in_access_handler = false;\n    /* serious internal error, close connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Application reported internal error, \" \\\n                               \"closing connection.\"));\n    return;\n  }\n  connection->in_access_handler = false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'daemon' is declared as 'struct MHD_Daemon *daemon = connection->daemon;' but is only used for reading fields (accessing daemon->default_handler and daemon->default_handler_cls) and not to modify the pointed object. It could be declared 'const struct MHD_Daemon *daemon = connection->daemon;' to indicate immutability. Therefore the code does not qualify the pointer-to-object as const when possible.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. In call_connection_handler the local variable \"daemon\" is only used to read members (daemon->default_handler and daemon->default_handler_cls) and is never used to modify the pointed-to MHD_Daemon object. According to MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible. Declaring the local as \"const struct MHD_Daemon *daemon = connection->daemon;\" would satisfy the rule and does not introduce incompatibilities here (the accessed members are only read and passing the member values to the handler does not require removing deeper constness \u2014 the const there is top-level and is fine for passing by value). Therefore the code as written violates Rule 8.13."
}