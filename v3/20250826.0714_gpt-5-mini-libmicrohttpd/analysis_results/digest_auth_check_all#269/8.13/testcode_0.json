{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MHD_Connection *connection' is only used for read access (connection->daemon->dauth_def_nonce_timeout and connection->daemon->dauth_def_max_nc) and is passed through to digest_auth_check_all_inner. If neither this function nor the inner function modify the pointed-to MHD_Connection object, the pointer should be const-qualified (e.g. 'const struct MHD_Connection *connection'). Therefore, as written this is a violation of MISRA C 2023 Rule 8.13 unless the callee(s) require a non-const pointer (i.e. they modify the object).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_auth_check_all code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2693.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_auth_check_all as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_auth_check_all:\n```c\nstatic enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n\n  buf = NULL;\n  digest_setup_zero (&da);\n  if (0 == nonce_timeout)\n    nonce_timeout = connection->daemon->dauth_def_nonce_timeout;\n  if (0 == max_nc)\n    max_nc = connection->daemon->dauth_def_max_nc;\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n  digest_deinit (&da);\n  if (NULL != buf)\n    free (buf);\n\n  return res;\n}\n```\n</target_code>\nPlease provide the modified digest_auth_check_all code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <stdint.h>\n\n/* Probe logger: append textual logs to /tmp/logs/2693.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2693.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n\n  /* Log entry with incoming parameters and pointer identities. */\n  log_probe(\"[digest_auth_check_all] enter: connection=%p realm=%s username=%s password=%p userdigest=%p nonce_timeout=%lu max_nc=%lu mqop=%d malgo3=%d\",\n            (void *)connection,\n            (realm != NULL) ? realm : \"(null)\",\n            (username != NULL) ? username : \"(null)\",\n            (void *)password,\n            (void *)userdigest,\n            (unsigned long)nonce_timeout,\n            (unsigned long)max_nc,\n            (int)mqop,\n            (int)malgo3);\n\n  buf = NULL;\n  digest_setup_zero (&da);\n\n  if (0 == nonce_timeout)\n  {\n    /* Log that we're about to read the daemon default and the pointer used */\n    log_probe(\"[digest_auth_check_all] nonce_timeout is 0; reading connection->daemon at %p\",\n              (void *)(connection ? connection->daemon : NULL));\n    nonce_timeout = connection->daemon->dauth_def_nonce_timeout;\n    log_probe(\"[digest_auth_check_all] nonce_timeout set to %lu from daemon->dauth_def_nonce_timeout\",\n              (unsigned long)nonce_timeout);\n  }\n  if (0 == max_nc)\n  {\n    log_probe(\"[digest_auth_check_all] max_nc is 0; reading connection->daemon at %p\",\n              (void *)(connection ? connection->daemon : NULL));\n    max_nc = connection->daemon->dauth_def_max_nc;\n    log_probe(\"[digest_auth_check_all] max_nc set to %lu from daemon->dauth_def_max_nc\",\n              (unsigned long)max_nc);\n  }\n\n  /* Log the call to the inner function with resolved values */\n  log_probe(\"[digest_auth_check_all] calling digest_auth_check_all_inner: connection=%p realm=%s username=%s nonce_timeout=%lu max_nc=%lu buf=%p\",\n            (void *)connection,\n            (realm != NULL) ? realm : \"(null)\",\n            (username != NULL) ? username : \"(null)\",\n            (unsigned long)nonce_timeout,\n            (unsigned long)max_nc,\n            (void *)buf);\n\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n\n  /* Log result and buffer pointer/content status */\n  if (NULL != buf)\n  {\n    /* buf might not be null-terminated for all code paths; guard against NULL/long content\n       but log what we can (address and printable prefix). */\n    log_probe(\"[digest_auth_check_all] returned res=%d buf=%p buf_preview=%s\",\n              (int)res,\n              (void *)buf,\n              buf);\n  }\n  else\n  {\n    log_probe(\"[digest_auth_check_all] returned res=%d buf=NULL\",\n              (int)res);\n  }\n\n  digest_deinit (&da);\n  if (NULL != buf)\n  {\n    log_probe(\"[digest_auth_check_all] freeing buf at %p\", (void *)buf);\n    free (buf);\n  }\n\n  log_probe(\"[digest_auth_check_all] exit: res=%d\", (int)res);\n  return res;\n}\n"
}