{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'i' (size_t i) is assigned to in the statement `i = MHD_SCKT_SEND_MAX_SIZE_;`, which modifies a function parameter. This directly violates MISRA C 2023 Rule 17.8. Recommended fix: introduce a local variable (e.g. `size_t len = i;`) and cap/modify that local variable instead of modifying the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified recv_param_adapter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/597.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of recv_param_adapter as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of recv_param_adapter:\n```c\nstatic ssize_t\nrecv_param_adapter (struct MHD_Connection *connection,\n                    void *other,\n                    size_t i)\n{\n  ssize_t ret;\n\n  if ( (MHD_INVALID_SOCKET == connection->socket_fd) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n  if (i > MHD_SCKT_SEND_MAX_SIZE_)\n    i = MHD_SCKT_SEND_MAX_SIZE_; /* return value limit */\n\n  ret = MHD_recv_ (connection->socket_fd,\n                   other,\n                   i);\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* Got EAGAIN --- no longer read-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      return MHD_ERR_CONNRESET_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      return MHD_ERR_OPNOTSUPP_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      return MHD_ERR_INVAL_;\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      return MHD_ERR_NOMEM_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* Treat any other error as a hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if (i > (size_t) ret)\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified recv_param_adapter code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append log messages to /tmp/logs/597.txt */\nstatic void\nmhd_probe_log(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/597.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic ssize_t\nrecv_param_adapter (struct MHD_Connection *connection,\n                    void *other,\n                    size_t i)\n{\n  ssize_t ret;\n\n  /* Log entry and initial state */\n  mhd_probe_log(\"ENTER recv_param_adapter: connection=%p, other=%p, initial_i=%zu\",\n                (void *) connection, other, i);\n\n  if ( (MHD_INVALID_SOCKET == connection->socket_fd) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    mhd_probe_log(\"EARLY RETURN: connection invalid or closed: socket_fd=%lld, state=%d\",\n                  (long long) connection->socket_fd,\n                  (int) connection->state);\n    return MHD_ERR_NOTCONN_;\n  }\n  if (i > MHD_SCKT_SEND_MAX_SIZE_)\n  {\n    /* Log the capping that demonstrates the parameter modification */\n    mhd_probe_log(\"CAP i capped: before=%zu, cap=%zu\",\n                  i, (size_t) MHD_SCKT_SEND_MAX_SIZE_);\n    i = MHD_SCKT_SEND_MAX_SIZE_; /* return value limit */\n    mhd_probe_log(\"CAP i applied: after=%zu\", i);\n  }\n\n  ret = MHD_recv_ (connection->socket_fd,\n                   other,\n                   i);\n\n  mhd_probe_log(\"AFTER MHD_recv_: ret=%lld (requested_i=%zu, connection=%p)\",\n                (long long) ret, i, (void *) connection);\n\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n    mhd_probe_log(\"ERROR PATH: ret=%lld, socket_err=%d\", (long long) ret, err);\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* Got EAGAIN --- no longer read-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n      mhd_probe_log(\"RETURN MHD_ERR_AGAIN_ (EAGAIN)\");\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n    {\n      mhd_probe_log(\"RETURN MHD_ERR_AGAIN_ (EINTR)\");\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n    {\n      mhd_probe_log(\"RETURN MHD_ERR_CONNRESET_ (REMOTE DISCONNECT)\");\n      return MHD_ERR_CONNRESET_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n    {\n      mhd_probe_log(\"RETURN MHD_ERR_OPNOTSUPP_ (EOPNOTSUPP)\");\n      return MHD_ERR_OPNOTSUPP_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n    {\n      mhd_probe_log(\"RETURN MHD_ERR_NOTCONN_ (ENOTCONN)\");\n      return MHD_ERR_NOTCONN_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n    {\n      mhd_probe_log(\"RETURN MHD_ERR_INVAL_ (EINVAL)\");\n      return MHD_ERR_INVAL_;\n    }\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n    {\n      mhd_probe_log(\"RETURN MHD_ERR_NOMEM_ (LOW RESOURCES)\");\n      return MHD_ERR_NOMEM_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n    {\n      mhd_probe_log(\"RETURN MHD_ERR_BADF_ (EBADF)\");\n      return MHD_ERR_BADF_;\n    }\n    /* Treat any other error as a hard error. */\n    mhd_probe_log(\"RETURN MHD_ERR_NOTCONN_ (OTHER ERROR)\");\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if (i > (size_t) ret)\n  {\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n    mhd_probe_log(\"EPOLL: cleared READ_READY because requested_i=%zu > ret=%lld\",\n                  i, (long long) ret);\n  }\n#endif /* EPOLL_SUPPORT */\n\n  mhd_probe_log(\"RETURN success: ret=%lld\", (long long) ret);\n  return ret;\n}\n"
}