{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are present in the provided fragment. The items that might look implementation-specific are macros or identifiers, not explicit extension syntax: \n- _MHD_EXTERN and MHD_D_IS_USING_THREADS_ are macro identifiers; their expansions (which could potentially use compiler-specific extensions such as __attribute__, __declspec, or __builtin_... ) are not shown in this fragment, so they cannot be flagged as language extensions based on this code alone. \n- Identifiers beginning with an underscore (e.g. _MHD_EXTERN) may violate reserved-identifier rules but are not language extensions per se. \n- Use of enum, return, (void) cast, function parameters, and macro-like identifiers (MHD_NO, MHD_YES) are all standard C constructs. \nBecause Rule 1.2 requires reporting of explicit language/compiler extensions as documented by the compiler (for example __attribute__, __declspec, __asm, __builtin_... etc.), and none of those appear in the shown code, there are no fragments to report for investigation."
}