{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression _(\"Wrong 'algo' value, API violation\") typically expands to the gettext-like macro/function returning char * (non-const). That non-const pointer is then passed to MHD_PANIC. A string literal here could and should be treated as const char *, so using a non-const pointer (from _ or the MHD_PANIC parameter) violates MISRA C 2023 Rule 8.13. If either the _ macro/function or the MHD_PANIC parameter type were changed to use const char * (or both), the violation would be resolved.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_check2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_check2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_check2:\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check2 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check3 (connection,\n                                realm,\n                                username,\n                                password,\n                                nonce_timeout,\n                                0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_check2 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/2503.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2503.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_digest_auth_check2 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  /* Log entry and inputs (print pointers for password to avoid unsafe string prints) */\n  probe_log(\"MHD_digest_auth_check2: entry: connection=%p, realm='%s', username='%s', password_ptr=%p, nonce_timeout=%u, algo=%u\",\n            (void *)connection,\n            (realm ? realm : \"(null)\"),\n            (username ? username : \"(null)\"),\n            (void *)password,\n            nonce_timeout,\n            (unsigned)algo);\n\n  if (MHD_DIGEST_ALG_AUTO == algo) {\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n    probe_log(\"MHD_digest_auth_check2: algo mapping: AUTO -> malgo3=%d\", (int)malgo3);\n  } else if (MHD_DIGEST_ALG_MD5 == algo) {\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n    probe_log(\"MHD_digest_auth_check2: algo mapping: MD5 -> malgo3=%d\", (int)malgo3);\n  } else if (MHD_DIGEST_ALG_SHA256 == algo) {\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n    probe_log(\"MHD_digest_auth_check2: algo mapping: SHA256 -> malgo3=%d\", (int)malgo3);\n  } else {\n    /* Log the invalid algo situation so other agents can reproduce the scenario. */\n    probe_log(\"MHD_digest_auth_check2: invalid 'algo' value detected: %u. About to call MHD_PANIC.\", (unsigned)algo);\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n  }\n\n  probe_log(\"MHD_digest_auth_check2: calling MHD_digest_auth_check3 with malgo3=%d\", (int)malgo3);\n  res = MHD_digest_auth_check3 (connection,\n                                realm,\n                                username,\n                                password,\n                                nonce_timeout,\n                                0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                malgo3);\n  probe_log(\"MHD_digest_auth_check2: MHD_digest_auth_check3 returned res=%d\", (int)res);\n\n  if (MHD_DAUTH_OK == res) {\n    probe_log(\"MHD_digest_auth_check2: result -> MHD_YES\");\n    return MHD_YES;\n  } else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) ) {\n    probe_log(\"MHD_digest_auth_check2: result -> MHD_INVALID_NONCE\");\n    return MHD_INVALID_NONCE;\n  }\n  probe_log(\"MHD_digest_auth_check2: result -> MHD_NO\");\n  return MHD_NO;\n\n}\n"
}