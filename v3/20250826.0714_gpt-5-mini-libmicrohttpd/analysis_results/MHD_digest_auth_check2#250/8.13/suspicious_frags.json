{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_check2:\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check2 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check3 (connection,\n                                realm,\n                                username,\n                                password,\n                                nonce_timeout,\n                                0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "res = MHD_digest_auth_check3 (connection,\n                                realm,\n                                username,\n                                password,\n                                nonce_timeout,\n                                0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                malgo3);",
    "MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));",
    "MHD_digest_auth_check2 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        enum MHD_DigestAuthAlgorithm algo)"
  ],
  "explanation": "Only pointer-related constructs need investigation for MISRA C 2023 Rule 8.13. The three fragments above involve pointer usage that may lack appropriate const qualification: the function parameter 'struct MHD_Connection *connection' is a non-const pointer (it may be possible to declare it as a pointer to const), the call to MHD_digest_auth_check3 passes that non-const pointer (the callee's prototype should be checked to see whether it could accept a pointer to const), and MHD_PANIC is invoked with a string literal via _(...); the panic/api macro\u2019s parameter type should be checked to ensure it accepts a const-qualified string. All other code in the function either uses pointers that are already const-qualified (realm, username, password) or uses non-pointer types (enums, integers, return values) and therefore do not raise concerns under Rule 8.13."
}