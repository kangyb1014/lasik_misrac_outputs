{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_m_algo:\n```c\nstatic enum MHD_DigestAuthMultiAlgo3\nget_m_algo (void)\n{\n  if (force_md5)\n    return MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (force_sha256)\n    return MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (force_sha512_256)\n    return MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256;\n\n  /* No forced algorithm selection, let MHD to use default */\n  return MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (force_md5)\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The controlling expression is not inherently invariant unless force_md5 is a compile\u2011time constant. If force_md5 is a modifiable object (e.g. a global or local non-const variable set at runtime), then \"if (force_md5)\" is not invariant and does not violate MISRA C 2023 Rule 14.3. It would only violate the rule if force_md5 were an invariant (for example a macro or an integer constant expression/const object that never changes), in which case the controlling expression would be always true or always false."
}