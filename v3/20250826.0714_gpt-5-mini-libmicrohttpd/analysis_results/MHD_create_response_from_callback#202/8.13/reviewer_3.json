{
  "user_message": "An agent A claimed that the following MHD_create_response_from_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_response_from_callback.\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_callback (uint64_t size,\n                                   size_t block_size,\n                                   MHD_ContentReaderCallback crc,\n                                   void *crc_cls,\n                                   MHD_ContentReaderFreeCallback crfc)\n{\n  struct MHD_Response *response;\n\n  if ((NULL == crc) || (0 == block_size))\n    return NULL;\n  if (NULL == (response = MHD_calloc_ (1, sizeof (struct MHD_Response)\n                                       + block_size)))\n    return NULL;\n  response->fd = -1;\n  response->data = (void *) &response[1];\n  response->data_buffer_size = block_size;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->crc = crc;\n  response->crfc = crfc;\n  response->crc_cls = crc_cls;\n  response->reference_count = 1;\n  response->total_size = size;\n  return response;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter crc_cls is declared as void * (and stored into response->crc_cls) even though the create function does not modify the pointed-to object. If the content-reader callback only reads the context (i.e. the pointed-to object is not modified by the library), the pointer should be const-qualified (const void *crc_cls and a matching const-qualified struct member). As written, this fails to qualify the pointer as const where possible and therefore violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA 8.13 indeed encourages using a pointer-to-const when the pointed-to object will never be modified, but \u201cwhenever possible\u201d must be judged in the context of all uses of that pointer. In this API the crc_cls pointer is a user-supplied context that is stored in the response object and later forwarded to user callbacks (the content-reader callback and the content-reader-free callback). Those callback APIs expect a void * context (i.e. a modifiable pointer type). Making crc_cls const in the create function/struct would not be compatible with the rest of the API and would prevent passing it to callbacks that take void * (discarding const would be required). Thus the pointer cannot be made const without changing the callback signatures; the current declaration is therefore acceptable and does not violate MISRA 8.13."
}