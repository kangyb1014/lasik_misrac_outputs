{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for header uses two loop counters and the counter is modified in the body. The loop header is: for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j). Both i and j are incremented in the third clause (violates the requirement that only one loop counter be present and that the third clause modify only the loop counter). Furthermore i is also modified inside the loop body (i++ when '\\' is encountered), which violates the rule that the loop counter shall not be modified in the loop body. The second clause also uses j (not a single Boolean loop-control flag) while j is modified by the loop control, so the loop is not well\u2011formed under Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_quoted_bin_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1524.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_quoted_bin_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_quoted_bin_n:\n```c\nbool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (quoted[i] != unquoted[j])\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_quoted_bin_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/*\n * Probe helper: write concise state logs to /tmp/logs/1524.txt.\n * This helper attempts to avoid any out-of-bounds indexing when\n * formatting character values.\n */\nstatic void\nprobe_log_state(const char *label,\n                size_t i,\n                size_t j,\n                size_t quoted_len,\n                size_t unquoted_len,\n                int qc,\n                int uc)\n{\n  FILE *f = fopen(\"/tmp/logs/1524.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* qc and uc are printed as hex; -1 means out-of-range */\n    fprintf(f, \"%s: i=%zu j=%zu quoted_len=%zu unquoted_len=%zu qc=0x%02x uc=0x%02x\\n\",\n            label, i, j, quoted_len, unquoted_len, qc, uc);\n    fclose(f);\n  }\n}\n\nbool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n\n  /* Log function entry */\n  probe_log_state(\"entry\", 0u, 0u, quoted_len, unquoted_len,\n                  (quoted_len > 0u) ? (unsigned char)quoted[0] : -1,\n                  (unquoted_len > 0u) ? (unsigned char)unquoted[0] : -1);\n\n  if (unquoted_len < quoted_len / 2)\n  {\n    probe_log_state(\"early_length_check_failed\", 0u, 0u, quoted_len, unquoted_len, -1, -1);\n    return false;\n  }\n\n  j = 0u;\n  /* Log before entering loop */\n  probe_log_state(\"before_loop\", 0u, j, quoted_len, unquoted_len,\n                  (quoted_len > 0u) ? (unsigned char)quoted[0] : -1,\n                  (unquoted_len > 0u) ? (unsigned char)unquoted[0] : -1);\n\n  for (i = 0u; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    /* Log at loop iteration start. Avoid indexing out of range. */\n    probe_log_state(\"loop_iter_start\",\n                    i, j, quoted_len, unquoted_len,\n                    (i < quoted_len) ? (unsigned char)quoted[i] : -1,\n                    (j < unquoted_len) ? (unsigned char)unquoted[j] : -1);\n\n    if ('\\\\' == quoted[i])\n    {\n      /* Log encountering backslash before advancing i */\n      probe_log_state(\"backslash_seen_before_i_inc\",\n                      i, j, quoted_len, unquoted_len,\n                      (i < quoted_len) ? (unsigned char)quoted[i] : -1,\n                      (j < unquoted_len) ? (unsigned char)unquoted[j] : -1);\n\n      i++; /* Advance to the next character */\n\n      /* Log state after advancing i */\n      probe_log_state(\"after_i_inc_due_to_backslash\",\n                      i, j, quoted_len, unquoted_len,\n                      (i < quoted_len) ? (unsigned char)quoted[i] : -1,\n                      (j < unquoted_len) ? (unsigned char)unquoted[j] : -1);\n\n      if (quoted_len == i)\n      {\n        probe_log_state(\"escaped_backslash_at_end_failure\", i, j, quoted_len, unquoted_len,\n                        -1, -1);\n        return false; /* No character after escaping backslash */\n      }\n    }\n\n    /* Log characters being compared */\n    probe_log_state(\"before_char_compare\",\n                    i, j, quoted_len, unquoted_len,\n                    (i < quoted_len) ? (unsigned char)quoted[i] : -1,\n                    (j < unquoted_len) ? (unsigned char)unquoted[j] : -1);\n\n    if (quoted[i] != unquoted[j])\n    {\n      probe_log_state(\"mismatch_found\",\n                      i, j, quoted_len, unquoted_len,\n                      (i < quoted_len) ? (unsigned char)quoted[i] : -1,\n                      (j < unquoted_len) ? (unsigned char)unquoted[j] : -1);\n      return false; /* Different characters */\n    }\n\n    /* Log successful comparison for this iteration */\n    probe_log_state(\"match_iteration_complete\",\n                    i, j, quoted_len, unquoted_len,\n                    (i < quoted_len) ? (unsigned char)quoted[i] : -1,\n                    (j < unquoted_len) ? (unsigned char)unquoted[j] : -1);\n  }\n\n  /* Log after loop exit */\n  probe_log_state(\"after_loop\",\n                  i, j, quoted_len, unquoted_len,\n                  (i < quoted_len) ? (unsigned char)quoted[i] : -1,\n                  (j < unquoted_len) ? (unsigned char)unquoted[j] : -1);\n\n  if ((quoted_len != i) || (unquoted_len != j))\n  {\n    probe_log_state(\"final_length_mismatch\", i, j, quoted_len, unquoted_len, -1, -1);\n    return false; /* The strings have different length */\n  }\n\n  probe_log_state(\"success\", i, j, quoted_len, unquoted_len, -1, -1);\n  return true;\n}\n"
}