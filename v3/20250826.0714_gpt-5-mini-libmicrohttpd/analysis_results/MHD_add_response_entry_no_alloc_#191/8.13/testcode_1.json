{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes 'char *content' and stores it into hdr->value via 'hdr->value = content;'. If hdr->value is a non-const pointer (char *), this is a violation of MISRA C 2023 Rule 8.13 because the pointer to the data is not const-qualified even though the data appears to be stored for read-only use. To comply, the parameter and the struct member should be declared as 'const char *' (e.g. const char *content and const char *value) unless the implementation intentionally modifies the pointed-to data. (If hdr->value is already declared as 'const char *' then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_entry_no_alloc_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_entry_no_alloc_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_alloc_:\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_entry_no_alloc_ code.\n",
  "test_code": "bool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n  /* Probe: open log file to record control flow and state for violation repro */\n  FILE *mhd_probe_log = NULL;\n\n  mhd_probe_log = fopen(\"/tmp/logs/1913.txt\", \"a\");\n  if (mhd_probe_log != NULL)\n    {\n      /* Log the function entry and input parameter state */\n      (void) fprintf(mhd_probe_log,\n                     \"MHD_add_response_entry_no_alloc_ entry: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n                     (void *) response,\n                     (int) kind,\n                     (void *) header,\n                     header_len,\n                     (void *) content,\n                     content_len);\n      (void) fflush(mhd_probe_log);\n    }\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    {\n      if (mhd_probe_log != NULL)\n        {\n          (void) fprintf(mhd_probe_log, \"MHD_add_response_entry_no_alloc_: allocation failed (hdr == NULL)\\n\");\n          (void) fclose(mhd_probe_log);\n        }\n      return false;\n    }\n\n  if (mhd_probe_log != NULL)\n    {\n      (void) fprintf(mhd_probe_log, \"MHD_add_response_entry_no_alloc_: allocated hdr=%p\\n\", (void *) hdr);\n      (void) fflush(mhd_probe_log);\n    }\n\n  /* Preserve original assignments */\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n\n  if (mhd_probe_log != NULL)\n    {\n      (void) fprintf(mhd_probe_log,\n                     \"MHD_add_response_entry_no_alloc_: after assign hdr=%p hdr->header=%p hdr->header_size=%zu hdr->value=%p hdr->value_size=%zu hdr->kind=%d\\n\",\n                     (void *) hdr,\n                     (void *) hdr->header,\n                     hdr->header_size,\n                     (void *) hdr->value,\n                     hdr->value_size,\n                     (int) hdr->kind);\n\n      /* Provide evidence for the Rule 8.13 scenario: show that hdr->value points to a non-const char * value passed in 'content' */\n      (void) fprintf(mhd_probe_log,\n                     \"MHD_add_response_entry_no_alloc_: note: assigned hdr->value = content (address=%p). If hdr->value is non-const char *, this indicates a potential Rule 8.13 violation when content is meant for read-only use.\\n\",\n                     (void *) content);\n\n      (void) fflush(mhd_probe_log);\n      (void) fclose(mhd_probe_log);\n    }\n\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n"
}