{
  "user_message": "An agent A claimed that the following MHD_add_response_entry_no_alloc_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_entry_no_alloc_.\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function takes 'char *content' and stores it into hdr->value via 'hdr->value = content;'. If hdr->value is a non-const pointer (char *), this is a violation of MISRA C 2023 Rule 8.13 because the pointer to the data is not const-qualified even though the data appears to be stored for read-only use. To comply, the parameter and the struct member should be declared as 'const char *' (e.g. const char *content and const char *value) unless the implementation intentionally modifies the pointed-to data. (If hdr->value is already declared as 'const char *' then no violation occurs.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_add_response_entry_no_alloc_ entry: response=0x555961415820 kind=1 header=0x5559614158e0 header_len=13 content=0x555961415900 content_len=8\nMHD_add_response_entry_no_alloc_: allocated hdr=0x555961416b10\nMHD_add_response_entry_no_alloc_: after assign hdr=0x555961416b10 hdr->header=0x5559614158e0 hdr->header_size=13 hdr->value=0x555961415900 hdr->value_size=8 hdr->kind=1\nMHD_add_response_entry_no_alloc_: note: assigned hdr->value = content (address=0x555961415900). If hdr->value is non-const char *, this indicates a potential Rule 8.13 violation when content is meant for read-only use.\nMHD_add_response_entry_no_alloc_ entry: response=0x555961415820 kind=1 header=0x555961415b00 header_len=13 content=0x555961415b20 content_len=8\nMHD_add_response_entry_no_alloc_: allocated hdr=0x555961415b40\nMHD_add_response_entry_no_alloc_: after assign hdr=0x555961415b40 hdr->header=0x555961415b00 hdr->header_size=13 hdr->value=0x555961415b20 hdr->value_size=8 hdr->kind=1\nMHD_add_response_entry_no_alloc_: note: assigned hdr->value = content (address=0x555961415b20). If hdr->value is non-const char *, this indicates a potential Rule 8.13 violation when content is meant for read-only use.\nMHD_add_response_entry_no_alloc_ entry: response=0x555961415820 kind=1 header=0x555961415900 header_len=13 content=0x5559614158e0 content_len=8\nMHD_add_response_entry_no_alloc_: allocated hdr=0x555961415b80\nMHD_add_response_entry_no_alloc_: after assign hdr=0x555961415b80 hdr->header=0x555961415900 hdr->header_size=13 hdr->value=0x5559614158e0 hdr->value_size=8 hdr->kind=1\nMHD_add_response_entry_no_alloc_: note: assigned hdr->value = content (address=0x5559614158e0). If hdr->value is non-const char *, this indicates a potential Rule 8.13 violation when content is meant for read-only use.\nMHD_add_response_entry_no_alloc_ entry: response=0x555961415820 kind=1 header=0x5559614158e0 header_len=4 content=0x555961415c00 content_len=29\nMHD_add_response_entry_no_alloc_: allocated hdr=0x555961415d50\nMHD_add_response_entry_no_alloc_: after assign hdr=0x555961415d50 hdr->header=0x5559614158e0 hdr->header_size=4 hdr->value=0x555961415c00 hdr->value_size=29 hdr->kind=1\nMHD_add_response_entry_no_alloc_: note: assigned hdr->value = content (address=0x555961415c00). If hdr->value is non-const char *, this indicates a potential Rule 8.13 violation when content is meant for read-only use.\nMHD_add_response_entry_no_alloc_ entry: response=0x555961415820 kind=1 header=0x5559614158e0 header_len=4 content=0x555961415c00 content_len=29\nMHD_add_response_entry_no_alloc_: allocated hdr=0x555961415d50\nMHD_add_response_entry_no_alloc_: after assign hdr=0x555961415d50 hdr->header=0x5559614158e0 hdr->header_size=4 hdr->value=0x555961415c00 hdr->value_size=29 hdr->kind=1\nMHD_add_response_entry_no_alloc_: note: assigned hdr->value = content (address=0x555961415c00). If hdr->value is non-const char *, this indicates a potential Rule 8.13 violation when content is meant for read-only use.\nMHD_add_response_entry_no_alloc_ entry: response=0x555961415820 kind=1 header=0x5559614158e0 header_len=17 content=0x555961415900 content_len=7\nMHD_add_response_entry_no_alloc_: allocated hdr=0x555961415d50\nMHD_add_response_entry_no_alloc_: after assign hdr=0x555961415d50 hdr->header=0x5559614158e0 hdr->header_size=17 hdr->value=0x555961415900 hdr->value_size=7 hdr->kind=1\nMHD_add_response_entry_no_alloc_: note: assigned hdr->value = content (address=0x555961415900). If hdr->value is non-const char *, this indicates a potential Rule 8.13 violation when content is meant for read-only use.\nMHD_add_response_entry_no_alloc_ entry: response=0x55ca1242f0c0 kind=1 header=0x55ca1242f200 header_len=7 content=0x55ca1242f220 content_len=20\nMHD_add_response_entry_no_alloc_: allocated hdr=0x55ca12430430\nMHD_add_response_entry_no_alloc_: after assign hdr=0x55ca12430430 hdr->header=0x55ca1242f200 hdr->header_size=7 hdr->value=0x55ca1242f220 hdr->value_size=20 hdr->kind=1\nMHD_add_response_entry_no_alloc_: note: assigned hdr->value = content (address=0x55ca1242f220). If hdr->value is non-const char *, this indicates a po\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 recommends that pointer types should be const-qualified when the pointed-to object is not modified through that pointer. The snippet shows char *header and char *content being stored into hdr->header and hdr->value. Whether this is a true Rule 8.13 violation cannot be determined from this function alone because it depends on two things that are not present in the snippet: (1) the declared types of struct MHD_HTTP_Res_Header::header and ::value (if they are already const char * then there is no violation), and (2) whether the pointed-to buffers are ever modified later via those pointers (if they are modified, non-const is justified). Therefore Agent A\u2019s report is only potentially correct \u2014 it is not provably correct from the code shown. To resolve: inspect the struct field declarations and the code paths that use hdr->header/hdr->value. If the struct fields are non-const and the data are used read-only, change the parameter types and the struct members to const char * (or otherwise justify the non-const), which will satisfy Rule 8.13."
}