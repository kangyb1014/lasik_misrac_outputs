{
  "user_message": "An agent A claimed that the following MHD_add_response_entry_no_alloc_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_entry_no_alloc_.\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'char *header' (and the struct member 'hdr->header') are non-const pointers that are assigned but not modified. Since the code merely stores a pointer to existing data rather than modifying it, the pointer should be const-qualified (e.g. const char *header and const char *hdr->header). Thus the assignment 'hdr->header = header;' represents a violation of MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nEVENT: ENTRY\n response=0x5637420b9820 kind=1 header=0x5637420b98e0 header_len=13 content=0x5637420b9900 content_len=8 hdr=(nil)\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a1'\n----\nEVENT: ALLOCATED\n response=0x5637420b9820 kind=1 header=0x5637420b98e0 header_len=13 content=0x5637420b9900 content_len=8 hdr=0x5637420b9b00\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a1'\n hdr->header=(nil) hdr->header_size=0 hdr->value=(nil) hdr->value_size=0 hdr->kind=0\n----\nEVENT: ASSIGNED_TO_HDR\n response=0x5637420b9820 kind=1 header=0x5637420b98e0 header_len=13 content=0x5637420b9900 content_len=8 hdr=0x5637420b9b00\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a1'\n hdr->header=0x5637420b98e0 hdr->header_size=13 hdr->value=0x5637420b9900 hdr->value_size=8 hdr->kind=1\n----\nEVENT: RETURN_SUCCESS\n response=0x5637420b9820 kind=1 header=0x5637420b98e0 header_len=13 content=0x5637420b9900 content_len=8 hdr=0x5637420b9b00\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a1'\n hdr->header=0x5637420b98e0 hdr->header_size=13 hdr->value=0x5637420b9900 hdr->value_size=8 hdr->kind=1\n----\nEVENT: ENTRY\n response=0x5637420b9820 kind=1 header=0x5637420b9b40 header_len=13 content=0x5637420b9b60 content_len=8 hdr=(nil)\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a2'\n----\nEVENT: ALLOCATED\n response=0x5637420b9820 kind=1 header=0x5637420b9b40 header_len=13 content=0x5637420b9b60 content_len=8 hdr=0x5637420b9b80\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a2'\n hdr->header=(nil) hdr->header_size=0 hdr->value=(nil) hdr->value_size=0 hdr->kind=0\n----\nEVENT: ASSIGNED_TO_HDR\n response=0x5637420b9820 kind=1 header=0x5637420b9b40 header_len=13 content=0x5637420b9b60 content_len=8 hdr=0x5637420b9b80\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a2'\n hdr->header=0x5637420b9b40 hdr->header_size=13 hdr->value=0x5637420b9b60 hdr->value_size=8 hdr->kind=1\n----\nEVENT: RETURN_SUCCESS\n response=0x5637420b9820 kind=1 header=0x5637420b9b40 header_len=13 content=0x5637420b9b60 content_len=8 hdr=0x5637420b9b80\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a2'\n hdr->header=0x5637420b9b40 hdr->header_size=13 hdr->value=0x5637420b9b60 hdr->value_size=8 hdr->kind=1\n----\nEVENT: ENTRY\n response=0x5637420b9820 kind=1 header=0x5637420b9900 header_len=13 content=0x5637420b98e0 content_len=8 hdr=(nil)\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a3'\n----\nEVENT: ALLOCATED\n response=0x5637420b9820 kind=1 header=0x5637420b9900 header_len=13 content=0x5637420b98e0 content_len=8 hdr=0x5637420b9bc0\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a3'\n hdr->header=(nil) hdr->header_size=0 hdr->value=(nil) hdr->value_size=0 hdr->kind=0\n----\nEVENT: ASSIGNED_TO_HDR\n response=0x5637420b9820 kind=1 header=0x5637420b9900 header_len=13 content=0x5637420b98e0 content_len=8 hdr=0x5637420b9bc0\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a3'\n hdr->header=0x5637420b9900 hdr->header_size=13 hdr->value=0x5637420b98e0 hdr->value_size=8 hdr->kind=1\n----\nEVENT: RETURN_SUCCESS\n response=0x5637420b9820 kind=1 header=0x5637420b9900 header_len=13 content=0x5637420b98e0 content_len=8 hdr=0x5637420b9bc0\n header_sample_len=13 header_sample='Header-Type-A'\n content_sample_len=8 content_sample='value-a3'\n hdr->header=0x5637420b9900 hdr->header_size=13 hdr->value=0x5637420b98e0 hdr->value_size=8 hdr->kind=1\n----\nEVENT: ENTRY\n response=0x5637420b9820 kind=1 header=0x5637420b98e0 header_len=4 content=0x5637420b9c40 content_len=29 hdr=(nil)\n header_sample_len=4 header_sample='Date'\n content_sample_len=29 content_sample='Wed, 01 Apr 2015 00:00:00 GMT'\n----\nEVENT: ALLOCATED\n response\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s finding is plausible and, on the evidence shown, correct. In the body of MHD_add_response_entry_no_alloc_ the parameters header and content are not modified \u2014 they are only stored in the newly allocated hdr structure. Under MISRA C:2023 Rule 8.13 (\u201cA pointer should point to a const-qualified type whenever possible\u201d) these pointers (and the corresponding struct members) should be const-qualified when the pointed-to objects are not intended to be modified.\n\nWhether this is an actual MISRA violation for the whole project depends on the wider usage of those struct members: if other code later modifies the buffers via hdr->header or hdr->value (or if ownership semantics require non-const pointers), then const cannot be used and there is no violation. With only the provided code and execution log (which show no writes), the safest conclusion is that the report is correct: the parameters and the hdr members could be const-qualified and therefore the current code violates Rule 8.13 unless there is a project-level reason to keep them mutable.\n\nRecommendation: if the stored data are intended to be read-only, change the function signature to use const char *header, const char *content and change the struct members to const char *header and const char *value. If other code must modify those buffers, document and justify that reason to avoid a MISRA violation."
}