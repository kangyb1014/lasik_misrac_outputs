{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The check uses *ppos + el_size which can overflow size_t and thus be bypassed, allowing subsequent memcpy calls to write beyond buf. Example: buf_size == 100, *ppos == SIZE_MAX - 10, el_size == 20. Then *ppos + el_size wraps to 9, the test (100 < 9) is false so the function proceeds and a memcpy(buf + *ppos, ...) writes past the end of buf. Therefore the string-handling calls can access beyond the referenced object bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <limits.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/219.txt */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Log entry state */\n  mhd_log_probe(\"add_user_headers: entry: buf=%p, ppos=%p(*ppos=%zu), buf_size=%zu, filter_transf_enc=%d, filter_content_len=%d, add_close=%d, add_keep_alive=%d, r=%p, r->flags_auto=0x%zx, r->flags=0x%zx\",\n                (void *)buf, (void *)ppos, (ppos ? *ppos : (size_t)0), buf_size,\n                (int)filter_transf_enc, (int)filter_content_len,\n                (int)add_close, (int)add_keep_alive, (void *)r,\n                (r ? r->flags_auto : (size_t)0), (r ? r->flags : (size_t)0));\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n\n    mhd_log_probe(\"header loop: hdr=%p, kind=%d, header_size=%zu, value_size=%zu, initial_pos=%zu\",\n                  (void *)hdr, (int)hdr->kind, hdr->header_size, hdr->value_size, initial_pos);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        mhd_log_probe(\"skipping Transfer-Encoding header at hdr=%p\", (void *)hdr);\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        mhd_log_probe(\"skipping Content-Length header at hdr=%p, new filter_transf_enc=%d\", (void *)hdr, (int)filter_transf_enc);\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n\n    /* Log computed element size and check for potential overflow */\n    {\n      size_t sum = *ppos + el_size;\n      bool overflow = (*ppos > (size_t) (SIZE_MAX - el_size));\n      mhd_log_probe(\"checking space: *ppos=%zu, el_size=%zu, sum_mod=%zu, overflow=%d, buf_size=%zu, condition(buf_size < sum)=%d\",\n                    *ppos, el_size, sum, (int)overflow, buf_size, (int)(buf_size < sum));\n    }\n\n    if (buf_size < *ppos + el_size)\n    {\n      mhd_log_probe(\"insufficient space at top-level check: buf_size=%zu, *ppos=%zu, el_size=%zu, returning false\",\n                    buf_size, *ppos, el_size);\n      return false;\n    }\n\n    /* Log before memcpy of header */\n    mhd_log_probe(\"memcpy header: dest=buf+%zu (%p), src=hdr->header=%p, n=%zu\",\n                  *ppos, (void *)(buf + *ppos), (void *)hdr->header, hdr->header_size);\n\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        size_t sum2 = initial_pos + el_size;\n        bool overflow2 = (initial_pos > (size_t)(SIZE_MAX - el_size));\n        mhd_log_probe(\"add_close branch: initial_pos=%zu, added_len=%zu, el_size=%zu, sum2_mod=%zu, overflow2=%d, buf_size=%zu, condition(buf_size < sum2)=%d\",\n                      initial_pos, (size_t)MHD_STATICSTR_LEN_(\"close, \"), el_size, sum2, (int)overflow2, buf_size, (int)(buf_size < sum2));\n\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_log_probe(\"insufficient space in add_close branch: buf_size=%zu, initial_pos=%zu, el_size=%zu, returning false\",\n                        buf_size, initial_pos, el_size);\n          return false;\n        }\n        mhd_log_probe(\"memcpy close: dest=buf+%zu (%p), src=<literal \\\"close, \\\">, n=%zu\",\n                      *ppos, (void *)(buf + *ppos), (size_t)MHD_STATICSTR_LEN_(\"close, \"));\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        size_t sum2 = initial_pos + el_size;\n        bool overflow2 = (initial_pos > (size_t)(SIZE_MAX - el_size));\n        mhd_log_probe(\"add_keep_alive branch: initial_pos=%zu, added_len=%zu, el_size=%zu, sum2_mod=%zu, overflow2=%d, buf_size=%zu, condition(buf_size < sum2)=%d\",\n                      initial_pos, (size_t)MHD_STATICSTR_LEN_(\"Keep-Alive, \"), el_size, sum2, (int)overflow2, buf_size, (int)(buf_size < sum2));\n\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_log_probe(\"insufficient space in add_keep_alive branch: buf_size=%zu, initial_pos=%zu, el_size=%zu, returning false\",\n                        buf_size, initial_pos, el_size);\n          return false;\n        }\n        mhd_log_probe(\"memcpy keep-alive: dest=buf+%zu (%p), src=<literal \\\"Keep-Alive, \\\">, n=%zu\",\n                      *ppos, (void *)(buf + *ppos), (size_t)MHD_STATICSTR_LEN_(\"Keep-Alive, \"));\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n    {\n      mhd_log_probe(\"memcpy value: dest=buf+%zu (%p), src=hdr->value=%p, n=%zu\",\n                    *ppos, (void *)(buf + *ppos), (void *)hdr->value, hdr->value_size);\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    }\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n\n    mhd_log_probe(\"after header: new *ppos=%zu, expected=%zu\", *ppos, initial_pos + el_size);\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  mhd_log_probe(\"add_user_headers: exit true: final *ppos=%zu\", (ppos ? *ppos : (size_t)0));\n  return true;\n}\n"
}