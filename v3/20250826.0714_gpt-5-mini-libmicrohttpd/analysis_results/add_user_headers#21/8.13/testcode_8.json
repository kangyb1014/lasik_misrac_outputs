{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes hdr->header (a non-const pointer to header bytes) into a string-comparison using a string literal (MHD_HTTP_HEADER_CONTENT_LENGTH). The header data is only read, not modified, so the member should be declared as pointing to const-qualified data (e.g. const char *header). Because hdr->header is not const-qualified even though it could and should be, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/213.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe logger: append a formatted message to /tmp/logs/213.txt */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/213.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  mhd_log_probe (\"add_user_headers: entry r=%p flags_auto=0x%08x flags=0x%08x filter_transf_enc=%d filter_content_len=%d add_close=%d add_keep_alive=%d *ppos=%zu buf_size=%zu\",\n                 (void *) r,\n                 (unsigned) r->flags_auto,\n                 (unsigned) r->flags,\n                 (int) filter_transf_enc,\n                 (int) filter_content_len,\n                 (int) add_close,\n                 (int) add_keep_alive,\n                 (unsigned long) *ppos,\n                 (unsigned long) buf_size);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n\n    mhd_log_probe (\"iter header: hdr=%p kind=%d header_size=%zu value_size=%zu\",\n                   (void *) hdr,\n                   (int) hdr->kind,\n                   (unsigned long) hdr->header_size,\n                   (unsigned long) hdr->value_size);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n    {\n      mhd_log_probe (\"skipping: header kind mismatch (expected %d)\", (int) MHD_HEADER_KIND);\n      continue;\n    }\n\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING);\n      bool size_match = (expected_len == hdr->header_size);\n      bool str_match = false;\n\n      if (size_match)\n      {\n        /* Perform the same case-insensitive binary comparison used by original code */\n        str_match = (0 != MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                                        hdr->header, hdr->header_size));\n      }\n\n      mhd_log_probe (\"compare Transfer-Encoding: expected_len=%zu hdr_len=%zu header=\\\"%.*s\\\" size_match=%d str_match=%d\",\n                     (unsigned long) expected_len,\n                     (unsigned long) hdr->header_size,\n                     (int) hdr->header_size,\n                     hdr->header ? hdr->header : \"\",\n                     (int) size_match,\n                     (int) str_match);\n\n      if (size_match && str_match)\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        mhd_log_probe (\"filtered out Transfer-Encoding header at hdr=%p\", (void *) hdr);\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH);\n      bool size_match = (expected_len == hdr->header_size);\n      bool str_match = false;\n\n      if (size_match)\n      {\n        str_match = (0 != MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                        hdr->header, hdr->header_size));\n      }\n\n      mhd_log_probe (\"compare Content-Length: expected_len=%zu hdr_len=%zu header=\\\"%.*s\\\" size_match=%d str_match=%d\",\n                     (unsigned long) expected_len,\n                     (unsigned long) hdr->header_size,\n                     (int) hdr->header_size,\n                     hdr->header ? hdr->header : \"\",\n                     (int) size_match,\n                     (int) str_match);\n\n      if (size_match && str_match)\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        mhd_log_probe (\"filtered out Content-Length header at hdr=%p, new filter_transf_enc=%d\", (void *) hdr, (int) filter_transf_enc);\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      mhd_log_probe (\"buffer too small: need=%zu available=%zu *ppos=%zu initial_pos=%zu returning false\",\n                     (unsigned long) el_size,\n                     (unsigned long) (buf_size - *ppos),\n                     (unsigned long) *ppos,\n                     (unsigned long) initial_pos);\n      return false;\n    }\n\n    mhd_log_probe (\"writing header bytes: hdr->header_size=%zu copying to buf+%zu\",\n                   (unsigned long) hdr->header_size,\n                   (unsigned long) *ppos);\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      mhd_log_probe (\"Connection header branch: add_close=%d add_keep_alive=%d hdr=\\\"%.*s\\\"\",\n                     (int) add_close,\n                     (int) add_keep_alive,\n                     (int) hdr->header_size,\n                     hdr->header ? hdr->header : \"\");\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_log_probe (\"buffer too small for Connection: need=%zu available=%zu returning false\",\n                         (unsigned long) el_size,\n                         (unsigned long) (buf_size - initial_pos));\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n        mhd_log_probe (\"added token 'close, ' at pos now %zu\", (unsigned long) *ppos);\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_log_probe (\"buffer too small for Connection Keep-Alive: need=%zu available=%zu returning false\",\n                         (unsigned long) el_size,\n                         (unsigned long) (buf_size - initial_pos));\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        mhd_log_probe (\"added token 'Keep-Alive, ' at pos now %zu\", (unsigned long) *ppos);\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n    {\n      mhd_log_probe (\"writing header value: value_size=%zu to buf+%zu header_value=\\\"%.*s\\\"\",\n                     (unsigned long) hdr->value_size,\n                     (unsigned long) *ppos,\n                     (int) hdr->value_size,\n                     hdr->value ? hdr->value : \"\");\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    }\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_log_probe (\"finished header iteration: initial_pos=%zu el_size=%zu new_ppos=%zu\",\n                   (unsigned long) initial_pos,\n                   (unsigned long) el_size,\n                   (unsigned long) *ppos);\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  mhd_log_probe (\"add_user_headers: exit returning true final_ppos=%zu\", (unsigned long) *ppos);\n  return true;\n}\n"
}