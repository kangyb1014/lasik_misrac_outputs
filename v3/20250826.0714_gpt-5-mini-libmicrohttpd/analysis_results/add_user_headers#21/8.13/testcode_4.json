{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes header name data and a string literal to a case-insensitive compare. If the struct member hdr->header is declared as a non-const pointer (e.g. char *header) or the macro MHD_HTTP_HEADER_TRANSFER_ENCODING expands to a non-const char array/pointer, this violates MISRA C 2023 Rule 8.13 because these pointers point to objects that are not modified and therefore should be const-qualified (const char *). For example, if struct MHD_HTTP_Res_Header declares header as 'char *header' (not 'const char *header'), that is a rule violation. Recommended fix: declare header and static string macros as const char * (and ensure comparison functions accept const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/213.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Probe helpers: write append-only log entries to /tmp/logs/213.txt */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/213.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic void\nlog_header_blob (const char *label, const char *buf, size_t len)\n{\n  FILE *f = fopen(\"/tmp/logs/213.txt\", \"a\");\n  if (NULL == f)\n    return;\n  size_t i, cap = (len > 256u) ? 256u : len;\n  fprintf (f, \"%s: len=%zu, data=\\\"\", label, len);\n  for (i = 0; i < cap; ++i)\n  {\n    unsigned char c = (unsigned char) buf[i];\n    if (c >= 32 && c < 127)\n      fputc (c, f);\n    else\n      fprintf (f, \"\\\\x%02X\", c);\n  }\n  if (cap < len)\n    fprintf (f, \"...(+%zu bytes)\", len - cap);\n  fprintf (f, \"\\\"\");\n  fputs (\"\\n\", f);\n  fclose (f);\n}\n\n/* Modified add_user_headers with probes. Original logic preserved. */\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Log entry and initial state */\n  log_probe (\"add_user_headers: entry: response=%p, buf=%p, *ppos=%zu, buf_size=%zu\",\n             (void *) response, (void *) buf, (NULL != ppos) ? *ppos : 0u, buf_size);\n  log_probe (\"flags_auto=0x%08X, flags=0x%08X, filter_transf_enc=%d, filter_content_len=%d, add_close=%d, add_keep_alive=%d\",\n             (unsigned) r->flags_auto, (unsigned) r->flags, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  log_probe (\"post-filter adjust: filter_transf_enc=%d, filter_content_len=%d, add_close=%d, add_keep_alive=%d\",\n             filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n\n    /* Log current header pointer and basic sizes */\n    log_probe (\"iter header: hdr=%p, kind=%d, hdr->header=%p, hdr->header_size=%zu, hdr->value=%p, hdr->value_size=%zu\",\n               (void *) hdr, (int) hdr->kind, (void *) hdr->header, hdr->header_size, (void *) hdr->value, hdr->value_size);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        log_probe (\"filter_transf_enc matched header at hdr=%p; skipping header\", (void *) hdr);\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n      else\n      {\n        log_probe (\"filter_transf_enc: header did not match Transfer-Encoding\");\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        log_probe (\"filter_content_len matched header at hdr=%p; skipping header\", (void *) hdr);\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n      else\n      {\n        log_probe (\"filter_content_len: header did not match Content-Length\");\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      log_probe (\"buffer too small: buf_size=%zu, *ppos=%zu, needed=%zu; returning false\",\n                 buf_size, *ppos, el_size);\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      log_probe (\"connection header handling: add_close=%d, add_keep_alive=%d, initial_pos=%zu, current *ppos=%zu\",\n                 add_close, add_keep_alive, initial_pos, *ppos);\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          log_probe (\"buffer too small for adding \\\"close, \\\" token: buf_size=%zu, initial_pos=%zu, el_size=%zu; returning false\",\n                     buf_size, initial_pos, el_size);\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n        log_probe (\"inserted \\\"close, \\\" token, new *ppos=%zu\", *ppos);\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          log_probe (\"buffer too small for adding \\\"Keep-Alive, \\\" token: buf_size=%zu, initial_pos=%zu, el_size=%zu; returning false\",\n                     buf_size, initial_pos, el_size);\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        log_probe (\"inserted \\\"Keep-Alive, \\\" token, new *ppos=%zu\", *ppos);\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n\n    /* Log the header and value blobs that were just copied into the buffer (capped) */\n    log_header_blob (\"header_written\", hdr->header, hdr->header_size);\n    log_header_blob (\"value_written\", hdr->value, hdr->value_size);\n\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n\n    log_probe (\"completed header iteration: hdr=%p, new *ppos=%zu, expected_end=%zu\",\n               (void *) hdr, *ppos, initial_pos + el_size);\n  }\n\n  log_probe (\"add_user_headers: exit returning true, final *ppos=%zu\", *ppos);\n  return true;\n}\n"
}