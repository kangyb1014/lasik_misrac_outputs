{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns to the value parameter 'filter_content_len' (filter_content_len = false;). Rule 17.8 forbids modifying function parameters (except modifying the object pointed to by a pointer parameter); here a non-pointer parameter is being written, so this violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/217.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "static void\nmhd_log_probe (const char *where,\n               const struct MHD_Response *r,\n               bool filter_transf_enc,\n               bool filter_content_len,\n               bool add_close,\n               bool add_keep_alive,\n               size_t ppos)\n{\n  FILE *f = fopen (\"/tmp/logs/217.txt\", \"a\");\n  if (!f)\n    return;\n  /* Print a compact snapshot of relevant state. Cast flags to unsigned long\n     to avoid depending on concrete type width in the log format. */\n  fprintf (f, \"%s: r=%p flags=0x%lx flags_auto=0x%lx filter_transf_enc=%d filter_content_len=%d add_close=%d add_keep_alive=%d ppos=%zu\\n\",\n           where,\n           (const void *) r,\n           r ? (unsigned long) r->flags : 0UL,\n           r ? (unsigned long) r->flags_auto : 0UL,\n           (int) filter_transf_enc,\n           (int) filter_content_len,\n           (int) add_close,\n           (int) add_keep_alive,\n           ppos);\n  fclose (f);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Log function entry and initial state */\n  mhd_log_probe (\"enter\", r, filter_transf_enc, filter_content_len,\n                 add_close, add_keep_alive, *ppos);\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)) {\n    /* Log the reason for changing the filter flag */\n    mhd_log_probe (\"no_has_trans_enc_chunked\", r, filter_transf_enc,\n                   filter_content_len, add_close, add_keep_alive, *ppos);\n    filter_transf_enc = false;   /* No such header */\n    mhd_log_probe (\"after_set_filter_transf_enc_false\", r, filter_transf_enc,\n                   filter_content_len, add_close, add_keep_alive, *ppos);\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) {\n    /* Log the assignment to the non-pointer parameter filter_content_len */\n    mhd_log_probe (\"no_has_content_length_before_set\", r, filter_transf_enc,\n                   filter_content_len, add_close, add_keep_alive, *ppos);\n    filter_content_len = false;  /* No such header */\n    mhd_log_probe (\"no_has_content_length_after_set\", r, filter_transf_enc,\n                   filter_content_len, add_close, add_keep_alive, *ppos);\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    mhd_log_probe (\"no_has_connection_hdr_before\", r, filter_transf_enc,\n                   filter_content_len, add_close, add_keep_alive, *ppos);\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n    mhd_log_probe (\"no_has_connection_hdr_after\", r, filter_transf_enc,\n                   filter_content_len, add_close, add_keep_alive, *ppos);\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_log_probe (\"has_connection_close_before\", r, filter_transf_enc,\n                   filter_content_len, add_close, add_keep_alive, *ppos);\n    add_close = false;          /* \"close\" token was already set */\n    mhd_log_probe (\"has_connection_close_after\", r, filter_transf_enc,\n                   filter_content_len, add_close, add_keep_alive, *ppos);\n  }\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Log detection of Transfer-Encoding and update of filter flag */\n        mhd_log_probe (\"found_transfer_encoding_before\", r, filter_transf_enc,\n                       filter_content_len, add_close, add_keep_alive, *ppos);\n        filter_transf_enc = false; /* There is the only one such header */\n        mhd_log_probe (\"found_transfer_encoding_after\", r, filter_transf_enc,\n                       filter_content_len, add_close, add_keep_alive, *ppos);\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Log matching of Content-Length header and the code path that\n           mutates the transf_enc filter (this is relevant to reproduce the\n           reported behavior) */\n        mhd_log_probe (\"matched_content_length_before\", r, filter_transf_enc,\n                       filter_content_len, add_close, add_keep_alive, *ppos);\n\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n\n        mhd_log_probe (\"matched_content_length_after\", r, filter_transf_enc,\n                       filter_content_len, add_close, add_keep_alive, *ppos);\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size) {\n      mhd_log_probe (\"buffer_overflow_before_return_false\", r, filter_transf_enc,\n                     filter_content_len, add_close, add_keep_alive, *ppos);\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size) {\n          mhd_log_probe (\"buffer_overflow_conn_close_before_return_false\", r,\n                         filter_transf_enc, filter_content_len, add_close,\n                         add_keep_alive, *ppos);\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size) {\n          mhd_log_probe (\"buffer_overflow_conn_keepalive_before_return_false\", r,\n                         filter_transf_enc, filter_content_len, add_close,\n                         add_keep_alive, *ppos);\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n      mhd_log_probe (\"after_handling_connection_tokens\", r, filter_transf_enc,\n                     filter_content_len, add_close, add_keep_alive, *ppos);\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  mhd_log_probe (\"exit_true\", r, filter_transf_enc, filter_content_len,\n                 add_close, add_keep_alive, *ppos);\n  return true;\n}\n"
}