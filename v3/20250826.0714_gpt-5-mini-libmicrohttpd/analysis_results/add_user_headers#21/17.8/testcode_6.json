{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'add_close = false;' modifies the non\u2011pointer function parameter add_close. Rule 17.8 prohibits modifying function parameters (the pointer-target exception does not apply here). Use a local copy (e.g. bool local_add_close = add_close;) and mutate that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/217.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/217.txt */\nstatic void\nmhd_log_probe_217 (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/217.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Log entry and initial parameter/state snapshot */\n  mhd_log_probe_217(\n    \"enter add_user_headers: buf=%p ppos=%p *ppos=%zu buf_size=%zu filter_transf_enc=%d filter_content_len=%d add_close=%d add_keep_alive=%d r=%p\",\n    (void*)buf, (void*)ppos, (ppos ? *ppos : (size_t)0), buf_size,\n    filter_transf_enc ? 1 : 0, filter_content_len ? 1 : 0,\n    add_close ? 1 : 0, add_keep_alive ? 1 : 0, (void*)r);\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n  {\n    filter_transf_enc = false;   /* No such header */\n    mhd_log_probe_217(\"filter_transf_enc cleared because no TRANS_ENC_CHUNKED (flags_auto=0x%x)\", (unsigned)r->flags_auto);\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  {\n    filter_content_len = false;  /* No such header */\n    mhd_log_probe_217(\"filter_content_len cleared because no CONTENT_LENGTH (flags_auto=0x%x)\", (unsigned)r->flags_auto);\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    /* Violation scenario: parameter modification of add_close and add_keep_alive */\n    mhd_log_probe_217(\"No Connection header present: about to modify parameters add_close=%d->false add_keep_alive=%d->false (was add_close=%d add_keep_alive=%d)\",\n                       0, 0, add_close ? 1 : 0, add_keep_alive ? 1 : 0);\n\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n\n    mhd_log_probe_217(\"After modification: add_close=%d add_keep_alive=%d\", add_close ? 1 : 0, add_keep_alive ? 1 : 0);\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_log_probe_217(\"Connection header already contains 'close' token: about to set add_close=false (was add_close=%d)\", add_close ? 1 : 0);\n    add_close = false;          /* \"close\" token was already set */\n    mhd_log_probe_217(\"After modification: add_close=%d\", add_close ? 1 : 0);\n  }\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n\n    mhd_log_probe_217(\"processing header: header_ptr=%p header_size=%zu value_size=%zu kind=%d\",\n                       (void*)hdr->header, hdr->header_size, hdr->value_size, hdr->kind);\n\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        mhd_log_probe_217(\"Found Transfer-Encoding header: clearing filter_transf_enc and skipping header\");\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        mhd_log_probe_217(\"Found Content-Length header: skipping header and setting filter_transf_enc=%d (r->flags=0x%x)\",\n                           filter_transf_enc ? 1 : 0, (unsigned)r->flags);\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      mhd_log_probe_217(\"buffer too small: buf_size=%zu *ppos=%zu needed_el_size=%zu -> returning false\",\n                         buf_size, *ppos, el_size);\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_log_probe_217(\"buffer too small when adding 'close, ': buf_size=%zu initial_pos=%zu el_size=%zu -> returning false\",\n                             buf_size, initial_pos, el_size);\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n        mhd_log_probe_217(\"wrote token 'close, ' at pos=%zu\", *ppos - MHD_STATICSTR_LEN_(\"close, \"));\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_log_probe_217(\"buffer too small when adding 'Keep-Alive, ': buf_size=%zu initial_pos=%zu el_size=%zu -> returning false\",\n                             buf_size, initial_pos, el_size);\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        mhd_log_probe_217(\"wrote token 'Keep-Alive, ' at pos=%zu\", *ppos - MHD_STATICSTR_LEN_(\"Keep-Alive, \"));\n      }\n\n      mhd_log_probe_217(\"About to clear connection tokens (parameters): add_close=%d add_keep_alive=%d -> both false\",\n                         add_close ? 1 : 0, add_keep_alive ? 1 : 0);\n      add_close = false;\n      add_keep_alive = false;\n      mhd_log_probe_217(\"After clearing: add_close=%d add_keep_alive=%d\", add_close ? 1 : 0, add_keep_alive ? 1 : 0);\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n    mhd_log_probe_217(\"finished header: new *ppos=%zu expected=%zu\", *ppos, initial_pos + el_size);\n  }\n\n  mhd_log_probe_217(\"exit add_user_headers: returning true final *ppos=%zu\", *ppos);\n  return true;\n}\n"
}