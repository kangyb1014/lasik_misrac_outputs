{
  "user_message": "An agent A claimed that the following send_upgrade_required code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of send_upgrade_required.\n```c\nstatic enum MHD_Result\nsend_upgrade_required (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (UPGRADE_REQUIRED_PAGE),\n                                            (const void *)\n                                            UPGRADE_REQUIRED_PAGE);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION,\n                               WS_SEC_WEBSOCKET_VERSION))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_UPGRADE_REQUIRED, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'con' is declared as 'struct MHD_Connection *con' but the function body does not modify the object pointed to. Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (i.e. 'const struct MHD_Connection *con'), so the current non-const parameter is a violation unless a non-const API (e.g. MHD_queue_response) requires a mutable pointer.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not sufficiently grounded. Rule 8.13 says a pointer should point to a const-qualified type when it is possible to do so, but you must consider the called APIs. In the snippet 'con' is not modified directly in the function body, but it is passed to MHD_queue_response (and possibly other library functions). If those library functions require a non-const 'struct MHD_Connection *' (i.e. their prototype expects a mutable pointer or will modify the connection), then you cannot change the parameter here to 'const struct MHD_Connection *' without either breaking the call or performing a cast (which would defeat the purpose and may itself violate MISRA). Therefore the agent A\u2019s claim of a Rule 8.13 violation is not demonstrably correct based on the provided code alone \u2014 you must inspect the prototypes of MHD_queue_response (and any other functions that receive 'con') to decide whether 'con' can be const. If those APIs accept a const pointer, then the parameter should be changed and a violation would exist; otherwise no violation."
}