{
  "user_message": "An agent A claimed that the following MHD_upgraded_connection_mark_app_closed_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_upgraded_connection_mark_app_closed_.\n```c\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation scenario: MHD_itc_activate_ is declared with a non-const pointer parameter for the string argument (for example: int MHD_itc_activate_(struct MHD_ITC *itc, char *mode)). In that case the call MHD_itc_activate_(daemon->itc, \"r\") passes a string literal (which should be treated as const) to a non-const char* parameter, violating MISRA C 2023 Rule 8.13. Fix by declaring the parameter as const char *mode (or otherwise ensuring the pointer points to a const-qualified type). Note: if the function prototype already uses const char * for the second parameter, then there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not deterministically correct given the code shown. The snippet itself does not reveal the prototype of MHD_itc_activate_. MISRA C 2023 Rule 8.13 asks that pointers should point to const-qualified types where possible. If MHD_itc_activate_ is declared as taking a non-const char * (e.g. int MHD_itc_activate_(struct MHD_ITC *itc, char *mode)), then calling MHD_itc_activate_(daemon->itc, \"r\") (a string literal) would indicate the API should instead take a const char * and thus would be a valid MISRA 8.13 concern. If, however, the prototype already declares the parameter as const char *mode, there is no violation. Note also that changing the call-site by casting away const would be the wrong fix under MISRA; the correct fix is to change the function declaration to take const char * (or otherwise ensure the pointer parameter is const-qualified). The rest of the shown code (the const pointer qualifier on daemon: struct MHD_Daemon *const daemon) is not a Rule 8.13 violation because the object pointed to is intentionally modified later, so it cannot be const-qualified."
}