{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_upgraded_connection_mark_app_closed_:\n```c\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no explicit use of compiler language extensions in the provided fragment. Specifically:\n- No GCC/Clang-specific constructs are present (no __attribute__, __asm__, __builtin_*, typeof, statement-expressions ({ ... }), nested functions, labels-as-values, or vector extensions).\n- Preprocessor use (#if defined(...)) is standard preprocessor behavior, not an extension.\n- The pointer declaration (struct MHD_Daemon *const daemon = ...) and boolean assignments (connection->urh->was_closed = true;) use standard C constructs (the true/false identifiers are from stdbool.h in standard C; their use is not a compiler extension in source code).\n- String literal concatenation across source lines and the backslash line-continuation in the message are standard C lexical behaviors, not extensions.\n\nNote: Some identifiers here are macros or functions (mhd_assert, MHD_ITC_IS_VALID_, MHD_itc_activate_, MHD_mutex_lock_chk_, MHD_DLOG, _(), etc.). Those macro/function definitions are not present in the snippet; if any of those definitions use compiler-specific extensions (for example, __attribute__ in their declarations/definitions, inline assembly, or other compiler extensions), those would need to be inspected in their own definitions. Based solely on the visible code, there are no explicit language extensions to report."
}