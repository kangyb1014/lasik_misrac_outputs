{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_upgraded_connection_mark_app_closed_:\n```c\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "connection->urh->was_closed = true;",
    "MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);",
    "if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )",
    "MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));",
    "mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));",
    "connection->resuming = true;",
    "mhd_assert (NULL == daemon->worker_pool);",
    "mhd_assert (NULL != connection->urh);",
    "MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);",
    "daemon->resuming = true;"
  ],
  "explanation": "Only function or macro invocations (and any statements that could trigger control flow back into this function) need to be investigated for indirect or direct recursion. The listed fragments cover all calls and macro usages in this function that could potentially call back into MHD_upgraded_connection_mark_app_closed_. Other parts of the function are simple pointer/field accesses, assignments, comments, conditional compilation directives, and the local pointer declaration (e.g. struct MHD_Daemon *const daemon = connection->daemon; and the three assignments setting was_closed/resuming flags) which cannot themselves invoke functions and therefore cannot cause direct or indirect recursion; those need not be investigated for Rule 17.2."
}