{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of fast_simple_hash:\n```c\nstatic uint32_t\nfast_simple_hash (const uint8_t *data,\n                  size_t data_size)\n{\n  uint32_t hash;\n\n  if (0 != data_size)\n  {\n    size_t i;\n    hash = data[0];\n    for (i = 1; i < data_size; i++)\n      hash = _MHD_ROTL32 (hash, 7) ^ data[i];\n  }\n  else\n    hash = 0;\n\n  return hash;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No function parameter is modified in this function. The parameters are:\n- data: declared as const uint8_t * \u2014 it is only dereferenced for reads (data[0], data[i]); the pointer itself is never assigned to or altered.\n- data_size: a value parameter of type size_t that is read-only (used only in the condition i < data_size and the check 0 != data_size); it is not assigned to or otherwise modified.\nAll mutations occur to local objects (hash and loop variable i). The loop uses i++ where i is a local variable, not a parameter. The macro _MHD_ROTL32 is applied to the local variable hash; it does not modify any function parameter in the shown code. Therefore there are no fragments that violate MISRA C 2023 Rule 17.8. If a deeper check is desired, the definition of _MHD_ROTL32 could be reviewed to ensure it does not (via side effects) modify a parameter, but based on the presented code there are no suspicious fragments to investigate."
}