{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of run_mhd:\n```c\nstatic int\nrun_mhd (void)\n{\n  MHD_AccessHandlerCallback reply_func;\n  struct MHD_Daemon *d;\n  unsigned int use_num_threads;\n  unsigned int flags = MHD_NO_FLAG;\n  struct MHD_OptionItem opt_arr[16];\n  size_t opt_count = 0;\n  const union MHD_DaemonInfo *d_info;\n  const char *poll_mode;\n  uint16_t port;\n\n  if (tool_params.thread_per_conn)\n    use_num_threads = 0;\n  else\n    use_num_threads = get_num_threads ();\n  printf (\"\\n\");\n\n  print_perf_warnings ();\n\n  printf (\"Responses:\\n\");\n  printf (\"  Sharing:   \");\n  if (tool_params.shared)\n  {\n    reply_func = &answer_shared_response;\n    printf (\"pre-generated shared pool with %u objects\\n\", num_resps);\n  }\n  else if (tool_params.single)\n  {\n    reply_func = &answer_single_response;\n    printf (\"single pre-generated reused response object\\n\");\n  }\n  else\n  {\n    /* Unique responses */\n    if (tool_params.empty)\n      reply_func = &answer_unique_empty_response;\n    else if (tool_params.tiny)\n      reply_func = &answer_unique_tiny_response;\n    else\n      reply_func = &answer_unique_dyn_response;\n    printf (\"one-time response object generated for every request\\n\");\n  }\n  printf (\"  Body size: %s\\n\",\n          get_mhd_response_size ());\n\n  flags |= MHD_USE_ERROR_LOG;\n  flags |= MHD_USE_INTERNAL_POLLING_THREAD;\n  if (tool_params.epoll)\n    flags |= MHD_USE_EPOLL;\n  else if (tool_params.poll)\n    flags |= MHD_USE_POLL;\n  else if (tool_params.select)\n    (void) flags; /* No special additional flag */\n  else\n    flags |= MHD_USE_AUTO;\n\n  if (tool_params.thread_per_conn)\n    flags |= MHD_USE_THREAD_PER_CONNECTION;\n\n  if (! tool_params.date_header)\n    flags |= MHD_USE_SUPPRESS_DATE_NO_CLOCK;\n\n  if (0 != tool_params.connections)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_CONNECTION_LIMIT;\n    opt_arr[opt_count].value = (intptr_t) tool_params.connections;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1 < use_num_threads)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_THREAD_POOL_SIZE;\n    opt_arr[opt_count].value = (intptr_t) use_num_threads;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_CONNECTION_TIMEOUT;\n    opt_arr[opt_count].value = (intptr_t) tool_params.timeout;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1)\n  {\n    struct MHD_OptionItem option =\n    { MHD_OPTION_END, 0, NULL };\n    opt_arr[opt_count] = option;\n    if (opt_count >= (sizeof(opt_arr) / sizeof(opt_arr[0])))\n      abort ();\n  }\n  d = MHD_start_daemon (flags, mhd_port, NULL, NULL, reply_func, NULL,\n                        MHD_OPTION_ARRAY, opt_arr, MHD_OPTION_END);\n  if (NULL == d)\n  {\n    fprintf (stderr, \"Error starting MHD daemon.\\n\");\n    return 15;\n  }\n  d_info = MHD_get_daemon_info (d, MHD_DAEMON_INFO_FLAGS);\n  if (NULL == d_info)\n    abort ();\n  flags = (unsigned int) d_info->flags;\n  if (0 != (flags & MHD_USE_POLL))\n    poll_mode = \"poll()\";\n  else if (0 != (flags & MHD_USE_EPOLL))\n    poll_mode = \"epoll\";\n  else\n    poll_mode = \"select()\";\n  d_info = MHD_get_daemon_info (d, MHD_DAEMON_INFO_BIND_PORT);\n  if (NULL == d_info)\n    abort ();\n  port = d_info->port;\n  if (0 == port)\n    fprintf (stderr, \"Cannot detect port number. Consider specifying \"\n             \"port number explicitly.\\n\");\n\n  printf (\"MHD is running.\\n\");\n  printf (\"  Bind port:          %u\\n\", (unsigned int) port);\n  printf (\"  Polling function:   %s\\n\", poll_mode);\n  printf (\"  Threading:          \");\n  if (MHD_USE_THREAD_PER_CONNECTION == (flags & MHD_USE_THREAD_PER_CONNECTION))\n    printf (\"thread per connection\\n\");\n  else if (1 == get_num_threads ())\n    printf (\"one MHD thread\\n\");\n  else\n    printf (\"%u MHD threads in thread pool\\n\", get_num_threads ());\n  printf (\"  Connections limit:  %u\\n\", get_mhd_conn_limit (d));\n  printf (\"  Connection timeout: %u%s\\n\", tool_params.timeout,\n          0 == tool_params.timeout ? \" (no timeout)\" : \"\");\n  printf (\"  'Date:' header:     %s\\n\",\n          tool_params.date_header ? \"Yes\" : \"No\");\n  printf (\"To test with remote client use            \"\n          \"http://HOST_IP:%u/\\n\", (unsigned int) port);\n  printf (\"To test with client on the same host use  \"\n          \"http://127.0.0.1:%u/\\n\", (unsigned int) port);\n  printf (\"\\nPress ENTER to stop.\\n\");\n  if (1)\n  {\n    char buf[10];\n    (void) fgets (buf, sizeof(buf), stdin);\n  }\n  MHD_stop_daemon (d);\n  return 0;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "The provided function contains no for statements to which MISRA C 2023 Rule 14.2 would apply. A text search of the code shows no occurrences of the keyword \"for\" and there are no loop constructs (for/while/do) in this translation-unit fragment; therefore there are no code fragments here that need investigation for Rule 14.2. Other constructs (if statements, calls, assignments, array initialization) are not relevant to Rule 14.2 and do not need to be flagged for this rule. If for-loop compliance is required, inspect other translation units, included headers, and any macros or functions called here (they may contain for loops), since those are outside the supplied code fragment."
}