{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes content_len = strlen(content) (so content is a null\u2011terminated C string) and then calls memcmp(content, pos->value, content_len) to compare them. Using memcmp to compare a null\u2011terminated string (content) violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2088.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  /* Probe log: entry and input values */\n  {\n    FILE *fp = fopen(\"/tmp/logs/2088.txt\", \"a\");\n    if (NULL != fp)\n    {\n      fprintf(fp, \"ENTER MHD_del_response_header: response=%p header=%p content=%p\\n\",\n              (void *) response, (void *) header, (void *) content);\n      if (NULL != header)\n        fprintf(fp, \"  header (string)='%s'\\n\", header);\n      else\n        fprintf(fp, \"  header is NULL\\n\");\n      if (NULL != content)\n        fprintf(fp, \"  content (string)='%s'\\n\", content);\n      else\n        fprintf(fp, \"  content is NULL\\n\");\n      fclose(fp);\n    }\n  }\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    /* Log branch for connection header handling */\n    {\n      FILE *fp = fopen(\"/tmp/logs/2088.txt\", \"a\");\n      if (NULL != fp)\n      {\n        fprintf(fp, \"BRANCH: connection header special handling taken for header='%s'\\n\",\n                header);\n        fclose(fp);\n      }\n    }\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n\n  /* Log computed lengths */\n  {\n    FILE *fp = fopen(\"/tmp/logs/2088.txt\", \"a\");\n    if (NULL != fp)\n    {\n      fprintf(fp, \"Computed lengths: header_len=%zu content_len=%zu\\n\",\n              header_len, content_len);\n      fclose(fp);\n    }\n  }\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    /* Log iteration state before checks */\n    {\n      FILE *fp = fopen(\"/tmp/logs/2088.txt\", \"a\");\n      if (NULL != fp)\n      {\n        fprintf(fp, \"LOOP: pos=%p pos->header=%p pos->value=%p pos->header_size=%zu pos->value_size=%zu\\n\",\n                (void *) pos, (void *) pos->header, (void *) pos->value,\n                pos->header_size, pos->value_size);\n        /* Print the stored header/value bytes safely (not assuming NUL termination) */\n        if (NULL != pos->header && pos->header_size > 0u)\n        {\n          fprintf(fp, \"  pos->header (raw, len=%zu): '\", pos->header_size);\n          fwrite (pos->header, 1u, pos->header_size, fp);\n          fprintf(fp, \"'\\n\");\n        }\n        if (NULL != pos->value && pos->value_size > 0u)\n        {\n          fprintf(fp, \"  pos->value (raw, len=%zu): '\", pos->value_size);\n          fwrite (pos->value, 1u, pos->value_size, fp);\n          fprintf(fp, \"'\\n\");\n        }\n        fclose(fp);\n      }\n    }\n\n    /* Only perform memcmp when sizes match (preserve original short-circuit semantics) */\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size))\n    {\n      int cmp_header;\n      int cmp_content;\n\n      cmp_header = memcmp (header, pos->header, header_len);\n      cmp_content = memcmp (content, pos->value, content_len);\n\n      /* Log the memcmp results and the parameters used */\n      {\n        FILE *fp = fopen(\"/tmp/logs/2088.txt\", \"a\");\n        if (NULL != fp)\n        {\n          fprintf(fp, \"  memcmp checks performed: header_cmp=%d content_cmp=%d (compared %zu bytes)\\n\",\n                  cmp_header, cmp_content, header_len);\n          fprintf(fp, \"  compared header (param)='%s'\\n\", header);\n          fprintf(fp, \"  compared content (param)='%s'\\n\", content);\n          fprintf(fp, \"  pos->header pointer=%p pos->value pointer=%p\\n\",\n                  (void *) pos->header, (void *) pos->value);\n          fclose(fp);\n        }\n      }\n\n      if ((0 == cmp_header) && (0 == cmp_content))\n      {\n        /* Log that a match was found and we're about to remove */\n        {\n          FILE *fp = fopen(\"/tmp/logs/2088.txt\", \"a\");\n          if (NULL != fp)\n          {\n            fprintf(fp, \"MATCH FOUND: removing header at pos=%p\\n\", (void *) pos);\n            fclose(fp);\n          }\n        }\n\n        _MHD_remove_header (response, pos);\n        free (pos->header);\n        free (pos->value);\n        free (pos);\n        if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n              header_len) &&\n             MHD_str_equal_caseless_bin_n_ (header,\n                                            MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                            header_len) )\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                   header_len) &&\n                  MHD_str_equal_caseless_bin_n_ (header,\n                                                 MHD_HTTP_HEADER_DATE,\n                                                 header_len) )\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                   header_len) &&\n                  MHD_str_equal_caseless_bin_n_ (header,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len) )\n        {\n          if (NULL == MHD_get_response_element_n_ (response,\n                                                   MHD_HEADER_KIND,\n                                                   MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                   header_len))\n            response->flags_auto &=\n              ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n        }\n\n        /* Log the successful removal and return */\n        {\n          FILE *fp = fopen(\"/tmp/logs/2088.txt\", \"a\");\n          if (NULL != fp)\n          {\n            fprintf(fp, \"RETURN: MHD_YES (header removed)\\n\");\n            fclose(fp);\n          }\n        }\n        return MHD_YES;\n      }\n    }\n\n    pos = pos->next;\n  }\n\n  /* Log final return (no header removed) */\n  {\n    FILE *fp = fopen(\"/tmp/logs/2088.txt\", \"a\");\n    if (NULL != fp)\n    {\n      fprintf(fp, \"RETURN: MHD_NO (no matching header found)\\n\");\n      fclose(fp);\n    }\n  }\n  return MHD_NO;\n}\n"
}