{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) local_head;' is an executed no-op whose removal would not affect program behaviour (it only silences an \"unused variable\" warning). According to Rule 2.2 this constitutes dead code because it performs no action that affects program state or observable behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified new_connections_list_process_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1182.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of new_connections_list_process_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of new_connections_list_process_:\n```c\nstatic void\nnew_connections_list_process_ (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *local_head;\n  struct MHD_Connection *local_tail;\n  mhd_assert (daemon->have_new);\n  mhd_assert (MHD_D_IS_THREAD_SAFE_ (daemon));\n\n  /* Detach DL-list of new connections from the daemon for\n   * following local processing. */\n  MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n  mhd_assert (NULL != daemon->new_connections_head);\n  local_head = daemon->new_connections_head;\n  local_tail = daemon->new_connections_tail;\n  daemon->new_connections_head = NULL;\n  daemon->new_connections_tail = NULL;\n  daemon->have_new = false;\n  MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n  (void) local_head; /* Mute compiler warning */\n\n  /* Process new connections in FIFO order. */\n  do\n  {\n    struct MHD_Connection *c;   /**< Currently processed connection */\n\n    c = local_tail;\n    DLL_remove (local_head,\n                local_tail,\n                c);\n    mhd_assert (daemon == c->daemon);\n    if (MHD_NO == new_connection_process_ (daemon, c))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to start serving new connection.\\n\"));\n#endif\n      (void) 0;\n    }\n  } while (NULL != local_tail);\n\n}\n```\n</target_code>\nPlease provide the modified new_connections_list_process_ code.\n",
  "test_code": "static void\nnew_connections_list_process_ (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *local_head;\n  struct MHD_Connection *local_tail;\n  mhd_assert (daemon->have_new);\n  mhd_assert (MHD_D_IS_THREAD_SAFE_ (daemon));\n\n  /* Detach DL-list of new connections from the daemon for\n   * following local processing. */\n  MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n  mhd_assert (NULL != daemon->new_connections_head);\n  local_head = daemon->new_connections_head;\n  local_tail = daemon->new_connections_tail;\n  daemon->new_connections_head = NULL;\n  daemon->new_connections_tail = NULL;\n  daemon->have_new = false;\n  MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n\n  /* Probe logging: record state just after detaching the list. */\n  do\n  {\n    /* We place the probes in a block to minimize scope pollution. */\n    FILE *probe_log = fopen(\"/tmp/logs/1182.txt\", \"a\");\n    if (NULL != probe_log)\n    {\n      fprintf (probe_log,\n               \"[probe] detached: local_head=%p local_tail=%p daemon_new_head=%p have_new=%d\\n\",\n               (void *) local_head,\n               (void *) local_tail,\n               (void *) daemon->new_connections_head,\n               (int) daemon->have_new);\n      /* flush early so that crash won't lose evidence */\n      fflush (probe_log);\n      fclose (probe_log);\n    }\n    break;\n  } while (0);\n\n  /* The original no-op intended to mute an \"unused variable\" warning. */\n  (void) local_head; /* Mute compiler warning */\n\n  /* Record that the no-op was executed and capture the value of local_head\n   * to provide evidence it did not change program state. */\n  {\n    FILE *probe_log = fopen(\"/tmp/logs/1182.txt\", \"a\");\n    if (NULL != probe_log)\n    {\n      fprintf (probe_log,\n               \"[probe] executed no-op '(void) local_head;' local_head=%p local_tail=%p\\n\",\n               (void *) local_head,\n               (void *) local_tail);\n      fflush (probe_log);\n      fclose (probe_log);\n    }\n  }\n\n  /* Process new connections in FIFO order. */\n  do\n  {\n    struct MHD_Connection *c;   /**< Currently processed connection */\n\n    c = local_tail;\n\n    /* Log the decision to remove the tail and what connection is being\n     * processed next. This provides control-flow evidence for each\n     * iteration. */\n    {\n      FILE *probe_log = fopen(\"/tmp/logs/1182.txt\", \"a\");\n      if (NULL != probe_log)\n      {\n        fprintf (probe_log,\n                 \"[probe] loop start: local_head=%p local_tail(before remove)=%p next_c=%p\\n\",\n                 (void *) local_head,\n                 (void *) local_tail,\n                 (void *) c);\n        fflush (probe_log);\n        fclose (probe_log);\n      }\n    }\n\n    DLL_remove (local_head,\n                local_tail,\n                c);\n    mhd_assert (daemon == c->daemon);\n\n    /* Call the original processing and capture its result for logging. */\n    int proc_res = (MHD_NO == new_connection_process_ (daemon, c));\n    {\n      FILE *probe_log = fopen(\"/tmp/logs/1182.txt\", \"a\");\n      if (NULL != probe_log)\n      {\n        fprintf (probe_log,\n                 \"[probe] processed connection %p result_failed=%d local_tail(after remove)=%p\\n\",\n                 (void *) c,\n                 proc_res,\n                 (void *) local_tail);\n        fflush (probe_log);\n        fclose (probe_log);\n      }\n    }\n\n    if (MHD_NO == new_connection_process_ (daemon, c))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to start serving new connection.\\n\"));\n#endif\n      (void) 0;\n    }\n  } while (NULL != local_tail);\n\n}\n"
}