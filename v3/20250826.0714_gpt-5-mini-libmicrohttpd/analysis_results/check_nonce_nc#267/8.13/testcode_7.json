{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'connection' is declared as 'struct MHD_Connection *connection' but the function only reads from it (e.g. accesses connection->daemon) and does not modify the pointee. Therefore the pointer could and should be declared as 'const struct MHD_Connection *connection'. This non-const pointer parameter violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_nonce_nc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_nonce_nc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_nonce_nc:\n```c\nstatic enum MHD_CheckNonceNC_\ncheck_nonce_nc (struct MHD_Connection *connection,\n                const char *nonce,\n                size_t noncelen,\n                uint64_t nonce_time,\n                uint64_t nc)\n{\n  struct MHD_Daemon *daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  uint32_t mod;\n  enum MHD_CheckNonceNC_ ret;\n\n  mhd_assert (0 != noncelen);\n  mhd_assert (0 != nc);\n  if (MAX_DIGEST_NONCE_LENGTH < noncelen)\n    return MHD_CHECK_NONCENC_WRONG; /* This should be impossible, but static analysis\n                      tools have a hard time with it *and* this also\n                      protects against unsafe modifications that may\n                      happen in the future... */\n  mod = daemon->nonce_nc_size;\n  if (0 == mod)\n    return MHD_CHECK_NONCENC_STALE;  /* no array! */\n  if (nc >= UINT32_MAX - 64)\n    return MHD_CHECK_NONCENC_STALE;  /* Overflow, unrealistically high value */\n\n  nn = &daemon->nnc[get_nonce_nc_idx (mod, nonce, noncelen)];\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n\n  mhd_assert (0 == nn->nonce[noncelen]); /* The old value must be valid */\n\n  if ( (0 != memcmp (nn->nonce, nonce, noncelen)) ||\n       (0 != nn->nonce[noncelen]) )\n  { /* The nonce in the slot does not match nonce from the client */\n    if (0 == nn->nonce[0])\n    { /* The slot was never used, while the client's nonce value should be\n       * recorded when it was generated by MHD */\n      ret = MHD_CHECK_NONCENC_WRONG;\n    }\n    else if (0 != nn->nonce[noncelen])\n    { /* The value is the slot is wrong */\n      ret =  MHD_CHECK_NONCENC_STALE;\n    }\n    else\n    {\n      uint64_t slot_ts; /**< The timestamp in the slot */\n      if (! get_nonce_timestamp (nn->nonce, noncelen, &slot_ts))\n      {\n        mhd_assert (0); /* The value is the slot is wrong */\n        ret = MHD_CHECK_NONCENC_STALE;\n      }\n      else\n      {\n        /* Unsigned value, will be large if nonce_time is less than slot_ts */\n        const uint64_t ts_diff = TRIM_TO_TIMESTAMP (nonce_time - slot_ts);\n        if ((REUSE_TIMEOUT * 1000) >= ts_diff)\n        {\n          /* The nonce from the client may not have been placed in the slot\n           * because another nonce in that slot has not yet expired. */\n          ret = MHD_CHECK_NONCENC_STALE;\n        }\n        else if (TRIM_TO_TIMESTAMP (UINT64_MAX) / 2 >= ts_diff)\n        {\n          /* Too large value means that nonce_time is less than slot_ts.\n           * The nonce from the client may have been overwritten by the newer\n           * nonce. */\n          ret = MHD_CHECK_NONCENC_STALE;\n        }\n        else\n        {\n          /* The nonce from the client should be generated after the nonce\n           * in the slot has been expired, the nonce must be recorded, but\n           * it's not. */\n          ret = MHD_CHECK_NONCENC_WRONG;\n        }\n      }\n    }\n  }\n  else if (nc > nn->nc)\n  {\n    /* 'nc' is larger, shift bitmask and bump limit */\n    const uint32_t jump_size = (uint32_t) nc - nn->nc;\n    if (64 > jump_size)\n    {\n      /* small jump, less than mask width */\n      nn->nmask <<= jump_size;\n      /* Set bit for the old 'nc' value */\n      nn->nmask |= (UINT64_C (1) << (jump_size - 1));\n    }\n    else if (64 == jump_size)\n      nn->nmask = (UINT64_C (1) << 63);\n    else\n      nn->nmask = 0;                /* big jump, unset all bits in the mask */\n    nn->nc = (uint32_t) nc;\n    ret = MHD_CHECK_NONCENC_OK;\n  }\n  else if (nc < nn->nc)\n  {\n    /* Note that we use 64 here, as we do not store the\n       bit for 'nn->nc' itself in 'nn->nmask' */\n    if ( (nc + 64 >= nn->nc) &&\n         (0 == ((UINT64_C (1) << (nn->nc - nc - 1)) & nn->nmask)) )\n    {\n      /* Out-of-order nonce, but within 64-bit bitmask, set bit */\n      nn->nmask |= (UINT64_C (1) << (nn->nc - nc - 1));\n      ret = MHD_CHECK_NONCENC_OK;\n    }\n    else\n      /* 'nc' was already used or too old (more then 64 values ago) */\n      ret = MHD_CHECK_NONCENC_STALE;\n  }\n  else /* if (nc == nn->nc) */\n    /* 'nc' was already used */\n    ret = MHD_CHECK_NONCENC_STALE;\n\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified check_nonce_nc code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <inttypes.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe helpers: keep parameters const-qualified where possible */\nstatic void\nmhd_probe_log_enter (const void *conn_ptr,\n                      const void *daemon_ptr,\n                      const char *nonce,\n                      size_t noncelen,\n                      uint64_t nonce_time,\n                      uint64_t nc)\n{\n  FILE *f = fopen (\"/tmp/logs/2673.txt\", \"a\");\n  if (f == NULL)\n    return;\n  time_t t = time (NULL);\n  fprintf (f, \"[%ld] ENTER check_nonce_nc: connection=%p daemon=%p noncelen=%zu nc=%\" PRIu64 \" nonce_time=%\" PRIu64 \"\\n\",\n           (long) t, conn_ptr, daemon_ptr, noncelen, nc, nonce_time);\n  if (nonce != NULL && noncelen > 0)\n  {\n    /* print a hex prefix of the nonce for identification (up to 64 bytes) */\n    size_t i, lim = noncelen < 64 ? noncelen : 64;\n    fprintf (f, \"  nonce[0..%zu]:\", lim);\n    for (i = 0; i < lim; ++i)\n      fprintf (f, \" %02x\", (unsigned char) nonce[i]);\n    if (noncelen > lim)\n      fprintf (f, \" ... (len=%zu)\", noncelen);\n    fprintf (f, \"\\n\");\n  }\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log_daemon (const void *daemon_ptr, uint32_t nonce_nc_size)\n{\n  FILE *f = fopen (\"/tmp/logs/2673.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf (f, \"  daemon=%p nonce_nc_size=%\" PRIu32 \"\\n\", daemon_ptr, nonce_nc_size);\n  fclose (f);\n}\n\n/* Forwarded because the real type is defined elsewhere; keep const where only reading */\nstruct MHD_NonceNc;\nstruct MHD_Daemon;\n\nstatic void\nmhd_probe_log_slot (const struct MHD_NonceNc *nn,\n                     size_t noncelen,\n                     const char *stage)\n{\n  FILE *f = fopen (\"/tmp/logs/2673.txt\", \"a\");\n  if (f == NULL)\n    return;\n  /* We access members that exist in the original compilation unit */\n  fprintf (f, \"  [slot %s] nn=%p nonce_end_byte=%02x nc=%u nmask=0x%016\" PRIx64 \"\\n\",\n           stage, (const void *) nn, (unsigned) nn->nonce[noncelen], (unsigned) nn->nc, (unsigned long long) nn->nmask);\n  /* Print a small prefix of the stored nonce for comparison */\n  {\n    size_t i, lim = noncelen < 32 ? noncelen : 32;\n    fprintf (f, \"    stored_nonce[0..%zu]:\", lim);\n    for (i = 0; i < lim; ++i)\n      fprintf (f, \" %02x\", (unsigned char) nn->nonce[i]);\n    if (noncelen > lim)\n      fprintf (f, \" ... (len=%zu)\", noncelen);\n    fprintf (f, \"\\n\");\n  }\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log_decision (const char *desc, int ret)\n{\n  FILE *f = fopen (\"/tmp/logs/2673.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf (f, \"  DECISION: %s => ret=%d\\n\", desc, ret);\n  fclose (f);\n}\n\n/* The original function with probes inserted. Signature unchanged. */\nstatic enum MHD_CheckNonceNC_\ncheck_nonce_nc (struct MHD_Connection *connection,\n                const char *nonce,\n                size_t noncelen,\n                uint64_t nonce_time,\n                uint64_t nc)\n{\n  struct MHD_Daemon *daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  uint32_t mod;\n  enum MHD_CheckNonceNC_ ret;\n\n  /* Log entry and basic parameters */\n  mhd_probe_log_enter (connection, daemon, nonce, noncelen, nonce_time, nc);\n\n  mhd_assert (0 != noncelen);\n  mhd_assert (0 != nc);\n  if (MAX_DIGEST_NONCE_LENGTH < noncelen)\n  {\n    mhd_probe_log_decision (\"noncelen > MAX_DIGEST_NONCE_LENGTH\", MHD_CHECK_NONCENC_WRONG);\n    return MHD_CHECK_NONCENC_WRONG; /* This should be impossible, but static analysis\n                      tools have a hard time with it *and* this also\n                      protects against unsafe modifications that may\n                      happen in the future... */\n  }\n  mod = daemon->nonce_nc_size;\n  mhd_probe_log_daemon (daemon, mod);\n  if (0 == mod)\n  {\n    mhd_probe_log_decision (\"mod == 0 (no array)\", MHD_CHECK_NONCENC_STALE);\n    return MHD_CHECK_NONCENC_STALE;  /* no array! */\n  }\n  if (nc >= UINT32_MAX - 64)\n  {\n    mhd_probe_log_decision (\"nc overflow/unrealistically high\", MHD_CHECK_NONCENC_STALE);\n    return MHD_CHECK_NONCENC_STALE;  /* Overflow, unrealistically high value */\n  }\n\n  nn = &daemon->nnc[get_nonce_nc_idx (mod, nonce, noncelen)];\n\n  /* Log the selected slot before locking */\n  mhd_probe_log_slot (nn, noncelen, \"pre-lock\");\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n\n  mhd_assert (0 == nn->nonce[noncelen]); /* The old value must be valid */\n\n  if ( (0 != memcmp (nn->nonce, nonce, noncelen)) ||\n       (0 != nn->nonce[noncelen]) )\n  { /* The nonce in the slot does not match nonce from the client */\n    if (0 == nn->nonce[0])\n    { /* The slot was never used, while the client's nonce value should be\n       * recorded when it was generated by MHD */\n      ret = MHD_CHECK_NONCENC_WRONG;\n      mhd_probe_log_decision (\"slot never used => WRONG\", ret);\n    }\n    else if (0 != nn->nonce[noncelen])\n    { /* The value is the slot is wrong */\n      ret =  MHD_CHECK_NONCENC_STALE;\n      mhd_probe_log_decision (\"slot value malformed (nonce[noncelen] != 0) => STALE\", ret);\n    }\n    else\n    {\n      uint64_t slot_ts; /**< The timestamp in the slot */\n      if (! get_nonce_timestamp (nn->nonce, noncelen, &slot_ts))\n      {\n        mhd_assert (0); /* The value is the slot is wrong */\n        ret = MHD_CHECK_NONCENC_STALE;\n        mhd_probe_log_decision (\"get_nonce_timestamp failed => STALE\", ret);\n      }\n      else\n      {\n        /* Unsigned value, will be large if nonce_time is less than slot_ts */\n        const uint64_t ts_diff = TRIM_TO_TIMESTAMP (nonce_time - slot_ts);\n        if ((REUSE_TIMEOUT * 1000) >= ts_diff)\n        {\n          /* The nonce from the client may not have been placed in the slot\n           * because another nonce in that slot has not yet expired. */\n          ret = MHD_CHECK_NONCENC_STALE;\n          mhd_probe_log_decision (\"ts_diff <= REUSE_TIMEOUT*1000 => STALE\", ret);\n        }\n        else if (TRIM_TO_TIMESTAMP (UINT64_MAX) / 2 >= ts_diff)\n        {\n          /* Too large value means that nonce_time is less than slot_ts.\n           * The nonce from the client may have been overwritten by the newer\n           * nonce. */\n          ret = MHD_CHECK_NONCENC_STALE;\n          mhd_probe_log_decision (\"ts_diff large => likely overwritten => STALE\", ret);\n        }\n        else\n        {\n          /* The nonce from the client should be generated after the nonce\n           * in the slot has been expired, the nonce must be recorded, but\n           * it's not. */\n          ret = MHD_CHECK_NONCENC_WRONG;\n          mhd_probe_log_decision (\"nonce should have been recorded but not => WRONG\", ret);\n        }\n      }\n    }\n  }\n  else if (nc > nn->nc)\n  {\n    /* 'nc' is larger, shift bitmask and bump limit */\n    const uint32_t jump_size = (uint32_t) nc - nn->nc;\n    if (64 > jump_size)\n    {\n      /* small jump, less than mask width */\n      nn->nmask <<= jump_size;\n      /* Set bit for the old 'nc' value */\n      nn->nmask |= (UINT64_C (1) << (jump_size - 1));\n    }\n    else if (64 == jump_size)\n      nn->nmask = (UINT64_C (1) << 63);\n    else\n      nn->nmask = 0;                /* big jump, unset all bits in the mask */\n    nn->nc = (uint32_t) nc;\n    ret = MHD_CHECK_NONCENC_OK;\n    mhd_probe_log_slot (nn, noncelen, \"after-nc-increase\");\n    mhd_probe_log_decision (\"nc > nn->nc => OK\", ret);\n  }\n  else if (nc < nn->nc)\n  {\n    /* Note that we use 64 here, as we do not store the\n       bit for 'nn->nc' itself in 'nn->nmask' */\n    if ( (nc + 64 >= nn->nc) &&\n         (0 == ((UINT64_C (1) << (nn->nc - nc - 1)) & nn->nmask)) )\n    {\n      /* Out-of-order nonce, but within 64-bit bitmask, set bit */\n      nn->nmask |= (UINT64_C (1) << (nn->nc - nc - 1));\n      ret = MHD_CHECK_NONCENC_OK;\n      mhd_probe_log_slot (nn, noncelen, \"after-nc-out-of-order-setbit\");\n      mhd_probe_log_decision (\"nc < nn->nc but within window and unused => OK\", ret);\n    }\n    else\n      /* 'nc' was already used or too old (more then 64 values ago) */\n    {\n      ret = MHD_CHECK_NONCENC_STALE;\n      mhd_probe_log_decision (\"nc < nn->nc and either used or too old => STALE\", ret);\n    }\n  }\n  else /* if (nc == nn->nc) */\n  {\n    /* 'nc' was already used */\n    ret = MHD_CHECK_NONCENC_STALE;\n    mhd_probe_log_decision (\"nc == nn->nc => already used => STALE\", ret);\n  }\n\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  /* Log final slot state and return value */\n  mhd_probe_log_slot (nn, noncelen, \"post-unlock\");\n  mhd_probe_log_decision (\"final\", ret);\n\n  return ret;\n}\n"
}