{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf the macro/function mhd_assert is implemented to terminate the program (e.g. calls abort()/__builtin_trap() or is annotated as non\u2011returning), then the statement ret = MHD_CHECK_NONCENC_STALE; following mhd_assert(0) is unreachable. In that configuration the project contains unreachable code and thus violates MISRA C 2023 Rule 2.1. (If, instead, mhd_assert is a no-op in production builds so the assignment is reachable, then there is no violation \u2014 but the code as written allows a configuration that makes the assignment unreachable.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_nonce_nc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2671.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_nonce_nc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_nonce_nc:\n```c\nstatic enum MHD_CheckNonceNC_\ncheck_nonce_nc (struct MHD_Connection *connection,\n                const char *nonce,\n                size_t noncelen,\n                uint64_t nonce_time,\n                uint64_t nc)\n{\n  struct MHD_Daemon *daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  uint32_t mod;\n  enum MHD_CheckNonceNC_ ret;\n\n  mhd_assert (0 != noncelen);\n  mhd_assert (0 != nc);\n  if (MAX_DIGEST_NONCE_LENGTH < noncelen)\n    return MHD_CHECK_NONCENC_WRONG; /* This should be impossible, but static analysis\n                      tools have a hard time with it *and* this also\n                      protects against unsafe modifications that may\n                      happen in the future... */\n  mod = daemon->nonce_nc_size;\n  if (0 == mod)\n    return MHD_CHECK_NONCENC_STALE;  /* no array! */\n  if (nc >= UINT32_MAX - 64)\n    return MHD_CHECK_NONCENC_STALE;  /* Overflow, unrealistically high value */\n\n  nn = &daemon->nnc[get_nonce_nc_idx (mod, nonce, noncelen)];\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n\n  mhd_assert (0 == nn->nonce[noncelen]); /* The old value must be valid */\n\n  if ( (0 != memcmp (nn->nonce, nonce, noncelen)) ||\n       (0 != nn->nonce[noncelen]) )\n  { /* The nonce in the slot does not match nonce from the client */\n    if (0 == nn->nonce[0])\n    { /* The slot was never used, while the client's nonce value should be\n       * recorded when it was generated by MHD */\n      ret = MHD_CHECK_NONCENC_WRONG;\n    }\n    else if (0 != nn->nonce[noncelen])\n    { /* The value is the slot is wrong */\n      ret =  MHD_CHECK_NONCENC_STALE;\n    }\n    else\n    {\n      uint64_t slot_ts; /**< The timestamp in the slot */\n      if (! get_nonce_timestamp (nn->nonce, noncelen, &slot_ts))\n      {\n        mhd_assert (0); /* The value is the slot is wrong */\n        ret = MHD_CHECK_NONCENC_STALE;\n      }\n      else\n      {\n        /* Unsigned value, will be large if nonce_time is less than slot_ts */\n        const uint64_t ts_diff = TRIM_TO_TIMESTAMP (nonce_time - slot_ts);\n        if ((REUSE_TIMEOUT * 1000) >= ts_diff)\n        {\n          /* The nonce from the client may not have been placed in the slot\n           * because another nonce in that slot has not yet expired. */\n          ret = MHD_CHECK_NONCENC_STALE;\n        }\n        else if (TRIM_TO_TIMESTAMP (UINT64_MAX) / 2 >= ts_diff)\n        {\n          /* Too large value means that nonce_time is less than slot_ts.\n           * The nonce from the client may have been overwritten by the newer\n           * nonce. */\n          ret = MHD_CHECK_NONCENC_STALE;\n        }\n        else\n        {\n          /* The nonce from the client should be generated after the nonce\n           * in the slot has been expired, the nonce must be recorded, but\n           * it's not. */\n          ret = MHD_CHECK_NONCENC_WRONG;\n        }\n      }\n    }\n  }\n  else if (nc > nn->nc)\n  {\n    /* 'nc' is larger, shift bitmask and bump limit */\n    const uint32_t jump_size = (uint32_t) nc - nn->nc;\n    if (64 > jump_size)\n    {\n      /* small jump, less than mask width */\n      nn->nmask <<= jump_size;\n      /* Set bit for the old 'nc' value */\n      nn->nmask |= (UINT64_C (1) << (jump_size - 1));\n    }\n    else if (64 == jump_size)\n      nn->nmask = (UINT64_C (1) << 63);\n    else\n      nn->nmask = 0;                /* big jump, unset all bits in the mask */\n    nn->nc = (uint32_t) nc;\n    ret = MHD_CHECK_NONCENC_OK;\n  }\n  else if (nc < nn->nc)\n  {\n    /* Note that we use 64 here, as we do not store the\n       bit for 'nn->nc' itself in 'nn->nmask' */\n    if ( (nc + 64 >= nn->nc) &&\n         (0 == ((UINT64_C (1) << (nn->nc - nc - 1)) & nn->nmask)) )\n    {\n      /* Out-of-order nonce, but within 64-bit bitmask, set bit */\n      nn->nmask |= (UINT64_C (1) << (nn->nc - nc - 1));\n      ret = MHD_CHECK_NONCENC_OK;\n    }\n    else\n      /* 'nc' was already used or too old (more then 64 values ago) */\n      ret = MHD_CHECK_NONCENC_STALE;\n  }\n  else /* if (nc == nn->nc) */\n    /* 'nc' was already used */\n    ret = MHD_CHECK_NONCENC_STALE;\n\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified check_nonce_nc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Lightweight probe logger that appends to /tmp/logs/2671.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/2671.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic void probe_log_enter(const void *connection, const char *nonce, size_t noncelen, uint64_t nonce_time, uint64_t nc)\n{\n  probe_log(\"check_nonce_nc ENTER: connection=%p nonce=%p noncelen=%zu nonce_time=%llu nc=%llu\",\n            connection, (const void *)nonce, noncelen, (unsigned long long)nonce_time, (unsigned long long)nc);\n}\n\nstatic void probe_log_state(const char *tag, const char *nonce, size_t noncelen, const void *nn_nonce, unsigned int nn_nonce_byte, uint64_t nn_nc, uint64_t nn_nmask)\n{\n  probe_log(\"%s: noncelen=%zu nn_nonce[0]=%u nn_nonce_byte_at_idx=%u nn_nc=%llu nn_nmask=%#llx\",\n            tag, noncelen, (unsigned int)(nonce ? (unsigned char)nonce[0] : 0), nn_nonce ? (unsigned int)nn_nonce_byte : 0,\n            (unsigned long long)nn_nc, (unsigned long long)nn_nmask);\n}\n\nstatic enum MHD_CheckNonceNC_\ncheck_nonce_nc (struct MHD_Connection *connection,\n                const char *nonce,\n                size_t noncelen,\n                uint64_t nonce_time,\n                uint64_t nc)\n{\n  struct MHD_Daemon *daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  uint32_t mod;\n  enum MHD_CheckNonceNC_ ret;\n\n  probe_log_enter(connection, nonce, noncelen, nonce_time, nc);\n\n  probe_log(\"about to mhd_assert(noncelen != 0): noncelen=%zu\", noncelen);\n  mhd_assert (0 != noncelen);\n  probe_log(\"passed mhd_assert(noncelen != 0)\");\n\n  probe_log(\"about to mhd_assert(nc != 0): nc=%llu\", (unsigned long long)nc);\n  mhd_assert (0 != nc);\n  probe_log(\"passed mhd_assert(nc != 0)\");\n\n  if (MAX_DIGEST_NONCE_LENGTH < noncelen)\n  {\n    probe_log(\"returning MHD_CHECK_NONCENC_WRONG due to noncelen too large: %zu\", noncelen);\n    return MHD_CHECK_NONCENC_WRONG; /* This should be impossible, but static analysis\n                      tools have a hard time with it *and* this also\n                      protects against unsafe modifications that may\n                      happen in the future... */\n  }\n  mod = daemon->nonce_nc_size;\n  probe_log(\"daemon->nonce_nc_size = %u\", (unsigned)mod);\n  if (0 == mod)\n  {\n    probe_log(\"returning MHD_CHECK_NONCENC_STALE due to mod == 0\");\n    return MHD_CHECK_NONCENC_STALE;  /* no array! */\n  }\n  if (nc >= UINT32_MAX - 64)\n  {\n    probe_log(\"returning MHD_CHECK_NONCENC_STALE due to nc >= UINT32_MAX - 64: nc=%llu\", (unsigned long long)nc);\n    return MHD_CHECK_NONCENC_STALE;  /* Overflow, unrealistically high value */\n  }\n\n  nn = &daemon->nnc[get_nonce_nc_idx (mod, nonce, noncelen)];\n\n  probe_log(\"computed nn index; nn=%p\", (void *)nn);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n\n  probe_log(\"about to mhd_assert(nn->nonce[noncelen] == 0): nn->nonce[%zu]=%u\", noncelen,\n            (unsigned int)nn->nonce[noncelen]);\n  mhd_assert (0 == nn->nonce[noncelen]); /* The old value must be valid */\n  probe_log(\"passed mhd_assert(nn->nonce[noncelen] == 0)\");\n\n  if ( (0 != memcmp (nn->nonce, nonce, noncelen)) ||\n       (0 != nn->nonce[noncelen]) )\n  { /* The nonce in the slot does not match nonce from the client */\n    probe_log_state(\"mismatch_branch\", nonce, noncelen, nn->nonce, (unsigned int)nn->nonce[0], nn->nc, nn->nmask);\n    if (0 == nn->nonce[0])\n    { /* The slot was never used, while the client's nonce value should be\n       * recorded when it was generated by MHD */\n      ret = MHD_CHECK_NONCENC_WRONG;\n      probe_log(\"branch: slot never used -> MHD_CHECK_NONCENC_WRONG\");\n    }\n    else if (0 != nn->nonce[noncelen])\n    { /* The value is the slot is wrong */\n      ret =  MHD_CHECK_NONCENC_STALE;\n      probe_log(\"branch: nn->nonce[noncelen] != 0 -> MHD_CHECK_NONCENC_STALE\");\n    }\n    else\n    {\n      uint64_t slot_ts; /**< The timestamp in the slot */\n      probe_log(\"calling get_nonce_timestamp to parse timestamp from nn->nonce\");\n      if (! get_nonce_timestamp (nn->nonce, noncelen, &slot_ts))\n      {\n        probe_log(\"get_nonce_timestamp returned false; about to mhd_assert(0) (this assert may be non-returning)\");\n        mhd_assert (0); /* The value is the slot is wrong */\n        probe_log(\"after mhd_assert(0) \u2014 if this line is not present in the logs, mhd_assert likely terminated the process\");\n        ret = MHD_CHECK_NONCENC_STALE;\n        probe_log(\"set ret = MHD_CHECK_NONCENC_STALE after failed get_nonce_timestamp\");\n      }\n      else\n      {\n        /* Unsigned value, will be large if nonce_time is less than slot_ts */\n        const uint64_t ts_diff = TRIM_TO_TIMESTAMP (nonce_time - slot_ts);\n        probe_log(\"get_nonce_timestamp succeeded: slot_ts=%llu ts_diff=%llu\", (unsigned long long)slot_ts, (unsigned long long)ts_diff);\n        if ((REUSE_TIMEOUT * 1000) >= ts_diff)\n        {\n          /* The nonce from the client may not have been placed in the slot\n           * because another nonce in that slot has not yet expired. */\n          ret = MHD_CHECK_NONCENC_STALE;\n          probe_log(\"branch: ts_diff <= REUSE_TIMEOUT*1000 -> STALE\");\n        }\n        else if (TRIM_TO_TIMESTAMP (UINT64_MAX) / 2 >= ts_diff)\n        {\n          /* Too large value means that nonce_time is less than slot_ts.\n           * The nonce from the client may have been overwritten by the newer\n           * nonce. */\n          ret = MHD_CHECK_NONCENC_STALE;\n          probe_log(\"branch: ts_diff indicates nonce_time < slot_ts -> STALE\");\n        }\n        else\n        {\n          /* The nonce from the client should be generated after the nonce\n           * in the slot has been expired, the nonce must be recorded, but\n           * it's not. */\n          ret = MHD_CHECK_NONCENC_WRONG;\n          probe_log(\"branch: nonce should have been recorded but is not -> WRONG\");\n        }\n      }\n    }\n  }\n  else if (nc > nn->nc)\n  {\n    probe_log(\"branch: nc > nn->nc (nc=%llu nn->nc=%u)\", (unsigned long long)nc, nn->nc);\n    /* 'nc' is larger, shift bitmask and bump limit */\n    const uint32_t jump_size = (uint32_t) nc - nn->nc;\n    if (64 > jump_size)\n    {\n      /* small jump, less than mask width */\n      nn->nmask <<= jump_size;\n      /* Set bit for the old 'nc' value */\n      nn->nmask |= (UINT64_C (1) << (jump_size - 1));\n      probe_log(\"small jump_size=%u new nmask=%#llx\", (unsigned)jump_size, (unsigned long long)nn->nmask);\n    }\n    else if (64 == jump_size)\n    {\n      nn->nmask = (UINT64_C (1) << 63);\n      probe_log(\"jump_size == 64 set nmask=%#llx\", (unsigned long long)nn->nmask);\n    }\n    else\n    {\n      nn->nmask = 0;                /* big jump, unset all bits in the mask */\n      probe_log(\"big jump_size=%u set nmask=0\", (unsigned)jump_size);\n    }\n    nn->nc = (uint32_t) nc;\n    ret = MHD_CHECK_NONCENC_OK;\n    probe_log(\"updated nn->nc=%u ret=OK\", nn->nc);\n  }\n  else if (nc < nn->nc)\n  {\n    probe_log(\"branch: nc < nn->nc (nc=%llu nn->nc=%u)\", (unsigned long long)nc, nn->nc);\n    /* Note that we use 64 here, as we do not store the\n       bit for 'nn->nc' itself in 'nn->nmask' */\n    if ( (nc + 64 >= nn->nc) &&\n         (0 == ((UINT64_C (1) << (nn->nc - nc - 1)) & nn->nmask)) )\n    {\n      /* Out-of-order nonce, but within 64-bit bitmask, set bit */\n      nn->nmask |= (UINT64_C (1) << (nn->nc - nc - 1));\n      ret = MHD_CHECK_NONCENC_OK;\n      probe_log(\"out-of-order within mask, set bit new nmask=%#llx ret=OK\", (unsigned long long)nn->nmask);\n    }\n    else\n    {\n      /* 'nc' was already used or too old (more then 64 values ago) */\n      ret = MHD_CHECK_NONCENC_STALE;\n      probe_log(\"nc already used or too old -> STALE\");\n    }\n  }\n  else /* if (nc == nn->nc) */\n  {\n    /* 'nc' was already used */\n    ret = MHD_CHECK_NONCENC_STALE;\n    probe_log(\"nc == nn->nc -> STALE\");\n  }\n\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  probe_log(\"check_nonce_nc EXIT: returning %d\", (int)ret);\n\n  return ret;\n}\n"
}