{
  "user_message": "An agent A claimed that the following add_response_header_connection code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of add_response_header_connection.\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe memcpy can write beyond the allocated buf because buf_size is computed as old_value_len + norm_len and does not always reserve space for the inserted \"close\" token (and terminating NUL). For example, if there is no existing header (old_value_len == 0) and normalization yields norm_len == 0, buf_size becomes 0 and malloc(0) may return a pointer that cannot safely hold 5 bytes. The memcpy(buf, \"close\", MHD_STATICSTR_LEN_(\"close\")) then copies 5 bytes into buf and will overflow. The code relies on an mhd_assert to check sufficient space, but assertions may be disabled in production, so a real out-of-bounds write is possible.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter add_response_header_connection: response=0x56003aec5820, value=0x560020002101\nvalue (preview)='a,b,c,d,e'\nno existing connection header present (flags_auto=0x00000000)\ncomputed lengths: value_len=9, old_value_len=0\nbuf_size computed: old_value_len=0, norm_len=14, buf_size=14\nmalloc(14) -> buf=0x56003aec58e0\nafter MHD_str_remove_token_caseless_: value_has_close=0, norm_len_s=13\nnormalized length updated: norm_len=13\nafter removing keep-alive: norm_len=13\nadded new normalized tokens: norm_len=13, pos=13\nfinal check before null-terminate: buf_size=14, pos=13\nfinal buffer (preview)='a, b, c, d, e'\nallocating new header struct: new_hdr=0x56003aec5c00, new_hdr->header=0x56003aec5900\ninserted new header: new_hdr=0x56003aec5c00, new_hdr->value=0x56003aec58e0, new_hdr->value_size=13, response->flags_auto=0x00000001\nenter add_response_header_connection: response=0x56003aec5820, value=0x56002000218e\nvalue (preview)='i,k,l,m,n,o,p,close'\nno existing connection header present (flags_auto=0x00000000)\ncomputed lengths: value_len=19, old_value_len=0\nbuf_size computed: old_value_len=0, norm_len=29, buf_size=29\nmalloc(29) -> buf=0x56003aec5c40\nafter MHD_str_remove_token_caseless_: value_has_close=1, norm_len_s=19\nnormalized length updated: norm_len=19\nafter removing keep-alive: norm_len=19\nneed to add 'close' token: value_has_close=1, already_has_close=0\nassertion check: buf_size=29, required=27\nperforming memmove: dest=0x56003aec5c47, src=0x56003aec5c40, len=20\nperforming memcpy: dest=0x56003aec5c40, src=\"close\", len=5\nafter inserting 'close': pos=5\nadded new normalized tokens: norm_len=19, pos=26\nfinal check before null-terminate: buf_size=29, pos=26\nfinal buffer (preview)='close, i, k, l, m, n, o, p'\nallocating new header struct: new_hdr=0x56003aec5c70, new_hdr->header=0x56003aec5900\ninserted new header: new_hdr=0x56003aec5c70, new_hdr->value=0x56003aec5c40, new_hdr->value_size=26, response->flags_auto=0x00000003\nenter add_response_header_connection: response=0x56003aec5820, value=0x560020002240\nvalue (preview)='1,2,3,4,5,6,7,close'\nno existing connection header present (flags_auto=0x00000000)\ncomputed lengths: value_len=19, old_value_len=0\nbuf_size computed: old_value_len=0, norm_len=29, buf_size=29\nmalloc(29) -> buf=0x56003aec5c40\nafter MHD_str_remove_token_caseless_: value_has_close=1, norm_len_s=19\nnormalized length updated: norm_len=19\nafter removing keep-alive: norm_len=19\nneed to add 'close' token: value_has_close=1, already_has_close=0\nassertion check: buf_size=29, required=27\nperforming memmove: dest=0x56003aec5c47, src=0x56003aec5c40, len=20\nperforming memcpy: dest=0x56003aec5c40, src=\"close\", len=5\nafter inserting 'close': pos=5\nadded new normalized tokens: norm_len=19, pos=26\nfinal check before null-terminate: buf_size=29, pos=26\nfinal buffer (preview)='close, 1, 2, 3, 4, 5, 6, 7'\nallocating new header struct: new_hdr=0x56003aec5cb0, new_hdr->header=0x56003aec5900\ninserted new header: new_hdr=0x56003aec5cb0, new_hdr->value=0x56003aec5c40, new_hdr->value_size=26, response->flags_auto=0x00000003\nenter add_response_header_connection: response=0x56003aec5820, value=0x56002000226f\nvalue (preview)='8,9,close'\nexisting connection header present: hdr=0x56003aec5cb0, already_has_close=1, hdr->value=0x56003aec5c40\nhdr->value_size=26\ncomputed lengths: value_len=9, old_value_len=28\nbuf_size computed: old_value_len=28, norm_len=14, buf_size=42\nmalloc(42) -> buf=0x56003aec5c70\nafter MHD_str_remove_token_caseless_: value_has_close=1, norm_len_s=4\nnormalized length updated: norm_len=4\nafter removing keep-alive: norm_len=4\ncopying old header value: hdr=0x56003aec5cb0, hdr->value=0x56003aec5c40, hdr->value_size=26, dest=0x56003aec5c70\nafter copying old header: pos=26\nadded new normalized tokens: norm_len=4, pos=32\nfinal check before null-terminate: buf_size=42, pos=32\nfinal buffer (preview)='close, 1, 2, 3, 4, 5, 6, 7, 8, 9'\nupdating existing header hdr=0x56003aec5cb0: free old value 0x56003aec5c40, set new value 0x56003aec5c70, new size=32\nupdate complete: hdr=0x56003aec5cb0, hdr->value=0x56003aec5c70, hdr->value_size=32, response->fl\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The agent's scenario assumes buf_size is computed from the post-normalisation norm_len (and hence could become 0), but the code computes buf_size before normalisation using an upper-bound norm_len = value_len + value_len/2 + 1. That initial norm_len is >= 1 (so malloc(0) cannot occur for old_value_len == 0), and it is chosen to provide room for the normalisation and the terminating NUL. When the input contains a \"close\" token, normalisation removes those bytes so the actual normalised length is smaller than the value used to compute buf_size, providing the extra slack needed for inserting \"close, \" and the NUL. The memmove and memcpy sizes/offsets are bounded by old_value_len, the (post-normalisation) norm_len and the fixed insertion length; these are covered by the buffer allocated from the pre-normalisation upper bound. The mhd_assert() is only a sanity check; the allocation logic itself (using the pre-normalisation upper bound) prevents the out-of-bounds condition described. Therefore there is no demonstrated definitive MISRA C 2023 Rule 21.17 violation in this code path."
}