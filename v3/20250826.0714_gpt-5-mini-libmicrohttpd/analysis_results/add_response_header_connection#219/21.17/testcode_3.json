{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs when an existing Connection header (hdr != NULL) is present and the new value contains the \"close\" token that must be inserted (value_has_close && !already_has_close), but the normalized new-value length (norm_len) is smaller than the length of the \"close\" token. buf_size is computed as old_value_len + norm_len where old_value_len = hdr->value_size + 2. After inserting \"close\" and the \", \" separator the code does memcpy(buf + pos, hdr->value, hdr->value_size). That requires buf_size >= pos + hdr->value_size. Substituting pos = MHD_STATICSTR_LEN_(\"close\") + 2 shows the required condition is norm_len >= MHD_STATICSTR_LEN_(\"close\"). If norm_len < MHD_STATICSTR_LEN_(\"close\") (for example norm_len == 0) the memcpy will write past the end of buf and thus access beyond the bounds of the destination object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_header_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2199.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_header_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_header_connection:\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified add_response_header_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdarg.h>\n\n/* Probe helper: append a single-line structured log to /tmp/logs/2199.txt */\nstatic void mhd_log_probe(const char *tag,\n                          struct MHD_Response *response,\n                          const char *value,\n                          struct MHD_HTTP_Res_Header *hdr,\n                          size_t value_len,\n                          size_t old_value_len,\n                          size_t buf_size,\n                          size_t norm_len,\n                          bool value_has_close,\n                          bool already_has_close,\n                          size_t pos)\n{\n  FILE *f = fopen(\"/tmp/logs/2199.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f,\n          \"[%s] resp=%p value=\"\"%s\"\" value_len=%zu old_value_len=%zu buf_size=%zu norm_len=%zu value_has_close=%d already_has_close=%d pos=%zu hdr=%p hdr->value=%p hdr->value_size=%zu\\n\",\n          tag,\n          (void *) response,\n          (value != NULL) ? value : \"(null)\",\n          value_len,\n          old_value_len,\n          buf_size,\n          norm_len,\n          (int) value_has_close,\n          (int) already_has_close,\n          pos,\n          (void *) hdr,\n          (void *) (hdr ? hdr->value : NULL),\n          (hdr ? hdr->value_size : 0));\n  fclose(f);\n}\n\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  /* Entry log */\n  mhd_log_probe(\"ENTRY\", response, value, NULL, 0, 0, 0, 0, false, false, 0);\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n  {\n    mhd_log_probe(\"REJECT_CRLF_IN_VALUE\", response, value, NULL, 0, 0, 0, 0, false, false, 0);\n    return MHD_NO;\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n    mhd_log_probe(\"HDR_PRESENT\", response, value, hdr, 0, 0, 0, 0, false, already_has_close, 0);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_log_probe(\"HDR_ABSENT\", response, value, NULL, 0, 0, 0, 0, false, already_has_close, 0);\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  /* Log after computing old value length */\n  mhd_log_probe(\"AFTER_OLD_VALUE_LEN\", response, value, hdr, 0, old_value_len, 0, 0, false, already_has_close, 0);\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n  {\n    mhd_log_probe(\"REJECT_VALUE_TOO_LONG\", response, value, hdr, value_len, old_value_len, 0, 0, false, already_has_close, 0);\n    return MHD_NO;\n  }\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n  {\n    mhd_log_probe(\"REJECT_NORM_TOO_LONG\", response, value, hdr, value_len, old_value_len, 0, norm_len, false, already_has_close, 0);\n    return MHD_NO;\n  }\n  buf_size = old_value_len + (size_t) norm_len;\n\n  /* Log computed lengths */\n  mhd_log_probe(\"LENGTHS_COMPUTED\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, false, already_has_close, 0);\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n  {\n    mhd_log_probe(\"MALLOC_FAILED\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, false, already_has_close, 0);\n    return MHD_NO;\n  }\n  mhd_log_probe(\"MALLOC_OK\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, false, already_has_close, 0);\n\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      mhd_log_probe(\"NORM_NEGATIVE\", response, value, hdr, value_len, old_value_len, buf_size, 0, value_has_close, already_has_close, 0);\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n\n    /* Log after close-token removal */\n    mhd_log_probe(\"AFTER_REMOVE_CLOSE\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, 0);\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    mhd_log_probe(\"REJECT_UPGRADE_WITH_CLOSE\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, 0);\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      mhd_log_probe(\"NORM_EMPTY_NO_CLOSE\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, 0);\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      mhd_log_probe(\"NORM_EMPTY_ALREADY_HAS_CLOSE\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, 0);\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n\n    /* Log state before inserting close */\n    mhd_log_probe(\"ABOUT_INSERT_CLOSE_PRE\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, pos);\n\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n\n    /* Log state after inserting close */\n    mhd_log_probe(\"AFTER_INSERT_CLOSE\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, pos);\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n\n    /* Log before copying old hdr->value */\n    mhd_log_probe(\"ABOUT_COPY_OLD_PRE\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, pos);\n\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n\n    /* Log after copying old hdr->value */\n    mhd_log_probe(\"ABOUT_COPY_OLD_POST\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, pos);\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n\n  /* Log final state prior to termination */\n  mhd_log_probe(\"FINAL_BEFORE_TERMINATE\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, pos);\n\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        mhd_log_probe(\"INSERTED_NEW_HDR\", response, value, new_hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, pos);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    mhd_log_probe(\"FAILED_INSERT_NEW_HDR\", response, value, NULL, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, pos);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  mhd_log_probe(\"UPDATING_EXISTING_HDR_PRE\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, pos);\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  mhd_log_probe(\"UPDATING_EXISTING_HDR_POST\", response, value, hdr, value_len, old_value_len, buf_size, norm_len, value_has_close, already_has_close, pos);\n  return MHD_YES;\n}\n"
}