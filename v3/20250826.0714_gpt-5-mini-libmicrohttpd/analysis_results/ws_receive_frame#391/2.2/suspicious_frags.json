{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "masks[1] = frame[idx_first_mask + 1];",
    "idx_first_mask = 2;",
    "mask = frame[1];",
    "idx_first_mask = 10;",
    "flength = mask & 0x7F;",
    "msg = malloc (data_length + 1);",
    "masks[2] = frame[idx_first_mask + 2];",
    "masks[0] = frame[idx_first_mask + 0];",
    "*length = (ssize_t) data_length;",
    "msg[j] = '\\0';",
    "msg = NULL;",
    "idx_first_mask = 4;",
    "idx_first_data = (unsigned char) (idx_first_mask + 4);",
    "for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }",
    "masks[3] = frame[idx_first_mask + 3];"
  ],
  "explanation": "Other fragments were not included because they do not exhibit characteristics of dead code (operations executed whose removal would not affect program behaviour) or they are required to produce observable effects: - Declarations (types and variable names) are necessary for storage and use and are not executable operations by themselves. - The conditional branches (if/else if/else) and the assignments to *type are observable effects relied on by callers, so they are not candidates for dead code. - The loop indices (i, j) and their use in the XOR decoding loop are used to build the returned message; the loop body is clearly used to produce output when msg is allocated. - The return statement and the various uses of frame[], *length and msg produce externally observable behaviour (returned pointer and modified length/type), so they are not dead. - The mask/masks usage and malloc-related operations were highlighted above because there are execution paths (e.g. malloc failure, zero data_length) where some of those assignments may be executed yet have no externally observable effect; those warrants investigation under MISRA C 2023 Rule 2.2. All other statements either directly affect the function's observable behaviour or are required initializations and therefore were not flagged."
}