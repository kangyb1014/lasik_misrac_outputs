{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "masks[0] = frame[idx_first_mask + 0];\nmasks[1] = frame[idx_first_mask + 1];\nmasks[2] = frame[idx_first_mask + 2];\nmasks[3] = frame[idx_first_mask + 3];",
    "if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }",
    "if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))",
    "return msg;",
    "idx_first_data = (unsigned char) (idx_first_mask + 4);",
    "else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))",
    "for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }",
    "else\n  {\n    *type = frame[0] & 0x0F;\n  }",
    "msg = malloc (data_length + 1);"
  ],
  "explanation": "I selected the conditional branches and key statements that could be statically or logically unreachable depending on external definitions or protocol assumptions (opcode/mask encodings, values of WS_FIN/WS_OPCODE_* macros, and how flength is interpreted). These fragments should be investigated to determine whether some branches can never be taken (violating MISRA Rule 2.1) under the project\u2019s actual macro/constant definitions and expected input framing. Other code fragments do not need investigation for unreachable-code concerns: variable declarations and initializations (e.g. the local variable definitions and msg = NULL), the mask/flength extraction (mask = frame[1]; flength = mask & 0x7F;), the computation of data_length, the malloc NULL check and guarded use of msg, the assignment *length = (ssize_t) data_length and the nul-termination msg[j] = '\\0' are straightforward, reachable in normal control flow, and do not by themselves introduce statically unreachable code. Likewise, simple assignments like *type = WS_OPCODE_TEXT_FRAME and *type = WS_OPCODE_CON_CLOSE_FRAME inside the corresponding branches are reachable if their branch conditions can be true and so were not separately listed."
}