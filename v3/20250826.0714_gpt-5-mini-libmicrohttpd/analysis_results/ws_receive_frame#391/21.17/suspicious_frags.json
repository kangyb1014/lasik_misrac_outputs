{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "masks[1] = frame[idx_first_mask + 1];",
    "idx_first_mask = 4;",
    "idx_first_data = (unsigned char) (idx_first_mask + 4);",
    "for (i = idx_first_data, j = 0; i < *length; i++, j++)",
    "if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))",
    "msg[j] = '\\0';",
    "*length = (ssize_t) data_length;",
    "mask = frame[1];",
    "*type = frame[0] & 0x0F;",
    "msg[j] = frame[i] ^ masks[j % 4];",
    "masks[3] = frame[idx_first_mask + 3];",
    "idx_first_mask = 10;",
    "if (flength == 126)",
    "flength = mask & 0x7F;",
    "data_length = (size_t) *length - idx_first_data;",
    "masks[2] = frame[idx_first_mask + 2];",
    "masks[0] = frame[idx_first_mask + 0];",
    "else if (flength == 127)",
    "msg = malloc (data_length + 1);"
  ],
  "explanation": "Only fragments that perform indexing into frame, masks, or msg, or that compute/convert lengths and allocate memory, can lead to out-of-bounds accesses relevant to Rule 21.17. The listed fragments cover all such reads/writes and the length calculation/conversion that affect bounds. Other lines in the function (variable declarations, initializations like msg = NULL, the branch that sets *type = WS_OPCODE_CON_CLOSE_FRAME, return msg, loop control punctuation, and constant assignments such as idx_first_mask = 2) do not perform pointer/array indexing or call string.h functions and therefore do not directly affect potential out-of-bounds accesses required by this MISRA rule. Consequently they do not need further investigation for Rule 21.17."
}