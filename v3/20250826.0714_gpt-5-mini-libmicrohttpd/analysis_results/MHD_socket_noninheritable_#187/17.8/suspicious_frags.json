{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_socket_noninheritable_:\n```c\nint\nMHD_socket_noninheritable_ (MHD_socket sock)\n{\n#if defined(MHD_POSIX_SOCKETS)\n  int flags;\n\n  flags = fcntl (sock,\n                 F_GETFD);\n  if (-1 == flags)\n    return 0;\n\n  if ( ((flags | FD_CLOEXEC) != flags) &&\n       (0 != fcntl (sock,\n                    F_SETFD,\n                    flags | FD_CLOEXEC)) )\n    return 0;\n#elif defined(MHD_WINSOCK_SOCKETS)\n  if (! SetHandleInformation ((HANDLE) sock,\n                              HANDLE_FLAG_INHERIT,\n                              0))\n    return 0;\n#endif /* MHD_WINSOCK_SOCKETS */\n  return ! 0;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (! SetHandleInformation ((HANDLE) sock,\n                              HANDLE_FLAG_INHERIT,\n                              0))",
    "(0 != fcntl (sock,\n                    F_SETFD,\n                    flags | FD_CLOEXEC))",
    "flags = fcntl (sock,\n                 F_GETFD);",
    "int\nMHD_socket_noninheritable_ (MHD_socket sock)\n{"
  ],
  "explanation": "The MISRA rule concerns modification of the function parameter 'sock'. I inspected the whole function: there are no assignments to 'sock', no increments/decrements, no pointer arithmetic, and 'sock' is never used as an lvalue. The only uses of 'sock' are as arguments to fcntl and SetHandleInformation (and a cast to HANDLE). Passing a parameter by value to a function call does not modify the parameter itself. The local variable 'flags' is separate and does not affect the parameter. The preprocessor branches only select between POSIX and Win32 system calls; in either branch the function parameter is not assigned to. Therefore, aside from the listed call sites (which should be checked to verify type/semantics of MHD_socket and called APIs), there are no other fragments in this function that could violate MISRA C 2023 Rule 17.8."
}