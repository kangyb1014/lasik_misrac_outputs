{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of SHA1Input:\n```c\nstatic enum SHA1_RESULT\nSHA1Input (struct SHA1Context *context, const unsigned char *message_array,\n           unsigned length)\n{\n  if (! length)\n  {\n    return SHA1_RESULT_SUCCESS;\n  }\n  if (! context || ! message_array)\n  {\n    return SHA1_RESULT_NULL;\n  }\n  if (context->computed)\n  {\n    context->corrupted = 1;\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  if (context->corrupted)\n  {\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  while (length-- && ! context->corrupted)\n  {\n    context->message_block[context->message_block_index++]\n      = (*message_array & 0xFF);\n    context->length_low += 8;\n    if (context->length_low == 0)\n    {\n      context->length_high++;\n      if (context->length_high == 0)\n      {\n        context->corrupted = 1;\n      }\n    }\n    if (context->message_block_index == 64)\n    {\n      SHA1ProcessMessageBlock (context);\n    }\n    message_array++;\n  }\n  return SHA1_RESULT_SUCCESS;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No controlling expressions in the provided code are invariant; therefore no fragments need to be investigated for MISRA C 2023 Rule 14.3. Reasoning by control construct:\n\n- if (! length) { ... }\n  - Depends on the function parameter length; not invariant.\n\n- if (! context || ! message_array) { ... }\n  - Depends on the pointer parameters; not invariant.\n\n- if (context->computed) { context->corrupted = 1; return ... }\n  - Depends on the runtime field context->computed; not invariant. Also this branch mutates context->corrupted and returns, so it cannot be a latent invariant controller later.\n\n- if (context->corrupted) { return ... }\n  - Depends on context->corrupted; its value can be changed earlier (e.g., by the previous branch or inside the loop), so it is not invariant.\n\n- while (length-- && ! context->corrupted) { ... }\n  - The expression contains length-- (post-decrement) so length changes on each evaluation; message_array++ and other body actions can also change state that affects the second operand (! context->corrupted). An initial guard if (! length) prevents entering the function with length == 0, but that does not make the expression invariant. Thus the loop controlling expression is not invariant.\n\n- if (context->length_low == 0) { context->length_high++; if (context->length_high == 0) { context->corrupted = 1; } }\n  - These tests depend on fields that are modified in the loop (context->length_low and context->length_high are updated), so they are not invariant.\n\n- if (context->message_block_index == 64) { SHA1ProcessMessageBlock(context); }\n  - message_block_index is incremented in the loop (context->message_block_index++), and SHA1ProcessMessageBlock presumably modifies state (including resetting the index), so this controlling expression is not invariant.\n\nGiven each controlling expression depends on parameters or on state that is mutated either before or within the loop, none are invariant and therefore no fragments were selected for investigation under Rule 14.3."
}