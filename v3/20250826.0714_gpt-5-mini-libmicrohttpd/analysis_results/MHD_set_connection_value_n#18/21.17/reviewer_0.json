{
  "user_message": "An agent A claimed that the following MHD_set_connection_value_n code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value_n.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nstrlen is called on key and value without first ensuring the pointed-to objects are NUL-terminated within their bounds. For example, if key != NULL points to a buffer of length key_size that is not NUL-terminated inside that buffer, calling strlen(key) will read past the buffer boundary (and similarly for value). This can produce out-of-bounds accesses, violating MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The calls to strlen(key) and strlen(value) may read past the provided buffers if those buffers are not NUL-terminated within key_size/value_size. strlen scans until it finds a NUL byte, so invoking it before confirming a NUL within the supplied bounds can produce out-of-bounds accesses (undefined behavior). The function only compares the result of strlen to the supplied sizes after calling strlen, so that check does not prevent the initial out-of-bounds read. The same issue applies to both key and value. If the function had an explicit, enforced precondition that key and value are NUL-terminated within their indicated sizes then the calls would be safe, but no such precondition is enforced in the code shown, and MISRA C 2023 Rule 21.17 requires that use of string.h functions must not result in out-of-bounds accesses. Suggested fixes: verify NUL within the provided size (e.g. use memchr to look for '\\0' within key_size/value_size) or use a bounded length routine that guarantees not to read past the buffer, or require and document NUL-termination as a caller-enforced precondition and enforce it at the API boundary. Verdict: the reported violation is correct."
}