{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If key is non-NULL but not NUL-terminated within the accessible object bounds, calling strlen(key) may scan past the end of the object. Example: key points to a buffer of length key_size==3 containing {'a','b','c'} (no '\\0'); strlen(key) will read beyond those 3 bytes and thus access out-of-bounds. This violates MISRA C 2023 Rule 21.17. (Use strnlen(key, key_size) or memchr to ensure termination within key_size.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value_n code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helpers: write logs to /tmp/logs/189.txt. */\nstatic void ensure_log_dir(void)\n{\n    /* best-effort create directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic size_t safe_strnlen(const char *s, size_t maxlen)\n{\n    if (s == NULL)\n        return 0;\n    /* Use memchr to avoid scanning past maxlen bytes. */\n    const void *p = memchr(s, '\\0', maxlen);\n    if (p)\n        return (size_t)((const char *)p - s);\n    return maxlen;\n}\n\nstatic void probe_log(const char *stage,\n                      const struct MHD_Connection *connection,\n                      int kind,\n                      const char *key, size_t key_size, size_t len_key_safe, size_t len_key_actual,\n                      const char *value, size_t value_size, size_t len_value_safe, size_t len_value_actual)\n{\n    FILE *f;\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/189.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"STAGE=%s\\n\", stage);\n    fprintf(f, \" connection=%p\\n\", (const void *)connection);\n    fprintf(f, \" kind=%d\\n\", kind);\n\n    fprintf(f, \" key=%p key_size=%zu\\n\", (const void *)key, key_size);\n    fprintf(f, \"  safe_len_within_key_size=%zu\\n\", len_key_safe);\n    fprintf(f, \"  strlen_reported_len=%zu\\n\", len_key_actual);\n\n    fprintf(f, \" value=%p value_size=%zu\\n\", (const void *)value, value_size);\n    fprintf(f, \"  safe_len_within_value_size=%zu\\n\", len_value_safe);\n    fprintf(f, \"  strlen_reported_len=%zu\\n\", len_value_actual);\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Compute a safe length bounded by the provided sizes (no out-of-bounds).\n     This helps log whether the buffer contains a NUL within the supplied size. */\n  size_t len_key_safe = key ? safe_strnlen(key, key_size) : 0;\n  size_t len_value_safe = value ? safe_strnlen(value, value_size) : 0;\n\n  /* Preserve original behavior: call strlen as the original code does. */\n  size_t len_key_actual = key ? strlen(key) : 0;\n  size_t len_value_actual = value ? strlen(value) : 0;\n\n  /* Log state before the check so other agents can observe the inputs and\n     the safe vs. actual lengths. This will capture the scenario where\n     len_key_safe == key_size (no NUL within bounds) but strlen(key)\n     may return a larger value after scanning out-of-bounds. */\n  probe_log(\"before_check\",\n            connection, (int)kind,\n            key, key_size, len_key_safe, len_key_actual,\n            value, value_size, len_value_safe, len_value_actual);\n\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n  {\n    /* Log the decision to return MHD_NO with current state for reproduction. */\n    probe_log(\"return_MHD_NO\",\n              connection, (int)kind,\n              key, key_size, len_key_safe, len_key_actual,\n              value, value_size, len_value_safe, len_value_actual);\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  /* Log transition to the nocheck function call. */\n  probe_log(\"call_nocheck\",\n            connection, (int)kind,\n            key, key_size, len_key_safe, len_key_actual,\n            value, value_size, len_value_safe, len_value_actual);\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n"
}