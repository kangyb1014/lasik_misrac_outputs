{
  "user_message": "An agent A claimed that the following MHD_set_connection_value_n code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value_n.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf value is non-NULL but not NUL-terminated within its allocated/object bounds (e.g. a binary buffer of length value_size with no terminating '\\0'), the call to strlen(value) will read past the end of that object searching for a NUL, potentially accessing memory beyond the object. For example: char buf[3] = {'a','b','c'}; value = buf; value_size = 3; strlen(value) will read out of bounds. This violates the rule.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. strlen requires a NUL-terminated string and will scan memory until it finds a '\\0'; if the caller passes a non-NULL pointer that does not contain a terminating NUL within its object bounds (e.g. a binary buffer of length value_size), the call strlen(value) can read past the end of that object and thus violate MISRA C 2023 Rule 21.17. The ternary expression (value ? strlen(value) : 0) still invokes strlen whenever value != NULL, so nothing in the code prevents the out-of-bounds read in the scenario given (char buf[3] = {'a','b','c'}; value = buf; value_size = 3). To comply, the implementation must not call strlen on potentially non-terminated buffers \u2014 either require/document NUL-termination for these parameters or use a bounded check (e.g. memchr to look for '\\0' within value_size, or an explicit bounded scan) before relying on the length."
}