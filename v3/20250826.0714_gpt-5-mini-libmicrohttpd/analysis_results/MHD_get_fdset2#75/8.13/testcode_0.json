{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct MHD_Daemon *daemon' is only read (checked for NULL, queried via MHD_D_IS_USING_THREADS_/MHD_D_IS_USING_POLL_, read daemon->fdset_size, daemon->shutdown, daemon->epoll_fd, and passed to logging) and is not modified in this function. According to MISRA C 2023 Rule 8.13 it should be declared as 'const struct MHD_Daemon *daemon' when possible. The other pointer parameters (fd_set *, MHD_socket *) are used as outputs/modified by this or called functions and therefore need not be const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_fdset2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_fdset2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_fdset2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset2 (struct MHD_Daemon *daemon,\n                fd_set *read_fd_set,\n                fd_set *write_fd_set,\n                fd_set *except_fd_set,\n                MHD_socket *max_fd,\n                unsigned int fd_setsize)\n{\n  if ( (NULL == daemon) ||\n       (NULL == read_fd_set) ||\n       (NULL == write_fd_set) ||\n       MHD_D_IS_USING_THREADS_ (daemon) ||\n       MHD_D_IS_USING_POLL_ (daemon))\n    return MHD_NO;\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_get_fdset2() called with except_fd_set \"\n                 \"set to NULL. Such behavior is unsupported.\\n\"));\n  }\n#endif\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_get_fdset2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (daemon->shutdown)\n      return MHD_YES;\n\n    /* we're in epoll mode, use the epoll FD as a stand-in for\n       the entire event set */\n\n    return MHD_add_to_fd_set_ (daemon->epoll_fd,\n                               read_fd_set,\n                               max_fd,\n                               (int) fd_setsize) ? MHD_YES : MHD_NO;\n  }\n#endif\n\n  return internal_get_fdset2 (daemon,\n                              read_fd_set,\n                              write_fd_set,\n                              except_fd_set,\n                              max_fd,\n                              (int) fd_setsize);\n}\n```\n</target_code>\nPlease provide the modified MHD_get_fdset2 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <limits.h>\n\n/* Probe helpers to log control flow and state. These functions only\n   append to /tmp/logs/753.txt and never modify program state. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/753.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Log selected fields of daemon if available. Keep access guarded by\n   NULL check to avoid dereferencing a NULL pointer. */\nstatic void mhd_probe_log_daemon(const char *prefix, struct MHD_Daemon *daemon)\n{\n  FILE *f = fopen(\"/tmp/logs/753.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  if (daemon == NULL)\n  {\n    fprintf(f, \"%s daemon=NULL\\n\", prefix);\n  }\n  else\n  {\n    /* Cast fields to int for printing portability. */\n    fprintf(f, \"%s daemon=%p shutdown=%d epoll_fd=%d fdset_size=%d fdset_size_set_by_app=%d\\n\",\n            prefix,\n            (void *) daemon,\n            (int) daemon->shutdown,\n            (int) daemon->epoll_fd,\n            (int) daemon->fdset_size,\n            (int) daemon->fdset_size_set_by_app);\n  }\n\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset2 (struct MHD_Daemon *daemon,\n                fd_set *read_fd_set,\n                fd_set *write_fd_set,\n                fd_set *except_fd_set,\n                MHD_socket *max_fd,\n                unsigned int fd_setsize)\n{\n  /* Entry probe */\n  mhd_probe_log(\"MHD_get_fdset2 entry: daemon=%p read_fd_set=%p write_fd_set=%p except_fd_set=%p max_fd=%p fd_setsize=%u\",\n                (void *) daemon,\n                (void *) read_fd_set,\n                (void *) write_fd_set,\n                (void *) except_fd_set,\n                (void *) max_fd,\n                fd_setsize);\n  mhd_probe_log_daemon(\"MHD_get_fdset2 initial daemon state:\", daemon);\n\n  if ( (NULL == daemon) ||\n       (NULL == read_fd_set) ||\n       (NULL == write_fd_set) ||\n       MHD_D_IS_USING_THREADS_ (daemon) ||\n       MHD_D_IS_USING_POLL_ (daemon))\n  {\n    /* Log the specific reason(s) for early return. */\n    mhd_probe_log(\"MHD_get_fdset2 early return MHD_NO: conditions -> daemon==%s, read_fd_set==%s, write_fd_set==%s, using_threads=%d, using_poll=%d\",\n                  (daemon == NULL) ? \"NULL\" : \"non-NULL\",\n                  (read_fd_set == NULL) ? \"NULL\" : \"non-NULL\",\n                  (write_fd_set == NULL) ? \"NULL\" : \"non-NULL\",\n                  MHD_D_IS_USING_THREADS_ (daemon) ? 1 : 0,\n                  MHD_D_IS_USING_POLL_ (daemon) ? 1 : 0);\n    mhd_probe_log_daemon(\"MHD_get_fdset2 daemon state at early return:\", daemon);\n    return MHD_NO;\n  }\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    /* Log unexpected NULL except_fd_set when messages enabled */\n    mhd_probe_log(\"MHD_get_fdset2 notice: except_fd_set is NULL (unsupported)\");\n    MHD_DLOG (daemon,\n              _ (\"MHD_get_fdset2() called with except_fd_set \"\n                 \"set to NULL. Such behavior is unsupported.\\n\"));\n  }\n#endif\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n  {\n    mhd_probe_log(\"MHD_get_fdset2 early return MHD_NO: fd_setsize == 0\");\n    return MHD_NO;\n  }\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    /* Log the condition and whether app set the fdset_size. */\n    mhd_probe_log(\"MHD_get_fdset2 fd_setsize (%u) less than daemon->fdset_size (%d), daemon->fdset_size_set_by_app=%d\",\n                  fd_setsize, daemon->fdset_size, (int) daemon->fdset_size_set_by_app);\n\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_get_fdset2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    mhd_probe_log(\"MHD_get_fdset2 early return MHD_NO: FD_SETSIZE (%d) > fd_setsize (%u)\", (int) FD_SETSIZE, fd_setsize);\n    return MHD_NO;\n  }\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    mhd_probe_log_daemon(\"MHD_get_fdset2 epoll branch daemon state:\", daemon);\n    if (daemon->shutdown)\n    {\n      mhd_probe_log(\"MHD_get_fdset2 epoll branch early return MHD_YES: daemon->shutdown == %d\", (int) daemon->shutdown);\n      return MHD_YES;\n    }\n\n    /* we're in epoll mode, use the epoll FD as a stand-in for\n       the entire event set */\n    mhd_probe_log(\"MHD_get_fdset2 calling MHD_add_to_fd_set_ with epoll_fd=%d fd_setsize=%d\",\n                  (int) daemon->epoll_fd, (int) fd_setsize);\n\n    /* Capture result for logging without changing semantics. */\n    int add_res = MHD_add_to_fd_set_ (daemon->epoll_fd,\n                                      read_fd_set,\n                                      max_fd,\n                                      (int) fd_setsize) ? 1 : 0;\n    mhd_probe_log(\"MHD_get_fdset2 MHD_add_to_fd_set_ returned %d\", add_res);\n    return add_res ? MHD_YES : MHD_NO;\n  }\n#endif\n\n  mhd_probe_log(\"MHD_get_fdset2 delegating to internal_get_fdset2: daemon=%p read_fd_set=%p write_fd_set=%p except_fd_set=%p max_fd=%p fd_setsize=%d\",\n                (void *) daemon,\n                (void *) read_fd_set,\n                (void *) write_fd_set,\n                (void *) except_fd_set,\n                (void *) max_fd,\n                (int) fd_setsize);\n  mhd_probe_log_daemon(\"MHD_get_fdset2 daemon state before internal_get_fdset2:\", daemon);\n\n  return internal_get_fdset2 (daemon,\n                              read_fd_set,\n                              write_fd_set,\n                              except_fd_set,\n                              max_fd,\n                              (int) fd_setsize);\n}\n"
}