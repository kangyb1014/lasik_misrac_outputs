{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment passes string literals/translated strings to MHD_DLOG via _(). If the translation macro/function _() or MHD_DLOG prototype use non-const pointer types (for example gettext historically returns char * or MHD_DLOG is declared as taking char *format), then a pointer to a non-const char is used where a const-qualified pointer is possible. In that case the code violates MISRA C 2023 Rule 8.13 (the format/translation strings should be const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_fdset2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_fdset2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_fdset2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset2 (struct MHD_Daemon *daemon,\n                fd_set *read_fd_set,\n                fd_set *write_fd_set,\n                fd_set *except_fd_set,\n                MHD_socket *max_fd,\n                unsigned int fd_setsize)\n{\n  if ( (NULL == daemon) ||\n       (NULL == read_fd_set) ||\n       (NULL == write_fd_set) ||\n       MHD_D_IS_USING_THREADS_ (daemon) ||\n       MHD_D_IS_USING_POLL_ (daemon))\n    return MHD_NO;\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_get_fdset2() called with except_fd_set \"\n                 \"set to NULL. Such behavior is unsupported.\\n\"));\n  }\n#endif\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_get_fdset2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (daemon->shutdown)\n      return MHD_YES;\n\n    /* we're in epoll mode, use the epoll FD as a stand-in for\n       the entire event set */\n\n    return MHD_add_to_fd_set_ (daemon->epoll_fd,\n                               read_fd_set,\n                               max_fd,\n                               (int) fd_setsize) ? MHD_YES : MHD_NO;\n  }\n#endif\n\n  return internal_get_fdset2 (daemon,\n                              read_fd_set,\n                              write_fd_set,\n                              except_fd_set,\n                              max_fd,\n                              (int) fd_setsize);\n}\n```\n</target_code>\nPlease provide the modified MHD_get_fdset2 code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to record messages and control flow to /tmp/logs/753.txt */\nstatic void mhd_probe_log(const char *event,\n                          const void *msg_ptr,\n                          const char *msg_text,\n                          const void *daemon_ptr,\n                          unsigned int fd_setsize,\n                          int daemon_fdset_size)\n{\n  FILE *f = fopen(\"/tmp/logs/753.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  fprintf(f, \"EVENT: %s\\n\", event ? event : \"(null)\");\n  fprintf(f, \"MESSAGE_PTR: %p\\n\", msg_ptr);\n  fprintf(f, \"MESSAGE_TEXT: %s\\n\", msg_text ? msg_text : \"(null)\");\n  fprintf(f, \"DAEMON_PTR: %p\\n\", daemon_ptr);\n  fprintf(f, \"fd_setsize: %u\\n\", fd_setsize);\n  fprintf(f, \"daemon->fdset_size: %d\\n\", daemon_fdset_size);\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset2 (struct MHD_Daemon *daemon,\n                fd_set *read_fd_set,\n                fd_set *write_fd_set,\n                fd_set *except_fd_set,\n                MHD_socket *max_fd,\n                unsigned int fd_setsize)\n{\n  if ( (NULL == daemon) ||\n       (NULL == read_fd_set) ||\n       (NULL == write_fd_set) ||\n       MHD_D_IS_USING_THREADS_ (daemon) ||\n       MHD_D_IS_USING_POLL_ (daemon))\n    return MHD_NO;\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    /* Capture the translation string and log pointer + text before calling MHD_DLOG */\n    const char *mhd_msg_probe = _ (\"MHD_get_fdset2() called with except_fd_set \"\n                                  \"set to NULL. Such behavior is unsupported.\\n\");\n    mhd_probe_log(\"except_fd_set_null\",\n                  (const void *) mhd_msg_probe,\n                  mhd_msg_probe,\n                  (const void *) daemon,\n                  fd_setsize,\n                  0);\n\n    MHD_DLOG (daemon,\n              mhd_msg_probe);\n  }\n#endif\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      const char *mhd_msg_probe = _ (\"%s() called with fd_setsize (%u) \" \\\n                                     \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                                     \"Some socket FDs may be not processed. \" \\\n                                     \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\");\n      /* Log pointer and resolved text */\n      mhd_probe_log(\"fd_setsize_lt_app_set\",\n                    (const void *) mhd_msg_probe,\n                    mhd_msg_probe,\n                    (const void *) daemon,\n                    fd_setsize,\n                    daemon->fdset_size);\n\n      MHD_DLOG (daemon,\n                mhd_msg_probe,\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      const char *mhd_msg_probe = _ (\"%s() called with fd_setsize (%u) \" \\\n                                     \"less than FD_SETSIZE used by MHD (%d). \" \\\n                                     \"Some socket FDs may be not processed. \" \\\n                                     \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\");\n      mhd_probe_log(\"fd_setsize_lt_mhd_fdset\",\n                    (const void *) mhd_msg_probe,\n                    mhd_msg_probe,\n                    (const void *) daemon,\n                    fd_setsize,\n                    daemon->fdset_size);\n\n      MHD_DLOG (daemon,\n                mhd_msg_probe,\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    const char *mhd_msg_probe = _ (\"%s() called with fd_setsize (%u) \" \\\n                                   \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                                   \"platform.\\n\");\n    mhd_probe_log(\"fd_setsize_lt_platform_fdset\",\n                  (const void *) mhd_msg_probe,\n                  mhd_msg_probe,\n                  (const void *) daemon,\n                  fd_setsize,\n                  (int) FD_SETSIZE);\n\n    MHD_DLOG (daemon,\n              mhd_msg_probe,\n              \"MHD_get_fdset2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (daemon->shutdown)\n      return MHD_YES;\n\n    /* we're in epoll mode, use the epoll FD as a stand-in for\n       the entire event set */\n\n    return MHD_add_to_fd_set_ (daemon->epoll_fd,\n                               read_fd_set,\n                               max_fd,\n                               (int) fd_setsize) ? MHD_YES : MHD_NO;\n  }\n#endif\n\n  return internal_get_fdset2 (daemon,\n                              read_fd_set,\n                              write_fd_set,\n                              except_fd_set,\n                              max_fd,\n                              (int) fd_setsize);\n}\n"
}