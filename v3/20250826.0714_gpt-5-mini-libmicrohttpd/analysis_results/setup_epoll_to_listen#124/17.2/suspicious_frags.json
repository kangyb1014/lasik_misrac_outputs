{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of setup_epoll_to_listen:\n```c\nstatic enum MHD_Result\nsetup_epoll_to_listen (struct MHD_Daemon *daemon)\n{\n  struct epoll_event event;\n  MHD_socket ls;\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n  mhd_assert (0 == (daemon->options & MHD_USE_THREAD_PER_CONNECTION));\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) || \\\n               MHD_ITC_IS_VALID_ (daemon->itc) );\n  daemon->epoll_fd = setup_epoll_fd (daemon);\n  if (! MHD_D_IS_USING_THREADS_ (daemon)\n      && (0 != (daemon->options & MHD_USE_AUTO)))\n  {\n    /* Application requested \"MHD_USE_AUTO\", probably MHD_get_fdset() will be\n       used.\n       Make sure that epoll FD is suitable for fd_set.\n       Actually, MHD_get_fdset() is allowed for MHD_USE_EPOLL direct,\n       but most probably direct requirement for MHD_USE_EPOLL means that\n       epoll FD will be used directly. This logic is fuzzy, but better\n       than nothing with current MHD API. */\n    if (! MHD_D_DOES_SCKT_FIT_FDSET_ (daemon->epoll_fd, daemon))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"The epoll FD is too large to be used with fd_set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return MHD_NO;\n    }\n  }\n  if (-1 == daemon->epoll_fd)\n    return MHD_NO;\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (0 != (MHD_ALLOW_UPGRADE & daemon->options))\n  {\n    daemon->epoll_upgrade_fd = setup_epoll_fd (daemon);\n    if (MHD_INVALID_SOCKET == daemon->epoll_upgrade_fd)\n      return MHD_NO;\n  }\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n  {\n    event.events = EPOLLIN | EPOLLRDHUP;\n    event.data.ptr = daemon;\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        ls,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Call to epoll_ctl failed: %s\\n\"),\n                MHD_socket_last_strerr_ ());\n#endif\n      return MHD_NO;\n    }\n    daemon->listen_socket_in_epoll = true;\n  }\n\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    event.events = EPOLLIN | EPOLLRDHUP;\n    event.data.ptr = _MHD_DROP_CONST (epoll_itc_marker);\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        MHD_itc_r_fd_ (daemon->itc),\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Call to epoll_ctl failed: %s\\n\"),\n                MHD_socket_last_strerr_ ());\n#endif\n      return MHD_NO;\n    }\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert (0 == (daemon->options & MHD_USE_THREAD_PER_CONNECTION));",
    "daemon->epoll_fd = setup_epoll_fd (daemon);",
    "if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        ls,\n                        &event))",
    "mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \n               (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) || \n               MHD_ITC_IS_VALID_ (daemon->itc) );",
    "event.data.ptr = _MHD_DROP_CONST (epoll_itc_marker);",
    "MHD_DLOG (daemon,\n                _ (\"Call to epoll_ctl failed: %s\\n\"),\n                MHD_socket_last_strerr_ ());",
    "MHD_socket_last_strerr_ ()",
    "mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));",
    "MHD_ITC_IS_VALID_ (daemon->itc)",
    "if (! MHD_D_DOES_SCKT_FIT_FDSET_ (daemon->epoll_fd, daemon))",
    "if (! MHD_D_IS_USING_THREADS_ (daemon)\n      && (0 != (daemon->options & MHD_USE_AUTO)))",
    "if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        MHD_itc_r_fd_ (daemon->itc),\n                        &event))",
    "MHD_itc_r_fd_ (daemon->itc)",
    "daemon->epoll_upgrade_fd = setup_epoll_fd (daemon);",
    "MHD_DLOG (daemon,\n                _ (\"The epoll FD is too large to be used with fd_set.\\n\"));"
  ],
  "explanation": "I selected all function-like calls and macros in this function that could potentially expand to or invoke other functions (and thus possibly form a direct or indirect call back to setup_epoll_to_listen). These are the locations that need investigation for recursion: all mhd_assert uses (they may expand to functions), the setup_epoll_fd calls, MHD_D_DOES_SCKT_FIT_FDSET_, MHD_ITC_IS_VALID_, MHD_itc_r_fd_, _MHD_DROP_CONST (macro/function-like), MHD_DLOG and MHD_socket_last_strerr_, and the two epoll_ctl calls. \n\nFragments not included do not need investigation for Rule 17.2 because they contain no function calls and therefore cannot introduce recursion: local variable declarations (struct epoll_event event; MHD_socket ls;), simple assignments (event.events = EPOLLIN | EPOLLRDHUP; daemon->listen_socket_in_epoll = true; daemon->epoll_fd checks), bitwise/boolean expressions and comparisons (tests of daemon->options, daemon->was_quiesced, equality/inequality checks), return statements, preprocessor conditionals and comments. Those parts cannot by themselves call functions and so cannot create direct or indirect self-calls."
}