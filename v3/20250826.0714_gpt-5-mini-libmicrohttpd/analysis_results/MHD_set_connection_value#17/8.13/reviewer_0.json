{
  "user_message": "An agent A claimed that the following MHD_set_connection_value code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter is declared as 'struct MHD_Connection *connection' even though the shown implementation only forwards the pointer and does not modify the pointed object. If the function (and the callee MHD_set_connection_value_n_nocheck_) do not modify *connection, the parameter should be 'const struct MHD_Connection *connection' to express read\u2011only intent. As written, this is a violation of MISRA C 2023 Rule 8.13 unless the connection is actually modified elsewhere.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 advises that pointers should point to const-qualified types when possible (i.e. when the pointed-to object is not modified). From the single function shown we cannot determine whether the pointed object is actually non\u2011modifiable: this function simply forwards the connection pointer to MHD_set_connection_value_n_nocheck_. If that callee (or any other code reachable via that pointer) requires a non\u2011const pointer (or actually modifies *connection), then the non\u2011const parameter here is appropriate and there is no violation. Conversely, if neither this function nor the callee (and no other users) ever modify *connection, then the API could and arguably should use const, and leaving it non\u2011const would be contrary to the spirit of Rule 8.13.\n\nTherefore, given only the provided snippet and without the callee\u2019s prototype/behavior or wider API/compatibility constraints, the claim of a definite MISRA 8.13 violation is not proven. To decide conclusively, inspect MHD_set_connection_value_n_nocheck_ and other uses of the connection object: if none mutate *connection and the API can be changed, then the parameter should be const; otherwise the current declaration is acceptable."
}