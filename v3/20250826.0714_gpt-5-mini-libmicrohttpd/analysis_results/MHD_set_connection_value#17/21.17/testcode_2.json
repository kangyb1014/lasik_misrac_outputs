{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(key) after only checking key != NULL. If key is non-NULL but does not point to a NUL-terminated object (for example caller passes a pointer to a char buffer without a terminating '\\0', or a pointer into an object where no '\\0' occurs before the object end), strlen will read past the object's bounds. Thus the use of strlen can result in out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append a short log entry to /tmp/logs/179.txt.\n   This helper intentionally avoids inspecting the contents of the\n   memory pointed to by 'key' or 'value' to prevent introducing\n   additional out-of-bounds reads. It only logs pointer values,\n   nullness and computed lengths (after lengths are computed by\n   the original logic). */\nstatic void MHD_log_probe_pre(const char *key, const char *value)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (NULL == f)\n        return;\n    fprintf(f, \"[MHD_set_connection_value] entering; key=%p (%s), value=%p (%s)\\n\",\n            (const void *)key,\n            key ? \"non-NULL\" : \"NULL\",\n            (const void *)value,\n            value ? \"non-NULL\" : \"NULL\");\n    fprintf(f, \"[MHD_set_connection_value] about to compute lengths using strlen where non-NULL\\n\");\n    fclose(f);\n}\n\nstatic void MHD_log_probe_post(const char *key, const char *value, size_t key_len, size_t value_len)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (NULL == f)\n        return;\n    fprintf(f, \"[MHD_set_connection_value] computed lengths: key_len=%zu, value_len=%zu\\n\",\n            key_len, value_len);\n    fprintf(f, \"[MHD_set_connection_value] leaving\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  /* Log pre-state before performing the same strlen calls as original. */\n  MHD_log_probe_pre(key, value);\n\n  /* Preserve original logic: compute lengths using the same conditional\n     that the original implementation used (call strlen once per non-NULL).\n     We compute them into temporaries so we can log them without\n     introducing additional strlen calls. */\n  size_t key_len = (NULL != key) ? strlen(key) : 0;\n  size_t value_len = (NULL != value) ? strlen(value) : 0;\n\n  /* Log computed lengths (this will only be reached if strlen succeeded). */\n  MHD_log_probe_post(key, value, key_len, value_len);\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_len,\n                                              value,\n                                              value_len);\n}\n"
}