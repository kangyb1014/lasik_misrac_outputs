{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The calls to strlen(key) and strlen(value) are only guarded against NULL pointers, but there is no evidence in this fragment that key and value are guaranteed to point to NUL-terminated objects within their allocated bounds. If either pointer is non-NULL but not terminated within its allocated buffer (for example a pointer into a non-terminated byte array or a truncated/unspecified-length buffer), strlen will read past the object\u2019s bounds and cause an out-of-bounds access. This violates MISRA C 2023 Rule 21.17. (Same risk applies to both key and value.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  size_t key_len = 0u;\n  size_t value_len = 0u;\n\n  /* Probe logging to capture control flow and state for debugging the\n     potential strlen out-of-bounds scenario. Logs appended to\n     /tmp/logs/179.txt. This preserves original logic: strlen is only\n     invoked when the pointer is non-NULL, as in the original code. */\n  {\n    FILE *log = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (log != NULL)\n      {\n        fprintf(log, \"MHD_set_connection_value called: connection=%p kind=%d key=%p value=%p\\n\",\n                (void *) connection, (int) kind, (const void *) key, (const void *) value);\n\n        if (key != NULL)\n          {\n            /* same action as original: compute strlen only when key is non-NULL */\n            key_len = strlen(key);\n            fprintf(log, \"  key non-NULL: computed strlen(key)=%zu\\n\", key_len);\n          }\n        else\n          {\n            fprintf(log, \"  key is NULL\\n\");\n          }\n\n        if (value != NULL)\n          {\n            /* same action as original: compute strlen only when value is non-NULL */\n            value_len = strlen(value);\n            fprintf(log, \"  value non-NULL: computed strlen(value)=%zu\\n\", value_len);\n          }\n        else\n          {\n            fprintf(log, \"  value is NULL\\n\");\n          }\n\n        fprintf(log, \"  calling MHD_set_connection_value_n_nocheck_ with key_len=%zu value_len=%zu\\n\",\n                key_len, value_len);\n        fclose(log);\n      }\n  }\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_len,\n                                              value,\n                                              value_len);\n}\n"
}