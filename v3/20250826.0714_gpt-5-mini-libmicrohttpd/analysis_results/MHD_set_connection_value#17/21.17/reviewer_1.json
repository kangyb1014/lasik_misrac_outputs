{
  "user_message": "An agent A claimed that the following MHD_set_connection_value code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. The calls to strlen(key) and strlen(value) are only guarded against NULL pointers, but there is no evidence in this fragment that key and value are guaranteed to point to NUL-terminated objects within their allocated bounds. If either pointer is non-NULL but not terminated within its allocated buffer (for example a pointer into a non-terminated byte array or a truncated/unspecified-length buffer), strlen will read past the object\u2019s bounds and cause an out-of-bounds access. This violates MISRA C 2023 Rule 21.17. (Same risk applies to both key and value.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent\u2019s concern is technically correct as a potential fault: calling strlen on a non-NULL pointer that does not point to a NUL\u2011terminated character array can cause strlen to read past the object\u2019s bounds, which would violate MISRA C 2023 Rule 21.17. However, whether the code actually violates the rule cannot be determined from this fragment alone. If the public contract of MHD_set_connection_value guarantees that key and value are conventional NUL\u2011terminated C strings (i.e. the caller must pass NUL-terminated buffers), then calling strlen is compliant with 21.17. If no such precondition is established (or the implementation must accept non\u2011terminated buffers), then the use of strlen here is non\u2011compliant and should be fixed (for example, by requiring/Documenting NUL\u2011termination, passing explicit lengths, or using a bounded API). Therefore the agent\u2019s report as a definite violation is not correct without knowledge of the API contract; it describes a valid potential violation but not a proven one."
}