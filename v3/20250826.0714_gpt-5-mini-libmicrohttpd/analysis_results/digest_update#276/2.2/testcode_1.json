{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the member da->hashing is never read (for example it is only written here and never inspected elsewhere, or only referenced inside assertions that are disabled), then the assignment da->hashing = true; is an operation whose removal would not affect program behaviour. In that case this write is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2762.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_update:\n```c\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                           (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* May not happen */\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n```\n</target_code>\nPlease provide the modified digest_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe/logging helper - does not change original logic. */\nstatic _MHD_static_inline void\nmhd_log_digest_update_probe(const struct DigestAlgorithm *da,\n                            const char *location,\n                            size_t length,\n                            bool assigned_hashing)\n{\n  FILE *f = fopen(\"/tmp/logs/2762.txt\", \"a\");\n  if (f)\n    {\n      /* Log pointer, control location, a few relevant state fields and the\n         length processed. Accessing these members is only for diagnostic\n         purposes and preserves original behaviour. */\n      fprintf(f, \"digest_update: da=%p location=%s length=%zu uninitialised=%d algo_selected=%d ready_for_hashing=%d algo=%d assigned_hashing=%d\\n\",\n              (const void *) da,\n              location ? location : \"(null)\",\n              length,\n              (int) da->uninitialised,\n              (int) da->algo_selected,\n              (int) da->ready_for_hashing,\n              (int) da->algo,\n              (int) assigned_hashing);\n      fclose(f);\n    }\n}\n\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  /* Preserve original assertions */\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n\n  /* Log entry and current state before selecting algorithm branch. */\n  mhd_log_digest_update_probe(da, \"entry\", length, false);\n\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    {\n      mhd_log_digest_update_probe(da, \"MD5_before_update\", length, false);\n      MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n      mhd_log_digest_update_probe(da, \"MD5_after_update\", length, false);\n    }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    {\n      mhd_log_digest_update_probe(da, \"SHA256_before_update\", length, false);\n      MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n      mhd_log_digest_update_probe(da, \"SHA256_after_update\", length, false);\n    }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    {\n      mhd_log_digest_update_probe(da, \"SHA512_256_before_update\", length, false);\n      MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                             (const uint8_t *) data, length);\n      mhd_log_digest_update_probe(da, \"SHA512_256_after_update\", length, false);\n    }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* May not happen */\n\n#ifdef _DEBUG\n  /* Log before and after the original assignment to make it reproducible\n     and observable for analysis of possible dead-write scenarios. */\n  mhd_log_digest_update_probe(da, \"before_hashing_assign\", length, false);\n  da->hashing = true;\n  mhd_log_digest_update_probe(da, \"after_hashing_assign\", length, true);\n#endif\n}\n"
}