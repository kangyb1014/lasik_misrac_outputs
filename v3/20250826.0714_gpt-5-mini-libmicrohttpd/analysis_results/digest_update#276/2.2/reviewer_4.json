{
  "user_message": "An agent A claimed that the following digest_update code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of digest_update.\n```c\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                           (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* May not happen */\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is a typical assert macro that is compiled out in production (for example mhd_assert(x) expands to ((void)0) when assertions are disabled / NDEBUG is defined), the statement mhd_assert(0); has no effect in that build and its removal would not change program behaviour. In that configuration the statement is redundant (dead) and thus violates MISRA C 2023 Rule 2.2. If, instead, mhd_assert is always active and causes termination/logging on failure, the statement is not dead (no violation).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's reasoning is correct for the build configuration described. If mhd_assert expands to a no-op (e.g. when assertions are disabled), the final statement mhd_assert(0); becomes an executed statement that has no effect; removing it would not change program behaviour in that configuration, so it meets the definition of dead code in MISRA C 2023 Rule 2.2. Conversely, if mhd_assert is active and causes a failure/termination, the statement is not dead (it affects behaviour) and there is no violation. Note also the distinction: if the code path to the mhd_assert(0) is truly unreachable, that is not considered dead code by the rule; but in a build where none of the algorithm #ifdef blocks are present the assert is reachable and thus dead when compiled out. Therefore the report (that a violation can occur when assertions are compiled out) is correct."
}