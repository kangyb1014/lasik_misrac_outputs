{
  "user_message": "An agent A claimed that the following calc_userdigest code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of calc_userdigest.\n```c\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n  digest_update_str (da, password);\n  digest_calc_hash (da, ha1_bin);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is a typical assertion macro that evaluates '!da->hashing' only in debug builds but expands to ((void)0) (no code) in production (e.g. when NDEBUG is defined), then the assert expression is an operation whose removal would not affect normal program behaviour. In that configuration the check is effectively dead code (it is executed only for diagnostics and has no impact on released behaviour). If, conversely, mhd_assert produces an observable effect in all builds (logging, abort, or other side\u2011effects), then it would not be dead code.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA 2.2 defines dead code as an operation that is executed but whose removal would not affect program behaviour. In the typical case where mhd_assert is a diagnostic macro that is enabled in debug builds and expands to ((void)0) in release builds, two points rule out a 2.2 violation:\n\n- If the assertion is compiled out in the release configuration it is not executed at all, and therefore cannot be \"dead code\" under the rule (dead code must be executed).\n- If the assertion is enabled in debug builds it can change observable behaviour in those builds (e.g. abort, logging, timing differences). Because its presence can affect behaviour in at least one build configuration, removing it would change program behaviour in that configuration, so it is not dead code.\n\nOnly in the rare situation where the assertion is compiled into the binary and is executed but has truly no observable effect in any build (including timing/ordering concerns noted by MISRA) would it qualify as dead code. That is not the scenario described by agent A (they assumed the usual assert-that-disappears behaviour), so the reported violation is incorrect."
}