{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_empty (MHD_RF_NONE);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NO_CONTENT,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */",
    "static enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)",
    "if (&aptr != *req_cls)\n{\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n}",
    "*req_cls = NULL;                  /* reset when done */\nresponse = MHD_create_response_empty (MHD_RF_NONE);\nret = MHD_queue_response (connection,\n                          MHD_HTTP_NO_CONTENT,\n                          response);\nMHD_destroy_response (response);\nreturn ret;"
  ],
  "explanation": "MISRA Rule 17.2 forbids direct or indirect self-calls. The likely indirect-recursion paths here are via the function being a callback (function signature) and via calls/returns that interact with the libmicrohttpd (MHD_*) API which may re-enter the callback. Therefore I flagged: the function declaration (shows this is a callback), the early-return on non-GET (library may re-invoke or manage callbacks based on return codes), the branch that sets *req_cls and returns MHD_YES (this return value typically indicates the request is not finished and can cause the library to call the callback again), and the sequence that resets *req_cls, creates/queues/destroys a response (these MHD_* calls could, depending on library behavior, invoke callbacks). Other lines do not need investigation for indirect recursion: the (void) parameter casts only suppress compiler warnings and do not call functions; local variable declarations (static int aptr; struct MHD_Response *response; enum MHD_Result ret;) and comments are irrelevant; simple assignments and the strcmp call itself are not recursive (strcmp is a standard library function and does not call back into this user callback). The reported fragments cover the plausible indirect recursion entry points."
}