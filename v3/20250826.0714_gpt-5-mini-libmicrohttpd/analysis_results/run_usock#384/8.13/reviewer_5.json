{
  "user_message": "An agent A claimed that the following run_usock code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of run_usock.\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n    if (0 >= got)\n    {\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n    if (NULL == msg)\n    {\n      break;\n    }\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock, msg);\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock, msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n          free (text);\n        }\n        else\n          sent = -1;\n      }\n      else\n        sent = -1;\n      free (msg);\n      if (-1 == sent)\n      {\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        free (msg);\n        break;\n      }\n    }\n  }\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (ws);\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes the local buffer 'buf' (unsigned char[]) to ws_receive_frame. If ws_receive_frame only reads from the buffer (i.e. does not modify it) then its parameter should be declared as const unsigned char * (and similarly the returned 'msg' should be a pointer to const data if it is only read). Having non-const pointer types in the declaration/usage when the data is not modified violates MISRA C 2023 Rule 8.13. (Concretely: if ws_receive_frame is declared to accept/return unsigned char * rather than const-qualified pointers while it does not write to the data, that is a Rule 8.13 violation.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent A\u2019s argument is a correct *principle* but cannot be proven from the snippet alone. MISRA C 2023 R.8.13 says pointers should point to const-qualified types whenever possible. If ws_receive_frame only reads from the input buffer, then its parameter should indeed be declared const unsigned char *; failing to do so would be a violation in that function\u2019s declaration. However, the provided code does not show the declaration or implementation of ws_receive_frame, so we cannot determine whether its prototype wrongly omits const.\n\nMoreover, the returned msg is freed by run_usock, which implies ws_receive_frame likely returns a pointer to heap memory that the caller must modify/free. In that case returning a non-const unsigned char * is appropriate (and returning const would be impractical because the caller must free/possibly modify it). Thus the call site in run_usock is not by itself evidence of a Rule 8.13 violation \u2014 the potential violation would be in the declaration/implementation of ws_receive_frame (or other related function prototypes), which are not shown.\n\nTherefore the claim that run_usock (as shown) violates MISRA C 2023 Rule 8.13 is not supported by the available code. To decide definitively you must inspect the prototype/implementation of ws_receive_frame (and any other involved functions) to see whether const qualification is possible and omitted."
}