{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'val' (type uint8_t) is modified in the function by the statement 'val %= 10;'. This directly alters a non\u2011pointer function parameter, which violates MISRA C 2023 Rule 17.8. To comply, use a local copy of the parameter and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint8_to_str_pad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1717.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_uint8_to_str_pad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_uint8_to_str_pad:\n```c\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n    return 0;\n\n  pos = 0;\n  digit = val / 100;\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 100;\n    min_digits = 2;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  digit = val / 10;\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 10;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  buf[pos++] = (char) ('0' + (char) val);\n  return pos;\n}\n```\n</target_code>\nPlease provide the modified MHD_uint8_to_str_pad code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdarg.h>\n\nstatic void write_log(const char *fmt, ...);\n\nstatic void\nmhd_assert (int cond)\n{\n  if (!cond)\n  {\n    write_log(\"mhd_assert failed\");\n    /* Do not abort to preserve original behavior in test harness */\n  }\n}\n\nstatic void\nwrite_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1717.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n\n  write_log(\"ENTER: MHD_uint8_to_str_pad val=%u, min_digits=%u, buf=%p, buf_size=%zu\",\n            (unsigned) val, (unsigned) min_digits, (void *) buf, buf_size);\n\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n  {\n    write_log(\"EARLY RETURN: buf_size == 0 -> return 0\");\n    return 0;\n  }\n\n  pos = 0;\n  digit = val / 100;\n  write_log(\"computed digit = val/100 -> digit=%d, val=%u\", digit, (unsigned) val);\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n      buf[pos++] = '0';\n    write_log(\"branch: digit==0, pos=%zu\", pos);\n  }\n  else\n  {\n    write_log(\"branch: digit!=0, about to write most significant digit: digit=%d, pos=%zu\", digit, pos);\n    buf[pos++] = (char) ('0' + (char) digit);\n    write_log(\"before modification: val (parameter) = %u\", (unsigned) val);\n    val %= 100; /* parameter modified here (violation scenario) */\n    write_log(\"after val %= 100 -> val=%u\", (unsigned) val);\n    min_digits = 2;\n    write_log(\"min_digits assigned to 2\");\n  }\n\n  if (buf_size <= pos)\n  {\n    write_log(\"EARLY RETURN: buf_size <= pos (%zu <= %zu) -> return 0\", buf_size, pos);\n    return 0;\n  }\n  digit = val / 10;\n  write_log(\"computed digit = val/10 -> digit=%d, val=%u, pos=%zu\", digit, (unsigned) val, pos);\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n      buf[pos++] = '0';\n    write_log(\"branch: digit==0 after tens check, pos=%zu\", pos);\n  }\n  else\n  {\n    write_log(\"branch: digit!=0 after tens check, about to write tens digit: digit=%d, pos=%zu\", digit, pos);\n    buf[pos++] = (char) ('0' + (char) digit);\n    write_log(\"before modification: val (parameter) = %u\", (unsigned) val);\n    val %= 10; /* parameter modified here (violation scenario) */\n    write_log(\"after val %= 10 -> val=%u\", (unsigned) val);\n  }\n\n  if (buf_size <= pos)\n  {\n    write_log(\"EARLY RETURN: buf_size <= pos (%zu <= %zu) before final digit -> return 0\", buf_size, pos);\n    return 0;\n  }\n  buf[pos++] = (char) ('0' + (char) val);\n  write_log(\"FINAL: wrote last digit, final val=%u, final pos=%zu, returning %zu\", (unsigned) val, pos, pos);\n  return pos;\n}\n"
}