{
  "user_message": "An agent A claimed that the following MHD_uint8_to_str_pad code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_uint8_to_str_pad.\n```c\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n    return 0;\n\n  pos = 0;\n  digit = val / 100;\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 100;\n    min_digits = 2;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  digit = val / 10;\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 10;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  buf[pos++] = (char) ('0' + (char) val);\n  return pos;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement 'val %= 100;' modifies the function parameter 'val' (a scalar parameter passed by value). MISRA C 2023 Rule 17.8 forbids modifying function parameters; the pointer exception does not apply here, so this is a violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_uint8_to_str_pad: val=0, min_digits=0, buf=0x7ffee1f1e848, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER MHD_uint8_to_str_pad: val=0, min_digits=0, buf=0x7ffee1f1e848, buf_size=1\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '0' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=0, min_digits=0, buf=0x7ffee1f1e848, buf_size=2\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '0' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=1, min_digits=0, buf=0x7ffee1f1e848, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER MHD_uint8_to_str_pad: val=1, min_digits=0, buf=0x7ffee1f1e848, buf_size=1\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '1' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=1, min_digits=0, buf=0x7ffee1f1e848, buf_size=2\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '1' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=2, min_digits=0, buf=0x7ffee1f1e848, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER MHD_uint8_to_str_pad: val=2, min_digits=0, buf=0x7ffee1f1e848, buf_size=1\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '2' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=2, min_digits=0, buf=0x7ffee1f1e848, buf_size=2\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '2' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=3, min_digits=0, buf=0x7ffee1f1e848, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER MHD_uint8_to_str_pad: val=3, min_digits=0, buf=0x7ffee1f1e848, buf_size=1\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '3' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=3, min_digits=0, buf=0x7ffee1f1e848, buf_size=2\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '3' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=4, min_digits=0, buf=0x7ffee1f1e848, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER MHD_uint8_to_str_pad: val=4, min_digits=0, buf=0x7ffee1f1e848, buf_size=1\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '4' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=4, min_digits=0, buf=0x7ffee1f1e848, buf_size=2\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '4' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=5, min_digits=0, buf=0x7ffee1f1e848, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER MHD_uint8_to_str_pad: val=5, min_digits=0, buf=0x7ffee1f1e848, buf_size=1\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '5' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=5, min_digits=0, buf=0x7ffee1f1e848, buf_size=2\ncomputed digit (hundreds) = 0\nhundreds digit == 0 branch\ncomputed digit (tens) = 0\ntens digit == 0 branch\nwrote units digit '5' at pos=0, final pos=1\nEXIT MHD_uint8_to_str_pad: returning pos=1\nENTER MHD_uint8_to_str_pad: val=6, min_digits=0, buf=0x7ffee1f1e848, buf_size=0\nEARLY RETURN: buf_si\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In the provided function both scalar parameters are modified: val is changed (e.g. \"val %= 100;\" and \"val %= 10;\") and min_digits is assigned to (\"min_digits = 2;\"). These are direct modifications of value parameters and therefore violate Rule 17.8. (The pointer exception in the rule only permits modification of the object referred to by a pointer parameter \u2014 e.g. writing through buf \u2014 it does not permit changing scalar parameters or reassigning pointer parameters themselves.)\n\nSuggested remediation: use local copies for values that need to be changed, e.g. uint8_t v = val; uint8_t md = min_digits; then modify v and md and use those instead of modifying the parameters."
}