{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nWhen param->quoted is false the code sets unquoted->str = param->value.str. The source storage comes from a const-qualified parameter (param is const struct ... *), so the pointer returned is effectively pointing to data that should be treated as read-only. Assigning that to a non-const char * (unquoted->str) allows modification through the pointer and thus fails the 'pointer should point to a const-qualified type whenever possible' requirement. To comply, unquoted->str should be declared as const char * (or an explicit justification/cast provided where mutation is required).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2873.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_unquoted_param as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n    return (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\nPlease provide the modified get_unquoted_param code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe/logging helper: appends formatted logs to /tmp/logs/2873.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2873.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* Log entry state */\n  mhd_probe_log(\"get_unquoted_param ENTRY: param=%p, param->value.str=%p, param->value.len=%zu, param->quoted=%d, tmp1=%p, ptmp2=%p, ptmp2_size=%p, unquoted=%p\",\n                (void*)param,\n                (void*)param->value.str,\n                param->value.len,\n                (int)param->quoted,\n                (void*)tmp1,\n                (void*)ptmp2,\n                (void*)ptmp2_size,\n                (void*)unquoted);\n\n  if (! param->quoted)\n  {\n    /* Log before assignment to capture the potential violation scenario */\n    mhd_probe_log(\"Branch: unquoted (not quoted). About to assign: unquoted->str = param->value.str (unquoted=%p)\", (void*)unquoted);\n    mhd_probe_log(\"Source: param->value.str=%p, param->value.len=%zu\", (void*)param->value.str, param->value.len);\n\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n\n    /* Log after assignment */\n    mhd_probe_log(\"After assignment: unquoted->str=%p, unquoted->len=%zu\", (void*)unquoted->str, unquoted->len);\n    mhd_probe_log(\"Returning: _MHD_UNQ_OK\");\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n  {\n    enum _MHD_GetUnqResult res = (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n                                _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n    mhd_probe_log(\"get_buffer_for_size returned NULL: param->value.len=%zu, returning %d\",\n                  param->value.len, (int)res);\n    return res;\n  }\n\n  mhd_probe_log(\"Allocated buffer for unquoting: str=%p (size requested=%zu)\", (void*)str, param->value.len);\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n  unquoted->str = str;\n  unquoted->len = len;\n\n  mhd_probe_log(\"After unquote: unquoted->str=%p, unquoted->len=%zu, original_len=%zu\",\n                (void*)unquoted->str, unquoted->len, param->value.len);\n\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  mhd_probe_log(\"Returning: _MHD_UNQ_OK (quoted path)\");\n  return _MHD_UNQ_OK;\n}\n"
}