{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the member param->value.str is declared as \"char *\" (non-const) even though get_unquoted_param treats it as read-only and passes it to MHD_str_unquote for input-only use. In that case the pointer should be declared as \"const char *\" (and MHD_str_unquote's source parameter should be const-qualified) to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2873.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_unquoted_param as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n    return (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\nPlease provide the modified get_unquoted_param code.\n",
  "test_code": "static void probe_log(const char *event,\n                           const struct MHD_RqDAuthParam *param,\n                           char *buf,\n                           size_t buf_size,\n                           size_t len,\n                           const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/2873.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* log pointers and sizes \u2014 avoid dereferencing param if NULL */\n  fprintf(f, \"EVENT=%s, param=%p, value.str=%p, value.len=%zu, quoted=%d, buf=%p, buf_size=%zu, len=%zu, note=%s\\n\",\n          event ? event : \"(null)\",\n          (void *)param,\n          (void *)(param ? param->value.str : NULL),\n          (size_t)(param ? param->value.len : 0u),\n          (int)(param ? param->quoted : 0),\n          (void *)buf,\n          (size_t)buf_size,\n          (size_t)len,\n          note ? note : \"\");\n\n  /* If there is a buffer and some length, log up to the first 64 bytes safely */\n  if (NULL != buf && len > 0u)\n  {\n    size_t i, max = (len < 64u) ? len : 64u;\n    fprintf(f, \"  data (first %zu bytes): '\", max);\n    for (i = 0u; i < max; ++i)\n    {\n      unsigned char c = (unsigned char)buf[i];\n      if (c >= 32u && c < 127u)\n        fputc((int)c, f);\n      else\n        fprintf(f, \"\\\\x%02x\", c);\n    }\n    fprintf(f, \"'\\n\");\n  }\n\n  fclose(f);\n}\n\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* Log entry and the initial state */\n  probe_log(\"enter\", param, NULL, 0u, 0u, \"entered get_unquoted_param\");\n\n  if (! param->quoted)\n  {\n    /* Log the branch where the parameter is not quoted */\n    probe_log(\"not_quoted\", param, param->value.str, 0u, param->value.len, \"return direct mapping of value\");\n\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n\n  /* Log buffer allocation result and requested size */\n  probe_log(\"after_get_buffer\", param, str, (ptmp2_size ? *ptmp2_size : 0u), param->value.len,\n            str ? \"buffer allocated\" : \"buffer allocation returned NULL\");\n\n  if (NULL == str)\n  {\n    enum _MHD_GetUnqResult r = (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n                              _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n    /* Log the reason for early return */\n    probe_log(\"alloc_fail\", param, NULL, 0u, param->value.len,\n              (r == _MHD_UNQ_TOO_LARGE) ? \"too large\" : \"out of memory\");\n    return r;\n  }\n\n  /* Call the unquote routine and log before/after */\n  probe_log(\"before_unquote\", param, str, (ptmp2_size ? *ptmp2_size : 0u), param->value.len,\n            \"about to call MHD_str_unquote\");\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n\n  probe_log(\"after_unquote\", param, str, (ptmp2_size ? *ptmp2_size : 0u), len,\n            \"returned from MHD_str_unquote\");\n\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n\n  /* Final state log */\n  probe_log(\"return_ok\", param, unquoted->str, (ptmp2_size ? *ptmp2_size : 0u), unquoted->len,\n            \"returning _MHD_UNQ_OK\");\n  return _MHD_UNQ_OK;\n}"
}