{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe 'if (1)' controlling expression is an invariant (always true). This is not an infinite loop nor a do-while with an essentially Boolean constant-false expression, so it is not covered by the rule exceptions. Therefore the use of 'if (1) { ... }' here violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run_wait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/975.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_run_wait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_run_wait:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_wait (struct MHD_Daemon *daemon,\n              int32_t millisec)\n{\n  enum MHD_Result res;\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid));\n\n  if (0 > millisec)\n    millisec = -1;\n#ifdef HAVE_POLL\n  if (MHD_D_IS_USING_POLL_ (daemon))\n  {\n    res = MHD_poll_all (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    res = MHD_epoll (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif\n  if (1)\n  {\n    mhd_assert (MHD_D_IS_USING_SELECT_ (daemon));\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n#ifdef HAVE_MESSAGES\n    if (daemon->fdset_size_set_by_app\n        && (((int) FD_SETSIZE) < daemon->fdset_size))\n    {\n      MHD_DLOG (daemon,\n                _ (\"MHD_run()/MHD_run_wait() called for daemon started with \" \\\n                   \"MHD_OPTION_APP_FD_SETSIZE option (%d). \" \\\n                   \"The library was compiled with smaller FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_run_from_select2() instead of MHD_run() or \" \\\n                   \"do not use MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                daemon->fdset_size, (int) FD_SETSIZE);\n    }\n#endif /* HAVE_MESSAGES */\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n\n    res = MHD_select (daemon, millisec);\n    /* MHD_select does MHD_cleanup_connections already */\n  }\n  return res;\n}\n```\n</target_code>\nPlease provide the modified MHD_run_wait code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging utility: append textual traces to /tmp/logs/975.txt. */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/975.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_run_wait (struct MHD_Daemon *daemon,\n              int32_t millisec)\n{\n  enum MHD_Result res;\n  mhd_log_probe(\"MHD_run_wait called: daemon=%p, millisec=%d\\n\",\n                (void *)daemon, (int)millisec);\n\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n  {\n    mhd_log_probe(\"Early return: shutdown=%d, using_threads=%d -> MHD_NO\\n\",\n                  (int)daemon->shutdown,\n                  (int)MHD_D_IS_USING_THREADS_ (daemon));\n    return MHD_NO;\n  }\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid));\n  mhd_log_probe(\"After assert: tid handle valid check passed, tid=%p\\n\",\n                (void *)daemon->tid);\n\n  if (0 > millisec)\n  {\n    mhd_log_probe(\"millisec negative (%d): normalizing to -1\\n\", (int)millisec);\n    millisec = -1;\n  }\n#ifdef HAVE_POLL\n  if (MHD_D_IS_USING_POLL_ (daemon))\n  {\n    mhd_log_probe(\"Using POLL backend; calling MHD_poll_all with millisec=%d\\n\",\n                  (int)millisec);\n    res = MHD_poll_all (daemon, millisec);\n    mhd_log_probe(\"MHD_poll_all returned %d\\n\", (int)res);\n    MHD_cleanup_connections (daemon);\n    mhd_log_probe(\"Called MHD_cleanup_connections after poll\\n\");\n  }\n  else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    mhd_log_probe(\"Using EPOLL backend; calling MHD_epoll with millisec=%d\\n\",\n                  (int)millisec);\n    res = MHD_epoll (daemon, millisec);\n    mhd_log_probe(\"MHD_epoll returned %d\\n\", (int)res);\n    MHD_cleanup_connections (daemon);\n    mhd_log_probe(\"Called MHD_cleanup_connections after epoll\\n\");\n  }\n  else\n#endif\n  if (1)\n  {\n    /* The following if (1) is intentionally invariant in the original code. */\n    mhd_log_probe(\"Entered select branch (if (1) true). Expecting SELECT backend.\\n\");\n    mhd_assert (MHD_D_IS_USING_SELECT_ (daemon));\n    mhd_log_probe(\"Assertion: MHD_D_IS_USING_SELECT_ holds. Calling MHD_select millisec=%d\\n\",\n                  (int)millisec);\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n#ifdef HAVE_MESSAGES\n    if (daemon->fdset_size_set_by_app\n        && (((int) FD_SETSIZE) < daemon->fdset_size))\n    {\n      MHD_DLOG (daemon,\n                _ (\"MHD_run()/MHD_run_wait() called for daemon started with \" \\\n                   \"MHD_OPTION_APP_FD_SETSIZE option (%d). \" \\\n                   \"The library was compiled with smaller FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_run_from_select2() instead of MHD_run() or \" \\\n                   \"do not use MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                daemon->fdset_size, (int) FD_SETSIZE);\n      mhd_log_probe(\"FD_SETSIZE override warning logged: app_fdset_size=%d, FD_SETSIZE=%d\\n\",\n                    (int)daemon->fdset_size, (int)FD_SETSIZE);\n    }\n#endif /* HAVE_MESSAGES */\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n\n    res = MHD_select (daemon, millisec);\n    mhd_log_probe(\"MHD_select returned %d\\n\", (int)res);\n    /* MHD_select does MHD_cleanup_connections already */\n  }\n  mhd_log_probe(\"MHD_run_wait about to return res=%d\\n\", (int)res);\n  return res;\n}\n"
}