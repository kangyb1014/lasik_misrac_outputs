{
  "user_message": "An agent A claimed that the following add_response_entry_n code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of add_response_entry_n.\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf header is NULL while header_len > 0 (or if header_len exceeds the actual size of the object pointed to by header), the call memchr(header, '\\t', header_len) will access memory beyond the bounds of the referenced object. The code does not check header != NULL nor validate that header_len matches the actual buffer size, so this can lead to out\u2011of\u2011bounds access and violates MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nstage=entry response=0x555d0199a820 header=0x555cdb55201f header_len=13 content=0x555cdb55202d content_len=8\nstage=before_memchr_header_tab response=0x555d0199a820 header=0x555cdb55201f header_len=13 content=0x555cdb55202d content_len=8\nstage=after_memchr_header_tab result_ptr=(nil)\nstage=before_memchr_header_space response=0x555d0199a820 header=0x555cdb55201f header_len=13 content=0x555cdb55202d content_len=8\nstage=after_memchr_header_space result_ptr=(nil)\nstage=before_memchr_header_cr response=0x555d0199a820 header=0x555cdb55201f header_len=13 content=0x555cdb55202d content_len=8\nstage=after_memchr_header_cr result_ptr=(nil)\nstage=before_memchr_header_nl response=0x555d0199a820 header=0x555cdb55201f header_len=13 content=0x555cdb55202d content_len=8\nstage=after_memchr_header_nl result_ptr=(nil)\nstage=before_memchr_content_cr response=0x555d0199a820 header=0x555cdb55201f header_len=13 content=0x555cdb55202d content_len=8\nstage=after_memchr_content_cr result_ptr=(nil)\nstage=before_memchr_content_nl response=0x555d0199a820 header=0x555cdb55201f header_len=13 content=0x555cdb55202d content_len=8\nstage=after_memchr_content_nl result_ptr=(nil)\nstage=before_final_call response=0x555d0199a820 header=0x555cdb55201f header_len=13 content=0x555cdb55202d content_len=8\nstage=enter_MHD_add_response_entry_no_check_ response=0x555d0199a820 header=0x555cdb55201f header_len=13 content=0x555cdb55202d content_len=8\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The code calls memchr(header, ..., header_len) and memchr(content, ..., content_len) without first ensuring that header and content point to objects of at least header_len and content_len bytes (or that the pointers are non-NULL when the lengths are non-zero). If header (or content) is NULL while the corresponding length is > 0, or if the supplied length exceeds the actual object bounds, memchr will access out-of-bounds memory. That situation violates MISRA C 2023 Rule 21.17. The runtime log only shows an invocation where the pointers happen to be valid; it does not eliminate the problematic code path. To comply, the function must either validate the pointers and/or sizes (e.g. check header != NULL and content != NULL when lengths > 0 and ensure lengths do not exceed object sizes) or document and enforce a caller precondition that guarantees the pointers and lengths are valid."
}