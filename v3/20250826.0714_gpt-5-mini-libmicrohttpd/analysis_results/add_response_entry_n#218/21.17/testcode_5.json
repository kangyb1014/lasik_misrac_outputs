{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 the memchr call can access beyond the bounds. The function does not check header != NULL (or that header_len does not exceed the actual object size). If header == NULL and header_len > 0, or if header points to a buffer smaller than header_len, memchr(header, '\\n', header_len) will dereference/scan beyond the object bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  log_probe(\"enter add_response_entry_n: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\",\n            (void *)response, (int)kind, (const void *)header, header_len,\n            (const void *)content, content_len);\n\n  if (NULL == response)\n  {\n    log_probe(\"early return: response == NULL\");\n    return false;\n  }\n  if (0 == header_len)\n  {\n    log_probe(\"early return: header_len == 0\");\n    return false;\n  }\n  if (0 == content_len)\n  {\n    log_probe(\"early return: content_len == 0\");\n    return false;\n  }\n\n  /* Note: We log the pointer and lengths before calling memchr. We do not\n     dereference header/content here to avoid introducing new UB. This allows\n     reproduction of the scenario where header == NULL but header_len > 0. */\n  log_probe(\"about to memchr check: header for '\\t' header=%p header_len=%zu\", (const void *)header, header_len);\n  if (NULL != memchr (header, '\\t', header_len))\n  {\n    log_probe(\"memchr found '\\t' in header -> return false\");\n    return false;\n  }\n\n  log_probe(\"about to memchr check: header for ' ' header=%p header_len=%zu\", (const void *)header, header_len);\n  if (NULL != memchr (header, ' ', header_len))\n  {\n    log_probe(\"memchr found ' ' in header -> return false\");\n    return false;\n  }\n\n  log_probe(\"about to memchr check: header for '\\r' header=%p header_len=%zu\", (const void *)header, header_len);\n  if (NULL != memchr (header, '\\r', header_len))\n  {\n    log_probe(\"memchr found '\\r' in header -> return false\");\n    return false;\n  }\n\n  log_probe(\"about to memchr check: header for '\\n' header=%p header_len=%zu\", (const void *)header, header_len);\n  if (NULL != memchr (header, '\\n', header_len))\n  {\n    log_probe(\"memchr found '\\n' in header -> return false\");\n    return false;\n  }\n\n  log_probe(\"about to memchr check: content for '\\r' content=%p content_len=%zu\", (const void *)content, content_len);\n  if (NULL != memchr (content, '\\r', content_len))\n  {\n    log_probe(\"memchr found '\\r' in content -> return false\");\n    return false;\n  }\n\n  log_probe(\"about to memchr check: content for '\\n' content=%p content_len=%zu\", (const void *)content, content_len);\n  if (NULL != memchr (content, '\\n', content_len))\n  {\n    log_probe(\"memchr found '\\n' in content -> return false\");\n    return false;\n  }\n\n  log_probe(\"calling MHD_add_response_entry_no_check_\");\n  bool res = MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                               content, content_len);\n  log_probe(\"MHD_add_response_entry_no_check_ returned %d\", (int)res);\n  return res;\n}\n"
}