{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(content, '\\r', content_len) can access memory when content is a NULL pointer and content_len > 0. The function checks only content_len != 0 but does not validate content != NULL, so if a caller passes content == NULL with a non\u2011zero content_len, memchr will dereference an invalid pointer (out\u2011of\u2011bounds access / undefined behavior).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include < sys/stat.h>\n#include <errno.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Helper logging functions to record control flow and state to /tmp/logs/2189.txt.\n   These functions intentionally do not change the control flow or checks of the\n   original function; they only record parameter values and the moments just\n   before memchr is invoked so that callers that pass content == NULL and\n   content_len > 0 can be diagnosed (the same crash/UB will still occur).\n*/\n\nstatic void\nensure_log_dir_exists (void)\n{\n  /* Attempt to create the directory; ignore errors other than non-existence. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void\nlog_probe (const char *stage, const char *ptr_name, const void *ptr, size_t len, const char *extra)\n{\n  FILE *f;\n\n  ensure_log_dir_exists ();\n  f = fopen(\"/tmp/logs/2189.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[%s] %s: ptr=%p len=%zu\", stage, ptr_name, ptr, len);\n  if (extra)\n    fprintf (f, \" extra=%s\", extra);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nlog_memchr_result (const char *which, const void *ptr, size_t len, const void *res)\n{\n  FILE *f;\n\n  ensure_log_dir_exists ();\n  f = fopen(\"/tmp/logs/2189.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[result] memchr(%s): ptr=%p len=%zu returned=%p\\n\", which, ptr, len, res);\n  fclose (f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  /* Log entry parameters as early as possible. This preserves original\n     behaviour (no additional validation) while producing evidence about\n     pointer values and lengths before any memchr calls that might trigger\n     undefined behaviour when content == NULL and content_len > 0. */\n  log_probe (\"entry\", \"response\", (const void *) response, (size_t) sizeof(response), NULL);\n  log_probe (\"entry\", \"header\", (const void *) header, header_len, NULL);\n  log_probe (\"entry\", \"content\", (const void *) content, content_len, NULL);\n\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n\n  /* Before each memchr call we log the pointer and length. We then call\n     memchr exactly as before so that the original behaviour (including the\n     potential crash) is preserved. */\n  log_probe (\"before_memchr\", \"header (tab)\", (const void *) header, header_len, \"search='\\\\t'\");\n  if (NULL != memchr (header, '\\t', header_len))\n    {\n      log_memchr_result (\"header(tab)\", header, header_len, (const void *) memchr (header, '\\t', header_len));\n      return false;\n    }\n  log_memchr_result (\"header(tab)\", header, header_len, NULL);\n\n  log_probe (\"before_memchr\", \"header (space)\", (const void *) header, header_len, \"search=' '\");\n  if (NULL != memchr (header, ' ', header_len))\n    {\n      log_memchr_result (\"header(space)\", header, header_len, (const void *) memchr (header, ' ', header_len));\n      return false;\n    }\n  log_memchr_result (\"header(space)\", header, header_len, NULL);\n\n  log_probe (\"before_memchr\", \"header (CR)\", (const void *) header, header_len, \"search='\\\\r'\");\n  if (NULL != memchr (header, '\\r', header_len))\n    {\n      log_memchr_result (\"header(CR)\", header, header_len, (const void *) memchr (header, '\\r', header_len));\n      return false;\n    }\n  log_memchr_result (\"header(CR)\", header, header_len, NULL);\n\n  log_probe (\"before_memchr\", \"header (LF)\", (const void *) header, header_len, \"search='\\\\n'\");\n  if (NULL != memchr (header, '\\n', header_len))\n    {\n      log_memchr_result (\"header(LF)\", header, header_len, (const void *) memchr (header, '\\n', header_len));\n      return false;\n    }\n  log_memchr_result (\"header(LF)\", header, header_len, NULL);\n\n  /* Critical checks for content: we log prior to calling memchr. If content\n     is NULL and content_len > 0, the subsequent memchr call matches the\n     reported violation scenario (it may dereference a NULL pointer). */\n  log_probe (\"before_memchr\", \"content (CR)\", (const void *) content, content_len, \"search='\\\\r'\");\n  if (NULL != memchr (content, '\\r', content_len))\n    {\n      log_memchr_result (\"content(CR)\", content, content_len, (const void *) memchr (content, '\\r', content_len));\n      return false;\n    }\n  log_memchr_result (\"content(CR)\", content, content_len, NULL);\n\n  log_probe (\"before_memchr\", \"content (LF)\", (const void *) content, content_len, \"search='\\\\n'\");\n  if (NULL != memchr (content, '\\n', content_len))\n    {\n      log_memchr_result (\"content(LF)\", content, content_len, (const void *) memchr (content, '\\n', content_len));\n      return false;\n    }\n  log_memchr_result (\"content(LF)\", content, content_len, NULL);\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n"
}