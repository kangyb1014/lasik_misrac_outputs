{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling add_response_entry_n(response, kind, NULL, 1, content, content_len) (or passing any header pointer that points to an object smaller than header_len) causes memchr(header, ' ', header_len) to access memory beyond the object (dereferencing NULL or reading past the buffer). The code does not validate header != NULL or that header_len does not exceed the actual object size, so this use of memchr can result in out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"add_response_entry_n ENTER: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n            (void *) response, (int) kind, (const void *) header, header_len, (const void *) content, content_len);\n    fflush(log);\n  }\n\n  if (NULL == response) {\n    if (log) {\n      fprintf(log, \"EARLY RETURN: response == NULL\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n  if (0 == header_len) {\n    if (log) {\n      fprintf(log, \"EARLY RETURN: header_len == 0\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n  if (0 == content_len) {\n    if (log) {\n      fprintf(log, \"EARLY RETURN: content_len == 0\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log) {\n    fprintf(log, \"CHECK: memchr(header, '\\\\t', header_len) with header=%p header_len=%zu\\n\",\n            (const void *) header, header_len);\n    fflush(log);\n  }\n  const char *p_tab = memchr (header, '\\t', header_len);\n  if (log) {\n    fprintf(log, \"RESULT: memchr '\\\\t' -> %p\\n\", (const void *) p_tab);\n    fflush(log);\n  }\n  if (NULL != p_tab) {\n    if (log) {\n      fprintf(log, \"EARLY RETURN: header contains '\\\\t' at %p\\n\", (const void *) p_tab);\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log) {\n    fprintf(log, \"CHECK: memchr(header, ' ', header_len) with header=%p header_len=%zu\\n\",\n            (const void *) header, header_len);\n    fflush(log);\n  }\n  const char *p_space = memchr (header, ' ', header_len);\n  if (log) {\n    fprintf(log, \"RESULT: memchr ' ' -> %p\\n\", (const void *) p_space);\n    fflush(log);\n  }\n  if (NULL != p_space) {\n    if (log) {\n      fprintf(log, \"EARLY RETURN: header contains ' ' at %p\\n\", (const void *) p_space);\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log) {\n    fprintf(log, \"CHECK: memchr(header, '\\\\r', header_len) with header=%p header_len=%zu\\n\",\n            (const void *) header, header_len);\n    fflush(log);\n  }\n  const char *p_cr = memchr (header, '\\r', header_len);\n  if (log) {\n    fprintf(log, \"RESULT: memchr '\\\\r' -> %p\\n\", (const void *) p_cr);\n    fflush(log);\n  }\n  if (NULL != p_cr) {\n    if (log) {\n      fprintf(log, \"EARLY RETURN: header contains '\\\\r' at %p\\n\", (const void *) p_cr);\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log) {\n    fprintf(log, \"CHECK: memchr(header, '\\\\n', header_len) with header=%p header_len=%zu\\n\",\n            (const void *) header, header_len);\n    fflush(log);\n  }\n  const char *p_lf = memchr (header, '\\n', header_len);\n  if (log) {\n    fprintf(log, \"RESULT: memchr '\\\\n' -> %p\\n\", (const void *) p_lf);\n    fflush(log);\n  }\n  if (NULL != p_lf) {\n    if (log) {\n      fprintf(log, \"EARLY RETURN: header contains '\\\\n' at %p\\n\", (const void *) p_lf);\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log) {\n    fprintf(log, \"CHECK: memchr(content, '\\\\r', content_len) with content=%p content_len=%zu\\n\",\n            (const void *) content, content_len);\n    fflush(log);\n  }\n  const char *p_content_cr = memchr (content, '\\r', content_len);\n  if (log) {\n    fprintf(log, \"RESULT: memchr content '\\\\r' -> %p\\n\", (const void *) p_content_cr);\n    fflush(log);\n  }\n  if (NULL != p_content_cr) {\n    if (log) {\n      fprintf(log, \"EARLY RETURN: content contains '\\\\r' at %p\\n\", (const void *) p_content_cr);\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log) {\n    fprintf(log, \"CHECK: memchr(content, '\\\\n', content_len) with content=%p content_len=%zu\\n\",\n            (const void *) content, content_len);\n    fflush(log);\n  }\n  const char *p_content_lf = memchr (content, '\\n', content_len);\n  if (log) {\n    fprintf(log, \"RESULT: memchr content '\\\\n' -> %p\\n\", (const void *) p_content_lf);\n    fflush(log);\n  }\n  if (NULL != p_content_lf) {\n    if (log) {\n      fprintf(log, \"EARLY RETURN: content contains '\\\\n' at %p\\n\", (const void *) p_content_lf);\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log) {\n    fprintf(log, \"CALL: MHD_add_response_entry_no_check_ with same parameters\\n\");\n    fclose(log);\n  }\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n"
}