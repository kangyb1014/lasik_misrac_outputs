{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of MHD_add_response_entry_no_check_ declares the header/content parameters as non-const (e.g. char *header, char *content), then passing const char *header and const char *content here discards the const qualifier and violates MISRA C 2023 Rule 8.13. The fix is to declare the callee parameters as const char * (or otherwise ensure the pointers are to const-qualified types). If the callee already accepts const char * for these parameters, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe/logging helpers to record control flow and state to /tmp/logs/2183.txt */\nstatic void\nlog_probe_header_content(const char *phase,\n                         const struct MHD_Response *response,\n                         int kind,\n                         const char *header, size_t header_len,\n                         const char *content, size_t content_len,\n                         const char *reason)\n{\n  FILE *f = fopen(\"/tmp/logs/2183.txt\", \"a\");\n  if (NULL == f)\n  {\n    return; /* best-effort logging only */\n  }\n\n  fprintf(f, \"[add_response_entry_n] phase=%s\\n\", phase);\n  fprintf(f, \"  response=%p, kind=%d\\n\", (void *)response, kind);\n  fprintf(f, \"  header=%p, header_len=%zu\\n\", (void *)header, header_len);\n  fprintf(f, \"  content=%p, content_len=%zu\\n\", (void *)content, content_len);\n  if (reason != NULL)\n  {\n    fprintf(f, \"  reason=%s\\n\", reason);\n  }\n\n  /* Log up to first 16 bytes of header and content as hex, safe for non-terminated buffers */\n  size_t i;\n  size_t lim;\n\n  lim = (header_len < 16u) ? header_len : 16u;\n  fprintf(f, \"  header_bytes=\");\n  for (i = 0u; i < lim; ++i)\n  {\n    fprintf(f, \"%02x\", (unsigned char)header[i]);\n  }\n  fprintf(f, \"\\n\");\n\n  lim = (content_len < 16u) ? content_len : 16u;\n  fprintf(f, \"  content_bytes=\");\n  for (i = 0u; i < lim; ++i)\n  {\n    fprintf(f, \"%02x\", (unsigned char)content[i]);\n  }\n  fprintf(f, \"\\n\\n\");\n\n  fclose(f);\n}\n\n/* Keep the original function signature and logic, inserting logging at key points. */\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  /* Log entry with initial state. */\n  log_probe_header_content(\"entry\", response, (int)kind, header, header_len, content, content_len, NULL);\n\n  if (NULL == response)\n  {\n    log_probe_header_content(\"early_return\", response, (int)kind, header, header_len, content, content_len,\n                             \"response is NULL\");\n    return false;\n  }\n  if (0 == header_len)\n  {\n    log_probe_header_content(\"early_return\", response, (int)kind, header, header_len, content, content_len,\n                             \"header_len is 0\");\n    return false;\n  }\n  if (0 == content_len)\n  {\n    log_probe_header_content(\"early_return\", response, (int)kind, header, header_len, content, content_len,\n                             \"content_len is 0\");\n    return false;\n  }\n\n  /* Evaluate memchr checks once and re-use results for logging and control flow. */\n  const void *found_tab = memchr (header, '\\t', header_len);\n  if (NULL != found_tab)\n  {\n    log_probe_header_content(\"early_return\", response, (int)kind, header, header_len, content, content_len,\n                             \"header contains TAB '\\t'\");\n    return false;\n  }\n  const void *found_space = memchr (header, ' ', header_len);\n  if (NULL != found_space)\n  {\n    log_probe_header_content(\"early_return\", response, (int)kind, header, header_len, content, content_len,\n                             \"header contains SPACE ' '\");\n    return false;\n  }\n  const void *found_cr_h = memchr (header, '\\r', header_len);\n  if (NULL != found_cr_h)\n  {\n    log_probe_header_content(\"early_return\", response, (int)kind, header, header_len, content, content_len,\n                             \"header contains CR '\\r'\");\n    return false;\n  }\n  const void *found_lf_h = memchr (header, '\\n', header_len);\n  if (NULL != found_lf_h)\n  {\n    log_probe_header_content(\"early_return\", response, (int)kind, header, header_len, content, content_len,\n                             \"header contains LF '\\n'\");\n    return false;\n  }\n  const void *found_cr_c = memchr (content, '\\r', content_len);\n  if (NULL != found_cr_c)\n  {\n    log_probe_header_content(\"early_return\", response, (int)kind, header, header_len, content, content_len,\n                             \"content contains CR '\\r'\");\n    return false;\n  }\n  const void *found_lf_c = memchr (content, '\\n', content_len);\n  if (NULL != found_lf_c)\n  {\n    log_probe_header_content(\"early_return\", response, (int)kind, header, header_len, content, content_len,\n                             \"content contains LF '\\n'\");\n    return false;\n  }\n\n  /* Before delegating to the unchecked variant, log the intent. */\n  log_probe_header_content(\"before_delegate\", response, (int)kind, header, header_len, content, content_len,\n                           \"delegating to MHD_add_response_entry_no_check_\");\n\n  bool ret = MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                               content, content_len);\n\n  /* Log result from delegated call. */\n  {\n    FILE *f = fopen(\"/tmp/logs/2183.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"[add_response_entry_n] delegated_call_result=%d\\n\\n\", (int)ret);\n      fclose(f);\n    }\n  }\n\n  return ret;\n}\n"
}