{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter is declared as a non-const pointer (struct MHD_Response *response) even though the function body performs no modifications on the pointed-to object and only passes it to other routines. If the pointed-to object is not modified by this function (and the called routine does not require a mutable pointer), the parameter should be declared const (const struct MHD_Response *response). Leaving it non-const in that situation violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <time.h>\n\n/* Probe logger: append a single line describing an event and relevant state. */\nstatic void\nprobe_log(const char *event,\n          struct MHD_Response *response,\n          enum MHD_ValueKind kind,\n          const char *header,\n          size_t header_len,\n          const char *content,\n          size_t content_len,\n          const char *detail)\n{\n  FILE *f = fopen(\"/tmp/logs/2183.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  /* timestamp */\n  time_t t = time(NULL);\n  struct tm tm_buf;\n  if (localtime_r(&t, &tm_buf) != NULL)\n  {\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n      fprintf(f, \"%s \", timestr);\n  }\n\n  fprintf(f, \"EVENT=%s response=%p kind=%d header=%p(header_len=%zu) content=%p(content_len=%zu)\",\n          event, (void *)response, (int)kind,\n          (const void *)header, header_len,\n          (const void *)content, content_len);\n\n  if (detail != NULL)\n    fprintf(f, \" detail=%s\", detail);\n\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  /* Log entry and initial state */\n  probe_log(\"entry\", response, kind, header, header_len, content, content_len, NULL);\n\n  if (NULL == response)\n  {\n    probe_log(\"null_response\", response, kind, header, header_len, content, content_len,\n              \"response is NULL -> returning false\");\n    return false;\n  }\n  if (0 == header_len)\n  {\n    probe_log(\"zero_header_len\", response, kind, header, header_len, content, content_len,\n              \"header_len == 0 -> returning false\");\n    return false;\n  }\n  if (0 == content_len)\n  {\n    probe_log(\"zero_content_len\", response, kind, header, header_len, content, content_len,\n              \"content_len == 0 -> returning false\");\n    return false;\n  }\n\n  /* Check for forbidden characters in header and log the detection with index if found */\n  {\n    const char *found = memchr (header, '\\t', header_len);\n    if (NULL != found)\n    {\n      char detail[128];\n      snprintf(detail, sizeof(detail), \"found '\\\\t' at index %td\", (ptrdiff_t)(found - header));\n      probe_log(\"invalid_header_char_tab\", response, kind, header, header_len, content, content_len, detail);\n      return false;\n    }\n  }\n  {\n    const char *found = memchr (header, ' ', header_len);\n    if (NULL != found)\n    {\n      char detail[128];\n      snprintf(detail, sizeof(detail), \"found ' ' at index %td\", (ptrdiff_t)(found - header));\n      probe_log(\"invalid_header_char_space\", response, kind, header, header_len, content, content_len, detail);\n      return false;\n    }\n  }\n  {\n    const char *found = memchr (header, '\\r', header_len);\n    if (NULL != found)\n    {\n      char detail[128];\n      snprintf(detail, sizeof(detail), \"found '\\\\r' at index %td\", (ptrdiff_t)(found - header));\n      probe_log(\"invalid_header_char_cr\", response, kind, header, header_len, content, content_len, detail);\n      return false;\n    }\n  }\n  {\n    const char *found = memchr (header, '\\n', header_len);\n    if (NULL != found)\n    {\n      char detail[128];\n      snprintf(detail, sizeof(detail), \"found '\\\\n' at index %td\", (ptrdiff_t)(found - header));\n      probe_log(\"invalid_header_char_lf\", response, kind, header, header_len, content, content_len, detail);\n      return false;\n    }\n  }\n\n  /* Check content for CR/LF and log if found */\n  {\n    const char *found = memchr (content, '\\r', content_len);\n    if (NULL != found)\n    {\n      char detail[128];\n      snprintf(detail, sizeof(detail), \"found '\\\\r' in content at index %td\", (ptrdiff_t)(found - content));\n      probe_log(\"invalid_content_char_cr\", response, kind, header, header_len, content, content_len, detail);\n      return false;\n    }\n  }\n  {\n    const char *found = memchr (content, '\\n', content_len);\n    if (NULL != found)\n    {\n      char detail[128];\n      snprintf(detail, sizeof(detail), \"found '\\\\n' in content at index %td\", (ptrdiff_t)(found - content));\n      probe_log(\"invalid_content_char_lf\", response, kind, header, header_len, content, content_len, detail);\n      return false;\n    }\n  }\n\n  /* Before delegating to the unchecked add function, log the decision */\n  probe_log(\"calling_add_response_entry_no_check\", response, kind, header, header_len, content, content_len,\n            \"delegating to MHD_add_response_entry_no_check_\");\n\n  bool result = MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                                   content, content_len);\n\n  /* Log result of delegation */\n  probe_log(result ? \"success_delegated\" : \"failure_delegated\", response, kind, header, header_len, content, content_len,\n            result ? \"MHD_add_response_entry_no_check_ returned true\" : \"MHD_add_response_entry_no_check_ returned false\");\n\n  return result;\n}\n"
}