{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No fragments require investigation for MISRA C 2023 Rule 17.8. The rule forbids modifying the function parameter itself (the pointer variable), while allowing modification of the object pointed to. In the provided function: \n- mhd_assert(NULL == daemon->master); only reads the member daemon->master \u2014 no modification of the parameter or the pointer value. \n- MHD_mutex_lock_chk_(&daemon->per_ip_connection_mutex); takes the address of a member and will (if applicable) modify the mutex object pointed to by that address; modifying the object pointed to by a pointer parameter is permitted by the rule. The pointer variable daemon itself is not modified or reassigned. \n- (void) daemon; is only a cast to suppress unused-parameter warnings and does not modify the parameter. \nThere are no assignments, increments, pointer arithmetic, or reassignments to the parameter daemon in the code, so no violations of Rule 17.8 are present."
}