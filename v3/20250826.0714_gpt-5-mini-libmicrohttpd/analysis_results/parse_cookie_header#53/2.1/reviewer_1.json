{
  "user_message": "An agent A claimed that the following parse_cookie_header code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n\n</misra_rule>\n<target_code>\nHere is the original code of parse_cookie_header.\n```c\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n    return MHD_PARSE_COOKIE_OK;\n  if (0 == hdr_len)\n    return MHD_PARSE_COOKIE_OK;\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  default:\n    mhd_assert (0);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  return parse_res;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert(0) is implemented as a non\u2011returning diagnostics handler (for example it expands to a call to abort(), an infinite loop, or a noreturn function invoked on assertion failure), then the subsequent break; statement is unreachable. That constitutes unreachable code and therefore violates MISRA C 2023 Rule 2.1. (If, instead, mhd_assert is a no\u2011op in some build configurations, the break is reachable \u2014 but the presence of a build configuration in which mhd_assert does not return makes this code a violation.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06270, daemon=0x562aa6b038d0, client_discipline=0, headers_received_tail=0x562aa6b0e3c0\nparse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=0x562aa6b06270\nparse_cookie_header: ENTRY; connection=0x562aa6b06\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. If mhd_assert(0) is implemented as a non\u2011returning diagnostics handler (for example it expands to a call to abort(), an infinite loop, or a function marked noreturn), then the subsequent break; in the default case can never be executed. MISRA C 2023 Rule 2.1 forbids unreachable code in the project; therefore, in a project build configuration where mhd_assert does not return, the break statement (and any code after a non\u2011returning call in that case) is indeed unreachable and violates Rule 2.1. Note the converse: if in the actual project configuration mhd_assert is a no\u2011op (or otherwise returns), then the break is reachable and there is no violation \u2014 MISRA applies to the project as built. To remediate, either remove the unreachable break, ensure the assertion is not declared noreturn in that configuration, or restructure the default case (for example return or otherwise make flow explicit) so no statement is provably unreachable."
}