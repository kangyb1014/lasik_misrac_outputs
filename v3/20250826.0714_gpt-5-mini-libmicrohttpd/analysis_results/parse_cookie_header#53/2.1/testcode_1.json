{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert(0) is implemented as a non\u2011returning diagnostics handler (for example it expands to a call to abort(), an infinite loop, or a noreturn function invoked on assertion failure), then the subsequent break; statement is unreachable. That constitutes unreachable code and therefore violates MISRA C 2023 Rule 2.1. (If, instead, mhd_assert is a no\u2011op in some build configurations, the break is reachable \u2014 but the presence of a build configuration in which mhd_assert does not return makes this code a violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_cookie_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/531.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_cookie_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_cookie_header:\n```c\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n    return MHD_PARSE_COOKIE_OK;\n  if (0 == hdr_len)\n    return MHD_PARSE_COOKIE_OK;\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  default:\n    mhd_assert (0);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  return parse_res;\n}\n```\n</target_code>\nPlease provide the modified parse_cookie_header code.\n",
  "test_code": "/* Probe helpers to log control flow and state for MISRA Rule 2.1 investigation */\n#include <stdio.h>\n#include <stdarg.h>\n\nstatic void probe_log_fmt(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/531.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic void probe_log_connection_entry(const struct MHD_Connection *connection,\n                                       const char *note)\n{\n  if (NULL == connection)\n  {\n    probe_log_fmt(\"parse_cookie_header: %s; connection=NULL\", note);\n    return;\n  }\n  probe_log_fmt(\"parse_cookie_header: %s; connection=%p, daemon=%p, client_discipline=%d, headers_received_tail=%p\",\n                note,\n                (const void *) connection,\n                (const void *) connection->daemon,\n                (int) connection->daemon->client_discipline,\n                (const void *) connection->rq.headers_received_tail);\n}\n\nstatic void probe_log_after_parse(const char *stage, const char *hdr, size_t hdr_len,\n                                  const char *cpy, enum _MHD_ParseCookie parse_res,\n                                  const struct MHD_Connection *connection,\n                                  struct MHD_HTTP_Req_Header *const saved_tail)\n{\n  probe_log_fmt(\"parse_cookie_header: %s; hdr=%p, hdr_len=%zu, cpy=%p, parse_res=%d, connection=%p, saved_tail=%p\",\n                stage,\n                (const void *) hdr,\n                hdr_len,\n                (const void *) cpy,\n                (int) parse_res,\n                (const void *) connection,\n                (const void *) saved_tail);\n}\n\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  probe_log_connection_entry(connection, \"ENTRY\");\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n  {\n    probe_log_fmt(\"parse_cookie_header: no Cookie header found; returning MHD_PARSE_COOKIE_OK; connection=%p\",\n                  (void *) connection);\n    return MHD_PARSE_COOKIE_OK;\n  }\n  probe_log_fmt(\"parse_cookie_header: Cookie header found; hdr=%p, hdr_len=%zu, connection=%p\",\n                (const void *) hdr,\n                hdr_len,\n                (const void *) connection);\n\n  if (0 == hdr_len)\n  {\n    probe_log_fmt(\"parse_cookie_header: hdr_len==0; returning MHD_PARSE_COOKIE_OK; connection=%p\",\n                  (void *) connection);\n    return MHD_PARSE_COOKIE_OK;\n  }\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n  {\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n    probe_log_after_parse(\"allocation_failed\", hdr, hdr_len, cpy, parse_res, connection, saved_tail);\n  }\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n    probe_log_after_parse(\"after_parse_cookies_string\", hdr, hdr_len, cpy, parse_res, connection, saved_tail);\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    probe_log_fmt(\"parse_cookie_header: case MHD_PARSE_COOKIE_OK; connection=%p\", (void *) connection);\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    probe_log_fmt(\"parse_cookie_header: case MHD_PARSE_COOKIE_OK_LAX; saved_tail=%p, current_tail=%p\",\n                  (void *) saved_tail, (void *) connection->rq.headers_received_tail);\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    probe_log_fmt(\"parse_cookie_header: case MHD_PARSE_COOKIE_MALFORMED; saved_tail=%p, current_tail=%p\",\n                  (void *) saved_tail, (void *) connection->rq.headers_received_tail);\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    probe_log_fmt(\"parse_cookie_header: case MHD_PARSE_COOKIE_NO_MEMORY; connection=%p\", (void *) connection);\n    break;\n  default:\n    /* Log state just before the assertion that may not return. */\n    probe_log_fmt(\"parse_cookie_header: default branch reached; parse_res=%d, connection=%p, saved_tail=%p, current_tail=%p; about to call mhd_assert(0)\",\n                  (int) parse_res,\n                  (void *) connection,\n                  (void *) saved_tail,\n                  (void *) connection->rq.headers_received_tail);\n    mhd_assert (0);\n    /* If mhd_assert returns (e.g. is a no-op in some builds), preserve original flow */\n    probe_log_fmt(\"parse_cookie_header: mhd_assert returned (unexpected in some builds); continuing; connection=%p\", (void *) connection);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  probe_log_fmt(\"parse_cookie_header: EXIT; parse_res=%d, connection=%p\", (int) parse_res, (void *) connection);\n\n  return parse_res;\n}\n"
}