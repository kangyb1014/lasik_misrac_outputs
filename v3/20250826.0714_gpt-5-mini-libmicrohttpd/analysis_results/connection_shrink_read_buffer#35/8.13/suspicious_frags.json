{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of connection_shrink_read_buffer:\n```c\nstatic void\nconnection_shrink_read_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  void *new_buf;\n\n  if ((NULL == c->read_buffer) || (0 == c->read_buffer_size))\n  {\n    mhd_assert (0 == c->read_buffer_size);\n    mhd_assert (0 == c->read_buffer_offset);\n    return;\n  }\n\n  mhd_assert (c->read_buffer_offset <= c->read_buffer_size);\n  if (0 == c->read_buffer_offset)\n  {\n    MHD_pool_deallocate (c->pool, c->read_buffer, c->read_buffer_size);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n  }\n  else\n  {\n    mhd_assert (MHD_pool_is_resizable_inplace (c->pool, c->read_buffer, \\\n                                               c->read_buffer_size));\n    new_buf = MHD_pool_reallocate (c->pool, c->read_buffer, c->read_buffer_size,\n                                   c->read_buffer_offset);\n    mhd_assert (c->read_buffer == new_buf);\n    c->read_buffer = new_buf;\n    c->read_buffer_size = c->read_buffer_offset;\n  }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert (c->read_buffer == new_buf);",
    "MHD_pool_deallocate (c->pool, c->read_buffer, c->read_buffer_size);",
    "new_buf = MHD_pool_reallocate (c->pool, c->read_buffer, c->read_buffer_size,",
    "void *new_buf;",
    "c->read_buffer = new_buf;",
    "c->read_buffer = NULL;",
    "struct MHD_Connection *const c = connection; /**< a short alias */",
    "mhd_assert (MHD_pool_is_resizable_inplace (c->pool, c->read_buffer, \\",
    "                                               c->read_buffer_size));",
    "                                   c->read_buffer_offset);",
    "if ((NULL == c->read_buffer) || (0 == c->read_buffer_size))",
    "static void\nconnection_shrink_read_buffer (struct MHD_Connection *connection)"
  ],
  "explanation": "I reported all code fragments that declare or pass pointers to non-const-qualified types (function parameter, the local alias, the local buffer pointer, uses of c->read_buffer and c->pool in pool APIs, and assignments to c->read_buffer). These are the locations that need review for MISRA C 2023 Rule 8.13 (whether the pointed-to types could be const-qualified). Other fragments in the function (integer checks, mhd_asserts comparing sizes/offsets, the early return, and non-pointer arithmetic) do not involve pointer types and therefore are not relevant to Rule 8.13; they were intentionally not included. Additionally, where the code clearly modifies the pointed-to data (e.g. deallocation/reallocation and assignments to c->read_buffer), const-qualification of the pointed-to type would likely be inappropriate \u2014 such cases still appear in the list so they can be verified against API requirements and design intent."
}