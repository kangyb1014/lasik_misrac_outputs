{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_check_response_header_token_ci:\n```c\nbool\nMHD_check_response_header_token_ci (const struct MHD_Response *response,\n                                    const char *key,\n                                    size_t key_len,\n                                    const char *token,\n                                    size_t token_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if ( (NULL == key) ||\n       ('\\0' == key[0]) ||\n       (NULL == token) ||\n       ('\\0' == token[0]) )\n    return false;\n\n  /* Token must not contain binary zero! */\n  mhd_assert (strlen (token) == token_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ( (pos->kind == MHD_HEADER_KIND) &&\n         (key_len == pos->header_size) &&\n         MHD_str_equal_caseless_bin_n_ (pos->header,\n                                        key,\n                                        key_len) &&\n         MHD_str_has_token_caseless_ (pos->value,\n                                      token,\n                                      token_len) )\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No controlling expressions in this function are invariant. Specific reasons:\n\n- The initial if ( (NULL == key) || ('\\0' == key[0]) || (NULL == token) || ('\\0' == token[0]) ) depends on the runtime values of the parameters key and token, so it is not invariant.\n\n- The for loop for (pos = response->first_header; NULL != pos; pos = pos->next) has a controlling expression (NULL != pos) that changes each iteration because pos is updated to pos->next; it is not invariant.\n\n- The inner if ( (pos->kind == MHD_HEADER_KIND) && (key_len == pos->header_size) && MHD_str_equal_caseless_bin_n_(...) && MHD_str_has_token_caseless_(...) ) depends on fields of pos and the results of function/macro calls that examine runtime data; it is not invariant.\n\n- The mhd_assert (strlen (token) == token_len); line is an assertion, not a loop or branch-controlling invariant relevant to Rule 14.3; even if the assert macro expands to conditional code, it is checking a runtime property of the token and is not an invariant constant expression.\n\n- There are no do/while loops or other constructs with constant controlling expressions that would fall under the listed exceptions.\n\nTherefore there are no code fragments in this function that warrant investigation for MISRA C 2023 Rule 14.3."
}