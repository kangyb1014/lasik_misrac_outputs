{
  "user_message": "An agent A claimed that the following MHD_check_response_header_token_ci code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_check_response_header_token_ci.\n```c\nbool\nMHD_check_response_header_token_ci (const struct MHD_Response *response,\n                                    const char *key,\n                                    size_t key_len,\n                                    const char *token,\n                                    size_t token_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if ( (NULL == key) ||\n       ('\\0' == key[0]) ||\n       (NULL == token) ||\n       ('\\0' == token[0]) )\n    return false;\n\n  /* Token must not contain binary zero! */\n  mhd_assert (strlen (token) == token_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ( (pos->kind == MHD_HEADER_KIND) &&\n         (key_len == pos->header_size) &&\n         MHD_str_equal_caseless_bin_n_ (pos->header,\n                                        key,\n                                        key_len) &&\n         MHD_str_has_token_caseless_ (pos->value,\n                                      token,\n                                      token_len) )\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'pos' is declared as 'struct MHD_HTTP_Res_Header *pos;'. The function takes a 'const struct MHD_Response *response' and only reads fields from the headers (pos->kind, pos->header_size, pos->header, pos->value, pos->next). Therefore 'pos' could and should be declared as 'const struct MHD_HTTP_Res_Header *pos;' to prevent modification of the pointed-to objects. This violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In this function 'pos' is only used to read fields (pos->kind, pos->header_size, pos->header, pos->value, pos->next) and is initialized from response->first_header where 'response' is a pointer to const. Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so 'pos' ought to be declared as 'const struct MHD_HTTP_Res_Header *pos;'. Assignments like 'pos = pos->next;' remain valid because converting from 'struct MHD_HTTP_Res_Header *' to 'const struct MHD_HTTP_Res_Header *' is allowed. The change would better reflect the read-only intent and prevent accidental modification of the pointed-to headers."
}