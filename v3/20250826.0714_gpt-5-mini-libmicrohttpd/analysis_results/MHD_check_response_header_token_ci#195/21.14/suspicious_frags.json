{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_check_response_header_token_ci:\n```c\nbool\nMHD_check_response_header_token_ci (const struct MHD_Response *response,\n                                    const char *key,\n                                    size_t key_len,\n                                    const char *token,\n                                    size_t token_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if ( (NULL == key) ||\n       ('\\0' == key[0]) ||\n       (NULL == token) ||\n       ('\\0' == token[0]) )\n    return false;\n\n  /* Token must not contain binary zero! */\n  mhd_assert (strlen (token) == token_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ( (pos->kind == MHD_HEADER_KIND) &&\n         (key_len == pos->header_size) &&\n         MHD_str_equal_caseless_bin_n_ (pos->header,\n                                        key,\n                                        key_len) &&\n         MHD_str_has_token_caseless_ (pos->value,\n                                      token,\n                                      token_len) )\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "MHD_str_equal_caseless_bin_n_ (pos->header,\n                                        key,\n                                        key_len)",
    "mhd_assert (strlen (token) == token_len);",
    "MHD_str_has_token_caseless_ (pos->value,\n                                      token,\n                                      token_len)"
  ],
  "explanation": "This snippet contains no direct call to memcmp, so the only places that can violate MISRA C 2023 Rule 21.14 are the helper/string routines called here and the fact that 'token' is asserted to be a null-terminated string. The three fragments above should be investigated because:\n- mhd_assert(strlen(token) == token_len) establishes that 'token' is a null-terminated C string (no embedded NUL), so passing it to routines that may internally use memcmp could result in memcmp being used to compare null-terminated strings.\n- MHD_str_equal_caseless_bin_n_ and MHD_str_has_token_caseless_ are string utility routines that may internally call memcmp; their implementations must be checked to ensure they do not use memcmp to compare null-terminated strings (they may be acceptable if they operate on explicit lengths or on binary data, but this must be confirmed).\n\nOther fragments in the function do not need investigation for this MISRA rule: the NULL/empty checks for key and token, the loop over response headers, the comparison of key_len to pos->header_size, and the overall control flow/returns do not themselves invoke string-comparison library functions and therefore cannot violate Rule 21.14 within this snippet. The only potential violations come from the asserted null-termination combined with the called string routines."
}