{
  "user_message": "An agent A claimed that the following MHD_connection_epoll_update_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_connection_epoll_update_.\n```c\nenum MHD_Result\nMHD_connection_epoll_update_ (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n\n  if ((0 != (MHD_EVENT_LOOP_INFO_PROCESS & connection->event_loop_info)) &&\n      (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL)))\n  {\n    /* Make sure that connection waiting for processing will be processed */\n    EDLL_insert (daemon->eready_head,\n                 daemon->eready_tail,\n                 connection);\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL;\n  }\n\n  if ( (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) &&\n       (0 == (connection->epoll_state & MHD_EPOLL_STATE_SUSPENDED)) &&\n       ( ( (MHD_EVENT_LOOP_INFO_WRITE == connection->event_loop_info) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_WRITE_READY))) ||\n         ( (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info)) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_READ_READY)) ) ) )\n  {\n    /* add to epoll set */\n    struct epoll_event event;\n\n    event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET;\n    event.data.ptr = connection;\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        connection->socket_fd,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      if (0 != (daemon->options & MHD_USE_ERROR_LOG))\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif\n      connection->state = MHD_CONNECTION_CLOSED;\n      cleanup_connection (connection);\n      return MHD_NO;\n    }\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EPOLL_SET;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer is declared as 'struct MHD_Daemon *const daemon' (a const pointer to a non-const object). In this function only read access to daemon members is performed (eready_head/tail, epoll_fd, options, etc.), so the pointed-to object need not be mutable. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. 'const struct MHD_Daemon *daemon' or 'struct MHD_Daemon const *daemon'). Therefore this usage violates Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The local declaration is \"struct MHD_Daemon *const daemon\" (a const pointer to a non-const object). In the body of MHD_connection_epoll_update_ the code only reads members of *daemon (eready_head/eready_tail, epoll_fd, options, etc.) and does not modify the pointed-to object. Per MISRA C 2023 Rule 8.13, a pointer that does not need to be used to modify its pointee should instead point to a const-qualified type. Therefore the pointer should be declared to point to const (for example: \"const struct MHD_Daemon * const daemon = connection->daemon;\" or at least \"const struct MHD_Daemon *daemon = connection->daemon;\").\n\nNote: if the daemon pointer is later passed to functions that expect a non-const struct MHD_Daemon *, that API incompatibility would need to be resolved (change prototypes or add an explicit cast with justification). Absent such a justification in the code shown, the reported violation is correct."
}