{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer is declared as 'struct MHD_Daemon *const daemon' (a const pointer to a non-const object). In this function only read access to daemon members is performed (eready_head/tail, epoll_fd, options, etc.), so the pointed-to object need not be mutable. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. 'const struct MHD_Daemon *daemon' or 'struct MHD_Daemon const *daemon'). Therefore this usage violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_epoll_update_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_epoll_update_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_epoll_update_:\n```c\nenum MHD_Result\nMHD_connection_epoll_update_ (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n\n  if ((0 != (MHD_EVENT_LOOP_INFO_PROCESS & connection->event_loop_info)) &&\n      (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL)))\n  {\n    /* Make sure that connection waiting for processing will be processed */\n    EDLL_insert (daemon->eready_head,\n                 daemon->eready_tail,\n                 connection);\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL;\n  }\n\n  if ( (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) &&\n       (0 == (connection->epoll_state & MHD_EPOLL_STATE_SUSPENDED)) &&\n       ( ( (MHD_EVENT_LOOP_INFO_WRITE == connection->event_loop_info) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_WRITE_READY))) ||\n         ( (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info)) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_READ_READY)) ) ) )\n  {\n    /* add to epoll set */\n    struct epoll_event event;\n\n    event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET;\n    event.data.ptr = connection;\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        connection->socket_fd,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      if (0 != (daemon->options & MHD_USE_ERROR_LOG))\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif\n      connection->state = MHD_CONNECTION_CLOSED;\n      cleanup_connection (connection);\n      return MHD_NO;\n    }\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EPOLL_SET;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_epoll_update_ code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logger: append human-readable trace to /tmp/logs/23.txt */\nstatic void mhd_probe_log (const char *stage,\n                           struct MHD_Connection *connection,\n                           struct MHD_Daemon *const daemon,\n                           int errnum)\n{\n  FILE *f = fopen (\"/tmp/logs/23.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time (NULL);\n  fprintf (f, \"[%ld] %s: connection=%p\\n\", (long)t, stage, (void *)connection);\n  if (connection != NULL)\n  {\n    fprintf (f, \"  socket_fd=%d, event_loop_info=0x%lx, epoll_state=0x%lx\\n\",\n             connection->socket_fd,\n             (unsigned long) connection->event_loop_info,\n             (unsigned long) connection->epoll_state);\n  }\n  if (daemon != NULL)\n  {\n    fprintf (f, \"  daemon=%p, epoll_fd=%d, eready_head=%p, eready_tail=%p, options=0x%lx\\n\",\n             (void *) daemon,\n             daemon->epoll_fd,\n             (void *) daemon->eready_head,\n             (void *) daemon->eready_tail,\n             (unsigned long) daemon->options);\n  }\n  if (errnum != 0)\n  {\n    fprintf (f, \"  errno=%d (%s)\\n\", errnum, strerror (errnum));\n  }\n  fflush (f);\n  fclose (f);\n}\n\nenum MHD_Result\nMHD_connection_epoll_update_ (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Log entry state */\n  mhd_probe_log (\"ENTRY\", connection, daemon, 0);\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n\n  if ((0 != (MHD_EVENT_LOOP_INFO_PROCESS & connection->event_loop_info)) &&\n      (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL)))\n  {\n    /* Make sure that connection waiting for processing will be processed */\n    mhd_probe_log (\"BEFORE_EDLL_INSERT\", connection, daemon, 0);\n    EDLL_insert (daemon->eready_head,\n                 daemon->eready_tail,\n                 connection);\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL;\n    mhd_probe_log (\"AFTER_EDLL_INSERT\", connection, daemon, 0);\n  }\n\n  if ( (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) &&\n       (0 == (connection->epoll_state & MHD_EPOLL_STATE_SUSPENDED)) &&\n       ( ( (MHD_EVENT_LOOP_INFO_WRITE == connection->event_loop_info) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_WRITE_READY))) ||\n         ( (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info)) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_READ_READY)) ) ) )\n  {\n    /* add to epoll set */\n    struct epoll_event event;\n\n    event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET;\n    event.data.ptr = connection;\n    mhd_probe_log (\"BEFORE_EPOLL_CTL_ADD\", connection, daemon, 0);\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        connection->socket_fd,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      if (0 != (daemon->options & MHD_USE_ERROR_LOG))\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif\n      /* Log failure details before cleanup */\n      mhd_probe_log (\"EPOLL_CTL_ADD_FAILED\", connection, daemon, errno);\n      connection->state = MHD_CONNECTION_CLOSED;\n      cleanup_connection (connection);\n      mhd_probe_log (\"RETURN_NO_AFTER_CLEANUP\", connection, daemon, 0);\n      return MHD_NO;\n    }\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EPOLL_SET;\n    mhd_probe_log (\"AFTER_EPOLL_CTL_ADD\", connection, daemon, 0);\n  }\n  mhd_probe_log (\"RETURN_YES\", connection, daemon, 0);\n  return MHD_YES;\n}\n"
}