{
  "user_message": "An agent A claimed that the following MHD_lookup_header_token_ci code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_lookup_header_token_ci.\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes 'token' (checked earlier as a C string: token != NULL and token[0] != 0) and 'pos->value' (header value, also a C string) into MHD_str_has_token_caseless_. If that function internally uses the Standard Library function memcmp to compare the null\u2011terminated token (or null\u2011terminated substrings of pos->value) \u2014 e.g. memcmp(p, token, token_len) == 0 or memcmp(token, p, token_len) == 0 \u2014 then Rule 21.14 is violated because memcmp is being used to compare null\u2011terminated strings.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is speculative and cannot be confirmed from the snippet. The shown function does not call memcmp directly \u2014 it calls MHD_str_has_token_caseless_ (and MHD_str_equal_caseless_bin_n_). MISRA C 2023 Rule 21.14 forbids using the standard memcmp to compare null\u2011terminated strings. Whether the rule is violated depends entirely on the implementation of the called helper(s). If MHD_str_has_token_caseless_ (or any other called routine) internally calls memcmp using a length derived from a null\u2011terminated string (e.g. strlen(...) or strlen(...)+1) or otherwise compares whole C strings via memcmp, that would violate 21.14. If it uses memcmp only to compare fixed-length binary buffers (with lengths that are independent of treating the operands as NUL\u2011terminated strings) or uses appropriate string functions (strcmp/strncasecmp) for NUL\u2011terminated strings, then there is no violation.\n\nTherefore, based on the code shown alone the report is not proven correct. To decide definitively, inspect the implementation of MHD_str_has_token_caseless_ (and any other helper) for uses of memcmp that compare null\u2011terminated strings."
}