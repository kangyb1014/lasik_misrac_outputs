{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "MHD_str_has_token_caseless_ (pos->value, token, token_len)",
    "MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)",
    "if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))"
  ],
  "explanation": "MISRA C 2023 Rule 21.14 prohibits using the standard memcmp to compare null-terminated strings. This function does not directly call memcmp anywhere else in its body. The only calls that could internally use memcmp (and thus potentially violate the rule) are the two helper routines: MHD_str_equal_caseless_bin_n_ and MHD_str_has_token_caseless_. Those helper calls (and the combined if condition that uses them) are therefore flagged for investigation. Other fragments in this function do not need investigation for Rule 21.14: the null-pointer checks and header[0]/token[0] emptiness tests are safe (pointers are checked before indexing), the pointer equality check (header == pos->header) is not a memcmp use, the header_len == pos->header_size comparison is an integer compare, the for-loop and early return logic contain no string-comparison library calls. Inspect the implementations of the two helper functions to determine whether they (directly or indirectly) call memcmp on null-terminated strings."
}