{
  "user_message": "An agent A claimed that the following MHD_lookup_header_token_ci code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_lookup_header_token_ci.\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call may violate Rule 21.17 if the helper MHD_str_has_token_caseless_ uses string.h routines (e.g. memcmp/memcpy/strlen) without ensuring its pointer/length arguments are within the actual object bounds. Example violation: token points to a 4\u2011byte buffer (\"abc\\0\") but token_len==10, and MHD_str_has_token_caseless_ calls memcmp(..., token, token_len) or otherwise reads token_len bytes \u2014 this would access beyond the token object. Similarly, if pos->value is shorter than token_len and the helper reads token_len bytes from pos->value, that also overruns the buffer.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not provably correct based on the code shown. MHD_lookup_header_token_ci itself does not call any <string.h> routines \u2014 it only forwards header/token pointers and lengths to helper functions (MHD_str_equal_caseless_bin_n_ and MHD_str_has_token_caseless_). MISRA C 2023 Rule 21.17 forbids string.h calls that can access beyond object bounds. A violation could occur only if one of those helper functions uses a string.h routine (e.g. memcmp, strlen, memcpy) in a way that reads more bytes than the actual objects provide (for example using token_len when token actually points to a shorter buffer). That is a possible defect, but it is not demonstrated by MHD_lookup_header_token_ci alone \u2014 you must inspect the implementations of the helper functions (and the callers/contract that produce token_len/header_len) to determine whether any string.h call can overrun its buffers.\n\nTherefore Agent A\u2019s scenario describes a plausible\u2014but not proven\u2014violation. To confirm a true MISRA 21.17 violation you need evidence that a helper calls a string.h function without ensuring the pointer/length pair are within the referenced object bounds. If you want a recommendation: verify the helper implementations ensure lengths do not exceed the actual object size (or are passed true object sizes), avoid using strlen on potentially non-NUL-terminated buffers, and ensure memcmp/memcpy/memmove etc. are only called with lengths known to be within the source and destination object bounds."
}