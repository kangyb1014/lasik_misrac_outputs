{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf header_len does not reflect the actual number of bytes available at pointer header (for example header_len is larger than the storage or the true length of the buffer pointed to by header), the call to MHD_str_equal_caseless_bin_n_(header, pos->header, header_len) can cause the function to read header_len bytes from header. If MHD_str_equal_caseless_bin_n_ uses a <string.h> routine such as memcmp/strncasecmp internally, that will access beyond header's bounds. Note: the code only checks header != NULL and header[0] != 0 and compares header_len to pos->header_size (protecting pos->header), but it does not validate that header actually has header_len bytes, so an out-of-bounds access is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_header_token_ci code that contains useful probe functions that print useful logs to a file \"/tmp/logs/149.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_header_token_ci code.\n",
  "test_code": "static void mhd_log_write_buffer(const char *buf, int len)\n{\n  /* Minimal, dependency-light file writer to append to /tmp/logs/149.txt.\n     Uses numeric flags instead of macros so we don't add headers or macros. */\n  extern int open(const char *path, int flags, ...);\n  extern long write(int fd, const void *buf, long count);\n  extern int close(int fd);\n\n  int fd = open(\"/tmp/logs/149.txt\", 1089, 0644); /* O_WRONLY|O_CREAT|O_APPEND = 1|64|1024 = 1089 */\n  if (fd < 0)\n    return;\n  if (len > 0)\n    write(fd, buf, (long)len);\n  close(fd);\n}\n\nstatic void mhd_log_write_str(const char *s)\n{\n  int i = 0;\n  char buf[1024];\n  while (s && *s && i < (int)sizeof(buf) - 2)\n    buf[i++] = *s++;\n  buf[i++] = '\\n';\n  mhd_log_write_buffer(buf, i);\n}\n\nstatic int mhd_utoa_dec(char *out, unsigned long v, int max)\n{\n  /* write decimal representation of v into out, return number of bytes written */\n  char tmp[32];\n  int ti = 0;\n  if (v == 0) {\n    if (max <= 0) return 0;\n    out[0] = '0';\n    return 1;\n  }\n  while (v && ti < (int)sizeof(tmp)) {\n    tmp[ti++] = (char)('0' + (v % 10));\n    v /= 10;\n  }\n  int i = 0;\n  while (ti-- > 0 && i < max) {\n    out[i++] = tmp[ti];\n  }\n  return i;\n}\n\nstatic int mhd_utoa_hex(char *out, unsigned long v, int max)\n{\n  const char *hex = \"0123456789abcdef\";\n  char tmp[32];\n  int ti = 0;\n  if (v == 0) {\n    if (max < 3) return 0;\n    out[0] = '0'; out[1] = 'x'; out[2] = '0';\n    return 3;\n  }\n  while (v && ti < (int)sizeof(tmp)) {\n    tmp[ti++] = hex[v & 0xf];\n    v >>= 4;\n  }\n  int i = 0;\n  if (i < max) out[i++] = '0';\n  if (i < max) out[i++] = 'x';\n  while (ti-- > 0 && i < max) out[i++] = tmp[ti];\n  return i;\n}\n\nstatic void mhd_log_state_entry(const struct MHD_Connection *connection,\n                                const char *header, size_t header_len,\n                                const char *token, size_t token_len,\n                                const char *stage)\n{\n  char buf[512];\n  int p = 0;\n  /* stage */\n  const char *s = stage ? stage : \"(stage)\";\n  while (*s && p < (int)sizeof(buf)-1) buf[p++] = *s++;\n  if (p < (int)sizeof(buf)-1) buf[p++] = ':'; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n\n  /* connection pointer */\n  p += mhd_utoa_hex(buf + p, (unsigned long)connection, (int)(sizeof(buf)-p));\n  if (p < (int)sizeof(buf)-1) buf[p++] = ','; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n\n  /* header pointer */\n  if (header) {\n    int n = mhd_utoa_hex(buf + p, (unsigned long)header, (int)(sizeof(buf)-p)); p += n;\n  } else {\n    const char *nulls = \"header=NULL\";\n    const char *t = nulls; while (*t && p < (int)sizeof(buf)-1) buf[p++] = *t++;\n  }\n  if (p < (int)sizeof(buf)-1) buf[p++] = ','; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n\n  /* header_len */\n  p += mhd_utoa_dec(buf + p, (unsigned long)header_len, (int)(sizeof(buf)-p));\n  if (p < (int)sizeof(buf)-1) buf[p++] = ','; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n\n  /* token pointer */\n  if (token) {\n    p += mhd_utoa_hex(buf + p, (unsigned long)token, (int)(sizeof(buf)-p));\n  } else {\n    const char *nullt = \"token=NULL\";\n    const char *t = nullt; while (*t && p < (int)sizeof(buf)-1) buf[p++] = *t++;\n  }\n  if (p < (int)sizeof(buf)-1) buf[p++] = ','; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n\n  /* token_len */\n  p += mhd_utoa_dec(buf + p, (unsigned long)token_len, (int)(sizeof(buf)-p));\n\n  /* newline */\n  buf[p++] = '\\n';\n  mhd_log_write_buffer(buf, p);\n}\n\n/* The modified function with probes inserted but original logic preserved. */\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  /* Log entry with initial parameters */\n  mhd_log_state_entry(connection, header, header_len, token, token_len, \"ENTER\");\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0])) {\n    mhd_log_state_entry(connection, header, header_len, token, token_len, \"EARLY_RETURN_FALSE\");\n    return false;\n  }\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log state at start of each loop iteration (pos pointer, header_size, header pointer, kind) */\n    {\n      char buf[256];\n      int p = 0;\n      const char *label = \"LOOP_POS:\";\n      const char *s = label;\n      while (*s && p < (int)sizeof(buf)-1) buf[p++] = *s++;\n      p += mhd_utoa_hex(buf + p, (unsigned long)pos, (int)(sizeof(buf)-p));\n      if (p < (int)sizeof(buf)-1) buf[p++] = ','; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n      if (p < (int)sizeof(buf)-1) buf[p++] = 'h'; if (p < (int)sizeof(buf)-1) buf[p++] = ':';\n      if (pos->header) p += mhd_utoa_hex(buf + p, (unsigned long)pos->header, (int)(sizeof(buf)-p));\n      else {\n        const char *nulls = \"header=NULL\"; const char *t = nulls; while (*t && p < (int)sizeof(buf)-1) buf[p++] = *t++;\n      }\n      if (p < (int)sizeof(buf)-1) buf[p++] = ','; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n      if (p < (int)sizeof(buf)-1) buf[p++] = 's'; if (p < (int)sizeof(buf)-1) buf[p++] = ':';\n      p += mhd_utoa_dec(buf + p, (unsigned long)pos->header_size, (int)(sizeof(buf)-p));\n      if (p < (int)sizeof(buf)-1) buf[p++] = ','; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n      if (p < (int)sizeof(buf)-1) buf[p++] = 'k'; if (p < (int)sizeof(buf)-1) buf[p++] = ':';\n      p += mhd_utoa_dec(buf + p, (unsigned long)pos->kind, (int)(sizeof(buf)-p));\n      buf[p++] = '\\n';\n      mhd_log_write_buffer(buf, p);\n    }\n\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n    {\n      /* Log match details before returning true */\n      {\n        char buf[256];\n        int p = 0;\n        const char *label = \"MATCH_TRUE:\";\n        const char *s = label;\n        while (*s && p < (int)sizeof(buf)-1) buf[p++] = *s++;\n        p += mhd_utoa_hex(buf + p, (unsigned long)pos, (int)(sizeof(buf)-p));\n        if (p < (int)sizeof(buf)-1) buf[p++] = ','; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n        if (p < (int)sizeof(buf)-1) buf[p++] = 'h'; if (p < (int)sizeof(buf)-1) buf[p++] = ':';\n        p += mhd_utoa_hex(buf + p, (unsigned long)pos->header, (int)(sizeof(buf)-p));\n        if (p < (int)sizeof(buf)-1) buf[p++] = ','; if (p < (int)sizeof(buf)-1) buf[p++] = ' ';\n        p += mhd_utoa_dec(buf + p, (unsigned long)header_len, (int)(sizeof(buf)-p));\n        buf[p++] = '\\n';\n        mhd_log_write_buffer(buf, p);\n      }\n\n      return true;\n    }\n    else\n    {\n      /* Log non-match reason for this pos (we don't try to be exhaustive to keep code simple) */\n      mhd_log_write_str(\"LOOP_POS_NO_MATCH\");\n    }\n  }\n\n  mhd_log_write_str(\"EXIT_FALSE\");\n  return false;\n}\n"
}