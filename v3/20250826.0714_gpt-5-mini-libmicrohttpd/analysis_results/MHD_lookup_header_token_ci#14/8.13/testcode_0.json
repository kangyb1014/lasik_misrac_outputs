{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct MHD_HTTP_Req_Header::header is declared as a non-const char * (e.g. char *header), this is a violation: the function treats the header as read\u2011only (const char *header parameter and only performs comparisons/reads), so the pointer in the struct should be const-qualified. In that case Rule 8.13 is violated (pos->header should be declared const char *). If, however, pos->header is already declared as const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_header_token_ci code that contains useful probe functions that print useful logs to a file \"/tmp/logs/143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_header_token_ci code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe/log helper: append entries to /tmp/logs/143.txt */\nstatic void\nMHD_log_append(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/143.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s\", msg);\n  fclose(f);\n}\n\nstatic void\nMHD_log_header_entry(const struct MHD_Connection *connection,\n                     const char *header,\n                     size_t header_len,\n                     const char *token,\n                     size_t token_len)\n{\n  FILE *f = fopen(\"/tmp/logs/143.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"\\n---- MHD_lookup_header_token_ci ENTRY ----\\n\");\n  fprintf(f, \"connection=%p header_ptr=%p header_len=%zu token_ptr=%p token_len=%zu\\n\",\n          (void *)connection, (void *)header, header_len, (void *)token, token_len);\n  /* Print header and token as limited strings to avoid unterminated reads */\n  if (header != NULL)\n    fprintf(f, \"header(precise)='%.*s'\\n\", (int)header_len, header);\n  else\n    fprintf(f, \"header=NULL\\n\");\n  if (token != NULL)\n    fprintf(f, \"token(precise)='%.*s'\\n\", (int)token_len, token);\n  else\n    fprintf(f, \"token=NULL\\n\");\n  fclose(f);\n}\n\nstatic void\nMHD_log_header_iteration(const struct MHD_HTTP_Req_Header *pos,\n                          const char *header,\n                          size_t header_len,\n                          const char *token,\n                          size_t token_len,\n                          int kind_check,\n                          int header_size_check,\n                          int pointer_eq,\n                          int caseless_eq,\n                          int token_has)\n{\n  FILE *f = fopen(\"/tmp/logs/143.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"-- iteration: pos=%p next=%p\\n\", (void *)pos, (void *)pos->next);\n  fprintf(f, \"   pos->header_ptr=%p pos->header_size=%zu pos->value_ptr=%p pos->kind=0x%08x\\n\",\n          (void *)pos->header, pos->header_size, (void *)pos->value, (unsigned)pos->kind);\n  if (pos->header != NULL)\n    fprintf(f, \"   pos->header(precise)='%.*s'\\n\", (int)pos->header_size, pos->header);\n  else\n    fprintf(f, \"   pos->header=NULL\\n\");\n  if (pos->value != NULL)\n    fprintf(f, \"   pos->value(sample)='%.*s'\\n\", 64, pos->value);\n  else\n    fprintf(f, \"   pos->value=NULL\\n\");\n\n  fprintf(f, \"   checks: kind_check=%d header_size_check=%d pointer_eq=%d caseless_eq=%d token_has=%d\\n\",\n          kind_check, header_size_check, pointer_eq, caseless_eq, token_has);\n  fclose(f);\n}\n\n/* Original function with logging probes inserted. Preserves original logic. */\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  /* Log entry with parameters */\n  MHD_log_header_entry(connection, header, header_len, token, token_len);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Evaluate the same checks as original, but capture intermediate results for logging. */\n    int kind_check = (0 != (pos->kind & MHD_HEADER_KIND));\n    int header_size_check = (header_len == pos->header_size);\n    int pointer_eq = (header == pos->header);\n    int caseless_eq = 0;\n    int token_has = 0;\n\n    if (!pointer_eq)\n    {\n      /* Only call the caseless comparison when needed (same as original short-circuit behavior). */\n      caseless_eq = MHD_str_equal_caseless_bin_n_(header, pos->header, header_len);\n    }\n\n    /* Only call token check if prior checks pass, to preserve original control flow and side-effect profile. */\n    if (kind_check && header_size_check && (pointer_eq || caseless_eq))\n    {\n      token_has = MHD_str_has_token_caseless_(pos->value, token, token_len);\n      MHD_log_header_iteration(pos, header, header_len, token, token_len,\n                               kind_check, header_size_check, pointer_eq,\n                               caseless_eq, token_has);\n      if (token_has)\n        return true;\n    }\n    else\n    {\n      /* Log the failed checks for this iteration (token_has remains 0). */\n      MHD_log_header_iteration(pos, header, header_len, token, token_len,\n                               kind_check, header_size_check, pointer_eq,\n                               caseless_eq, token_has);\n    }\n  }\n  return false;\n}\n"
}