{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos;' but in the function it is only used to read the linked-list nodes (inspect fields and follow next). It does not modify the pointed-to objects, so it should be const-qualified (e.g. 'const struct MHD_HTTP_Req_Header *pos;') to satisfy Rule 8.13. Assigning pos = pos->next would still be valid (the non-const member pointer is converted to a pointer-to-const on assignment).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_header_token_ci code that contains useful probe functions that print useful logs to a file \"/tmp/logs/143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_header_token_ci code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n\n/* Probe: append logs useful to reproduce the Rule 8.13 scenario. */\nstatic void\nMHD_log_probe_entry(const struct MHD_Connection *connection,\n                    const char *header, size_t header_len,\n                    const char *token, size_t token_len)\n{\n  FILE *f = fopen(\"/tmp/logs/143.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"MHD_lookup_header_token_ci ENTRY\\n\");\n  fprintf(f, \" connection=%p\\n\", (const void *)connection);\n  fprintf(f, \" header=%p header_len=%zu\\n\", (const void *)header, header_len);\n  if (NULL != header && header_len > 0)\n  {\n    /* print up to 128 bytes of the header value for context */\n    int to_print = (header_len > 128) ? 128 : (int)header_len;\n    fprintf(f, \" header_prefix(%d)='%.*s'\\n\", to_print, to_print, header);\n  }\n  fprintf(f, \" token=%p token_len=%zu\\n\", (const void *)token, token_len);\n  if (NULL != token && token_len > 0)\n  {\n    int to_print = (token_len > 128) ? 128 : (int)token_len;\n    fprintf(f, \" token_prefix(%d)='%.*s'\\n\", to_print, to_print, token);\n  }\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic void\nMHD_log_probe_iter(const struct MHD_HTTP_Req_Header *pos,\n                   const char *header, size_t header_len,\n                   const char *token, size_t token_len,\n                   bool kind_ok, bool header_len_ok,\n                   bool header_eq_ok, bool token_ok)\n{\n  FILE *f = fopen(\"/tmp/logs/143.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"ITER: pos=%p\\n\", (const void *)pos);\n  if (NULL != pos)\n  {\n    fprintf(f, \"  pos->header=%p pos->header_size=%zu pos->value=%p pos->kind=0x%08x\\n\",\n            (const void *)pos->header, (size_t)pos->header_size,\n            (const void *)pos->value, (unsigned int)pos->kind);\n    if (NULL != pos->header && pos->header_size > 0)\n    {\n      int to_print = (pos->header_size > 128) ? 128 : (int)pos->header_size;\n      fprintf(f, \"  pos->header_prefix(%d)='%.*s'\\n\", to_print, to_print, pos->header);\n    }\n    if (NULL != pos->value)\n    {\n      /* value may be longer; print prefix */\n      fprintf(f, \"  pos->value_prefix='%.*s'\\n\", 64, pos->value);\n    }\n  }\n\n  fprintf(f, \"  checks: kind_ok=%d header_len_ok=%d header_eq_ok=%d token_ok=%d\\n\",\n          kind_ok ? 1 : 0, header_len_ok ? 1 : 0,\n          header_eq_ok ? 1 : 0, token_ok ? 1 : 0);\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  /* Log entry and inputs */\n  MHD_log_probe_entry(connection, header, header_len, token, token_len);\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Evaluate condition pieces in the same short-circuit order as original\n       so behavior is preserved. Capture intermediate results for logging. */\n    bool kind_ok = (0 != (pos->kind & MHD_HEADER_KIND));\n    bool header_len_ok = (header_len == pos->header_size);\n\n    bool header_eq_ok = false;\n    if (header_len_ok)\n    {\n      if (header == pos->header)\n        header_eq_ok = true;\n      else\n        header_eq_ok = MHD_str_equal_caseless_bin_n_ (header, pos->header, header_len);\n    }\n\n    bool token_ok = false;\n    if (kind_ok && header_len_ok && header_eq_ok)\n    {\n      token_ok = MHD_str_has_token_caseless_ (pos->value, token, token_len);\n    }\n\n    /* Log this iteration's state and intermediate results */\n    MHD_log_probe_iter((const struct MHD_HTTP_Req_Header *)pos, header, header_len,\n                       token, token_len, kind_ok, header_len_ok, header_eq_ok, token_ok);\n\n    if (kind_ok && header_len_ok && header_eq_ok && token_ok)\n      return true;\n  }\n  return false;\n}\n"
}