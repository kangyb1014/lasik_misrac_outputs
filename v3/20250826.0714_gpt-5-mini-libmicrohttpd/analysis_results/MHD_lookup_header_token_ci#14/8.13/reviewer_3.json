{
  "user_message": "An agent A claimed that the following MHD_lookup_header_token_ci code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_lookup_header_token_ci.\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos;' but in the function it is only used to read the linked-list nodes (inspect fields and follow next). It does not modify the pointed-to objects, so it should be const-qualified (e.g. 'const struct MHD_HTTP_Req_Header *pos;') to satisfy Rule 8.13. Assigning pos = pos->next would still be valid (the non-const member pointer is converted to a pointer-to-const on assignment).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The local variable pos is only used to read the nodes (inspect fields and follow the next pointer) and never used to modify the pointed-to objects. Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so declaring pos as\n\n    const struct MHD_HTTP_Req_Header *pos;\n\nwould be appropriate. Assigning pos = pos->next is valid because converting from a pointer-to-non-const to a pointer-to-const is allowed, and accessing members through a pointer-to-const for read-only purposes is also allowed. Therefore the reported violation is correct and the code should be updated to use a const-qualified pointer."
}