{
  "user_message": "An agent A claimed that the following MHD_lookup_header_token_ci code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_lookup_header_token_ci.\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe loop assigns connection->rq.headers_received (accessed via a const struct MHD_Connection * parameter) to a non-const pointer variable pos (declared as struct MHD_HTTP_Req_Header *). The code only reads members of the headers list (pos->kind, pos->header_size, pos->header, pos->value, pos->next) and never modifies the pointed objects, so pos should be declared as a pointer to const (const struct MHD_HTTP_Req_Header *pos). Assigning a pointer to non-const when a const-qualified target is possible violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The parameter connection is of type \"const struct MHD_Connection *\", so the member expression connection->rq.headers_received is an lvalue referring to a pointer member of a const object (effectively a \"struct MHD_HTTP_Req_Header * const\" value). The function only reads fields of the headers list and never modifies the pointed-to structures, so the local loop variable should point to a const-qualified type. Declaring pos as \"const struct MHD_HTTP_Req_Header *pos\" (pointer to const) is appropriate and satisfies MISRA C 2023 Rule 8.13. As implemented, pos is a non-const pointer, allowing potential modification through pos and therefore violates the rule. (Changing pos to point to const does not break the loop update: converting a \"struct MHD_HTTP_Req_Header *\" to \"const struct MHD_HTTP_Req_Header *\" is allowed.)"
}