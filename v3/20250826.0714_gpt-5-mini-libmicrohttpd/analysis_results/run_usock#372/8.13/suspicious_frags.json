{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of run_usock:\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct MyData *md = cls;\n  struct MHD_UpgradeResponseHandle *urh = md->urh;\n  char buf[128];\n  ssize_t got;\n\n  make_blocking (md->sock);\n  /* start by sending extra data MHD may have already read, if any */\n  if (0 != md->extra_in_size)\n  {\n    send_all (md->sock,\n              md->extra_in,\n              md->extra_in_size);\n    free (md->extra_in);\n  }\n  /* now echo in a loop */\n  while (1)\n  {\n    got = recv (md->sock,\n                buf,\n                sizeof (buf),\n                0);\n    if (0 >= got)\n      break;\n    send_all (md->sock,\n              buf,\n              (size_t) got);\n  }\n  free (md);\n  MHD_upgrade_action (urh,\n                      MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "run_usock (void *cls)",
    "struct MyData *md = cls;",
    "send_all (md->sock,\n              buf,\n              (size_t) got);",
    "free (md->extra_in);",
    "struct MHD_UpgradeResponseHandle *urh = md->urh;",
    "send_all (md->sock,\n              md->extra_in,\n              md->extra_in_size);"
  ],
  "explanation": "Fragments not listed do not need investigation for Rule 8.13: the local buffer declaration and its usage (char buf[128] and recv into buf) are written by recv, so the buffer cannot reasonably be const. The recv call itself requires a non-const destination (void *). The free(md) call and the subsequent use of md as an owned, deallocated object indicate md is being modified/managed (memory ownership), so making md a pointer-to-const would be inappropriate. The function return type and parameter types are constrained by the thread API (pthread-style) which requires void * argument and void * return, so altering those to point-to-const is not generally feasible. Calls that operate on the socket descriptor (md->sock, make_blocking, recv, send_all usage for sending) involve I/O side effects and/or buffers that are intentionally mutable or have API signatures that require non-const pointers; these are not flagged here for Rule 8.13."
}