{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nUINT64_MAX % 16 == 15, and toxdigitvalue() returns a hex digit value in the range 0..15 for valid digits. Therefore the test ( (uint64_t)digit > (UINT64_MAX % 16) ) is always false for any valid digit, so the case ((res == UINT64_MAX/16) && (digit > 15)) can never be true \u2014 that path is unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint64_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1671.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint64_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint64_n_:\n```c\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit > (UINT64_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint64_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <stddef.h>\n\n/* Probe helper: append a log line with formatted state to /tmp/logs/1671.txt */\nstatic void MHD_probe_log(const char *event,\n                          size_t i,\n                          uint64_t res,\n                          int digit,\n                          int cond1,\n                          int cond2,\n                          int cond3)\n{\n  /* Ensure directory exists (ignore errors) */\n  (void)mkdir(\"/tmp/logs\", 0777);\n\n  FILE *f = fopen(\"/tmp/logs/1671.txt\", \"a\");\n  if (! f)\n    return;\n\n  /* Print a single-line structured log for easy parsing */\n  fprintf(f,\n          \"event=%s i=%zu res=%\" PRIu64 \" digit=%d cond1(res>MAX/16)=%d cond2(res==MAX/16)=%d cond3(digit>MAX%16)=%d\\n\",\n          event, i, res, digit, cond1, cond2, cond3);\n  fclose(f);\n}\n\n/* The original function with logging probes inserted. */\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    /* Evaluate the same checks as in the original code so we can log them */\n    int cond1 = (res > (UINT64_MAX / 16));\n    int cond2 = (res == (UINT64_MAX / 16));\n    int cond3 = ((uint64_t) digit > (UINT64_MAX % 16));\n\n    /* Log state just before the overflow check */\n    MHD_probe_log(\"before_check\", i, res, digit, cond1, cond2, cond3);\n\n    if ( (res > (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit > (UINT64_MAX % 16)) ) )\n    {\n      /* Log that the function is about to return due to overflow condition */\n      MHD_probe_log(\"overflow_return\", i, res, digit, cond1, cond2, cond3);\n      return 0;\n    }\n\n    res *= 16;\n    res += (unsigned int) digit;\n\n    /* Log state after updating res */\n    MHD_probe_log(\"after_update\", i + 1, res, digit, 0, 0, 0);\n\n    i++;\n  }\n\n  if (i)\n  {\n    *out_val = res;\n    /* Log successful parse and output value */\n    MHD_probe_log(\"final_success\", i, res, -1, 0, 0, 0);\n  }\n  else\n  {\n    /* Log that nothing was parsed */\n    MHD_probe_log(\"final_nothing_parsed\", i, res, -1, 0, 0, 0);\n  }\n\n  return i;\n}\n"
}