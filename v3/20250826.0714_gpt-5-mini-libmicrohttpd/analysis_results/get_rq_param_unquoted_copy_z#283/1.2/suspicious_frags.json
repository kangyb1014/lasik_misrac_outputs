{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are present in the provided code fragment. The snippet uses only standard C constructs: a static function, the standard size_t type, struct pointer parameter, pointer/array indexing (buf[param->value.len]), standard library-style function calls (memcpy), and macros or functions (mhd_assert, MHD_str_unquote). There are no occurrences of known compiler-specific extensions such as __attribute__, __asm/asm, typeof, statement-expressions ({...}), nested functions, inline assembly, nonstandard keywords (e.g. __inline__ as an extension), or compiler pragmas. \n\nNotes on identifiers that might warrant separate inspection but are not themselves language extensions in this snippet:\n- mhd_assert and MHD_str_unquote are macro/function identifiers only; their definitions are not shown. If those macros expand to compiler extensions (attributes, builtins, inline assembly, statement expressions, etc.), the expansions should be inspected \u2014 however, the source shown here does not include such extensions and therefore does not itself violate Rule 1.2.\n- Use of NULL and integer literal 0 as the string terminator is standard C and not an extension.\n\nTherefore no specific code fragments in this snippet need to be flagged for potential language-extension usage."
}