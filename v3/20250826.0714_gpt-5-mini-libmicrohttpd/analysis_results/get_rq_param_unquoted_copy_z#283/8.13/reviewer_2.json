{
  "user_message": "An agent A claimed that the following get_rq_param_unquoted_copy_z code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_param_unquoted_copy_z.\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nparam->value.str is used only as a read-only source (passed to memcpy and MHD_str_unquote) but is not const-qualified in its declaration. The function parameter is const struct MHD_RqDAuthParam *param, yet the member value.str appears to be declared as char * (non-const). According to MISRA C 2023 Rule 8.13, the pointer should be declared to point to a const-qualified type (e.g. const char *) when the data is not to be modified. Therefore the use of param->value.str here constitutes a violation unless the struct member is actually declared as const char *.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The code shown does not itself prove a Rule 8.13 violation because the declaration of the struct member value.str is not provided. MISRA C:2023 Rule 8.13 concerns the declaration of pointer types \u2014 a pointer that is only used to access data read-only should be declared to point to a const-qualified type. If in the actual code MHD_RqDAuthParam::value.str is declared as char * (non-const) but is only ever read (as in this function, passed to memcpy and MHD_str_unquote as a source), then Agent A's report is correct: the member should be declared const char * to satisfy 8.13. However, if value.str is already declared const char * (or MHD_str_unquote requires a non-const pointer because it modifies the buffer), then there is no violation. Also note that having a parameter of type const struct MHD_RqDAuthParam * does not make the types of the struct members const-qualified; the member's own declaration determines that. Because the struct definition was not provided, the claimed violation cannot be confirmed from the snippet alone."
}