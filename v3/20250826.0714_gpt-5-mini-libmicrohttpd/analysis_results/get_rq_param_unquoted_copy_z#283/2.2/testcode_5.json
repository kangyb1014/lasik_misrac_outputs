{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mhd_assert macro is defined as a no-op in the build used (for example when assertions are disabled and it expands to ((void)0) or nothing), then the statement mhd_assert(len < param->value.len); becomes an executed no-effect operation whose removal would not change program behaviour \u2014 this meets the definition of dead code and thus violates MISRA C 2023 Rule 2.2. (If, conversely, mhd_assert performs an active runtime check that can abort or otherwise change behaviour on failure, then the assertion is not dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_param_unquoted_copy_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2832.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_param_unquoted_copy_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\nPlease provide the modified get_rq_param_unquoted_copy_z code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal local definition so this translation unit compiles for testing.\n   It matches the fields used by get_rq_param_unquoted_copy_z. */\nstruct MHD_RqDAuthParam\n{\n  struct\n  {\n    const char *str;\n    size_t len;\n  } value;\n  int quoted; /* treated as boolean */\n};\n\n/* Prototype for the external function used in the original code. */\nextern size_t MHD_str_unquote (const char *src, size_t srclen, char *dst);\n\n/* Provide a fallback mhd_assert implementation only when no macro or\n   external symbol is provided. If the build defines mhd_assert as a\n   macro (for example a no-op), this #ifndef will detect it and avoid\n   providing the function, preserving the build behavior. */\n#ifndef mhd_assert\nstatic void mhd_assert (int cond)\n{\n  /* Keep the behavior minimal and side-effect free. */\n  (void) cond;\n}\n#endif\n\n/* Simple probe logger that appends human-readable trace lines to the\n   required log file. The logger is intentionally small and non-intrusive.\n   It is used to capture control flow and variable state so other agents\n   can reproduce evidence for the asserted dead-code scenario. */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2832.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n\n  /* Entry probe: capture pointer and length state */\n  log_probe (\"enter: param=%p value.str=%p value.len=%zu quoted=%d buf=%p\",\n             (void *) param,\n             (void *) (param ? param->value.str : NULL),\n             (param ? param->value.len : (size_t)0u),\n             (param ? param->quoted : 0),\n             (void *) buf);\n\n  /* Original assertion: log before and after to detect no-op assertions. */\n  log_probe (\"before assert: NULL != param->value.str\");\n  mhd_assert (NULL != param->value.str);\n  log_probe (\"after assert: NULL != param->value.str (execution continued)\");\n\n  if (! param->quoted)\n  {\n    log_probe (\"branch: unquoted path taken. memcpy len=%zu\", param->value.len);\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    log_probe (\"exit: returning %zu (unquoted)\", param->value.len);\n    return param->value.len;\n  }\n\n  /* Quoted path: capture the result of unquoting. */\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  log_probe (\"after MHD_str_unquote: len=%zu original_len=%zu\",\n             len, param->value.len);\n\n  log_probe (\"before assert: 0 != len\");\n  mhd_assert (0 != len);\n  log_probe (\"after assert: 0 != len (execution continued)\");\n\n  log_probe (\"before assert: len < param->value.len (len=%zu param_len=%zu)\",\n             len, param->value.len);\n  mhd_assert (len < param->value.len);\n  log_probe (\"after assert: len < param->value.len (execution continued)\");\n\n  buf[len] = 0;\n  log_probe (\"exit: returning %zu (quoted)\", len);\n  return len;\n}\n"
}