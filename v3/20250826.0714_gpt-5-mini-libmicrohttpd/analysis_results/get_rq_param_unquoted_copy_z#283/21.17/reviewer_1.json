{
  "user_message": "An agent A claimed that the following get_rq_param_unquoted_copy_z code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_param_unquoted_copy_z.\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the caller provides buf sized only to param->value.len bytes (i.e. no room for a terminating NUL), the assignment buf[len] = 0 writes one past the buffer. In the non-quoted path memcpy(buf, param->value.str, param->value.len) copies exactly param->value.len bytes and the subsequent buf[param->value.len] = 0 requires buf to be at least param->value.len + 1 bytes. The function signature does not guarantee that and the code relies on asserts (which may be disabled) rather than validating the destination size, so an out\u2011of\u2011bounds access is possible.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the non-quoted path the function does memcpy(buf, param->value.str, param->value.len) and then unconditionally writes buf[param->value.len] = 0. That requires the destination buffer to be at least param->value.len + 1 bytes, but the function signature does not guarantee that and the code performs only asserts (which may be disabled) rather than enforcing or documenting the required size. Under MISRA C 2023 Rule 21.17, use of the <string.h> functions must not result in accesses beyond the bounds of the objects referenced by their pointer parameters. The combination of the memcpy plus the terminating-NUL write can produce an out\u2011of\u2011bounds access if the caller supplies a buffer sized only param->value.len, so this is a violation. (The quoted branch has analogous risks if the asserted conditions do not hold at runtime.)"
}