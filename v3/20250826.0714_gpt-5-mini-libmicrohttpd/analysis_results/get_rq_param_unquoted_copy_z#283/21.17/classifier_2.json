{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (len < param->value.len);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The assertion statement itself does not call any <string.h> functions and therefore does not directly violate Rule 21.17. However, a violation can occur at the subsequent write buf[len] = 0 (or inside MHD_str_unquote if it uses memcpy/memmove) if len is equal to or greater than the original length and the assertion is compiled out. Example risky scenario: MHD_str_unquote returns len == param->value.len (or greater); with mhd_assert compiled out, buf[len] = 0 writes one past the intended buffer (or MHD_str_unquote may already have copied param->value.len bytes into buf), causing an out-of-bounds access of the buffer and thus violating Rule 21.17. To be safe, a runtime check (if (len < param->value.len)) or guaranteed buffer sizing is required."
}