{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion tests equality of two compile-time constants (MAX_DIGEST_NONCE_LENGTH and NONCE_STD_LEN(MAX_DIGEST)). If mhd_assert expands to an actual runtime check (i.e. it is active in the build), that check will always succeed and thus is an executed operation whose removal would not affect program behaviour \u2014 this is dead code and violates MISRA C 2023 Rule 2.2. (If mhd_assert is compiled out entirely the statement is not executed, but the important violation scenario is when the assertion is active and redundant.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2632.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified calculate_add_nonce code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Probe logger: appends informative logs to /tmp/logs/2632.txt. */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/2632.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fclose (f);\n}\n\n/* Modified calculate_add_nonce with inserted probes to capture control flow\n   and state relevant to the compile-time-constant assertion scenario. */\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  /* Log entry and important runtime values. */\n  probe_log (\"ENTER calculate_add_nonce: connection=%p timestamp=%\" PRIu64 \" realm_len=%zu nonce_size=%zu\\n\",\n             (void *) connection, timestamp, realm_len, nonce_size);\n\n  probe_log (\"Runtime: da->hashing=%d\\n\", (int) da->hashing);\n\n  /* Log the compile-time constants involved in the suspect assertion.\n     These are expanded at compile time but we capture their values at runtime\n     to provide evidence that the assertion compares two equal constants. */\n  {\n    const size_t compile_const_MAX_DIGEST_NONCE_LENGTH = (size_t) MAX_DIGEST_NONCE_LENGTH;\n    const size_t compile_const_NONCE_STD_LEN_MAX_DIGEST = (size_t) NONCE_STD_LEN (MAX_DIGEST);\n    probe_log (\"Compile-constants: MAX_DIGEST_NONCE_LENGTH=%zu NONCE_STD_LEN(MAX_DIGEST)=%zu\\n\",\n               compile_const_MAX_DIGEST_NONCE_LENGTH,\n               compile_const_NONCE_STD_LEN_MAX_DIGEST);\n    probe_log (\"Equality check at runtime: %s\\n\",\n               (compile_const_MAX_DIGEST_NONCE_LENGTH == compile_const_NONCE_STD_LEN_MAX_DIGEST) ?\n               \"EQUAL\" : \"DIFFERENT\");\n  }\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n  {\n    probe_log (\"Exiting calculate_add_nonce: digest_ext_error returned true\\n\");\n    return false;\n  }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n  {\n    probe_log (\"Exiting calculate_add_nonce: daemon->nonce_nc_size == 0\\n\");\n    return false;\n  }\n\n  /* Sanity check for values */\n  probe_log (\"About to perform sanity mhd_assert comparing MAX_DIGEST_NONCE_LENGTH and NONCE_STD_LEN(MAX_DIGEST)\\n\");\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n  probe_log (\"Sanity mhd_assert passed (if active).\\n\");\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    probe_log (\"Slot available: idx=%td nonce_size=%zu\\n\", (ptrdiff_t) (nn - daemon->nnc), nonce_size);\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n    probe_log (\"Slot initialized and ret=true\\n\");\n  }\n  else\n  {\n    ret = false;\n    probe_log (\"Slot not available and ret=false\\n\");\n  }\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  probe_log (\"EXIT calculate_add_nonce: ret=%d\\n\", (int) ret);\n\n  return ret;\n}\n"
}