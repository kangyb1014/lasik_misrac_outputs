{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes several pointers where const qualification appears appropriate but the called function likely accepts non-const pointers. In particular, struct DigestAlgorithm *da is passed although calculate_nonce appears to only read algorithm data (earlier code used da only for digest_get_size and assertions). If calculate_nonce does not modify the DigestAlgorithm object, its parameter should be declared const (const struct DigestAlgorithm *da). Similarly, string/byte inputs such as connection->rq.http_mthd, connection->rq.method, daemon->digest_auth_random, connection->addr and connection->rq.url should be const-qualified in calculate_nonce's prototype if they are not modified by it. Realm is already const and nonce is an output buffer (must remain non-const). Without the calculate_nonce prototype we cannot be 100% certain, but the likely violation is that non-const pointer parameters (notably da) should be const-qualified \u2014 so Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified calculate_add_nonce code.\n",
  "test_code": "/* Probe/logging helper functions inserted to capture control flow and state for Rule 8.13 investigation. */\nstatic void\nprobe_append_hex (FILE *f, const void *buf, size_t len)\n{\n  const unsigned char *p = (const unsigned char *) buf;\n  size_t i;\n\n  for (i = 0; i < len; ++i)\n    fprintf (f, \"%02x\", (unsigned) p[i]);\n}\n\nstatic void\nprobe_log_pre_nonce (struct MHD_Connection *const connection,\n                     struct MHD_Daemon *const daemon,\n                     struct DigestAlgorithm *da,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     size_t nonce_size)\n{\n  FILE *f = fopen (\"/tmp/logs/2633.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf (f, \"--- calculate_add_nonce ENTRY ---\\n\");\n  fprintf (f, \"timestamp=%"
}