{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'connection' is declared as 'struct MHD_Connection *const connection' (the pointer is const but the pointed-to object is not). The function only reads from connection fields (no writes), so per MISRA C 2023 Rule 8.13 the pointee should be const-qualified, e.g. 'const struct MHD_Connection *const connection'. Additionally, 'struct DigestAlgorithm *da' appears to be only read here and could be 'const struct DigestAlgorithm *da' unless the called functions modify it.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified calculate_add_nonce code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: log relevant state to /tmp/logs/2633.txt. */\nstatic void\nprobe_log_state(const char *stage,\n                const struct MHD_Connection *connection,\n                uint64_t timestamp,\n                const char *realm,\n                size_t realm_len,\n                const struct DigestAlgorithm *da,\n                const struct MHD_Daemon *daemon,\n                size_t nonce_size,\n                const char *nonce_preview)\n{\n  FILE *f = fopen(\"/tmp/logs/2633.txt\", \"a\");\n  if (f == NULL)\n    return; /* best-effort logging only */\n\n  /* Print a compact single-line record containing pointer values and sizes\n     so other agents can reproduce and inspect reads from the connection */\n  fprintf(f,\n          \"stage=%s ts=%llu conn=%p conn->daemon=%p conn->addr=%p \"\n          \"addr_len=%llu rq.http_mthd=%llu rq.method=%llu rq.url=%p rq.url_len=%llu \"\n          \"rq.headers_received=%llu realm=%p realm_len=%llu da=%p da_hashing=%d \"\n          \"daemon=%p nonce_nc_size=%llu digest_auth_rand_size=%llu dauth_bind_type=%llu \"\n          \"nonce_size=%zu nonce_preview='%s'\\n\",\n          stage,\n          (unsigned long long) timestamp,\n          (void *) connection,\n          (void *) (connection ? connection->daemon : NULL),\n          (void *) (connection ? connection->addr : NULL),\n          (unsigned long long) (connection ? connection->addr_len : 0ULL),\n          (unsigned long long) (connection ? (unsigned long long) connection->rq.http_mthd : 0ULL),\n          (unsigned long long) (connection ? (unsigned long long) connection->rq.method : 0ULL),\n          (void *) (connection ? connection->rq.url : NULL),\n          (unsigned long long) (connection ? connection->rq.url_len : 0ULL),\n          (unsigned long long) (connection ? connection->rq.headers_received : 0ULL),\n          (void *) realm,\n          (unsigned long long) realm_len,\n          (void *) da,\n          (int) (da ? da->hashing : -1),\n          (void *) daemon,\n          (unsigned long long) (daemon ? daemon->nonce_nc_size : 0ULL),\n          (unsigned long long) (daemon ? daemon->digest_auth_rand_size : 0ULL),\n          (unsigned long long) (daemon ? daemon->dauth_bind_type : 0ULL),\n          nonce_size,\n          (nonce_preview != NULL) ? nonce_preview : \"(null)\");\n\n  fclose(f);\n}\n\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  /* Log entry state before assertions and before nonce computation */\n  probe_log_state(\"entry\",\n                  connection,\n                  timestamp,\n                  realm,\n                  realm_len,\n                  da,\n                  daemon,\n                  nonce_size,\n                  \"(unset)\");\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n  /* Log the nonce produced and immediate state after nonce calculation */\n  probe_log_state(\"after_calculate_nonce\",\n                  connection,\n                  timestamp,\n                  realm,\n                  realm_len,\n                  da,\n                  daemon,\n                  nonce_size,\n                  nonce ? nonce : \"(null)\");\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da)) {\n    /* Log reason for early exit: digest external error */\n    probe_log_state(\"digest_ext_error\",\n                    connection,\n                    timestamp,\n                    realm,\n                    realm_len,\n                    da,\n                    daemon,\n                    nonce_size,\n                    nonce ? nonce : \"(null)\");\n    return false;\n  }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size) {\n    /* Log reason for early exit: no nonce_nc slots configured */\n    probe_log_state(\"no_nonce_nc_size\",\n                    connection,\n                    timestamp,\n                    realm,\n                    realm_len,\n                    da,\n                    daemon,\n                    nonce_size,\n                    nonce ? nonce : \"(null)\");\n    return false;\n  }\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  /* Log right before attempting to lock and test the slot */\n  probe_log_state(\"before_lock\",\n                  connection,\n                  timestamp,\n                  realm,\n                  realm_len,\n                  da,\n                  daemon,\n                  nonce_size,\n                  nonce ? nonce : \"(null)\");\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n\n  /* Log after acquiring lock */\n  probe_log_state(\"after_lock\",\n                  connection,\n                  timestamp,\n                  realm,\n                  realm_len,\n                  da,\n                  daemon,\n                  nonce_size,\n                  nonce ? nonce : \"(null)\");\n\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    /* Log that the slot is available and the intended new values */\n    probe_log_state(\"slot_available_before_write\",\n                    connection,\n                    timestamp,\n                    realm,\n                    realm_len,\n                    da,\n                    daemon,\n                    nonce_size,\n                    nonce ? nonce : \"(null)\");\n\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n\n    /* Log after writing the slot */\n    probe_log_state(\"slot_available_after_write\",\n                    connection,\n                    timestamp,\n                    realm,\n                    realm_len,\n                    da,\n                    daemon,\n                    nonce_size,\n                    nn->nonce);\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  /* Final outcome log */\n  probe_log_state(ret ? \"exit_success\" : \"exit_failure\",\n                  connection,\n                  timestamp,\n                  realm,\n                  realm_len,\n                  da,\n                  daemon,\n                  nonce_size,\n                  nonce ? nonce : \"(null)\");\n\n  return ret;\n}\n"
}