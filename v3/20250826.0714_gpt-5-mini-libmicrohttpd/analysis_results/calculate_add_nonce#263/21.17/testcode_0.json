{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf nn->nonce has storage of MAX_DIGEST_NONCE_LENGTH bytes (i.e. no extra byte for a terminating NUL) and nonce_size equals MAX_DIGEST_NONCE_LENGTH, then memcpy(nn->nonce, nonce, nonce_size) fills the buffer and the subsequent write nn->nonce[nonce_size] = 0 writes one byte past the end of the array. Because the code only asserts nonce_size <= MAX_DIGEST_NONCE_LENGTH but does not show that nn->nonce has capacity >= MAX_DIGEST_NONCE_LENGTH+1, this can cause an out\u2011of\u2011bounds write.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2639.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified calculate_add_nonce code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe logging function. Writes concise state information to /tmp/logs/2639.txt.\n   This function deliberately avoids dereferencing buffers that might be undersized\n   (it only prints pointer values and sizes). It does print the content of the\n   source `nonce` buffer up to a small, bounded number of bytes (min(nonce_size,32)).\n*/\nstatic void\nmhd_log_nonce_probe (const char *phase,\n                      struct MHD_Daemon *daemon,\n                      struct MHD_NonceNc *nn,\n                      size_t idx,\n                      size_t nonce_size,\n                      const char *nonce,\n                      uint64_t timestamp,\n                      const char *realm,\n                      size_t realm_len)\n{\n  FILE *f = fopen(\"/tmp/logs/2639.txt\", \"a\");\n  if (!f)\n    return;\n\n  /* Print high-level state: pointers, sizes, and an identifier phase. */\n  fprintf (f,\n           \"[mhd_probe] phase=%s timestamp=%\" PRIu64 \" realm_len=%zu nonce_size=%zu MAX_DIGEST_NONCE_LENGTH=%d daemon=%p idx=%zu daemon->nonce_nc_size=%zu nn=%p nn->nonce=%p\\n\",\n           phase,\n           timestamp,\n           realm_len,\n           nonce_size,\n           (int) MAX_DIGEST_NONCE_LENGTH,\n           (void *) daemon,\n           idx,\n           daemon ? (size_t) daemon->nonce_nc_size : (size_t) 0,\n           (void *) nn,\n           (void *) (nn ? nn->nonce : (char *) 0));\n\n  /* Print a bounded hex dump of the source nonce buffer (safe: bounded by nonce_size). */\n  if (nonce != NULL && nonce_size > 0)\n    {\n      size_t i;\n      size_t lim = nonce_size < 32 ? nonce_size : 32;\n      fprintf (f, \"[mhd_probe] nonce (first %zu bytes):\", lim);\n      for (i = 0; i < lim; ++i)\n        fprintf (f, \" %02x\", (unsigned char) nonce[i]);\n      if (nonce_size > lim)\n        fprintf (f, \" ...\");\n      fprintf (f, \"\\n\");\n    }\n\n  fclose (f);\n}\n\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  /* Log before calling calculate_nonce (entry state) */\n  mhd_log_nonce_probe (\"entry_before_calculate_nonce\",\n                       daemon, NULL, 0, nonce_size, nonce,\n                       timestamp, realm, realm_len);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  /* Log after calculate_nonce: nonce buffer contents (bounded) */\n  mhd_log_nonce_probe (\"after_calculate_nonce\",\n                       daemon, NULL, 0, nonce_size, nonce,\n                       timestamp, realm, realm_len);\n\n  if (0 == daemon->nonce_nc_size)\n    {\n      mhd_log_nonce_probe (\"daemon_no_slots\", daemon, NULL, 0, nonce_size, nonce, timestamp, realm, realm_len);\n      return false;\n    }\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST_NONCE));\n\n  /* Compute index and log it before locking. */\n  size_t idx = get_nonce_nc_idx (daemon->nonce_nc_size,\n                                 nonce,\n                                 nonce_size);\n\n  mhd_log_nonce_probe (\"before_lock_and_idx_computed\",\n                       daemon, NULL, idx, nonce_size, nonce,\n                       timestamp, realm, realm_len);\n\n  nn = daemon->nnc + idx;\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n\n  /* Log state right before checking slot availability. Note: do not dereference nn->nonce. */\n  mhd_log_nonce_probe (\"before_is_slot_available\", daemon, nn, idx, nonce_size, nonce, timestamp, realm, realm_len);\n\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n    {\n      /* Log that we are about to perform the memcpy and terminating write. */\n      mhd_log_nonce_probe (\"about_to_memcpy_and_terminator_write\", daemon, nn, idx, nonce_size, nonce, timestamp, realm, realm_len);\n\n      memcpy (nn->nonce,\n              nonce,\n              nonce_size);\n      nn->nonce[nonce_size] = 0;  /* With terminating zero */\n      nn->nc = 0;\n      nn->nmask = 0;\n      ret = true;\n\n      /* Log after performing the write actions; do not read nn->nonce content (avoid potential OOB reads). */\n      mhd_log_nonce_probe (\"after_memcpy_and_terminator_write\", daemon, nn, idx, nonce_size, nonce, timestamp, realm, realm_len);\n    }\n  else\n    {\n      mhd_log_nonce_probe (\"slot_not_available\", daemon, nn, idx, nonce_size, nonce, timestamp, realm, realm_len);\n      ret = false;\n    }\n\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n"
}