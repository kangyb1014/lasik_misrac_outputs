{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a char *nonce buffer to calculate_nonce without an accompanying size parameter, so calculate_nonce may use string.h functions (memcpy, strcpy, strcat, etc.) to build the nonce and thereby write more bytes than the caller's buffer can hold. For example, if calculate_nonce concatenates daemon->digest_auth_random, parts of connection->rq.url (connection->rq.url_len) and other fields into nonce using memcpy/strcat and those combined lengths exceed the buffer capacity (nonce_size), this will result in out\u2011of\u2011bounds writes. Because the callee is given no explicit buffer length in this call, the use of string functions inside calculate_nonce can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2639.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified calculate_add_nonce code.\n",
  "test_code": "static bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  /* Probe log file: append mode */\n  FILE *log = fopen(\"/tmp/logs/2639.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"[probe] enter calculate_add_nonce: connection=%p, timestamp=%llu, realm=%p, realm_len=%zu, da=%p, nonce=%p\\n\",\n            (void *) connection,\n            (unsigned long long) timestamp,\n            (const void *) realm,\n            realm_len,\n            (void *) da,\n            (void *) nonce);\n    fclose(log);\n  }\n\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  /* Log state before calling calculate_nonce. Do not inspect nonce contents here. */\n  log = fopen(\"/tmp/logs/2639.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"[probe] before calculate_nonce: daemon=%p, digest_auth_random=%p, digest_auth_rand_size=%zu, addr=%p, addr_len=%zu, url=%p, url_len=%zu, headers_received=%u, realm_len=%zu, dauth_bind_type=%u, da=%p, nonce_size=%zu\\n\",\n            (void *) daemon,\n            (void *) daemon->digest_auth_random,\n            (size_t) daemon->digest_auth_rand_size,\n            (void *) connection->addr,\n            (size_t) connection->addr_len,\n            (void *) connection->rq.url,\n            (size_t) connection->rq.url_len,\n            (unsigned) connection->rq.headers_received,\n            realm_len,\n            (unsigned) daemon->dauth_bind_type,\n            (void *) da,\n            nonce_size);\n    fclose(log);\n  }\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n  {\n    log = fopen(\"/tmp/logs/2639.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"[probe] digest_ext_error detected after calculate_nonce, aborting\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n  {\n    log = fopen(\"/tmp/logs/2639.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"[probe] daemon->nonce_nc_size == 0, returning false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  /* Log selected slot index and pointer */\n  log = fopen(\"/tmp/logs/2639.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"[probe] computed nn index/ptr: nn=%p, nonce_size=%zu\\n\",\n            (void *) nn,\n            nonce_size);\n    fclose(log);\n  }\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    /* Log that we're about to perform the memcpy into the nn slot */\n    log = fopen(\"/tmp/logs/2639.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"[probe] slot available: performing memcpy to nn->nonce (dest=%p) with nonce_size=%zu\\n\",\n              (void *) nn->nonce,\n              nonce_size);\n      fclose(log);\n    }\n\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n\n    log = fopen(\"/tmp/logs/2639.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"[probe] memcpy done, nn->nonce[%zu] set to 0, ret=true\\n\",\n              nonce_size);\n      fclose(log);\n    }\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  /* Final probe log with return value */\n  log = fopen(\"/tmp/logs/2639.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"[probe] exit calculate_add_nonce: return=%s\\n\", ret ? \"true\" : \"false\");\n    fclose(log);\n  }\n\n  return ret;\n}\n"
}