{
  "user_message": "An agent A claimed that the following MHD_start_daemon code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_start_daemon.\n```c\n_MHD_EXTERN struct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n\n  va_start (ap,\n            dh_cls);\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n  va_end (ap);\n  return daemon;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter declaration 'void *dh_cls' is not const-qualified. If the daemon and any callbacks treat the object pointed-to by dh_cls as read-only (i.e. they do not modify the pointee), then this violates MISRA C 2023 Rule 8.13. The compliant fix is to declare the parameter as 'const void *dh_cls' and propagate the const qualifier to any related callback types and forwarding functions (e.g. MHD_start_daemon_va). If the pointee must be modified, then the current declaration is acceptable but a documented justification is required.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-26 08:18:26: enter MHD_start_daemon\n  flags=9 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=About to start va_list and forward to MHD_start_daemon_va\n---\n2025-08-26 08:18:26: after va_start (before MHD_start_daemon_va)\n  flags=9 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=va_list initialized\n---\n2025-08-26 08:18:26: exit MHD_start_daemon\n  flags=9 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=MHD_start_daemon_va returned=0x55a4ee774c20\n---\n2025-08-26 08:18:26: enter MHD_start_daemon\n  flags=13 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=About to start va_list and forward to MHD_start_daemon_va\n---\n2025-08-26 08:18:26: after va_start (before MHD_start_daemon_va)\n  flags=13 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=va_list initialized\n---\n2025-08-26 08:18:26: exit MHD_start_daemon\n  flags=13 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=MHD_start_daemon_va returned=0x55a4ee7751e0\n---\n2025-08-26 08:18:26: enter MHD_start_daemon\n  flags=9 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=About to start va_list and forward to MHD_start_daemon_va\n---\n2025-08-26 08:18:26: after va_start (before MHD_start_daemon_va)\n  flags=9 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=va_list initialized\n---\n2025-08-26 08:18:26: exit MHD_start_daemon\n  flags=9 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=MHD_start_daemon_va returned=0x55a4ee775660\n---\n2025-08-26 08:18:26: enter MHD_start_daemon\n  flags=1 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=About to start va_list and forward to MHD_start_daemon_va\n---\n2025-08-26 08:18:26: after va_start (before MHD_start_daemon_va)\n  flags=1 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=va_list initialized\n---\n2025-08-26 08:18:26: exit MHD_start_daemon\n  flags=1 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=MHD_start_daemon_va returned=0x55a4ee775c30\n---\n2025-08-26 08:18:26: enter MHD_start_daemon\n  flags=524289 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=About to start va_list and forward to MHD_start_daemon_va\n---\n2025-08-26 08:18:26: after va_start (before MHD_start_daemon_va)\n  flags=524289 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=va_list initialized\n---\n2025-08-26 08:18:26: exit MHD_start_daemon\n  flags=524289 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=MHD_start_daemon_va returned=0x55a4ee7762b0\n---\n2025-08-26 08:18:26: enter MHD_start_daemon\n  flags=73 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=About to start va_list and forward to MHD_start_daemon_va\n---\n2025-08-26 08:18:26: after va_start (before MHD_start_daemon_va)\n  flags=73 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=va_list initialized\n---\n2025-08-26 08:18:26: exit MHD_start_daemon\n  flags=73 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=MHD_start_daemon_va returned=0x55a4ee7766f0\n---\n2025-08-26 08:18:26: enter MHD_start_daemon\n  flags=77 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=About to start va_list and forward to MHD_start_daemon_va\n---\n2025-08-26 08:18:26: after va_start (before MHD_start_daemon_va)\n  flags=77 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=va_list initialized\n---\n2025-08-26 08:18:26: exit MHD_start_daemon\n  flags=77 port=0\n  apc=(nil) apc_cls=0\n  dh=0x55a4c6d847e0 dh_cls=0\n  dh_cls_is_null=yes\n  extra=MHD_start_daemon_va returned=0x55a4ee776b30\n---\n2025-08-26 08:18:26: enter MHD_st\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s report is not conclusively correct based on the snippet alone. MISRA C:2023 Rule 8.13 does require that pointers should point to const-qualified types whenever that is possible, but to demonstrate a rule violation you must show that the pointed-to object is never modified by the implementation or by any API client. In the provided MHD_start_daemon body dh_cls is only forwarded to MHD_start_daemon_va; there is no evidence in this snippet whether the daemon implementation or the callbacks modify the pointee. If the library and callbacks treat dh_cls as read-only, then the API should indeed use const void * (and propagate const through the callback typedefs and forwarding functions) and the current declaration would violate Rule 8.13. If, however, the library or callbacks may legitimately modify the pointee, the non-const declaration is appropriate and a documented justification is required per MISRA. To decide definitively you must inspect MHD_start_daemon_va, the callback type declarations and all uses of the dh_cls pointer. Without that further evidence the claim of a Rule 8.13 violation cannot be judged correct."
}