{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of internal_suspend_connection_:\n```c\nvoid\ninternal_suspend_connection_ (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  mhd_assert (NULL == daemon->worker_pool);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->resuming)\n  {\n    /* suspending again while we didn't even complete resuming yet */\n    connection->resuming = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n    return;\n  }\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n      XDLL_remove (daemon->normal_timeout_head,\n                   daemon->normal_timeout_tail,\n                   connection);\n    else\n      XDLL_remove (daemon->manual_timeout_head,\n                   daemon->manual_timeout_tail,\n                   connection);\n  }\n  DLL_remove (daemon->connections_head,\n              daemon->connections_tail,\n              connection);\n  mhd_assert (! connection->suspended);\n  DLL_insert (daemon->suspended_connections_head,\n              daemon->suspended_connections_tail,\n              connection);\n  connection->suspended = true;\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (0 != (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))\n    {\n      EDLL_remove (daemon->eready_head,\n                   daemon->eready_tail,\n                   connection);\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_IN_EREADY_EDLL);\n    }\n    if (0 != (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET))\n    {\n      if (0 != epoll_ctl (daemon->epoll_fd,\n                          EPOLL_CTL_DEL,\n                          connection->socket_fd,\n                          NULL))\n        MHD_PANIC (_ (\"Failed to remove FD from epoll set.\\n\"));\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_IN_EPOLL_SET);\n    }\n    connection->epoll_state |= MHD_EPOLL_STATE_SUSPENDED;\n  }\n#endif\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nDLL_insert (daemon->suspended_connections_head,\n              daemon->suspended_connections_tail,\n              connection);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call DLL_insert(\u2026, connection) passes the pointer by value and (as used here) does not assign to the parameter variable 'connection'. Modifying the object pointed to by a pointer parameter (e.g. updating fields inside *connection or linking the node into a list) is allowed by Rule 17.8; changing the pointer variable itself (e.g. connection = NULL) would violate it. In this fragment no assignment to the parameter 'connection' occurs, so there is no violation. (Only a hypothetical violation would arise if DLL_insert were a macro that expanded to an assignment to its third argument name, which would then reassign the caller's parameter.)"
}