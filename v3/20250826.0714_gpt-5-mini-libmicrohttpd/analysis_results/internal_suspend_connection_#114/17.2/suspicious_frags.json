{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of internal_suspend_connection_:\n```c\nvoid\ninternal_suspend_connection_ (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  mhd_assert (NULL == daemon->worker_pool);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->resuming)\n  {\n    /* suspending again while we didn't even complete resuming yet */\n    connection->resuming = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n    return;\n  }\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n      XDLL_remove (daemon->normal_timeout_head,\n                   daemon->normal_timeout_tail,\n                   connection);\n    else\n      XDLL_remove (daemon->manual_timeout_head,\n                   daemon->manual_timeout_tail,\n                   connection);\n  }\n  DLL_remove (daemon->connections_head,\n              daemon->connections_tail,\n              connection);\n  mhd_assert (! connection->suspended);\n  DLL_insert (daemon->suspended_connections_head,\n              daemon->suspended_connections_tail,\n              connection);\n  connection->suspended = true;\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (0 != (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))\n    {\n      EDLL_remove (daemon->eready_head,\n                   daemon->eready_tail,\n                   connection);\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_IN_EREADY_EDLL);\n    }\n    if (0 != (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET))\n    {\n      if (0 != epoll_ctl (daemon->epoll_fd,\n                          EPOLL_CTL_DEL,\n                          connection->socket_fd,\n                          NULL))\n        MHD_PANIC (_ (\"Failed to remove FD from epoll set.\\n\"));\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_IN_EPOLL_SET);\n    }\n    connection->epoll_state |= MHD_EPOLL_STATE_SUSPENDED;\n  }\n#endif\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "XDLL_remove (daemon->manual_timeout_head,\n                   daemon->manual_timeout_tail,\n                   connection);",
    "if (MHD_D_IS_USING_EPOLL_ (daemon))",
    "MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);",
    "EDLL_remove (daemon->eready_head,\n                   daemon->eready_tail,\n                   connection);",
    "if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))",
    "XDLL_remove (daemon->normal_timeout_head,\n                   daemon->normal_timeout_tail,\n                   connection);",
    "DLL_remove (daemon->connections_head,\n              daemon->connections_tail,\n              connection);",
    "mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );",
    "if (0 != (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))",
    "if (0 != (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET))",
    "mhd_assert (NULL == daemon->worker_pool);",
    "if (0 != epoll_ctl (daemon->epoll_fd,\n                          EPOLL_CTL_DEL,\n                          connection->socket_fd,\n                          NULL))",
    "MHD_PANIC (_ (\"Failed to remove FD from epoll set.\\n\"));",
    "DLL_insert (daemon->suspended_connections_head,\n              daemon->suspended_connections_tail,\n              connection);",
    "MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);"
  ],
  "explanation": "I selected all call sites and conditional/macro checks in this function that could (directly or indirectly via other modules) invoke internal_suspend_connection_. These include asserts, mutex helper calls, list-manipulation helpers (XDLL_remove, DLL_remove, DLL_insert, EDLL_remove), epoll_ctl, and MHD_PANIC, plus the macro/inline predicate checks (MHD_D_IS_USING_THREAD_PER_CONN_, MHD_D_IS_USING_EPOLL_, MHD_D_IS_USING_THREADS_). These fragments warrant investigation for potential direct or indirect recursion.\n\nI did not include simple non-call statements because they cannot perform a function call and therefore cannot create recursion: assignments (e.g. \"connection->resuming = false;\", \"connection->suspended = true;\"), bitwise operations on epoll_state, DLL/ list head/tail pointer references used as arguments (other than when passed to a function call which is already listed), the return statement, and plain conditional branching without function invocation. Those operations do not by themselves invoke functions and so do not pose a risk for violating Rule 17.2."
}