{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer is declared as a modifiable pointer but is only used for read-only access. In this function 'daemon' is assigned from 'connection->daemon' and only read (e.g. checking 'daemon->options' to test MHD_USE_TLS) \u2014 it is never used to modify the pointed-to object. Per MISRA C 2023 Rule 8.13 it should be const-qualified (e.g. 'const struct MHD_Daemon *daemon;'). Assigning the non-const 'connection->daemon' to a 'const struct MHD_Daemon *' is allowed, so const qualification is feasible here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_upgrade_action code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_upgrade_action as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_upgrade_action:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n\n  if (NULL == urh)\n    return MHD_NO;\n  connection = urh->connection;\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n    return MHD_NO;\n  daemon = connection->daemon;\n  if (NULL == daemon)\n    return MHD_NO;\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (urh->was_closed)\n      return MHD_NO; /* Already closed. */\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           true) ? MHD_YES : MHD_NO;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           false) ? MHD_YES : MHD_NO;\n  default:\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_upgrade_action code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append messages to /tmp/logs/2163.txt */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2163.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n\n  mhd_log_probe(\"MHD_upgrade_action: entry urh=%p action=%d\", (void *)urh, (int)action);\n\n  if (NULL == urh)\n  {\n    mhd_log_probe(\"MHD_upgrade_action: urh is NULL -> return MHD_NO\");\n    return MHD_NO;\n  }\n  connection = urh->connection;\n  mhd_log_probe(\"MHD_upgrade_action: connection assigned connection=%p\", (void *)connection);\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n  {\n    mhd_log_probe(\"MHD_upgrade_action: connection is NULL -> return MHD_NO\");\n    return MHD_NO;\n  }\n  daemon = connection->daemon;\n  mhd_log_probe(\"MHD_upgrade_action: daemon assigned daemon=%p\", (void *)daemon);\n  if (NULL == daemon)\n  {\n    mhd_log_probe(\"MHD_upgrade_action: daemon is NULL -> return MHD_NO\");\n    return MHD_NO;\n  }\n\n  /* Log daemon options (read-only) to show that daemon is only read here */\n  /* Cast to unsigned long for portable printing of integer masks */\n  mhd_log_probe(\"MHD_upgrade_action: daemon->options=0x%lx\", (unsigned long)daemon->options);\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    mhd_log_probe(\"MHD_upgrade_action: case CLOSE: urh->was_closed=%d\", (int)urh->was_closed);\n    if (urh->was_closed)\n    {\n      mhd_log_probe(\"MHD_upgrade_action: already closed -> return MHD_NO\");\n      return MHD_NO; /* Already closed. */\n    }\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      mhd_log_probe(\"MHD_upgrade_action: HTTPS_SUPPORT and MHD_USE_TLS set -> calling shutdown on app.socket=%d\", urh->app.socket);\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n    else\n    {\n      mhd_log_probe(\"MHD_upgrade_action: HTTPS_SUPPORT defined but MHD_USE_TLS not set\");\n    }\n#else\n    mhd_log_probe(\"MHD_upgrade_action: HTTPS_SUPPORT not defined, skipping TLS shutdown check\");\n#endif /* HTTPS_SUPPORT */\n    mhd_log_probe(\"MHD_upgrade_action: asserting connection state and marking app closed. connection=%p state=%d\", (void *)connection, (int)connection->state);\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    mhd_log_probe(\"MHD_upgrade_action: CLOSE handled -> return MHD_YES\");\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    mhd_log_probe(\"MHD_upgrade_action: case CORK_ON -> calling MHD_connection_set_cork_state_(connection,%s)\", \"true\");\n    /* Unportable API. TODO: replace with portable action. */\n    {\n      const bool result = MHD_connection_set_cork_state_ (connection,\n                                           true);\n      mhd_log_probe(\"MHD_upgrade_action: CORK_ON result=%d -> return %s\", (int)result, result ? \"MHD_YES\" : \"MHD_NO\");\n      return result ? MHD_YES : MHD_NO;\n    }\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    mhd_log_probe(\"MHD_upgrade_action: case CORK_OFF -> calling MHD_connection_set_cork_state_(connection,%s)\", \"false\");\n    /* Unportable API. TODO: replace with portable action. */\n    {\n      const bool result = MHD_connection_set_cork_state_ (connection,\n                                           false);\n      mhd_log_probe(\"MHD_upgrade_action: CORK_OFF result=%d -> return %s\", (int)result, result ? \"MHD_YES\" : \"MHD_NO\");\n      return result ? MHD_YES : MHD_NO;\n    }\n  default:\n    /* we don't understand this one */\n    mhd_log_probe(\"MHD_upgrade_action: default case (unknown action %d) -> return MHD_NO\", (int)action);\n    return MHD_NO;\n  }\n}\n"
}