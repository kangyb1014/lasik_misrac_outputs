{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable is declared as a non-const pointer: \"struct MHD_Daemon *daemon;\" and is assigned from connection->daemon. In the shown code the pointer is only used for read-only access (daemon->options is inspected), so it could and should be declared as a pointer to const (e.g. \"const struct MHD_Daemon *daemon = connection->daemon;\") to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_upgrade_action code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_upgrade_action as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_upgrade_action:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n\n  if (NULL == urh)\n    return MHD_NO;\n  connection = urh->connection;\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n    return MHD_NO;\n  daemon = connection->daemon;\n  if (NULL == daemon)\n    return MHD_NO;\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (urh->was_closed)\n      return MHD_NO; /* Already closed. */\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           true) ? MHD_YES : MHD_NO;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           false) ? MHD_YES : MHD_NO;\n  default:\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_upgrade_action code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append a log entry capturing control flow and key state. */\nstatic void mhd_log_upgrade_probe(const char *stage,\n                                  const void *urh_ptr,\n                                  const void *connection_ptr,\n                                  const void *daemon_ptr,\n                                  int action_val,\n                                  unsigned long daemon_options,\n                                  int tls_flag,\n                                  int was_closed)\n{\n  FILE *f = fopen(\"/tmp/logs/2163.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Write a concise, parseable single-line record per call. */\n  fprintf(f,\n          \"stage=%s urh=%p connection=%p daemon=%p action=%d options=0x%08lx TLS=%d was_closed=%d\\n\",\n          (stage != NULL) ? stage : \"(null)\",\n          urh_ptr,\n          connection_ptr,\n          daemon_ptr,\n          action_val,\n          (unsigned long)daemon_options,\n          tls_flag,\n          was_closed);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n\n  if (NULL == urh)\n    return MHD_NO;\n\n  /* Log entry: have valid urh pointer, before resolving connection */\n  mhd_log_upgrade_probe(\"after_urh_check\", urh, NULL, NULL, (int)action, 0U, 0, 0);\n\n  connection = urh->connection;\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n    return MHD_NO;\n\n  /* Log entry: connection resolved, before resolving daemon */\n  mhd_log_upgrade_probe(\"after_connection_check\", urh, connection, NULL, (int)action, 0U, 0, urh->was_closed);\n\n  daemon = connection->daemon;\n  if (NULL == daemon)\n    return MHD_NO;\n\n  /* Log entry: daemon resolved, capture daemon->options and TLS decision (if macro available) */\n#ifdef MHD_USE_TLS\n  {\n    int tls_flag = (0 != (daemon->options & MHD_USE_TLS));\n    mhd_log_upgrade_probe(\"after_daemon_check\", urh, connection, daemon, (int)action, (unsigned long)daemon->options, tls_flag, urh->was_closed);\n  }\n#else\n  mhd_log_upgrade_probe(\"after_daemon_check\", urh, connection, daemon, (int)action, (unsigned long)daemon->options, 0, urh->was_closed);\n#endif\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (urh->was_closed)\n      return MHD_NO; /* Already closed. */\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      /* Log that we are entering TLS shutdown branch and include socket */\n      mhd_log_upgrade_probe(\"enter_tls_shutdown\", urh, connection, daemon, (int)action, (unsigned long)daemon->options, 1, urh->was_closed);\n\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n\n    /* Log that we have marked app closed */\n    mhd_log_upgrade_probe(\"marked_app_closed\", urh, connection, daemon, (int)action, (unsigned long)daemon->options, 0, urh->was_closed);\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           true) ? MHD_YES : MHD_NO;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           false) ? MHD_YES : MHD_NO;\n  default:\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n"
}