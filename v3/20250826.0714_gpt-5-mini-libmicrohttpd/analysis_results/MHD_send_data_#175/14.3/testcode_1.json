{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nWhen compiled with HTTPS_SUPPORT not defined, tls_conn is initialized as the constant 'false' (const bool tls_conn = false). The controlling expression 'if (tls_conn)' is therefore invariant (always false) \u2014 not covered by the allowed exceptions \u2014 so this violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_data_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1755.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_send_data_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_send_data_:\n```c\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n  }\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n      return MHD_ERR_AGAIN_;\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n      return MHD_ERR_TLS_;\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n      return MHD_ERR_PIPE_;\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n      return MHD_ERR_CONNRESET_;\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n      return MHD_ERR_CONNRESET_;\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n      return MHD_ERR_NOMEM_;\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    ret = MHD_ERR_NOTCONN_;\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        return MHD_ERR_AGAIN_;\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n        return MHD_ERR_CONNRESET_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n        return MHD_ERR_PIPE_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n        return MHD_ERR_OPNOTSUPP_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n        return MHD_ERR_NOTCONN_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n        return MHD_ERR_INVAL_;\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n        return MHD_ERR_NOMEM_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n        return MHD_ERR_BADF_;\n      /* Treat any other error as a hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n    post_send_setopt (connection, (! tls_conn), push_data);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_send_data_ code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logging helper: write a simple record to /tmp/logs/1755.txt.\n * Keep this minimal so it does not change program logic. */\nstatic void\nlog_probe (const char *tag,\n           struct MHD_Connection *connection,\n           MHD_socket s,\n           size_t buffer_size,\n           bool push_data,\n           bool tls_conn,\n           ssize_t ret)\n{\n  FILE *f = fopen(\"/tmp/logs/1755.txt\", \"a\");\n  if (f != (FILE *) 0)\n  {\n    time_t t = time (NULL);\n    /* Basic state dump: timestamp, tag, socket, connection state, sizes, flags, last ret */\n    fprintf (f, \"%ld: %s: socket=%ld state=%d buffer_size=%zu push=%d tls_conn=%d ret=%zd\\n\",\n             (long) t,\n             tag,\n             (long) s,\n             (int) connection->state,\n             buffer_size,\n             push_data ? 1 : 0,\n             tls_conn ? 1 : 0,\n             ret);\n    fclose (f);\n  }\n}\n\nstatic ssize_t\nlog_and_return (ssize_t code,\n                const char *tag,\n                struct MHD_Connection *connection,\n                MHD_socket s,\n                size_t buffer_size,\n                bool push_data,\n                bool tls_conn,\n                ssize_t ret)\n{\n  log_probe (tag, connection, s, buffer_size, push_data, tls_conn, ret);\n  return code;\n}\n\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  /* Log initial state right after tls_conn is known. */\n  log_probe (\"ENTRY\", connection, s, buffer_size, push_data, tls_conn, (ssize_t) -1);\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return log_and_return (MHD_ERR_NOTCONN_, \"EXIT_NOTCONN_INITIAL\", connection, s, buffer_size, push_data, tls_conn, (ssize_t) -1);\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n    log_probe (\"TRUNCATE_TO_SSIZEMAX\", connection, s, buffer_size, push_data, tls_conn, (ssize_t) -1);\n  }\n\n  log_probe (\"BEFORE_TLS_CHECK\", connection, s, buffer_size, push_data, tls_conn, (ssize_t) -1);\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    log_probe (\"TLS_BRANCH_ENTER\", connection, s, buffer_size, push_data, tls_conn, (ssize_t) -1);\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    /* Log gnutls return value */\n    log_probe (\"TLS_GNUTLS_SEND_RET\", connection, s, buffer_size, push_data, tls_conn, ret);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      return log_and_return (MHD_ERR_AGAIN_, \"TLS_EAGAIN\", connection, s, buffer_size, push_data, tls_conn, ret);\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n      return log_and_return (MHD_ERR_AGAIN_, \"TLS_INTERRUPTED\", connection, s, buffer_size, push_data, tls_conn, ret);\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n      return log_and_return (MHD_ERR_TLS_, \"TLS_FATAL_ERR\", connection, s, buffer_size, push_data, tls_conn, ret);\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n      return log_and_return (MHD_ERR_PIPE_, \"TLS_PIPE_ERR\", connection, s, buffer_size, push_data, tls_conn, ret);\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n      return log_and_return (MHD_ERR_CONNRESET_, \"TLS_PREMATURE_TERMINATION\", connection, s, buffer_size, push_data, tls_conn, ret);\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n      return log_and_return (MHD_ERR_CONNRESET_, \"TLS_UNEXPECTED_PACKET_LENGTH\", connection, s, buffer_size, push_data, tls_conn, ret);\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n      return log_and_return (MHD_ERR_NOMEM_, \"TLS_MEMORY_ERROR\", connection, s, buffer_size, push_data, tls_conn, ret);\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      return log_and_return (MHD_ERR_NOTCONN_, \"TLS_OTHER_ERROR\", connection, s, buffer_size, push_data, tls_conn, ret);\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    /* When HTTPS_SUPPORT is not defined, tls_conn is a compile-time constant\n     * false and this branch is invariantly not taken. Still, record the\n     * fact that control reached here in builds where the preprocessor\n     * enables this block. */\n    ret = MHD_ERR_NOTCONN_;\n    log_probe (\"TLS_NOT_SUPPORTED_RET\", connection, s, buffer_size, push_data, tls_conn, ret);\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    log_probe (\"PLAINTEXT_BRANCH_ENTER\", connection, s, buffer_size, push_data, tls_conn, (ssize_t) -1);\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n      log_probe (\"TRUNCATE_TO_SCKT_MAX\", connection, s, buffer_size, push_data, tls_conn, (ssize_t) -1);\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    log_probe (\"PLAINTEXT_SEND_RET\", connection, s, buffer_size, push_data, tls_conn, ret);\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      log_probe (\"PLAINTEXT_SEND_ERRNO\", connection, s, buffer_size, push_data, tls_conn, (ssize_t) err);\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        return log_and_return (MHD_ERR_AGAIN_, \"PLAINTEXT_EAGAIN\", connection, s, buffer_size, push_data, tls_conn, ret);\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        return log_and_return (MHD_ERR_AGAIN_, \"PLAINTEXT_EINTR\", connection, s, buffer_size, push_data, tls_conn, ret);\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n        return log_and_return (MHD_ERR_CONNRESET_, \"PLAINTEXT_REMOTE_DISCONN\", connection, s, buffer_size, push_data, tls_conn, ret);\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n        return log_and_return (MHD_ERR_PIPE_, \"PLAINTEXT_EPIPE\", connection, s, buffer_size, push_data, tls_conn, ret);\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n        return log_and_return (MHD_ERR_OPNOTSUPP_, \"PLAINTEXT_EOPNOTSUPP\", connection, s, buffer_size, push_data, tls_conn, ret);\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n        return log_and_return (MHD_ERR_NOTCONN_, \"PLAINTEXT_ENOTCONN\", connection, s, buffer_size, push_data, tls_conn, ret);\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n        return log_and_return (MHD_ERR_INVAL_, \"PLAINTEXT_EINVAL\", connection, s, buffer_size, push_data, tls_conn, ret);\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n        return log_and_return (MHD_ERR_NOMEM_, \"PLAINTEXT_LOW_RESOURCES\", connection, s, buffer_size, push_data, tls_conn, ret);\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n        return log_and_return (MHD_ERR_BADF_, \"PLAINTEXT_EBADF\", connection, s, buffer_size, push_data, tls_conn, ret);\n      /* Treat any other error as a hard error. */\n      return log_and_return (MHD_ERR_NOTCONN_, \"PLAINTEXT_OTHER_ERROR\", connection, s, buffer_size, push_data, tls_conn, ret);\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n    post_send_setopt (connection, (! tls_conn), push_data);\n\n  /* Final state before returning. */\n  log_probe (\"EXIT_OK\", connection, s, buffer_size, push_data, tls_conn, ret);\n\n  return ret;\n}\n"
}