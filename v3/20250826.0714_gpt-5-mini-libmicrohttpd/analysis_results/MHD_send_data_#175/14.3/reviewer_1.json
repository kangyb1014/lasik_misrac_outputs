{
  "user_message": "An agent A claimed that the following MHD_send_data_ code violates the MISRA C 2023 rule 14.3.\n<misra_rule>\nMISRA C 2023 Rule 14.3 is Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_send_data_.\n```c\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n  }\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n      return MHD_ERR_AGAIN_;\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n      return MHD_ERR_TLS_;\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n      return MHD_ERR_PIPE_;\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n      return MHD_ERR_CONNRESET_;\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n      return MHD_ERR_CONNRESET_;\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n      return MHD_ERR_NOMEM_;\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    ret = MHD_ERR_NOTCONN_;\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        return MHD_ERR_AGAIN_;\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n        return MHD_ERR_CONNRESET_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n        return MHD_ERR_PIPE_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n        return MHD_ERR_OPNOTSUPP_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n        return MHD_ERR_NOTCONN_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n        return MHD_ERR_INVAL_;\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n        return MHD_ERR_NOMEM_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n        return MHD_ERR_BADF_;\n      /* Treat any other error as a hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n    post_send_setopt (connection, (! tls_conn), push_data);\n\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWhen compiled with HTTPS_SUPPORT not defined, tls_conn is initialized as the constant 'false' (const bool tls_conn = false). The controlling expression 'if (tls_conn)' is therefore invariant (always false) \u2014 not covered by the allowed exceptions \u2014 so this violates MISRA C 2023 Rule 14.3.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n1756198888: ENTRY: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: BEFORE_TLS_CHECK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_BRANCH_ENTER: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_SEND_RET: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: EXIT_OK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: ENTRY: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: BEFORE_TLS_CHECK: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_BRANCH_ENTER: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_SEND_RET: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: EXIT_OK: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: ENTRY: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: BEFORE_TLS_CHECK: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_BRANCH_ENTER: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_SEND_RET: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: EXIT_OK: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: ENTRY: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: BEFORE_TLS_CHECK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_BRANCH_ENTER: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_SEND_RET: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: EXIT_OK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: ENTRY: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: BEFORE_TLS_CHECK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_BRANCH_ENTER: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_SEND_RET: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: EXIT_OK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: ENTRY: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: BEFORE_TLS_CHECK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_BRANCH_ENTER: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_SEND_RET: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: EXIT_OK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: ENTRY: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: BEFORE_TLS_CHECK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_BRANCH_ENTER: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_SEND_RET: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: EXIT_OK: socket=6 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: ENTRY: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: BEFORE_TLS_CHECK: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_BRANCH_ENTER: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198888: PLAINTEXT_SEND_RET: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198888: EXIT_OK: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198889: ENTRY: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198889: BEFORE_TLS_CHECK: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198889: PLAINTEXT_BRANCH_ENTER: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198889: PLAINTEXT_SEND_RET: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198889: EXIT_OK: socket=7 state=13 buffer_size=125 push=1 tls_conn=0 ret=125\n1756198889: ENTRY: socket=9 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198889: BEFORE_TLS_CHECK: socket=9 state=13 buffer_size=125 push=1 tls_conn=0 ret=-1\n1756198889: PL\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. When HTTPS_SUPPORT is not defined the code sets a const bool tls_conn = false, so the controlling expression if (tls_conn) is an invariant (always false) in that build. MISRA C 2023 Rule 14.3 prohibits invariant controlling expressions and the provided exceptions do not cover this case (the allowed invariants are only for infinite loops or the specific do-while constant-false exception). Therefore the agent A report is correct for the configuration compiled without HTTPS_SUPPORT. Recommended fixes: remove the const so the value is computed at run-time, or better, use the preprocessor to compile only the TLS branch (e.g. wrap the TLS-specific if-body/else with #ifdef HTTPS_SUPPORT) or otherwise avoid an always-constant condition."
}