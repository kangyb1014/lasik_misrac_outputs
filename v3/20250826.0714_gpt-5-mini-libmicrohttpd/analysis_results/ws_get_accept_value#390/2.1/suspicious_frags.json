{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ws_get_accept_value:\n```c\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);",
    "len = BASE64Encode (hash, SHA1HashSize, val);",
    "if (NULL == str)\n  {\n    return MHD_NO;\n  }",
    "if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }",
    "strncpy (str, key, (WS_KEY_LEN + 1));",
    "free (str);",
    "return MHD_YES;",
    "if (-1 == len)\n  {\n    return MHD_NO;\n  }",
    "if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }",
    "(*val)[len] = '\\0';",
    "strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);",
    "str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);",
    "SHA1Reset (&ctx);"
  ],
  "explanation": "I reported all control-flow decision points, allocation/deallocation sites, and the subsequent operations that may be bypassed (the conditional returns and the calls that produce/consume dynamically allocated data). These are the locations where unreachable code could arise (e.g. a return or an error path that makes later statements unreachable, or where assumptions about runtime values might prevent execution of later lines). Other parts of the function (the function signature and the local variable declarations) are simple, straight-line elements that do not themselves create unreachable code and therefore do not require investigation for Rule 2.1."
}