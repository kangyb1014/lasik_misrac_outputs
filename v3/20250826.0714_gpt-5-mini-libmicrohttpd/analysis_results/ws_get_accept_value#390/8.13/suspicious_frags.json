{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ws_get_accept_value:\n```c\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);",
    "len = BASE64Encode (hash, SHA1HashSize, val);",
    "strncpy (str, key, (WS_KEY_LEN + 1));",
    "unsigned char hash[SHA1HashSize];",
    "(*val)[len] = '\\0';",
    "str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);",
    "strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);",
    "static enum MHD_Result\nws_get_accept_value (const char *key, char **val)",
    "char *str;"
  ],
  "explanation": "I selected fragments that involve pointer types or pointer usage where a const qualification on the pointed-to type might be appropriate (function parameter char **val, the local pointer str, the hash buffer when passed to encode, calls that copy/consume string data). Other code fragments were not selected because they do not introduce pointer types that could be const-qualified or already use const where appropriate: - The parameter key is already const-qualified (const char *key). - SHA1Context ctx is an object, not a pointer, so Rule 8.13 is not applicable. - The hash array is written by SHA1Result, so it must be mutable (cannot be const) though its usage when passed to functions may merit review (included above). - Calls such as SHA1Reset, SHA1Result, free and the return statements do not declare pointer types that could be promoted to point to const. - The malloc/free lifecycle for str requires a mutable buffer for strncpy, so str itself cannot be a pointer-to-const to the buffer contents (str is included above because its declaration/usage involves pointer-to-data choices). These omitted fragments therefore do not need further investigation for Rule 8.13 beyond the items already listed."
}