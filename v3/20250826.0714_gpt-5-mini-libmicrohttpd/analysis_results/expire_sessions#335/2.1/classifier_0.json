{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of expire_sessions:\n```c\nstatic void\nexpire_sessions (void)\n{\n  struct Session *pos;\n  struct Session *prev;\n  struct Session *next;\n  time_t now;\n\n  now = time (NULL);\n  prev = NULL;\n  pos = sessions;\n  while (NULL != pos)\n  {\n    next = pos->next;\n    if (now - pos->start > 60 * 60)\n    {\n      /* expire sessions after 1h */\n      if (NULL == prev)\n        sessions = pos->next;\n      else\n        prev->next = next;\n      free (pos);\n    }\n    else\n      prev = pos;\n    pos = next;\n  }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void\nexpire_sessions (void)\n{\n  struct Session *pos;\n  struct Session *prev;\n  struct Session *next;\n  time_t now;\n\n  now = time (NULL);\n  prev = NULL;\n  pos = sessions;\n  while (NULL != pos)\n  {\n    next = pos->next;\n    if (now - pos->start > 60 * 60)\n    {\n      /* expire sessions after 1h */\n      if (NULL == prev)\n        sessions = pos->next;\n      else\n        prev->next = next;\n      free (pos);\n    }\n    else\n      prev = pos;\n    pos = next;\n  }\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No unreachable code in this function. Every statement (initializations, loop body branches, and the final pos = next assignment) can be executed on some path. Therefore Rule 2.1 is not violated. (A hypothetical violation would occur if, for example, an unconditional return or an infinite loop were placed before subsequent statements making them unreachable.)"
}