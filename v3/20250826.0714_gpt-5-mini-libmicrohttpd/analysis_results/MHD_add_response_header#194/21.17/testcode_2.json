{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes raw pointers (header, content) directly into add_response_entry without validating lengths or NUL-termination; if add_response_entry uses <string.h> routines such as strlen, strcpy, strncpy, strcat, memcpy or memmove on those pointers or into fixed-size destination buffers, this can read or write beyond the bounds of the source or destination objects. Example violation: header is not NUL-terminated (or is longer than an internal fixed buffer) and add_response_entry calls strlen(header) or strcpy(dest, header) leading to a read or write past the object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1949.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a formatted message to the log file. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/1949.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Log entry with pointer values and response flag snapshot. Do not\n   * dereference header/content as they may be non-NUL-terminated. */\n  mhd_probe_log(\"MHD_add_response_header ENTRY: response=%p header=%p content=%p flags=0x%08x flags_auto=0x%08x\",\n                (void *)response, (void *)header, (void *)content,\n                response ? (unsigned)response->flags : 0U,\n                response ? (unsigned)response->flags_auto : 0U);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION)) {\n    mhd_probe_log(\"branch: CONNECTION matched (header=%p)\", (void *)header);\n    enum MHD_Result r = add_response_header_connection (response, content);\n    mhd_probe_log(\"call: add_response_header_connection returned %d for header=%p content=%p\",\n                  (int)r, (void *)header, (void *)content);\n    return r;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_probe_log(\"branch: TRANSFER-ENCODING matched (header=%p)\", (void *)header);\n    if (! MHD_str_equal_caseless_ (content, \"chunked\")) {\n      mhd_probe_log(\"reject: transfer-encoding content != 'chunked' (content=%p)\", (void *)content);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    mhd_probe_log(\"info: transfer-encoding content == 'chunked' (content=%p)\", (void *)content);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)) {\n      mhd_probe_log(\"already has chunked flag set: flags_auto=0x%08x\", (unsigned)response->flags_auto);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ) {\n      mhd_probe_log(\"conflict: has Content-Length and no Insanity flag: flags=0x%08x flags_auto=0x%08x\",\n                    (unsigned)response->flags, (unsigned)response->flags_auto);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n\n    /* Before calling add_response_entry: log pointers (do not dereference). */\n    mhd_probe_log(\"about to call add_response_entry for TRANSFER-ENCODING: header=%p content=%p\",\n                  (void *)header, (void *)content);\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_probe_log(\"add_response_entry succeeded, set HAS_TRANS_ENC_CHUNKED; flags_auto=0x%08x\",\n                    (unsigned)response->flags_auto);\n      return MHD_YES;\n    }\n    mhd_probe_log(\"add_response_entry failed for TRANSFER-ENCODING: header=%p content=%p\",\n                  (void *)header, (void *)content);\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_probe_log(\"branch: DATE matched (header=%p)\", (void *)header);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      mhd_probe_log(\"info: removing existing DATE header entry at %p\", (void *)hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    mhd_probe_log(\"about to call add_response_entry for DATE: header=%p content=%p\",\n                  (void *)header, (void *)content);\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_probe_log(\"add_response_entry succeeded for DATE; flags_auto=0x%08x\",\n                    (unsigned)response->flags_auto);\n      return MHD_YES;\n    }\n    mhd_probe_log(\"add_response_entry failed for DATE: header=%p content=%p\",\n                  (void *)header, (void *)content);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_probe_log(\"branch: CONTENT-LENGTH matched (header=%p)\", (void *)header);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      mhd_probe_log(\"content-length allowed: flags=0x%08x flags_auto=0x%08x\",\n                    (unsigned)response->flags, (unsigned)response->flags_auto);\n      mhd_probe_log(\"about to call add_response_entry for CONTENT-LENGTH: header=%p content=%p\",\n                    (void *)header, (void *)content);\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_probe_log(\"add_response_entry succeeded for CONTENT-LENGTH; flags_auto=0x%08x\",\n                      (unsigned)response->flags_auto);\n        return MHD_YES;\n      }\n      mhd_probe_log(\"add_response_entry failed for CONTENT-LENGTH: header=%p content=%p\",\n                    (void *)header, (void *)content);\n    }\n    return MHD_NO;\n  }\n\n  mhd_probe_log(\"default: about to call add_response_entry (header=%p content=%p)\",\n                (void *)header, (void *)content);\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}