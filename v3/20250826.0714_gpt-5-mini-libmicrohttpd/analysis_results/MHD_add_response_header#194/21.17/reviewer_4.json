{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_CONTENT_LENGTH) can invoke standard string handling routines (e.g. strcmp/strcasecmp/strlen) on the pointer 'header'. If 'header' is NULL or not NUL-terminated (for example when it points to a parsed HTTP name buffer with an explicit length but no terminating '\\0'), those routines will read past the bounds of the object and cause out\u2011of\u2011bounds access. Because the fragment performs no NULL or NUL\u2011termination checks before calling the string comparison helper, this can violate MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab02d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_TRANSFER_ENCODING: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab02d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_DATE: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab02d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_CONTENT_LENGTH: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab02d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_default_add_response_entry: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab02d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab04d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_TRANSFER_ENCODING: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab04d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_DATE: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab04d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_CONTENT_LENGTH: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab04d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_default_add_response_entry: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab04d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab087, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_TRANSFER_ENCODING: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab087, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_DATE: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab087, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_CONTENT_LENGTH: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab087, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_default_add_response_entry: response=0x5627eb58c820, header=0x5627c97ab01f, content=0x5627c97ab087, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab0f6, content=0x5627c97ab101, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab0f6, content=0x5627c97ab18e, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab0f6, content=0x5627c97ab240, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab0f6, content=0x5627c97ab26f, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x3\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab0f6, content=0x5627c97ab33c, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x3\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab0f6, content=0x5627c97ab95d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x1\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab0f6, content=0x5627c97ab95d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x3\nbefore_CONNECTION: response=0x5627eb58c820, header=0x5627c97ab0f6, content=0x5627c97ab95d, header_is_null=0, eq_conn=0, eq_te=0, eq_date=0, eq_cl=0, flags=0x0, flags_auto=0x0\nbefore_C\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report points out a real class of problem (calling string routines on a pointer that might be NULL or not NUL\u2011terminated can lead to out\u2011of\u2011bounds accesses). MISRA C:2023 Rule 21.17 requires that uses of the <string.h> routines must not permit such out\u2011of\u2011bounds reads. However, from the snippet alone we cannot prove a definite violation: MHD_add_response_header calls MHD_str_equal_caseless_ (a library helper) rather than directly invoking <string.h> functions. Whether Rule 21.17 is actually violated depends on the contract and/or implementation of that helper and on the API preconditions for the header parameter. If the public API requires that header is a non\u2011NULL, NUL\u2011terminated C string (and that contract is respected by all callers), then using MHD_str_equal_caseless_ is acceptable and there is no MISRA violation in this function. If, conversely, callers may pass header buffers with explicit lengths and without termination (or NULL) and MHD_str_equal_caseless_ (or other called code) uses standard string functions without bounds/NULL checks, then the report is correct and this is a Rule 21.17 violation. In short: the agent A report is plausible but not proven from the provided code alone. To conclude decisively you must inspect (a) the documented precondition for the header parameter and (b) the implementation of MHD_str_equal_caseless_ (and any other string helpers it uses). If no precondition is documented or the helper uses string.h functions without guarding against non\u2011terminated or NULL inputs, treat this as a violation and fix by validating inputs or using bounded routines."
}