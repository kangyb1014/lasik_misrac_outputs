{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_str_equal_caseless_ internally uses standard string.h functions that assume NUL-terminated inputs (e.g. strcmp, strcasecmp, strlen, memcmp without explicit bounds) then calling MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_CONNECTION) can read past the end of the buffer referenced by header. For example, if 'header' points to a buffer that is not NUL-terminated or is shorter than strlen(MHD_HTTP_HEADER_CONNECTION) and MHD_str_equal_caseless_ compares the strings without length checks, the comparison will access memory beyond the bounds of header and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1949.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append concise logs to /tmp/logs/1949.txt.\n * This helper intentionally never dereferences the string pointers\n * it is handed (no %s on unknown pointers) to avoid reading beyond\n * the bounds of the objects referenced by those pointers. It only\n * prints pointer values and descriptive names so other agents can\n * reproduce the control flow around comparisons that might read\n * beyond object bounds in the production code. */\nstatic void\nmhd_probe_log_cmp (const char *phase,             /* e.g. \"BEFORE\", \"AFTER\" */\n                    const char *left_name,         /* name used for left operand */\n                    const void *left_ptr,          /* pointer value of left operand */\n                    const char *right_name,        /* name used for right operand */\n                    const void *right_ptr,         /* pointer value of right operand */\n                    int result)                    /* -1 for not-yet-known, else comparison result */\n{\n  FILE *fp = fopen(\"/tmp/logs/1949.txt\", \"a\");\n  if (NULL == fp)\n    return; /* best-effort logging; do not alter program flow on failure */\n\n  if (result < 0)\n    fprintf (fp, \"%s: compare %s(%p) vs %s(%p)\\n\",\n             phase, left_name, left_ptr, right_name, right_ptr);\n  else\n    fprintf (fp, \"%s: compare %s(%p) vs %s(%p) -> %d\\n\",\n             phase, left_name, left_ptr, right_name, right_ptr, result);\n\n  fclose (fp);\n}\n\n/* The rest of the function keeps the original logic; we only add\n * logging probes immediately before and after each call to\n * MHD_str_equal_caseless_ and for some important decision points. */\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* 1) CONNECTION header */\n  mhd_probe_log_cmp (\"BEFORE\", \"header\", header, \"MHD_HTTP_HEADER_CONNECTION\", (const void *) MHD_HTTP_HEADER_CONNECTION, -1);\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    mhd_probe_log_cmp (\"AFTER\", \"header\", header, \"MHD_HTTP_HEADER_CONNECTION\", (const void *) MHD_HTTP_HEADER_CONNECTION, 1);\n    return add_response_header_connection (response, content);\n  }\n  mhd_probe_log_cmp (\"AFTER\", \"header\", header, \"MHD_HTTP_HEADER_CONNECTION\", (const void *) MHD_HTTP_HEADER_CONNECTION, 0);\n\n  /* 2) TRANSFER-ENCODING header */\n  mhd_probe_log_cmp (\"BEFORE\", \"header\", header, \"MHD_HTTP_HEADER_TRANSFER_ENCODING\", (const void *) MHD_HTTP_HEADER_TRANSFER_ENCODING, -1);\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_probe_log_cmp (\"AFTER\", \"header\", header, \"MHD_HTTP_HEADER_TRANSFER_ENCODING\", (const void *) MHD_HTTP_HEADER_TRANSFER_ENCODING, 1);\n\n    mhd_probe_log_cmp (\"BEFORE\", \"content\", content, \"\\\"chunked\\\"\", (const void *) \"chunked\", -1);\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      mhd_probe_log_cmp (\"AFTER\", \"content\", content, \"\\\"chunked\\\"\", (const void *) \"chunked\", 0);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    mhd_probe_log_cmp (\"AFTER\", \"content\", content, \"\\\"chunked\\\"\", (const void *) \"chunked\", 1);\n\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  mhd_probe_log_cmp (\"AFTER\", \"header\", header, \"MHD_HTTP_HEADER_TRANSFER_ENCODING\", (const void *) MHD_HTTP_HEADER_TRANSFER_ENCODING, 0);\n\n  /* 3) DATE header */\n  mhd_probe_log_cmp (\"BEFORE\", \"header\", header, \"MHD_HTTP_HEADER_DATE\", (const void *) MHD_HTTP_HEADER_DATE, -1);\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_probe_log_cmp (\"AFTER\", \"header\", header, \"MHD_HTTP_HEADER_DATE\", (const void *) MHD_HTTP_HEADER_DATE, 1);\n\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  mhd_probe_log_cmp (\"AFTER\", \"header\", header, \"MHD_HTTP_HEADER_DATE\", (const void *) MHD_HTTP_HEADER_DATE, 0);\n\n  /* 4) CONTENT-LENGTH header */\n  mhd_probe_log_cmp (\"BEFORE\", \"header\", header, \"MHD_HTTP_HEADER_CONTENT_LENGTH\", (const void *) MHD_HTTP_HEADER_CONTENT_LENGTH, -1);\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_probe_log_cmp (\"AFTER\", \"header\", header, \"MHD_HTTP_HEADER_CONTENT_LENGTH\", (const void *) MHD_HTTP_HEADER_CONTENT_LENGTH, 1);\n\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n  mhd_probe_log_cmp (\"AFTER\", \"header\", header, \"MHD_HTTP_HEADER_CONTENT_LENGTH\", (const void *) MHD_HTTP_HEADER_CONTENT_LENGTH, 0);\n\n  /* Default: add header normally. Log the attempt and the pointer values. */\n  {\n    FILE *fp = fopen(\"/tmp/logs/1949.txt\", \"a\");\n    if (NULL != fp)\n    {\n      fprintf (fp, \"FALLTHROUGH: add_response_entry with header(%p) content(%p)\\n\", (const void *) header, (const void *) content);\n      fclose (fp);\n    }\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}