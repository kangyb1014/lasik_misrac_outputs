{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_TRANSFER_ENCODING) may invoke standard string handling routines (e.g. strcmp/strlen/strncasecmp) on the pointer 'header'. If 'header' is NULL or points to a non\u2013NUL-terminated buffer (or a buffer shorter than expected), such routines can read past the object bounds and cause out-of-bounds accesses. For example, if a caller passes a pointer to a length-limited header buffer without a terminating '\\0', and MHD_str_equal_caseless_ internally uses strlen/strcmp, the comparison will read beyond the buffer boundary and violate Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter-MHD_add_response_header: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=entry\ncmp-connection-pre: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_CONNECTION\ncmp-connection-post: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-connection result=0\ncmp-transfer-pre: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_TRANSFER_ENCODING\ncmp-transfer-post: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-transfer result=0\ncmp-date-pre: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_DATE\ncmp-date-post: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-date result=0\ncmp-content-length-pre: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_CONTENT_LENGTH\ncmp-content-length-post: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-content-length result=0\nfallback-add-response-entry: header=0x557041bef01f content=0x557041bef02d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=calling generic add_response_entry at end\nenter-MHD_add_response_header: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=entry\ncmp-connection-pre: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_CONNECTION\ncmp-connection-post: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-connection result=0\ncmp-transfer-pre: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_TRANSFER_ENCODING\ncmp-transfer-post: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-transfer result=0\ncmp-date-pre: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_DATE\ncmp-date-post: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-date result=0\ncmp-content-length-pre: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_CONTENT_LENGTH\ncmp-content-length-post: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-content-length result=0\nfallback-add-response-entry: header=0x557041bef01f content=0x557041bef04d response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=calling generic add_response_entry at end\nenter-MHD_add_response_header: header=0x557041bef01f content=0x557041bef087 response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=entry\ncmp-connection-pre: header=0x557041bef01f content=0x557041bef087 response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_CONNECTION\ncmp-connection-post: header=0x557041bef01f content=0x557041bef087 response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-connection result=0\ncmp-transfer-pre: header=0x557041bef01f content=0x557041bef087 response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_TRANSFER_ENCODING\ncmp-transfer-post: header=0x557041bef01f content=0x557041bef087 response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=cmp-transfer result=0\ncmp-date-pre: header=0x557041bef01f content=0x557041bef087 response=0x5570428c4820 flags=0x0 flags_auto=0x0 note=about to compare with MHD_HTTP_HEADER_DATE\ncmp-date-post: header=0x557041bef01f content=0x557041bef087 response=0x5570428c4820 f\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's scenario is plausible in general \u2014 calling string.h functions (strlen/strcmp/strncasecmp, etc.) on a buffer that is not NUL-terminated or that is NULL can read beyond object bounds and would violate MISRA C:2023 Rule 21.17. However, the snippet shown (MHD_add_response_header) does not itself directly call any <string.h> routines; it delegates comparisons to an internal helper MHD_str_equal_caseless_. Whether a Rule 21.17 violation actually exists depends on the contract and implementation of that helper (and any other callees):\n\n- If MHD_str_equal_caseless_ (or functions it calls) uses standard <string.h> routines on the header pointer without first ensuring the pointer is non-NULL and the string is NUL-terminated (or bounded by a known length), then the agent's reported violation is correct \u2014 such usage could read beyond the header buffer bounds and violate 21.17.  The same applies to any other downstream call (e.g. add_response_entry) that assumes NUL-terminated input but is passed a non-terminated buffer.\n\n- If, by API contract, callers of MHD_add_response_header are required to pass valid, NUL-terminated C strings for header and content, and/or if MHD_str_equal_caseless_ performs safe length-limited comparisons (or checks for NULL/termination), then MHD_add_response_header does not itself violate 21.17. In that case the code is acceptable provided the precondition is documented and enforced.\n\nThe evidence provided (execution log) only shows non-NULL pointer values and comparison results; it does not show use of unsafe string.h calls or an overrun. Therefore the claim cannot be confirmed from the shown code alone. The correct next step is to review the implementation of MHD_str_equal_caseless_ (and other callee functions) and the API contract for MHD_add_response_header. If those helpers use unconstrained strcpy/strlen/strcmp/etc. on caller-provided buffers, then the reported violation is correct; otherwise it is not.\n\nSummary: the report is not proven correct based on the provided code alone \u2014 correctness depends on the implementation/contract of the helper functions and caller guarantees."
}