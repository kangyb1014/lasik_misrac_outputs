{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the function MHD_get_response_element_n_ is declared with a non-const pointer parameter for the header (e.g. char *header), then this call passes a string literal (MHD_HTTP_HEADER_DATE) to a non-const pointer. String literals have static storage and should be pointed to by const-qualified pointers; therefore Rule 8.13 is violated. The concrete violation scenario: MHD_HTTP_HEADER_DATE expands to a string literal (or otherwise immutable data) and the prototype of MHD_get_response_element_n_ declares the header parameter as char * (not const char *).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x55724353301f, header_str=\"Header-Type-A\", content=0x55724353302d, content_str=\"value-a1\"\nFalling back to add_response_entry for header=\"Header-Type-A\"\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x55724353301f, header_str=\"Header-Type-A\", content=0x55724353304d, content_str=\"value-a2\"\nFalling back to add_response_entry for header=\"Header-Type-A\"\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x55724353301f, header_str=\"Header-Type-A\", content=0x557243533087, content_str=\"value-a3\"\nFalling back to add_response_entry for header=\"Header-Type-A\"\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x557243533101, content_str=\"a,b,c,d,e\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353318e, content_str=\"i,k,l,m,n,o,p,close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x557243533240, content_str=\"1,2,3,4,5,6,7,close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353326f, content_str=\"8,9,close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353333c, content_str=\"10,12\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353395d, content_str=\"close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353395d, content_str=\"close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353395d, content_str=\"close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353395d, content_str=\"close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x557243533570, content_str=\"close,other-token\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x557243533595, content_str=\"close, new-token\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x5572435335ed, content_str=\"close, one-long-token\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353395d, content_str=\"close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353395d, content_str=\"close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x557243533618, content_str=\"close, additional-token\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x557243533647, content_str=\"token-1,token-2\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x5572435336a2, content_str=\"token-3\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353395d, content_str=\"close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, header=0x5572435330f6, header_str=\"Connection\", content=0x55724353395d, content_str=\"close\"\nTaking CONNECTION branch\nENTER MHD_add_response_header: response=0x55724cb20820, \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct in the scenario described. The call\n  hdr = MHD_get_response_element_n_(response, MHD_HEADER_KIND,\n                                    MHD_HTTP_HEADER_DATE, ...);\npasses MHD_HTTP_HEADER_DATE (a compile-time header string) to MHD_get_response_element_n_. If that function is declared to take a plain char * (non-const) for the header parameter, then a pointer to non-const is being used where the data is effectively immutable. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible (i.e. parameters that are not intended to modify the pointed-to data should be declared const). Therefore, given the prototype that uses char *header rather than const char *header, this is a genuine violation of R8.13. Note: the violation depends on the declaration of MHD_get_response_element_n_ (the shown code does not include its prototype). The correct remediation is to declare the parameter as const char * (or otherwise ensure const-correctness) rather than casting away const or leaving it non-const."
}