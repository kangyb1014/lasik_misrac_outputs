{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function add_response_entry is declared to take non-const char * parameters for header/content, then the call add_response_entry(..., header, content) passes const char * arguments (MHD_add_response_header declares header and content as const char *), discarding the const qualifier. That discarding of const violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible). To comply, add_response_entry should accept const char * for these parameters (or the call must not discard const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1943.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append logs to /tmp/logs/1943.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1943.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Log function entry and key state */\n  mhd_probe_log(\"ENTER: MHD_add_response_header(response=%p, header=%p, content=%p, header_str=%s, content_str=%s, flags=0x%X, flags_auto=0x%X)\\n\",\n                (void *)response,\n                (void *)header,\n                (void *)content,\n                (NULL != header) ? header : \"(null)\",\n                (NULL != content) ? content : \"(null)\",\n                (response != NULL) ? response->flags : 0U,\n                (response != NULL) ? response->flags_auto : 0U);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    enum MHD_Result _res_conn = add_response_header_connection (response, content);\n    mhd_probe_log(\"BRANCH: connection -> add_response_header_connection returned %d\\n\", (int)_res_conn);\n    return _res_conn;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_probe_log(\"BRANCH: transfer-encoding header, content=%s\\n\",\n                  (NULL != content) ? content : \"(null)\");\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      mhd_probe_log(\"DECISION: transfer-encoding not 'chunked' -> return MHD_NO\\n\");\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      mhd_probe_log(\"DECISION: already has chunked encoding -> return MHD_YES\\n\");\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      mhd_probe_log(\"DECISION: has Content-Length and no Insanity flag -> return MHD_NO\\n\");\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    {\n      enum MHD_Result _res = add_response_entry (response,\n                                                 MHD_HEADER_KIND,\n                                                 header,\n                                                 content);\n      mhd_probe_log(\"CALL: add_response_entry for transfer-encoding returned %d\\n\", (int)_res);\n      if (MHD_NO != _res)\n      {\n        response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n        mhd_probe_log(\"ACTION: set RAF_HAS_TRANS_ENC_CHUNKED; return MHD_YES\\n\");\n        return MHD_YES;\n      }\n      mhd_probe_log(\"ACTION: add_response_entry failed -> return MHD_NO\\n\");\n      return MHD_NO;\n    }\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_probe_log(\"BRANCH: date header\\n\");\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      mhd_probe_log(\"ACTION: removing existing Date header at %p, value=%s\\n\",\n                    (void *)hdr,\n                    (NULL != hdr->value) ? hdr->value : \"(null)\");\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    {\n      enum MHD_Result _res = add_response_entry (response,\n                                                 MHD_HEADER_KIND,\n                                                 header,\n                                                 content);\n      mhd_probe_log(\"CALL: add_response_entry for date returned %d\\n\", (int)_res);\n      if (MHD_NO != _res)\n      {\n        response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n        mhd_probe_log(\"ACTION: set RAF_HAS_DATE_HDR; return MHD_YES\\n\");\n        return MHD_YES;\n      }\n      mhd_probe_log(\"ACTION: add_response_entry failed for date -> return MHD_NO\\n\");\n      return MHD_NO;\n    }\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_probe_log(\"BRANCH: content-length header\\n\");\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      enum MHD_Result _res = add_response_entry (response,\n                                                 MHD_HEADER_KIND,\n                                                 header,\n                                                 content);\n      mhd_probe_log(\"CALL: add_response_entry for content-length returned %d\\n\", (int)_res);\n      if (MHD_NO != _res)\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_probe_log(\"ACTION: set RAF_HAS_CONTENT_LENGTH; return MHD_YES\\n\");\n        return MHD_YES;\n      }\n    }\n    mhd_probe_log(\"ACTION: content-length branch -> return MHD_NO\\n\");\n    return MHD_NO;\n  }\n\n  {\n    enum MHD_Result _res = add_response_entry (response,\n                                               MHD_HEADER_KIND,\n                                               header,\n                                               content);\n    mhd_probe_log(\"CALL: default add_response_entry returned %d; returning that value\\n\", (int)_res);\n    return _res;\n  }\n}\n"
}