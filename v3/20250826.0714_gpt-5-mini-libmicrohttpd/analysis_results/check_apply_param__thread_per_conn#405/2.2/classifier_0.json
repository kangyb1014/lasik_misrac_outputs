{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_apply_param__thread_per_conn:\n```c\nstatic int\ncheck_apply_param__thread_per_conn (void)\n{\n  if (! tool_params.thread_per_conn)\n    return ! 0;\n\n  if (tool_params.epoll)\n  {\n    fprintf (stderr, \"'Thread-per-connection' mode cannot be used together \"\n             \"with 'epoll'.\\n\");\n    return 0;\n  }\n  num_threads = 1;\n\n  return ! 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nnum_threads = 1;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The assignment sets the global configuration variable num_threads when 'thread-per-connection' mode is selected; this will affect later thread creation and therefore changing/removing it would change program behaviour. It would only be dead code if, in the rest of the program, num_threads is never read or is always overwritten before any read \u2014 e.g. if no code ever uses num_threads to control thread creation, or another assignment always occurs before any use, then the statement could be removed without effect."
}