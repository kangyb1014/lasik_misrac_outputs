{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nIf none of the feature macros (MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT, MHD_SHA512_256_SUPPORT) are defined the preprocessor reduces the controlling expression to \"if (true)\". That is a constant/invariant controlling expression (always true) and does not fall under the allowed exceptions (those permit invariant infinite loops or a do-while false constant). Therefore Rule 14.3 is violated in that translation unit.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2805.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <string.h>\n#include <inttypes.h>\n#include <stdarg.h>\n\n/* Probe logger that appends to /tmp/logs/2805.txt. */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2805.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n\n  fclose (f);\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  probe_log(\"get_nonce_timestamp: entered; nonce=%p, noncelen=%zu\", (const void *)nonce, noncelen);\n\n  /* Recreate the controlling expression in a runtime variable so we can log\n     its evaluated value. The preprocessor will include/exclude the same\n     sub-expressions as in the original code, preserving behaviour. */\n  bool cond = true;\n#ifdef MHD_MD5_SUPPORT\n  cond = cond && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen);\n  probe_log(\"MHD_MD5_SUPPORT: NONCE_STD_LEN(MD5)=%zu, cond=%d\",\n            (size_t) NONCE_STD_LEN (MD5_DIGEST_SIZE), (int) cond);\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n  cond = cond && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen);\n  probe_log(\"SHA256/SHA512_256 support: NONCE_STD_LEN(SHA256_SHA512_256)=%zu, cond=%d\",\n            (size_t) NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE), (int) cond);\n#endif /* MHD_SHA256_SUPPORT */\n\n  probe_log(\"Controlling expression evaluated to: %d\", (int) cond);\n\n  if (cond)\n  {\n    probe_log(\"Controlling expression is true -> returning false (nonce length mismatch)\");\n    return false;\n  }\n\n  /* Parse timestamp from the tail of the nonce. Keep original logic. */\n  uint64_t tmp_ts = 0;\n  size_t parsed = MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                                         TIMESTAMP_CHARS_LEN,\n                                         &tmp_ts);\n  probe_log(\"MHD_strx_to_uint64_n_ returned %zu (expected %d), parsed_ts=%\" PRIu64,\n            parsed, TIMESTAMP_CHARS_LEN, tmp_ts);\n\n  if (TIMESTAMP_CHARS_LEN != parsed)\n  {\n    probe_log(\"Timestamp parsing length mismatch -> returning false\");\n    return false;\n  }\n\n  *ptimestamp = tmp_ts;\n  probe_log(\"Success -> returning true, ptimestamp=%\" PRIu64, *ptimestamp);\n  return true;\n}\n"
}