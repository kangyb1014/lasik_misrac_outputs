{
  "user_message": "An agent A claimed that the following get_nonce_timestamp code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of get_nonce_timestamp.\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf noncelen == 0 the code calls strlen(nonce) without checking that nonce is non-NULL and that the object pointed to by nonce is NUL-terminated within its accessible bounds. For example, if the caller passes noncelen == 0 and nonce points to a buffer that is not NUL-terminated (or is NULL), strlen will read past the buffer bounds (or dereference NULL), causing an out-of-bounds access and thus violating MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. Rule 21.17 forbids using string.h functions in a way that can access beyond the bounds of the object referred to by their pointer parameters. In this code, when noncelen == 0 the function calls strlen(nonce) without any check that nonce is non-NULL or that the object pointed to by nonce is NUL-terminated within its accessible bounds. If a caller passes noncelen == 0 and nonce is NULL or points to a non NUL-terminated buffer, strlen will read out-of-bounds (or dereference NULL), which violates MISRA C 2023 Rule 21.17. (If an external, enforced precondition guarantees nonce is non-NULL and NUL-terminated whenever noncelen == 0, the use could be acceptable; no such check or contract is present in the shown code.)"
}