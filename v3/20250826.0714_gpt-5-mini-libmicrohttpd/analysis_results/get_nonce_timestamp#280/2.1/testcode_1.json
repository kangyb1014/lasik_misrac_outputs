{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf neither MHD_MD5_SUPPORT nor MHD_SHA256_SUPPORT/MHD_SHA512_256_SUPPORT is defined, the preprocessor reduces the test to `if (true) return false;` so execution always returns before the final `return true;`, making that `return true;` unreachable. This violates MISRA C 2023 Rule 2.1. (If at least one of those support macros is defined and the length checks can fail, the final `return true;` may be reachable \u2014 the violation occurs for the build configuration with none of the support macros defined.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2801.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* External declaration (assumed provided elsewhere in the project). */\nextern size_t MHD_strx_to_uint64_n_(const char *src, size_t n, uint64_t *out);\n\nstatic void\nlog_probe(const char *msg)\n{\n  FILE *fp = fopen(\"/tmp/logs/2801.txt\", \"a\");\n  if (fp != NULL)\n    {\n      fprintf(fp, \"%s\\n\", msg);\n      fclose(fp);\n    }\n}\n\nstatic void\nlog_fmt(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *fp = fopen(\"/tmp/logs/2801.txt\", \"a\");\n  if (fp == NULL)\n    return;\n  va_start(ap, fmt);\n  vfprintf(fp, fmt, ap);\n  fprintf(fp, \"\\n\");\n  va_end(ap);\n  fclose(fp);\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Log entry and initial parameters */\n  log_fmt(\"ENTER get_nonce_timestamp: nonce=%p, noncelen=%zu, ptimestamp=%p\", (const void *)nonce, noncelen, (void *)ptimestamp);\n\n  if (0 == noncelen)\n    {\n      /* preserve original behavior: compute strlen when noncelen == 0 */\n      size_t computed = strlen (nonce);\n      log_fmt(\"noncelen was 0, strlen(nonce)=%zu\", computed);\n      noncelen = computed;\n    }\n  else\n    {\n      log_fmt(\"noncelen provided: %zu\", noncelen);\n    }\n\n  /* Recreate the original conditional in a way that is easy to log but preserves behavior. */\n  bool cond = true;\n\n#ifdef MHD_MD5_SUPPORT\n  {\n    bool md5_check = (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen);\n    log_fmt(\"MHD_MD5_SUPPORT defined: NONCE_STD_LEN(MD5_DIGEST_SIZE)=%d, noncelen=%zu, md5_check=%d\",\n            (int)NONCE_STD_LEN (MD5_DIGEST_SIZE), noncelen, (int)md5_check);\n    cond = cond && md5_check;\n  }\n#else\n  log_probe(\"MHD_MD5_SUPPORT not defined\");\n#endif /* MHD_MD5_SUPPORT */\n\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n  {\n    bool sha_check = (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen);\n    log_fmt(\"SHA support defined: NONCE_STD_LEN(SHA256_SHA512_256_DIGEST_SIZE)=%d, noncelen=%zu, sha_check=%d\",\n            (int)NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE), noncelen, (int)sha_check);\n    cond = cond && sha_check;\n  }\n#else\n  log_probe(\"No SHA support macros defined (MHD_SHA256_SUPPORT/MHD_SHA512_256_SUPPORT)\");\n#endif /* MHD_SHA256_SUPPORT || MHD_SHA512_256_SUPPORT */\n\n  log_fmt(\"Combined initial check (cond) = %d\", (int)cond);\n\n  if (cond)\n    {\n      log_probe(\"First conditional matched: returning false (nonce length did not match expected formats)\");\n      return false;\n    }\n\n  /* Parse timestamp portion and log results */\n  log_fmt(\"About to call MHD_strx_to_uint64_n_: src_offset=%zu, len=%d\",\n          (noncelen >= (size_t)TIMESTAMP_CHARS_LEN) ? (noncelen - (size_t)TIMESTAMP_CHARS_LEN) : 0u,\n          (int)TIMESTAMP_CHARS_LEN);\n\n  size_t parsed = MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                                         TIMESTAMP_CHARS_LEN,\n                                         ptimestamp);\n\n  log_fmt(\"MHD_strx_to_uint64_n_ returned %zu, expected %d\", parsed, (int)TIMESTAMP_CHARS_LEN);\n\n  if (TIMESTAMP_CHARS_LEN != parsed)\n    {\n      log_probe(\"Timestamp parsing failed: returning false\");\n      return false;\n    }\n\n  log_probe(\"All checks passed: returning true\");\n  return true;\n}\n"
}