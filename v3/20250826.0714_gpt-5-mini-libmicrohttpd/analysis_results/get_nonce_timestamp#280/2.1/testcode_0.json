{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf none of the feature macros (MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT, MHD_SHA512_256_SUPPORT) are defined the preprocessor yields `if (true) return false;` so the subsequent TIMESTAMP_CHARS_LEN check (and any code after it) is unreachable. This configuration produces unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2801.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/stat.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/2801.txt */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *fp = NULL;\n  /* Try to ensure the directory exists; ignore errors */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  fp = fopen(\"/tmp/logs/2801.txt\", \"a\");\n  if (NULL == fp)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (fp, fmt, ap);\n  va_end (ap);\n  fprintf (fp, \"\\n\");\n  fflush (fp);\n  fclose (fp);\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Log entry with initial state */\n  log_probe (\"ENTER get_nonce_timestamp: nonce=%p noncelen=%zu ptimestamp=%p\",\n             (const void *) nonce, noncelen, (const void *) ptimestamp);\n\n  if (0 == noncelen)\n    {\n      noncelen = strlen (nonce);\n      /* Log computed length and a truncated view of nonce */\n      if (nonce != NULL)\n        {\n          /* Print up to 128 chars to avoid overly long logs */\n          char buf[129];\n          size_t tocopy = (noncelen < 128U) ? noncelen : 128U;\n          memcpy (buf, nonce, tocopy);\n          buf[tocopy] = '\\0';\n          log_probe (\"Computed noncelen=%zu nonce_prefix=\\\"%s\\\"\", noncelen, buf);\n        }\n      else\n        {\n          log_probe (\"Computed noncelen=%zu but nonce is NULL\", noncelen);\n        }\n    }\n\n  /* Recreate the original compound condition using an intermediate variable\n     so we can log sub-check results without changing the logical outcome. */\n  bool compound_check = true;\n\n#ifdef MHD_MD5_SUPPORT\n  {\n    const bool md5_check = (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen);\n    compound_check = compound_check && md5_check;\n    log_probe (\"MD5 support enabled: NONCE_STD_LEN(MD5_DIGEST_SIZE)=%d noncelen=%zu md5_check=%d\",\n               (int) NONCE_STD_LEN (MD5_DIGEST_SIZE), noncelen, (int) md5_check);\n  }\n#else\n  log_probe (\"MD5 support NOT enabled: skipping MD5 check\");\n#endif /* MHD_MD5_SUPPORT */\n\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n  {\n    const bool sha_check = (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen);\n    compound_check = compound_check && sha_check;\n    log_probe (\"SHA support enabled: NONCE_STD_LEN(SHA256_SHA512_256_DIGEST_SIZE)=%d noncelen=%zu sha_check=%d\",\n               (int) NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE), noncelen, (int) sha_check);\n  }\n#else\n  log_probe (\"SHA support NOT enabled: skipping SHA check\");\n#endif /* MHD_SHA256_SUPPORT */\n\n  log_probe (\"Compound check result = %d\", (int) compound_check);\n\n  if (compound_check)\n    {\n      log_probe (\"Returning false due to compound_check == true (unreachable-code test target)\");\n      return false;\n    }\n\n  /* Evaluate timestamp parse once, log the returned length and timestamp value */\n  size_t parsed = MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                                         TIMESTAMP_CHARS_LEN,\n                                         ptimestamp);\n  log_probe (\"MHD_strx_to_uint64_n_ returned %zu expected %d ptimestamp=%\" PRIu64,\n             parsed, TIMESTAMP_CHARS_LEN, (ptimestamp != NULL) ? *ptimestamp : 0ULL);\n\n  if (TIMESTAMP_CHARS_LEN != parsed)\n    {\n      log_probe (\"Returning false due to timestamp length mismatch: expected=%d got=%zu\",\n                 TIMESTAMP_CHARS_LEN, parsed);\n      return false;\n    }\n\n  log_probe (\"Returning true: timestamp parsed successfully ptimestamp=%\" PRIu64,\n             (ptimestamp != NULL) ? *ptimestamp : 0ULL);\n  return true;\n}\n"
}