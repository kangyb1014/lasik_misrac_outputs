{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call may access beyond object bounds if MHD_str_equal_caseless_quoted_s_bin_n does not confine its accesses to the provided length. For example, if the implementation uses standard <string.h> routines that expect NUL-terminated strings (e.g. strlen/strcmp) or otherwise reads past qop_param->value.len, it can read beyond qop_param->value.str (the code only checked for NULL, not for termination or actual buffer size). Similarly, if the function assumes the token (MHD_TOKEN_AUTH_INT_) is NUL-terminated and compares in a way that reads more than qop_param->value.len bytes, an out\u2011of\u2011bounds access can occur. Without a documented guarantee that the called routine limits reads to the supplied length, this invocation can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_qop code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2439.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_qop as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_qop:\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_qop code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append diagnostics to /tmp/logs/2439.txt */\nstatic void log_dauth_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2439.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\n/* Wrapper probes around the equality checks to capture parameters and results.\n   These preserve the original calls and return the same results. */\nstatic int probe_MHD_str_equal_caseless_quoted_s_bin_n(const char *s, size_t len, const char *tok)\n{\n    int res = MHD_str_equal_caseless_quoted_s_bin_n(s, len, tok);\n    log_dauth_probe(\"call: MHD_str_equal_caseless_quoted_s_bin_n(s=%p, len=%zu, tok=%p) -> %d\\n\",\n                    (void *)s, len, (void *)tok, res);\n    return res;\n}\n\nstatic int probe_MHD_str_equal_caseless_s_bin_n_(const char *tok, const char *s, size_t len)\n{\n    int res = MHD_str_equal_caseless_s_bin_n_(tok, s, len);\n    log_dauth_probe(\"call: MHD_str_equal_caseless_s_bin_n_(tok=%p, s=%p, len=%zu) -> %d\\n\",\n                    (void *)tok, (void *)s, len, res);\n    return res;\n}\n\n/* Preserve original logic of get_rq_dauth_qop but add probes to capture control flow\n   and parameter values relevant to the potential out-of-bounds read scenario. */\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  log_dauth_probe(\"enter: get_rq_dauth_qop(qop_param=%p)\\n\", (void *)qop_param);\n  if (qop_param == NULL)\n  {\n    log_dauth_probe(\"qop_param is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE\\n\");\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  }\n\n  log_dauth_probe(\"qop_param->value.str=%p quoted=%d len=%zu\\n\",\n                  (void *)qop_param->value.str,\n                  (int)qop_param->quoted,\n                  (size_t)qop_param->value.len);\n\n  if (NULL == qop_param->value.str)\n  {\n    log_dauth_probe(\"value.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE\\n\");\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  }\n  if (qop_param->quoted)\n  {\n    log_dauth_probe(\"branch: quoted == true\\n\");\n    if (probe_MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                                     qop_param->value.len,\n                                                     MHD_TOKEN_AUTH_))\n    {\n      log_dauth_probe(\"match: MHD_TOKEN_AUTH_ -> returning MHD_DIGEST_AUTH_QOP_AUTH\\n\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n    if (probe_MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                                     qop_param->value.len,\n                                                     MHD_TOKEN_AUTH_INT_))\n    {\n      log_dauth_probe(\"match: MHD_TOKEN_AUTH_INT_ -> returning MHD_DIGEST_AUTH_QOP_AUTH_INT\\n\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  else\n  {\n    log_dauth_probe(\"branch: quoted == false\\n\");\n    if (probe_MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_,\n                                               qop_param->value.str,\n                                               qop_param->value.len))\n    {\n      log_dauth_probe(\"match: MHD_TOKEN_AUTH_ (unquoted) -> returning MHD_DIGEST_AUTH_QOP_AUTH\\n\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n    if (probe_MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_,\n                                               qop_param->value.str,\n                                               qop_param->value.len))\n    {\n      log_dauth_probe(\"match: MHD_TOKEN_AUTH_INT_ (unquoted) -> returning MHD_DIGEST_AUTH_QOP_AUTH_INT\\n\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  /* No know QOP has been detected */\n  log_dauth_probe(\"no known QOP detected -> returning MHD_DIGEST_AUTH_QOP_INVALID\\n\");\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n"
}