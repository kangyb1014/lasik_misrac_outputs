{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a pointer plus an explicit length to a helper named MHD_str_equal_caseless_s_bin_n_. If that helper internally uses unbounded <string.h> functions (for example strlen, strcmp, strcasecmp) on qop_param->value.str which may not be NUL-terminated, those functions will read past the object\u2019s bounds. Example: qop_param->value.str points to a 2-byte non-terminated buffer \"au\" with value.len==2; if the helper does strlen(qop_param->value.str) or calls strcasecmp(MHD_TOKEN_AUTH_, qop_param->value.str) it will access bytes beyond the buffer causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_qop code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2439.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_qop as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_qop:\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_qop code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\n/* Probe/logging helper: write control-flow and state to /tmp/logs/2439.txt */\nstatic void log_qop_param_state(const struct MHD_RqDAuthParam *const qop_param,\n                                const char *marker)\n{\n  FILE *f = fopen(\"/tmp/logs/2439.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging; don't change program logic on failure */\n\n  fprintf(f, \"---- %s ----\\n\", marker ? marker : \"(null)\");\n  fprintf(f, \"qop_param ptr: %p\\n\", (void *)qop_param);\n  if (NULL == qop_param)\n  {\n    fprintf(f, \"qop_param is NULL\\n\\n\");\n    fclose(f);\n    return;\n  }\n\n  /* Log quoted flag if present (print as integer) */\n  fprintf(f, \"quoted: %d\\n\", (int)qop_param->quoted);\n  fprintf(f, \"value.str ptr: %p\\n\", (void *)qop_param->value.str);\n\n  /* Safely log the provided length; cast to unsigned long long for printing */\n  fprintf(f, \"value.len: %llu\\n\", (unsigned long long)qop_param->value.len);\n\n  /* If the string pointer is non-NULL, dump up to a bounded number of bytes\n     from the buffer using the provided length. Do NOT assume NUL termination. */\n  if (NULL != qop_param->value.str)\n  {\n    const size_t max_dump = 256; /* avoid huge writes */\n    size_t to_dump = (size_t)qop_param->value.len;\n    if (to_dump > max_dump)\n      to_dump = max_dump;\n\n    /* Print as a hex sequence so non-printable bytes are visible */\n    fprintf(f, \"value.bytes (hex, up to %zu bytes):\", to_dump);\n    for (size_t i = 0; i < to_dump; ++i)\n      fprintf(f, \" %02x\", (unsigned char)qop_param->value.str[i]);\n    fprintf(f, \"\\n\");\n\n    /* Also print a best-effort printable representation (non-printables as '.') */\n    fprintf(f, \"value.print (up to %zu bytes):\\n\\\"\");\n    for (size_t i = 0; i < to_dump; ++i)\n    {\n      unsigned char c = (unsigned char)qop_param->value.str[i];\n      if (c >= 0x20 && c <= 0x7e)\n        fputc(c, f);\n      else\n        fputc('.', f);\n    }\n    fprintf(f, \"\\\"\\n\");\n  }\n\n  fprintf(f, \"---- end %s ----\\n\\n\", marker ? marker : \"(null)\");\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  /* Log entry and basic state */\n  log_qop_param_state(qop_param, \"entry\");\n\n  if (NULL == qop_param->value.str)\n  {\n    log_qop_param_state(qop_param, \"value.str is NULL => returning NONE\");\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  }\n\n  if (qop_param->quoted)\n  {\n    /* Log that we take the quoted branch and the upcoming helper checks */\n    log_qop_param_state(qop_param, \"branch: quoted - about to call MHD_str_equal_caseless_quoted_s_bin_n with MHD_TOKEN_AUTH_\");\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n    {\n      log_qop_param_state(qop_param, \"matched MHD_TOKEN_AUTH_ (quoted) => returning AUTH\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    log_qop_param_state(qop_param, \"quoted branch - about to call MHD_str_equal_caseless_quoted_s_bin_n with MHD_TOKEN_AUTH_INT_\");\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n    {\n      log_qop_param_state(qop_param, \"matched MHD_TOKEN_AUTH_INT_ (quoted) => returning AUTH_INT\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  else\n  {\n    /* Non-quoted branch */\n    log_qop_param_state(qop_param, \"branch: non-quoted - about to call MHD_str_equal_caseless_s_bin_n_ with MHD_TOKEN_AUTH_\");\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n    {\n      log_qop_param_state(qop_param, \"matched MHD_TOKEN_AUTH_ (non-quoted) => returning AUTH\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    log_qop_param_state(qop_param, \"non-quoted branch - about to call MHD_str_equal_caseless_s_bin_n_ with MHD_TOKEN_AUTH_INT_\");\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n    {\n      log_qop_param_state(qop_param, \"matched MHD_TOKEN_AUTH_INT_ (non-quoted) => returning AUTH_INT\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n\n  /* No known QOP has been detected */\n  log_qop_param_state(qop_param, \"no known QOP detected => returning INVALID\");\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n"
}