{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct MHD_RqDAuthParam declares value.str as a non-const pointer (e.g. char *str), then the pointer is not pointing to a const-qualified type even though the function only reads it. In that case value.str should be declared const char * (or equivalent) and the current use (checking for NULL and passing to read-only functions) violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_qop code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2433.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_qop as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_qop:\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_qop code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function: append logs to /tmp/logs/2433.txt.  */\nstatic void\nmhd_log_rq_dauth_qop_probe(const struct MHD_RqDAuthParam *const qop_param,\n                            const char *event,\n                            int cmp_result)\n{\n  FILE *f = fopen(\"/tmp/logs/2433.txt\", \"a\");\n  if (f == NULL)\n    return; /* best-effort logging only */\n\n  /* Log event, pointer value, quoted flag, length and last compare result. */\n  (void)fprintf(f, \"EVENT=%s, value.str=%p, quoted=%d, value.len=%zu, cmp=%d\\n\",\n                event,\n                (void *)(qop_param ? qop_param->value.str : NULL),\n                (int)(qop_param ? qop_param->quoted : 0),\n                (qop_param ? qop_param->value.len : (size_t)0),\n                cmp_result);\n  (void)fclose(f);\n}\n\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  /* Log entry state */\n  if (qop_param != NULL)\n    mhd_log_rq_dauth_qop_probe(qop_param, \"enter\", -1);\n  else\n    mhd_log_rq_dauth_qop_probe(qop_param, \"enter_null_param\", -1);\n\n  if (NULL == qop_param->value.str)\n  {\n    mhd_log_rq_dauth_qop_probe(qop_param, \"value_str_null\", -1);\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  }\n\n  if (qop_param->quoted)\n  {\n    int cmp1 = MHD_str_equal_caseless_quoted_s_bin_n(qop_param->value.str,\n                                                     qop_param->value.len,\n                                                     MHD_TOKEN_AUTH_);\n    mhd_log_rq_dauth_qop_probe(qop_param, \"quoted_cmp_auth\", cmp1);\n    if (cmp1)\n    {\n      mhd_log_rq_dauth_qop_probe(qop_param, \"return_auth\", cmp1);\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    int cmp2 = MHD_str_equal_caseless_quoted_s_bin_n(qop_param->value.str,\n                                                     qop_param->value.len,\n                                                     MHD_TOKEN_AUTH_INT_);\n    mhd_log_rq_dauth_qop_probe(qop_param, \"quoted_cmp_auth_int\", cmp2);\n    if (cmp2)\n    {\n      mhd_log_rq_dauth_qop_probe(qop_param, \"return_auth_int\", cmp2);\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  else\n  {\n    int cmp1 = MHD_str_equal_caseless_s_bin_n_(MHD_TOKEN_AUTH_,\n                                               qop_param->value.str,\n                                               qop_param->value.len);\n    mhd_log_rq_dauth_qop_probe(qop_param, \"unquoted_cmp_auth\", cmp1);\n    if (cmp1)\n    {\n      mhd_log_rq_dauth_qop_probe(qop_param, \"return_auth\", cmp1);\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    int cmp2 = MHD_str_equal_caseless_s_bin_n_(MHD_TOKEN_AUTH_INT_,\n                                               qop_param->value.str,\n                                               qop_param->value.len);\n    mhd_log_rq_dauth_qop_probe(qop_param, \"unquoted_cmp_auth_int\", cmp2);\n    if (cmp2)\n    {\n      mhd_log_rq_dauth_qop_probe(qop_param, \"return_auth_int\", cmp2);\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n\n  /* No know QOP has been detected */\n  mhd_log_rq_dauth_qop_probe(qop_param, \"return_invalid\", -1);\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n"
}