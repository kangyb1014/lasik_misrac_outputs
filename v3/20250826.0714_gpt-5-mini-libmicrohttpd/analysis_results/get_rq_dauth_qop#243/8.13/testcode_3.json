{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member qop_param->value.str is declared as a non-const pointer type (e.g. char *value.str) while it is only read and passed to comparison functions, then Rule 8.13 is violated because the pointer should point to a const-qualified type (const char *) whenever possible. In this fragment the code treats the string as read\u2011only (checks for NULL and passes it to caseless comparison functions), so the struct member ought to be declared const char *; keeping it as char * would breach MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_qop code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2433.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_qop as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_qop:\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_qop code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable trace entries to /tmp/logs/2433.txt */\nstatic void dauth_logf(const struct MHD_RqDAuthParam *const qop_param, const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2433.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging; do not alter control flow on failure */\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  /* append common state info about the qop_param */\n  fprintf(f, \"; qop_param=%p\", (const void *)qop_param);\n  if (qop_param)\n  {\n    fprintf(f, \", value.str=%p\", (const void *)qop_param->value.str);\n    fprintf(f, \", value.len=%zu\", (size_t)qop_param->value.len);\n    fprintf(f, \", quoted=%d\", (int)qop_param->quoted);\n    if (qop_param->value.str)\n    {\n      /* print up to len bytes of the value (may not be null-terminated) */\n      fprintf(f, \", value.content='%.*s'\", (int)qop_param->value.len, qop_param->value.str);\n    }\n    else\n    {\n      fprintf(f, \", value.content=<NULL>\");\n    }\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  /* Log entry and initial state */\n  dauth_logf(qop_param, \"ENTER get_rq_dauth_qop\");\n\n  if (NULL == qop_param->value.str)\n  {\n    dauth_logf(qop_param, \"value.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE\");\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  }\n\n  if (qop_param->quoted)\n  {\n    dauth_logf(qop_param, \"branch: quoted == true; performing quoted caseless comparisons\");\n\n    int cmp_auth = MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                                         qop_param->value.len,\n                                                         MHD_TOKEN_AUTH_);\n    dauth_logf(qop_param, \"compared to MHD_TOKEN_AUTH_ (quoted); result=%d\", cmp_auth);\n    if (cmp_auth)\n    {\n      dauth_logf(qop_param, \"match -> returning MHD_DIGEST_AUTH_QOP_AUTH\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    int cmp_auth_int = MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                                               qop_param->value.len,\n                                                               MHD_TOKEN_AUTH_INT_);\n    dauth_logf(qop_param, \"compared to MHD_TOKEN_AUTH_INT_ (quoted); result=%d\", cmp_auth_int);\n    if (cmp_auth_int)\n    {\n      dauth_logf(qop_param, \"match -> returning MHD_DIGEST_AUTH_QOP_AUTH_INT\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  else\n  {\n    dauth_logf(qop_param, \"branch: quoted == false; performing non-quoted caseless comparisons\");\n\n    int cmp_auth = MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_,\n                                                    qop_param->value.str,\n                                                    qop_param->value.len);\n    dauth_logf(qop_param, \"compared to MHD_TOKEN_AUTH_ (non-quoted); result=%d\", cmp_auth);\n    if (cmp_auth)\n    {\n      dauth_logf(qop_param, \"match -> returning MHD_DIGEST_AUTH_QOP_AUTH\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    int cmp_auth_int = MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_,\n                                                        qop_param->value.str,\n                                                        qop_param->value.len);\n    dauth_logf(qop_param, \"compared to MHD_TOKEN_AUTH_INT_ (non-quoted); result=%d\", cmp_auth_int);\n    if (cmp_auth_int)\n    {\n      dauth_logf(qop_param, \"match -> returning MHD_DIGEST_AUTH_QOP_AUTH_INT\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n\n  /* No known QOP has been detected */\n  dauth_logf(qop_param, \"no known QOP detected -> returning MHD_DIGEST_AUTH_QOP_INVALID\");\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n"
}