{
  "user_message": "An agent A claimed that the following get_rq_dauth_qop code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_qop.\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the member qop_param->value.str is declared as a non-const pointer type (e.g. char *value.str) while it is only read and passed to comparison functions, then Rule 8.13 is violated because the pointer should point to a const-qualified type (const char *) whenever possible. In this fragment the code treats the string as read\u2011only (checks for NULL and passes it to caseless comparison functions), so the struct member ought to be declared const char *; keeping it as char * would breach MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dauth_qop; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE; qop_param=0x560b6b010428, value.str=(nil), value.len=0, quoted=0, value.content=<NULL>\nENTER get_rq_dau\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A report is correct under the stated scenario. The function parameter is declared as const struct MHD_RqDAuthParam *const qop_param (the pointer to the struct and the struct are const), but that does not make the pointed-to characters const: if the member in the struct is declared as char *value.str, then for a const struct object the expression qop_param->value.str has type char * const (the pointer itself is const) \u2014 it still points to mutable characters (not const char). MISRA C:2023 Rule 8.13 requires pointer types to point to const-qualified types whenever possible. If value.str is only read (as in this function) and never modified, it should be declared as const char * to satisfy Rule 8.13. (If there is a reason the member must be non-const \u2014 e.g. API compatibility or it is modified elsewhere \u2014 that should be documented and treated as a justified deviation.)"
}