{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_qop:\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (NULL == qop_param->value.str)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "If struct MHD_RqDAuthParam declares value.str as a non-const pointer (e.g. char *str), then the pointer is not pointing to a const-qualified type even though the function only reads it. In that case value.str should be declared const char * (or equivalent) and the current use (checking for NULL and passing to read-only functions) violates MISRA C 2023 Rule 8.13."
}