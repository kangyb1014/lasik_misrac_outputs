{
  "user_message": "An agent A claimed that the following unescape_wrapper code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of unescape_wrapper.\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MHD_Connection *connection' (and/or its member 'daemon' pointer) is used only for reading (connection->daemon->client_discipline) so it could and should be declared to point to a const-qualified type (e.g. 'const struct MHD_Connection *connection' or 'const struct daemon *daemon') rather than a non-const pointer. As written, the non-const pointer is unnecessary and thus violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-26 08:25:42 | entry | conn=0x5569a8260270 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a82604c4 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a8260270 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a82604c4 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | entry | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=0\n2025-08-26 08:25:42 | strict_path_return | conn=0x5569a82688d0 daemon=0x5569a825d8d0 client_discipline=0 val=0x5569a8260274 val_str=\"/a\" broken=0 res=2\n2025-08-26 08:25:42 | \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct in this context. MISRA C 2023 Rule 8.13 is a guidance to prefer const-qualified pointer targets when that can be done safely. While the code only reads connection->daemon->client_discipline inside unescape_wrapper, the function appears to be a library callback that must match an externally defined prototype (the typical libmicrohttpd callback signature uses 'struct MHD_Connection *connection'). Changing the parameter to 'const struct MHD_Connection *' would alter the function type and likely break compatibility with the API that calls this callback. Also, 'val' must remain non-const because the decode functions modify it in place. Therefore the pointer cannot be safely changed to point to a const-qualified type in this implementation without breaking the required interface; that situation is an acceptable reason not to apply the const qualification and does not constitute a MISRA 8.13 violation here."
}