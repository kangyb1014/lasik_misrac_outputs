{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MHD_Connection *connection' (and/or its member 'daemon' pointer) is used only for reading (connection->daemon->client_discipline) so it could and should be declared to point to a const-qualified type (e.g. 'const struct MHD_Connection *connection' or 'const struct daemon *daemon') rather than a non-const pointer. As written, the non-const pointer is unnecessary and thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified unescape_wrapper code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of unescape_wrapper as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of unescape_wrapper:\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n</target_code>\nPlease provide the modified unescape_wrapper code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <time.h>\n\n/* Probe logging helper\n * Appends human-readable logs about control flow and key state into\n * /tmp/logs/1273.txt so other agents can reproduce the scenario.\n * This helper preserves the original logic and only observes state.\n */\nstatic void\nlog_unescape_probe (const char *event,\n                    struct MHD_Connection *connection,\n                    char *val,\n                    int client_discipline,\n                    bool broken,\n                    size_t res)\n{\n  FILE *f = fopen(\"/tmp/logs/1273.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* If logging cannot be opened, do not affect program logic. */\n    return;\n  }\n\n  time_t t = time(NULL);\n  char timestr[32] = \"\";\n  if (t != (time_t)(-1))\n  {\n    struct tm *tm = localtime(&t);\n    if (tm != NULL)\n    {\n      strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm);\n    }\n  }\n\n  /* Print key pointers and values observed. Accesses mirror those in\n   * unescape_wrapper so they represent the same read-only usage that\n   * triggers the reported MISRA concern.\n   */\n  fprintf (f,\n           \"%s | %s | conn=%p daemon=%p client_discipline=%d val=%p val_str=\\\"%s\\\" broken=%d res=%zu\\n\",\n           timestr[0] ? timestr : \"(no-time)\",\n           event,\n           (void *) connection,\n           (void *) (connection ? connection->daemon : NULL),\n           client_discipline,\n           (void *) val,\n           (val != NULL) ? val : \"(null)\",\n           broken ? 1 : 0,\n           res);\n\n  fclose (f);\n}\n\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* Capture the observed client discipline value for logging. This mirrors\n   * the original read-only usage (connection->daemon->client_discipline).\n   * Do not change any const-qualification or logic here; we merely log.\n   */\n  int client_discipline = connection->daemon->client_discipline;\n  log_unescape_probe (\"entry\", connection, val, client_discipline, false, 0);\n\n  /* TODO: add individual parameter */\n  if (0 <= client_discipline)\n  {\n    /* Call the strict decoder and log the result before returning. */\n    res = MHD_str_pct_decode_in_place_strict_ (val);\n    log_unescape_probe (\"strict_path_return\", connection, val, client_discipline, false, res);\n    return res;\n  }\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n  log_unescape_probe (\"lenient_after_decode\", connection, val, client_discipline, broken, res);\n\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n    /* Log that the diagnostic message path was taken. */\n    log_unescape_probe (\"lenient_broken_logged\", connection, val, client_discipline, broken, res);\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n"
}