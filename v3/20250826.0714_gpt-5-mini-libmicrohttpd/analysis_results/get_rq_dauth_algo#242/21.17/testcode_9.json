{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_str_equal_caseless_s_bin_n_ internally performs a raw n-byte comparison such as memcmp(_MHD_SHA256_TOKEN, algo_param->value.str, algo_param->value.len) (i.e. uses the passed length directly), then when algo_param->value.len is greater than the storage size of the string literal _MHD_SHA256_TOKEN (strlen(_MHD_SHA256_TOKEN) + 1) the call will read past the end of the token object and therefore violate MISRA C 2023 Rule 21.17. (If, instead, the helper safely bounds the comparison by the token length or otherwise ensures no reads past either object, no violation would occur.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2429.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper: append a single line with relevant diagnostic info. */\nstatic void MHD_probe_log(const char *label,\n                          const struct MHD_RqDAuthParam *const algo_param,\n                          const char *token_name,\n                          const char *token_literal,\n                          size_t token_strlen,\n                          size_t token_storage,\n                          size_t value_len,\n                          int match)\n{\n  FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f,\n          \"%s: algo_param=%p, value.str=%p, value.len=%zu, token=%s, token_strlen=%zu, token_storage=%zu, match=%d\\n\",\n          label,\n          (const void *)algo_param,\n          (const void *)(algo_param ? algo_param->value.str : NULL),\n          value_len,\n          token_name ? token_name : token_literal,\n          token_strlen,\n          token_storage,\n          match);\n\n  /* If the provided value length exceeds the token's storage size, log a warning\n     that can help reproduce any out-of-bounds read if the callee uses the\n     passed length unbounded (e.g. a raw memcmp with the passed length). */\n  if (value_len > token_storage)\n  {\n    fprintf(f,\n            \"WARNING: value.len (%zu) > storage size of token %s (%zu). Potential out-of-bounds read if callee uses the passed length directly.\\n\",\n            value_len,\n            token_name ? token_name : token_literal,\n            token_storage);\n  }\n\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Preserve original early null check */\n  if (NULL == algo_param->value.str)\n  {\n    MHD_probe_log(\"ENTRY-null-value.str\", algo_param, \"(null)\", NULL, 0U, 0U, 0U, 0);\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  /* Log entry state */\n  {\n    size_t vlen = algo_param->value.len;\n    FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"get_rq_dauth_algo: entered, algo_param=%p, value.str=%p, value.len=%zu, quoted=%d\\n\",\n              (const void *)algo_param,\n              (const void *)algo_param->value.str,\n              vlen,\n              (int)algo_param->quoted);\n      fclose(f);\n    }\n  }\n\n  if (algo_param->quoted)\n  {\n    /* Quoted comparisons: instrument each check, preserving behavior. */\n    {\n      const size_t token_strlen = strlen(_MHD_MD5_TOKEN);\n      const size_t token_storage = token_strlen + 1U;\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                        algo_param->value.len,\n                                                        _MHD_MD5_TOKEN);\n      MHD_probe_log(\"quoted-check-md5\",\n                    algo_param,\n                    \"_MHD_MD5_TOKEN\",\n                    _MHD_MD5_TOKEN,\n                    token_strlen,\n                    token_storage,\n                    algo_param->value.len,\n                    match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n\n    {\n      const size_t token_strlen = strlen(_MHD_SHA256_TOKEN);\n      const size_t token_storage = token_strlen + 1U;\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                        algo_param->value.len,\n                                                        _MHD_SHA256_TOKEN);\n      MHD_probe_log(\"quoted-check-sha256\",\n                    algo_param,\n                    \"_MHD_SHA256_TOKEN\",\n                    _MHD_SHA256_TOKEN,\n                    token_strlen,\n                    token_storage,\n                    algo_param->value.len,\n                    match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n\n    {\n      const size_t token_strlen = strlen(_MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n      const size_t token_storage = token_strlen + 1U;\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                        algo_param->value.len,\n                                                        _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n      MHD_probe_log(\"quoted-check-md5-sess\",\n                    algo_param,\n                    \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\",\n                    _MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                    token_strlen,\n                    token_storage,\n                    algo_param->value.len,\n                    match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n\n    {\n      const size_t token_strlen = strlen(_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN);\n      const size_t token_storage = token_strlen + 1U;\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                        algo_param->value.len,\n                                                        _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN);\n      MHD_probe_log(\"quoted-check-sha512-256-sess\",\n                    algo_param,\n                    \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\",\n                    _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                    token_strlen,\n                    token_storage,\n                    algo_param->value.len,\n                    match);\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    }\n\n    {\n      const size_t token_strlen = strlen(_MHD_SHA256_TOKEN _MHD_SESS_TOKEN);\n      const size_t token_storage = token_strlen + 1U;\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                        algo_param->value.len,\n                                                        _MHD_SHA256_TOKEN _MHD_SESS_TOKEN);\n      MHD_probe_log(\"quoted-check-sha256-sess\",\n                    algo_param,\n                    \"_MHD_SHA256_TOKEN _MHD_SESS_TOKEN\",\n                    _MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                    token_strlen,\n                    token_storage,\n                    algo_param->value.len,\n                    match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n\n    {\n      const size_t token_strlen = strlen(_MHD_SHA512_256_TOKEN);\n      const size_t token_storage = token_strlen + 1U;\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                        algo_param->value.len,\n                                                        _MHD_SHA512_256_TOKEN);\n      MHD_probe_log(\"quoted-check-sha512-256\",\n                    algo_param,\n                    \"_MHD_SHA512_256_TOKEN\",\n                    _MHD_SHA512_256_TOKEN,\n                    token_strlen,\n                    token_storage,\n                    algo_param->value.len,\n                    match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n\n    /* No known algorithm has been detected */\n    MHD_probe_log(\"quoted-no-match\", algo_param, \"(none)\", NULL, 0U, 0U, algo_param->value.len, 0);\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n\n  /* The algorithm value is not quoted */\n  {\n    const size_t token_strlen = strlen(_MHD_MD5_TOKEN);\n    const size_t token_storage = token_strlen + 1U;\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    MHD_probe_log(\"unquoted-check-md5\",\n                  algo_param,\n                  \"_MHD_MD5_TOKEN\",\n                  _MHD_MD5_TOKEN,\n                  token_strlen,\n                  token_storage,\n                  algo_param->value.len,\n                  match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n  }\n\n  {\n    const size_t token_strlen = strlen(_MHD_SHA256_TOKEN);\n    const size_t token_storage = token_strlen + 1U;\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    MHD_probe_log(\"unquoted-check-sha256\",\n                  algo_param,\n                  \"_MHD_SHA256_TOKEN\",\n                  _MHD_SHA256_TOKEN,\n                  token_strlen,\n                  token_storage,\n                  algo_param->value.len,\n                  match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  }\n\n  {\n    const size_t token_strlen = strlen(_MHD_SHA512_256_TOKEN);\n    const size_t token_storage = token_strlen + 1U;\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    MHD_probe_log(\"unquoted-check-sha512-256\",\n                  algo_param,\n                  \"_MHD_SHA512_256_TOKEN\",\n                  _MHD_SHA512_256_TOKEN,\n                  token_strlen,\n                  token_storage,\n                  algo_param->value.len,\n                  match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n  }\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  {\n    const size_t token_strlen = strlen(_MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n    const size_t token_storage = token_strlen + 1U;\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    MHD_probe_log(\"unquoted-check-md5-sess\",\n                  algo_param,\n                  \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\",\n                  _MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                  token_strlen,\n                  token_storage,\n                  algo_param->value.len,\n                  match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  }\n\n  {\n    const size_t token_strlen = strlen(_MHD_SHA256_TOKEN _MHD_SESS_TOKEN);\n    const size_t token_storage = token_strlen + 1U;\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    MHD_probe_log(\"unquoted-check-sha256-sess\",\n                  algo_param,\n                  \"_MHD_SHA256_TOKEN _MHD_SESS_TOKEN\",\n                  _MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                  token_strlen,\n                  token_storage,\n                  algo_param->value.len,\n                  match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  }\n\n  {\n    const size_t token_strlen = strlen(_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN);\n    const size_t token_storage = token_strlen + 1U;\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    MHD_probe_log(\"unquoted-check-sha512-256-sess\",\n                  algo_param,\n                  \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\",\n                  _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                  token_strlen,\n                  token_storage,\n                  algo_param->value.len,\n                  match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n  }\n\n  /* No known algorithm has been detected */\n  MHD_probe_log(\"unquoted-no-match\", algo_param, \"(none)\", NULL, 0U, 0U, algo_param->value.len, 0);\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}