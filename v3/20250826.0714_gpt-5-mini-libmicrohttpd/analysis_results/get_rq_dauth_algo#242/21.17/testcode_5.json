{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_str_equal_caseless_s_bin_n_ performs a byte-wise comparison using the provided length (e.g. calls memcmp(literal, algo_param->value.str, algo_param->value.len)) without limiting the length to the actual length of the compile-time string literal produced by _MHD_SHA256_TOKEN _MHD_SESS_TOKEN, then when algo_param->value.len is greater than the literal length memcmp will read past the end of the literal. That would access memory beyond the bounds of the literal (and so violate MISRA C 2023 Rule 21.17).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2429.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append logs to /tmp/logs/2429.txt. */\nstatic void\nmhd_log_probe(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n    if (NULL == f)\n        return;\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void\nmhd_log_state(const char *stage,\n              const void *str_ptr,\n              size_t value_len,\n              int quoted,\n              const char *token_name,\n              const char *token_ptr,\n              size_t token_len)\n{\n    FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    fprintf(f, \"[%s] stage=%s, value.str=%p, value.len=%zu, quoted=%d, token_name=%s, token_ptr=%p, token_len=%zu\\n\",\n            \"get_rq_dauth_algo\", stage, (void *)str_ptr, value_len, quoted, token_name, (void *)token_ptr, token_len);\n    /* Also dump up to the shorter of value_len and token_len bytes as hex for quick inspection (non-invasive) */\n    if (str_ptr != NULL)\n    {\n        const unsigned char *s = (const unsigned char *)str_ptr;\n        size_t to_dump = (value_len < token_len) ? value_len : token_len;\n        fprintf(f, \"  prefix (hex, up to %zu bytes):\", to_dump);\n        for (size_t i = 0U; i < to_dump; ++i)\n            fprintf(f, \" %02x\", (unsigned)s[i]);\n        fprintf(f, \"\\n\");\n    }\n    fclose(f);\n}\n\n/* Keep original signature and logic; only add probes to log control flow and relevant state. */\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n  {\n    mhd_log_probe(\"[get_rq_dauth_algo] algo_param->value.str is NULL -> default MD5\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    /* Log state before each quoted comparison */\n    mhd_log_state(\"quoted-check-md5\", algo_param->value.str, algo_param->value.len, 1,\n                  \"_MHD_MD5_TOKEN\", _MHD_MD5_TOKEN, (size_t)sizeof(_MHD_MD5_TOKEN) - 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n    {\n      mhd_log_probe(\"[get_rq_dauth_algo] matched quoted _MHD_MD5_TOKEN -> MD5\");\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n\n    mhd_log_state(\"quoted-check-sha256\", algo_param->value.str, algo_param->value.len, 1,\n                  \"_MHD_SHA256_TOKEN\", _MHD_SHA256_TOKEN, (size_t)sizeof(_MHD_SHA256_TOKEN) - 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n    {\n      mhd_log_probe(\"[get_rq_dauth_algo] matched quoted _MHD_SHA256_TOKEN -> SHA256\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n\n    mhd_log_state(\"quoted-check-md5-sess\", algo_param->value.str, algo_param->value.len, 1,\n                  \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\", _MHD_MD5_TOKEN _MHD_SESS_TOKEN, (size_t)sizeof(_MHD_MD5_TOKEN _MHD_SESS_TOKEN) - 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n    {\n      mhd_log_probe(\"[get_rq_dauth_algo] matched quoted _MHD_MD5_TOKEN _MHD_SESS_TOKEN -> SHA512_256\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n\n    mhd_log_state(\"quoted-check-sha512-256-sess\", algo_param->value.str, algo_param->value.len, 1,\n                  \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\", _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, (size_t)sizeof(_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN) - 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      /* Log decision for unsupported mapping to MD5_SESSION */\n      mhd_log_probe(\"[get_rq_dauth_algo] matched quoted _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN -> MD5_SESSION (unsupported mapping)\");\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    mhd_log_state(\"quoted-check-sha256-sess\", algo_param->value.str, algo_param->value.len, 1,\n                  \"_MHD_SHA256_TOKEN _MHD_SESS_TOKEN\", _MHD_SHA256_TOKEN _MHD_SESS_TOKEN, (size_t)sizeof(_MHD_SHA256_TOKEN _MHD_SESS_TOKEN) - 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n    {\n      mhd_log_probe(\"[get_rq_dauth_algo] matched quoted _MHD_SHA256_TOKEN _MHD_SESS_TOKEN -> SHA256_SESSION\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n\n    mhd_log_state(\"quoted-check-sha512-256\", algo_param->value.str, algo_param->value.len, 1,\n                  \"_MHD_SHA512_256_TOKEN\", _MHD_SHA512_256_TOKEN, (size_t)sizeof(_MHD_SHA512_256_TOKEN) - 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n    {\n      mhd_log_probe(\"[get_rq_dauth_algo] matched quoted _MHD_SHA512_256_TOKEN -> SHA512_256_SESSION\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n\n    /* No known algorithm has been detected */\n    mhd_log_probe(\"[get_rq_dauth_algo] quoted branch: no known algorithm -> INVALID\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  mhd_log_state(\"unquoted-check-md5\", algo_param->value.str, algo_param->value.len, 0,\n                \"_MHD_MD5_TOKEN\", _MHD_MD5_TOKEN, (size_t)sizeof(_MHD_MD5_TOKEN) - 1);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_log_probe(\"[get_rq_dauth_algo] matched unquoted _MHD_MD5_TOKEN -> MD5\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  }\n  mhd_log_state(\"unquoted-check-sha256\", algo_param->value.str, algo_param->value.len, 0,\n                \"_MHD_SHA256_TOKEN\", _MHD_SHA256_TOKEN, (size_t)sizeof(_MHD_SHA256_TOKEN) - 1);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_log_probe(\"[get_rq_dauth_algo] matched unquoted _MHD_SHA256_TOKEN -> SHA256\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  }\n  mhd_log_state(\"unquoted-check-sha512-256\", algo_param->value.str, algo_param->value.len, 0,\n                \"_MHD_SHA512_256_TOKEN\", _MHD_SHA512_256_TOKEN, (size_t)sizeof(_MHD_SHA512_256_TOKEN) - 1);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_log_probe(\"[get_rq_dauth_algo] matched unquoted _MHD_SHA512_256_TOKEN -> SHA512_256\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n  }\n\n  /* Algorithms below are not supported by MHD for authentication */\n  mhd_log_state(\"unquoted-check-md5-sess\", algo_param->value.str, algo_param->value.len, 0,\n                \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\", _MHD_MD5_TOKEN _MHD_SESS_TOKEN, (size_t)sizeof(_MHD_MD5_TOKEN _MHD_SESS_TOKEN) - 1);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_log_probe(\"[get_rq_dauth_algo] matched unquoted _MHD_MD5_TOKEN _MHD_SESS_TOKEN -> MD5_SESSION\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  }\n  mhd_log_state(\"unquoted-check-sha256-sess\", algo_param->value.str, algo_param->value.len, 0,\n                \"_MHD_SHA256_TOKEN _MHD_SESS_TOKEN\", _MHD_SHA256_TOKEN _MHD_SESS_TOKEN, (size_t)sizeof(_MHD_SHA256_TOKEN _MHD_SESS_TOKEN) - 1);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_log_probe(\"[get_rq_dauth_algo] matched unquoted _MHD_SHA256_TOKEN _MHD_SESS_TOKEN -> SHA256_SESSION\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  }\n  mhd_log_state(\"unquoted-check-sha512-256-sess\", algo_param->value.str, algo_param->value.len, 0,\n                \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\", _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, (size_t)sizeof(_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN) - 1);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_log_probe(\"[get_rq_dauth_algo] matched unquoted _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN -> SHA512_256_SESSION\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n  }\n\n  /* No known algorithm has been detected */\n  mhd_log_probe(\"[get_rq_dauth_algo] unquoted branch: no known algorithm -> INVALID\");\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}