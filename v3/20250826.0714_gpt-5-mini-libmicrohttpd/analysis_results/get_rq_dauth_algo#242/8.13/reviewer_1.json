{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs if the struct member algo_param->value.str is declared as a non-const pointer (e.g. 'char *value.str'). In this call the string is only read (algo_param is a pointer-to-const struct and the function compares the string), so the pointer should point to a const-qualified type (const char *). Declaring value.str as 'char *' here would violate MISRA C 2023 Rule 8.13; change it to 'const char *' to fix.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\nenter get_rq_dauth_algo: algo_param=0x7ffffb6bb3c0, value.str=(nil), quoted=0, len=0\nbranch: value.str == NULL -> return MHD_DI\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s report is not provably correct based on the code shown. Rule 8.13 requires pointer types to be const-qualified where possible, but the snippet only shows use of algo_param (declared as const struct MHD_RqDAuthParam *const). Whether there is a Rule 8.13 violation depends on the declaration of the member algo_param->value.str in the definition of struct MHD_RqDAuthParam. If that member is declared as e.g. \u2018char *str\u2019 and the pointed-to characters are never modified anywhere, then the codebase would violate R8.13 and the correct fix would be to declare it \u2018const char *str\u2019. However, the function alone does not demonstrate a violation: passing a non-const char * to functions that accept const char * is permitted, and 'const struct *' does not make an inner pointer\u2019s pointee const. Therefore, without the struct definition (and knowledge whether the pointee must be modifiable elsewhere), you cannot conclude a violation from this function alone."
}