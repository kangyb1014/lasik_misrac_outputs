{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes algo_param->value.str into read-only string-comparison helpers while algo_param is declared as const struct MHD_RqDAuthParam *const. If the struct member is declared as char *value.str (i.e. pointer to non-const char), then due to the const-qualified struct the expression has type char * const (a const pointer to non-const char). The pointer still points to a non-const target even though it is only read here, so the pointer target should be const-qualified (const char *) to satisfy MISRA C 2023 Rule 8.13. If, however, value.str is already declared const char * then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <ctype.h>\n\n/* Probe helpers: write control-flow and state info to /tmp/logs/2423.txt */\nstatic void log_dauth_probe(const struct MHD_RqDAuthParam *const p, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"[%s] algo_param=%p\\n\", stage, (void *)p);\n  if (p != NULL)\n  {\n    fprintf(f, \"  quoted=%d len=%zu value.str=%p\\n\",\n            p->quoted ? 1 : 0,\n            (size_t)p->value.len,\n            (void *)p->value.str);\n\n    if (p->value.str != NULL && p->value.len > 0)\n    {\n      size_t n = p->value.len;\n      if (n > 128U)\n        n = 128U;\n      fprintf(f, \"  value.preview=\\\"\");\n      for (size_t i = 0; i < n; ++i)\n      {\n        unsigned char c = (unsigned char)p->value.str[i];\n        if (isprint(c))\n          fputc(c, f);\n        else\n          fprintf(f, \"\\\\x%02x\", c);\n      }\n      if (p->value.len > n)\n        fprintf(f, \"...(%zu)\\\"\\n\", (size_t)p->value.len);\n      else\n        fprintf(f, \"\\\"\\n\");\n    }\n  }\n\n  fclose(f);\n}\n\nstatic void log_dauth_cmp(const char *label, int result)\n{\n  FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf(f, \"  CMP %s => %d\\n\", label, result != 0 ? 1 : 0);\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Log entry and state */\n  log_dauth_probe(algo_param, \"ENTRY\");\n\n  if (NULL == algo_param->value.str)\n  {\n    log_dauth_probe(algo_param, \"NULL_VALUE_STR -> default MD5\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    log_dauth_probe(algo_param, \"QUOTED_BRANCH_ENTER\");\n\n    {\n      int r = MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_MD5_TOKEN);\n      log_dauth_cmp(\"quoted == _MHD_MD5_TOKEN\", r);\n      if (r)\n        return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n    {\n      int r = MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_SHA256_TOKEN);\n      log_dauth_cmp(\"quoted == _MHD_SHA256_TOKEN\", r);\n      if (r)\n        return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n    {\n      int r = MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n      log_dauth_cmp(\"quoted == _MHD_MD5_TOKEN _MHD_SESS_TOKEN\", r);\n      if (r)\n        return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n    {\n      int r = MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN);\n      log_dauth_cmp(\"quoted == _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\", r);\n      /* Algorithms below are not supported by MHD for authentication */\n      if (r)\n        return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    }\n    {\n      int r = MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_SHA256_TOKEN _MHD_SESS_TOKEN);\n      log_dauth_cmp(\"quoted == _MHD_SHA256_TOKEN _MHD_SESS_TOKEN\", r);\n      if (r)\n        return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n    {\n      int r = MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_SHA512_256_TOKEN);\n      log_dauth_cmp(\"quoted == _MHD_SHA512_256_TOKEN\", r);\n      if (r)\n        return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n\n    /* No known algorithm has been detected */\n    log_dauth_probe(algo_param, \"QUOTED_NO_MATCH -> INVALID\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n\n  /* The algorithm value is not quoted */\n  log_dauth_probe(algo_param, \"UNQUOTED_BRANCH_ENTER\");\n  {\n    int r = MHD_str_equal_caseless_s_bin_n_(_MHD_MD5_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    log_dauth_cmp(\"unquoted == _MHD_MD5_TOKEN\", r);\n    if (r)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n  }\n  {\n    int r = MHD_str_equal_caseless_s_bin_n_(_MHD_SHA256_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    log_dauth_cmp(\"unquoted == _MHD_SHA256_TOKEN\", r);\n    if (r)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  }\n  {\n    int r = MHD_str_equal_caseless_s_bin_n_(_MHD_SHA512_256_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    log_dauth_cmp(\"unquoted == _MHD_SHA512_256_TOKEN\", r);\n    if (r)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n  }\n\n  /* Algorithms below are not supported by MHD for authentication */\n  {\n    int r = MHD_str_equal_caseless_s_bin_n_(_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    log_dauth_cmp(\"unquoted == _MHD_MD5_TOKEN _MHD_SESS_TOKEN\", r);\n    if (r)\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  }\n  {\n    int r = MHD_str_equal_caseless_s_bin_n_(_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    log_dauth_cmp(\"unquoted == _MHD_SHA256_TOKEN _MHD_SESS_TOKEN\", r);\n    if (r)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  }\n  {\n    int r = MHD_str_equal_caseless_s_bin_n_(_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    log_dauth_cmp(\"unquoted == _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\", r);\n    if (r)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n  }\n\n  /* No known algorithm has been detected */\n  log_dauth_probe(algo_param, \"UNQUOTED_NO_MATCH -> INVALID\");\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}