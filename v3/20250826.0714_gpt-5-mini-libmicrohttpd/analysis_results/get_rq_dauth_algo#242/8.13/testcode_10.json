{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression algo_param->value.str is used as a read-only string, but if the struct member 'value.str' is declared as a plain 'char *' (non-const) then the code violates Rule 8.13. The function parameter is a pointer to const struct, but that only makes the member pointer itself const (char * const), not the pointee. The pointer should instead be declared to point to a const-qualified type (e.g. 'const char *str') so read-only string data is pointed-to as const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "static enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  FILE *log = fopen(\"/tmp/logs/2423.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER get_rq_dauth_algo: algo_param=%p\\n\", (void *)algo_param);\n  }\n\n  if (NULL == algo_param->value.str)\n  {\n    if (log)\n    {\n      fprintf(log, \"DECISION: algo_param->value.str == NULL -> return MD5 (default)\\n\");\n      fclose(log);\n    }\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (log)\n  {\n    unsigned long len = (unsigned long) algo_param->value.len;\n    fprintf(log, \"STATE: value.str=%p, value.len=%lu, quoted=%d\\n\",\n            (void *)algo_param->value.str, len, algo_param->quoted ? 1 : 0);\n    /* Dump up to first 64 bytes in hex (safe for possibly non-NUL-terminated data) */\n    unsigned long dump = (len > 64u) ? 64u : len;\n    fprintf(log, \"STATE: value.str (hex, first %lu bytes):\", dump);\n    for (unsigned long i = 0u; i < dump; ++i)\n      fprintf(log, \" %02x\", (unsigned char) algo_param->value.str[i]);\n    fprintf(log, \"\\n\");\n  }\n\n  if (algo_param->quoted)\n  {\n    int match;\n\n    match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_MD5_TOKEN);\n    if (log)\n      fprintf(log, \"CHECK: quoted MD5 -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: quoted MD5 matched -> return MD5\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n\n    match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_SHA256_TOKEN);\n    if (log)\n      fprintf(log, \"CHECK: quoted SHA256 -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: quoted SHA256 matched -> return SHA256\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n\n    match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n    if (log)\n      fprintf(log, \"CHECK: quoted MD5-sess -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: quoted MD5-sess matched -> return SHA512_256\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n\n    match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN);\n    if (log)\n      fprintf(log, \"CHECK: quoted SHA512_256-sess -> %d\\n\", match);\n    if (match)\n    {\n      /* Algorithms below are not supported by MHD for authentication */\n      if (log) {\n        fprintf(log, \"DECISION: quoted SHA512_256-sess matched -> return MD5_SESSION (not supported)\\n\");\n        fclose(log);\n      }\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    }\n\n    match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_SHA256_TOKEN _MHD_SESS_TOKEN);\n    if (log)\n      fprintf(log, \"CHECK: quoted SHA256-sess -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: quoted SHA256-sess matched -> return SHA256_SESSION\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n\n    match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                   algo_param->value.len,\n                                                   _MHD_SHA512_256_TOKEN);\n    if (log)\n      fprintf(log, \"CHECK: quoted SHA512_256 -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: quoted SHA512_256 matched -> return SHA512_256_SESSION\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n\n    /* No known algorithm has been detected */\n    if (log)\n    {\n      fprintf(log, \"DECISION: quoted value -> no known algorithm -> return INVALID\\n\");\n      fclose(log);\n    }\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n\n  /* The algorithm value is not quoted */\n  {\n    int match;\n\n    match = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN,\n                                             algo_param->value.str,\n                                             algo_param->value.len);\n    if (log)\n      fprintf(log, \"CHECK: non-quoted MD5 -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: non-quoted MD5 matched -> return MD5\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n\n    match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN,\n                                             algo_param->value.str,\n                                             algo_param->value.len);\n    if (log)\n      fprintf(log, \"CHECK: non-quoted SHA256 -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: non-quoted SHA256 matched -> return SHA256\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n\n    match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN,\n                                             algo_param->value.str,\n                                             algo_param->value.len);\n    if (log)\n      fprintf(log, \"CHECK: non-quoted SHA512_256 -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: non-quoted SHA512_256 matched -> return SHA512_256\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n\n    /* Algorithms below are not supported by MHD for authentication */\n\n    match = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                             algo_param->value.str,\n                                             algo_param->value.len);\n    if (log)\n      fprintf(log, \"CHECK: non-quoted MD5-sess -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: non-quoted MD5-sess matched -> return MD5_SESSION\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    }\n\n    match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                             algo_param->value.str,\n                                             algo_param->value.len);\n    if (log)\n      fprintf(log, \"CHECK: non-quoted SHA256-sess -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: non-quoted SHA256-sess matched -> return SHA256_SESSION\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n\n    match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                             algo_param->value.str,\n                                             algo_param->value.len);\n    if (log)\n      fprintf(log, \"CHECK: non-quoted SHA512_256-sess -> %d\\n\", match);\n    if (match)\n    {\n      if (log) {\n        fprintf(log, \"DECISION: non-quoted SHA512_256-sess matched -> return SHA512_256_SESSION\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n  }\n\n  /* No known algorithm has been detected */\n  if (log)\n  {\n    fprintf(log, \"DECISION: non-quoted value -> no known algorithm -> return INVALID\\n\");\n    fclose(log);\n  }\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}