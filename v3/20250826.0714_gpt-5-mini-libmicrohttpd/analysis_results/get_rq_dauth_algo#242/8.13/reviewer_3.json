{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the member algo_param->value.str is declared as a plain char * (i.e. not pointing to a const-qualified type), then Rule 8.13 is violated \u2014 the pointer should be declared as const char * (or otherwise const-qualified) because it is used only for read access (here compared to NULL and subsequently read). If, however, value.str is already declared as const char * (and the struct type is correctly const-qualified as in the parameter declaration), there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.str pointer=(nil), len=0, content=''\n[2025-08-26 10:01:29] branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\n[2025-08-26 10:01:29] ENTER get_rq_dauth_algo: algo_param=0x7ffcdfcf0420\n[2025-08-26 10:01:29] algo_param->quoted=0\n[2025-08-26 10:01:29] algo_param->value.len=0\nvalue.st\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 8.13 says a pointer type should be const\u2011qualified when the pointed\u2011to object is not modified. In the shown function get_rq_dauth_algo the parameter is const struct MHD_RqDAuthParam *const, so the function only reads the member algo_param->value.str. If the struct member value.str is declared as plain char * (i.e. points to non\u2011const char), then that declaration is not const\u2011correct given the usage here and would be a violation of Rule 8.13 (the pointer type should be const char * where possible). Note however that the violation, if present, is in the declaration of the struct member (value.str), not in the get_rq_dauth_algo function body itself \u2014 the function already treats the struct as const. If value.str is already declared const char * (and the struct is accessed through a pointer-to-const as shown), there is no violation. In short: Agent A\u2019s report is correct conditionally \u2014 true when value.str is declared non\u2011const; false if value.str is already const-qualified."
}