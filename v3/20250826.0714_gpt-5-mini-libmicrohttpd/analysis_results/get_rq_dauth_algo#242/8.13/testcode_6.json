{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the member algo_param->value.str is declared as a pointer to non-const char (e.g. char *value.str) while it is only used for read-only comparisons. According to MISRA C 2023 Rule 8.13, such input string pointers should be declared as pointing to const-qualified type (const char *). In this fragment the code reads from algo_param->value.str (and from string-literal tokens) but does not require modification, so declaring the member as non-const violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "static void\nprobe_log_rq_dauth(const struct MHD_RqDAuthParam *const algo_param,\n                    const char *event,\n                    const char *extra)\n{\n  FILE *fp;\n\n  fp = fopen(\"/tmp/logs/2423.txt\", \"a\");\n  if (NULL == fp)\n    return;\n\n  fprintf(fp, \"EVENT: %s\\n\", event ? event : \"(null)\");\n  fprintf(fp, \"  algo_param=%p\\n\", (const void *)algo_param);\n  if (NULL == algo_param)\n  {\n    fprintf(fp, \"  algo_param is NULL\\n\\n\");\n    fclose(fp);\n    return;\n  }\n\n  fprintf(fp, \"  value.str=%p\\n\", (const void *)algo_param->value.str);\n  fprintf(fp, \"  value.len=%zu\\n\", algo_param->value.len);\n  fprintf(fp, \"  quoted=%d\\n\", algo_param->quoted ? 1 : 0);\n\n  if (NULL != algo_param->value.str && algo_param->value.len > 0)\n  {\n    /* Print a visual representation (up to 200 chars) of the value buffer. */\n    size_t n = algo_param->value.len;\n    if (n > 200u)\n      n = 200u;\n    fprintf(fp, \"  value_preview_len=%zu\\n  value_preview=\\\"\");\n    /* Use a precision specifier to avoid relying on null termination. */\n    fprintf(fp, \"%.*s\", (int)n, algo_param->value.str);\n    if (algo_param->value.len > n)\n      fprintf(fp, \"...\\\"\\n\");\n    else\n      fprintf(fp, \"\\\"\\n\");\n  }\n\n  if (extra)\n    fprintf(fp, \"  extra=%s\\n\", extra);\n\n  fprintf(fp, \"\\n\");\n  fclose(fp);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Log entry and state */\n  probe_log_rq_dauth(algo_param, \"enter get_rq_dauth_algo\", NULL);\n\n  if (NULL == algo_param->value.str)\n  {\n    probe_log_rq_dauth(algo_param, \"value.str is NULL -> default MD5\", NULL);\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    probe_log_rq_dauth(algo_param, \"branch quoted == true\", NULL);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n    {\n      probe_log_rq_dauth(algo_param, \"matched _MHD_MD5_TOKEN (quoted)\", _MHD_MD5_TOKEN);\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n    {\n      probe_log_rq_dauth(algo_param, \"matched _MHD_SHA256_TOKEN (quoted)\", _MHD_SHA256_TOKEN);\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n    {\n      probe_log_rq_dauth(algo_param, \"matched MD5+SESS (quoted)\", _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      {\n        probe_log_rq_dauth(algo_param, \"matched SHA512_256+SESS (quoted) -> MD5_SESSION (unsupported comment path)\", _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN);\n        return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n      }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n    {\n      probe_log_rq_dauth(algo_param, \"matched SHA256+SESS (quoted)\", _MHD_SHA256_TOKEN _MHD_SESS_TOKEN);\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n    {\n      probe_log_rq_dauth(algo_param, \"matched _MHD_SHA512_256_TOKEN (quoted)\", _MHD_SHA512_256_TOKEN);\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n\n    /* No known algorithm has been detected */\n    probe_log_rq_dauth(algo_param, \"no known algorithm detected (quoted)\", NULL);\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  probe_log_rq_dauth(algo_param, \"branch quoted == false\", NULL);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    probe_log_rq_dauth(algo_param, \"matched _MHD_MD5_TOKEN (unquoted)\", _MHD_MD5_TOKEN);\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    probe_log_rq_dauth(algo_param, \"matched _MHD_SHA256_TOKEN (unquoted)\", _MHD_SHA256_TOKEN);\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    probe_log_rq_dauth(algo_param, \"matched _MHD_SHA512_256_TOKEN (unquoted)\", _MHD_SHA512_256_TOKEN);\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n  }\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    probe_log_rq_dauth(algo_param, \"matched MD5+SESS (unquoted)\", _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    probe_log_rq_dauth(algo_param, \"matched SHA256+SESS (unquoted)\", _MHD_SHA256_TOKEN _MHD_SESS_TOKEN);\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    probe_log_rq_dauth(algo_param, \"matched SHA512_256+SESS (unquoted)\", _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN);\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n  }\n\n  /* No known algorithm has been detected */\n  probe_log_rq_dauth(algo_param, \"no known algorithm detected (unquoted)\", NULL);\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}