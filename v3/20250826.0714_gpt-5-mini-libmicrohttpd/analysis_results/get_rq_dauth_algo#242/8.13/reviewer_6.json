{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs if the member algo_param->value.str is declared as a pointer to non-const char (e.g. char *value.str) while it is only used for read-only comparisons. According to MISRA C 2023 Rule 8.13, such input string pointers should be declared as pointing to const-qualified type (const char *). In this fragment the code reads from algo_param->value.str (and from string-literal tokens) but does not require modification, so declaring the member as non-const violates Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: enter get_rq_dauth_algo\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: value.str is NULL -> default MD5\n  algo_param=0x7fff04ecf3f0\n  value.str=(nil)\n  value.len=0\n  quoted=0\n\nEVENT: ente\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct under the condition stated in the scenario. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible. In this function the code only reads from algo_param->value.str (it never modifies the pointed-to characters), so if the MHD_RqDAuthParam member value.str is declared as char * (non-const) this is a missed const qualification and therefore a Rule 8.13 violation. \n\nNotes and remediation:\n- If value.str is already declared as const char * (or equivalent), there is no violation.\n- If value.str is declared as char * because some other code legitimately modifies the pointed-to characters, then the non-const declaration may be justified and there is no violation.\n- The usual fix when the pointer is only used for read-only operations is to change the declaration to const char *value.str (or otherwise const-qualify the pointer target) so that all uses are const-correct and satisfy Rule 8.13."
}