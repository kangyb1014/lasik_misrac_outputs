{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression algo_param->value.str is used as a read-only string, but if the struct member 'value.str' is declared as a plain 'char *' (non-const) then the code violates Rule 8.13. The function parameter is a pointer to const struct, but that only makes the member pointer itself const (char * const), not the pointee. The pointer should instead be declared to point to a const-qualified type (e.g. 'const char *str') so read-only string data is pointed-to as const.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param->value.str == NULL -> return MD5 (default)\nENTER get_rq_dauth_algo: algo_param=0x7fff2fd9b5e0\nDECISION: algo_param\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's observation is essentially correct in the scenario described. MISRA C:2023 Rule 8.13 recommends that pointers point to const-qualified types when the pointed-to object is not intended to be modified. In the snippet the function treats algo_param->value.str as read\u2011only (only reads and passes it to equality functions). The function parameter is declared as const struct MHD_RqDAuthParam *const, which prevents modification of the struct or changing the struct pointer but does not make the member pointer\u2019s pointee const. If the struct member value.str is declared as plain char * (non-const), then the code is using a non-const pointer to refer to read\u2011only data and therefore (given the scenario) violates Rule 8.13. That said, the code snippet alone does not contain the struct definition, so a definite violation can only be confirmed after inspecting the declaration of value.str. Recommended fixes: declare the member as const char * (if it should be read\u2011only), or change the struct API to reflect mutability requirements (or create a local const char * alias to the data if appropriate)."
}