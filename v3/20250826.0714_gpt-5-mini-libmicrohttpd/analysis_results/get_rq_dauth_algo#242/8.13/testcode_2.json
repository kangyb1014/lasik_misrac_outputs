{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes algo_param->value.str (a pointer to the buffer) to read-only string-comparison functions while the member is not const-qualified. The parameter algo_param is a pointer to a const struct, but the inner member value.str appears to be declared as a non-const pointer (e.g. char *). Since the string is only read, MISRA C 2023 Rule 8.13 requires the pointer to point to a const-qualified type (const char *). Thus the fragment violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logger: append textual traces to /tmp/logs/2423.txt */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Log entry and state */\n  mhd_log_probe(\"get_rq_dauth_algo: entry algo_param=%p value.str=%p value.len=%zu quoted=%d\",\n                (const void *)algo_param,\n                (const void *)(algo_param ? algo_param->value.str : NULL),\n                (size_t)(algo_param ? algo_param->value.len : 0u),\n                (int)(algo_param ? algo_param->quoted : 0));\n\n  if (NULL == algo_param->value.str)\n  {\n    mhd_log_probe(\"get_rq_dauth_algo: value.str is NULL -> return MD5 (default)\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    mhd_log_probe(\"get_rq_dauth_algo: quoted == true\");\n    int cmp = 0;\n\n    cmp = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_MD5_TOKEN);\n    mhd_log_probe(\"cmp quoted MD5 -> %d\", cmp);\n    if (cmp)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n    cmp = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_SHA256_TOKEN);\n    mhd_log_probe(\"cmp quoted SHA256 -> %d\", cmp);\n    if (cmp)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n    cmp = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n    mhd_log_probe(\"cmp quoted MD5 + sess -> %d\", cmp);\n    if (cmp)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n    cmp = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_SHA512_256_TOKEN\n                                                 _MHD_SESS_TOKEN);\n    mhd_log_probe(\"cmp quoted SHA512_256 + sess -> %d\", cmp);\n\n    /* Algorithms below are not supported by MHD for authentication */\n\n    if (cmp)\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n    cmp = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_SHA256_TOKEN\n                                                 _MHD_SESS_TOKEN);\n    mhd_log_probe(\"cmp quoted SHA256 + sess -> %d\", cmp);\n    if (cmp)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n\n    cmp = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_SHA512_256_TOKEN);\n    mhd_log_probe(\"cmp quoted SHA512_256 -> %d\", cmp);\n    if (cmp)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    mhd_log_probe(\"get_rq_dauth_algo: quoted branch -> no known algorithm -> INVALID\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n\n  /* The algorithm value is not quoted */\n  mhd_log_probe(\"get_rq_dauth_algo: quoted == false\");\n\n  int cmp_n = 0;\n\n  cmp_n = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n  mhd_log_probe(\"cmp unquoted MD5 -> %d\", cmp_n);\n  if (cmp_n)\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n  cmp_n = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n  mhd_log_probe(\"cmp unquoted SHA256 -> %d\", cmp_n);\n  if (cmp_n)\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n  cmp_n = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n  mhd_log_probe(\"cmp unquoted SHA512_256 -> %d\", cmp_n);\n  if (cmp_n)\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  cmp_n = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n  mhd_log_probe(\"cmp unquoted MD5 + sess -> %d\", cmp_n);\n  if (cmp_n)\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n  cmp_n = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n  mhd_log_probe(\"cmp unquoted SHA256 + sess -> %d\", cmp_n);\n  if (cmp_n)\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n\n  cmp_n = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n  mhd_log_probe(\"cmp unquoted SHA512_256 + sess -> %d\", cmp_n);\n  if (cmp_n)\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  mhd_log_probe(\"get_rq_dauth_algo: unquoted branch -> no known algorithm -> INVALID\");\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}