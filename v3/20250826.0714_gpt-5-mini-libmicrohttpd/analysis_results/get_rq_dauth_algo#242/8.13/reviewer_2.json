{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes algo_param->value.str (a pointer to the buffer) to read-only string-comparison functions while the member is not const-qualified. The parameter algo_param is a pointer to a const struct, but the inner member value.str appears to be declared as a non-const pointer (e.g. char *). Since the string is only read, MISRA C 2023 Rule 8.13 requires the pointer to point to a const-qualified type (const char *). Thus the fragment violates Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.len=0 quoted=0\nget_rq_dauth_algo: value.str is NULL -> return MD5 (default)\nget_rq_dauth_algo: entry algo_param=0x7fff38473d50 value.str=(nil) value.\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not deterministically correct based on the information given. MISRA C:2023 Rule 8.13 concerns pointer declarations: a pointer should point to a const-qualified type when the pointed-to object is not modified. The code shown only reads from algo_param->value.str and passes it to read-only string comparison functions, which suggests the pointed-at data is treated as read-only in this function. However, whether a Rule 8.13 violation actually exists depends on the declaration and uses of value.str in the type definition of struct MHD_RqDAuthParam and elsewhere in the program:\n\n- If value.str is declared as (char *) (i.e. pointer-to-non-const) but is never used to modify the pointed data anywhere in the program, then Rule 8.13 recommends changing the declaration to (const char *) (or otherwise const-qualify the pointed type). In that case the report would be correct (there is a violation).\n- If value.str is declared as const char * already, or if other code legitimately modifies the pointed data through that pointer, then there is no violation in the code shown. Note that having algo_param be const struct MHD_RqDAuthParam * means the struct object is const; the member access algo_param->value.str has type \"char * const\" if value.str was declared as \"char *\" \u2014 the pointee type itself is still non-const, so merely having a const-qualified pointer-to-struct does not by itself satisfy Rule 8.13.\n\nBecause the snippet does not include the struct definition nor the uses of value.str elsewhere, you cannot conclusively state a Rule 8.13 violation just from this function. To decide definitively, inspect the declaration of value.str and whether its pointee is ever modified; if it is never modified, change the member type to point to a const-qualified type (e.g. const char *) to comply with Rule 8.13."
}