{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member algo_param->value.str is declared as a non-const pointer (e.g. char *str) then this is a violation: the code only reads the string but the pointer type does not point to a const-qualified char. The function parameter is a const pointer to a const struct, but that does not make the pointee type of the member const. The correct form would be const char *str (or the function should accept const char *), so that read-only pointers point to const-qualified types.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: write runtime information to /tmp/logs/2423.txt */\nstatic void\nmhd_log_probe(const struct MHD_RqDAuthParam *const algo_param,\n              const char *stage,\n              const char *token_name,\n              int matched,\n              const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging only */\n\n  /* Print basic context */\n  fprintf(f, \"[get_rq_dauth_algo] stage=%s token=%s matched=%d quoted=%d ptr=%p len=%llu note=%s\\n\",\n          stage ? stage : \"(null)\",\n          token_name ? token_name : \"(none)\",\n          matched,\n          (algo_param ? (int)algo_param->quoted : -1),\n          (algo_param ? (void *)algo_param->value.str : (void *)NULL),\n          (unsigned long long)(algo_param ? (unsigned long long)algo_param->value.len : 0ULL),\n          note ? note : \"(none)\");\n\n  /* If there is a non-null string pointer, print a short hex/ASCII preview (up to 64 bytes) */\n  if (algo_param && algo_param->value.str)\n  {\n    size_t preview_len = (algo_param->value.len > 64U) ? 64U : (size_t)algo_param->value.len;\n    if (preview_len > 0U)\n    {\n      /* Print raw bytes in hex to avoid depending on NUL-termination */\n      fprintf(f, \"[get_rq_dauth_algo] preview(%zu) = \", preview_len);\n      for (size_t i = 0U; i < preview_len; ++i)\n        fprintf(f, \"%02X \", (unsigned char)algo_param->value.str[i]);\n      fprintf(f, \"\\n\");\n\n      /* Also attempt a printable ASCII preview (replace non-printable with '.') */\n      fprintf(f, \"[get_rq_dauth_algo] ascii = '\");\n      for (size_t i = 0U; i < preview_len; ++i)\n      {\n        unsigned char c = (unsigned char)algo_param->value.str[i];\n        fprintf(f, \"%c\", (c >= 0x20 && c < 0x7F) ? c : '.');\n      }\n      fprintf(f, \"'\\n\");\n    }\n  }\n\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Entry probe */\n  mhd_log_probe(algo_param, \"entry\", NULL, 0, \"entering function\");\n\n  if (NULL == algo_param->value.str)\n  {\n    mhd_log_probe(algo_param, \"null-check\", \"(value.str)\", 1, \"value.str is NULL -> default MD5\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    int matched;\n\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_MD5_TOKEN);\n    mhd_log_probe(algo_param, \"quoted-check\", \"_MHD_MD5_TOKEN\", matched, \"checked quoted MD5\");\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_SHA256_TOKEN);\n    mhd_log_probe(algo_param, \"quoted-check\", \"_MHD_SHA256_TOKEN\", matched, \"checked quoted SHA256\");\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n    mhd_log_probe(algo_param, \"quoted-check\", \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\", matched, \"checked quoted MD5-sess\");\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_SHA512_256_TOKEN\n                                                     _MHD_SESS_TOKEN);\n\n    mhd_log_probe(algo_param, \"quoted-check\", \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\", matched, \"checked quoted SHA512/256-sess\");\n\n    /* Algorithms below are not supported by MHD for authentication */\n\n    mhd_log_probe(algo_param, \"quoted-check\", \"(after-sha512-256-token)\", 0, \"fall-through to MD5_SESSION per original logic\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA256_TOKEN\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    mhd_log_probe(algo_param, \"quoted-exit\", \"(no-match)\", 0, \"no known quoted algorithm\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  {\n    int matched;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    mhd_log_probe(algo_param, \"unquoted-check\", \"_MHD_MD5_TOKEN\", matched, \"checked MD5\");\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    mhd_log_probe(algo_param, \"unquoted-check\", \"_MHD_SHA256_TOKEN\", matched, \"checked SHA256\");\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    mhd_log_probe(algo_param, \"unquoted-check\", \"_MHD_SHA512_256_TOKEN\", matched, \"checked SHA512/256\");\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n    /* Algorithms below are not supported by MHD for authentication */\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    mhd_log_probe(algo_param, \"unquoted-check\", \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\", matched, \"checked MD5-sess\");\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    mhd_log_probe(algo_param, \"unquoted-check\", \"_MHD_SHA256_TOKEN _MHD_SESS_TOKEN\", matched, \"checked SHA256-sess\");\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    mhd_log_probe(algo_param, \"unquoted-check\", \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\", matched, \"checked SHA512/256-sess\");\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    mhd_log_probe(algo_param, \"unquoted-exit\", \"(no-match)\", 0, \"no known unquoted algorithm\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n}\n"
}