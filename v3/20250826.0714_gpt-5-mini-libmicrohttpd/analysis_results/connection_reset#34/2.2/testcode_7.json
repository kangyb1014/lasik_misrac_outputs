{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment c->rq.client_aware = false; is redundant because c->rq is memset to zero later in the same control path (memset(&c->rq, 0, sizeof(c->rq))); the explicit write is therefore overwritten before any further use. Removing this assignment would not change program behaviour in this function (assuming no other concurrent actor reads the field between the assignment and the subsequent memset), so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/342.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_reset:\n```c\nstatic void\nconnection_reset (struct MHD_Connection *connection,\n                  bool reuse)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Daemon *const d = connection->daemon;\n\n  if (! reuse)\n  {\n    /* Next function will destroy response, notify client,\n     * destroy memory pool, and set connection state to \"CLOSED\" */\n    MHD_connection_close_ (c,\n                           c->stop_with_error ?\n                           MHD_REQUEST_TERMINATED_WITH_ERROR :\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n    c->read_buffer_offset = 0;\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n  }\n  else\n  {\n    /* Reset connection to process the next request */\n    size_t new_read_buf_size;\n    mhd_assert (! c->stop_with_error);\n    mhd_assert (! c->discard_request);\n\n    if ( (NULL != d->notify_completed) &&\n         (c->rq.client_aware) )\n      d->notify_completed (d->notify_completed_cls,\n                           c,\n                           &c->rq.client_context,\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->rq.client_aware = false;\n\n    if (NULL != c->rp.response)\n      MHD_destroy_response (c->rp.response);\n    c->rp.response = NULL;\n\n    c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n    c->state = MHD_CONNECTION_INIT;\n    c->event_loop_info =\n      (0 == c->read_buffer_offset) ?\n      MHD_EVENT_LOOP_INFO_READ : MHD_EVENT_LOOP_INFO_PROCESS;\n\n    memset (&c->rq, 0, sizeof(c->rq));\n\n    /* iov (if any) will be deallocated by MHD_pool_reset */\n    memset (&c->rp, 0, sizeof(c->rp));\n\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n    c->continue_message_write_offset = 0;\n\n    /* Reset the read buffer to the starting size,\n       preserving the bytes we have already read. */\n    new_read_buf_size = c->daemon->pool_size / 2;\n    if (c->read_buffer_offset > new_read_buf_size)\n      new_read_buf_size = c->read_buffer_offset;\n\n    c->read_buffer\n      = MHD_pool_reset (c->pool,\n                        c->read_buffer,\n                        c->read_buffer_offset,\n                        new_read_buf_size);\n    c->read_buffer_size = new_read_buf_size;\n  }\n  c->rq.client_context = NULL;\n}\n```\n</target_code>\nPlease provide the modified connection_reset code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n  static FILE *fp = NULL;\n  if (NULL == fp)\n  {\n    /* Try to create directory; ignore errors other than absence. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    fp = fopen(\"/tmp/logs/342.txt\", \"a\");\n  }\n  if (NULL == fp)\n    return; /* silently give up if logging not possible */\n\n  time_t t = time(NULL);\n  va_list ap;\n  va_start(ap, fmt);\n  fprintf(fp, \"[%ld] \", (long)t);\n  vfprintf(fp, fmt, ap);\n  fprintf(fp, \"\\n\");\n  fflush(fp);\n  va_end(ap);\n}\n\nstatic void\nconnection_reset (struct MHD_Connection *connection,\n                  bool reuse)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Daemon *const d = connection->daemon;\n\n  probe_log(\"connection_reset ENTRY: connection=%p reuse=%d daemon=%p stop_with_error=%d discard_request=%d\",\n            (void *)c, (int)reuse, (void *)d, (int)c->stop_with_error, (int)c->discard_request);\n\n  if (! reuse)\n  {\n    /* Next function will destroy response, notify client,\n     * destroy memory pool, and set connection state to \"CLOSED\" */\n    probe_log(\"connection_reset: non-reuse path: calling MHD_connection_close_ (stop_with_error=%d)\", (int)c->stop_with_error);\n    MHD_connection_close_ (c,\n                           c->stop_with_error ?\n                           MHD_REQUEST_TERMINATED_WITH_ERROR :\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n    c->read_buffer_offset = 0;\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n\n    probe_log(\"connection_reset: non-reuse path completed: read_buffer=%p read_buffer_size=%zu write_buffer=%p\",\n              (void *)c->read_buffer, (size_t)c->read_buffer_size, (void *)c->write_buffer);\n  }\n  else\n  {\n    /* Reset connection to process the next request */\n    size_t new_read_buf_size;\n    mhd_assert (! c->stop_with_error);\n    mhd_assert (! c->discard_request);\n\n    probe_log(\"connection_reset: reuse path start: c->rq.client_aware(before notify)=%d c->rq.client_context=%p\",\n              (int)c->rq.client_aware, (void *)c->rq.client_context);\n\n    if ( (NULL != d->notify_completed) &&\n         (c->rq.client_aware) )\n    {\n      probe_log(\"connection_reset: notify_completed will be invoked: notify=%p notify_cls=%p connection=%p client_context=%p\",\n                (void *)d->notify_completed, (void *)d->notify_completed_cls, (void *)c, (void *)&c->rq.client_context);\n      d->notify_completed (d->notify_completed_cls,\n                           c,\n                           &c->rq.client_context,\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n      probe_log(\"connection_reset: notify_completed returned\");\n    }\n\n    probe_log(\"connection_reset: about to set c->rq.client_aware = false (was %d)\", (int)c->rq.client_aware);\n    c->rq.client_aware = false;\n    probe_log(\"connection_reset: after setting c->rq.client_aware = false (now %d)\", (int)c->rq.client_aware);\n\n    if (NULL != c->rp.response)\n      MHD_destroy_response (c->rp.response);\n    probe_log(\"connection_reset: destroyed rp.response if present (old response=%p)\", (void *)c->rp.response);\n    c->rp.response = NULL;\n\n    c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n    c->state = MHD_CONNECTION_INIT;\n    c->event_loop_info =\n      (0 == c->read_buffer_offset) ?\n      MHD_EVENT_LOOP_INFO_READ : MHD_EVENT_LOOP_INFO_PROCESS;\n\n    /* Log state just before zeroing request structure */\n    probe_log(\"connection_reset: before memset(&c->rq): client_aware=%d client_context=%p\",\n              (int)c->rq.client_aware, (void *)c->rq.client_context);\n\n    memset (&c->rq, 0, sizeof(c->rq));\n\n    probe_log(\"connection_reset: after memset(&c->rq): client_aware=%d client_context=%p\",\n              (int)c->rq.client_aware, (void *)c->rq.client_context);\n\n    /* iov (if any) will be deallocated by MHD_pool_reset */\n    memset (&c->rp, 0, sizeof(c->rp));\n\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n    c->continue_message_write_offset = 0;\n\n    /* Reset the read buffer to the starting size,\n       preserving the bytes we have already read. */\n    new_read_buf_size = c->daemon->pool_size / 2;\n    if (c->read_buffer_offset > new_read_buf_size)\n      new_read_buf_size = c->read_buffer_offset;\n\n    c->read_buffer\n      = MHD_pool_reset (c->pool,\n                        c->read_buffer,\n                        c->read_buffer_offset,\n                        new_read_buf_size);\n    c->read_buffer_size = new_read_buf_size;\n\n    probe_log(\"connection_reset: reuse path end: read_buffer=%p read_buffer_size=%zu state=%d\",\n              (void *)c->read_buffer, (size_t)c->read_buffer_size, (int)c->state);\n  }\n  c->rq.client_context = NULL;\n  probe_log(\"connection_reset EXIT: c->rq.client_context set to NULL final client_aware=%d client_context=%p\",\n            (int)c->rq.client_aware, (void *)c->rq.client_context);\n}\n"
}