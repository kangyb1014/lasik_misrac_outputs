{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_connection_close_ does not return to the caller (for example it frees the connection and its memory pool, or performs a longjmp/exit), then the subsequent assignments that reference 'c' become unreachable; this is a violation of MISRA C 2023 Rule 2.1. The function comment (\u201cwill destroy ... memory pool, and set connection state to 'CLOSED'\u201d) suggests it might invalidate the connection \u2014 if it causes non-return or deallocation of 'c', the following lines are unreachable. Fixes: ensure MHD_connection_close_ always returns, move the cleanup assignments before the call, or remove the unreachable code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/341.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_reset:\n```c\nstatic void\nconnection_reset (struct MHD_Connection *connection,\n                  bool reuse)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Daemon *const d = connection->daemon;\n\n  if (! reuse)\n  {\n    /* Next function will destroy response, notify client,\n     * destroy memory pool, and set connection state to \"CLOSED\" */\n    MHD_connection_close_ (c,\n                           c->stop_with_error ?\n                           MHD_REQUEST_TERMINATED_WITH_ERROR :\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n    c->read_buffer_offset = 0;\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n  }\n  else\n  {\n    /* Reset connection to process the next request */\n    size_t new_read_buf_size;\n    mhd_assert (! c->stop_with_error);\n    mhd_assert (! c->discard_request);\n\n    if ( (NULL != d->notify_completed) &&\n         (c->rq.client_aware) )\n      d->notify_completed (d->notify_completed_cls,\n                           c,\n                           &c->rq.client_context,\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->rq.client_aware = false;\n\n    if (NULL != c->rp.response)\n      MHD_destroy_response (c->rp.response);\n    c->rp.response = NULL;\n\n    c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n    c->state = MHD_CONNECTION_INIT;\n    c->event_loop_info =\n      (0 == c->read_buffer_offset) ?\n      MHD_EVENT_LOOP_INFO_READ : MHD_EVENT_LOOP_INFO_PROCESS;\n\n    memset (&c->rq, 0, sizeof(c->rq));\n\n    /* iov (if any) will be deallocated by MHD_pool_reset */\n    memset (&c->rp, 0, sizeof(c->rp));\n\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n    c->continue_message_write_offset = 0;\n\n    /* Reset the read buffer to the starting size,\n       preserving the bytes we have already read. */\n    new_read_buf_size = c->daemon->pool_size / 2;\n    if (c->read_buffer_offset > new_read_buf_size)\n      new_read_buf_size = c->read_buffer_offset;\n\n    c->read_buffer\n      = MHD_pool_reset (c->pool,\n                        c->read_buffer,\n                        c->read_buffer_offset,\n                        new_read_buf_size);\n    c->read_buffer_size = new_read_buf_size;\n  }\n  c->rq.client_context = NULL;\n}\n```\n</target_code>\nPlease provide the modified connection_reset code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Probe helper: append a short state dump to /tmp/logs/341.txt.\n   Kept minimal and side-effect free (no allocation, no longjmp/exit).\n*/\nstatic void\nlog_connection_state(const char *tag, struct MHD_Connection *c, bool reuse)\n{\n    FILE *f = fopen(\"/tmp/logs/341.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    time_t t = time(NULL);\n\n    fprintf(f, \"[%ld] %s: tag=%s, conn=%p, reuse=%d\\n\",\n            (long)t, __func__, tag, (void *)c, (int)reuse);\n    if (c != NULL)\n    {\n        /* Print a selection of fields useful for diagnosing the close/return issue */\n        fprintf(f,\n                \"    daemon=%p, pool=%p, state=%d, stop_with_error=%d, discard_request=%d\\n\",\n                (void *)c->daemon, (void *)c->pool, (int)c->state,\n                (int)c->stop_with_error, (int)c->discard_request);\n        fprintf(f,\n                \"    read_buffer=%p, read_buffer_size=%zu, read_buffer_offset=%zu\\n\",\n                (void *)c->read_buffer, c->read_buffer_size, c->read_buffer_offset);\n        fprintf(f,\n                \"    write_buffer=%p, write_buffer_size=%zu, write_send_off=%zu, write_append_off=%zu\\n\",\n                (void *)c->write_buffer, c->write_buffer_size,\n                c->write_buffer_send_offset, c->write_buffer_append_offset);\n        fprintf(f, \"    rq.client_aware=%d, rp.response=%p\\n\",\n                (int)c->rq.client_aware, (void *)c->rp.response);\n    }\n    fflush(f);\n    fclose(f);\n}\n\nstatic void\nconnection_reset (struct MHD_Connection *connection,\n                  bool reuse)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Daemon *const d = connection->daemon;\n\n  /* Log entry to help reproduce whether MHD_connection_close_ returns */\n  log_connection_state(\"entry\", c, reuse);\n\n  if (! reuse)\n  {\n    /* Next function will destroy response, notify client,\n     * destroy memory pool, and set connection state to \"CLOSED\" */\n    log_connection_state(\"before_close\", c, reuse);\n\n    MHD_connection_close_ (c,\n                           c->stop_with_error ?\n                           MHD_REQUEST_TERMINATED_WITH_ERROR :\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n\n    /* If MHD_connection_close_ does not return, the following log will not be emitted. */\n    log_connection_state(\"after_close\", c, reuse);\n\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n    c->read_buffer_offset = 0;\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n  }\n  else\n  {\n    /* Reset connection to process the next request */\n    size_t new_read_buf_size;\n    mhd_assert (! c->stop_with_error);\n    mhd_assert (! c->discard_request);\n\n    log_connection_state(\"reuse_branch_start\", c, reuse);\n\n    if ( (NULL != d->notify_completed) &&\n         (c->rq.client_aware) )\n      d->notify_completed (d->notify_completed_cls,\n                           c,\n                           &c->rq.client_context,\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->rq.client_aware = false;\n\n    if (NULL != c->rp.response)\n      MHD_destroy_response (c->rp.response);\n    c->rp.response = NULL;\n\n    c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n    c->state = MHD_CONNECTION_INIT;\n    c->event_loop_info =\n      (0 == c->read_buffer_offset) ?\n      MHD_EVENT_LOOP_INFO_READ : MHD_EVENT_LOOP_INFO_PROCESS;\n\n    memset (&c->rq, 0, sizeof(c->rq));\n\n    /* iov (if any) will be deallocated by MHD_pool_reset */\n    memset (&c->rp, 0, sizeof(c->rp));\n\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n    c->continue_message_write_offset = 0;\n\n    /* Reset the read buffer to the starting size,\n       preserving the bytes we have already read. */\n    new_read_buf_size = c->daemon->pool_size / 2;\n    if (c->read_buffer_offset > new_read_buf_size)\n      new_read_buf_size = c->read_buffer_offset;\n\n    c->read_buffer\n      = MHD_pool_reset (c->pool,\n                        c->read_buffer,\n                        c->read_buffer_offset,\n                        new_read_buf_size);\n    c->read_buffer_size = new_read_buf_size;\n\n    log_connection_state(\"reuse_branch_end\", c, reuse);\n  }\n\n  /* Final assignment \u2014 log before performing it so we can see if it's reachable */\n  log_connection_state(\"about_to_clear_client_context\", c, reuse);\n  c->rq.client_context = NULL;\n\n  /* Log exit */\n  log_connection_state(\"exit\", c, reuse);\n}\n"
}