{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_write_done:\n```c\nstatic enum MHD_Result\ncheck_write_done (struct MHD_Connection *connection,\n                  enum MHD_CONNECTION_STATE next_state)\n{\n  if ( (connection->write_buffer_append_offset !=\n        connection->write_buffer_send_offset)\n       /* || data_in_tls_buffers == true  */\n       )\n    return MHD_NO;\n  connection->write_buffer_append_offset = 0;\n  connection->write_buffer_send_offset = 0;\n  connection->state = next_state;\n  return MHD_YES;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nconnection->write_buffer_send_offset = 0;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The assignment is reachable when the if condition is false \u2014 i.e. when connection->write_buffer_append_offset == connection->write_buffer_send_offset. In that case the early return is skipped and the code executes, sets both offsets to 0, updates connection->state and returns MHD_YES. A violation would only occur if the condition were provably always true (or if an unconditional return or unreachable-path construct preceded the assignment), which is not the case in the provided code fragment."
}