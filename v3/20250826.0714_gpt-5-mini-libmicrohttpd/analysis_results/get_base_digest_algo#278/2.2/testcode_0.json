{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe bitwise expression ORs the same macro twice: (MHD_DIGEST_AUTH_ALGO3_NON_SESSION | MHD_DIGEST_AUTH_ALGO3_NON_SESSION). The second occurrence is redundant: ((X) | (X)) == (X). The OR of an identical operand is an executed operation whose removal (replace the OR expression with the single macro) would not change program behaviour, so this is dead/redundant code under MISRA C 2023 Rule 2.2. Likely a typo (a different flag was intended); fix by removing the duplicate operand or using the correct flag.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_base_digest_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2782.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_base_digest_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_base_digest_algo:\n```c\n_MHD_static_inline enum MHD_DigestBaseAlgo\nget_base_digest_algo (enum MHD_DigestAuthAlgo3 algo3)\n{\n  unsigned int base_algo;\n\n  base_algo =\n    ((unsigned int) algo3)\n    & ~((unsigned int)\n        (MHD_DIGEST_AUTH_ALGO3_NON_SESSION\n         | MHD_DIGEST_AUTH_ALGO3_NON_SESSION));\n  return (enum MHD_DigestBaseAlgo) base_algo;\n}\n```\n</target_code>\nPlease provide the modified get_base_digest_algo code.\n",
  "test_code": "#include <stdio.h>\n\n_MHD_static_inline enum MHD_DigestBaseAlgo\nget_base_digest_algo (enum MHD_DigestAuthAlgo3 algo3)\n{\n  unsigned int base_algo;\n\n  /* Preserve the original mask expression (contains the duplicate OR) */\n  unsigned int before_mask = (unsigned int) algo3;\n  unsigned int mask_expr = (unsigned int)\n    (MHD_DIGEST_AUTH_ALGO3_NON_SESSION\n     | MHD_DIGEST_AUTH_ALGO3_NON_SESSION);\n  unsigned int single_mask = (unsigned int) MHD_DIGEST_AUTH_ALGO3_NON_SESSION;\n\n  /* Compute result using the original logic */\n  base_algo = before_mask & ~mask_expr;\n\n  /* Probe/logging: append execution details to file for reproduction/evidence */\n  {\n    FILE *f = fopen(\"/tmp/logs/2782.txt\", \"a\");\n    if (f != NULL)\n      {\n        fprintf(f, \"get_base_digest_algo called\\n\");\n        fprintf(f, \"  input algo3 (as unsigned): 0x%X\\n\", before_mask);\n        fprintf(f, \"  mask_expr (MHD_DIGEST_AUTH_ALGO3_NON_SESSION | MHD_DIGEST_AUTH_ALGO3_NON_SESSION): 0x%X\\n\", mask_expr);\n        fprintf(f, \"  single_mask (MHD_DIGEST_AUTH_ALGO3_NON_SESSION): 0x%X\\n\", single_mask);\n        if (mask_expr == single_mask)\n          {\n            fprintf(f, \"  NOTE: mask_expr equals single_mask -> duplicate operand in OR is redundant\\n\");\n          }\n        else\n          {\n            fprintf(f, \"  NOTE: mask_expr != single_mask\\n\");\n          }\n        fprintf(f, \"  result base_algo (after masking): 0x%X\\n\\n\", base_algo);\n        fclose(f);\n      }\n  }\n\n  return (enum MHD_DigestBaseAlgo) base_algo;\n}\n"
}