{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;",
    "static bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)",
    "struct MHD_Daemon *const daemon = connection->daemon;",
    "char *args;",
    "if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))",
    "uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);"
  ],
  "explanation": "I selected fragments where pointer-to-object const-qualification might reasonably be tightened: the function parameter that takes a connection (the declared pointer type to the connection object), the local daemon pointer declaration, the args pointer declaration and its assignment, the call that passes the connection/uri into a callback, and the memcmp that uses connection->rq.url. These are places to investigate whether the pointee types could/should be const-qualified (for example: const struct MHD_Connection *, const struct MHD_Daemon *, or const char * for args or url) without breaking intended semantics.\n\nOther fragments were not selected because they clearly require mutable access to the pointed-to data and therefore should not be const-qualified: the uri buffer is explicitly modified in this function (uri[uri_len] = 0), and qmark is written through (*qmark = '\\0'); both indicate non-const access. The qmark variable is used to write into the buffer, so making it a pointer-to-const would be incorrect. Similarly, any pointer that is actually modified (written through) in this function has been excluded from suspicion because const qualification would be inappropriate."
}