{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'args' is declared as 'char *' but is only used to point into the URI buffer for read-only use (assigned from qmark+1 or uri+uri_len and then passed to check_argument_match). It does not need to be used to modify the pointed-to characters and therefore should be declared as 'const char *args' to reflect immutability and satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdbool.h>\n#include <time.h>\n\n/* Probe helper: append control-flow/state information to the log file.\n   Keep this separate from the main logic so original behavior is preserved. */\nstatic void\nprobe_log_state(const char *stage,\n                const char *uri,\n                size_t uri_len,\n                const char *qmark,\n                const char *args,\n                int match_result)\n{\n  FILE *f = fopen(\"/tmp/logs/2683.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Timestamp for easier correlation */\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] STAGE: %s\\n\", (long)t, stage);\n  if (uri != NULL)\n  {\n    /* uri is expected to be NUL-terminated by the caller (check_uri_match does this).\n       Limit the printed URI to uri_len characters to avoid overruns in case of misuse. */\n    fprintf(f, \"  uri (len=%zu): '%.*s'\\n\", uri_len, (int)uri_len, uri);\n  }\n  else\n  {\n    fprintf(f, \"  uri: (null)\\n\");\n  }\n\n  if (qmark != NULL)\n    fprintf(f, \"  qmark offset: %td\\n\", qmark - uri);\n  else\n    fprintf(f, \"  qmark: NULL\\n\");\n\n  if (args != NULL)\n    fprintf(f, \"  args ptr: %p, args string: '%s'\\n\", (const void *)args, args);\n  else\n    fprintf(f, \"  args: NULL\\n\");\n\n  fprintf(f, \"  last_match_result: %d\\n\", match_result);\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Ensure the URI is NUL-terminated for safe string operations in probes. */\n  uri[uri_len] = 0;\n\n  /* Find query mark if present. */\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n\n  /* Log state after searching for '?', before possibly truncating the uri. */\n  probe_log_state(\"after_memchr\", uri, uri_len, qmark, NULL, -1);\n\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  /* Log state after unescaping so the caller can see the effective URI and length. */\n  probe_log_state(\"after_unescape\", uri, uri_len, qmark, NULL, -1);\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    /* Log mismatch outcome. */\n    probe_log_state(\"uri_mismatch\", uri, uri_len, qmark, NULL, 0);\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  /* Log arguments pointer and content immediately before argument checking. */\n  probe_log_state(\"before_check_argument_match\", uri, uri_len, qmark, args, -1);\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    /* Log failure of argument matching. */\n    probe_log_state(\"args_mismatch\", uri, uri_len, qmark, args, 0);\n    return false;\n  }\n\n  /* Log success path. */\n  probe_log_state(\"success\", uri, uri_len, qmark, args, 1);\n  return true;\n}\n"
}