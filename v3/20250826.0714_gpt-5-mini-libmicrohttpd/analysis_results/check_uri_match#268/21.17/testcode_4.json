{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memcmp uses uri_len returned by daemon->unescape_callback without verifying that both pointers reference objects at least uri_len bytes long. If the unescape_callback returns a length greater than the actual storage for uri (or connection->rq.url_len equals a length greater than the storage for connection->rq.url), memcmp(uri, connection->rq.url, uri_len) will read beyond the bounds of one or both buffers (e.g. unescape_callback returns M > allocated size of uri and connection->rq.url_len == M), causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/2689.txt. */\nstatic void\nprobe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2689.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Log entry state */\n  probe_log(\"check_uri_match ENTER: connection=%p, uri=%p, incoming_uri_len=%zu, daemon=%p, connection->rq.url_len=%zu\",\n            (void *)connection, (void *)uri, uri_len, (void *)daemon,\n            (size_t)connection->rq.url_len);\n\n  /* Note: original code writes a terminating NUL at uri[uri_len]. We preserve that behavior. */\n  probe_log(\"About to set uri[uri_len] = 0 at uri[%zu] (this may write out-of-bounds if uri_len is incorrect)\", uri_len);\n  uri[uri_len] = 0;\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  probe_log(\"memchr result qmark=%p\", (void *)qmark);\n  if (NULL != qmark)\n  {\n    probe_log(\"Found '?', will truncate at position %td\", qmark - uri);\n    *qmark = '\\0';\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  probe_log(\"Calling unescape_callback with cls=%p, connection=%p, uri=%p\",\n            (void *)daemon->unescape_callback_cls, (void *)connection, (void *)uri);\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  probe_log(\"unescape_callback returned uri_len=%zu, connection->rq.url_len=%zu\",\n            uri_len, (size_t)connection->rq.url_len);\n\n  probe_log(\"About to compare uri (%p) and connection->rq.url (%p) for %zu bytes\",\n            (void *)uri, (void *)connection->rq.url, uri_len);\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    probe_log(\"Authentication failed: lengths/or memcmp mismatch (uri_len=%zu, connection->rq.url_len=%zu)\",\n              uri_len, (size_t)connection->rq.url_len);\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n  probe_log(\"Arguments pointer args=%p (qmark=%p, uri=%p, uri_len=%zu)\", (void *)args, (void *)qmark, (void *)uri, uri_len);\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    probe_log(\"Authentication failed: argument match failed for args=%p\", (void *)args);\n    return false;\n  }\n\n  probe_log(\"check_uri_match SUCCESS: connection=%p, uri=%p, final_uri_len=%zu\",\n            (void *)connection, (void *)uri, uri_len);\n  return true;\n}\n"
}