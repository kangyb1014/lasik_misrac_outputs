{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes args (either qmark+1 or uri+uri_len) to check_argument_match without guaranteeing that args points to a valid, null\u2011terminated region inside the original buffer. If check_argument_match uses <string.h> functions (e.g. strlen/strcmp/strchr), they can read beyond the object bounds when: (a) qmark was found before calling daemon->unescape_callback and that callback modifies/reallocates/shifts the uri buffer or changes its length, leaving qmark (and thus qmark+1) invalid or not pointing at a terminated string; or (b) uri[uri_len] was written before unescape but unescape changes uri_len or content so uri+uri_len is not a valid, NUL\u2011terminated start of the arguments. In those cases string.h functions inside check_argument_match may access out of bounds \u2014 a MISRA C 2023 Rule 21.17 violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/2689.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2689.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fflush (f);\n  fclose (f);\n}\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Log entry state */\n  mhd_probe_log (\"[check_uri_match] ENTRY: connection=%p uri=%p uri_len=%zu daemon=%p\",\n                 (void *) connection, (void *) uri, uri_len, (void *) daemon);\n\n  /* NOTE: The original logic sets a NUL at uri[uri_len]. Keep that behavior. */\n  mhd_probe_log (\"[check_uri_match] about to set uri[uri_len]=0 (write at %p)\",\n                 (void *) (uri + uri_len));\n\n  uri[uri_len] = 0;\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n  {\n    size_t qm_index = (size_t) (qmark - uri);\n    mhd_probe_log (\"[check_uri_match] found '?': qmark=%p index=%zu -> setting *qmark='\\\\0'\",\n                   (void *) qmark, qm_index);\n    *qmark = '\\0';\n  }\n  else\n  {\n    mhd_probe_log (\"[check_uri_match] no '?', qmark=NULL\");\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  mhd_probe_log (\"[check_uri_match] calling unescape_callback cls=%p connection=%p uri=%p current_len=%zu\",\n                 (void *) daemon->unescape_callback_cls, (void *) connection, (void *) uri, uri_len);\n\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  mhd_probe_log (\"[check_uri_match] returned from unescape_callback: new_uri_len=%zu connection->rq.url_len=%zu url_ptr=%p\",\n                 uri_len, connection->rq.url_len, (void *) connection->rq.url);\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    mhd_probe_log (\"[check_uri_match] URI mismatch: uri_len=%zu url_len=%zu memcmp_failed=%d uri_ptr=%p url_ptr=%p\",\n                   uri_len, connection->rq.url_len,\n                   (int) (0 != memcmp (uri, connection->rq.url, uri_len)),\n                   (void *) uri, (void *) connection->rq.url);\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  mhd_probe_log (\"[check_uri_match] computed args pointer: args=%p (qmark=%p uri=%p uri_len=%zu)\",\n                 (void *) args, (void *) qmark, (void *) uri, uri_len);\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    mhd_probe_log (\"[check_uri_match] check_argument_match returned FALSE for args=%p connection=%p\",\n                   (void *) args, (void *) connection);\n    return false;\n  }\n\n  mhd_probe_log (\"[check_uri_match] SUCCESS: URI & arguments match for connection=%p uri=%p uri_len=%zu\",\n                 (void *) connection, (void *) uri, uri_len);\n  return true;\n}"
}