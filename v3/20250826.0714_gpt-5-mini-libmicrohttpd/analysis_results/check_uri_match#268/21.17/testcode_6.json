{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls daemon->unescape_callback(uri) without passing the capacity of the buffer pointed to by uri. The callback therefore has no guaranteed knowledge of the available space and might use string.h functions (e.g. strcpy, strcat, memcpy, memmove) or perform writes/reads assuming extra room. For example, if the callback decodes percent-escapes into a target buffer using strcpy/strcat or memcpy with a length greater than the original allocation, or if the original buffer was allocated with exactly uri_len bytes and the earlier uri[uri_len] = 0 already wrote out of bounds, the callback can read or write past the end of the object. Because the fragment does not constrain or communicate the buffer bounds, this can result in accesses beyond the bounds of the object referenced by uri and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helpers: write logs to /tmp/logs/2689.txt. Keep them simple and safe. */\nstatic void\nprobe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2689.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic void\nprobe_dump_buf(const char *label, const unsigned char *buf, size_t len)\n{\n  FILE *f = fopen(\"/tmp/logs/2689.txt\", \"a\");\n  size_t i, dlen = (len < 64u) ? len : 64u;\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s (len=%zu):\", label, len);\n  for (i = 0; i < dlen; ++i)\n    fprintf(f, \" %02X\", (unsigned)buf[i]);\n  if (len > dlen)\n    fprintf(f, \" ... (%zu bytes total)\", len);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Log entry state */\n  probe_log(\"[check_uri_match] entry: connection=%p, daemon=%p, uri=%p, uri_len=%zu\",\n            (void *)connection, (void *)daemon, (void *)uri, uri_len);\n\n  /* Preserve original behavior: terminate at uri_len (note: potential out-of-bounds if caller provided insufficient space) */\n  uri[uri_len] = 0;\n  probe_log(\"[check_uri_match] wrote terminator at uri[uri_len]\");\n  /* Dump a safe prefix of the URI buffer (up to uri_len bytes, capped in helper) */\n  if (uri != NULL)\n    probe_dump_buf(\"[check_uri_match] uri bytes (prefix)\", (const unsigned char *)uri, uri_len);\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n  {\n    *qmark = '\\0';\n    probe_log(\"[check_uri_match] found '?' at %p, set to '\\0'\", (void *)qmark);\n  }\n  else\n  {\n    probe_log(\"[check_uri_match] no '?' found within first %zu bytes\", uri_len);\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  probe_log(\"[check_uri_match] calling unescape_callback: cls=%p, connection=%p, uri=%p\",\n            (void *)daemon->unescape_callback_cls, (void *)connection, (void *)uri);\n\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  probe_log(\"[check_uri_match] unescape_callback returned uri_len=%zu\", uri_len);\n  if (uri != NULL)\n    probe_dump_buf(\"[check_uri_match] uri after unescape (prefix)\", (const unsigned char *)uri, uri_len);\n\n  /* Compare lengths first; only perform memcmp when lengths are equal (matches original short-circuit logic) */\n  bool mismatch = false;\n  if (uri_len != connection->rq.url_len)\n  {\n    probe_log(\"[check_uri_match] length mismatch: uri_len=%zu, connection->rq.url_len=%zu\",\n              uri_len, connection->rq.url_len);\n    mismatch = true;\n  }\n  else\n  {\n    /* Safe to call memcmp with uri_len since lengths are equal */\n    int cmp = memcmp (uri, connection->rq.url, uri_len);\n    probe_log(\"[check_uri_match] memcmp result=%d for %zu bytes\", cmp, uri_len);\n    if (cmp != 0)\n      mismatch = true;\n  }\n\n  if (mismatch)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    probe_log(\"[check_uri_match] returning false due to URI mismatch\");\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n  probe_log(\"[check_uri_match] args pointer=%p (qmark=%p)\", (void *)args, (void *)qmark);\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    probe_log(\"[check_uri_match] check_argument_match returned false; returning false\");\n    return false;\n  }\n\n  probe_log(\"[check_uri_match] success: returning true\");\n  return true;\n}\n"
}