{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller provided a buffer of size uri_len (valid indices 0..uri_len-1), the code writes uri[uri_len] = 0 just before the memchr call which already writes out of bounds. More generally, memchr(uri, '?', uri_len) will read uri_len bytes starting at uri \u2014 if uri_len exceeds the actual allocated size of the object pointed to by uri (e.g. caller passed a pointer to an N-byte buffer but uri_len > N), memchr will access beyond the object. Therefore the use of memchr here can violate Rule 21.17 when uri_len is not guaranteed to be <= the buffer size.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe logging helpers: write append-only logs to /tmp/logs/2689.txt */\nstatic void\nprobe_log_open_and_write(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/2689.txt\", \"a\");\n    if (NULL == f)\n        return;\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void\nprobe_log_state(const char *stage,\n                struct MHD_Connection *connection,\n                char *uri,\n                size_t uri_len,\n                char *qmark)\n{\n    FILE *f = fopen(\"/tmp/logs/2689.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    struct MHD_Daemon *daemon = (connection ? connection->daemon : NULL);\n    /* Print basic state: pointers and lengths. Avoid dereferencing uri contents to\n       prevent introducing further out-of-bounds reads. */\n    fprintf(f, \"[%s] connection=%p, daemon=%p, uri=%p, uri_len=%zu, qmark=%p\\n\",\n            stage, (void*)connection, (void*)daemon, (void*)uri, uri_len, (void*)qmark);\n\n    if (connection) {\n        /* log url_len if available */\n        fprintf(f, \"[%s] connection->rq.url_len=%zu\\n\",\n                stage, (size_t)connection->rq.url_len);\n    }\n\n    if (daemon) {\n        fprintf(f, \"[%s] daemon->unescape_callback=%p, daemon->unescape_callback_cls=%p\\n\",\n                stage, (void*)daemon->unescape_callback, (void*)daemon->unescape_callback_cls);\n    }\n\n    fclose(f);\n}\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark = NULL;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Log entry state before performing operations that may read/write near the\n     end of the buffer. Do not dereference beyond provided pointers. */\n  probe_log_state(\"ENTRY\", connection, uri, uri_len, NULL);\n\n  {\n    char buf[256];\n    /* Log intention to write termination byte at uri + uri_len (address only). */\n    snprintf(buf, sizeof(buf), \"About to write '\\\\0' at address %p (uri + uri_len)\", (void*)(uri + uri_len));\n    probe_log_open_and_write(buf);\n  }\n\n  uri[uri_len] = 0;\n\n  probe_log_open_and_write(\"Wrote termination byte at uri + uri_len\");\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n\n  {\n    char buf[256];\n    snprintf(buf, sizeof(buf), \"memchr returned qmark=%p\", (void*)qmark);\n    probe_log_open_and_write(buf);\n  }\n\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  probe_log_state(\"AFTER_QMARK_AND_TERMINATE\", connection, uri, uri_len, qmark);\n\n  /* Need to unescape URI before comparing with connection->url */\n  probe_log_open_and_write(\"Calling unescape_callback\");\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  {\n    char buf[256];\n    snprintf(buf, sizeof(buf), \"unescape_callback returned new uri_len=%zu\", uri_len);\n    probe_log_open_and_write(buf);\n  }\n\n  probe_log_state(\"AFTER_UNESCAPE\", connection, uri, uri_len, qmark);\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    probe_log_open_and_write(\"Authentication failed: URI does not match (length or memcmp)\");\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  {\n    char buf[256];\n    snprintf(buf, sizeof(buf), \"Arguments start at args=%p (qmark=%p)\", (void*)args, (void*)qmark);\n    probe_log_open_and_write(buf);\n  }\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    probe_log_open_and_write(\"Authentication failed: arguments do not match\");\n    return false;\n  }\n  probe_log_open_and_write(\"Authentication succeeded: URI and arguments match\");\n  return true;\n}\n"
}