{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe write uri[uri_len] = 0 may write one past the end of the buffer if the caller supplied a buffer whose allocated size equals uri_len (i.e. no space for a terminating NUL). In that case the code performs an out-of-bounds write and can lead to subsequent string-handling calls (memchr/memcmp) accessing memory beyond the object bounds. Because the buffer size is not guaranteed by the function signature, this is a potential violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append messages to /tmp/logs/2689.txt */\nstatic void\n_probe_log_append (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2689.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fclose (f);\n}\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Log entry and key state before touching uri buffer */\n  _probe_log_append (\"ENTRY: check_uri_match connection=%p daemon=%p uri=%p uri_len=%zu\\n\",\n                      (void *) connection,\n                      (void *) daemon,\n                      (void *) uri,\n                      uri_len);\n\n  /* Preserve original logic: potential write of terminating NUL (may be UB if buffer has no room)\n     Log that we are about to perform the write so callers can detect the scenario. */\n  _probe_log_append (\"ACTION: about to write terminating NUL at uri+%zu (address=%p)\\n\",\n                      uri_len, (void *) (uri + uri_len));\n\n  uri[uri_len] = 0;\n\n  _probe_log_append (\"ACTION: wrote terminating NUL at uri+%zu (address=%p)\\n\",\n                      uri_len, (void *) (uri + uri_len));\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n\n  if (NULL != qmark)\n  {\n    size_t off = (size_t) (qmark - uri);\n    _probe_log_append (\"INFO: found '?' within bounds at offset %zu (address=%p) - will replace with '\\0'\\n\",\n                        off, (void *) qmark);\n    *qmark = '\\0';\n    _probe_log_append (\"ACTION: replaced '?' with '\\0' at offset %zu\\n\", off);\n  }\n  else\n  {\n    _probe_log_append (\"INFO: no '?' found within first %zu bytes\\n\", uri_len);\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  _probe_log_append (\"CALL: unescape_callback cls=%p callback=%p\\n\",\n                      (void *) daemon->unescape_callback_cls,\n                      (void *) daemon->unescape_callback);\n\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  _probe_log_append (\"RETURN: unescape_callback returned uri_len=%zu expected_url_len=%zu\\n\",\n                      uri_len, connection->rq.url_len);\n\n  /* Compare lengths and content as original code does; log memcmp result */\n  if ((uri_len != connection->rq.url_len))\n  {\n    _probe_log_append (\"RESULT: length mismatch: unescaped_len=%zu != rq.url_len=%zu -> fail\\n\",\n                        uri_len, connection->rq.url_len);\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  /* Perform memcmp and log the result */\n  {\n    int cmp = memcmp (uri, connection->rq.url, uri_len);\n    _probe_log_append (\"CALL: memcmp of %zu bytes returned %d\\n\", uri_len, cmp);\n    if (0 != cmp)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n      _probe_log_append (\"RESULT: memcmp != 0 -> fail\\n\");\n      return false;\n    }\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n  _probe_log_append (\"INFO: args pointer = %p (offset %zu from uri)\\n\",\n                      (void *) args, (size_t) (args - uri));\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n    _probe_log_append (\"RESULT: check_argument_match returned false -> fail\\n\");\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n\n  _probe_log_append (\"EXIT: check_uri_match returning true\\n\");\n  return true;\n}\n"
}