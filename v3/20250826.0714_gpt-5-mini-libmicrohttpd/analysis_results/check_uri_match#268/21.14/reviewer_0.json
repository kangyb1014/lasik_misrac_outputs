{
  "user_message": "An agent A claimed that the following check_uri_match code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of check_uri_match.\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation: The code explicitly sets uri[uri_len] = 0 (and may set *qmark = '\\0'), making 'uri' a null-terminated string, then calls memcmp(uri, connection->rq.url, uri_len) to compare it. Using memcmp to compare null-terminated strings is prohibited by MISRA C 2023 Rule 21.14. The violation occurs when uri_len == connection->rq.url_len and the memcmp is executed.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code explicitly null\u2011terminates uri (uri[uri_len] = 0 and possibly *qmark = '\\0') and then uses memcmp(uri, connection->rq.url, uri_len) to perform a string comparison. MISRA C 2023 Rule 21.14 prohibits the use of memcmp to compare null\u2011terminated strings. Even though an explicit length is passed to memcmp, the intent here is a string comparison and at least one operand (uri) is a null\u2011terminated C string, so this use violates the rule. (If both operands were purely binary buffers with no NUL semantics, memcmp would be acceptable; that is not the case here.)\n\nSuggested remedy: use a string comparison function sanctioned for null\u2011terminated strings, e.g. strncmp(uri, connection->rq.url, uri_len) together with the length check, or strcmp if both strings are guaranteed to be null\u2011terminated and lengths are known to match."
}