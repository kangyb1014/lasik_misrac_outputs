{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                    params->username_ext.value.len,\n                                    (char *) (buf + buf_used),\n                                    buf_size - buf_used);\nif (0 > res)\n  uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\nelse\n{\n  uname_info->username = (char *) (buf + buf_used);\n  uname_info->username_len = (size_t) res;\n  uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n  buf_used += uname_info->username_len + 1;\n}",
    "uname_info->username = (char *) (buf + buf_used);\nuname_info->username_len =\n  get_rq_param_unquoted_copy_z (&params->username,\n                                uname_info->username);\nbuf_used += uname_info->username_len + 1;\nuname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;",
    "uname_info->username = NULL;\nuname_info->username_len = 0;\nuname_info->userhash_hex = NULL;\nuname_info->userhash_hex_len = 0;\nuname_info->userhash_bin = NULL;",
    "uname_info->userhash_hex = (char *) (buf + buf_used);\nuname_info->userhash_hex_len =\n  get_rq_param_unquoted_copy_z (&params->username,\n                                uname_info->userhash_hex);\nbuf_used += uname_info->userhash_hex_len + 1;\nuname_info->userhash_bin = (uint8_t *) (buf + buf_used);\nres = MHD_hex_to_bin (uname_info->userhash_hex,\n                      uname_info->userhash_hex_len,\n                      uname_info->userhash_bin);\nif (res != uname_info->userhash_hex_len / 2)\n{\n  uname_info->userhash_bin = NULL;\n  uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n}\nelse\n{\n  /* Avoid pointers outside allocated region when the size is zero */\n  if (0 == res)\n    uname_info->userhash_bin = (uint8_t *) uname_info->username;\n  uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n  buf_used += res;\n}"
  ],
  "explanation": "Rule 17.8 forbids modifying function parameter variables themselves; it permits modifying the object referred to by a pointer parameter. In this function there are no direct assignments to the parameter variables params, uname_type, buf, or buf_size (no lines like \"params = ...\", \"uname_type = ...\", \"buf = ...\", or \"buf_size = ...\"). The fragments selected are all places where the contents of the object pointed to by the pointer parameter uname_info are written (initialization and per-branch assignments) or where data from params is passed to helper functions. These must be reviewed to ensure that only the pointed-to objects are modified (which is allowed) and that no pointer parameter itself is reassigned. Other code in the function (mhd_assert calls, local buf_used initialization and arithmetic, return statement, comparisons) does not modify any parameter variable and therefore does not need investigation under MISRA C 2023 Rule 17.8."
}