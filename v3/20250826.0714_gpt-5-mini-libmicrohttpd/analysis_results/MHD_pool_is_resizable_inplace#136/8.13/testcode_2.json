{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameters are non-const although the function only reads the pointed-to objects. Specifically, 'block' is declared as void * instead of const void * and 'pool' is declared as struct MemoryPool * instead of const struct MemoryPool *. Since the function does not modify *pool or *block (only reads their members/contents), these should be const-qualified (e.g. const struct MemoryPool *pool, const void *block).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_is_resizable_inplace code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_is_resizable_inplace as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_is_resizable_inplace:\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_is_resizable_inplace code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Probe helper: append a log message with the pool and block state. */\nstatic void\nmhd_log_pool_state (const struct MemoryPool *pool, const void *block,\n                    size_t block_size, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[%s] pool=%p, memory=%p, pos=%zu, end=%zu, size=%zu, block=%p, block_size=%zu\\n\",\n           stage,\n           (const void *) pool,\n           (const void *) pool->memory,\n           (size_t) pool->pos,\n           (size_t) pool->end,\n           (size_t) pool->size,\n           block,\n           (size_t) block_size);\n  fclose (f);\n}\n\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  /* Log entry state */\n  mhd_log_pool_state (pool, block, block_size, \"ENTRY\");\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n\n  /* Log after assertions */\n  mhd_log_pool_state (pool, block, block_size, \"AFTER_ASSERTS\");\n\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n\n    /* Log computed offset and pre-conditions inside the if-branch */\n    {\n      FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n      if (NULL != f)\n      {\n        fprintf (f, \"[INSIDE_IF] block_offset=%zu\\n\", block_offset);\n        fprintf (f, \"[INSIDE_IF] mp_ptr_le_(pool->memory, block)=%d\\n\", mp_ptr_le_ (pool->memory, block));\n        fprintf (f, \"[INSIDE_IF] checks: pool->size >= block_offset -> %d\\n\", (pool->size >= block_offset));\n        fprintf (f, \"[INSIDE_IF] checks: pool->size >= block_offset + block_size -> %d\\n\", (pool->size >= block_offset + block_size));\n        fclose (f);\n      }\n    }\n\n    const bool res = (pool->pos ==\n                      ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n\n    /* Log the evaluated result before returning */\n    {\n      FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n      if (NULL != f)\n      {\n        fprintf (f, \"[RETURN] res=%d (pos=%zu, rounded=%zu)\\n\",\n                 res,\n                 (size_t) pool->pos,\n                 (size_t) ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n        fclose (f);\n      }\n    }\n\n    return res;\n  }\n\n  /* Log the path for unallocated block */\n  {\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf (f, \"[RETURN_FALSE] Unallocated block cannot be resized in-place\\n\");\n      fclose (f);\n    }\n  }\n\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n"
}