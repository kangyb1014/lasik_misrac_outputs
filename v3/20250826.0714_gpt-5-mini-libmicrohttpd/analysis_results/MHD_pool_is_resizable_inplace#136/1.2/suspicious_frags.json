{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_is_resizable_inplace:\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert (pool->size >= block_offset);",
    "const size_t block_offset = mp_ptr_diff_ (block, pool->memory);",
    "return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));",
    "mhd_assert (pool->size >= pool->end - pool->pos);",
    "if (NULL != block)\n{",
    "return false; /* Unallocated blocks cannot be resized in-place */",
    "mhd_assert (pool->size >= block_size);",
    "mhd_assert (mp_ptr_le_ (pool->memory, block));",
    "mhd_assert (block != NULL || block_size == 0);",
    "mhd_assert (pool->end >= pool->pos);",
    "mhd_assert (pool->size >= block_offset + block_size);",
    "bool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)"
  ],
  "explanation": "The fragments above are the elements that may hide compiler-specific language extensions and therefore should be investigated: the use of the bool return type / true/false identifiers, the local declaration placed after executable statements, the various macro-like identifiers (mhd_assert, mp_ptr_diff_, mp_ptr_le_, ROUND_TO_ALIGN_PLUS_RED_ZONE) and the return of a macro-expanded expression. Other parts of the function do not warrant investigation for Rule 1.2 because they are plain standard-C constructs: pointer dereferences (pool->...), standard comparisons and arithmetic, use of NULL, if/return control flow, struct and size_t usage, logical operators (||), and block/bracing/ commenting. These standard constructs do not by themselves indicate a compiler language extension. If the investigator needs to confirm whether any of the macros or the bool usage rely on compiler-specific extensions, their definitions and the included headers should be inspected (those invocation sites are already included above)."
}