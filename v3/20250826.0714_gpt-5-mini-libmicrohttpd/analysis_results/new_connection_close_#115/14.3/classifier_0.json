{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of new_connection_close_:\n```c\nstatic void\nnew_connection_close_ (struct MHD_Daemon *daemon,\n                       struct MHD_Connection *connection)\n{\n  mhd_assert (connection->daemon == daemon);\n  mhd_assert (! connection->in_cleanup);\n  mhd_assert (NULL == connection->next);\n  mhd_assert (NULL == connection->nextX);\n#ifdef EPOLL_SUPPORT\n  mhd_assert (NULL == connection->nextE);\n#endif /* EPOLL_SUPPORT */\n\n#ifdef HTTPS_SUPPORT\n  if (NULL != connection->tls_session)\n  {\n    mhd_assert (0 != (daemon->options & MHD_USE_TLS));\n    gnutls_deinit (connection->tls_session);\n  }\n#endif /* HTTPS_SUPPORT */\n  MHD_socket_close_chk_ (connection->socket_fd);\n  MHD_ip_limit_del (daemon,\n                    connection->addr,\n                    connection->addr_len);\n  if (NULL != connection->addr)\n    free (connection->addr);\n  free (connection);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n  mhd_assert (NULL == connection->nextE);\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the expression appears inside an assertion macro (mhd_assert) and is not a controlling expression for selection or iteration. Rule 14.3 applies to controlling expressions (if/while/for/do/switch); a plain assertion check is not such a construct. Only if mhd_assert were implemented so that it expands into a control statement with an invariant controlling expression (e.g. an always-true/false loop or conditional) would a violation be possible."
}