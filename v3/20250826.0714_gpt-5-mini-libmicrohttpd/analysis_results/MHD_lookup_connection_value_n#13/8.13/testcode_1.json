{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a non-const pointer to the connection (struct MHD_Connection *connection) and uses a non-const iterator (struct MHD_HTTP_Req_Header *pos) even though the function only reads from those objects. Neither the connection nor the header nodes are modified in the body. According to MISRA C 2023 Rule 8.13 these should be const-qualified (e.g. const struct MHD_Connection *connection and const struct MHD_HTTP_Req_Header *pos). The other parameters (const char *key, const char **value_ptr) are appropriately const; value_size_ptr cannot be const because it is used as an output parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return MHD_NO;\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n        break;\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n        break;\n    }\n  }\n\n  if (NULL == pos)\n    return MHD_NO;\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_connection_value_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <stddef.h>\n\n/* Helper probe: append formatted log lines to /tmp/logs/133.txt. */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  f = fopen(\"/tmp/logs/133.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* Try to create directory and reopen. Ignore errors if creation fails. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n    f = fopen(\"/tmp/logs/133.txt\", \"a\");\n  }\n\n  if (NULL == f)\n    return;\n\n  va_start(ap, fmt);\n  (void)vfprintf(f, fmt, ap);\n  va_end(ap);\n  (void)fputc('\\n', f);\n  (void)fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  mhd_log_probe(\"MHD_lookup_connection_value_n: entry: connection=%p, kind=%u, key=%p, key_size=%zu, value_ptr=%p, value_size_ptr=%p\",\n                (void *)connection, (unsigned)kind, (const void *)key, key_size,\n                (const void *)value_ptr, (const void *)value_size_ptr);\n\n  if (NULL == connection)\n  {\n    mhd_log_probe(\"MHD_lookup_connection_value_n: connection == NULL -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (NULL == key)\n  {\n    mhd_log_probe(\"MHD_lookup_connection_value_n: searching for header with header==NULL\");\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      mhd_log_probe(\"iter: pos=%p, header=%p, header_size=%zu, kind=%u, pos->kind=%u, value=%p, value_size=%zu\",\n                    (void *)pos, (const void *)pos->header, pos->header_size,\n                    (unsigned)kind, (unsigned)pos->kind, (const void *)pos->value, pos->value_size);\n\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n      {\n        mhd_log_probe(\"iter: match (header==NULL) at pos=%p -> breaking\", (void *)pos);\n        break;\n      }\n    }\n  }\n  else\n  {\n    /* key is not NULL */\n    /* Log the provided key as a possibly non-NUL-terminated binary with its size. */\n    mhd_log_probe(\"MHD_lookup_connection_value_n: searching for header named key='%.*s' (size=%zu)\", (int)key_size, key, key_size);\n\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      mhd_log_probe(\"iter: pos=%p, header=%p, header_size=%zu, kind=%u, pos->kind=%u, value=%p, value_size=%zu\",\n                    (void *)pos, (const void *)pos->header, pos->header_size,\n                    (unsigned)kind, (unsigned)pos->kind, (const void *)pos->value, pos->value_size);\n\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n      {\n        mhd_log_probe(\"iter: match (key comparison succeeded) at pos=%p -> breaking\", (void *)pos);\n        break;\n      }\n      else\n      {\n        /* Log which sub-condition failed for easier debugging. */\n        int cond_kind = (0 != (kind & pos->kind));\n        int cond_size = (key_size == pos->header_size);\n        int cond_ptr_equal = (key == pos->header);\n        int cond_caseless = MHD_str_equal_caseless_bin_n_(key, pos->header, key_size);\n        mhd_log_probe(\"iter: conditions: kind_match=%d, size_match=%d, ptr_equal=%d, caseless_eq=%d\",\n                      cond_kind, cond_size, cond_ptr_equal, cond_caseless);\n      }\n    }\n  }\n\n  if (NULL == pos)\n  {\n    mhd_log_probe(\"MHD_lookup_connection_value_n: no matching header found -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (NULL != value_ptr)\n  {\n    *value_ptr = pos->value;\n    mhd_log_probe(\"MHD_lookup_connection_value_n: setting *value_ptr=%p\", (const void *)pos->value);\n  }\n\n  if (NULL != value_size_ptr)\n  {\n    *value_size_ptr = pos->value_size;\n    mhd_log_probe(\"MHD_lookup_connection_value_n: setting *value_size_ptr=%zu\", pos->value_size);\n  }\n\n  mhd_log_probe(\"MHD_lookup_connection_value_n: match found at pos=%p -> returning MHD_YES\", (void *)pos);\n\n  return MHD_YES;\n}\n"
}