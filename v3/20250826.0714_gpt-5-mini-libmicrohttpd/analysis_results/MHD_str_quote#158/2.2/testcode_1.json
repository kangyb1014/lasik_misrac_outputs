{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion checks a provable invariant: r and w are initialized to 0 and in every loop iteration r is incremented once while w is incremented at least once (twice when escaping). Therefore at the point of the assertion w >= r always holds; the assertion only documents this invariant. Because the assertion is an operation that, when present, will always succeed, its removal would not change program behaviour \u2014 hence it is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_quote code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_quote as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_quote:\n```c\nsize_t\nMHD_str_quote (const char *unquoted,\n               size_t unquoted_len,\n               char *result,\n               size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  r = 0;\n  w = 0;\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (unquoted_len * 2 <= buf_size)\n  {\n    /* Fast loop: the output will fit the buffer with any input string content */\n    while (unquoted_len > r)\n    {\n      const char chr = unquoted[r++];\n      if (('\\\\' == chr) || ('\\\"' == chr))\n        result[w++] = '\\\\'; /* Escape current char */\n      result[w++] = chr;\n    }\n  }\n  else\n  {\n    if (unquoted_len > buf_size)\n      return 0; /* Quick fail: the output buffer is too small */\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (1)\n  {\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n    while (unquoted_len > r)\n    {\n      if (buf_size <= w)\n        return 0; /* The output buffer is too small */\n      else\n      {\n        const char chr = unquoted[r++];\n        if (('\\\\' == chr) || ('\\\"' == chr))\n        {\n          result[w++] = '\\\\'; /* Escape current char */\n          if (buf_size <= w)\n            return 0; /* The output buffer is too small */\n        }\n        result[w++] = chr;\n      }\n    }\n  }\n\n  mhd_assert (w >= r);\n  mhd_assert (w <= r * 2);\n  return w;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_quote code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Helper: append a log line to /tmp/logs/1582.txt. Keeps behaviour (best-effort) if file cannot be opened. */\nstatic void\nmhd_log_state(const char *tag,\n              size_t r,\n              size_t w,\n              size_t buf_size,\n              size_t unquoted_len,\n              int chr_valid,\n              unsigned char chr)\n{\n  FILE *f = fopen(\"/tmp/logs/1582.txt\", \"a\");\n  if (f == NULL)\n    return;\n  if (chr_valid)\n    fprintf(f, \"%s: r=%zu w=%zu buf_size=%zu unquoted_len=%zu chr=0x%02x '%c'\\n\",\n            tag, r, w, buf_size, unquoted_len, chr, (chr >= 32 && chr < 127) ? (char)chr : '.');\n  else\n    fprintf(f, \"%s: r=%zu w=%zu buf_size=%zu unquoted_len=%zu chr=<N/A>\\n\",\n            tag, r, w, buf_size, unquoted_len);\n  fclose(f);\n}\n\nsize_t\nMHD_str_quote (const char *unquoted,\n               size_t unquoted_len,\n               char *result,\n               size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  r = 0;\n  w = 0;\n\n  /* initial state */\n  mhd_log_state(\"enter_MHD_str_quote\", r, w, buf_size, unquoted_len, 0, 0);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (unquoted_len * 2 <= buf_size)\n  {\n    mhd_log_state(\"fast_path_taken\", r, w, buf_size, unquoted_len, 0, 0);\n    /* Fast loop: the output will fit the buffer with any input string content */\n    while (unquoted_len > r)\n    {\n      const char chr = unquoted[r++];\n      if (('\\\\' == chr) || ('\\\"' == chr))\n        result[w++] = '\\\\'; /* Escape current char */\n      result[w++] = chr;\n      /* log after modifications for this iteration */\n      mhd_log_state(\"fast_loop_iter\", r, w, buf_size, unquoted_len, 1, (unsigned char)chr);\n    }\n  }\n  else\n  {\n    mhd_log_state(\"fast_path_not_taken\", r, w, buf_size, unquoted_len, 0, 0);\n    if (unquoted_len > buf_size) {\n      mhd_log_state(\"early_fail_unquoted_len_gt_buf_size\", r, w, buf_size, unquoted_len, 0, 0);\n      return 0; /* Quick fail: the output buffer is too small */\n    }\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (1)\n  {\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n    while (unquoted_len > r)\n    {\n      if (buf_size <= w) {\n        mhd_log_state(\"early_fail_buf_size_le_w_before_iteration\", r, w, buf_size, unquoted_len, 0, 0);\n        return 0; /* The output buffer is too small */\n      }\n      else\n      {\n        const char chr = unquoted[r++];\n        if (('\\\\' == chr) || ('\\\"' == chr))\n        {\n          result[w++] = '\\\\'; /* Escape current char */\n          mhd_log_state(\"added_escape\", r, w, buf_size, unquoted_len, 1, (unsigned char)chr);\n          if (buf_size <= w) {\n            mhd_log_state(\"early_fail_buf_size_le_w_after_escape\", r, w, buf_size, unquoted_len, 1, (unsigned char)chr);\n            return 0; /* The output buffer is too small */\n          }\n        }\n        result[w++] = chr;\n        /* log after modifications for this iteration */\n        mhd_log_state(\"slow_loop_iter\", r, w, buf_size, unquoted_len, 1, (unsigned char)chr);\n      }\n    }\n  }\n\n  /* Log values right before the assertions and return */\n  mhd_log_state(\"before_asserts\", r, w, buf_size, unquoted_len, 0, 0);\n\n  mhd_assert (w >= r);\n  mhd_assert (w <= r * 2);\n\n  mhd_log_state(\"exit_MHD_str_quote\", r, w, buf_size, unquoted_len, 0, 0);\n  return w;\n}\n"
}