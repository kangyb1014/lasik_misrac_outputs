{
  "user_message": "An agent A claimed that the following MHD_str_pct_decode_in_place_strict_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_str_pct_decode_in_place_strict_.\n```c\nsize_t\nMHD_str_pct_decode_in_place_strict_ (char *str)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t res;\n  bool broken;\n\n  res = MHD_str_pct_decode_in_place_lenient_ (str, &broken);\n  if (broken)\n  {\n    res = 0;\n    str[0] = 0;\n  }\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n        return 0;\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n          return 0;\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n            return 0;\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n        }\n      }\n    }\n    else\n      str[w++] = chr;\n  }\n  str[w] = 0;\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe nested casts in the expression are redundant and can be removed without changing behaviour. Specifically, ((unsigned int) h), the surrounding ((uint8_t) ((unsigned int) h)), and similar casts on l do not affect the result because h and l are non\u2011negative small integers (checked earlier) and C integer promotions make the shift and bitwise OR behave the same without those casts. Those cast operations are executed but removable without changing program behaviour, so they constitute dead code and violate MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nentry: non-small-code branch. starting decode\ndone decoding: final length w=0\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x61 ('a')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x61 ('a')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x61 ('a')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x62 ('b')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x62 ('b')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x62 ('b')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x63 ('c')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x63 ('c')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x63 ('c')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x64 ('d')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x64 ('d')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x64 ('d')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x6c ('l')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x6c ('l')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x6c ('l')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x6d ('m')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x6d ('m')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x6d ('m')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x6e ('n')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x6e ('n')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x6e ('n')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x6f ('o')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x6f ('o')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x6f ('o')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x77 ('w')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x77 ('w')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x77 ('w')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x78 ('x')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x78 ('x')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x78 ('x')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x79 ('y')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x79 ('y')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x79 ('y')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x7a ('z')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x7a ('z')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x7a ('z')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x41 ('A')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x41 ('A')\ncopied non-percent chr to output, w now 2\nloop: r=3, w=2, chr=0x41 ('A')\ncopied non-percent chr to output, w now 3\ndone decoding: final length w=3\nentry: non-small-code branch. starting decode\nloop: r=1, w=0, chr=0x47 ('G')\ncopied non-percent chr to output, w now 1\nloop: r=2, w=1, chr=0x47 ('G')\ncopied \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA R2.2 prohibits dead code (operations that are executed but removable without affecting program behaviour). The nested casts in the expression are not demonstrably dead: they affect the interpretation, integer promotion and definedness of the intermediate computations and/or are defensive to ensure well\u2011defined unsigned/truncating behaviour. Removing them can change behaviour in plausible situations (e.g. different signedness/promotion rules, larger values returned by toxdigitvalue, or to avoid UB from signed left shifts). Moreover, R2.2 is intended to catch truly dead/unnecessary executed statements (e.g. assignments whose removal has no effect), not merely redundant\u2011looking casts whose presence can be required to guarantee defined semantics. Therefore the claim that those casts constitute dead code violating MISRA C 2023 Rule 2.2 is not correct."
}