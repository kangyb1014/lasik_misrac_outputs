{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_str_pct_decode_in_place_strict_:\n```c\nsize_t\nMHD_str_pct_decode_in_place_strict_ (char *str)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t res;\n  bool broken;\n\n  res = MHD_str_pct_decode_in_place_lenient_ (str, &broken);\n  if (broken)\n  {\n    res = 0;\n    str[0] = 0;\n  }\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n        return 0;\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n          return 0;\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n            return 0;\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n        }\n      }\n    }\n    else\n      str[w++] = chr;\n  }\n  str[w] = 0;\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (broken)\n  {\n    res = 0;\n    str[0] = 0;\n  }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "When MHD_FAVOR_SMALL_CODE is defined and MHD_str_pct_decode_in_place_lenient_(str, &broken) returns with broken == true, the fragment sets res = 0 and str[0] = 0 to produce an empty string returned to the caller. Removing the assignment str[0] = 0 would change the observable program behaviour (the caller would see the original contents of str instead of an empty string), so the assignment is not dead code."
}