{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression contains multiple redundant casts that are executed but can be removed without changing behaviour. Specifically: ((unsigned int) h) then ((uint8_t) ((unsigned int) h)) (and a repeated (uint8_t) around that), the cast of l via ((uint8_t) ((unsigned int) l)), and the outer (unsigned char) cast are unnecessary given the intended 4-bit/4-bit composition. Removing these redundant conversions (e.g. replacing the whole expression with (unsigned char)((h << 4) | l) with appropriate masking) does not change the program behaviour for valid digit values, so those cast operations constitute dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_pct_decode_strict_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1572.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_pct_decode_strict_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_pct_decode_strict_n_:\n```c\nsize_t\nMHD_str_pct_decode_strict_n_ (const char *pct_encoded,\n                              size_t pct_encoded_len,\n                              char *decoded,\n                              size_t buf_size)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  bool broken;\n  size_t res;\n\n  res = MHD_str_pct_decode_lenient_n_ (pct_encoded, pct_encoded_len, decoded,\n                                       buf_size, &broken);\n  if (broken)\n    return 0;\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n\n  if (buf_size >= pct_encoded_len)\n  {\n    while (r < pct_encoded_len)\n    {\n      const char chr = pct_encoded[r];\n      if ('%' == chr)\n      {\n        if (2 > pct_encoded_len - r)\n          return 0;\n        else\n        {\n          const int h = toxdigitvalue (pct_encoded[++r]);\n          const int l = toxdigitvalue (pct_encoded[++r]);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n            return 0;\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          decoded[w] = (char) out;\n        }\n      }\n      else\n        decoded[w] = chr;\n      ++r;\n      ++w;\n    }\n    return w;\n  }\n\n  while (r < pct_encoded_len)\n  {\n    const char chr = pct_encoded[r];\n    if (w >= buf_size)\n      return 0;\n    if ('%' == chr)\n    {\n      if (2 > pct_encoded_len - r)\n        return 0;\n      else\n      {\n        const int h = toxdigitvalue (pct_encoded[++r]);\n        const int l = toxdigitvalue (pct_encoded[++r]);\n        unsigned char out;\n        if ((0 > h) || (0 > l))\n          return 0;\n        out =\n          (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                           | ((uint8_t) ((unsigned int) l)));\n        decoded[w] = (char) out;\n      }\n    }\n    else\n      decoded[w] = chr;\n    ++r;\n    ++w;\n  }\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n```\n</target_code>\nPlease provide the modified MHD_str_pct_decode_strict_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Forward declaration of external helper used by the small-code variant. */\nextern size_t MHD_str_pct_decode_lenient_n_ (const char *pct_encoded,\n                                             size_t pct_encoded_len,\n                                             char *decoded,\n                                             size_t buf_size,\n                                             bool *broken);\n\n/* Forward declaration of the hex digit helper used by this function. */\nextern int toxdigitvalue (char c);\n\n/* Simple logging helper that appends to the required log file. */\nstatic void mhd_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1572.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nsize_t\nMHD_str_pct_decode_strict_n_ (const char *pct_encoded,\n                              size_t pct_encoded_len,\n                              char *decoded,\n                              size_t buf_size)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  bool broken;\n  size_t res;\n\n  mhd_log (\"ENTER MHD_str_pct_decode_strict_n_: pct_encoded_len=%zu, buf_size=%zu, small_code=1\", pct_encoded_len, buf_size);\n  res = MHD_str_pct_decode_lenient_n_ (pct_encoded, pct_encoded_len, decoded,\n                                       buf_size, &broken);\n  mhd_log (\"CALL MHD_str_pct_decode_lenient_n_ returned res=%zu, broken=%d\", res, broken ? 1 : 0);\n  if (broken)\n  {\n    mhd_log (\"EXIT MHD_str_pct_decode_strict_n_: broken -> return 0\");\n    return 0;\n  }\n  mhd_log (\"EXIT MHD_str_pct_decode_strict_n_: return %zu\", res);\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n\n  mhd_log (\"ENTER MHD_str_pct_decode_strict_n_: pct_encoded_len=%zu, buf_size=%zu, small_code=0\", pct_encoded_len, buf_size);\n\n  if (buf_size >= pct_encoded_len)\n  {\n    mhd_log (\"branch: buf_size >= pct_encoded_len\");\n    while (r < pct_encoded_len)\n    {\n      const char chr = pct_encoded[r];\n      mhd_log (\"loop start: r=%zu, w=%zu, chr='%c' (0x%02x)\", r, w, (chr >= 32 && chr < 127) ? chr : '.', (unsigned char) chr);\n      if ('%' == chr)\n      {\n        if (2 > pct_encoded_len - r)\n        {\n          mhd_log (\"early exit: not enough characters after '%%' at r=%zu -> return 0\", r);\n          return 0;\n        }\n        else\n        {\n          const int h = toxdigitvalue (pct_encoded[++r]);\n          const int l = toxdigitvalue (pct_encoded[++r]);\n          unsigned char out;\n\n          mhd_log (\"after toxdigitvalue: h=%d, l=%d (raw) at r=%zu\", h, l, r);\n\n          if ((0 > h) || (0 > l))\n          {\n            mhd_log (\"invalid hex digit: h=%d, l=%d -> return 0\", h, l);\n            return 0;\n          }\n\n          /* Compute intermediate values again for logging without changing behaviour. */\n          {\n            unsigned int uh = (unsigned int) h;\n            uint8_t ub_h = (uint8_t) uh;\n            uint8_t shifted = (uint8_t) (ub_h << 4);\n            unsigned int ul = (unsigned int) l;\n            uint8_t ub_l = (uint8_t) ul;\n            uint8_t combined = (uint8_t) (shifted | ub_l);\n            unsigned char out_calc = (unsigned char) combined;\n\n            mhd_log (\"intermediate casts: (unsigned int)h=%u, (uint8_t)h=%u, shifted=(uint8_t)(...<<4)=%u, (unsigned int)l=%u, (uint8_t)l=%u, combined=%u, out_calc=%u\",\n                     uh, (unsigned int) ub_h, (unsigned int) shifted, ul, (unsigned int) ub_l, (unsigned int) combined, (unsigned int) out_calc);\n          }\n\n          /* Preserve original expression and assignment exactly as in target code. */\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n\n          mhd_log (\"final out value assigned: out=%u (0x%02x), writing to decoded[w] at w=%zu\", (unsigned int) out, (unsigned int) out, w);\n          decoded[w] = (char) out;\n        }\n      }\n      else\n      {\n        decoded[w] = chr;\n        mhd_log (\"non-%% char copied: decoded[w]=%c (0x%02x)\", (chr >= 32 && chr < 127) ? chr : '.', (unsigned char) chr);\n      }\n      ++r;\n      ++w;\n    }\n    mhd_log (\"EXIT MHD_str_pct_decode_strict_n_: return %zu\", w);\n    return w;\n  }\n\n  mhd_log (\"branch: buf_size < pct_encoded_len\");\n\n  while (r < pct_encoded_len)\n  {\n    const char chr = pct_encoded[r];\n    mhd_log (\"loop start: r=%zu, w=%zu, chr='%c' (0x%02x)\", r, w, (chr >= 32 && chr < 127) ? chr : '.', (unsigned char) chr);\n    if (w >= buf_size)\n    {\n      mhd_log (\"buffer overflow: w=%zu >= buf_size=%zu -> return 0\", w, buf_size);\n      return 0;\n    }\n    if ('%' == chr)\n    {\n      if (2 > pct_encoded_len - r)\n      {\n        mhd_log (\"early exit: not enough characters after '%%' at r=%zu -> return 0\", r);\n        return 0;\n      }\n      else\n      {\n        const int h = toxdigitvalue (pct_encoded[++r]);\n        const int l = toxdigitvalue (pct_encoded[++r]);\n        unsigned char out;\n\n        mhd_log (\"after toxdigitvalue: h=%d, l=%d (raw) at r=%zu\", h, l, r);\n\n        if ((0 > h) || (0 > l))\n        {\n          mhd_log (\"invalid hex digit: h=%d, l=%d -> return 0\", h, l);\n          return 0;\n        }\n\n        /* Compute intermediate values again for logging without changing behaviour. */\n        {\n          unsigned int uh = (unsigned int) h;\n          uint8_t ub_h = (uint8_t) uh;\n          uint8_t shifted = (uint8_t) (ub_h << 4);\n          unsigned int ul = (unsigned int) l;\n          uint8_t ub_l = (uint8_t) ul;\n          uint8_t combined = (uint8_t) (shifted | ub_l);\n          unsigned char out_calc = (unsigned char) combined;\n\n          mhd_log (\"intermediate casts: (unsigned int)h=%u, (uint8_t)h=%u, shifted=(uint8_t)(...<<4)=%u, (unsigned int)l=%u, (uint8_t)l=%u, combined=%u, out_calc=%u\",\n                   uh, (unsigned int) ub_h, (unsigned int) shifted, ul, (unsigned int) ub_l, (unsigned int) combined, (unsigned int) out_calc);\n        }\n\n        /* Preserve original expression and assignment exactly as in target code. */\n        out =\n          (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                           | ((uint8_t) ((unsigned int) l)));\n\n        mhd_log (\"final out value assigned: out=%u (0x%02x), writing to decoded[w] at w=%zu\", (unsigned int) out, (unsigned int) out, w);\n        decoded[w] = (char) out;\n      }\n    }\n    else\n    {\n      decoded[w] = chr;\n      mhd_log (\"non-%% char copied: decoded[w]=%c (0x%02x)\", (chr >= 32 && chr < 127) ? chr : '.', (unsigned char) chr);\n    }\n    ++r;\n    ++w;\n  }\n  mhd_log (\"EXIT MHD_str_pct_decode_strict_n_: return %zu\", w);\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n"
}