{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf ctx->buffer is declared with a const-qualified type (for example: const uint8_t buffer[SHA256_BLOCK_SIZE] or const uint8_t *buffer) then the cast ((uint8_t *) ctx->buffer) removes the const qualifier and is used as the destination of memcpy \u2014 this discards const and allows writing to an object that was declared const, violating MISRA C 2023 Rule 8.13. (If ctx->buffer is already a non-const type, the cast is unnecessary but does not violate Rule 8.13.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3003.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append a log entry to /tmp/logs/3003.txt\n   Keeps logging lightweight and does not alter the logic of MHD_SHA256_update. */\nstatic void\nmhd_sha256_log_probe(const char *stage,\n                     struct Sha256Ctx *ctx,\n                     const uint8_t *data,\n                     size_t length,\n                     unsigned bytes_have,\n                     size_t bytes_left,\n                     const void *dest,\n                     const void *src,\n                     size_t n)\n{\n  FILE *f = fopen(\"/tmp/logs/3003.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  /* Log control flow and all relevant state that helps reproduce the\n     violation scenario (pointer values, counts, buffer pointers, sizes).\n     Note: const-qualification is a compile-time property; at runtime we\n     record the buffer pointer and the destination pointer used after a\n     cast so reviewers can correlate source-level constness with runtime\n     behavior. */\n  fprintf(f,\n          \"[%s] ctx=%p buffer=%p count=%zu data=%p length=%zu bytes_have=%u bytes_left=%zu dest=%p src=%p n=%zu\\n\",\n          stage,\n          (void *)ctx,\n          (void *)ctx->buffer,\n          (size_t)ctx->count,\n          (void *)data,\n          length,\n          bytes_have,\n          bytes_left,\n          dest,\n          src,\n          n);\n  fclose(f);\n}\n\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log entry with initial parameters */\n  mhd_sha256_log_probe(\"entry\", ctx, data, length, 0u, 0u, NULL, NULL, 0u);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_sha256_log_probe(\"early_return_zero_length\", ctx, data, length, 0u, 0u, NULL, NULL, 0u);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  /* Log after computing bytes_have and updating count */\n  mhd_sha256_log_probe(\"after_count_update\", ctx, data, length, bytes_have, 0u, NULL, NULL, 0u);\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      /* Log just before memcpy that uses an explicit cast. This is the\n         site where a cast from a possibly const-qualified buffer to\n         uint8_t * can discard const and later be used as destination of\n         memcpy. Record the dest pointer value that results from the cast. */\n      void *dest1 = (void *)(((uint8_t *) ctx->buffer) + bytes_have);\n      mhd_sha256_log_probe(\"pre_memcpy_partial_to_buffer\",\n                           ctx, data, length, bytes_have, (size_t)bytes_left,\n                           dest1, (const void *)data, (size_t)bytes_left);\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Log immediately after the memcpy */\n      mhd_sha256_log_probe(\"post_memcpy_partial_to_buffer\",\n                           ctx, data + bytes_left, length - bytes_left, bytes_have, (size_t)bytes_left,\n                           dest1, (const void *)(data), (size_t)bytes_left);\n\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n\n      /* Log the transform call and state after it */\n      mhd_sha256_log_probe(\"after_transform_from_buffer\", ctx, data, length, 0u, 0u, NULL, NULL, 0u);\n\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    /* Log each direct-transform invocation (data block pointer and length) */\n    mhd_sha256_log_probe(\"pre_transform_direct_block\", ctx, data, length, bytes_have, (size_t)SHA256_BLOCK_SIZE,\n                         (const void *)ctx->buffer, (const void *)data, (size_t)SHA256_BLOCK_SIZE);\n\n    sha256_transform (ctx->H, data);\n\n    mhd_sha256_log_probe(\"post_transform_direct_block\", ctx, data + SHA256_BLOCK_SIZE, length - SHA256_BLOCK_SIZE,\n                         bytes_have, 0u, NULL, (const void *)data, (size_t)SHA256_BLOCK_SIZE);\n\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    void *dest2 = (void *)(((uint8_t *) ctx->buffer) + bytes_have);\n    mhd_sha256_log_probe(\"pre_memcpy_remaining_to_buffer\",\n                         ctx, data, length, bytes_have, length,\n                         dest2, (const void *)data, length);\n\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n\n    mhd_sha256_log_probe(\"post_memcpy_remaining_to_buffer\",\n                         ctx, data, length, bytes_have, length,\n                         dest2, (const void *)data, length);\n  }\n\n  /* Log exit state */\n  mhd_sha256_log_probe(\"exit\", ctx, data, length, bytes_have, 0u, NULL, NULL, 0u);\n}\n"
}