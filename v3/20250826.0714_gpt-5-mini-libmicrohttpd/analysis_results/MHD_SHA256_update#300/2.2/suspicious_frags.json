{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments in the supplied function appear to meet MISRA C 2023 Rule 2.2 (dead code). Rationale by code region:\n\n- mhd_assert((data != NULL) || (length == 0));\n  This is a runtime assertion macro. If compiled in it affects program behaviour by detecting invalid usage; if compiled out (common in release builds) it is not present, but that conditional presence is a build-mode choice, not dead code. Its removal in a build that includes it would change behaviour (remove the check), so it is not dead code.\n\n- #ifndef MHD_FAVOR_SMALL_CODE / if (0 == length) return;\n  The early-return shortcut is an active path when the macro is not defined. Whether the macro is defined is a build-time configuration; neither the if nor the preprocessor branch is dead. Removing the conditional return would change runtime behaviour for length==0 calls.\n\n- bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1)); and ctx->count += length;\n  Both are used to determine buffer offsets and to maintain the running total of processed bytes (used later in finalization). Removing either statement would affect subsequent logic and final digest calculation, so they are necessary.\n\n- The if (0 != bytes_have) block (memcpy, sha256_transform, bytes_have = 0)\n  This handles filling a partial buffer to complete a full block. All operations here (the memcpy, transform call and resetting bytes_have) are necessary for correct block processing and for correct offset for any remaining partial data; they are not removable without changing behaviour.\n\n- while (SHA256_BLOCK_SIZE <= length) { sha256_transform(...); ... }\n  This processes full input blocks directly. Removing or altering this loop would change the output.\n\n- if (0 != length) memcpy(...)\n  Copies the trailing partial block into ctx->buffer for later processing; required for correctness.\n\n- Casts such as ((uint8_t *) ctx->buffer) are implementation details for pointer arithmetic and are not executed code that could be \u2018\u2018dead\u2019\u2019 in the sense of Rule 2.2.\n\nAdditionally, there is no unreachable code in the snippet (every branch can be entered depending on inputs and build configuration). Therefore there are no executed operations whose removal would not affect program behaviour; no fragments need investigation for Rule 2.2 in this function."
}