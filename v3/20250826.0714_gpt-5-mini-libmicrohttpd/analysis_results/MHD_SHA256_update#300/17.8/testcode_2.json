{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'data += SHA256_BLOCK_SIZE;' modifies the function parameter 'data' (a pointer parameter declared as 'const uint8_t *data'). MISRA C 2023 Rule 17.8 prohibits modifying function parameters\u2014the pointer itself shall not be changed (only the object it points to may be modified). This is a violation. A compliant fix is to use a local pointer copy (e.g. 'const uint8_t *p = data;') and advance 'p' instead of modifying the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3007.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging function: append human-readable logs to /tmp/logs/3007.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3007.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  mhd_probe_log(\"ENTER MHD_SHA256_update: ctx=%p data=%p length=%zu\", (void *)ctx, (void *)data, length);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length) {\n    mhd_probe_log(\"SHORTCUT: length == 0 -> return\");\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  mhd_probe_log(\"bytes_have=%u ctx->count_before=%llu length=%zu\", bytes_have, (unsigned long long)ctx->count, length);\n  ctx->count += length;\n  mhd_probe_log(\"ctx->count_after=%llu\", (unsigned long long)ctx->count);\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    mhd_probe_log(\"entered partial-buffer branch: bytes_have=%u bytes_left=%u length=%zu data=%p\", bytes_have, bytes_left, length, (void *)data);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      mhd_probe_log(\"will memcpy %u bytes into buffer at offset %u from data=%p\", bytes_left, bytes_have, (void *)data);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      mhd_probe_log(\"memcpy done: buffer+%u <- data(%p) [%u bytes]\", bytes_have, (void *)data, bytes_left);\n      /* Violation scenario: advancing the function parameter 'data' */\n      data += bytes_left;\n      length -= bytes_left;\n      mhd_probe_log(\"advanced data pointer -> data=%p length=%zu\", (void *)data, length);\n      sha256_transform (ctx->H, ctx->buffer);\n      mhd_probe_log(\"sha256_transform called on ctx->buffer; bytes_have will be reset to 0\");\n      bytes_have = 0;\n    }\n    else\n    {\n      mhd_probe_log(\"not enough new data to complete block: bytes_left=%u length=%zu -> will copy into buffer and return\", bytes_left, length);\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_probe_log(\"processing full block: data=%p length=%zu\", (void *)data, length);\n    sha256_transform (ctx->H, data);\n    /* Violation scenario: advancing the function parameter 'data' */\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n    mhd_probe_log(\"after processing block: data=%p length=%zu\", (void *)data, length);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_probe_log(\"final partial copy: bytes_have=%u length=%zu data=%p -> memcpy to buffer+%u\", bytes_have, length, (void *)data, bytes_have);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n    mhd_probe_log(\"final memcpy done\");\n  }\n\n  mhd_probe_log(\"EXIT MHD_SHA256_update: ctx=%p final_length=%zu final_data=%p\", (void *)ctx, length, (void *)data);\n}\n"
}