{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'length -= SHA256_BLOCK_SIZE;' modifies the function parameter 'length' inside MHD_SHA256_update. Rule 17.8 forbids modifying function parameters (the object referred to by a pointer may be modified, but not the parameter itself).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3007.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper. Appends logs to /tmp/logs/3007.txt. */\nstatic void\nmhd_3007_log(const char *event,\n             const void *ctx_ptr,\n             const uint8_t *data_ptr,\n             size_t length,\n             unsigned bytes_have,\n             unsigned bytes_left)\n{\n  FILE *f = fopen(\"/tmp/logs/3007.txt\", \"a\");\n  if (f == NULL)\n  {\n    return; /* Best-effort logging; do not affect original logic */\n  }\n  fprintf(f, \"EVENT: %s\\n\", event);\n  fprintf(f, \"  ctx=%p data=%p length=%zu bytes_have=%u bytes_left=%u\\n\",\n          ctx_ptr, (const void *) data_ptr, length, bytes_have, bytes_left);\n  fclose(f);\n}\n\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log entry state */\n  mhd_3007_log(\"enter\", (const void *) ctx, data, length, 0u, 0u);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_3007_log(\"shortcut_return_zero_length\", (const void *) ctx, data, length, 0u, 0u);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n\n  /* Log before modifying ctx->count */\n  mhd_3007_log(\"before_count_add\", (const void *) ctx, data, length, bytes_have, 0u);\n\n  ctx->count += length;\n\n  /* Log after modifying ctx->count */\n  mhd_3007_log(\"after_count_add\", (const void *) ctx, data, length, bytes_have, 0u);\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    mhd_3007_log(\"have_bytes_branch_enter\", (const void *) ctx, data, length, bytes_have, bytes_left);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Log right before modifying parameter 'data' and 'length' */\n      mhd_3007_log(\"before_length_minus_bytes_left\", (const void *) ctx, data, length, bytes_have, bytes_left);\n\n      data += bytes_left;\n      length -= bytes_left; /* <-- modification of parameter 'length' (violation scenario) */\n\n      /* Log after modifying 'length' */\n      mhd_3007_log(\"after_length_minus_bytes_left\", (const void *) ctx, data, length, bytes_have, bytes_left);\n\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n\n      mhd_3007_log(\"after_process_full_block\", (const void *) ctx, data, length, bytes_have, 0u);\n    }\n    else\n    {\n      mhd_3007_log(\"not_enough_to_fill_buffer\", (const void *) ctx, data, length, bytes_have, bytes_left);\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_3007_log(\"while_loop_iter_before_transform\", (const void *) ctx, data, length, bytes_have, SHA256_BLOCK_SIZE);\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n\n    /* Log right before modifying 'length' in loop */\n    mhd_3007_log(\"while_loop_before_length_minus_block\", (const void *) ctx, data, length, bytes_have, SHA256_BLOCK_SIZE);\n\n    length -= SHA256_BLOCK_SIZE; /* <-- modification of parameter 'length' (violation scenario) */\n\n    /* Log after modifying 'length' in loop */\n    mhd_3007_log(\"while_loop_after_length_minus_block\", (const void *) ctx, data, length, bytes_have, SHA256_BLOCK_SIZE);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_3007_log(\"copy_incomplete_block\", (const void *) ctx, data, length, bytes_have, 0u);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  /* Final state log */\n  mhd_3007_log(\"exit\", (const void *) ctx, data, length, bytes_have, 0u);\n}\n"
}