{
  "user_message": "An agent A claimed that the following MHD_SHA256_update code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_SHA256_update.\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'data' (declared as 'const uint8_t *data') is modified with the statement 'data += bytes_left;'. MISRA C 2023 Rule 17.8 states a function parameter shall not be modified (the pointer itself must not be changed). This is a direct violation. Fix by introducing a local pointer (e.g. 'const uint8_t *p = data;') and update 'p' instead, or update an index/offset variable rather than the parameter.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e901b length=3 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=3\ncopying remainder to buffer: bytes_have=0 length=3 data=0x5648f42e901b\nEXIT: MHD_SHA256_update ctx=0x7ffd8ce00450 final_data_pointer=0x5648f42e901b final_length=3 ctx_count=3\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e901f length=56 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=56\ncopying remainder to buffer: bytes_have=0 length=56 data=0x5648f42e901f\nEXIT: MHD_SHA256_update ctx=0x7ffd8ce00450 final_data_pointer=0x5648f42e901f final_length=56 ctx_count=56\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42eae0d length=0 ctx_count_before=0\nEXIT (shortcut): length==0\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e9058 length=28 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=28\ncopying remainder to buffer: bytes_have=0 length=28 data=0x5648f42e9058\nEXIT: MHD_SHA256_update ctx=0x7ffd8ce00450 final_data_pointer=0x5648f42e9058 final_length=28 ctx_count=28\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e9075 length=14 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=14\ncopying remainder to buffer: bytes_have=0 length=14 data=0x5648f42e9075\nEXIT: MHD_SHA256_update ctx=0x7ffd8ce00450 final_data_pointer=0x5648f42e9075 final_length=14 ctx_count=14\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e9084 length=26 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=26\ncopying remainder to buffer: bytes_have=0 length=26 data=0x5648f42e9084\nEXIT: MHD_SHA256_update ctx=0x7ffd8ce00450 final_data_pointer=0x5648f42e9084 final_length=26 ctx_count=26\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e90ed length=26 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=26\ncopying remainder to buffer: bytes_have=0 length=26 data=0x5648f42e90ed\nEXIT: MHD_SHA256_update ctx=0x7ffd8ce00450 final_data_pointer=0x5648f42e90ed final_length=26 ctx_count=26\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e909f length=104 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=104\nprocessing full block directly: data=0x5648f42e909f length=104\nafter processing full block: data=0x5648f42e90df length=40\ncopying remainder to buffer: bytes_have=0 length=40 data=0x5648f42e90df\nEXIT: MHD_SHA256_update ctx=0x7ffd8ce00450 final_data_pointer=0x5648f42e90df final_length=40 ctx_count=104\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e9108 length=378 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=378\nprocessing full block directly: data=0x5648f42e9108 length=378\nafter processing full block: data=0x5648f42e9148 length=314\nprocessing full block directly: data=0x5648f42e9148 length=314\nafter processing full block: data=0x5648f42e9188 length=250\nprocessing full block directly: data=0x5648f42e9188 length=250\nafter processing full block: data=0x5648f42e91c8 length=186\nprocessing full block directly: data=0x5648f42e91c8 length=186\nafter processing full block: data=0x5648f42e9208 length=122\nprocessing full block directly: data=0x5648f42e9208 length=122\nafter processing full block: data=0x5648f42e9248 length=58\ncopying remainder to buffer: bytes_have=0 length=58 data=0x5648f42e9248\nEXIT: MHD_SHA256_update ctx=0x7ffd8ce00450 final_data_pointer=0x5648f42e9248 final_length=58 ctx_count=378\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e9380 length=26 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=26\ncopying remainder to buffer: bytes_have=0 length=26 data=0x5648f42e9380\nEXIT: MHD_SHA256_update ctx=0x7ffd8ce00450 final_data_pointer=0x5648f42e9380 final_length=26 ctx_count=26\nENTRY: MHD_SHA256_update ctx=0x7ffd8ce00450 data=0x5648f42e95a8 length=72 ctx_count_before=0\nafter count update: bytes_have=0 ctx_count_after=72\nprocessing full block directly: data=0x5648f42e95a8 length=72\nafter processing full block: data=0x5648f42e95e8 length=8\ncopying remainder to buffer: bytes_have=0 length=8 data=0x5648f42e95\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 prohibits modifying function parameters (the pointer object itself may be used to modify the pointed-to object, but the parameter variable shall not be changed). In MHD_SHA256_update the parameter 'data' (declared const uint8_t *data) is modified with statements like 'data += bytes_left;' and 'data += SHA256_BLOCK_SIZE;'. In addition the parameter 'length' (size_t length) is also modified (length -= bytes_left; length -= SHA256_BLOCK_SIZE;), so there are multiple parameter modifications. To conform, introduce local variables (for example: const uint8_t *p = data; size_t rem = length;) and update those instead of the parameter names."
}