{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer earliest_tmot_conn is declared as a plain 'struct MHD_Connection *' but, in the shown function it is only assigned from pos and later only used for read-only access (passed to connection_get_wait to compute a timeout). If the pointer-target objects are not modified through earliest_tmot_conn, the pointer should be declared to point to a const-qualified type (e.g. 'const struct MHD_Connection *earliest_tmot_conn') per MISRA C 2023 Rule 8.13. (If, however, later code or the called function requires a non-const pointer and modifies the connection via this pointer, then keeping it non-const is required and there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_timeout64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/773.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_timeout64 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    *timeout64 = connection_get_wait (earliest_tmot_conn);\n    return MHD_YES;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_timeout64 code.\n",
  "test_code": "typedef struct FILE FILE;\nextern FILE *fopen(const char *filename, const char *mode);\nextern int fprintf(FILE *stream, const char *format, ...);\nextern int fclose(FILE *stream);\n\n/* Probe helper: write a simple textual log entry to /tmp/logs/773.txt. */\nstatic void probe_log_state(const char *label,\n                            struct MHD_Daemon *daemon,\n                            struct MHD_Connection *conn,\n                            unsigned long long conn_timeout_ms,\n                            unsigned long long last_activity,\n                            unsigned long long earliest_deadline)\n{\n  FILE *f = fopen(\"/tmp/logs/773.txt\", \"a\");\n  if (NULL == f)\n    return;\n  if (NULL != conn)\n    (void) fprintf(f, \"%s: daemon=%p conn=%p timeout_ms=%llu last_activity=%llu earliest_deadline=%llu\\n\",\n                   label, (void *) daemon, (void *) conn,\n                   conn_timeout_ms, last_activity, earliest_deadline);\n  else\n    (void) fprintf(f, \"%s: daemon=%p conn=NULL earliest_deadline=%llu\\n\",\n                   label, (void *) daemon, earliest_deadline);\n  (void) fclose(f);\n}\n\nstatic void probe_log_msg(const char *msg, struct MHD_Daemon *daemon)\n{\n  FILE *f = fopen(\"/tmp/logs/773.txt\", \"a\");\n  if (NULL == f)\n    return;\n  (void) fprintf(f, \"%s: daemon=%p\\n\", msg, (void *) daemon);\n  (void) fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  /* log entry */\n  probe_log_msg(\"MHD_get_timeout64 enter\", daemon);\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    probe_log_msg(\"MHD_get_timeout64 illegal call THREAD_PER_CONN\", daemon);\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    probe_log_msg(\"MHD_get_timeout64 data already pending -> timeout 0\", daemon);\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    probe_log_msg(\"MHD_get_timeout64 epoll ready -> timeout 0\", daemon);\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n    probe_log_state(\"initial normal_timeout_tail chosen\", daemon, pos,\n                    (unsigned long long) pos->connection_timeout_ms,\n                    (unsigned long long) pos->last_activity,\n                    (unsigned long long) earliest_deadline);\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      /* log inspected manual-timeout node */\n      probe_log_state(\"inspecting manual_timeout entry\", daemon, pos,\n                      (unsigned long long) pos->connection_timeout_ms,\n                      (unsigned long long) pos->last_activity,\n                      (unsigned long long) earliest_deadline);\n\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n        probe_log_state(\"updated earliest_tmot_conn\", daemon, pos,\n                        (unsigned long long) pos->connection_timeout_ms,\n                        (unsigned long long) pos->last_activity,\n                        (unsigned long long) earliest_deadline);\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    /* capture the wait computed for the earliest timeout connection and log it */\n    uint64_t wait = connection_get_wait (earliest_tmot_conn);\n    {\n      FILE *f = fopen(\"/tmp/logs/773.txt\", \"a\");\n      if (NULL != f)\n      {\n        (void) fprintf(f, \"calling connection_get_wait: conn=%p -> wait=%llu\\n\",\n                       (void *) earliest_tmot_conn,\n                       (unsigned long long) wait);\n        (void) fclose(f);\n      }\n    }\n    *timeout64 = wait;\n    probe_log_state(\"returning MHD_YES with earliest_tmot_conn\", daemon, earliest_tmot_conn,\n                    (unsigned long long) earliest_tmot_conn->connection_timeout_ms,\n                    (unsigned long long) earliest_tmot_conn->last_activity,\n                    (unsigned long long) earliest_deadline);\n    return MHD_YES;\n  }\n\n  probe_log_msg(\"no earliest timeout connection found -> returning MHD_NO\", daemon);\n  return MHD_NO;\n}\n"
}