{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'earliest_deadline = 0;' is redundant: earliest_deadline is always assigned a meaningful value before any use (when earliest_tmot_conn is set from normal_timeout_tail or later in the manual-timeout loop, and the comparison using earliest_deadline is short\u2011circuited when earliest_tmot_conn is NULL). Removing this assignment would not change program behaviour (it only mutes a compiler warning), so the operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_timeout64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/772.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_timeout64 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    *timeout64 = connection_get_wait (earliest_tmot_conn);\n    return MHD_YES;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_timeout64 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe/logger helper: append formatted messages to /tmp/logs/772.txt */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/772.txt\", \"a\");\n  if (NULL == fp)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (fp, fmt, ap);\n  va_end (ap);\n  fprintf (fp, \"\\n\");\n  fclose (fp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  mhd_log_probe (\"MHD_get_timeout64: entry daemon=%p\", (void *) daemon);\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    mhd_log_probe (\"MHD_get_timeout64: illegal call - thread per conn\");\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    mhd_log_probe (\"MHD_get_timeout64: pending data/cleanup/resume/new/shutdown - returning timeout=0\");\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    *timeout64 = 0;\n    mhd_log_probe (\"MHD_get_timeout64: epoll ready - returning timeout=0\");\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  mhd_log_probe (\"MHD_get_timeout64: initialized earliest_tmot_conn=NULL earliest_deadline=%llu\", (unsigned long long) earliest_deadline);\n\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  mhd_log_probe (\"MHD_get_timeout64: normal_timeout_tail=%p\", (void *) pos);\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n    mhd_log_probe (\"MHD_get_timeout64: set from normal tail pos=%p last_activity=%llu conn_tmout=%llu earliest_deadline=%llu\",\n                   (void *) pos,\n                   (unsigned long long) pos->last_activity,\n                   (unsigned long long) pos->connection_timeout_ms,\n                   (unsigned long long) earliest_deadline);\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    mhd_log_probe (\"MHD_get_timeout64: manual loop pos=%p conn_tmout=%llu last_activity=%llu\",\n                   (void *) pos,\n                   (unsigned long long) pos->connection_timeout_ms,\n                   (unsigned long long) pos->last_activity);\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        mhd_log_probe (\"MHD_get_timeout64: updating earliest from manual pos=%p (prev earliest=%p) earliest_deadline_before=%llu\",\n                       (void *) pos, (void *) earliest_tmot_conn, (unsigned long long) earliest_deadline);\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n        mhd_log_probe (\"MHD_get_timeout64: updated earliest pos=%p earliest_deadline=%llu\",\n                       (void *) pos, (unsigned long long) earliest_deadline);\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    uint64_t wait = connection_get_wait (earliest_tmot_conn);\n    mhd_log_probe (\"MHD_get_timeout64: found earliest_tmot_conn=%p earliest_deadline=%llu connection_get_wait=%llu\",\n                   (void *) earliest_tmot_conn,\n                   (unsigned long long) earliest_deadline,\n                   (unsigned long long) wait);\n    *timeout64 = wait;\n    return MHD_YES;\n  }\n  mhd_log_probe (\"MHD_get_timeout64: no earliest timeout found - returning MHD_NO\");\n  return MHD_NO;\n}\n"
}