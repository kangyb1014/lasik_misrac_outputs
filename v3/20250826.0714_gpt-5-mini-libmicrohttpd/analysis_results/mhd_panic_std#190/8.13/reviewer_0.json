{
  "user_message": "An agent A claimed that the following mhd_panic_std code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of mhd_panic_std.\n```c\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'cls' is declared as void * but is not dereferenced or modified (it is only cast to void to silence a warning). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 i.e. it should be declared as const void *cls. Therefore this usage violates Rule 8.13 (unless the non-const signature is mandated by an external API, in which case a documented deviation is needed).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Rule 8.13 requires that pointers refer to const-qualified types whenever possible. In this function the parameter cls is declared as void * but is never modified or dereferenced (only cast to void to suppress an unused-parameter warning), so it could and should be declared as const void * to satisfy the rule. Therefore, absent a requirement to match an external API or callback type that mandates the non-const signature, the report of a Rule 8.13 violation is correct. If the signature must match an external API, that is a valid justification/deviation and should be documented."
}