{
  "user_message": "An agent A claimed that the following mhd_panic_std code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of mhd_panic_std.\n```c\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'cls' is declared as void * but is not used or modified in the function (it is cast to void to mute warnings). Since the function does not modify the referenced object, 'cls' could be declared as const void *; therefore the pointer is not const-qualified when it could be \u2014 violating MISRA C 2023 Rule 8.13. (The other pointer parameters 'file' and 'reason' are already const-qualified.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's observation that 'cls' is not used and could be const-qualified is technically correct in isolation, but it misses the practical constraint: mhd_panic_std is a callback/handler that must match the externally defined API/function-pointer type (the panic handler prototype) which takes a void *cls. Changing the parameter to const void * would break compatibility with that required signature. MISRA C 2023 Rule 8.13 (\u201eA pointer should point to a const\u2011qualified type whenever possible\") is intended to be applied where it is possible to do so; it does not force a change that would violate an externally required interface. Using (void) cls; to suppress an unused\u2011parameter warning is the appropriate response when the parameter must remain unmodified to match the required prototype. Therefore the reported violation is not correct in this context."
}