{
  "user_message": "An agent A claimed that the following mhd_panic_std code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of mhd_panic_std.\n```c\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression statement '(void) line;' is an executed no\u2011op whose removal does not affect program behaviour (it merely suppresses an unused\u2011parameter warning). Therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2. Remediation: remove the unused parameter, mark it with a compiler 'unused' attribute, or use a single, well\u2011documented mechanism to suppress unused\u2011parameter warnings instead of no\u2011op casts.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Rule 2.2 targets executed operations that are truly superfluous to the program\u2019s behaviour. The (void)line; / (void)file; / (void)reason; idiom is an explicit, documented no\u2011op whose sole purpose is to mark parameters as referenced to suppress unused\u2011parameter diagnostics. Although removing those statements would not change the observable runtime behaviour, they serve a deliberate translation\u2011time purpose (silencing compiler warnings / documenting intent). In practice MISRA tool implementations and guidance accept this idiom (or an equivalent single, project\u2011wide mechanism such as an UNUSED(x) macro or compiler \u2018unused\u2019 attribute) for handling unused parameters. If you want to avoid even the appearance of dead code you can (a) remove the parameter where its presence is unnecessary, (b) use a compiler attribute to mark it unused, or (c) replace the three separate casts with a single documented UNUSED_PARAMS(cls, file, line, reason) macro. But calling the existing (void) casts a violation of MISRA C 2023 Rule 2.2 is not correct."
}