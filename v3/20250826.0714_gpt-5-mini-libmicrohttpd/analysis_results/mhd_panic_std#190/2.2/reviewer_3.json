{
  "user_message": "An agent A claimed that the following mhd_panic_std code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of mhd_panic_std.\n```c\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression statement '(void) file;' is an executed no-op: it evaluates the parameter and discards the result. Its removal would not affect program behaviour (file is a non-volatile pointer), so it constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s claim is not correct. The (void)file; (and the similar casts) are intentionally present to mark parameters as used in the !HAVE_MESSAGES build to silence \u201cunused parameter\u201d diagnostics. Although a literal reading of Rule 2.2 (\u201cany operation that is executed but whose removal would not affect program behaviour constitutes dead code\u201d) could classify such no-op casts as dead, MISRA\u2019s intent is to ban unintended/dead code that affects maintainability and correctness, not deliberate no-op uses that document intent or satisfy toolchains. These casts do not represent unintended, unreachable, or stale logic \u2014 they are a portable, widely accepted idiom for unused parameters. Thus the code should not be reported as a Rule 2.2 violation (any remaining concern can be handled by an explicit justification/deviation or using an UNUSED macro)."
}