{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'daemon' is initialized from con->daemon but is only used for read-only access (e.g. checking options, shutdown flag, and passing to logging macros). It is declared as 'struct MHD_Daemon *daemon' (non-const) even though it could be 'const struct MHD_Daemon *daemon' to reflect read-only use. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified thread_main_connection_upgrade code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of thread_main_connection_upgrade as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of thread_main_connection_upgrade:\n```c\nstatic void\nthread_main_connection_upgrade (struct MHD_Connection *con)\n{\n#ifdef HTTPS_SUPPORT\n  struct MHD_UpgradeResponseHandle *urh = con->urh;\n  struct MHD_Daemon *daemon = con->daemon;\n\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (con->tid) );\n  /* Here, we need to bi-directionally forward\n     until the application tells us that it is done\n     with the socket; */\n  if ( (0 != (daemon->options & MHD_USE_TLS)) &&\n       MHD_D_IS_USING_SELECT_ (daemon))\n  {\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      /* use select */\n      fd_set rs;\n      fd_set ws;\n      fd_set es;\n      MHD_socket max_fd;\n      int num_ready;\n      bool result;\n\n      FD_ZERO (&rs);\n      FD_ZERO (&ws);\n      FD_ZERO (&es);\n      max_fd = MHD_INVALID_SOCKET;\n      result = urh_to_fdset (urh,\n                             &rs,\n                             &ws,\n                             &es,\n                             &max_fd,\n                             FD_SETSIZE);\n      if (! result)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error preparing select.\\n\"));\n#endif\n        break;\n      }\n      /* FIXME: does this check really needed? */\n      if (MHD_INVALID_SOCKET != max_fd)\n      {\n        struct timeval *tvp;\n        struct timeval tv;\n        if (((con->tls_read_ready) &&\n             (urh->in_buffer_used < urh->in_buffer_size)) ||\n            (daemon->shutdown))\n        {         /* No need to wait if incoming data is already pending in TLS buffers. */\n          tv.tv_sec = 0;\n          tv.tv_usec = 0;\n          tvp = &tv;\n        }\n        else\n          tvp = NULL;\n        num_ready = MHD_SYS_select_ (max_fd + 1,\n                                     &rs,\n                                     &ws,\n                                     &es,\n                                     tvp);\n      }\n      else\n        num_ready = 0;\n      if (num_ready < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during select (%d): `%s'\\n\"),\n                  err,\n                  MHD_socket_strerr_ (err));\n#endif\n        break;\n      }\n      urh_from_fdset (urh,\n                      &rs,\n                      &ws,\n                      &es,\n                      (int) FD_SETSIZE);\n      process_urh (urh);\n    }\n  }\n#ifdef HAVE_POLL\n  else if (0 != (daemon->options & MHD_USE_TLS))\n  {\n    /* use poll() */\n    struct pollfd p[2];\n    memset (p,\n            0,\n            sizeof (p));\n    p[0].fd = urh->connection->socket_fd;\n    p[1].fd = urh->mhd.socket;\n\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      int timeout;\n\n      urh_update_pollfd (urh, p);\n\n      if (((con->tls_read_ready) &&\n           (urh->in_buffer_used < urh->in_buffer_size)) ||\n          (daemon->shutdown))\n        timeout = 0;     /* No need to wait if incoming data is already pending in TLS buffers. */\n      else\n        timeout = -1;\n\n      if (MHD_sys_poll_ (p,\n                         2,\n                         timeout) < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during poll: `%s'\\n\"),\n                  MHD_socket_strerr_ (err));\n#endif\n        break;\n      }\n      urh_from_pollfd (urh,\n                       p);\n      process_urh (urh);\n    }\n  }\n  /* end POLL */\n#endif\n  /* end HTTPS */\n#endif /* HTTPS_SUPPORT */\n  /* TLS forwarding was finished. Cleanup socketpair. */\n  MHD_connection_finish_forward_ (con);\n  /* Do not set 'urh->clean_ready' yet as 'urh' will be used\n   * in connection thread for a little while. */\n}\n```\n</target_code>\nPlease provide the modified thread_main_connection_upgrade code.\n",
  "test_code": "/* Probe helpers to log control flow and state for Rule 8.13 investigation */\n#include <stdio.h>\n#include <time.h>\n\nstatic void\nmhd_log_probe (const char *event,\n               struct MHD_Connection *con,\n               struct MHD_Daemon *daemon,\n               struct MHD_UpgradeResponseHandle *urh,\n               int max_fd,\n               int num_ready,\n               int err)\n{\n  FILE *f = fopen(\"/tmp/logs/1253.txt\", \"a\");\n  if (f == NULL)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] EVENT: %s\\n\", (long)t, event);\n  fprintf(f, \"  pointers: con=%p, daemon=%p, urh=%p\\n\", (void *)con, (void *)daemon, (void *)urh);\n  if (daemon != NULL)\n  {\n    /* 'options' and 'shutdown' are read-only probes; do not modify. */\n    fprintf(f, \"  daemon->options=0x%lx, daemon->shutdown=%d\\n\",\n            (unsigned long) daemon->options,\n            (int) daemon->shutdown);\n  }\n  if (con != NULL)\n    fprintf(f, \"  con->tls_read_ready=%d\\n\", (int) con->tls_read_ready);\n  if (urh != NULL)\n  {\n    fprintf(f, \"  urh->in_buffer_size=%u, urh->out_buffer_size=%u,\\n\",\n            (unsigned) urh->in_buffer_size,\n            (unsigned) urh->out_buffer_size);\n    fprintf(f, \"  urh->in_buffer_used=%u, urh->out_buffer_used=%u\\n\",\n            (unsigned) urh->in_buffer_used,\n            (unsigned) urh->out_buffer_used);\n  }\n  fprintf(f, \"  max_fd=%d, num_ready=%d, err=%d\\n\", max_fd, num_ready, err);\n  fprintf(f, \"  NOTE: daemon pointer used only for read-only checks in this path.\\n\\n\");\n  fclose(f);\n}\n\nstatic void\nmhd_log_probe_select_prep_failure (struct MHD_Connection *con,\n                                   struct MHD_Daemon *daemon)\n{\n#ifdef HAVE_MESSAGES\n  /* Reuse the logging file for easier reproduction. */\n  mhd_log_probe(\"select_prep_failure\", con, daemon, con->urh, -1, 0, 0);\n#endif\n}\n\nstatic void\nmhd_log_probe_select_error (struct MHD_Connection *con,\n                            struct MHD_Daemon *daemon,\n                            int err)\n{\n#ifdef HAVE_MESSAGES\n  mhd_log_probe(\"select_error\", con, daemon, con->urh, -1, -1, err);\n#endif\n}\n\nstatic void\nmhd_log_probe_poll_error (struct MHD_Connection *con,\n                          struct MHD_Daemon *daemon,\n                          int err)\n{\n#ifdef HAVE_MESSAGES\n  mhd_log_probe(\"poll_error\", con, daemon, con->urh, -1, -1, err);\n#endif\n}\n\n/* Modified thread_main_connection_upgrade with inserted probe calls. */\nstatic void\nthread_main_connection_upgrade (struct MHD_Connection *con)\n{\n#ifdef HTTPS_SUPPORT\n  struct MHD_UpgradeResponseHandle *urh = con->urh;\n  struct MHD_Daemon *daemon = con->daemon;\n\n  /* Log entry and initial state */\n  mhd_log_probe(\"enter_thread_main_connection_upgrade\", con, daemon, urh, -1, 0, 0);\n\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (con->tid) );\n  /* Here, we need to bi-directionally forward\n     until the application tells us that it is done\n     with the socket; */\n  if ( (0 != (daemon->options & MHD_USE_TLS)) &&\n       MHD_D_IS_USING_SELECT_ (daemon))\n  {\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      /* use select */\n      fd_set rs;\n      fd_set ws;\n      fd_set es;\n      MHD_socket max_fd;\n      int num_ready;\n      bool result;\n\n      FD_ZERO (&rs);\n      FD_ZERO (&ws);\n      FD_ZERO (&es);\n      max_fd = MHD_INVALID_SOCKET;\n      result = urh_to_fdset (urh,\n                             &rs,\n                             &ws,\n                             &es,\n                             &max_fd,\n                             FD_SETSIZE);\n      if (! result)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error preparing select.\\n\"));\n#endif\n        /* Log select prep failure */\n        mhd_log_probe_select_prep_failure (con, daemon);\n        break;\n      }\n      /* FIXME: does this check really needed? */\n      if (MHD_INVALID_SOCKET != max_fd)\n      {\n        struct timeval *tvp;\n        struct timeval tv;\n        if (((con->tls_read_ready) &&\n             (urh->in_buffer_used < urh->in_buffer_size)) ||\n            (daemon->shutdown))\n        {         /* No need to wait if incoming data is already pending in TLS buffers. */\n          tv.tv_sec = 0;\n          tv.tv_usec = 0;\n          tvp = &tv;\n          mhd_log_probe(\"select_tvp_zero\", con, daemon, urh, (int) max_fd, 0, 0);\n        }\n        else\n        {\n          tvp = NULL;\n          mhd_log_probe(\"select_tvp_null\", con, daemon, urh, (int) max_fd, 0, 0);\n        }\n        num_ready = MHD_SYS_select_ (max_fd + 1,\n                                     &rs,\n                                     &ws,\n                                     &es,\n                                     tvp);\n      }\n      else\n        num_ready = 0;\n\n      mhd_log_probe(\"after_select_call\", con, daemon, urh, (int) max_fd, num_ready, 0);\n\n      if (num_ready < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        {\n          mhd_log_probe(\"select_eintr_continue\", con, daemon, urh, (int) max_fd, num_ready, err);\n          continue;\n        }\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during select (%d): `%s'\\n\"),\n                  err,\n                  MHD_socket_strerr_ (err));\n#endif\n        /* Log the select error before breaking out */\n        mhd_log_probe_select_error (con, daemon, err);\n        break;\n      }\n      urh_from_fdset (urh,\n                      &rs,\n                      &ws,\n                      &es,\n                      (int) FD_SETSIZE);\n      process_urh (urh);\n\n      /* Log state after processing one iteration */\n      mhd_log_probe(\"iteration_end\", con, daemon, urh, (int) max_fd, num_ready, 0);\n    }\n  }\n#ifdef HAVE_POLL\n  else if (0 != (daemon->options & MHD_USE_TLS))\n  {\n    /* use poll() */\n    struct pollfd p[2];\n    memset (p,\n            0,\n            sizeof (p));\n    p[0].fd = urh->connection->socket_fd;\n    p[1].fd = urh->mhd.socket;\n\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      int timeout;\n\n      urh_update_pollfd (urh, p);\n\n      if (((con->tls_read_ready) &&\n           (urh->in_buffer_used < urh->in_buffer_size)) ||\n          (daemon->shutdown))\n        timeout = 0;     /* No need to wait if incoming data is already pending in TLS buffers. */\n      else\n        timeout = -1;\n\n      /* Log poll setup */\n      mhd_log_probe(\"poll_before_call\", con, daemon, urh, -1, 0, timeout);\n\n      if (MHD_sys_poll_ (p,\n                         2,\n                         timeout) < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        {\n          mhd_log_probe(\"poll_eintr_continue\", con, daemon, urh, -1, -1, err);\n          continue;\n        }\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during poll: `%s'\\n\"),\n                  MHD_socket_strerr_ (err));\n#endif\n        /* Log poll error and break */\n        mhd_log_probe_poll_error (con, daemon, err);\n        break;\n      }\n      urh_from_pollfd (urh,\n                       p);\n      process_urh (urh);\n\n      /* Log state after poll iteration */\n      mhd_log_probe(\"poll_iteration_end\", con, daemon, urh, -1, 0, 0);\n    }\n  }\n  /* end POLL */\n#endif\n  /* end HTTPS */\n#endif /* HTTPS_SUPPORT */\n  /* TLS forwarding was finished. Cleanup socketpair. */\n  mhd_log_probe(\"before_finish_forward\", con, daemon, con->urh, -1, 0, 0);\n  MHD_connection_finish_forward_ (con);\n  /* Do not set 'urh->clean_ready' yet as 'urh' will be used\n   * in connection thread for a little while. */\n  mhd_log_probe(\"exit_thread_main_connection_upgrade\", con, daemon, con->urh, -1, 0, 0);\n}\n"
}