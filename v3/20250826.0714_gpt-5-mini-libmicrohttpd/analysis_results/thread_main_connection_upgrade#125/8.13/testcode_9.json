{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'urh' (type: struct MHD_UpgradeResponseHandle *) to urh_to_fdset. If urh_to_fdset does not modify the object pointed to by 'urh' (i.e. its parameter could be declared as const struct MHD_UpgradeResponseHandle *), then the code violates MISRA C 2023 Rule 8.13 because the pointer/parameter is not const-qualified. The other arguments (&rs, &ws, &es, &max_fd) are clearly intended to be modified by urh_to_fdset and therefore should not be const. Without the urh_to_fdset prototype/implementation we cannot be certain, but this call is a potential violation when urh is only read by the function.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified thread_main_connection_upgrade code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of thread_main_connection_upgrade as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of thread_main_connection_upgrade:\n```c\nstatic void\nthread_main_connection_upgrade (struct MHD_Connection *con)\n{\n#ifdef HTTPS_SUPPORT\n  struct MHD_UpgradeResponseHandle *urh = con->urh;\n  struct MHD_Daemon *daemon = con->daemon;\n\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (con->tid) );\n  /* Here, we need to bi-directionally forward\n     until the application tells us that it is done\n     with the socket; */\n  if ( (0 != (daemon->options & MHD_USE_TLS)) &&\n       MHD_D_IS_USING_SELECT_ (daemon))\n  {\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      /* use select */\n      fd_set rs;\n      fd_set ws;\n      fd_set es;\n      MHD_socket max_fd;\n      int num_ready;\n      bool result;\n\n      FD_ZERO (&rs);\n      FD_ZERO (&ws);\n      FD_ZERO (&es);\n      max_fd = MHD_INVALID_SOCKET;\n      result = urh_to_fdset (urh,\n                             &rs,\n                             &ws,\n                             &es,\n                             &max_fd,\n                             FD_SETSIZE);\n      if (! result)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error preparing select.\\n\"));\n#endif\n        break;\n      }\n      /* FIXME: does this check really needed? */\n      if (MHD_INVALID_SOCKET != max_fd)\n      {\n        struct timeval *tvp;\n        struct timeval tv;\n        if (((con->tls_read_ready) &&\n             (urh->in_buffer_used < urh->in_buffer_size)) ||\n            (daemon->shutdown))\n        {         /* No need to wait if incoming data is already pending in TLS buffers. */\n          tv.tv_sec = 0;\n          tv.tv_usec = 0;\n          tvp = &tv;\n        }\n        else\n          tvp = NULL;\n        num_ready = MHD_SYS_select_ (max_fd + 1,\n                                     &rs,\n                                     &ws,\n                                     &es,\n                                     tvp);\n      }\n      else\n        num_ready = 0;\n      if (num_ready < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during select (%d): `%s'\\n\"),\n                  err,\n                  MHD_socket_strerr_ (err));\n#endif\n        break;\n      }\n      urh_from_fdset (urh,\n                      &rs,\n                      &ws,\n                      &es,\n                      (int) FD_SETSIZE);\n      process_urh (urh);\n    }\n  }\n#ifdef HAVE_POLL\n  else if (0 != (daemon->options & MHD_USE_TLS))\n  {\n    /* use poll() */\n    struct pollfd p[2];\n    memset (p,\n            0,\n            sizeof (p));\n    p[0].fd = urh->connection->socket_fd;\n    p[1].fd = urh->mhd.socket;\n\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      int timeout;\n\n      urh_update_pollfd (urh, p);\n\n      if (((con->tls_read_ready) &&\n           (urh->in_buffer_used < urh->in_buffer_size)) ||\n          (daemon->shutdown))\n        timeout = 0;     /* No need to wait if incoming data is already pending in TLS buffers. */\n      else\n        timeout = -1;\n\n      if (MHD_sys_poll_ (p,\n                         2,\n                         timeout) < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during poll: `%s'\\n\"),\n                  MHD_socket_strerr_ (err));\n#endif\n        break;\n      }\n      urh_from_pollfd (urh,\n                       p);\n      process_urh (urh);\n    }\n  }\n  /* end POLL */\n#endif\n  /* end HTTPS */\n#endif /* HTTPS_SUPPORT */\n  /* TLS forwarding was finished. Cleanup socketpair. */\n  MHD_connection_finish_forward_ (con);\n  /* Do not set 'urh->clean_ready' yet as 'urh' will be used\n   * in connection thread for a little while. */\n}\n```\n</target_code>\nPlease provide the modified thread_main_connection_upgrade code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helpers: write human-readable state to /tmp/logs/1253.txt */\nstatic void\nmhd_probe_ensure_log_dir (void)\n{\n  /* Best-effort create directory; ignore errors if it already exists. */\n  (void) mkdir (\"/tmp/logs\", 0777);\n}\n\nstatic void\nmhd_probe_log_urh_state (const char *tag,\n                         struct MHD_UpgradeResponseHandle *urh,\n                         struct MHD_Connection *con,\n                         struct MHD_Daemon *daemon)\n{\n  FILE *f;\n\n  mhd_probe_ensure_log_dir ();\n  f = fopen (\"/tmp/logs/1253.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  /* Print pointer values and the commonly inspected fields used in the\n     upgrade control loop. Cast numeric fields to long long for safe\n     printing across platforms. */\n  fprintf (f,\n           \"[urh-state] %s: urh=%p con=%p daemon=%p\\n\",\n           tag,\n           (void *) urh,\n           (void *) con,\n           (void *) daemon);\n\n  if (urh != NULL)\n  {\n    fprintf (f,\n             \"           in_buffer_size=%lld out_buffer_size=%lld in_buffer_used=%lld out_buffer_used=%lld\\n\",\n             (long long) urh->in_buffer_size,\n             (long long) urh->out_buffer_size,\n             (long long) urh->in_buffer_used,\n             (long long) urh->out_buffer_used);\n\n    /* Some nested fields are useful to identify if internal connections or\n       socket descriptors are changed by called functions. Use safe checks\n       for possible NULL pointers. */\n    if (urh->connection != NULL)\n      fprintf (f,\n               \"           urh->connection=%p socket_fd=%d\\n\",\n               (void *) urh->connection,\n               (int) urh->connection->socket_fd);\n    else\n      fprintf (f, \"           urh->connection=NULL\\n\");\n\n    /* mhd.socket may be present in the struct; attempt to print it if\n       accessible. */\n    fprintf (f, \"           urh->mhd.socket=%d\\n\", (int) urh->mhd.socket);\n  }\n  else\n  {\n    fprintf (f, \"           urh is NULL\\n\");\n  }\n\n  fflush (f);\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log_message (const char *msg)\n{\n  FILE *f;\n  mhd_probe_ensure_log_dir ();\n  f = fopen (\"/tmp/logs/1253.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf (f, \"%s\\n\", msg);\n  fflush (f);\n  fclose (f);\n}\n\nstatic void\nthread_main_connection_upgrade (struct MHD_Connection *con)\n{\n#ifdef HTTPS_SUPPORT\n  struct MHD_UpgradeResponseHandle *urh = con->urh;\n  struct MHD_Daemon *daemon = con->daemon;\n\n  /* Log entry to function and initial urh snapshot. */\n  mhd_probe_log_message (\"[entry] thread_main_connection_upgrade\");\n  mhd_probe_log_urh_state (\"initial\", urh, con, daemon);\n\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (con->tid) );\n  /* Here, we need to bi-directionally forward\n     until the application tells us that it is done\n     with the socket; */\n  if ( (0 != (daemon->options & MHD_USE_TLS)) &&\n       MHD_D_IS_USING_SELECT_ (daemon))\n  {\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      /* use select */\n      fd_set rs;\n      fd_set ws;\n      fd_set es;\n      MHD_socket max_fd;\n      int num_ready;\n      bool result;\n\n      FD_ZERO (&rs);\n      FD_ZERO (&ws);\n      FD_ZERO (&es);\n      max_fd = MHD_INVALID_SOCKET;\n\n      /* Probe: log urh state before calling urh_to_fdset */\n      mhd_probe_log_urh_state (\"before_urh_to_fdset\", urh, con, daemon);\n\n      result = urh_to_fdset (urh,\n                             &rs,\n                             &ws,\n                             &es,\n                             &max_fd,\n                             FD_SETSIZE);\n\n      /* Probe: log result and urh state after urh_to_fdset */\n      {\n        char buf[256];\n        snprintf (buf, sizeof (buf), \"after_urh_to_fdset: result=%d max_fd=%d\", (int) result, (int) max_fd);\n        mhd_probe_log_message (buf);\n      }\n      mhd_probe_log_urh_state (\"after_urh_to_fdset\", urh, con, daemon);\n\n      if (! result)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error preparing select.\\n\"));\n#endif\n        mhd_probe_log_message (\"urh_to_fdset returned false; breaking loop\");\n        break;\n      }\n      /* FIXME: does this check really needed? */\n      if (MHD_INVALID_SOCKET != max_fd)\n      {\n        struct timeval *tvp;\n        struct timeval tv;\n        if (((con->tls_read_ready) &&\n             (urh->in_buffer_used < urh->in_buffer_size)) ||\n            (daemon->shutdown))\n        {         /* No need to wait if incoming data is already pending in TLS buffers. */\n          tv.tv_sec = 0;\n          tv.tv_usec = 0;\n          tvp = &tv;\n        }\n        else\n          tvp = NULL;\n        num_ready = MHD_SYS_select_ (max_fd + 1,\n                                     &rs,\n                                     &ws,\n                                     &es,\n                                     tvp);\n      }\n      else\n        num_ready = 0;\n      if (num_ready < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during select (%d): `%s'\\n\"),\n                  err,\n                  MHD_socket_strerr_ (err));\n#endif\n        {\n          char buf[128];\n          snprintf (buf, sizeof (buf), \"select error: %d (%s)\", err, MHD_socket_strerr_ (err));\n          mhd_probe_log_message (buf);\n        }\n        break;\n      }\n\n      /* Probe: state before urh_from_fdset */\n      mhd_probe_log_urh_state (\"before_urh_from_fdset\", urh, con, daemon);\n\n      urh_from_fdset (urh,\n                      &rs,\n                      &ws,\n                      &es,\n                      (int) FD_SETSIZE);\n\n      /* Probe: state after urh_from_fdset */\n      mhd_probe_log_urh_state (\"after_urh_from_fdset\", urh, con, daemon);\n\n      process_urh (urh);\n\n      /* Probe: state after process_urh */\n      mhd_probe_log_urh_state (\"after_process_urh\", urh, con, daemon);\n    }\n  }\n#ifdef HAVE_POLL\n  else if (0 != (daemon->options & MHD_USE_TLS))\n  {\n    /* use poll() */\n    struct pollfd p[2];\n    memset (p,\n            0,\n            sizeof (p));\n    p[0].fd = urh->connection->socket_fd;\n    p[1].fd = urh->mhd.socket;\n\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      int timeout;\n\n      /* Probe: before updating pollfd */\n      mhd_probe_log_urh_state (\"before_urh_update_pollfd\", urh, con, daemon);\n\n      urh_update_pollfd (urh, p);\n\n      /* Probe: after updating pollfd */\n      mhd_probe_log_message (\"after_urh_update_pollfd\");\n\n      if (((con->tls_read_ready) &&\n           (urh->in_buffer_used < urh->in_buffer_size)) ||\n          (daemon->shutdown))\n        timeout = 0;     /* No need to wait if incoming data is already pending in TLS buffers. */\n      else\n        timeout = -1;\n\n      if (MHD_sys_poll_ (p,\n                         2,\n                         timeout) < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during poll: `%s'\\n\"),\n                  MHD_socket_strerr_ (err));\n#endif\n        {\n          char buf[128];\n          snprintf (buf, sizeof (buf), \"poll error: %s\", MHD_socket_strerr_ (err));\n          mhd_probe_log_message (buf);\n        }\n        break;\n      }\n\n      /* Probe: before reading from pollfd */\n      mhd_probe_log_urh_state (\"before_urh_from_pollfd\", urh, con, daemon);\n\n      urh_from_pollfd (urh,\n                       p);\n\n      /* Probe: after urh_from_pollfd */\n      mhd_probe_log_urh_state (\"after_urh_from_pollfd\", urh, con, daemon);\n\n      process_urh (urh);\n\n      /* Probe: after process_urh */\n      mhd_probe_log_urh_state (\"after_process_urh_poll\", urh, con, daemon);\n    }\n  }\n  /* end POLL */\n#endif\n  /* end HTTPS */\n#endif /* HTTPS_SUPPORT */\n  /* TLS forwarding was finished. Cleanup socketpair. */\n  mhd_probe_log_message (\"cleanup: calling MHD_connection_finish_forward_\");\n  MHD_connection_finish_forward_ (con);\n  /* Do not set 'urh->clean_ready' yet as 'urh' will be used\n   * in connection thread for a little while. */\n\n  mhd_probe_log_urh_state (\"exit\", con->urh, con, con->daemon);\n}\n"
}