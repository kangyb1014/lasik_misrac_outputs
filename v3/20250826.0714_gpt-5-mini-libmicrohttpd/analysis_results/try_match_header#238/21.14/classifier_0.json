{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 21.14 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment itself does not call memcmp; it calls MHD_str_equal_caseless_n_ and strdup. As written, this fragment does NOT violate MISRA C 2023 Rule 21.14. A violation would occur if the implementation of MHD_str_equal_caseless_n_ internally used the Standard Library function memcmp to compare null-terminated strings (for example, calling memcmp(prefix, line, prefix_len) where prefix_len was derived from strlen(prefix) or otherwise used to compare C strings). If MHD_str_equal_caseless_n_ uses memcmp on null-terminated strings, that internal use would violate Rule 21.14."
}