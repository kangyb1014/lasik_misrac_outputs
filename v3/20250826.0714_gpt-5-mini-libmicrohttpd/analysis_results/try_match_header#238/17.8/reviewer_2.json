{
  "user_message": "An agent A claimed that the following try_match_header code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of try_match_header.\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'line' (char *line) is incremented in the function body via '++line' in the while loop, which modifies the pointer parameter itself rather than the object it points to.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\ntry_match_header: entry prefix=\"Content-type: \" prefix_len=14 line=0x55b9fcf728c0 \"Content-Type: text/plain\" suffix=0x55b9fcf72858\niter=0: line=0x55b9fcf728c0 char=''C'' (0x43)\niter=0: MHD_str_equal_caseless_n_ returned 1\niter=0: match -> setting *suffix = strdup(&line[14]) (addr=0x55b9fcf728ce \"text/plain\")\niter=0: *suffix now 0x55b9fcf72ef0 \"text/plain\"\ntry_match_header: returning MHD_YES\ntry_match_header: entry prefix=\"Content-Transfer-Encoding: \" prefix_len=27 line=0x55b9fcf728c0 \"Content-Type: text/plain\" suffix=0x55b9fcf72868\niter=0: line=0x55b9fcf728c0 char=''C'' (0x43)\niter=0: MHD_str_equal_caseless_n_ returned 0\niter=0: no match, will increment parameter 'line' (this modifies the parameter)\niter=1: line=0x55b9fcf728c1 char=''o'' (0x6f)\niter=1: MHD_str_equal_caseless_n_ returned 0\niter=1: no match, will increment parameter 'line' (this modifies the parameter)\niter=2: line=0x55b9fcf728c2 char=''n'' (0x6e)\niter=2: MHD_str_equal_caseless_n_ returned 0\niter=2: no match, will increment parameter 'line' (this modifies the parameter)\niter=3: line=0x55b9fcf728c3 char=''t'' (0x74)\niter=3: MHD_str_equal_caseless_n_ returned 0\niter=3: no match, will increment parameter 'line' (this modifies the parameter)\niter=4: line=0x55b9fcf728c4 char=''e'' (0x65)\niter=4: MHD_str_equal_caseless_n_ returned 0\niter=4: no match, will increment parameter 'line' (this modifies the parameter)\niter=5: line=0x55b9fcf728c5 char=''n'' (0x6e)\niter=5: MHD_str_equal_caseless_n_ returned 0\niter=5: no match, will increment parameter 'line' (this modifies the parameter)\niter=6: line=0x55b9fcf728c6 char=''t'' (0x74)\niter=6: MHD_str_equal_caseless_n_ returned 0\niter=6: no match, will increment parameter 'line' (this modifies the parameter)\niter=7: line=0x55b9fcf728c7 char=''-'' (0x2d)\niter=7: MHD_str_equal_caseless_n_ returned 0\niter=7: no match, will increment parameter 'line' (this modifies the parameter)\niter=8: line=0x55b9fcf728c8 char=''T'' (0x54)\niter=8: MHD_str_equal_caseless_n_ returned 0\niter=8: no match, will increment parameter 'line' (this modifies the parameter)\niter=9: line=0x55b9fcf728c9 char=''y'' (0x79)\niter=9: MHD_str_equal_caseless_n_ returned 0\niter=9: no match, will increment parameter 'line' (this modifies the parameter)\niter=10: line=0x55b9fcf728ca char=''p'' (0x70)\niter=10: MHD_str_equal_caseless_n_ returned 0\niter=10: no match, will increment parameter 'line' (this modifies the parameter)\niter=11: line=0x55b9fcf728cb char=''e'' (0x65)\niter=11: MHD_str_equal_caseless_n_ returned 0\niter=11: no match, will increment parameter 'line' (this modifies the parameter)\niter=12: line=0x55b9fcf728cc char='':'' (0x3a)\niter=12: MHD_str_equal_caseless_n_ returned 0\niter=12: no match, will increment parameter 'line' (this modifies the parameter)\niter=13: line=0x55b9fcf728cd char='' '' (0x20)\niter=13: MHD_str_equal_caseless_n_ returned 0\niter=13: no match, will increment parameter 'line' (this modifies the parameter)\niter=14: line=0x55b9fcf728ce char=''t'' (0x74)\niter=14: MHD_str_equal_caseless_n_ returned 0\niter=14: no match, will increment parameter 'line' (this modifies the parameter)\niter=15: line=0x55b9fcf728cf char=''e'' (0x65)\niter=15: MHD_str_equal_caseless_n_ returned 0\niter=15: no match, will increment parameter 'line' (this modifies the parameter)\niter=16: line=0x55b9fcf728d0 char=''x'' (0x78)\niter=16: MHD_str_equal_caseless_n_ returned 0\niter=16: no match, will increment parameter 'line' (this modifies the parameter)\niter=17: line=0x55b9fcf728d1 char=''t'' (0x74)\niter=17: MHD_str_equal_caseless_n_ returned 0\niter=17: no match, will increment parameter 'line' (this modifies the parameter)\niter=18: line=0x55b9fcf728d2 char=''/'' (0x2f)\niter=18: MHD_str_equal_caseless_n_ returned 0\niter=18: no match, will increment parameter 'line' (this modifies the parameter)\niter=19: line=0x55b9fcf728d3 char=''p'' (0x70)\niter=19: MHD_str_equal_caseless_n_ returned 0\niter=19: no match, will increment parameter 'line' (this modifies the parameter)\niter=20: line=0x55b9fcf728d4 char=''l'' (0x6c)\niter=20: MHD_str_equal_caseless_n_ returned 0\niter=20: no mat\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 forbids modifying a function parameter itself; while the object pointed to by a pointer parameter may be changed, the pointer variable passed as a parameter shall not be modified. In try_match_header the statement ++line updates the pointer parameter line (the pointer value), which violates 17.8. (Modifying *suffix is allowed because it changes the object pointed to by the pointer parameter suffix, not the pointer parameter itself.) A simple fix is to use a local pointer (e.g. char *p = line; ++p;) or make line a const char * and iterate with a local variable.)"
}