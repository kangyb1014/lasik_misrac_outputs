{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'line' is declared as 'char *line' but is only read (the code advances the pointer with '++line;' and never modifies the characters it points to). According to MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible. Here 'line' could and should be 'const char *line', so the current code violates the rule. A fix is to change the function signature to use 'const char *line'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_match_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_match_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified try_match_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append messages to /tmp/logs/2383.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2383.txt\", \"a\");\n    if (NULL == f)\n    {\n        /* If logging is not available, silently continue to preserve original behavior. */\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  /* Log entry and initial state */\n  probe_log(\"try_match_header entry: prefix=%p prefix_len=%zu line=%p suffix_ptr=%p suffix_val=%p\",\n            (const void *)prefix, prefix_len, (const void *)line, (void *)&suffix, (void *)(suffix ? *suffix : NULL));\n\n  if (NULL != *suffix)\n  {\n    probe_log(\"early return: suffix already set (suffix=%p)\", (void *)(*suffix));\n    return MHD_NO;\n  }\n\n  while (0 != *line)\n  {\n    /* Evaluate equality once so we can log the result without changing behavior */\n    int eq = MHD_str_equal_caseless_n_ (prefix,\n                                       line,\n                                       prefix_len);\n\n    probe_log(\"loop iter: line=%p char='\\x%02x' (%c) eq=%d\",\n              (void *)line,\n              (unsigned int)(unsigned char)(*line),\n              (*line >= 32 && *line <= 126) ? *line : '.',\n              eq);\n\n    if (eq)\n    {\n      *suffix = strdup (&line[prefix_len]);\n      if (NULL != *suffix)\n      {\n        /* Log the matched suffix up to a reasonable limit */\n        size_t l = strlen(*suffix);\n        size_t show = (l > 256U) ? 256U : l;\n        char tmp = (*suffix)[show];\n        /* Temporarily null-terminate for safe logging of a substring */\n        if (show < l)\n        {\n          /* This write is safe because tmp holds the overwritten character */\n          (*suffix)[show] = '\\0';\n          probe_log(\"match found: suffix=%p value=\\\"%s\\\" (truncated to %zu chars)\", (void *)(*suffix), *suffix, show);\n          (*suffix)[show] = tmp;\n        }\n        else\n        {\n          probe_log(\"match found: suffix=%p value=\\\"%s\\\"\", (void *)(*suffix), *suffix);\n        }\n      }\n      else\n      {\n        probe_log(\"match found but strdup failed: suffix set to NULL\");\n      }\n      probe_log(\"returning MHD_YES\");\n      return MHD_YES;\n    }\n    ++line;\n  }\n\n  probe_log(\"no match found: returning MHD_NO\");\n  return MHD_NO;\n}\n"
}