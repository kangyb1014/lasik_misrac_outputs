{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'line' is declared as 'char *' but is only read (not modified) and the call uses &line[prefix_len] as the source string for strdup. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. Here 'line' could and should be declared as 'const char *line', and the call would then pass a 'const char *' to strdup. As written, the non-const 'char *line' violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_match_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_match_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified try_match_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper \u2014 appends human-readable traces to /tmp/logs/2383.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2383.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  /* Preserve original behavior but add probes to log control flow and state. */\n  /* Log function entry and initial state. */\n  probe_log(\"try_match_header ENTRY: prefix=%p, prefix_len=%zu, line=%p, suffix=%p\",\n            (const void *)prefix,\n            prefix_len,\n            (const void *)line,\n            (const void *)suffix);\n\n  if (prefix != NULL)\n  {\n    /* Log up to 64 bytes of prefix (or until NUL). */\n    char buf[65] = {0};\n    size_t n = 0;\n    while (n < 64 && prefix[n] != '\\0') { buf[n] = prefix[n]; ++n; }\n    buf[n] = '\\0';\n    probe_log(\"try_match_header: prefix content (up to 64 chars)='%s'\", buf);\n  }\n\n  if (suffix != NULL)\n  {\n    probe_log(\"try_match_header: *suffix (before) = %p\", (const void *)*suffix);\n  }\n\n  if (NULL != *suffix)\n  {\n    probe_log(\"try_match_header: early return because *suffix != NULL (%p)\", (const void *)*suffix);\n    return MHD_NO;\n  }\n\n  /* Keep a pointer to the original line start to compute offsets for logging. */\n  char *orig_line = line;\n  while (0 != *line)\n  {\n    size_t pos = (size_t)(line - orig_line);\n    /* Log the current position and a small preview of the remaining line. */\n    {\n      char preview[65] = {0};\n      size_t i = 0;\n      while (i < 64 && line[i] != '\\0') { preview[i] = line[i]; ++i; }\n      preview[i] = '\\0';\n      probe_log(\"try_match_header: loop pos=%zu, line_ptr=%p, current_char='%c', preview='%s'\",\n                pos, (const void *)line, (*line != '\\0') ? *line : '?', preview);\n    }\n\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      probe_log(\"try_match_header: prefix matched at pos=%zu; calling strdup on &line[%zu] (addr=%p)\",\n                pos, prefix_len, (const void *)&line[prefix_len]);\n\n      /* Preserve original behavior: duplicate suffix starting at &line[prefix_len]. */\n      *suffix = strdup (&line[prefix_len]);\n\n      probe_log(\"try_match_header: strdup returned %p for *suffix\", (const void *)*suffix);\n      if (*suffix == NULL)\n      {\n        probe_log(\"try_match_header: strdup failed (returned NULL)\");\n      }\n\n      probe_log(\"try_match_header: returning MHD_YES\");\n      return MHD_YES;\n    }\n    ++line;\n  }\n\n  probe_log(\"try_match_header: reached end of line without match; returning MHD_NO\");\n  return MHD_NO;\n}\n"
}