{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_str_equal_caseless_n_ compares up to prefix_len characters from its pointer arguments, calling it with prefix_len larger than the number of characters remaining in line can cause reads beyond the end of the object pointed to by line. For example, if line contains a shorter (null-terminated) string than prefix_len, the call may access bytes past the terminating null (out-of-bounds) \u2014 violating MISRA C 2023 Rule 21.17 unless MHD_str_equal_caseless_n_ itself guards against such reads.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_match_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2389.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_match_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified try_match_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stddef.h>\n\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  /* Open log file for append. Best-effort logging; do not fail the logic if logging fails. */\n  FILE *log = fopen(\"/tmp/logs/2389.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTRY try_match_header: prefix=%p prefix_len=%zu line=%p suffix_ptr=%p\\n\",\n            (void *)prefix, prefix_len, (void *)line, (void *)*suffix);\n  }\n\n  if (NULL != *suffix)\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY EXIT: *suffix is not NULL (pointer=%p)\\n\", (void *)*suffix);\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  size_t idx = 0u;\n  while (0 != *line)\n  {\n    /* Compute a bounded remaining length from the current line pointer.\n       We only need to know whether the remaining characters are fewer than prefix_len.\n       To avoid scanning unbounded memory, cap the scan at prefix_len + 1. */\n    size_t rem = 0u;\n    const char *p = line;\n    while (rem <= prefix_len && 0 != *p)\n    {\n      ++rem;\n      ++p;\n    }\n    /* After the loop:\n       - if rem <= prefix_len then the actual remaining length is rem (<= prefix_len)\n       - if rem == prefix_len + 1 then the actual remaining length is > prefix_len\n       A potential out-of-bounds read by MHD_str_equal_caseless_n_ exists only when actual remaining < prefix_len,\n       which corresponds to rem < prefix_len here. */\n\n    if (log)\n    {\n      /* Print the current character as an unsigned hex to avoid locale/printing issues. */\n      fprintf(log, \"iter idx=%zu line=%p char=0x%02x rem_capped=%zu\\n\",\n              idx, (void *)line, (unsigned int)(unsigned char)*line, rem);\n    }\n\n    /* Call the original comparison function as before. */\n    int equal = MHD_str_equal_caseless_n_ (prefix,\n                                           line,\n                                           prefix_len);\n\n    if (log)\n    {\n      fprintf(log, \"MHD_str_equal_caseless_n_ returned %d (prefix_len=%zu)\\n\", equal, prefix_len);\n    }\n\n    if (equal)\n    {\n      if (log)\n      {\n        fprintf(log, \"MATCH at idx=%zu: line=%p prefix_len=%zu rem_capped=%zu suffix_addr=%p\\n\",\n                idx, (void *)line, prefix_len, rem, (void *)&line[prefix_len]);\n        if (rem < prefix_len)\n        {\n          /* Evidence of the violation scenario: remaining characters fewer than prefix_len. */\n          fprintf(log, \"POTENTIAL OOB: remaining chars (%zu) < prefix_len (%zu) => MHD_str_equal_caseless_n_ may have read beyond the '\\0' terminator.\\n\",\n                  rem, prefix_len);\n        }\n        else\n        {\n          fprintf(log, \"remaining chars appear sufficient (rem_capped=%zu).\\n\", rem);\n        }\n      }\n\n      *suffix = strdup (&line[prefix_len]);\n\n      if (log)\n      {\n        fprintf(log, \"allocated suffix=%p\\n\", (void *)*suffix);\n        fclose(log);\n      }\n      return MHD_YES;\n    }\n\n    ++line;\n    ++idx;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"NO MATCH: exhausted line at idx=%zu\\n\", idx);\n    fclose(log);\n  }\n  return MHD_NO;\n}\n"
}