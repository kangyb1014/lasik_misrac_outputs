{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of answer_unique_dyn_response:\n```c\nstatic enum MHD_Result\nanswer_unique_dyn_response (void *cls,\n                            struct MHD_Connection *connection,\n                            const char *url,\n                            const char *method,\n                            const char *version,\n                            const char *upload_data,\n                            size_t *upload_data_size,\n                            void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_from_buffer_static (body_dyn_size,\n                                              body_dyn);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (body_dyn_size,\n                                       (void *) body_dyn,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "  (void) url; (void) version; /* Unused */",
    "  (void) cls;  /* Unused */",
    "  (void) upload_data; (void) upload_data_size; /* Unused */"
  ],
  "explanation": "Other code fragments do not appear to be dead code and therefore need not be investigated: - The static variable declaration \"static int marker = 0;\" is an initialization (note 3) and its address is stored into *req_cls on the first call, so it affects behaviour. - The first-call branch (if (NULL == *req_cls) { *req_cls = (void *) &marker; return MHD_YES; }) is used to defer the reply and removing it would change runtime behaviour. - The method-check and the \"return MHD_NO;\" for unsupported methods affect control flow and connection handling. - The response creation (MHD_create_response_from_buffer_static / MHD_create_response_from_buffer), queuing (MHD_queue_response), and destruction (MHD_destroy_response) are core actions that affect program behaviour; the two branches are mutually exclusive compile-time alternatives selected by the preprocessor. - Variables r and ret are used subsequently; their declarations are not dead. - There is no obvious unreachable code in the function; preprocessor branches are compile-time choices, not executed dead code."
}