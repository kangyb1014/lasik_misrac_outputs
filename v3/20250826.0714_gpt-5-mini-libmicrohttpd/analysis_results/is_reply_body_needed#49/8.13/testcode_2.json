{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local alias is declared as a const pointer to a non-const pointee: \"struct MHD_Connection *const c = connection;\". If the function only reads the connection (which is the case here: c->rq.http_mthd and other read-only checks), the pointer should point to a const-qualified type. Declaring the pointer-to-const (for example \"const struct MHD_Connection * const c = connection;\" or \"const struct MHD_Connection *c = connection;\") would comply with MISRA C 2023 Rule 8.13. As written, the code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_reply_body_needed code that contains useful probe functions that print useful logs to a file \"/tmp/logs/493.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_reply_body_needed as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_reply_body_needed:\n```c\nstatic enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n\n  if (199 >= rcode)\n    return RP_BODY_NONE;\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n    return RP_BODY_NONE;\n\n#if 0\n  /* This check is not needed as upgrade handler is used only with code 101 */\n#ifdef UPGRADE_SUPPORT\n  if (NULL != rp.response->upgrade_handler)\n    return RP_BODY_NONE;\n#endif /* UPGRADE_SUPPORT */\n#endif\n\n#if 0\n  /* CONNECT is not supported by MHD */\n  /* Successful responses for connect requests are filtered by\n   * MHD_queue_response() */\n  if ( (MHD_HTTP_MTHD_CONNECT == c->rq.http_mthd) &&\n       (2 == rcode / 100) )\n    return false; /* Actually pass-through CONNECT is not supported by MHD */\n#endif\n\n  /* Reply body headers could be used.\n   * Check whether reply body itself must be used. */\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n    return RP_BODY_HEADERS_ONLY;\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n    return RP_BODY_HEADERS_ONLY;\n\n  /* Reply body must be sent. The body may have zero length, but body size\n   * must be indicated by headers ('Content-Length:' or\n   * 'Transfer-Encoding: chunked'). */\n  return RP_BODY_SEND;\n}\n```\n</target_code>\nPlease provide the modified is_reply_body_needed code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Minimal supporting definitions so this test snippet is self-contained and\n * compilable. These mirror the members used by is_reply_body_needed. */\nstruct MHD_Request {\n  int http_mthd;\n};\n\nstruct MHD_Connection {\n  struct MHD_Request rq;\n};\n\n/* Use enum instead of macros (no macros allowed by constraints). */\nenum {\n  MHD_HTTP_NO_CONTENT = 204,\n  MHD_HTTP_NOT_MODIFIED = 304,\n  MHD_HTTP_MTHD_HEAD = 3,\n  MHD_HTTP_MTHD_CONNECT = 7\n};\n\n/* Return values used by the function. */\nenum replyBodyUse {\n  RP_BODY_NONE,\n  RP_BODY_HEADERS_ONLY,\n  RP_BODY_SEND\n};\n\n/* Provide a function-like assertion (avoid defining a macro). Keep behavior\n * simple: if the assertion fails, log and abort. */\nstatic void\nmhd_assert (int cond)\n{\n  if (!cond)\n    {\n      FILE *f = fopen(\"/tmp/logs/493.txt\", \"a\");\n      if (f)\n        {\n          fprintf (f, \"mhd_assert failed\\n\");\n          fclose (f);\n        }\n      abort ();\n    }\n}\n\n/* Logging probe: append a concise record about the control path and key\n * state (pointer address, reported HTTP method value and response code)\n * to /tmp/logs/493.txt. The function does not change program logic. */\nstatic void\nlog_probe (const struct MHD_Connection *const c, unsigned int rcode, const char *event)\n{\n  FILE *f = fopen (\"/tmp/logs/493.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  if (NULL == c)\n    {\n      fprintf (f, \"%s: connection=NULL, rcode=%u\\n\", event, rcode);\n    }\n  else\n    {\n      fprintf (f, \"%s: connection=%p, rq.http_mthd=%d, rcode=%u\\n\",\n               event, (const void *) c, c->rq.http_mthd, rcode);\n    }\n\n  fclose (f);\n}\n\nstatic enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  /* Keep the original local alias that is the subject of the reported\n   * violation: a const pointer to a non-const pointee. This is intentionally\n   * left as in the original code to allow reproduction of the rule 8.13\n   * scenario. */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n\n  /* Log entry into the function with initial state. */\n  log_probe (c, rcode, \"enter\");\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n\n  if (199 >= rcode)\n    {\n      log_probe (c, rcode, \"early_return_RP_BODY_NONE_1\");\n      return RP_BODY_NONE;\n    }\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n    {\n      log_probe (c, rcode, \"early_return_RP_BODY_NONE_2_NO_CONTENT\");\n      return RP_BODY_NONE;\n    }\n\n#if 0\n  /* This check is not needed as upgrade handler is used only with code 101 */\n#ifdef UPGRADE_SUPPORT\n  if (NULL != rp.response->upgrade_handler)\n    return RP_BODY_NONE;\n#endif /* UPGRADE_SUPPORT */\n#endif\n\n#if 0\n  /* CONNECT is not supported by MHD */\n  /* Successful responses for connect requests are filtered by\n   * MHD_queue_response() */\n  if ( (MHD_HTTP_MTHD_CONNECT == c->rq.http_mthd) &&\n       (2 == rcode / 100) )\n    return false; /* Actually pass-through CONNECT is not supported by MHD */\n#endif\n\n  /* Reply body headers could be used.\n   * Check whether reply body itself must be used. */\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n    {\n      log_probe (c, rcode, \"return_RP_BODY_HEADERS_ONLY_head_method\");\n      return RP_BODY_HEADERS_ONLY;\n    }\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n    {\n      log_probe (c, rcode, \"return_RP_BODY_HEADERS_ONLY_not_modified\");\n      return RP_BODY_HEADERS_ONLY;\n    }\n\n  /* Reply body must be sent. The body may have zero length, but body size\n   * must be indicated by headers ('Content-Length:' or\n   * 'Transfer-Encoding: chunked'). */\n  log_probe (c, rcode, \"return_RP_BODY_SEND\");\n  return RP_BODY_SEND;\n}\n"
}