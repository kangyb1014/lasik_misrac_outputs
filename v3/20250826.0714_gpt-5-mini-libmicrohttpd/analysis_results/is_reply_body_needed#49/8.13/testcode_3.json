{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local alias is declared as 'struct MHD_Connection *const c = connection;' which makes the pointer itself const but not the pointed-to type. The code only reads from c (c->rq.http_mthd) and does not modify the pointee, so per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type (e.g. 'const struct MHD_Connection * const c' or 'const struct MHD_Connection *c'). Therefore the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_reply_body_needed code that contains useful probe functions that print useful logs to a file \"/tmp/logs/493.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_reply_body_needed as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_reply_body_needed:\n```c\nstatic enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n\n  if (199 >= rcode)\n    return RP_BODY_NONE;\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n    return RP_BODY_NONE;\n\n#if 0\n  /* This check is not needed as upgrade handler is used only with code 101 */\n#ifdef UPGRADE_SUPPORT\n  if (NULL != rp.response->upgrade_handler)\n    return RP_BODY_NONE;\n#endif /* UPGRADE_SUPPORT */\n#endif\n\n#if 0\n  /* CONNECT is not supported by MHD */\n  /* Successful responses for connect requests are filtered by\n   * MHD_queue_response() */\n  if ( (MHD_HTTP_MTHD_CONNECT == c->rq.http_mthd) &&\n       (2 == rcode / 100) )\n    return false; /* Actually pass-through CONNECT is not supported by MHD */\n#endif\n\n  /* Reply body headers could be used.\n   * Check whether reply body itself must be used. */\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n    return RP_BODY_HEADERS_ONLY;\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n    return RP_BODY_HEADERS_ONLY;\n\n  /* Reply body must be sent. The body may have zero length, but body size\n   * must be indicated by headers ('Content-Length:' or\n   * 'Transfer-Encoding: chunked'). */\n  return RP_BODY_SEND;\n}\n```\n</target_code>\nPlease provide the modified is_reply_body_needed code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helpers: append logs to /tmp/logs/493.txt */\nstatic void append_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/493.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic void log_state(const char *tag, struct MHD_Connection *const c, unsigned int rcode)\n{\n  if (NULL != c)\n  {\n    /* Log pointer value and the observed request method field */\n    /* Cast to int to avoid format mismatch if http_mthd is an enum */\n    append_log(\"%s: rcode=%u, connection=%p, c=%p, c->rq.http_mthd=%d\",\n               tag, rcode, (void *)c, (void *)c, (int)c->rq.http_mthd);\n  }\n  else\n  {\n    append_log(\"%s: rcode=%u, connection=NULL\", tag, rcode);\n  }\n}\n\nstatic enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n\n  /* Probe: entry and alias state */\n  append_log(\"ENTER is_reply_body_needed: connection=%p, rcode=%u\", (void *)connection, rcode);\n  log_state(\"After alias\", c, rcode);\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n\n  if (199 >= rcode)\n  {\n    append_log(\"DECISION: rcode <= 199 -> RP_BODY_NONE (rcode=%u)\", rcode);\n    return RP_BODY_NONE;\n  }\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n  {\n    append_log(\"DECISION: MHD_HTTP_NO_CONTENT -> RP_BODY_NONE (rcode=%u)\", rcode);\n    return RP_BODY_NONE;\n  }\n\n#if 0\n  /* This check is not needed as upgrade handler is used only with code 101 */\n#ifdef UPGRADE_SUPPORT\n  if (NULL != rp.response->upgrade_handler)\n    return RP_BODY_NONE;\n#endif /* UPGRADE_SUPPORT */\n#endif\n\n#if 0\n  /* CONNECT is not supported by MHD */\n  /* Successful responses for connect requests are filtered by\n   * MHD_queue_response() */\n  if ( (MHD_HTTP_MTHD_CONNECT == c->rq.http_mthd) &&\n       (2 == rcode / 100) )\n    return false; /* Actually pass-through CONNECT is not supported by MHD */\n#endif\n\n  /* Reply body headers could be used.\n   * Check whether reply body itself must be used. */\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n  {\n    append_log(\"DECISION: HEAD method -> RP_BODY_HEADERS_ONLY (method=%d, rcode=%u)\", (int)c->rq.http_mthd, rcode);\n    return RP_BODY_HEADERS_ONLY;\n  }\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n  {\n    append_log(\"DECISION: MHD_HTTP_NOT_MODIFIED -> RP_BODY_HEADERS_ONLY (rcode=%u)\", rcode);\n    return RP_BODY_HEADERS_ONLY;\n  }\n\n  /* Reply body must be sent. The body may have zero length, but body size\n   * must be indicated by headers ('Content-Length:' or\n   * 'Transfer-Encoding: chunked'). */\n  append_log(\"DECISION: default -> RP_BODY_SEND (method=%d, rcode=%u)\", (int)c->rq.http_mthd, rcode);\n  return RP_BODY_SEND;\n}\n"
}