{
  "user_message": "An agent A claimed that the following is_reply_body_needed code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_reply_body_needed.\n```c\nstatic enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n\n  if (199 >= rcode)\n    return RP_BODY_NONE;\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n    return RP_BODY_NONE;\n\n#if 0\n  /* This check is not needed as upgrade handler is used only with code 101 */\n#ifdef UPGRADE_SUPPORT\n  if (NULL != rp.response->upgrade_handler)\n    return RP_BODY_NONE;\n#endif /* UPGRADE_SUPPORT */\n#endif\n\n#if 0\n  /* CONNECT is not supported by MHD */\n  /* Successful responses for connect requests are filtered by\n   * MHD_queue_response() */\n  if ( (MHD_HTTP_MTHD_CONNECT == c->rq.http_mthd) &&\n       (2 == rcode / 100) )\n    return false; /* Actually pass-through CONNECT is not supported by MHD */\n#endif\n\n  /* Reply body headers could be used.\n   * Check whether reply body itself must be used. */\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n    return RP_BODY_HEADERS_ONLY;\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n    return RP_BODY_HEADERS_ONLY;\n\n  /* Reply body must be sent. The body may have zero length, but body size\n   * must be indicated by headers ('Content-Length:' or\n   * 'Transfer-Encoding: chunked'). */\n  return RP_BODY_SEND;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function takes a non-const pointer (struct MHD_Connection *connection) and creates a const pointer to non-const data (struct MHD_Connection *const c). The fragment reads c->rq.http_mthd without modifying the object, so the pointed-to type could and should be const-qualified (e.g. const struct MHD_Connection *connection and const struct MHD_Connection *const c). Because the pointer points to a non-const-qualified type while only being used for read access, Rule 8.13 is violated.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1756197422] decision=enter_is_reply_body_needed addr=0x560f597d5df0 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x560f597d5df0 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x560f597dea80 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x560f597dea80 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x560f597d6090 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x560f597d6090 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f997c000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f9978000d90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f9978000d90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f9978000d90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f9978000d90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f9984001070 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f9984001070 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f9984000b70 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f9984000b70 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x555be65a5610 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x555be65a5610 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x555be65a72a0 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x555be65a72a0 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x555be65a58b0 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x555be65a58b0 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197422] decision=enter_is_reply_body_needed addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197422] decision=RP_BODY_NONE:rcode<=199 addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197423] decision=enter_is_reply_body_needed addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197423] decision=RP_BODY_NONE:rcode<=199 addr=0x7f7b94000b90 rcode=101 http_mthd=1\n[1756197423] decision=enter_is_reply_body_needed addr=0x7f7b8c000b90 rcode=101 http_mthd=1\n[1756197423] decision=RP_BODY_NONE:rcode<=199 addr=0x7f7b8c000b90 r\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function takes a pointer to a non-const-qualified type (struct MHD_Connection *connection) and then creates a const pointer to that non-const pointee (struct MHD_Connection *const c). The function only reads members of the object (c->rq.http_mthd etc.), so the pointee could and should be const-qualified. MISRA C 2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible; here it is possible to make the parameter and the alias point to const (e.g. const struct MHD_Connection *connection and const struct MHD_Connection *const c). The only valid exceptions would be if the function (or its callers) must legally modify the pointed-to object or the API compatibility prevents changing the parameter, which is not evident from the snippet. Therefore this is a violation of Rule 8.13."
}