{
  "user_message": "An agent A claimed that the following is_reply_body_needed code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_reply_body_needed.\n```c\nstatic enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n\n  if (199 >= rcode)\n    return RP_BODY_NONE;\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n    return RP_BODY_NONE;\n\n#if 0\n  /* This check is not needed as upgrade handler is used only with code 101 */\n#ifdef UPGRADE_SUPPORT\n  if (NULL != rp.response->upgrade_handler)\n    return RP_BODY_NONE;\n#endif /* UPGRADE_SUPPORT */\n#endif\n\n#if 0\n  /* CONNECT is not supported by MHD */\n  /* Successful responses for connect requests are filtered by\n   * MHD_queue_response() */\n  if ( (MHD_HTTP_MTHD_CONNECT == c->rq.http_mthd) &&\n       (2 == rcode / 100) )\n    return false; /* Actually pass-through CONNECT is not supported by MHD */\n#endif\n\n  /* Reply body headers could be used.\n   * Check whether reply body itself must be used. */\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n    return RP_BODY_HEADERS_ONLY;\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n    return RP_BODY_HEADERS_ONLY;\n\n  /* Reply body must be sent. The body may have zero length, but body size\n   * must be indicated by headers ('Content-Length:' or\n   * 'Transfer-Encoding: chunked'). */\n  return RP_BODY_SEND;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local alias is declared as a const pointer to a non-const pointee: \"struct MHD_Connection *const c = connection;\". If the function only reads the connection (which is the case here: c->rq.http_mthd and other read-only checks), the pointer should point to a const-qualified type. Declaring the pointer-to-const (for example \"const struct MHD_Connection * const c = connection;\" or \"const struct MHD_Connection *c = connection;\") would comply with MISRA C 2023 Rule 8.13. As written, the code violates Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible (i.e. when the object is not modified through that pointer). In the function the local alias is declared as\n  struct MHD_Connection *const c = connection;\nwhich is a const pointer to a non-const pointee. The function only reads fields from the connection (c->rq.http_mthd, comparisons of rcode, etc.) and does not modify the pointee via c. Therefore the pointee type could and should be const-qualified. Changing the local alias to e.g.\n  const struct MHD_Connection * const c = connection;\n(or at least const struct MHD_Connection *c = connection;) would satisfy Rule 8.13. Assigning a non-const pointer to a pointer-to-const is allowed without a cast, so this change is safe even if the incoming parameter remains non-const.\nGiven this, Agent A\u2019s report that the code violates MISRA C 2023 Rule 8.13 is correct."
}