{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_digest_auth_get_username the statement '(void) used; /* Mute compiler warning for non-debug builds */' is an executed no\u2011op whose removal would not affect program behaviour (it only suppresses an unused\u2011variable warning). Therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_get_username code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2562.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_get_username as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_get_username:\n```c\n_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  uname_type = get_rq_uname_type (params);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n    return NULL;\n\n  buf_size = get_rq_unames_size (params, uname_type);\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  if (NULL == username)\n    return NULL;\n\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    memset (&uname_strct, 0, sizeof(uname_strct));\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      free (username);\n      return NULL;\n    }\n    (void) used; /* Mute compiler warning for non-debug builds */\n    mhd_assert (buf_size >= used);\n  }\n\n  return username;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_get_username code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append control-flow and state information to /tmp/logs/2562.txt */\nstatic void mhd_probe_log(const char *event,\n                          void *connection_ptr,\n                          int uname_type_i,\n                          int uname_strct_type_i,\n                          size_t buf_size,\n                          size_t used,\n                          const char *username)\n{\n  FILE *f = fopen(\"/tmp/logs/2562.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"EVENT: %s\\n\", event);\n  fprintf(f, \"  connection=%p uname_type=%d uname_strct_type=%d\\n\",\n          connection_ptr, uname_type_i, uname_strct_type_i);\n  fprintf(f, \"  buf_size=%zu used=%zu username_ptr=%p\\n\",\n          buf_size, used, (void *) username);\n  if (username != NULL) {\n    /* Print as string if present. Be cautious: username should be NUL-terminated\n       as allocated/filled by the original code; this log is for debugging only. */\n    fprintf(f, \"  username=\\\"%s\\\"\\n\", username);\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params) {\n    /* Log the early-exit due to missing params */\n    mhd_probe_log(\"params_null\", (void *) connection, -1, -1, 0u, 0u, NULL);\n    return NULL;\n  }\n\n  /* Log that params were found */\n  mhd_probe_log(\"params_found\", (void *) connection, -1, -1, 0u, 0u, NULL);\n\n  uname_type = get_rq_uname_type (params);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n  {\n    /* Log invalid uname_type and exit */\n    mhd_probe_log(\"invalid_uname_type\", (void *) connection,\n                  (int) uname_type, -1, 0u, 0u, NULL);\n    return NULL;\n  }\n\n  buf_size = get_rq_unames_size (params, uname_type);\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  if (NULL == username) {\n    /* Log allocation failure */\n    mhd_probe_log(\"alloc_failed\", (void *) connection, (int) uname_type, -1, buf_size, 0u, NULL);\n    return NULL;\n  }\n\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    memset (&uname_strct, 0, sizeof(uname_strct));\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      /* Log the mismatch before freeing */\n      mhd_probe_log(\"uname_type_mismatch\", (void *) connection,\n                    (int) uname_type, (int) uname_strct.uname_type,\n                    buf_size, used, username);\n      free (username);\n      return NULL;\n    }\n\n    /* Keep the original mute-of-unused variable (the executed no-op under inspection) */\n    (void) used; /* Mute compiler warning for non-debug builds */\n\n    /* Immediately after the statement under inspection, emit a log entry so that\n       we can demonstrate that the no-op was executed and capture the surrounding state. */\n    mhd_probe_log(\"after_void_used_executed\", (void *) connection,\n                  (int) uname_type, (int) uname_strct.uname_type,\n                  buf_size, used, username);\n\n    mhd_assert (buf_size >= used);\n  }\n\n  /* Log the successful return value */\n  mhd_probe_log(\"return_username\", (void *) connection, (int) uname_type, -1, buf_size, 0u, username);\n\n  return username;\n}\n"
}