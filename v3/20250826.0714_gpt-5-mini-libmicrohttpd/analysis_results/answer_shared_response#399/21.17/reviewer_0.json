{
  "user_message": "An agent A claimed that the following answer_shared_response code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of answer_shared_response.\n```c\nstatic enum MHD_Result\nanswer_shared_response (void *cls,\n                        struct MHD_Connection *connection,\n                        const char *url,\n                        const char *method,\n                        const char *version,\n                        const char *upload_data,\n                        size_t *upload_data_size,\n                        void **req_cls)\n{\n  static int marker = 0;\n  unsigned int resp_index;\n  static volatile unsigned int last_index = 0;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n  /* This kind of operation does not guarantee that numbers are not reused\n     in parallel threads, when processed simultaneously, but this should not\n     be a big problem, as it just slow down replies a bit due to\n     responses locking. */\n  resp_index = (last_index++) % num_resps;\n  return MHD_queue_response (connection, MHD_HTTP_OK, resps[resp_index]);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe calls strcmp(method, MHD_HTTP_METHOD_GET) and strcmp(method, MHD_HTTP_METHOD_HEAD) assume both pointers point to valid NUL-terminated strings. MHD_HTTP_METHOD_* are string literals (safe), but 'method' is not checked for NULL or guaranteed NUL-termination in this fragment. If 'method' is NULL (or not NUL-terminated), strcmp will access beyond the bounds of the object referenced by 'method' (undefined behavior). Therefore the code can violate MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is essentially correct: the two strcmp calls use 'method' without any check that it points to a valid NUL-terminated character array. MISRA C 2023 Rule 21.17 requires that use of string.h functions must not risk accesses beyond the bounds of the objects referenced by their pointer parameters. If 'method' were NULL or not NUL-terminated, strcmp(method, ...) would invoke undefined behaviour and could access out-of-bounds memory, violating Rule 21.17.\n\nThat said, whether this is an actual violation in the concrete system depends on the calling contract for this callback. If the underlying HTTP library (libmicrohttpd) guarantees that the 'method' parameter is always non-NULL and always NUL-terminated, then the code does not violate the rule because the precondition ensures the string functions cannot access out of bounds. If there is no such documented guarantee, the code should be considered non-compliant: the safe remedy is to either validate 'method' (e.g. check for NULL) before calling strcmp, or document and enforce the precondition that 'method' is a valid NUL-terminated string.\n\nRecommendation: add a defensive check (or an assert and documented precondition) to ensure 'method' is non-NULL and NUL-terminated (or rely on and document the external guarantee), to satisfy Rule 21.17 unambiguously."
}