{
  "user_message": "An agent A claimed that the following response_completed_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of response_completed_callback.\n```c\nstatic void\nresponse_completed_callback (void *cls,\n                             struct MHD_Connection *connection,\n                             void **req_cls,\n                             enum MHD_RequestTerminationCode toe)\n{\n  struct UploadContext *uc = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == uc)\n    return; /* this request wasn't an upload request */\n  if (NULL != uc->pp)\n  {\n    MHD_destroy_post_processor (uc->pp);\n    uc->pp = NULL;\n  }\n  if (-1 != uc->fd)\n  {\n    (void) close (uc->fd);\n    if (NULL != uc->filename)\n    {\n      fprintf (stderr,\n               \"Upload of file `%s' failed (incomplete or aborted), removing file.\\n\",\n               uc->filename);\n      (void) unlink (uc->filename);\n    }\n  }\n  if (NULL != uc->filename)\n    free (uc->filename);\n  free (uc);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'void *cls' is not used or modified in response_completed_callback, so it should be declared pointing to a const-qualified type (i.e. 'const void *cls') to express non-modification. Declaring it as plain 'void *' therefore violates MISRA C 2023 Rule 8.13. (Note: if the function must match an external library callback prototype that requires 'void *', then changing the type is impossible and the deviation should be documented.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not correct in this context. MISRA C:2023 R8.13 does encourage using const-qualified pointee types when possible, but that guidance is subject to the requirement to match external interfaces. response_completed_callback is an implementation of a libmicrohttpd callback whose prototype requires a plain void * (and void ** for req_cls). Because the function must match the external library's signature, you cannot change the parameter types to const void * / const void * const without breaking the required prototype. In other words the use of plain void * here is intentional and unavoidable, so this is a permissible deviation (and should be documented as such). If the code were free to choose the signature, then const could be applied; but given the external callback prototype, Agent A's report of a rule violation is not correct. Suggested action: document the deviation (or use the project's deviation/justification mechanism), or suppress the specific diagnostic according to your project's MISRA compliance process."
}