{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of response_completed_callback:\n```c\nstatic void\nresponse_completed_callback (void *cls,\n                             struct MHD_Connection *connection,\n                             void **req_cls,\n                             enum MHD_RequestTerminationCode toe)\n{\n  struct UploadContext *uc = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == uc)\n    return; /* this request wasn't an upload request */\n  if (NULL != uc->pp)\n  {\n    MHD_destroy_post_processor (uc->pp);\n    uc->pp = NULL;\n  }\n  if (-1 != uc->fd)\n  {\n    (void) close (uc->fd);\n    if (NULL != uc->filename)\n    {\n      fprintf (stderr,\n               \"Upload of file `%s' failed (incomplete or aborted), removing file.\\n\",\n               uc->filename);\n      (void) unlink (uc->filename);\n    }\n  }\n  if (NULL != uc->filename)\n    free (uc->filename);\n  free (uc);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "MISRA C:2023 Rule 21.17 concerns use of the string handling functions from <string.h> (memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn) and ensuring they do not access beyond object bounds. The provided function contains no calls to any of these <string.h> functions. The code does use uc->filename in fprintf, unlink, and free, but each use is guarded by NULL checks (if (NULL != uc->filename)), so there are no direct calls to string.h routines that could read/write out of bounds. Other library calls present (MHD_destroy_post_processor, close, unlink, free, fprintf) are not within the set of functions restricted by Rule 21.17. The dereference of *req_cls to obtain uc is a pointer-safety concern but is unrelated to Rule 21.17. Therefore there are no code fragments in this function that need investigation specifically for MISRA C 2023 Rule 21.17 compliance."
}