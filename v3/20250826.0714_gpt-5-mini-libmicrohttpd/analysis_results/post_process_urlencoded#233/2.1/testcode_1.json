{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe while loop condition includes (pp->state != PP_Error), so the loop body cannot be entered with pp->state == PP_Error. Therefore the switch case `case PP_Error:` is not reachable. In addition, abort() is a non\u2011returning call, so the subsequent `break;` in that case is also unreachable. Both constitute unreachable code (violating MISRA C 2023 Rule 2.1).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_process_urlencoded code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2331.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of post_process_urlencoded as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of post_process_urlencoded:\n```c\nstatic enum MHD_Result\npost_process_urlencoded (struct MHD_PostProcessor *pp,\n                         const char *post_data,\n                         size_t post_data_len)\n{\n  char *kbuf = (char *) &pp[1];\n  size_t poff;\n  const char *start_key = NULL;\n  const char *end_key = NULL;\n  const char *start_value = NULL;\n  const char *end_value = NULL;\n  const char *last_escape = NULL;\n\n  mhd_assert (PP_Callback != pp->state);\n\n  poff = 0;\n  while ( ( (poff < post_data_len) ||\n            (pp->state == PP_Callback) ) &&\n          (pp->state != PP_Error) )\n  {\n    switch (pp->state)\n    {\n    case PP_Error:\n      /* clearly impossible as per while loop invariant */\n      abort ();\n      break; /* Unreachable */\n    case PP_Init:\n      /* initial phase */\n      mhd_assert (NULL == start_key);\n      mhd_assert (NULL == end_key);\n      mhd_assert (NULL == start_value);\n      mhd_assert (NULL == end_value);\n      switch (post_data[poff])\n      {\n      case '=':\n        /* Case: (no key)'=' */\n        /* Empty key with value */\n        pp->state = PP_Error;\n        continue;\n      case '&':\n        /* Case: (no key)'&' */\n        /* Empty key without value */\n        poff++;\n        continue;\n      case '\\n':\n      case '\\r':\n        /* Case: (no key)'\\n' or (no key)'\\r' */\n        pp->state = PP_Done;\n        poff++;\n        break;\n      default:\n        /* normal character, key start, advance! */\n        pp->state = PP_ProcessKey;\n        start_key = &post_data[poff];\n        pp->must_ikvi = true;\n        poff++;\n        continue;\n      }\n      break; /* end PP_Init */\n    case PP_ProcessKey:\n      /* key phase */\n      mhd_assert (NULL == start_value);\n      mhd_assert (NULL == end_value);\n      mhd_assert (NULL != start_key || 0 == poff);\n      mhd_assert (0 != poff || NULL == start_key);\n      mhd_assert (NULL == end_key);\n      switch (post_data[poff])\n      {\n      case '=':\n        /* Case: 'key=' */\n        if (0 != poff)\n          end_key = &post_data[poff];\n        poff++;\n        pp->state = PP_ProcessValue;\n        break;\n      case '&':\n        /* Case: 'key&' */\n        if (0 != poff)\n          end_key = &post_data[poff];\n        poff++;\n        pp->state = PP_Callback;\n        break;\n      case '\\n':\n      case '\\r':\n        /* Case: 'key\\n' or 'key\\r' */\n        if (0 != poff)\n          end_key = &post_data[poff];\n        /* No advance here, 'PP_Done' will be selected by next 'PP_Init' phase */\n        pp->state = PP_Callback;\n        break;\n      default:\n        /* normal character, advance! */\n        if (0 == poff)\n          start_key = post_data;\n        poff++;\n        break;\n      }\n      mhd_assert (NULL == end_key || NULL != start_key);\n      break; /* end PP_ProcessKey */\n    case PP_ProcessValue:\n      if (NULL == start_value)\n        start_value = &post_data[poff];\n      switch (post_data[poff])\n      {\n      case '=':\n        /* case 'key==' */\n        pp->state = PP_Error;\n        continue;\n      case '&':\n        /* case 'value&' */\n        end_value = &post_data[poff];\n        poff++;\n        if (pp->must_ikvi ||\n            (start_value != end_value) )\n        {\n          pp->state = PP_Callback;\n        }\n        else\n        {\n          pp->buffer_pos = 0;\n          pp->value_offset = 0;\n          pp->state = PP_Init;\n          start_value = NULL;\n          end_value = NULL;\n        }\n        continue;\n      case '\\n':\n      case '\\r':\n        /* Case: 'value\\n' or 'value\\r' */\n        end_value = &post_data[poff];\n        if (pp->must_ikvi ||\n            (start_value != end_value) )\n          pp->state = PP_Callback; /* No poff advance here to set PP_Done in the next iteration */\n        else\n        {\n          poff++;\n          pp->state = PP_Done;\n        }\n        break;\n      case '%':\n        last_escape = &post_data[poff];\n        poff++;\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        /* character, may be part of escaping */\n        poff++;\n        continue;\n      default:\n        /* normal character, no more escaping! */\n        last_escape = NULL;\n        poff++;\n        continue;\n      }\n      break; /* end PP_ProcessValue */\n    case PP_Done:\n      switch (post_data[poff])\n      {\n      case '\\n':\n      case '\\r':\n        poff++;\n        continue;\n      }\n      /* unexpected data at the end, fail! */\n      pp->state = PP_Error;\n      break;\n    case PP_Callback:\n      mhd_assert ((NULL != end_key) || (NULL == start_key));\n      if (1)\n      {\n        const size_t key_len = (size_t) (end_key - start_key);\n        mhd_assert (end_key >= start_key);\n        if (0 != key_len)\n        {\n          if ( (pp->buffer_pos + key_len >= pp->buffer_size) ||\n               (pp->buffer_pos + key_len < pp->buffer_pos) )\n          {\n            /* key too long, cannot parse! */\n            pp->state = PP_Error;\n            continue;\n          }\n          /* compute key, if we have not already */\n          memcpy (&kbuf[pp->buffer_pos],\n                  start_key,\n                  key_len);\n          pp->buffer_pos += key_len;\n          start_key = NULL;\n          end_key = NULL;\n          pp->must_unescape_key = true;\n        }\n      }\n#ifdef _DEBUG\n      else\n        mhd_assert (0 != pp->buffer_pos);\n#endif /* _DEBUG */\n      if (pp->must_unescape_key)\n      {\n        kbuf[pp->buffer_pos] = '\\0'; /* 0-terminate key */\n        MHD_unescape_plus (kbuf);\n        MHD_http_unescape (kbuf);\n        pp->must_unescape_key = false;\n      }\n      process_value (pp,\n                     start_value,\n                     end_value,\n                     NULL);\n      if (PP_Error == pp->state)\n        continue;\n      pp->value_offset = 0;\n      start_value = NULL;\n      end_value = NULL;\n      pp->buffer_pos = 0;\n      pp->state = PP_Init;\n      break;\n    case PP_NextBoundary:\n    case PP_ProcessEntryHeaders:\n    case PP_PerformCheckMultipart:\n    case PP_ProcessValueToBoundary:\n    case PP_PerformCleanup:\n    case PP_Nested_Init:\n    case PP_Nested_PerformMarking:\n    case PP_Nested_ProcessEntryHeaders:\n    case PP_Nested_ProcessValueToBoundary:\n    case PP_Nested_PerformCleanup:\n    default:\n      MHD_PANIC (_ (\"internal error.\\n\")); /* should never happen! */\n    }\n    mhd_assert ((end_key == NULL) || (start_key != NULL));\n    mhd_assert ((end_value == NULL) || (start_value != NULL));\n  }\n\n  mhd_assert (PP_Callback != pp->state);\n\n  if (PP_Error == pp->state)\n  {\n    /* State in error, returning failure */\n    return MHD_NO;\n  }\n\n  /* save remaining data for next iteration */\n  if (NULL != start_key)\n  {\n    size_t key_len;\n    mhd_assert ((PP_ProcessKey == pp->state) || (NULL != end_key));\n    if (NULL == end_key)\n      end_key = &post_data[poff];\n    mhd_assert (end_key >= start_key);\n    key_len = (size_t) (end_key - start_key);\n    mhd_assert (0 != key_len); /* it must be always non-zero here */\n    if (pp->buffer_pos + key_len >= pp->buffer_size)\n    {\n      pp->state = PP_Error;\n      return MHD_NO;\n    }\n    memcpy (&kbuf[pp->buffer_pos],\n            start_key,\n            key_len);\n    pp->buffer_pos += key_len;\n    pp->must_unescape_key = true;\n    start_key = NULL;\n    end_key = NULL;\n  }\n  if ( (NULL != start_value) &&\n       (PP_ProcessValue == pp->state) )\n  {\n    /* compute key, if we have not already */\n    if (pp->must_unescape_key)\n    {\n      kbuf[pp->buffer_pos] = '\\0'; /* 0-terminate key */\n      MHD_unescape_plus (kbuf);\n      MHD_http_unescape (kbuf);\n      pp->must_unescape_key = false;\n    }\n    if (NULL == end_value)\n      end_value = &post_data[poff];\n    if ( (NULL != last_escape) &&\n         (2 < (end_value - last_escape)) )\n      last_escape = NULL;\n    process_value (pp,\n                   start_value,\n                   end_value,\n                   last_escape);\n    pp->must_ikvi = false;\n  }\n  if (PP_Error == pp->state)\n  {\n    /* State in error, returning failure */\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified post_process_urlencoded code.\n",
  "test_code": "static void\nlog_probe_state(struct MHD_PostProcessor *pp,\n                const char *label,\n                const char *post_data,\n                size_t poff,\n                size_t post_data_len)\n{\n  FILE *f = fopen(\"/tmp/logs/2331.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s: state=%d, buffer_pos=%zu, value_offset=%zu, must_ikvi=%d, must_unescape_key=%d, poff=%zu, post_data_len=%zu\",\n          label,\n          (int) pp->state,\n          (size_t) pp->buffer_pos,\n          (size_t) pp->value_offset,\n          (int) pp->must_ikvi,\n          (int) pp->must_unescape_key,\n          poff,\n          post_data_len);\n  if (poff < post_data_len && NULL != post_data)\n  {\n    unsigned char c = (unsigned char) post_data[poff];\n    if (c >= 32 && c < 127)\n      fprintf(f, \", char='%c' (0x%02x)\\n\", c, c);\n    else\n      fprintf(f, \", char=(0x%02x)\\n\", c);\n  }\n  else\n  {\n    fprintf(f, \", char=(out-of-range)\\n\");\n  }\n  fclose(f);\n}\n\nstatic enum MHD_Result\npost_process_urlencoded (struct MHD_PostProcessor *pp,\n                         const char *post_data,\n                         size_t post_data_len)\n{\n  char *kbuf = (char *) &pp[1];\n  size_t poff;\n  const char *start_key = NULL;\n  const char *end_key = NULL;\n  const char *start_value = NULL;\n  const char *end_value = NULL;\n  const char *last_escape = NULL;\n\n  /* log entry */\n  log_probe_state(pp, \"ENTER\", post_data, 0U, post_data_len);\n\n  mhd_assert (PP_Callback != pp->state);\n\n  poff = 0;\n  while ( ( (poff < post_data_len) ||\n            (pp->state == PP_Callback) ) &&\n          (pp->state != PP_Error) )\n  {\n    /* log loop top */\n    log_probe_state(pp, \"LOOP_TOP\", post_data, poff, post_data_len);\n\n    switch (pp->state)\n    {\n    case PP_Error:\n      /* clearly impossible as per while loop invariant */\n      log_probe_state(pp, \"CASE_PP_Error_enter (should be unreachable)\", post_data, poff, post_data_len);\n      abort ();\n      break; /* Unreachable */\n    case PP_Init:\n      /* initial phase */\n      log_probe_state(pp, \"CASE_PP_Init_enter\", post_data, poff, post_data_len);\n      mhd_assert (NULL == start_key);\n      mhd_assert (NULL == end_key);\n      mhd_assert (NULL == start_value);\n      mhd_assert (NULL == end_value);\n      switch (post_data[poff])\n      {\n      case '=':\n        /* Case: (no key)'=' */\n        /* Empty key with value */\n        pp->state = PP_Error;\n        log_probe_state(pp, \"PP_Init: saw '=' -> PP_Error\", post_data, poff, post_data_len);\n        continue;\n      case '&':\n        /* Case: (no key)'&' */\n        /* Empty key without value */\n        poff++;\n        log_probe_state(pp, \"PP_Init: saw '&' -> advance poff\", post_data, poff, post_data_len);\n        continue;\n      case '\\n':\n      case '\\r':\n        /* Case: (no key)'\\n' or (no key)'\\r' */\n        pp->state = PP_Done;\n        poff++;\n        log_probe_state(pp, \"PP_Init: saw newline -> PP_Done\", post_data, poff, post_data_len);\n        break;\n      default:\n        /* normal character, key start, advance! */\n        pp->state = PP_ProcessKey;\n        start_key = &post_data[poff];\n        pp->must_ikvi = true;\n        poff++;\n        log_probe_state(pp, \"PP_Init: start key -> PP_ProcessKey\", post_data, poff, post_data_len);\n        continue;\n      }\n      break; /* end PP_Init */\n    case PP_ProcessKey:\n      /* key phase */\n      log_probe_state(pp, \"CASE_PP_ProcessKey_enter\", post_data, poff, post_data_len);\n      mhd_assert (NULL == start_value);\n      mhd_assert (NULL == end_value);\n      mhd_assert (NULL != start_key || 0 == poff);\n      mhd_assert (0 != poff || NULL == start_key);\n      mhd_assert (NULL == end_key);\n      switch (post_data[poff])\n      {\n      case '=':\n        /* Case: 'key=' */\n        if (0 != poff)\n          end_key = &post_data[poff];\n        poff++;\n        pp->state = PP_ProcessValue;\n        log_probe_state(pp, \"PP_ProcessKey: saw '=' -> PP_ProcessValue\", post_data, poff, post_data_len);\n        break;\n      case '&':\n        /* Case: 'key&' */\n        if (0 != poff)\n          end_key = &post_data[poff];\n        poff++;\n        pp->state = PP_Callback;\n        log_probe_state(pp, \"PP_ProcessKey: saw '&' -> PP_Callback\", post_data, poff, post_data_len);\n        break;\n      case '\\n':\n      case '\\r':\n        /* Case: 'key\\n' or 'key\\r' */\n        if (0 != poff)\n          end_key = &post_data[poff];\n        /* No advance here, 'PP_Done' will be selected by next 'PP_Init' phase */\n        pp->state = PP_Callback;\n        log_probe_state(pp, \"PP_ProcessKey: saw newline -> PP_Callback (no advance)\", post_data, poff, post_data_len);\n        break;\n      default:\n        /* normal character, advance! */\n        if (0 == poff)\n          start_key = post_data;\n        poff++;\n        log_probe_state(pp, \"PP_ProcessKey: normal char -> advance poff\", post_data, poff, post_data_len);\n        break;\n      }\n      mhd_assert (NULL == end_key || NULL != start_key);\n      break; /* end PP_ProcessKey */\n    case PP_ProcessValue:\n      log_probe_state(pp, \"CASE_PP_ProcessValue_enter\", post_data, poff, post_data_len);\n      if (NULL == start_value)\n        start_value = &post_data[poff];\n      switch (post_data[poff])\n      {\n      case '=':\n        /* case 'key==' */\n        pp->state = PP_Error;\n        log_probe_state(pp, \"PP_ProcessValue: saw extra '=' -> PP_Error\", post_data, poff, post_data_len);\n        continue;\n      case '&':\n        /* case 'value&' */\n        end_value = &post_data[poff];\n        poff++;\n        if (pp->must_ikvi ||\n            (start_value != end_value) )\n        {\n          pp->state = PP_Callback;\n          log_probe_state(pp, \"PP_ProcessValue: value ended -> PP_Callback\", post_data, poff, post_data_len);\n        }\n        else\n        {\n          pp->buffer_pos = 0;\n          pp->value_offset = 0;\n          pp->state = PP_Init;\n          start_value = NULL;\n          end_value = NULL;\n          log_probe_state(pp, \"PP_ProcessValue: empty value -> reset and PP_Init\", post_data, poff, post_data_len);\n        }\n        continue;\n      case '\\n':\n      case '\\r':\n        /* Case: 'value\\n' or 'value\\r' */\n        end_value = &post_data[poff];\n        if (pp->must_ikvi ||\n            (start_value != end_value) )\n          pp->state = PP_Callback; /* No poff advance here to set PP_Done in the next iteration */\n        else\n        {\n          poff++;\n          pp->state = PP_Done;\n        }\n        log_probe_state(pp, \"PP_ProcessValue: saw newline -> set state accordingly\", post_data, poff, post_data_len);\n        break;\n      case '%':\n        last_escape = &post_data[poff];\n        poff++;\n        log_probe_state(pp, \"PP_ProcessValue: saw '%' -> set last_escape\", post_data, poff, post_data_len);\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        /* character, may be part of escaping */\n        poff++;\n        log_probe_state(pp, \"PP_ProcessValue: digit -> advance poff\", post_data, poff, post_data_len);\n        continue;\n      default:\n        /* normal character, no more escaping! */\n        last_escape = NULL;\n        poff++;\n        log_probe_state(pp, \"PP_ProcessValue: normal char -> clear last_escape and advance\", post_data, poff, post_data_len);\n        continue;\n      }\n      break; /* end PP_ProcessValue */\n    case PP_Done:\n      log_probe_state(pp, \"CASE_PP_Done_enter\", post_data, poff, post_data_len);\n      switch (post_data[poff])\n      {\n      case '\\n':\n      case '\\r':\n        poff++;\n        log_probe_state(pp, \"PP_Done: skip newline -> advance poff\", post_data, poff, post_data_len);\n        continue;\n      }\n      /* unexpected data at the end, fail! */\n      pp->state = PP_Error;\n      log_probe_state(pp, \"PP_Done: unexpected data -> PP_Error\", post_data, poff, post_data_len);\n      break;\n    case PP_Callback:\n      log_probe_state(pp, \"CASE_PP_Callback_enter\", post_data, poff, post_data_len);\n      mhd_assert ((NULL != end_key) || (NULL == start_key));\n      if (1)\n      {\n        const size_t key_len = (size_t) (end_key - start_key);\n        mhd_assert (end_key >= start_key);\n        if (0 != key_len)\n        {\n          if ( (pp->buffer_pos + key_len >= pp->buffer_size) ||\n               (pp->buffer_pos + key_len < pp->buffer_pos) )\n          {\n            /* key too long, cannot parse! */\n            pp->state = PP_Error;\n            log_probe_state(pp, \"PP_Callback: key too long -> PP_Error\", post_data, poff, post_data_len);\n            continue;\n          }\n          /* compute key, if we have not already */\n          log_probe_state(pp, \"PP_Callback: copying key (before memcpy)\", post_data, poff, post_data_len);\n          memcpy (&kbuf[pp->buffer_pos],\n                  start_key,\n                  key_len);\n          pp->buffer_pos += key_len;\n          log_probe_state(pp, \"PP_Callback: copied key (after memcpy)\", post_data, poff, post_data_len);\n          start_key = NULL;\n          end_key = NULL;\n          pp->must_unescape_key = true;\n        }\n      }\n#ifdef _DEBUG\n      else\n        mhd_assert (0 != pp->buffer_pos);\n#endif /* _DEBUG */\n      if (pp->must_unescape_key)\n      {\n        kbuf[pp->buffer_pos] = '\\0'; /* 0-terminate key */\n        MHD_unescape_plus (kbuf);\n        MHD_http_unescape (kbuf);\n        pp->must_unescape_key = false;\n        log_probe_state(pp, \"PP_Callback: unescaped key\", post_data, poff, post_data_len);\n      }\n      process_value (pp,\n                     start_value,\n                     end_value,\n                     NULL);\n      log_probe_state(pp, \"PP_Callback: after process_value\", post_data, poff, post_data_len);\n      if (PP_Error == pp->state)\n        continue;\n      pp->value_offset = 0;\n      start_value = NULL;\n      end_value = NULL;\n      pp->buffer_pos = 0;\n      pp->state = PP_Init;\n      log_probe_state(pp, \"PP_Callback: finished -> PP_Init\", post_data, poff, post_data_len);\n      break;\n    case PP_NextBoundary:\n    case PP_ProcessEntryHeaders:\n    case PP_PerformCheckMultipart:\n    case PP_ProcessValueToBoundary:\n    case PP_PerformCleanup:\n    case PP_Nested_Init:\n    case PP_Nested_PerformMarking:\n    case PP_Nested_ProcessEntryHeaders:\n    case PP_Nested_ProcessValueToBoundary:\n    case PP_Nested_PerformCleanup:\n    default:\n      MHD_PANIC (_ (\"internal error.\\n\")); /* should never happen! */\n    }\n    mhd_assert ((end_key == NULL) || (start_key != NULL));\n    mhd_assert ((end_value == NULL) || (start_value != NULL));\n  }\n\n  mhd_assert (PP_Callback != pp->state);\n\n  /* log state before final checks */\n  log_probe_state(pp, \"BEFORE_RETURN_CHECKS\", post_data, poff, post_data_len);\n\n  if (PP_Error == pp->state)\n  {\n    /* State in error, returning failure */\n    log_probe_state(pp, \"EXIT_MHD_NO_due_to_PP_Error\", post_data, poff, post_data_len);\n    return MHD_NO;\n  }\n\n  /* save remaining data for next iteration */\n  if (NULL != start_key)\n  {\n    size_t key_len;\n    mhd_assert ((PP_ProcessKey == pp->state) || (NULL != end_key));\n    if (NULL == end_key)\n      end_key = &post_data[poff];\n    mhd_assert (end_key >= start_key);\n    key_len = (size_t) (end_key - start_key);\n    mhd_assert (0 != key_len); /* it must be always non-zero here */\n    if (pp->buffer_pos + key_len >= pp->buffer_size)\n    {\n      pp->state = PP_Error;\n      log_probe_state(pp, \"save remaining: key too big -> PP_Error\", post_data, poff, post_data_len);\n      return MHD_NO;\n    }\n    memcpy (&kbuf[pp->buffer_pos],\n            start_key,\n            key_len);\n    pp->buffer_pos += key_len;\n    pp->must_unescape_key = true;\n    start_key = NULL;\n    end_key = NULL;\n    log_probe_state(pp, \"save remaining: copied start_key to buffer\", post_data, poff, post_data_len);\n  }\n  if ( (NULL != start_value) &&\n       (PP_ProcessValue == pp->state) )\n  {\n    /* compute key, if we have not already */\n    if (pp->must_unescape_key)\n    {\n      kbuf[pp->buffer_pos] = '\\0'; /* 0-terminate key */\n      MHD_unescape_plus (kbuf);\n      MHD_http_unescape (kbuf);\n      pp->must_unescape_key = false;\n    }\n    if (NULL == end_value)\n      end_value = &post_data[poff];\n    if ( (NULL != last_escape) &&\n         (2 < (end_value - last_escape)) )\n      last_escape = NULL;\n    process_value (pp,\n                   start_value,\n                   end_value,\n                   last_escape);\n    pp->must_ikvi = false;\n    log_probe_state(pp, \"save remaining: processed start_value\", post_data, poff, post_data_len);\n  }\n  if (PP_Error == pp->state)\n  {\n    /* State in error, returning failure */\n    log_probe_state(pp, \"EXIT_MHD_NO_due_to_PP_Error_after_save\", post_data, poff, post_data_len);\n    return MHD_NO;\n  }\n  log_probe_state(pp, \"EXIT_MHD_YES\", post_data, poff, post_data_len);\n  return MHD_YES;\n}\n"
}