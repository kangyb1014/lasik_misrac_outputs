{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert expands to a non\u2011returning failure handler (for example it calls abort() or is annotated [[noreturn]]), then when the if condition is true the call mhd_assert(0) will not return and the subsequent 'return false;' is unreachable. In that configuration the code contains unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_grow_read_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/641.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_grow_read_buffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_grow_read_buffer:\n```c\nstatic bool\ntry_grow_read_buffer (struct MHD_Connection *connection,\n                      bool required)\n{\n  size_t new_size;\n  size_t avail_size;\n  const size_t def_grow_size = connection->daemon->pool_increment;\n  void *rb;\n\n  avail_size = MHD_pool_get_free (connection->pool);\n  if (0 == avail_size)\n    return false;               /* No more space available */\n  if (0 == connection->read_buffer_size)\n    new_size = avail_size / 2;  /* Use half of available buffer for reading */\n  else\n  {\n    size_t grow_size;\n\n    grow_size = avail_size / 8;\n    if (def_grow_size > grow_size)\n    {                  /* Shortage of space */\n      const size_t left_free =\n        connection->read_buffer_size - connection->read_buffer_offset;\n      mhd_assert (connection->read_buffer_size >= \\\n                  connection->read_buffer_offset);\n      if ((def_grow_size <= grow_size + left_free)\n          && (left_free < def_grow_size))\n        grow_size = def_grow_size - left_free;  /* Use precise 'def_grow_size' for new free space */\n      else if (! required)\n        return false;                           /* Grow is not mandatory, leave some space in pool */\n      else\n      {\n        /* Shortage of space, but grow is mandatory */\n        const size_t small_inc =\n          ((MHD_BUF_INC_SIZE > def_grow_size) ?\n           def_grow_size : MHD_BUF_INC_SIZE) / 8;\n        if (small_inc < avail_size)\n          grow_size = small_inc;\n        else\n          grow_size = avail_size;\n      }\n    }\n    new_size = connection->read_buffer_size + grow_size;\n  }\n  /* Make sure that read buffer will not be moved */\n  if ((NULL != connection->read_buffer) &&\n      ! MHD_pool_is_resizable_inplace (connection->pool,\n                                       connection->read_buffer,\n                                       connection->read_buffer_size))\n  {\n    mhd_assert (0);\n    return false;\n  }\n  /* we can actually grow the buffer, do it! */\n  rb = MHD_pool_reallocate (connection->pool,\n                            connection->read_buffer,\n                            connection->read_buffer_size,\n                            new_size);\n  if (NULL == rb)\n  {\n    /* This should NOT be possible: we just computed 'new_size' so that\n       it should fit. If it happens, somehow our read buffer is not in\n       the right position in the pool, say because someone called\n       MHD_pool_allocate() without 'from_end' set to 'true'? Anyway,\n       should be investigated! (Ideally provide all data from\n       *pool and connection->read_buffer and new_size for debugging). */\n    mhd_assert (0);\n    return false;\n  }\n  mhd_assert (connection->read_buffer == rb);\n  connection->read_buffer = rb;\n  mhd_assert (NULL != connection->read_buffer);\n  connection->read_buffer_size = new_size;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified try_grow_read_buffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <time.h>\n#include <sys/stat.h>\n\n/* Probe helper: log state to /tmp/logs/641.txt so that a non-returning\n   mhd_assert can be correlated with the prior state. This function is\n   intentionally simple and side-effecting (file append). */\nstatic void\nmhd_probe_ensure_logdir(void)\n{\n  /* Try to create the directory; ignore errors if it already exists. */\n  (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void\nmhd_probe_log(const char *event,\n              struct MHD_Connection *connection,\n              size_t avail_size,\n              size_t new_size,\n              size_t grow_size,\n              size_t small_inc,\n              bool required)\n{\n  FILE *f;\n  time_t t = time(NULL);\n\n  mhd_probe_ensure_logdir();\n  f = fopen(\"/tmp/logs/641.txt\", \"a\");\n  if (NULL == f)\n    return; /* best effort only */\n\n  fprintf(f, \"[%ld] EVENT: %s\\n\", (long)t, event);\n  if (connection != NULL)\n  {\n    /* The following accesses mirror those used in the original function\n       so they are meaningful in the same project context. */\n    fprintf(f, \"  connection=%p daemon=%p pool=%p\\n\",\n            (void *)connection,\n            (void *)(connection->daemon),\n            (void *)(connection->pool));\n    fprintf(f, \"  read_buffer=%p read_buffer_size=%zu read_buffer_offset=%zu\\n\",\n            (void *)(connection->read_buffer),\n            (size_t)connection->read_buffer_size,\n            (size_t)connection->read_buffer_offset);\n    fprintf(f, \"  def_grow_size=%zu required=%d\\n\",\n            (size_t)connection->daemon->pool_increment,\n            required ? 1 : 0);\n  }\n  fprintf(f, \"  avail_size=%zu new_size=%zu grow_size=%zu small_inc=%zu\\n\",\n          avail_size, new_size, grow_size, small_inc);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Modified try_grow_read_buffer: probes are inserted immediately before\n   each mhd_assert and at key return points so that if mhd_assert is\n   non-returning the logs provide the last seen state. The original\n   control flow and return behaviour are preserved. */\nstatic bool\ntry_grow_read_buffer (struct MHD_Connection *connection,\n                      bool required)\n{\n  size_t new_size;\n  size_t avail_size;\n  const size_t def_grow_size = connection->daemon->pool_increment;\n  void *rb;\n\n  avail_size = MHD_pool_get_free (connection->pool);\n  if (0 == avail_size)\n    return false;               /* No more space available */\n  if (0 == connection->read_buffer_size)\n    new_size = avail_size / 2;  /* Use half of available buffer for reading */\n  else\n  {\n    size_t grow_size;\n\n    grow_size = avail_size / 8;\n    if (def_grow_size > grow_size)\n    {                  /* Shortage of space */\n      const size_t left_free =\n        connection->read_buffer_size - connection->read_buffer_offset;\n      /* Log before the assertion that could be non-returning */\n      mhd_probe_log(\"about to assert read_buffer_size >= read_buffer_offset\",\n                    connection, avail_size, 0u, grow_size, 0u, required);\n      mhd_assert (connection->read_buffer_size >= \\\n                  connection->read_buffer_offset);\n      if ((def_grow_size <= grow_size + left_free)\n          && (left_free < def_grow_size))\n        grow_size = def_grow_size - left_free;  /* Use precise 'def_grow_size' for new free space */\n      else if (! required)\n        return false;                           /* Grow is not mandatory, leave some space in pool */\n      else\n      {\n        /* Shortage of space, but grow is mandatory */\n        const size_t small_inc =\n          ((MHD_BUF_INC_SIZE > def_grow_size) ?\n           def_grow_size : MHD_BUF_INC_SIZE) / 8;\n        /* Log state before deciding small_inc-related branch */\n        mhd_probe_log(\"shortage but required: deciding small_inc\",\n                      connection, avail_size, 0u, grow_size, small_inc, required);\n        if (small_inc < avail_size)\n          grow_size = small_inc;\n        else\n          grow_size = avail_size;\n      }\n    }\n    new_size = connection->read_buffer_size + grow_size;\n  }\n  /* Make sure that read buffer will not be moved */\n  if ((NULL != connection->read_buffer) &&\n      ! MHD_pool_is_resizable_inplace (connection->pool,\n                                       connection->read_buffer,\n                                       connection->read_buffer_size))\n  {\n    /* Log immediately before the assert(0) that some builds may treat as noreturn */\n    mhd_probe_log(\"about to assert(0): read buffer not resizable inplace\",\n                  connection, avail_size, new_size, 0u, 0u, required);\n    mhd_assert (0);\n    /* Log the (theoretically unreachable if mhd_assert is noreturn) return point */\n    mhd_probe_log(\"after assert(0) fall-through: returning false\",\n                  connection, avail_size, new_size, 0u, 0u, required);\n    return false;\n  }\n  /* we can actually grow the buffer, do it! */\n  rb = MHD_pool_reallocate (connection->pool,\n                            connection->read_buffer,\n                            connection->read_buffer_size,\n                            new_size);\n  if (NULL == rb)\n  {\n    /* Log detailed state before the assert(0) that may be non-returning */\n    mhd_probe_log(\"about to assert(0): reallocate returned NULL\",\n                  connection, avail_size, new_size, 0u, 0u, required);\n    mhd_assert (0);\n    /* Log the (theoretically unreachable if mhd_assert is noreturn) return point */\n    mhd_probe_log(\"after assert(0) fall-through: returning false\",\n                  connection, avail_size, new_size, 0u, 0u, required);\n    return false;\n  }\n  /* Log before the final assertion that the pointer is unchanged */\n  mhd_probe_log(\"about to assert read_buffer == rb\",\n                connection, avail_size, new_size, 0u, 0u, required);\n  mhd_assert (connection->read_buffer == rb);\n  connection->read_buffer = rb;\n  mhd_assert (NULL != connection->read_buffer);\n  connection->read_buffer_size = new_size;\n  /* Log successful growth */\n  mhd_probe_log(\"buffer grown: success\",\n                connection, avail_size, new_size, 0u, 0u, required);\n  return true;\n}\n"
}