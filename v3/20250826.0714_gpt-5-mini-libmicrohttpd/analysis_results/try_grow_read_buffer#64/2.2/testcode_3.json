{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment connection->read_buffer = rb; is redundant because, earlier, the code ensures the buffer will not be moved (MHD_pool_is_resizable_inplace returned true) and then reallocated into rb. An assertion immediately before the assignment (mhd_assert(connection->read_buffer == rb)) documents that rb equals the existing pointer. Therefore the write assigns the same value already held and removing it would not change program behaviour \u2014 i.e. it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_grow_read_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/642.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_grow_read_buffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_grow_read_buffer:\n```c\nstatic bool\ntry_grow_read_buffer (struct MHD_Connection *connection,\n                      bool required)\n{\n  size_t new_size;\n  size_t avail_size;\n  const size_t def_grow_size = connection->daemon->pool_increment;\n  void *rb;\n\n  avail_size = MHD_pool_get_free (connection->pool);\n  if (0 == avail_size)\n    return false;               /* No more space available */\n  if (0 == connection->read_buffer_size)\n    new_size = avail_size / 2;  /* Use half of available buffer for reading */\n  else\n  {\n    size_t grow_size;\n\n    grow_size = avail_size / 8;\n    if (def_grow_size > grow_size)\n    {                  /* Shortage of space */\n      const size_t left_free =\n        connection->read_buffer_size - connection->read_buffer_offset;\n      mhd_assert (connection->read_buffer_size >= \\\n                  connection->read_buffer_offset);\n      if ((def_grow_size <= grow_size + left_free)\n          && (left_free < def_grow_size))\n        grow_size = def_grow_size - left_free;  /* Use precise 'def_grow_size' for new free space */\n      else if (! required)\n        return false;                           /* Grow is not mandatory, leave some space in pool */\n      else\n      {\n        /* Shortage of space, but grow is mandatory */\n        const size_t small_inc =\n          ((MHD_BUF_INC_SIZE > def_grow_size) ?\n           def_grow_size : MHD_BUF_INC_SIZE) / 8;\n        if (small_inc < avail_size)\n          grow_size = small_inc;\n        else\n          grow_size = avail_size;\n      }\n    }\n    new_size = connection->read_buffer_size + grow_size;\n  }\n  /* Make sure that read buffer will not be moved */\n  if ((NULL != connection->read_buffer) &&\n      ! MHD_pool_is_resizable_inplace (connection->pool,\n                                       connection->read_buffer,\n                                       connection->read_buffer_size))\n  {\n    mhd_assert (0);\n    return false;\n  }\n  /* we can actually grow the buffer, do it! */\n  rb = MHD_pool_reallocate (connection->pool,\n                            connection->read_buffer,\n                            connection->read_buffer_size,\n                            new_size);\n  if (NULL == rb)\n  {\n    /* This should NOT be possible: we just computed 'new_size' so that\n       it should fit. If it happens, somehow our read buffer is not in\n       the right position in the pool, say because someone called\n       MHD_pool_allocate() without 'from_end' set to 'true'? Anyway,\n       should be investigated! (Ideally provide all data from\n       *pool and connection->read_buffer and new_size for debugging). */\n    mhd_assert (0);\n    return false;\n  }\n  mhd_assert (connection->read_buffer == rb);\n  connection->read_buffer = rb;\n  mhd_assert (NULL != connection->read_buffer);\n  connection->read_buffer_size = new_size;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified try_grow_read_buffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe logging helper: append human-readable state to /tmp/logs/642.txt */\nstatic void\nmhd_log_probe (const char *stage,\n               struct MHD_Connection *connection,\n               size_t new_size,\n               void *rb,\n               bool required,\n               size_t avail_size,\n               size_t grow_size)\n{\n  FILE *f = fopen(\"/tmp/logs/642.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf (f,\n           \"stage=%s required=%d avail=%zu def_grow=%zu read_buf=%p read_buf_size=%zu read_buf_off=%zu new_size=%zu grow_size=%zu pool=%p rb=%p\\n\",\n           stage,\n           required ? 1 : 0,\n           avail_size,\n           (connection && connection->daemon) ? connection->daemon->pool_increment : 0U,\n           (connection) ? connection->read_buffer : NULL,\n           (connection) ? connection->read_buffer_size : 0U,\n           (connection) ? connection->read_buffer_offset : 0U,\n           new_size,\n           grow_size,\n           (connection) ? connection->pool : NULL,\n           rb);\n  fclose (f);\n}\n\nstatic bool\ntry_grow_read_buffer (struct MHD_Connection *connection,\n                      bool required)\n{\n  size_t new_size;\n  size_t avail_size;\n  const size_t def_grow_size = connection->daemon->pool_increment;\n  void *rb;\n\n  avail_size = MHD_pool_get_free (connection->pool);\n  mhd_log_probe (\"after_get_free\", connection, 0U, NULL, required, avail_size, 0U);\n  if (0 == avail_size)\n  {\n    mhd_log_probe (\"no_space_available\", connection, 0U, NULL, required, avail_size, 0U);\n    return false;               /* No more space available */\n  }\n  if (0 == connection->read_buffer_size)\n  {\n    new_size = avail_size / 2;  /* Use half of available buffer for reading */\n    mhd_log_probe (\"new_size_half\", connection, new_size, NULL, required, avail_size, 0U);\n  }\n  else\n  {\n    size_t grow_size;\n\n    grow_size = avail_size / 8;\n    if (def_grow_size > grow_size)\n    {                  /* Shortage of space */\n      const size_t left_free =\n        connection->read_buffer_size - connection->read_buffer_offset;\n      mhd_assert (connection->read_buffer_size >= \\\n                  connection->read_buffer_offset);\n      if ((def_grow_size <= grow_size + left_free)\n          && (left_free < def_grow_size))\n        grow_size = def_grow_size - left_free;  /* Use precise 'def_grow_size' for new free space */\n      else if (! required)\n      {\n        mhd_log_probe (\"grow_not_required_leave_space\", connection, 0U, NULL, required, avail_size, grow_size);\n        return false;                           /* Grow is not mandatory, leave some space in pool */\n      }\n      else\n      {\n        /* Shortage of space, but grow is mandatory */\n        const size_t small_inc =\n          ((MHD_BUF_INC_SIZE > def_grow_size) ?\n           def_grow_size : MHD_BUF_INC_SIZE) / 8;\n        if (small_inc < avail_size)\n          grow_size = small_inc;\n        else\n          grow_size = avail_size;\n      }\n    }\n    new_size = connection->read_buffer_size + grow_size;\n    mhd_log_probe (\"computed_new_size\", connection, new_size, NULL, required, avail_size, grow_size);\n  }\n  /* Make sure that read buffer will not be moved */\n  mhd_log_probe (\"before_resizable_check\", connection, new_size, NULL, required, avail_size, 0U);\n  if ((NULL != connection->read_buffer) &&\n      ! MHD_pool_is_resizable_inplace (connection->pool,\n                                       connection->read_buffer,\n                                       connection->read_buffer_size))\n  {\n    mhd_log_probe (\"not_resizable_inplace\", connection, new_size, connection->read_buffer, required, avail_size, 0U);\n    mhd_assert (0);\n    return false;\n  }\n  /* we can actually grow the buffer, do it! */\n  rb = MHD_pool_reallocate (connection->pool,\n                            connection->read_buffer,\n                            connection->read_buffer_size,\n                            new_size);\n  mhd_log_probe (\"after_realloc\", connection, new_size, rb, required, avail_size, 0U);\n  if (NULL == rb)\n  {\n    /* This should NOT be possible: we just computed 'new_size' so that\n       it should fit. If it happens, somehow our read buffer is not in\n       the right position in the pool, say because someone called\n       MHD_pool_allocate() without 'from_end' set to 'true'? Anyway,\n       should be investigated! (Ideally provide all data from\n       *pool and connection->read_buffer and new_size for debugging). */\n    mhd_log_probe (\"realloc_failed\", connection, new_size, rb, required, avail_size, 0U);\n    mhd_assert (0);\n    return false;\n  }\n  mhd_assert (connection->read_buffer == rb);\n  mhd_log_probe (\"before_assignment\", connection, new_size, rb, required, avail_size, 0U);\n  connection->read_buffer = rb;\n  mhd_log_probe (\"after_assignment\", connection, new_size, rb, required, avail_size, 0U);\n  mhd_assert (NULL != connection->read_buffer);\n  connection->read_buffer_size = new_size;\n  mhd_log_probe (\"success_return\", connection, new_size, rb, required, avail_size, 0U);\n  return true;\n}\n"
}