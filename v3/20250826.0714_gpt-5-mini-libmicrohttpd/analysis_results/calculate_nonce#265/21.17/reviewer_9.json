{
  "user_message": "An agent A claimed that the following calculate_nonce code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of calculate_nonce.\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls MHD_bin_to_hex(timestamp, sizeof(timestamp), nonce + digest_get_size(da) * 2) without any information or check of the size of the buffer pointed to by nonce. MHD_bin_to_hex will write the hex representation of timestamp (typically 2 * sizeof(timestamp) bytes, plus possibly a terminator depending on implementation) starting at nonce + digest_get_size(da) * 2. If the caller only allocated space for the hex of the digest (digest_get_size(da) * 2 bytes) then the timestamp hex will be written past the end of that allocation. Example: TIMESTAMP_BIN_SIZE == 6 => timestamp hex is 12 bytes. For a 32-byte digest (digest_get_size == 32) the code writes the hash hex at nonce[0..63] and then writes 12 bytes at nonce[64..75]; if the buffer was only 64 bytes this overruns by 12 bytes. Because the code does not ensure the destination object is large enough, this can result in accesses beyond the bounds of the object referenced by the pointer parameter and thus violates MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\ncalculate_nonce entry: nonce=0x7fcef4008f03 nonce_time=574 digest_get_size=16 rnd_size=8 saddr_size=16 bind_options=0x0 mthd_e=1 uri_len=8 realm_len=16\nMHD_bin_to_hex(timestamp): nonce_base=0x7fcef4008f03 write_dest=0x7fcef4008f23 digest_sz=16 digest_hex_len=32 ts_bin_size=6 ts_hex_len=12 ts_offset=32 ts_end=44 (dest + offset .. end-1)\ncontrol flags: rnd_size=8 saddr_size=16 bind_options=0x0 (MHD_DAUTH_BIND_NONCE_NONE=0, MHD_DAUTH_BIND_NONCE_CLIENT_IP=0x8, MHD_DAUTH_BIND_NONCE_URI=0x2, MHD_DAUTH_BIND_NONCE_URI_PARAMS=0x4, MHD_DAUTH_BIND_NONCE_REALM=0x1)\nMHD_bin_to_hex(hash): nonce=0x7fcef4008f03 hash_dest=0x7fcef4008f03 digest_sz=16 digest_hex_len=32\nsummary: digest_hex_len=32 timestamp_hex_len=12 timestamp_written_at_offset=32 -> reserved_end=44 total_required_if_hash_appended=76\ncalculate_nonce entry: nonce=0x7fe864008f07 nonce_time=610 digest_get_size=32 rnd_size=8 saddr_size=16 bind_options=0x0 mthd_e=1 uri_len=8 realm_len=16\nMHD_bin_to_hex(timestamp): nonce_base=0x7fe864008f07 write_dest=0x7fe864008f47 digest_sz=32 digest_hex_len=64 ts_bin_size=6 ts_hex_len=12 ts_offset=64 ts_end=76 (dest + offset .. end-1)\ncontrol flags: rnd_size=8 saddr_size=16 bind_options=0x0 (MHD_DAUTH_BIND_NONCE_NONE=0, MHD_DAUTH_BIND_NONCE_CLIENT_IP=0x8, MHD_DAUTH_BIND_NONCE_URI=0x2, MHD_DAUTH_BIND_NONCE_URI_PARAMS=0x4, MHD_DAUTH_BIND_NONCE_REALM=0x1)\nMHD_bin_to_hex(hash): nonce=0x7fe864008f07 hash_dest=0x7fe864008f07 digest_sz=32 digest_hex_len=64\nsummary: digest_hex_len=64 timestamp_hex_len=12 timestamp_written_at_offset=64 -> reserved_end=76 total_required_if_hash_appended=140\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent A is correct that this code can write past the end of the destination nonce buffer: MHD_bin_to_hex(timestamp, ..., nonce + digest_get_size(da) * 2) will place the timestamp hex at an offset equal to the digest hex length, and there is no local check that the buffer pointed to by nonce is large enough to hold that extra data. The provided execution log illustrates the overflow scenarios (e.g. digest hex length 32 + timestamp hex length 12 requires 44 bytes, which would overflow a 32-byte buffer reserved only for the digest hex). However, MISRA C 2023 Rule 21.17 as quoted applies specifically to the standard string-handling functions in <string.h>. MHD_bin_to_hex is a project/library function, not one of the <string.h> functions named in the rule; therefore the mere presence of this call does not by itself constitute a violation of MISRA 21.17. If MHD_bin_to_hex internally calls a <string.h> function (memcpy/strcpy/\u2026 ) and that internal call can be proven to write out of bounds because the destination buffer is too small, then the library implementation (or the call site) could cause a 21.17 violation \u2014 but that requires evidence about MHD_bin_to_hex\u2019s implementation or a bounds contract being violated. In short: the report\u2019s claim that this specific code violates MISRA C 2023 Rule 21.17 is not correct. That said, the code does have a real potential buffer-overflow defect and should ensure/Document that nonce points to a buffer large enough (or pass a size and have MHD_bin_to_hex check it) to avoid out-of-bounds writes (a separate safety issue to fix)."
}