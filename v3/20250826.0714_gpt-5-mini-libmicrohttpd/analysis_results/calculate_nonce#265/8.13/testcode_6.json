{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call may discard const-qualification: calculate_nonce declares saddr as const struct sockaddr_storage * but the call passes it to digest_update. If digest_update is prototyped as digest_update(struct DigestAlgorithm *da, void *data, size_t size) (i.e. the second parameter is a non-const pointer), then this call discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. If, however, digest_update is declared to take a const void * (e.g. digest_update(struct DigestAlgorithm *da, const void *data, size_t size)), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2653.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_nonce:\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\nPlease provide the modified calculate_nonce code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <arpa/inet.h>\n\n/* Probe helpers: write human-readable execution traces to /tmp/logs/2653.txt\n * These functions do not modify the program state and take const pointers\n * where appropriate so as not to cast away const qualifications. */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2653.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nprobe_log_saddr (const char *site,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 unsigned int bind_options)\n{\n  FILE *f = fopen(\"/tmp/logs/2653.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf (f, \"[%s] saddr ptr=%p size=%zu bind_opts=0x%x\\n\",\n           site, (const void *) saddr, saddr_size, bind_options);\n  if (NULL == saddr)\n  {\n    fprintf (f, \"[%s] saddr is NULL\\n\", site);\n    fclose (f);\n    return;\n  }\n  fprintf (f, \"[%s] ss_family=%d\\n\", site, (int) saddr->ss_family);\n  if (AF_INET == saddr->ss_family)\n  {\n    const struct sockaddr_in *sin = (const struct sockaddr_in *) saddr;\n    const unsigned char *addr = (const unsigned char *) &sin->sin_addr;\n    fprintf (f, \"[%s] IPv4 sin_addr=\", site);\n    for (size_t i = 0; i < sizeof (sin->sin_addr); ++i)\n      fprintf (f, \"%02x\", addr[i]);\n    fprintf (f, \"\\n\");\n    fprintf (f, \"[%s] sin_port=%u\\n\", site, (unsigned) ntohs (sin->sin_port));\n  }\n#ifdef HAVE_INET6\n  else if (AF_INET6 == saddr->ss_family)\n  {\n    const struct sockaddr_in6 *sin6 = (const struct sockaddr_in6 *) saddr;\n    const unsigned char *addr = (const unsigned char *) &sin6->sin6_addr;\n    fprintf (f, \"[%s] IPv6 sin6_addr=\", site);\n    for (size_t i = 0; i < sizeof (sin6->sin6_addr); ++i)\n      fprintf (f, \"%02x\", addr[i]);\n    fprintf (f, \"\\n\");\n    fprintf (f, \"[%s] sin6_port=%u\\n\", site, (unsigned) ntohs (sin6->sin6_port));\n  }\n#endif /* HAVE_INET6 */\n  fclose (f);\n}\n\nstatic void\nprobe_log_buffer_hex (const char *site, const void *buf, size_t size)\n{\n  const unsigned char *b = (const unsigned char *) buf;\n  FILE *f = fopen(\"/tmp/logs/2653.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf (f, \"[%s] buffer ptr=%p size=%zu hex=\", site, buf, size);\n  for (size_t i = 0; i < size; ++i)\n    fprintf (f, \"%02x\", b[i]);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n\n  /* Log entry and important parameters to help reproduce the const-discard\n   * scenario: record pointers and sizes for saddr uses, and bind options that\n   * control whether saddr is passed to digest_update. */\n  probe_log (\"calculate_nonce entry: nonce_time=%\" PRIu64 \" saddr=%p saddr_size=%zu bind_opts=0x%x rnd_size=%zu uri_len=%zu realm_len=%zu mthd=%d method_ptr=%p\",\n             nonce_time,\n             (const void *) saddr,\n             saddr_size,\n             bind_options,\n             rnd_size,\n             uri_len,\n             realm_len,\n             (int) mthd_e,\n             (const void *) method);\n\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    /* Log timestamp bytes sent to digest_update */\n    probe_log_buffer_hex (\"timestamp\", timestamp, sizeof (timestamp));\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    /* Log rnd pointer and size */\n    probe_log (\"rnd: ptr=%p size=%zu\", (const void *) rnd, rnd_size);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    /* Log the fact that we are about to pass the const sockaddr_storage\n     * pointer directly to digest_update. This is the site of a potential\n     * const-discard if digest_update is not declared to take a const void *. */\n    probe_log_saddr (\"full_address\", saddr, saddr_size, bind_options);\n    probe_log (\"About to call digest_update with saddr (const) ptr=%p size=%zu\",\n               (const void *) saddr, saddr_size);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    probe_log (\"client_ip branch entered: saddr=%p saddr_size=%zu bind_opts=0x%x\",\n               (const void *) saddr, saddr_size, bind_options);\n    if (AF_INET == saddr->ss_family)\n    {\n      const struct sockaddr_in *sin = (const struct sockaddr_in *) saddr;\n      probe_log_buffer_hex (\"client_ip_ipv4_sin_addr\",\n                            &sin->sin_addr,\n                            sizeof (sin->sin_addr));\n      probe_log (\"About to call digest_update with &sin->sin_addr ptr=%p size=%zu\",\n                 (const void *) &sin->sin_addr, sizeof (sin->sin_addr));\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n    }\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n    {\n      const struct sockaddr_in6 *sin6 = (const struct sockaddr_in6 *) saddr;\n      probe_log_buffer_hex (\"client_ip_ipv6_sin6_addr\",\n                            &sin6->sin6_addr,\n                            sizeof (sin6->sin6_addr));\n      probe_log (\"About to call digest_update with &sin6->sin6_addr ptr=%p size=%zu\",\n                 (const void *) &sin6->sin6_addr, sizeof (sin6->sin6_addr));\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n    }\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n    /* Log final hash and nonce text representation */\n    probe_log_buffer_hex (\"final_hash\", hash, (size_t) digest_get_size (da));\n    probe_log (\"final_nonce_str: %s\", nonce ? nonce : \"(null)\");\n  }\n}\n"
}