{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes h->header to digest_update while h is a pointer to const struct MHD_HTTP_Req_Header. If the struct member is declared as a non\u2011const pointer (e.g. 'char *header'), that member should instead be declared 'const char *header' because the data is only read. In that case the use of a non\u2011const pointer where a const\u2011qualified pointer would suffice violates MISRA C 2023 Rule 8.13. Fix: change the struct members (header, value, etc.) to point to const-qualified types.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2653.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_nonce:\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\nPlease provide the modified calculate_nonce code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <inttypes.h>\n\n/* Probe logging helpers: write simple logs to /tmp/logs/2653.txt. */\nstatic void\nnonce_probe_write (const char *msg)\n{\n  FILE *f = fopen (\"/tmp/logs/2653.txt\", \"a\");\n  if (f != NULL)\n  {\n    (void) fputs (msg, f);\n    (void) fputc('\\n', f);\n    (void) fclose (f);\n  }\n}\n\nstatic void\nnonce_probe_log_entry (uint64_t nonce_time,\n                       enum MHD_HTTP_Method mthd_e,\n                       const char *method,\n                       const char *rnd,\n                       size_t rnd_size,\n                       const struct sockaddr_storage *saddr,\n                       size_t saddr_size,\n                       const char *uri,\n                       size_t uri_len,\n                       const struct MHD_HTTP_Req_Header *first_header,\n                       const char *realm,\n                       size_t realm_len,\n                       unsigned int bind_options)\n{\n  char buf[512];\n  /* Log high-level entry state */\n  (void) snprintf (buf, sizeof (buf),\n                   \"calculate_nonce ENTRY: nonce_time=%\" PRIu64\n                   \" mthd_e=%d method=%p rnd=%p rnd_size=%zu saddr=%p saddr_size=%zu uri=%p uri_len=%zu first_header=%p realm=%p realm_len=%zu bind_options=0x%08x\",\n                   nonce_time,\n                   (int) mthd_e,\n                   (const void *) method,\n                   (const void *) rnd,\n                   rnd_size,\n                   (const void *) saddr,\n                   saddr_size,\n                   (const void *) uri,\n                   uri_len,\n                   (const void *) first_header,\n                   (const void *) realm,\n                   realm_len,\n                   bind_options);\n  nonce_probe_write (buf);\n\n  /* If we have an URI, log its beginning bytes (safe, do not assume termination) */\n  if (uri != NULL && uri_len > 0)\n  {\n    size_t i, n = (uri_len < 64U) ? uri_len : 64U;\n    char tmp[256];\n    size_t pos = 0;\n    pos += (size_t) snprintf (tmp + pos, sizeof (tmp) - pos, \"uri[0..%zu]=\\\"\", n);\n    for (i = 0; i < n && pos < sizeof (tmp) - 4; i++)\n    {\n      char c = uri[i];\n      if (c >= 32 && c < 127)\n        pos += (size_t) snprintf (tmp + pos, sizeof (tmp) - pos, \"%c\", c);\n      else\n        pos += (size_t) snprintf (tmp + pos, sizeof (tmp) - pos, \"\\\\x%02x\", (unsigned char) c);\n    }\n    (void) snprintf (tmp + pos, sizeof (tmp) - pos, \"\\\"\");\n    nonce_probe_write (tmp);\n  }\n}\n\nstatic void\nnonce_probe_log_header (const struct MHD_HTTP_Req_Header *h)\n{\n  if (h == NULL)\n    return;\n  char buf[512];\n\n  /* Log pointer, kind and sizes (these fields are used in calculate_nonce) */\n  (void) snprintf (buf, sizeof (buf), \"HEADER: h=%p kind=%d header_size=%zu value_size=%zu header=%p value=%p\",\n                   (const void *) h,\n                   (int) h->kind,\n                   h->header_size,\n                   h->value_size,\n                   (const void *) h->header,\n                   (const void *) h->value);\n  nonce_probe_write (buf);\n\n  /* Log a short preview of header and value content, up to 80 bytes each. */\n  if (h->header != NULL && h->header_size > 0)\n  {\n    size_t n = (h->header_size < 80U) ? h->header_size : 80U;\n    size_t i;\n    char tmp[256];\n    size_t pos = 0;\n    pos += (size_t) snprintf (tmp + pos, sizeof (tmp) - pos, \" header_preview=\\\"\");\n    for (i = 0; i < n && pos < sizeof (tmp) - 4; i++)\n    {\n      unsigned char c = (unsigned char) h->header[i];\n      if (c >= 32U && c < 127U)\n        pos += (size_t) snprintf (tmp + pos, sizeof (tmp) - pos, \"%c\", c);\n      else\n        pos += (size_t) snprintf (tmp + pos, sizeof (tmp) - pos, \"\\\\x%02x\", c);\n    }\n    (void) snprintf (tmp + pos, sizeof (tmp) - pos, \"\\\"\");\n    nonce_probe_write (tmp);\n  }\n  if (h->value != NULL && h->value_size > 0)\n  {\n    size_t n = (h->value_size < 80U) ? h->value_size : 80U;\n    size_t i;\n    char tmp[256];\n    size_t pos = 0;\n    pos += (size_t) snprintf (tmp + pos, sizeof (tmp) - pos, \" value_preview=\\\"\");\n    for (i = 0; i < n && pos < sizeof (tmp) - 4; i++)\n    {\n      unsigned char c = (unsigned char) h->value[i];\n      if (c >= 32U && c < 127U)\n        pos += (size_t) snprintf (tmp + pos, sizeof (tmp) - pos, \"%c\", c);\n      else\n        pos += (size_t) snprintf (tmp + pos, sizeof (tmp) - pos, \"\\\\x%02x\", c);\n    }\n    (void) snprintf (tmp + pos, sizeof (tmp) - pos, \"\\\"\");\n    nonce_probe_write (tmp);\n  }\n}\n\n/* Original function with inserted probes. */\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n\n  /* Log entry state to help reproduce header-related constness issues. */\n  nonce_probe_log_entry (nonce_time,\n                         mthd_e,\n                         method,\n                         rnd,\n                         rnd_size,\n                         saddr,\n                         saddr_size,\n                         uri,\n                         uri_len,\n                         first_header,\n                         realm,\n                         realm_len,\n                         bind_options);\n\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n\n      /* Probe: log header state right before it is used in digest_update */\n      nonce_probe_log_header (h);\n\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n"
}