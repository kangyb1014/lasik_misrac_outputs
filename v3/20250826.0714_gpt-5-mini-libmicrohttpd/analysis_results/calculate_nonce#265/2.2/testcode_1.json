{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code contains a constant conditional if (1) that is always true. The condition expression (and the conditional operation) is executed but is redundant \u2014 removing the if (1) (or replacing it with an ordinary block) would not affect program behaviour. Therefore the conditional operation is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2652.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_nonce:\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\nPlease provide the modified calculate_nonce code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <string.h>\n\n/* Probe logging utility: append textual logs to /tmp/logs/2652.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  const char dir[] = \"/tmp/logs\";\n  const char path[] = \"/tmp/logs/2652.txt\";\n  /* Try to create directory (ignore errors if it already exists) */\n  (void) mkdir (dir, 0777);\n\n  FILE *f = fopen (path, \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc ('\\n', f);\n  fflush (f);\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log_hex (const char *label, const uint8_t *data, size_t len)\n{\n  /* Print up to a reasonable amount to avoid huge logs */\n  size_t cap = (len > 64u) ? 64u : len;\n  char buf[64 * 2 + 1];\n  size_t i;\n  for (i = 0; i < cap; ++i)\n    {\n      unsigned int v = data[i];\n      buf[i * 2 + 0] = \"0123456789abcdef\"[ (v >> 4) & 0xF ];\n      buf[i * 2 + 1] = \"0123456789abcdef\"[ v & 0xF ];\n    }\n  buf[cap * 2] = '\\0';\n  mhd_probe_log (\"%s (len=%zu, shown=%zu bytes): %s\", label, len, cap, buf);\n}\n\n/* Modified calculate_nonce with probes inserted. Original logic preserved. */\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n\n  mhd_probe_log (\"calculate_nonce ENTER: nonce_time=%\" PRIu64 \", mthd_e=%d, method=%p, rnd_size=%zu, saddr=%p, saddr_size=%zu, uri=%p, uri_len=%zu, realm=%p, realm_len=%zu, bind_options=0x%x, da=%p, nonce=%p\",\n                 nonce_time,\n                 (int) mthd_e,\n                 (const void *) method,\n                 rnd_size,\n                 (const void *) saddr,\n                 saddr_size,\n                 (const void *) uri,\n                 uri_len,\n                 (const void *) realm,\n                 realm_len,\n                 bind_options,\n                 (const void *) da,\n                 (const void *) nonce);\n\n  if (1)\n  {\n    mhd_probe_log (\"constant if(1) branch (timestamp) entered\");\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n\n    mhd_probe_log_hex (\"timestamp bytes\", timestamp, sizeof (timestamp));\n\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n\n    /* Log where the timestamp hex was written in nonce buffer (partial) */\n    {\n      size_t ds = digest_get_size (da);\n      size_t shown = (ds > 32u) ? 32u : ds; /* show up to 32 digest bytes */\n      size_t hex_bytes = shown * 2;\n      char temp[32 * 2 + 1];\n      memcpy (temp, nonce + ds * 2, hex_bytes);\n      temp[hex_bytes] = '\\0';\n      mhd_probe_log (\"timestamp hex written at nonce+%zu: %s (showing %zu digest bytes as hex)\", ds * 2, temp, shown);\n    }\n  }\n  if (rnd_size > 0)\n  {\n    mhd_probe_log (\"rnd branch entered: rnd=%p, rnd_size=%zu\", (const void *) rnd, rnd_size);\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n\n    if (rnd != NULL)\n      mhd_probe_log_hex (\"rnd first bytes\", (const uint8_t *) rnd, rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    mhd_probe_log (\"bind NONE and saddr present branch entered: saddr_size=%zu\", saddr_size);\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    mhd_probe_log (\"bind CLIENT_IP branch entered: saddr_size=%zu, family=%d\", saddr_size, (int) saddr->ss_family);\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    mhd_probe_log (\"method/URI binding branch entered: mthd_e=%d\", (int) mthd_e);\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n      mhd_probe_log (\"method enum used for hash: %u\", (unsigned) mthd_for_hash);\n    }\n    else\n    {\n      digest_update_str (da, method);\n      if (method != NULL)\n        mhd_probe_log (\"method string used for hash: '%s'\", method);\n    }\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    mhd_probe_log (\"bind URI branch entered: uri_len=%zu\", uri_len);\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n    if (uri != NULL)\n      mhd_probe_log_hex (\"uri bytes (prefix)\", (const uint8_t *) uri, uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    mhd_probe_log (\"bind URI_PARAMS branch entered\");\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n\n      mhd_probe_log (\"uri param header='%s' (size=%zu), value='%s' (size=%zu)\",\n                     (h->header != NULL) ? h->header : \"(null)\",\n                     h->header_size,\n                     (h->value != NULL) ? h->value : \"(null)\",\n                     h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    mhd_probe_log (\"realm binding branch entered: realm_len=%zu\", realm_len);\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n    if (realm != NULL)\n      mhd_probe_log_hex (\"realm bytes (prefix)\", (const uint8_t *) realm, realm_len);\n  }\n  if (1)\n  {\n    mhd_probe_log (\"constant if(1) final-hash branch entered: computing hash\");\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n\n    mhd_probe_log_hex (\"computed raw hash\", hash, digest_get_size (da));\n\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n\n    /* Log the final nonce hex (show a capped amount) */\n    {\n      size_t ds = digest_get_size (da);\n      size_t shown = (ds > 32u) ? 32u : ds;\n      size_t hex_bytes = shown * 2;\n      char temp[32 * 2 + 1];\n      memcpy (temp, nonce, hex_bytes);\n      temp[hex_bytes] = '\\0';\n      mhd_probe_log (\"final nonce hex (prefix, showing %zu digest bytes): %s\", shown, temp);\n    }\n  }\n\n  mhd_probe_log (\"calculate_nonce EXIT\");\n}\n"
}