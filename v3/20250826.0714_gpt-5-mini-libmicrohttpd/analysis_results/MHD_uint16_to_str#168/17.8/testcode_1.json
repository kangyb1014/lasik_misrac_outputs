{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'buf_size--;' directly modifies the function parameter 'buf_size' (type size_t). Rule 17.8 forbids modifying function parameters; a local copy should be used instead (e.g. 'size_t remaining = buf_size;' and decrement 'remaining').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint16_to_str code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1687.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_uint16_to_str as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_uint16_to_str:\n```c\nsize_t\nMHD_uint16_to_str (uint16_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 65535 */\n  uint16_t divisor = UINT16_C (10000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val = (uint16_t) (val % divisor);\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\nPlease provide the modified MHD_uint16_to_str code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging function. Appends human-readable state to /tmp/logs/1687.txt. */\nstatic void\nmhd_log_state(const char *stage,\n              uint16_t val,\n              char *buf,\n              size_t buf_size,\n              uint16_t divisor,\n              int digit,\n              char *chr,\n              size_t iteration)\n{\n    FILE *f = fopen(\"/tmp/logs/1687.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    fprintf(f, \"[MHD_uint16_to_str] stage=%s iter=%zu val=%u buf=%p buf_size=%zu divisor=%u digit=%d chr=%p\\n\",\n            stage, iteration, (unsigned) val, (void *) buf, buf_size, (unsigned) divisor, digit, (void *) chr);\n\n    /* Dump up to first 16 bytes of buffer (safe read) */\n    if (buf != NULL)\n    {\n        size_t to_dump = buf_size < (size_t)16 ? buf_size : (size_t)16;\n        fprintf(f, \"  buf[0..%zu]: '\", to_dump);\n        for (size_t i = 0; i < to_dump; ++i)\n        {\n            unsigned char c = (unsigned char) buf[i];\n            if ((c >= 32) && (c < 127))\n                fputc((int)c, f);\n            else\n                fprintf(f, \"\\\\x%02x\", c);\n        }\n        fprintf(f, \"'\\n\");\n    }\n\n    fclose(f);\n}\n\nsize_t\nMHD_uint16_to_str (uint16_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 65535 */\n  uint16_t divisor = UINT16_C (10000);\n  int digit;\n  size_t iter = 0;\n\n  /* Log entry state */\n  mhd_log_state(\"entry\", val, buf, buf_size, divisor, -1, NULL, iter);\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n\n    /* Log after skipping a leading zero */\n    mhd_log_state(\"skip_leading_zero\", val, buf, buf_size, divisor, digit, chr, iter);\n  }\n\n  /* Log before entering main output loop */\n  mhd_log_state(\"before_output_loop\", val, buf, buf_size, divisor, digit, chr, iter);\n\n  while (0 != buf_size)\n  {\n    /* Log at loop start */\n    mhd_log_state(\"loop_start\", val, buf, buf_size, divisor, digit, chr, iter);\n\n    *chr = (char) ((char) digit + '0');\n    chr++;\n\n    /* The following line is the modification of the function parameter that is reported as a violation. */\n    buf_size--;\n\n    /* Log after decrementing the parameter */\n    mhd_log_state(\"after_buf_size_decrement\", val, buf, buf_size, divisor, digit, chr, iter);\n\n    if (1 == divisor)\n    {\n      /* Log before returning success */\n      mhd_log_state(\"return_success\", val, buf, buf_size, divisor, digit, chr, iter);\n      return (size_t) (chr - buf);\n    }\n    val = (uint16_t) (val % divisor);\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n\n    ++iter;\n  }\n\n  /* Log buffer-too-small exit */\n  mhd_log_state(\"return_buffer_too_small\", val, buf, buf_size, divisor, digit, chr, iter);\n  return 0; /* The buffer is too small */\n}\n"
}