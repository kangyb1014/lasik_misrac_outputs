{
  "user_message": "An agent A claimed that the following post_iterator code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of post_iterator.\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe check if (off >= sizeof(session->value_2) - 1) by itself does not ensure that the subsequent memcpy cannot write beyond the bounds. A concrete violation scenario: let sizeof(session->value_2) == 256, off == 1 (so the fragment's test passes and does not early-return) and size be a very large size_t (e.g. SIZE_MAX). Then size + off wraps (unsigned overflow) to a small value, so the condition if (size + off >= sizeof(session->value_2)) may be false and the code will call memcpy(&session->value_2[off], data, size) with a huge size, causing accesses beyond the bounds of session->value_2. Therefore Rule 21.17 can be violated.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code computes size + off using unsigned arithmetic and does not guard against wrap-around/overflow, so the check if (size + off >= sizeof(session->value_X)) can be fooled by modulo wrap. Example: sizeof(session->value_2) == 256, off == 1 and size == SIZE_MAX (or any value such that size + off wraps to a small value). Then size + off becomes 0 (or another small number) so the condition is false and memcpy(&session->value_2[off], data, size) is called with a huge size, causing writes beyond the bounds of session->value_2. That violates MISRA C 2023 Rule 21.17 (string handling must not access beyond object bounds). The same issue exists for both value_1 and value_2 paths. A safe fix is to check for addition overflow before using size + off (for example test if size > SIZE_MAX - off or compute a bounded max_copy = (sizeof - 1) - off using a type that can represent both, then cap size to that max), and only then call memcpy."
}