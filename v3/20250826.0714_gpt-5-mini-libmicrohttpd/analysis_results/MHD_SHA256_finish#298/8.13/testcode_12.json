{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function sha256_transform is declared to take a non-const buffer parameter (for example: void sha256_transform(uint32_t H[8], uint8_t block[SHA256_BLOCK_SIZE]);) but only reads from the block, then the pointer parameter should be const-qualified (e.g. const uint8_t block[]). In that case the current call sha256_transform(ctx->H, ctx->buffer) indicates a violation of MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible. (If, however, sha256_transform legitimately modifies the buffer, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_finish code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2983.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA256_finish as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_finish:\n```c\nvoid\nMHD_SHA256_finish (struct Sha256Ctx *ctx,\n                   uint8_t digest[SHA256_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  num_bits = ctx->count << 3;\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equal (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n\n  /* Input data must be padded with a single bit \"1\", then with zeros and\n     the finally the length of data in bits must be added as the final bytes\n     of the last block.\n     See FIPS PUB 180-4 paragraph 5.1.1. */\n\n  /* Data is always processed in form of bytes (not by individual bits),\n     therefore position of first padding bit in byte is always\n     predefined (0x80). */\n  /* Buffer always have space at least for one byte (as full buffers are\n     processed immediately). */\n  ((uint8_t *) ctx->buffer)[bytes_have++] = 0x80;\n\n  if (SHA256_BLOCK_SIZE - bytes_have < SHA256_SIZE_OF_LEN_ADD)\n  {   /* No space in current block to put total length of message.\n         Pad current block with zeros and process it. */\n    if (bytes_have < SHA256_BLOCK_SIZE)\n      memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n              SHA256_BLOCK_SIZE - bytes_have);\n    /* Process full block. */\n    sha256_transform (ctx->H, ctx->buffer);\n    /* Start new block. */\n    bytes_have = 0;\n  }\n\n  /* Pad the rest of the buffer with zeros. */\n  memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n          SHA256_BLOCK_SIZE - SHA256_SIZE_OF_LEN_ADD - bytes_have);\n  /* Put the number of bits in processed message as big-endian value. */\n  _MHD_PUT_64BIT_BE_SAFE (ctx->buffer + SHA256_BLOCK_SIZE_WORDS - 2, num_bits);\n  /* Process full final block. */\n  sha256_transform (ctx->H, ctx->buffer);\n\n  /* Put final hash/digest in BE mode */\n#ifndef _MHD_PUT_32BIT_BE_UNALIGNED\n  if (1\n#ifndef MHD_FAVOR_SMALL_CODE\n      && (0 != ((uintptr_t) digest) % _MHD_UINT32_ALIGN)\n#endif /* MHD_FAVOR_SMALL_CODE */\n      )\n  {\n    /* If storing of the final result requires aligned address and\n       the destination address is not aligned or compact code is used,\n       store the final digest in aligned temporary buffer first, then\n       copy it to the destination. */\n    uint32_t alig_dgst[SHA256_DIGEST_SIZE_WORDS];\n    _MHD_PUT_32BIT_BE (alig_dgst + 0, ctx->H[0]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 1, ctx->H[1]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 2, ctx->H[2]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 3, ctx->H[3]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 4, ctx->H[4]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 5, ctx->H[5]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 6, ctx->H[6]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 7, ctx->H[7]);\n    /* Copy result to unaligned destination address */\n    memcpy (digest, alig_dgst, SHA256_DIGEST_SIZE);\n  }\n#ifndef MHD_FAVOR_SMALL_CODE\n  else /* Combined with the next 'if' */\n#endif /* MHD_FAVOR_SMALL_CODE */\n#endif /* ! _MHD_PUT_32BIT_BE_UNALIGNED */\n#if ! defined(MHD_FAVOR_SMALL_CODE) || defined(_MHD_PUT_32BIT_BE_UNALIGNED)\n  if (1)\n  {\n    /* Use cast to (void*) here to mute compiler alignment warnings.\n     * Compilers are not smart enough to see that alignment has been checked. */\n    _MHD_PUT_32BIT_BE ((void *) (digest + 0 * SHA256_BYTES_IN_WORD), ctx->H[0]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 1 * SHA256_BYTES_IN_WORD), ctx->H[1]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 2 * SHA256_BYTES_IN_WORD), ctx->H[2]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 3 * SHA256_BYTES_IN_WORD), ctx->H[3]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 4 * SHA256_BYTES_IN_WORD), ctx->H[4]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 5 * SHA256_BYTES_IN_WORD), ctx->H[5]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 6 * SHA256_BYTES_IN_WORD), ctx->H[6]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 7 * SHA256_BYTES_IN_WORD), ctx->H[7]);\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE || _MHD_PUT_32BIT_BE_UNALIGNED */\n\n  /* Erase potentially sensitive data. */\n  memset (ctx, 0, sizeof(struct Sha256Ctx));\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA256_finish code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe helpers: write logs to /tmp/logs/2983.txt. */\nstatic void probe_ensure_dir(void)\n{\n  /* Try to create the directory if it does not exist. Ignore errors if it already exists. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void probe_write(const char *msg)\n{\n  probe_ensure_dir();\n  FILE *f = fopen(\"/tmp/logs/2983.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* If we cannot open the target file, try fallback file in /tmp. */\n    f = fopen(\"/tmp/2983.txt\", \"a\");\n    if (f == NULL)\n      return;\n  }\n  (void) fprintf(f, \"%s\\n\", msg);\n  (void) fclose(f);\n}\n\nstatic void probe_write_hexdump(const char *label, const uint8_t *buf, size_t len)\n{\n  probe_ensure_dir();\n  FILE *f = fopen(\"/tmp/logs/2983.txt\", \"a\");\n  if (f == NULL)\n  {\n    f = fopen(\"/tmp/2983.txt\", \"a\");\n    if (f == NULL)\n      return;\n  }\n  (void) fprintf(f, \"%s (len=%zu):\", label, len);\n  /* Print at most the first 256 bytes to avoid huge logs. */\n  size_t max = (len > 256U) ? 256U : len;\n  for (size_t i = 0U; i < max; ++i)\n  {\n    (void) fprintf(f, \" %02x\", buf[i]);\n  }\n  if (len > max)\n    (void) fprintf(f, \" ...\");\n  (void) fprintf(f, \"\\n\");\n  (void) fclose(f);\n}\n\nstatic void probe_log_transform_call(const char *when, unsigned call_index,\n                                     uint64_t num_bits, unsigned bytes_have,\n                                     const uint8_t *before, const uint8_t *after, size_t buflen)\n{\n  char msg[256];\n  /* Basic control/state info. */\n  (void) snprintf(msg, sizeof(msg), \"sha256_transform %s call %u: num_bits=%\" PRIu64 \", bytes_have=%u\",\n                  when, call_index, num_bits, bytes_have);\n  probe_write(msg);\n\n  /* Hexdump before/after (may be identical if transform does not modify buffer). */\n  probe_write_hexdump(\"buffer_before\", before, buflen);\n  probe_write_hexdump(\"buffer_after\", after, buflen);\n\n  /* Report if any byte changed. */\n  unsigned changed = 0U;\n  for (size_t i = 0U; i < buflen; ++i)\n  {\n    if (before[i] != after[i])\n    {\n      changed = 1U;\n      break;\n    }\n  }\n  (void) snprintf(msg, sizeof(msg), \"sha256_transform %s call %u: buffer_modified=%s\",\n                  when, call_index, changed ? \"YES\" : \"NO\");\n  probe_write(msg);\n}\n\n/* Forward declaration of external functions/macros used by the original code. */\nextern void sha256_transform (uint32_t H[8], void *block);\nextern void _MHD_PUT_64BIT_BE_SAFE (void *p, uint64_t v);\nextern void _MHD_PUT_32BIT_BE (void *p, uint32_t v);\n\n/* The modified MHD_SHA256_finish with inserted probes. */\nvoid\nMHD_SHA256_finish (struct Sha256Ctx *ctx,\n                   uint8_t digest[SHA256_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  num_bits = ctx->count << 3;\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equal (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n\n  /* Log initial state before padding */\n  {\n    char msg[128];\n    (void) snprintf(msg, sizeof(msg), \"MHD_SHA256_finish entry: count=%"
}