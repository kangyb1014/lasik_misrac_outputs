{
  "user_message": "An agent A claimed that the following answer_to_connection code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_to_connection.\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls,\n                      struct MHD_Connection *connection,\n                      const char *url,\n                      const char *method,\n                      const char *version,\n                      const char *upload_data,\n                      size_t *upload_data_size,\n                      void **req_cls)\n{\n  const char *page = \"<html><body>Hello timeout!</body></html>\";\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  (void) req_cls;           /* Unused. Silent compiler warning. */\n\n  response = MHD_create_response_from_buffer_static (strlen (page),\n                                                     (const void *) page);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               \"text/html\"))\n  {\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter is declared as 'void **req_cls' (a pointer to a non-const pointer). In this function the parameter is unused and the implementation does not modify the pointed-to pointer or the pointed-to data, so the pointer should be to a const-qualified type (for example 'void * const *req_cls' to indicate the function will not modify *req_cls, or 'const void **req_cls' if the ultimate pointee should be const). As written it points to a non-const-qualified type and thus violates MISRA C 2023 Rule 8.13. Note: if this signature must match an external API (e.g. a callback prototype), changing it may not be possible and a documented deviation is required.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C 2023 Rule 8.13 encourages making pointees const when the function does not need to modify them, but the answer_to_connection signature is a callback prototype that must match the external libmicrohttpd API (void **con_cls / req_cls). That API deliberately uses a non-const pointer-to-pointer so that callers may set a per-connection context via *con_cls; therefore the function cannot change the parameter type to a const-qualified variant without breaking the required prototype. The implementation correctly suppresses the unused-parameter warning with (void) req_cls. If the project MISRA checker requires justification, a documented deviation (or an appropriate annotation) is the correct remedy rather than changing the signature."
}