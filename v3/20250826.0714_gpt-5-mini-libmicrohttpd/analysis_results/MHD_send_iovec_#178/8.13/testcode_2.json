{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf connection->rp.response->data_iov is declared as a non-const pointer (for example: struct MHD_iovec *data_iov or struct iovec *data_iov) but is only read/inspected (never modified) in this and related code, then Rule 8.13 is violated because the pointer should instead point to a const-qualified type (e.g. const struct MHD_iovec *data_iov) to reflect read-only usage.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_iovec_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1783.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_send_iovec_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_send_iovec_:\n```c\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  return send_iov_nontls (connection, r_iov, push_data);\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n```\n</target_code>\nPlease provide the modified MHD_send_iovec_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends logs to /tmp/logs/1783.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/1783.txt\", \"a\");\n  if (NULL == fp)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (fp, fmt, ap);\n  va_end (ap);\n\n  fputc('\\n', fp);\n  fclose (fp);\n}\n\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  /* Log entry and key pointers/state. Use defensive checks to avoid\n     introducing crashes before existing asserts are executed. */\n  mhd_probe_log (\"MHD_send_iovec_: entered: connection=%p, r_iov=%p, push_data=%d\",\n                 (void *) connection, (void *) r_iov, (int) push_data);\n  if (NULL != connection)\n    {\n      /* Try to print nested pointers if available; avoid deref if NULL. */\n      void *resp_iov_iov = NULL;\n      void *response_data_iov = NULL;\n      uintptr_t resp_cnt = 0U;\n      uintptr_t resp_sent = 0U;\n\n      /* The following checks mirror the original asserts' assumptions but\n         are only used for logging; actual asserts remain below. */\n      if (NULL != &connection->rp)\n        {\n          resp_iov_iov = (void *) connection->rp.resp_iov.iov;\n          resp_cnt = (uintptr_t) connection->rp.resp_iov.cnt;\n          resp_sent = (uintptr_t) connection->rp.resp_iov.sent;\n        }\n      if (NULL != connection->rp.response)\n        response_data_iov = (void *) connection->rp.response->data_iov;\n\n      mhd_probe_log (\"MHD_send_iovec_: connection->rp.resp_iov.iov=%p, cnt=%\" PRIuPTR \", sent=%\" PRIuPTR,\n                     resp_iov_iov, resp_cnt, resp_sent);\n      mhd_probe_log (\"MHD_send_iovec_: connection->rp.response->data_iov=%p\",\n                     response_data_iov);\n    }\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n  mhd_probe_log (\"MHD_send_iovec_: after HTTPS_SUPPORT check, use_iov_send=%d\",\n                 (int) use_iov_send);\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n  mhd_probe_log (\"MHD_send_iovec_: after _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED check, use_iov_send=%d\",\n                 (int) use_iov_send);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n    {\n      /* Log intent to take the vect send path and record key state that\n         is relevant to the violation scenario (data_iov pointer is read-only). */\n      mhd_probe_log (\"MHD_send_iovec_: taking send_iov_nontls path; connection=%p, r_iov=%p, push_data=%d, data_iov=%p\",\n                     (void *) connection, (void *) r_iov, (int) push_data,\n                     (void *) connection->rp.response->data_iov);\n      return send_iov_nontls (connection, r_iov, push_data);\n    }\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  return send_iov_nontls (connection, r_iov, push_data);\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  mhd_probe_log (\"MHD_send_iovec_: taking send_iov_emu path; connection=%p, r_iov=%p, push_data=%d, data_iov=%p\",\n                 (void *) connection, (void *) r_iov, (int) push_data,\n                 (NULL != connection && NULL != connection->rp.response)\n                   ? (void *) connection->rp.response->data_iov : NULL);\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n"
}