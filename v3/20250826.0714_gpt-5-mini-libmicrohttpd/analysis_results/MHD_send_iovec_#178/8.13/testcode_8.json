{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter r_iov is declared as 'struct MHD_iovec_track_ *const r_iov' (the pointer is const but the pointed-to type is not). The call send_iov_emu(connection, r_iov, push_data) passes this pointer. If send_iov_emu (and other callees) only read from r_iov and do not modify the pointed-to object, then r_iov should be declared pointing to a const-qualified type (e.g. 'const struct MHD_iovec_track_ *const r_iov') and the callee prototype should take a pointer-to-const. As written (no const on the pointee) this violates MISRA C 2023 Rule 8.13. Note: if send_iov_emu legitimately modifies the object pointed to by r_iov, then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_iovec_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1783.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_send_iovec_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_send_iovec_:\n```c\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  return send_iov_nontls (connection, r_iov, push_data);\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n```\n</target_code>\nPlease provide the modified MHD_send_iovec_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe function to log control-flow and state to /tmp/logs/1783.txt.\n   This helper preserves program logic and only reads state (no modifications).\n*/\nstatic void\nmhd_log_probe (const char *stage,\n               struct MHD_Connection *connection,\n               struct MHD_iovec_track_ *const r_iov,\n               bool push_data)\n{\n  FILE *f = fopen(\"/tmp/logs/1783.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"STAGE=%s\\n\", stage);\n  fprintf (f, \"  connection=%p r_iov=%p push_data=%d\\n\",\n           (void *) connection, (void *) r_iov, (int) push_data);\n\n  if (NULL != connection)\n    {\n      /* Log pointers that the function asserts on in original code. */\n      fprintf (f, \"  rp.resp_iov.iov=%p rp.response->data_iov=%p\\n\",\n               (void *) connection->rp.resp_iov.iov,\n               (void *) connection->rp.response->data_iov);\n\n      /* Print counters used in the control condition. Cast to long long to\n         avoid format-warning with common integer types. */\n      fprintf (f, \"  rp.resp_iov.cnt=%lld rp.resp_iov.sent=%lld\\n\",\n               (long long) connection->rp.resp_iov.cnt,\n               (long long) connection->rp.resp_iov.sent);\n\n#ifdef MHD_VECT_SEND\n#ifdef HTTPS_SUPPORT\n      fprintf (f, \"  daemon->options=0x%08x (HTTPS_SUPPORT path considered)\\n\",\n               (unsigned) connection->daemon->options);\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n      fprintf (f, \"  daemon->sigpipe_blocked=%d sk_spipe_suppress=%d\\n\",\n               (int) connection->daemon->sigpipe_blocked,\n               (int) connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n    }\n\n  fflush (f);\n  fclose (f);\n}\n\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n\n  /* Initial probe: capture entry state. */\n  mhd_log_probe (\"entry\", connection, r_iov, push_data);\n\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n\n  /* Log the decision variable before potentially taking the non-TLS path. */\n  {\n    FILE *f = fopen(\"/tmp/logs/1783.txt\", \"a\");\n    if (NULL != f)\n      {\n        fprintf (f, \"decision: use_iov_send=%d\\n\", (int) use_iov_send);\n        fclose (f);\n      }\n  }\n\n  if (use_iov_send)\n    {\n      /* Probe just before calling send_iov_nontls to record the control path. */\n      mhd_log_probe (\"before_send_iov_nontls\", connection, r_iov, push_data);\n      return send_iov_nontls (connection, r_iov, push_data);\n    }\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  return send_iov_nontls (connection, r_iov, push_data);\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  /* Probe just before calling the emulation path to record the control path. */\n  mhd_log_probe (\"before_send_iov_emu\", connection, r_iov, push_data);\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n"
}