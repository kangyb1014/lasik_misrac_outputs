{
  "user_message": "An agent A claimed that the following MHD_create_named_thread_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_named_thread_.\n```c\nint\nMHD_create_named_thread_ (MHD_thread_handle_ID_ *handle_id,\n                          const char *thread_name,\n                          size_t stack_size,\n                          MHD_THREAD_START_ROUTINE_ start_routine,\n                          void *arg)\n{\n#if defined(MHD_USE_THREAD_ATTR_SETNAME)\n  int res;\n  pthread_attr_t attr;\n#if defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  pthread_t *const new_tid_ptr =\n    MHD_thread_handle_ID_get_native_handle_ptr_ (handle_id);\n#else  /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n  pthread_t new_tid;\n  pthread_t *const new_tid_ptr = &new_tid;\n#endif /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n\n  res = pthread_attr_init (&attr);\n  if (0 == res)\n  {\n#if defined(HAVE_PTHREAD_ATTR_SETNAME_NP_NETBSD)\n    /* NetBSD uses 3 arguments: second argument is string in printf-like format,\n     *                          third argument is single argument for printf;\n     * OSF1 uses 3 arguments too, but last one always must be zero (NULL).\n     * MHD doesn't use '%' in thread names, so both forms are used in same way.\n     */\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name,\n                                   0);\n#elif defined(HAVE_PTHREAD_ATTR_SETNAME_NP_IBMI)\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name);\n#else\n#error No pthread_attr_setname_np() function.\n#endif\n    if ((res == 0) && (0 != stack_size) )\n      res = pthread_attr_setstacksize (&attr,\n                                       stack_size);\n    if (0 == res)\n      res = pthread_create (new_tid_ptr,\n                            &attr,\n                            start_routine,\n                            arg);\n    pthread_attr_destroy (&attr);\n  }\n  if (0 != res)\n  {\n    errno = res;\n    MHD_thread_handle_ID_set_invalid_ (handle_id);\n  }\n#if ! defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  else\n    MHD_thread_handle_ID_set_native_handle_ (handle_id, new_tid);\n#endif /* ! MHD_thread_handle_ID_set_current_thread_ID_ */\n\n  return ! res;\n#else  /* ! MHD_USE_THREAD_ATTR_SETNAME */\n  struct MHD_named_helper_param_ *param;\n\n  if (NULL == thread_name)\n  {\n    errno = EINVAL;\n    return 0;\n  }\n\n  param = malloc (sizeof (struct MHD_named_helper_param_));\n  if (NULL == param)\n    return 0;\n\n  param->start_routine = start_routine;\n  param->arg = arg;\n  param->name = thread_name;\n\n  /* Set thread name in thread itself to avoid problems with\n   * threads which terminated before name is set in other thread.\n   */\n  if (! MHD_create_thread_ (handle_id,\n                            stack_size,\n                            &named_thread_starter,\n                            (void *) param))\n  {\n    int err_num;\n\n    err_num = errno;\n    free (param);\n    errno = err_num;\n    return 0;\n  }\n\n  return ! 0;\n#endif /* ! MHD_USE_THREAD_ATTR_SETNAME */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe struct member param->name is assigned from the function parameter thread_name which has type const char *. If param->name is declared as a non-const pointer (e.g. char *name), this assignment discards the const qualifier and makes a non-const pointer refer to const-qualified data. That violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_create_named_thread_ entry: handle_id=0x55f2e3d8e978, thread_name_ptr=0x7f2a69d489d1, thread_name='MHD-single', stack_size=0, start_routine=0x7f2a69d11800, arg=0x55f2e3d8e820\nMHD_create_named_thread_: allocated param=0x55f2e3d8ee80\nMHD_create_named_thread_: before name assign: param->name (old)=(nil), thread_name=0x7f2a69d489d1 ('MHD-single')\nMHD_create_named_thread_: after name assign: param=0x55f2e3d8ee80, param->name=0x7f2a69d489d1 ('MHD-single')\nMHD_create_named_thread_: calling MHD_create_thread_ (handle_id=0x55f2e3d8e978, stack_size=0, starter=0x7f2a69d27540, param=0x55f2e3d8ee80)\nMHD_create_named_thread_: thread created successfully, handle_id=0x55f2e3d8e978, param=0x55f2e3d8ee80\nMHD_create_named_thread_ entry: handle_id=0x55f2e3d8f118, thread_name_ptr=0x7f2a69d489c6, thread_name='MHD-listen', stack_size=0, start_routine=0x7f2a69d11800, arg=0x55f2e3d8efc0\nMHD_create_named_thread_: allocated param=0x55f2e3d8ee80\nMHD_create_named_thread_: before name assign: param->name (old)=(nil), thread_name=0x7f2a69d489c6 ('MHD-listen')\nMHD_create_named_thread_: after name assign: param=0x55f2e3d8ee80, param->name=0x7f2a69d489c6 ('MHD-listen')\nMHD_create_named_thread_: calling MHD_create_thread_ (handle_id=0x55f2e3d8f118, stack_size=0, starter=0x7f2a69d27540, param=0x55f2e3d8ee80)\nMHD_create_named_thread_: thread created successfully, handle_id=0x55f2e3d8f118, param=0x55f2e3d8ee80\nMHD_create_named_thread_ entry: handle_id=0x55f2e3d8fa18, thread_name_ptr=0x7f2a69d48b20, thread_name='MHD-worker', stack_size=0, start_routine=0x7f2a69d11800, arg=0x55f2e3d8f8c0\nMHD_create_named_thread_: allocated param=0x55f2e3d8ee80\nMHD_create_named_thread_: before name assign: param->name (old)=(nil), thread_name=0x7f2a69d48b20 ('MHD-worker')\nMHD_create_named_thread_: after name assign: param=0x55f2e3d8ee80, param->name=0x7f2a69d48b20 ('MHD-worker')\nMHD_create_named_thread_: calling MHD_create_thread_ (handle_id=0x55f2e3d8fa18, stack_size=0, starter=0x7f2a69d27540, param=0x55f2e3d8ee80)\nMHD_create_named_thread_: thread created successfully, handle_id=0x55f2e3d8fa18, param=0x55f2e3d8ee80\nMHD_create_named_thread_ entry: handle_id=0x55f2e3d8fcc0, thread_name_ptr=0x7f2a69d48b20, thread_name='MHD-worker', stack_size=0, start_routine=0x7f2a69d11800, arg=0x55f2e3d8fb68\nMHD_create_named_thread_: allocated param=0x55f2e3d8fe20\nMHD_create_named_thread_: before name assign: param->name (old)=(nil), thread_name=0x7f2a69d48b20 ('MHD-worker')\nMHD_create_named_thread_: after name assign: param=0x55f2e3d8fe20, param->name=0x7f2a69d48b20 ('MHD-worker')\nMHD_create_named_thread_: calling MHD_create_thread_ (handle_id=0x55f2e3d8fcc0, stack_size=0, starter=0x7f2a69d27540, param=0x55f2e3d8fe20)\nMHD_create_named_thread_: thread created successfully, handle_id=0x55f2e3d8fcc0, param=0x55f2e3d8fe20\nMHD_create_named_thread_ entry: handle_id=0x55f2e3d904f8, thread_name_ptr=0x7f2a69d489d1, thread_name='MHD-single', stack_size=0, start_routine=0x7f2a69d11800, arg=0x55f2e3d903a0\nMHD_create_named_thread_: allocated param=0x55f2e3d8ee80\nMHD_create_named_thread_: before name assign: param->name (old)=(nil), thread_name=0x7f2a69d489d1 ('MHD-single')\nMHD_create_named_thread_: after name assign: param=0x55f2e3d8ee80, param->name=0x7f2a69d489d1 ('MHD-single')\nMHD_create_named_thread_: calling MHD_create_thread_ (handle_id=0x55f2e3d904f8, stack_size=0, starter=0x7f2a69d27540, param=0x55f2e3d8ee80)\nMHD_create_named_thread_: thread created successfully, handle_id=0x55f2e3d904f8, param=0x55f2e3d8ee80\nMHD_create_named_thread_ entry: handle_id=0x55f2e3d90938, thread_name_ptr=0x7f2a69d489c6, thread_name='MHD-listen', stack_size=0, start_routine=0x7f2a69d11800, arg=0x55f2e3d907e0\nMHD_create_named_thread_: allocated param=0x55f2e3d8ee80\nMHD_create_named_thread_: before name assign: param->name (old)=(nil), thread_name=0x7f2a69d489c6 ('MHD-listen')\nMHD_create_named_thread_: after name assign: param=0x55f2e3d8ee80, param->name=0x7f2a69d489c6 ('MHD-listen')\nMHD_create_named_thread_: calling MHD_create_thread_ (handle_id=0x55f2e3d90938, stack_size=0, starter=0x7f2a69d27540, param=0x55f2e3d8ee80\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's claim is correct in principle: assigning thread_name (type const char *) into param->name is a potential violation of MISRA C 2023 Rule 8.13 if param->name is declared as a non-const pointer (e.g. char *name). That assignment would discard the const qualifier and therefore contravene the guideline that pointers should point to const-qualified types wherever possible.\n\nHowever, the code excerpt you provided does not include the definition of struct MHD_named_helper_param_, so whether a violation actually occurs in this compilation unit depends on that definition. Two cases:\n- If struct MHD_named_helper_param_ declares name as const char *name; then there is no violation and Agent A's report is incorrect. The assignment param->name = thread_name is const-correct.\n- If the struct declares name as char *name (non-const), then Agent A's report is correct: the assignment discards const and violates MISRA 8.13 (and also would typically provoke a compiler diagnostic about discarding qualifiers).\n\nRecommendation: to satisfy MISRA 8.13 and avoid qualifier-discarding, declare the member as const char *name (and propagate const where appropriate), rather than casting away or storing a const char * in a non-const pointer."
}