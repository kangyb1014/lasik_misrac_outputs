{
  "user_message": "An agent A claimed that the following fill_v1_v2_form code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of fill_v1_v2_form.\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct Session *session' is not const-qualified. In fill_v1_v2_form the session object is only accessed to read session->value_1 and session->value_2 and then passed to add_session_cookie(). If add_session_cookie does not modify the Session object, then the pointer should be declared as 'const struct Session *session' and this is a violation of Rule 8.13. If add_session_cookie does modify the session, the non-const pointer is justified and there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not reliably correct. MISRA C 2023 Rule 8.13 indeed recommends that pointer types be const-qualified when the pointed-to object is not modified. In fill_v1_v2_form the function reads session->value_1 and session->value_2 (read-only uses) but also passes session to add_session_cookie(session, response). Whether the parameter should be const depends on whether add_session_cookie modifies the Session object or requires a non-const pointer. Without the prototype or implementation of add_session_cookie you cannot determine if the session parameter could be const. If add_session_cookie does not modify session (and its prototype can be changed to accept const struct Session *), then fill_v1_v2_form should take const struct Session *session and the agent A\u2019s claim would be correct. If add_session_cookie modifies session (or requires a non-const pointer), then the current non-const parameter is justified and there is no violation. Recommendation: inspect/add_session_cookie\u2019s signature; if it does not modify session, change the parameter to const struct Session *session (and update add_session_cookie accordingly)."
}