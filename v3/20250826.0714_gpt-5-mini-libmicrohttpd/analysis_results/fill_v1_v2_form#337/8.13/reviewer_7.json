{
  "user_message": "An agent A claimed that the following fill_v1_v2_form code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of fill_v1_v2_form.\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes session->value_1 and session->value_2 (and possibly SECOND_PAGE) as input strings to snprintf. If those members are declared as plain char * (or SECOND_PAGE as a non-const char[]/char *), this violates Rule 8.13 because the pointers refer to data that is not modified by snprintf and therefore should be declared const char * (or const char[]). The destination reply is correctly non-const (it is modified), so it is not a violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 concerns how pointers are declared: a pointer type should be const-qualified wherever possible. The mere fact that session->value_1, session->value_2 and SECOND_PAGE are used as input strings to snprintf does not by itself prove a violation of 8.13. To establish a rule violation you must inspect the declarations of those objects. If session->value_1/ value_2 (or SECOND_PAGE) are declared as non-const but are never modified anywhere, then their declarations could be criticized under 8.13 \u2014 but that is a deficiency in the declarations, not shown in the snippet. Conversely, if those members are legitimately mutable elsewhere (or intentionally non-const), then there is no violation.\n\nAlso note: snprintf\u2019s format parameter is const char *, but the %s variadic argument is not type-checked; passing a const char * as a %s argument is a separate interoperability concern, not automatic proof of an 8.13 violation in the code fragment shown.\n\nBecause the report asserts a violation without showing the actual declarations of session->value_1, session->value_2 or SECOND_PAGE, there is insufficient evidence to conclude a definite violation of Rule 8.13."
}