{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'daemon' is declared as 'struct MHD_Daemon *daemon' but within internal_get_fdset2 the function only reads fields from *daemon (shutdown, itc, was_quiesced, listen_fd, connections_tail, connections, connection_limit, at_limit, etc.) and never modifies the pointed-to object. Therefore the pointer could/should be declared as 'const struct MHD_Daemon *daemon' to satisfy MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified internal_get_fdset2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of internal_get_fdset2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of internal_get_fdset2:\n```c\nstatic enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (daemon->shutdown)\n    return MHD_YES;\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    if (! itc_added)\n      result = MHD_NO;\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    if (MHD_add_to_fd_set_ (ls,\n                            read_fd_set,\n                            max_fd,\n                            fd_setsize))\n      ls = MHD_INVALID_SOCKET;   /* Already added */\n    else\n      result = MHD_NO;\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    posn = pos->prev;\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                write_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n      if ( (NULL == except_fd_set) ||\n           ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                 except_fd_set,\n                                 max_fd,\n                                 fd_setsize))\n        result = MHD_NO;\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    struct MHD_UpgradeResponseHandle *urh;\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      if (MHD_NO ==\n          urh_to_fdset (urh,\n                        read_fd_set,\n                        write_fd_set,\n                        except_fd_set,\n                        max_fd,\n                        fd_setsize))\n        result = MHD_NO;\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  return result;\n}\n```\n</target_code>\nPlease provide the modified internal_get_fdset2 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted messages to /tmp/logs/1123.txt */\nstatic void mhd_probe_printf(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1123.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  (void) vfprintf(f, fmt, ap);\n  (void) fputc('\\n', f);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  mhd_probe_printf(\"internal_get_fdset2: daemon=%p, fd_setsize=%d\", (void *) daemon, fd_setsize);\n\n  if (daemon->shutdown)\n  {\n    mhd_probe_printf(\"internal_get_fdset2: daemon->shutdown is true -> early return MHD_YES\");\n    return MHD_YES;\n  }\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    mhd_probe_printf(\"internal_get_fdset2: ITC valid, itc=%p, reader_fd=%d\", (void *) daemon->itc, (int) MHD_itc_r_fd_ (daemon->itc));\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    mhd_probe_printf(\"internal_get_fdset2: itc_added=%s\", itc_added ? \"true\" : \"false\");\n    if (! itc_added)\n      result = MHD_NO;\n  }\n  else\n  {\n    mhd_probe_printf(\"internal_get_fdset2: ITC not valid\");\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  mhd_probe_printf(\"internal_get_fdset2: was_quiesced=%s, listen_fd=%d -> ls=%d\",\n                   daemon->was_quiesced ? \"true\" : \"false\",\n                   (int) daemon->listen_fd,\n                   (int) ls);\n\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    if (MHD_add_to_fd_set_ (ls,\n                            read_fd_set,\n                            max_fd,\n                            fd_setsize))\n    {\n      ls = MHD_INVALID_SOCKET;   /* Already added */\n      mhd_probe_printf(\"internal_get_fdset2: listen fd %d added (ls set to INVALID)\", (int) daemon->listen_fd);\n    }\n    else\n    {\n      result = MHD_NO;\n      mhd_probe_printf(\"internal_get_fdset2: failed to add listen fd %d\", (int) daemon->listen_fd);\n    }\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    posn = pos->prev;\n\n    mhd_probe_printf(\"internal_get_fdset2: processing connection pos=%p socket_fd=%d event_loop_info=%d\",\n                     (void *) pos,\n                     (int) pos->socket_fd,\n                     (int) pos->event_loop_info);\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n    {\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n      {\n        result = MHD_NO;\n        mhd_probe_printf(\"internal_get_fdset2: failed to add socket_fd %d to read_fd_set\", (int) pos->socket_fd);\n      }\n      else\n      {\n        mhd_probe_printf(\"internal_get_fdset2: added socket_fd %d to read_fd_set\", (int) pos->socket_fd);\n      }\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n      {\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n        mhd_probe_printf(\"internal_get_fdset2: added socket_fd %d to except_fd_set (pos read)\", (int) pos->socket_fd);\n      }\n#endif /* MHD_POSIX_SOCKETS */\n    }\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n    {\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                write_fd_set,\n                                max_fd,\n                                fd_setsize))\n      {\n        result = MHD_NO;\n        mhd_probe_printf(\"internal_get_fdset2: failed to add socket_fd %d to write_fd_set\", (int) pos->socket_fd);\n      }\n      else\n      {\n        mhd_probe_printf(\"internal_get_fdset2: added socket_fd %d to write_fd_set\", (int) pos->socket_fd);\n      }\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n      {\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n        mhd_probe_printf(\"internal_get_fdset2: added socket_fd %d to except_fd_set (pos write)\", (int) pos->socket_fd);\n      }\n#endif /* MHD_POSIX_SOCKETS */\n    }\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n    {\n      if ( (NULL == except_fd_set) ||\n           ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                 except_fd_set,\n                                 max_fd,\n                                 fd_setsize))\n      {\n        result = MHD_NO;\n        mhd_probe_printf(\"internal_get_fdset2: failed to add socket_fd %d to except_fd_set (process)\", (int) pos->socket_fd);\n      }\n      else\n      {\n        mhd_probe_printf(\"internal_get_fdset2: added socket_fd %d to except_fd_set (process)\", (int) pos->socket_fd);\n      }\n    }\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      mhd_probe_printf(\"internal_get_fdset2: encountered MHD_EVENT_LOOP_INFO_CLEANUP for pos=%p\", (void *) pos);\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n      mhd_probe_printf(\"internal_get_fdset2: WINSOCK added socket_fd %d to except_fd_set\", (int) pos->socket_fd);\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    struct MHD_UpgradeResponseHandle *urh;\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      mhd_probe_printf(\"internal_get_fdset2: processing urh=%p\", (void *) urh);\n      if (MHD_NO ==\n          urh_to_fdset (urh,\n                        read_fd_set,\n                        write_fd_set,\n                        except_fd_set,\n                        max_fd,\n                        fd_setsize))\n      {\n        result = MHD_NO;\n        mhd_probe_printf(\"internal_get_fdset2: urh_to_fdset returned MHD_NO for urh=%p\", (void *) urh);\n      }\n      else\n      {\n        mhd_probe_printf(\"internal_get_fdset2: urh_to_fdset succeeded for urh=%p\", (void *) urh);\n      }\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    mhd_probe_printf(\"internal_get_fdset2: final ls present=%d, connections=%u, connection_limit=%u, at_limit=%s\",\n                     (int) ls,\n                     (unsigned) daemon->connections,\n                     (unsigned) daemon->connection_limit,\n                     daemon->at_limit ? \"true\" : \"false\");\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n      {\n        result = MHD_NO;\n        mhd_probe_printf(\"internal_get_fdset2: failed to add final listen fd %d\", (int) ls);\n      }\n      else\n      {\n        mhd_probe_printf(\"internal_get_fdset2: added final listen fd %d\", (int) ls);\n      }\n    }\n    else\n    {\n      mhd_probe_printf(\"internal_get_fdset2: not adding final listen fd: either at limit or connections >= connection_limit\");\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n\n  if (NULL != max_fd)\n    mhd_probe_printf(\"internal_get_fdset2: returning result=%d, max_fd=%d\", (int) result, (int) *max_fd);\n  else\n    mhd_probe_printf(\"internal_get_fdset2: returning result=%d, max_fd=NULL\", (int) result);\n\n  return result;\n}\n"
}