{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1124.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  (void) vfprintf(f, fmt, ap);\n  va_end(ap);\n  (void) fprintf(f, \"\\n\");\n  (void) fclose(f);\n}\n\nstatic enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  /* Log entry and key daemon state */\n  mhd_probe_log(\"internal_get_fdset2 ENTER daemon=%p shutdown=%d listen_fd=%ld urh_tail=%p connections=%u connection_limit=%u at_limit=%d\",\n                (void *) daemon,\n                (int) daemon->shutdown,\n                (long) daemon->listen_fd,\n                (void *) daemon->urh_tail,\n                (unsigned) daemon->connections,\n                (unsigned) daemon->connection_limit,\n                (int) daemon->at_limit);\n\n  if (daemon->shutdown)\n    return MHD_YES;\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    if (! itc_added)\n      result = MHD_NO;\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    if (MHD_add_to_fd_set_ (ls,\n                            read_fd_set,\n                            max_fd,\n                            fd_setsize))\n      ls = MHD_INVALID_SOCKET;   /* Already added */\n    else\n      result = MHD_NO;\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    posn = pos->prev;\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                write_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n      if ( (NULL == except_fd_set) ||\n           ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                 except_fd_set,\n                                 max_fd,\n                                 fd_setsize))\n        result = MHD_NO;\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    struct MHD_UpgradeResponseHandle *urh;\n\n    /* Log the fact that we are about to enter the upgrade-response loop and\n       capture the tail pointer. This loop's third clause uses 'urh = urh->prev',\n       which is the subject of the reported MISRA 14.2 concern. */\n    mhd_probe_log(\"URH loop START urh_tail=%p (third clause: urh = urh->prev)\", (void *) daemon->urh_tail);\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      /* Log the current urh and the value of urh->prev as observed before\n         calling urh_to_fdset. Reading urh->prev here is the conservative and\n         safe action (performed before the body call). We avoid dereferencing\n         urh after calling urh_to_fdset to reduce the risk of use-after-free\n         if that function frees the object. */\n      mhd_probe_log(\"URH ITER: urh=%p urh->prev(before call)=%p\",\n                    (void *) urh,\n                    (void *) urh->prev);\n\n      enum MHD_Result urh_ret = urh_to_fdset (urh,\n                                              read_fd_set,\n                                              write_fd_set,\n                                              except_fd_set,\n                                              max_fd,\n                                              fd_setsize);\n\n      if (MHD_NO == urh_ret)\n        result = MHD_NO;\n\n      /* Log return from urh_to_fdset. Do NOT dereference 'urh' here since\n         urh_to_fdset may free or modify 'urh' (this is precisely the\n         behaviour that could lead to the MISRA 14.2 violation). Logging the\n         pointer value and the function return gives evidence of the call and\n         the state seen before the call. */\n      mhd_probe_log(\"URH ITER RETURN: urh=%p urh_to_fdset_return=%d\",\n                    (void *) urh,\n                    (int) urh_ret);\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n\n  mhd_probe_log(\"internal_get_fdset2 LEAVE daemon=%p result=%d\",\n                (void *) daemon, (int) result);\n\n  return result;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\ndaemon.c:1031:34: error: no member named 'urh_tail' in 'struct MHD_Daemon'\n 1031 |                 (void *) daemon->urh_tail,\n      |                          ~~~~~~  ^\n1 error generated.\nmake[3]: *** [Makefile:2112: libmicrohttpd_la-daemon.lo] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of internal_get_fdset2 as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1124.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  (void) vfprintf(f, fmt, ap);\n  va_end(ap);\n  (void) fprintf(f, \"\\n\");\n  (void) fclose(f);\n}\n\nstatic enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  /* Log entry and key daemon state */\n  /* Removed reference to daemon->urh_tail which is only present when\n     HTTPS_SUPPORT && UPGRADE_SUPPORT are enabled. Keep the rest of the\n     diagnostic information. */\n  mhd_probe_log(\"internal_get_fdset2 ENTER daemon=%p shutdown=%d listen_fd=%ld connections=%u connection_limit=%u at_limit=%d\",\n                (void *) daemon,\n                (int) daemon->shutdown,\n                (long) daemon->listen_fd,\n                (unsigned) daemon->connections,\n                (unsigned) daemon->connection_limit,\n                (int) daemon->at_limit);\n\n  if (daemon->shutdown)\n    return MHD_YES;\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    if (! itc_added)\n      result = MHD_NO;\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    if (MHD_add_to_fd_set_ (ls,\n                            read_fd_set,\n                            max_fd,\n                            fd_setsize))\n      ls = MHD_INVALID_SOCKET;   /* Already added */\n    else\n      result = MHD_NO;\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    posn = pos->prev;\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                write_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n      if ( (NULL == except_fd_set) ||\n           ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                 except_fd_set,\n                                 max_fd,\n                                 fd_setsize))\n        result = MHD_NO;\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    struct MHD_UpgradeResponseHandle *urh;\n\n    /* Log the fact that we are about to enter the upgrade-response loop and\n       capture the tail pointer. This loop's third clause uses 'urh = urh->prev',\n       which is the subject of the reported MISRA 14.2 concern. */\n    mhd_probe_log(\"URH loop START urh_tail=%p (third clause: urh = urh->prev)\", (void *) daemon->urh_tail);\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      /* Log the current urh and the value of urh->prev as observed before\n         calling urh_to_fdset. Reading urh->prev here is the conservative and\n         safe action (performed before the body call). We avoid dereferencing\n         urh after calling urh_to_fdset to reduce the risk of use-after-free\n         if that function frees the object. */\n      mhd_probe_log(\"URH ITER: urh=%p urh->prev(before call)=%p\",\n                    (void *) urh,\n                    (void *) urh->prev);\n\n      enum MHD_Result urh_ret = urh_to_fdset (urh,\n                                              read_fd_set,\n                                              write_fd_set,\n                                              except_fd_set,\n                                              max_fd,\n                                              fd_setsize);\n\n      if (MHD_NO == urh_ret)\n        result = MHD_NO;\n\n      /* Log return from urh_to_fdset. Do NOT dereference 'urh' here since\n         urh_to_fdset may free or modify 'urh' (this is precisely the\n         behaviour that could lead to the MISRA 14.2 violation). Logging the\n         pointer value and the function return gives evidence of the call and\n         the state seen before the call. */\n      mhd_probe_log(\"URH ITER RETURN: urh=%p urh_to_fdset_return=%d\",\n                    (void *) urh,\n                    (int) urh_ret);\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n\n  mhd_probe_log(\"internal_get_fdset2 LEAVE daemon=%p result=%d\",\n                (void *) daemon, (int) result);\n\n  return result;\n}\n",
  "explanation": "The build failed because the initial diagnostic log referenced daemon->urh_tail unconditionally, but that member only exists when HTTPS_SUPPORT and UPGRADE_SUPPORT are enabled. I removed the urh_tail placeholder and its argument from the unconditional mhd_probe_log call so the code no longer references a potentially absent member. All other uses of daemon->urh_tail remain inside the #if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT) block, preserving original logic when those features are enabled."
}