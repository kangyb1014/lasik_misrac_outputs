{
  "user_message": "An agent A claimed that the following internal_get_fdset2 code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of internal_get_fdset2.\n```c\nstatic enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (daemon->shutdown)\n    return MHD_YES;\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    if (! itc_added)\n      result = MHD_NO;\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    if (MHD_add_to_fd_set_ (ls,\n                            read_fd_set,\n                            max_fd,\n                            fd_setsize))\n      ls = MHD_INVALID_SOCKET;   /* Already added */\n    else\n      result = MHD_NO;\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    posn = pos->prev;\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                write_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n      if ( (NULL == except_fd_set) ||\n           ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                 except_fd_set,\n                                 max_fd,\n                                 fd_setsize))\n        result = MHD_NO;\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    struct MHD_UpgradeResponseHandle *urh;\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      if (MHD_NO ==\n          urh_to_fdset (urh,\n                        read_fd_set,\n                        write_fd_set,\n                        except_fd_set,\n                        max_fd,\n                        fd_setsize))\n        result = MHD_NO;\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  return result;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe loop\u2019s third clause evaluates urh = urh->prev which reads the current node\u2019s prev field, while the loop body calls urh_to_fdset(urh, ...). MISRA Rule 14.2 requires the third clause to only modify the loop counter and not use objects that are (or may be) modified in the loop body. Because the body calls a function that could modify or free the current node (for example: urh_to_fdset could remove the node from the list, update its prev pointer, or free it), the third clause would then be using an object altered by the loop body, violating clause 3. If and only if it can be proven that urh_to_fdset does not modify urh or any of its fields (including prev), the loop would be compliant; absent that proof, this is a violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 connections=0 connection_limit=1019 at_limit=0\ninternal_get_fdset2 LEAVE daemon=0x560d482c3de0 result=1\ninternal_get_fdset2 ENTER daemon=0x560d482c3de0 shutdown=0 listen_fd=3 \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C:2023 Rule 14.2 requires that the third clause of a for loop may only modify the loop counter and shall not use objects that are (or may be) modified by the loop body (including via called functions). In the urh loop the third clause is urh = urh->prev which reads urh->prev. The loop body calls urh_to_fdset(urh,...). Unless it can be proven (by inspection, documentation, or analysis) that urh_to_fdset cannot modify or free the urh object or any of its fields (notably prev), the code is non\u2011compliant: the third clause uses an object that the body might modify. The code elsewhere avoids this by saving posn = pos->prev before invoking functions; the urh loop does not, so without explicit proof of non\u2011modification this is a violation. Remediation: compute next (prev) into a separate variable before calling urh_to_fdset, or provide a guaranteed proof (and suitable annotation) that urh_to_fdset does not alter urh or urh->prev."
}