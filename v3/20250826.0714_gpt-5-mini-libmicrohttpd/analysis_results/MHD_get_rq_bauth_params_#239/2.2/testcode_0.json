{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is implemented as a debug-only/no-op macro (e.g. defined to ((void)0) or compiled out in release builds), then the statement has no effect at runtime and its removal would not change program behaviour. In that configuration the assertion call is dead code and therefore violates MISRA C 2023 Rule 2.2. If, however, mhd_assert performs a runtime check that can abort/log or otherwise alter behaviour when the condition fails, then the statement is not dead code and no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_rq_bauth_params_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2392.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_rq_bauth_params_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_rq_bauth_params_:\n```c\nconst struct MHD_RqBAuth *\nMHD_get_rq_bauth_params_ (struct MHD_Connection *connection)\n{\n  struct _MHD_str_w_len h_auth_value;\n  struct MHD_RqBAuth *bauth;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n\n  if (connection->rq.bauth_tried)\n    return connection->rq.bauth;\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > connection->state)\n    return NULL;\n\n  if (! find_auth_rq_header_ (connection, MHD_AUTHTYPE_BASIC, &h_auth_value))\n  {\n    connection->rq.bauth_tried = true;\n    connection->rq.bauth = NULL;\n    return NULL;\n  }\n\n  bauth =\n    (struct MHD_RqBAuth *)\n    MHD_connection_alloc_memory_ (connection, sizeof (struct MHD_RqBAuth));\n\n  if (NULL == bauth)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection's pool to allocate \" \\\n                 \"for Basic Authorization header parsing.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return NULL;\n  }\n\n  memset (bauth, 0, sizeof(struct MHD_RqBAuth));\n  if (parse_bauth_params (h_auth_value.str, h_auth_value.len, bauth))\n    connection->rq.bauth = bauth;\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The Basic Authorization client's header has \"\n                 \"incorrect format.\\n\"));\n#endif /* HAVE_MESSAGES */\n    connection->rq.bauth = NULL;\n    /* Memory in the pool remains allocated until next request */\n  }\n  connection->rq.bauth_tried = true;\n  return connection->rq.bauth;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_rq_bauth_params_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a single line to the log file. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2392.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nconst struct MHD_RqBAuth *\nMHD_get_rq_bauth_params_ (struct MHD_Connection *connection)\n{\n  struct _MHD_str_w_len h_auth_value;\n  struct MHD_RqBAuth *bauth;\n\n  /* Log entry and state prior to the assert so we can observe if the\n     assertion acted (for example, if it aborts on false) or was a no-op. */\n  if (NULL == connection)\n  {\n    mhd_probe_log(\"MHD_get_rq_bauth_params_: entry with connection=NULL\");\n  }\n  else\n  {\n    /* Log the most relevant fields used by this function. */\n    /* We avoid changing program logic: just evaluating these values for the log. */\n    mhd_probe_log(\"MHD_get_rq_bauth_params_: entry connection=%p state=%d rq.bauth_tried=%d rq.bauth=%p\",\n                  (void *)connection,\n                  (int)connection->state,\n                  (int)connection->rq.bauth_tried,\n                  (void *)connection->rq.bauth);\n  }\n\n  /* Evaluate the asserted condition and log its value. This helps detect the\n     violation scenario: if the condition is false but execution continues,\n     the assertion was effectively a no-op at runtime. */\n  int __mhd_assert_cond = 0;\n  if (NULL != connection)\n    __mhd_assert_cond = (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state) ? 1 : 0;\n  mhd_probe_log(\"MHD_get_rq_bauth_params_: asserted condition (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state) evaluated to %d\",\n                __mhd_assert_cond);\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n\n  /* Log that execution reached just after the assert line. If the asserted\n     condition was false and we still reach here, that is evidence the\n     assertion did not abort the program (possible debug-only/no-op). */\n  mhd_probe_log(\"MHD_get_rq_bauth_params_: reached after mhd_assert; condition=%d\",\n                __mhd_assert_cond);\n  if (0 == __mhd_assert_cond)\n  {\n    mhd_probe_log(\"MHD_get_rq_bauth_params_: ASSERT CONDITION WAS FALSE at runtime but execution continued -> possible no-op assertion macro/compile-out\");\n  }\n\n  if (connection->rq.bauth_tried)\n  {\n    mhd_probe_log(\"MHD_get_rq_bauth_params_: early return: rq.bauth_tried == true, returning %p\",\n                  (void *)connection->rq.bauth);\n    return connection->rq.bauth;\n  }\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > connection->state)\n  {\n    mhd_probe_log(\"MHD_get_rq_bauth_params_: headers not processed (state=%d < MHD_CONNECTION_HEADERS_PROCESSED), returning NULL\",\n                  (int)connection->state);\n    return NULL;\n  }\n\n  if (! find_auth_rq_header_ (connection, MHD_AUTHTYPE_BASIC, &h_auth_value))\n  {\n    connection->rq.bauth_tried = true;\n    connection->rq.bauth = NULL;\n    mhd_probe_log(\"MHD_get_rq_bauth_params_: find_auth_rq_header_ returned false; marked bauth_tried=true; returning NULL\");\n    return NULL;\n  }\n\n  /* Log the header value we found (length only to avoid binary/large data in log). */\n  mhd_probe_log(\"MHD_get_rq_bauth_params_: find_auth_rq_header_ succeeded; header_len=%ld\",\n                (long) h_auth_value.len);\n\n  bauth =\n    (struct MHD_RqBAuth *)\n    MHD_connection_alloc_memory_ (connection, sizeof (struct MHD_RqBAuth));\n\n  mhd_probe_log(\"MHD_get_rq_bauth_params_: allocation requested size=%zu returned=%p\",\n                sizeof (struct MHD_RqBAuth), (void *)bauth);\n\n  if (NULL == bauth)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection's pool to allocate \" \\\n                 \"for Basic Authorization header parsing.\\n\"));\n#endif /* HAVE_MESSAGES */\n    mhd_probe_log(\"MHD_get_rq_bauth_params_: allocation failed, returning NULL\");\n    return NULL;\n  }\n\n  memset (bauth, 0, sizeof(struct MHD_RqBAuth));\n  if (parse_bauth_params (h_auth_value.str, h_auth_value.len, bauth))\n  {\n    connection->rq.bauth = bauth;\n    mhd_probe_log(\"MHD_get_rq_bauth_params_: parse_bauth_params succeeded; connection->rq.bauth set to %p\",\n                  (void *)connection->rq.bauth);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The Basic Authorization client's header has \"\n                 \"incorrect format.\\n\"));\n#endif /* HAVE_MESSAGES */\n    connection->rq.bauth = NULL;\n    /* Memory in the pool remains allocated until next request */\n    mhd_probe_log(\"MHD_get_rq_bauth_params_: parse_bauth_params FAILED; connection->rq.bauth set to NULL (pool memory retained)\");\n  }\n  connection->rq.bauth_tried = true;\n  mhd_probe_log(\"MHD_get_rq_bauth_params_: exit returning %p (bauth_tried set to true)\", (void *)connection->rq.bauth);\n  return connection->rq.bauth;\n}\n"
}