{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of handle_req_cookie_no_space:\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_COOKIE,\n                                           NULL,\n                                           0);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n{\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function parameter 'struct MHD_Connection *c' is not const-qualified. If handle_req_cookie_no_space does not modify the pointed-to MHD_Connection (and/or the downstream functions it calls accept a const pointer), then the pointer should be declared as 'const struct MHD_Connection *c'. In that case Rule 8.13 is violated. Example specific violation: handle_req_cookie_no_space only calls get_no_space_err_status_code(c, ...) and transmit_error_response_static(c, ...), and if neither call (nor the function itself) mutates *c, then the parameter should be const-qualified but is not."
}