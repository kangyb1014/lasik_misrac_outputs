{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'daemon' is declared as a non-const pointer (struct MHD_Daemon *daemon) although the function body only reads it and simply forwards it to get_timeout_millisec_. If get_timeout_millisec_int does not modify the pointed-to object (and the callee either accepts a const pointer or also does not modify it), the parameter should be declared as const struct MHD_Daemon *daemon to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_timeout_millisec_int code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_timeout_millisec_int as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_timeout_millisec_int:\n```c\nstatic int\nget_timeout_millisec_int (struct MHD_Daemon *daemon,\n                          int32_t max_timeout)\n{\n  int64_t res;\n\n  res = get_timeout_millisec_ (daemon, max_timeout);\n#if SIZEOF_INT < SIZEOF_INT64_T\n  if (INT_MAX <= res)\n    return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n  return (int) res;\n}\n```\n</target_code>\nPlease provide the modified get_timeout_millisec_int code.\n",
  "test_code": "static int\nget_timeout_millisec_int (struct MHD_Daemon *daemon,\n                          int32_t max_timeout)\n{\n  int64_t res;\n\n  /* Probe: log entry and input state */\n  {\n    FILE *fp = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (fp != NULL)\n    {\n      /* Print pointer value and max_timeout */\n      fprintf(fp, \"ENTER get_timeout_millisec_int: daemon=%p, max_timeout=%d\\n\", (void *) daemon, (int) max_timeout);\n      fclose(fp);\n    }\n  }\n\n  res = get_timeout_millisec_ (daemon, max_timeout);\n\n  /* Probe: log result from get_timeout_millisec_ */\n  {\n    FILE *fp = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (fp != NULL)\n    {\n      fprintf(fp, \"CALL get_timeout_millisec_ returned res=%lld\\n\", (long long) res);\n      fclose(fp);\n    }\n  }\n\n#if SIZEOF_INT < SIZEOF_INT64_T\n  if (INT_MAX <= res)\n  {\n    /* Probe: branch taken due to overflow truncation */\n    FILE *fp = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (fp != NULL)\n    {\n      fprintf(fp, \"BRANCH: res >= INT_MAX (%d). Returning INT_MAX=%d\\n\", INT_MAX, INT_MAX);\n      fclose(fp);\n    }\n    return INT_MAX;\n  }\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n\n  /* Probe: normal return path */\n  {\n    int ret = (int) res;\n    FILE *fp = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (fp != NULL)\n    {\n      fprintf(fp, \"RETURN: (int)res = %d\\n\", ret);\n      fclose(fp);\n    }\n    return ret;\n  }\n}\n"
}