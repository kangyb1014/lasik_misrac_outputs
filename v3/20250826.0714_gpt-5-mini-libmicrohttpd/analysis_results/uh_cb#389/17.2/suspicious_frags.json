{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of uh_cb:\n```c\nstatic void\nuh_cb (void *cls, struct MHD_Connection *con, void *req_cls,\n       const char *extra_in, size_t extra_in_size, MHD_socket sock,\n       struct MHD_UpgradeResponseHandle *urh)\n{\n  struct WsData *ws;\n  pthread_t pt;\n  int sock_overflow;\n  int i;\n\n  (void) cls;            /* Unused. Silent compiler warning. */\n  (void) con;            /* Unused. Silent compiler warning. */\n  (void) req_cls;        /* Unused. Silent compiler warning. */\n  (void) extra_in;       /* Unused. Silent compiler warning. */\n  (void) extra_in_size;  /* Unused. Silent compiler warning. */\n\n  ws = malloc (sizeof (struct WsData));\n  if (NULL == ws)\n    abort ();\n  memset (ws, 0, sizeof (struct WsData));\n  ws->sock = sock;\n  ws->urh = urh;\n  sock_overflow = MHD_YES;\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (MHD_INVALID_SOCKET == CLIENT_SOCKS[i])\n    {\n      CLIENT_SOCKS[i] = ws->sock;\n      sock_overflow = MHD_NO;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  if (sock_overflow)\n  {\n    free (ws);\n    MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n    return;\n  }\n  if (0 != pthread_create (&pt, NULL, &run_usock, ws))\n    abort ();\n  /* Note that by detaching like this we make it impossible to ensure\n     a clean shutdown, as the we stop the daemon even if a worker thread\n     is still running. Alas, this is a simple example... */\n  pthread_detach (pt);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "ws->urh = urh;",
    "MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);",
    "if (0 != pthread_create (&pt, NULL, &run_usock, ws))\n    abort ();",
    "CLIENT_SOCKS[i] = ws->sock;",
    "ws->sock = sock;"
  ],
  "explanation": "MISRA Rule 17.2 (no direct or indirect self-calls) requires inspection of any code that can cause callbacks or start execution contexts that might re-enter this callback. I selected fragments that either store the upgrade-response handle/socket (ws->urh, ws->sock), register the socket in the global CLIENT_SOCKS array, invoke the library upgrade action, or spawn a new thread to run run_usock. These sites are the likely points where indirect recursion could originate (e.g., run_usock or MHD library actions could invoke uh_cb again). Other fragments in the function do not need investigation for indirect recursion: malloc, memset, free and abort are standard memory/runtime functions that do not call user callbacks; pthread_mutex_lock/unlock and pthread_detach are thread-/synchronization primitives that do not themselves invoke user callbacks; the loop structure and the unused-parameter casts are simple data handling or compile-time fixes and do not perform callback invocations. Thus the listed fragments cover the places that could lead to direct or indirect calls to uh_cb; the remaining code is not suspicious for Rule 17.2."
}