{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_version:\n```c\n_MHD_EXTERN const char *\nMHD_get_version (void)\n{\n#ifdef PACKAGE_VERSION\n  return PACKAGE_VERSION;\n#else  /* !PACKAGE_VERSION */\n  static char ver[12] = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n  if (0 == ver[0])\n  {\n    int res = MHD_snprintf_ (ver,\n                             sizeof(ver),\n                             \"%x.%x.%x\",\n                             (int) (((uint32_t) MHD_VERSION >> 24) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 16) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 8) & 0xFF));\n    if ((0 >= res) || (sizeof(ver) <= res))\n      return \"0.0.0\"; /* Can't return real version */\n  }\n  return ver;\n#endif /* !PACKAGE_VERSION */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No uses of the Standard Library string-handling functions from <string.h> (memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn, etc.) are present in this function. The only string operation is a call to MHD_snprintf_, which is not a <string.h> function (it is a formatting routine) and the code checks its return value to avoid buffer overflow ((0 >= res) || (sizeof(ver) <= res)) before using the buffer. The static initializer for ver uses a string literal whose length (11 explicit '\\0' characters plus the implicit terminating NUL) matches the array size 12, so there is no out-of-bounds write at initialization. The code only reads ver[0] (in-bounds) and returns either ver or a string literal (both valid). Therefore there are no fragments in this function that need investigation for MISRA C 2023 Rule 21.17."
}