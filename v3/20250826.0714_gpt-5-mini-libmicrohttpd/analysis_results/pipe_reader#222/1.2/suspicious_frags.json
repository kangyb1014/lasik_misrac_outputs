{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of pipe_reader:\n```c\nstatic ssize_t\npipe_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n  ssize_t n;\n\n  (void) pos;\n\n#ifndef _WIN32\n  if (SSIZE_MAX < max)\n    max = SSIZE_MAX;\n  n = read (response->fd,\n            buf,\n            (MHD_SCKT_SEND_SIZE_) max);\n#else  /* _WIN32 */\n  if (UINT_MAX < max)\n    max = INT_MAX;\n  n = read (response->fd,\n            buf,\n            (unsigned int) max);\n#endif /* _WIN32 */\n\n  if (0 == n)\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  if (n < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return n;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I did not find any uses of compiler language extensions (such as __attribute__, __typeof__, statement-expressions, inline-asm, __builtin_... intrinsics, nonstandard keywords, or other compiler-specific syntax) in the provided fragment. Specific items checked and why they are not reported: \n\n- ssize_t, uint64_t, size_t: these are typedefs from POSIX/stdint.h/standard headers (ssize_t is POSIX). They are not compiler language extensions per se. The rule requires reporting explicit compiler language extensions documented as such by the compiler. \n\n- The cast constructions, e.g. (MHD_SCKT_SEND_SIZE_) max and (unsigned int) max, are standard C casts. The identifier MHD_SCKT_SEND_SIZE_ appears to be a macro or typedef name; that is not a language extension unless it expands to compiler-specific syntax (none shown here). \n\n- Preprocessor conditionals (#ifndef _WIN32 / #else) are standard preprocessor usage, not an extension. \n\n- Calls to read and use of INT_MAX/UINT_MAX are standard POSIX/ISO library usage, not compiler language extensions. \n\n- The explicit discard (void) pos; is standard idiom to silence unused-parameter warnings, not an extension. \n\nNo other constructs (no __asm, no gcc/clang specific attributes/keywords, no nonstandard token pasting, no typeof, no variable-length arrays with nonstandard semantics, etc.) are present. Therefore there are no fragments that meet the criterion of using compiler-documented language extensions to report for investigation."
}