{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf _MHD_UNPOISON_MEMORY expands to a no-op (for example an empty inline function or a macro that generates an executed no-op) then the call is executed but has no effect; removing it would not change program behaviour, so it would be dead code and violate MISRA C 2023 Rule 2.2. (If instead the macro actually performs sanitizer/unpoisoning actions in some builds, or is removed entirely by the preprocessor so no operation is emitted, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_try_alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1392.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_try_alloc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_try_alloc:\n```c\nvoid *\nMHD_pool_try_alloc (struct MemoryPool *pool,\n                    size_t size,\n                    size_t *required_bytes)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n  { /* size is too close to SIZE_MAX, very unlikely */\n    *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    mhd_assert ((pool->end - pool->pos) == \\\n                ROUND_TO_ALIGN (pool->end - pool->pos));\n    if (asize <= pool->end)\n      *required_bytes = asize - (pool->end - pool->pos);\n    else\n      *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  *required_bytes = 0;\n  ret = &pool->memory[pool->end - asize];\n  pool->end -= asize;\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_try_alloc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Forward declaration so this file compiles when included in the original project. */\nstruct MemoryPool;\n\n/* Lightweight logging helper that appends human-readable probe data. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1392.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* The original function logic preserved; probes inserted to observe control flow and state. */\nvoid *\nMHD_pool_try_alloc (struct MemoryPool *pool,\n                    size_t size,\n                    size_t *required_bytes)\n{\n  void *ret;\n  size_t asize;\n\n  /* Log entry state. Accessing members as in the original implementation. */\n  mhd_probe_log(\"ENTRY: pool=%p size=%zu required_bytes_ptr=%p\", (void *)pool, size, (void *)required_bytes);\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n\n  /* Log computed aligned size. */\n  mhd_probe_log(\"ASIZE_COMPUTED: asize=%zu (size=%zu)\", asize, size);\n\n  if ( (0 == asize) && (0 != size) )\n  { /* size is too close to SIZE_MAX, very unlikely */\n    *required_bytes = SIZE_MAX;\n    mhd_probe_log(\"BRANCH: size_too_close_to_SIZE_MAX -> required_bytes=%zu\", *required_bytes);\n    return NULL;\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    mhd_assert ((pool->end - pool->pos) == \\\n                ROUND_TO_ALIGN (pool->end - pool->pos));\n    if (asize <= pool->end)\n      *required_bytes = asize - (pool->end - pool->pos);\n    else\n      *required_bytes = SIZE_MAX;\n\n    /* Log insufficient space branch and computed required bytes. */\n    mhd_probe_log(\"BRANCH: insufficient_space -> pool->end=%zu pool->pos=%zu free=%zu asize=%zu required_bytes=%zu\",\n                  pool->end, pool->pos, (size_t)(pool->end - pool->pos), asize, *required_bytes);\n    return NULL;\n  }\n  *required_bytes = 0;\n  ret = &pool->memory[pool->end - asize];\n  pool->end -= asize;\n\n  /* Log allocation result before unpoison call. */\n  mhd_probe_log(\"ALLOCATED: ret=%p asize=%zu size=%zu new_pool_end=%zu required_bytes=%zu\",\n                ret, asize, size, pool->end, *required_bytes);\n\n  /* Probe point around _MHD_UNPOISON_MEMORY to capture whether the call executes. */\n  mhd_probe_log(\"BEFORE_UNPOISON: calling _MHD_UNPOISON_MEMORY(ret=%p, size=%zu)\", ret, size);\n  _MHD_UNPOISON_MEMORY (ret, size);\n  /* Immediately log after the call; if the macro expands to a no-op there will still be evidence\n     of the call having been executed (i.e. these log lines will show up). */\n  mhd_probe_log(\"AFTER_UNPOISON: returned from _MHD_UNPOISON_MEMORY(ret=%p, size=%zu)\", ret, size);\n\n  return ret;\n}\n"
}