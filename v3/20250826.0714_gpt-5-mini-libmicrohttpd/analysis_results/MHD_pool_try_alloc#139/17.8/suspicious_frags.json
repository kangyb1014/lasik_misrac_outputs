{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_try_alloc:\n```c\nvoid *\nMHD_pool_try_alloc (struct MemoryPool *pool,\n                    size_t size,\n                    size_t *required_bytes)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n  { /* size is too close to SIZE_MAX, very unlikely */\n    *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    mhd_assert ((pool->end - pool->pos) == \\\n                ROUND_TO_ALIGN (pool->end - pool->pos));\n    if (asize <= pool->end)\n      *required_bytes = asize - (pool->end - pool->pos);\n    else\n      *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  *required_bytes = 0;\n  ret = &pool->memory[pool->end - asize];\n  pool->end -= asize;\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment modifies a function parameter itself. The function parameters are: (struct MemoryPool *pool), (size_t size), and (size_t *required_bytes). The code only modifies objects referenced through pointer parameters (allowed by Rule 17.8):\n- Assignments to *required_bytes (e.g. \"*required_bytes = SIZE_MAX;\", \"*required_bytes = asize - (pool->end - pool->pos);\", \"*required_bytes = 0;\") modify the object pointed to by required_bytes, not the pointer variable required_bytes itself.\n- The statement \"pool->end -= asize;\" modifies a member of the object pointed to by pool, not the pool pointer variable.\n- Local variables (ret, asize) are assigned but are not function parameters.\n- Expressions that take addresses (ret = &pool->memory[...]) compute values but do not reassign any parameter variable.\nThe mhd_assert, ROUND_TO_ALIGN*, and _MHD_UNPOISON_MEMORY macro calls appear only to read or operate on objects and do not reassign the parameter variables themselves; therefore there is no violation of Rule 17.8 in the shown code. If any of those macros expand to code that reassigns a function parameter variable, that macro definition would need separate review, but within the presented function body no parameter is modified."
}