{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf ROUND_TO_ALIGN_PLUS_RED_ZONE(size) yields asize == 0 (e.g. size == 0) and pool->end equals the buffer length (pool->size), the expression yields &pool->memory[pool->size] \u2014 a pointer one past the last element of the array. Passing that pointer to string.h functions that read or write bytes (for example strcpy, memcpy, memset, strlen, etc.) with a non\u2011zero length will access beyond the object bounds and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_try_alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_try_alloc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_try_alloc:\n```c\nvoid *\nMHD_pool_try_alloc (struct MemoryPool *pool,\n                    size_t size,\n                    size_t *required_bytes)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n  { /* size is too close to SIZE_MAX, very unlikely */\n    *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    mhd_assert ((pool->end - pool->pos) == \\\n                ROUND_TO_ALIGN (pool->end - pool->pos));\n    if (asize <= pool->end)\n      *required_bytes = asize - (pool->end - pool->pos);\n    else\n      *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  *required_bytes = 0;\n  ret = &pool->memory[pool->end - asize];\n  pool->end -= asize;\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_try_alloc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\nstatic void\nmhd_probe_log_pool_state (const struct MemoryPool *pool,\n                          size_t size,\n                          size_t asize,\n                          const void *ret,\n                          size_t required_bytes_value,\n                          const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/1399.txt\", \"a\");\n  if (!f)\n  {\n    /* try to create directory and retry once */\n    (void) mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/1399.txt\", \"a\");\n  }\n  if (!f)\n    return;\n\n  /* Log the key pool fields and computed values. Use numeric address for ret. */\n  fprintf (f,\n           \"[MHD_POOL] stage=%s pool=%p pos=%zu end=%zu size=%zu req_size=%zu asize=%zu required_bytes=%zu ret=%p ret_addr=%\" PRIuPTR \"\\n\",\n           stage,\n           (const void *) pool,\n           (size_t) pool->pos,\n           (size_t) pool->end,\n           (size_t) pool->size,\n           (size_t) size,\n           (size_t) asize,\n           required_bytes_value,\n           ret,\n           (uintptr_t) ret);\n  fclose (f);\n}\n\nvoid *\nMHD_pool_try_alloc (struct MemoryPool *pool,\n                    size_t size,\n                    size_t *required_bytes)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  /* Log entry state (required_bytes unknown at this point) */\n  mhd_probe_log_pool_state (pool, size, (size_t) -1, NULL, (size_t) -1, \"entry\");\n\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n\n  /* Log after asize computed */\n  mhd_probe_log_pool_state (pool, size, asize, NULL, (size_t) -1, \"after_asize\");\n\n  if ( (0 == asize) && (0 != size) )\n  { /* size is too close to SIZE_MAX, very unlikely */\n    *required_bytes = SIZE_MAX;\n    /* Log the special overflow case and the assigned required_bytes */\n    mhd_probe_log_pool_state (pool, size, asize, NULL, *required_bytes, \"size_too_close_to_SIZE_MAX\");\n    return NULL;\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    mhd_assert ((pool->end - pool->pos) == \\\n                ROUND_TO_ALIGN (pool->end - pool->pos));\n    if (asize <= pool->end)\n      *required_bytes = asize - (pool->end - pool->pos);\n    else\n      *required_bytes = SIZE_MAX;\n    /* Log not enough space case and assigned required_bytes */\n    mhd_probe_log_pool_state (pool, size, asize, NULL, *required_bytes, \"not_enough_space\");\n    return NULL;\n  }\n  *required_bytes = 0;\n\n  /* Compute the return pointer and log index and whether it points one past buffer */\n  {\n    size_t idx = pool->end - asize;\n    ret = &pool->memory[idx];\n    /* Log before modifying pool->end: include index so we can detect idx == pool->size */\n    mhd_probe_log_pool_state (pool, size, asize, ret, *required_bytes, \"before_decrement_end\");\n    if (idx == pool->size)\n    {\n      /* Explicitly log the dangerous condition where ret points one past the buffer */\n      mhd_probe_log_pool_state (pool, size, asize, ret, *required_bytes, \"ret_points_one_past_buffer\");\n    }\n  }\n\n  pool->end -= asize;\n\n  /* Log after decrementing end */\n  mhd_probe_log_pool_state (pool, size, asize, ret, *required_bytes, \"after_decrement_end\");\n\n  _MHD_UNPOISON_MEMORY (ret, size);\n\n  /* Final state before return */\n  mhd_probe_log_pool_state (pool, size, asize, ret, *required_bytes, \"returning_success\");\n\n  return ret;\n}\n"
}