{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_queue_response (connection, MHD_HTTP_OK, response);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown fragment: ahc_echo calls MHD_queue_response, which is a distinct function. There is no evidence here that MHD_queue_response calls ahc_echo (directly or indirectly). A specific violation scenario would be if the library implementation of MHD_queue_response internally invoked the registered request handler (e.g. MHD_queue_response -> internal_dispatch -> invoke_registered_handler -> ahc_echo), creating an indirect recursive call chain; that would violate Rule 17.2."
}