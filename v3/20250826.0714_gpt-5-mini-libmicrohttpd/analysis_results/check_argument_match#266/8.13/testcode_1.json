{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'args' in check_argument_match is declared as 'char *args' but is only forwarded to MHD_parse_arguments_ and never modified in this function. Per MISRA C 2023 Rule 8.13 it should be declared as 'const char *args' (and the called API should take a const pointer if it does not modify the buffer). '&param' is passed as a non-const pointer appropriately because the callee updates param, and '&test_header' is a callback pointer (its const-qualification depends on the callback prototype). The clear violation here is the non-const 'args' that could and should be const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_argument_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_argument_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe/log helper functions for debugging. These are static to avoid\n   symbol export and to keep behavior local to this compilation unit. */\nstatic void\nlog_open_append (FILE **out)\n{\n  *out = fopen(\"/tmp/logs/2663.txt\", \"a\");\n}\n\nstatic void\nlog_time_stamp (FILE *out)\n{\n  if (out == NULL)\n    return;\n  time_t t = time(NULL);\n  struct tm tm_buf;\n  if (NULL != localtime_r(&t, &tm_buf))\n  {\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n    {\n      fprintf(out, \"%s - \", timestr);\n    }\n  }\n}\n\nstatic void\nlog_args_preview (FILE *out, const char *label, const char *args)\n{\n  if (out == NULL)\n    return;\n  if (args == NULL)\n  {\n    fprintf(out, \"%s: args = (NULL)\\n\", label);\n    return;\n  }\n  /* Print up to 64 bytes as hex and as a printable prefix (safely). */\n  size_t max = 64;\n  size_t i;\n  fprintf(out, \"%s: args ptr=%p\\n\", label, (const void *)args);\n  fprintf(out, \"%s: args (hex, up to %zu bytes):\", label, max);\n  for (i = 0; i < max && args[i] != '\\0'; ++i)\n  {\n    fprintf(out, \" %02x\", (unsigned char)args[i]);\n  }\n  if (i == max)\n    fprintf(out, \" ...\");\n  fprintf(out, \"\\n\");\n  /* Also print a short printable prefix (escaped) */\n  fprintf(out, \"%s: args (printable prefix): \\\"\", label);\n  for (i = 0; i < max && args[i] != '\\0'; ++i)\n  {\n    unsigned char c = (unsigned char)args[i];\n    if (c >= 32 && c < 127)\n      fputc(c, out);\n    else\n      fprintf(out, \"\\\\x%02x\", c);\n  }\n  if (i == max)\n    fprintf(out, \"...\");\n  fprintf(out, \"\\\"\\n\");\n}\n\n/* Log entry into check_argument_match, before calling parser */\nstatic void\nlog_pre_parse (struct MHD_Connection *connection, char *args, const struct test_header_param *param)\n{\n  FILE *out = NULL;\n  log_open_append(&out);\n  if (out == NULL)\n    return;\n  log_time_stamp(out);\n  fprintf(out, \"ENTER check_argument_match: connection=%p\\n\", (void *)connection);\n  if (param != NULL)\n    fprintf(out, \"ENTER check_argument_match: initial param.num_headers=%d\\n\", param->num_headers);\n  log_args_preview(out, \"ENTER check_argument_match\", args);\n  fclose(out);\n}\n\n/* Log result of parse and param state after parse */\nstatic void\nlog_post_parse (struct MHD_Connection *connection, char *args, const struct test_header_param *param, enum MHD_Result ret)\n{\n  FILE *out = NULL;\n  log_open_append(&out);\n  if (out == NULL)\n    return;\n  log_time_stamp(out);\n  fprintf(out, \"AFTER MHD_parse_arguments_: connection=%p ret=%d\\n\", (void *)connection, (int)ret);\n  if (param != NULL)\n    fprintf(out, \"AFTER MHD_parse_arguments_: param.num_headers=%d\\n\", param->num_headers);\n  log_args_preview(out, \"AFTER MHD_parse_arguments_\", args);\n  fclose(out);\n}\n\n/* Log each header visited in the header-check loop */\nstatic void\nlog_header_iteration (struct MHD_HTTP_Req_Header *pos)\n{\n  FILE *out = NULL;\n  log_open_append(&out);\n  if (out == NULL)\n    return;\n  log_time_stamp(out);\n  if (pos == NULL)\n  {\n    fprintf(out, \"header iteration: pos = (NULL)\\n\");\n  }\n  else\n  {\n    /* We only access the fields that the original function accesses. */\n    fprintf(out, \"header iteration: pos=%p kind=%d next=%p\\n\", (void *)pos, (int)pos->kind, (void *)pos->next);\n  }\n  fclose(out);\n}\n\n/* Modified function with probes inserted. Logic otherwise preserved. */\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n\n  /* Log state before calling parser */\n  log_pre_parse(connection, args, &param);\n\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n\n  /* Log state immediately after parser returns */\n  log_post_parse(connection, args, &param, ret);\n\n  if (MHD_NO == ret)\n  {\n    FILE *out = NULL;\n    log_open_append(&out);\n    if (out != NULL)\n    {\n      log_time_stamp(out);\n      fprintf(out, \"check_argument_match: parse returned MHD_NO -> returning false\\n\");\n      fclose(out);\n    }\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log each iteration so callers can see what headers were examined */\n    log_header_iteration(pos);\n\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    FILE *out = NULL;\n    log_open_append(&out);\n    if (out != NULL)\n    {\n      log_time_stamp(out);\n      fprintf(out, \"check_argument_match: header count mismatch, final param.num_headers=%d -> returning false\\n\", param.num_headers);\n      fclose(out);\n    }\n    return false;\n  }\n\n  FILE *out = NULL;\n  log_open_append(&out);\n  if (out != NULL)\n  {\n    log_time_stamp(out);\n    fprintf(out, \"check_argument_match: success -> returning true\\n\");\n    fclose(out);\n  }\n\n  return true;\n}\n"
}