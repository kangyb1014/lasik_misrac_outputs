{
  "user_message": "An agent A claimed that the following check_argument_match code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of check_argument_match.\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct MHD_Connection *connection' is not const-qualified even though the function only reads from the connection (accesses connection->rq.headers_received and passes it to MHD_parse_arguments_). If neither check_argument_match nor the callbacks it supplies modify the connection object and the called API (MHD_parse_arguments_) accepts a pointer-to-const, then this should be declared as 'const struct MHD_Connection *connection'. Therefore, unless the non-const type is required by the called APIs, this is a violation of MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough information to conclude the reported violation. MISRA C:2023 R8.13 does say a pointer parameter should be const-qualified when possible, but the snippet alone does not prove this is possible. The pointer is (a) assigned into param.connection and (b) passed to MHD_parse_arguments_. If either the field param.connection or the API MHD_parse_arguments_ (or any callbacks supplied to it) require a non-const pointer (i.e. their declarations use struct MHD_Connection *), or if those callbacks may modify the object, then changing the parameter to const would be incorrect or would force unsafe casts. To determine whether there is a real R8.13 violation you must inspect: (1) the declaration/type of test_header_param.connection, (2) the prototype of MHD_parse_arguments_ and any callback prototypes used, and (3) whether any of those functions/callbacks may modify the connection. Only if all of those accept/expect const (and no modification occurs) is the parameter missing a const qualifier and thus a violation. Given only the provided code, the agent A's claim cannot be confirmed, so the report is not correct as stated."
}