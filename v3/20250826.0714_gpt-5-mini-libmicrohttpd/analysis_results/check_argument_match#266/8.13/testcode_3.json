{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct MHD_Connection *connection' is not const-qualified even though the function only reads from the connection (accesses connection->rq.headers_received and passes it to MHD_parse_arguments_). If neither check_argument_match nor the callbacks it supplies modify the connection object and the called API (MHD_parse_arguments_) accepts a pointer-to-const, then this should be declared as 'const struct MHD_Connection *connection'. Therefore, unless the non-const type is required by the called APIs, this is a violation of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_argument_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_argument_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe helper: write a formatted log line to /tmp/logs/2663.txt */\nstatic void\nprobe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2663.txt\", \"a\");\n  if (NULL == f)\n  {\n    return; /* best-effort logging; don't affect program flow */\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  probe_log(\"enter check_argument_match: connection=%p args=%p\", (void *)connection, (void *)args);\n\n  param.connection = connection;\n  param.num_headers = 0;\n  probe_log(\"param initialized: connection=%p num_headers=%d\", (void *)param.connection, param.num_headers);\n\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  probe_log(\"MHD_parse_arguments_ returned ret=%d\", (int)ret);\n\n  if (MHD_NO == ret)\n  {\n    probe_log(\"MHD_parse_arguments_ indicated failure (MHD_NO). Returning false.\");\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    probe_log(\"iterating header: pos=%p kind=%d next=%p\", (void *)pos, (int)pos->kind, (void *)pos->next);\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n    probe_log(\"decremented param.num_headers -> %d\", param.num_headers);\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    probe_log(\"argument count mismatch: final param.num_headers=%d. Returning false.\", param.num_headers);\n    return false;\n  }\n  probe_log(\"check_argument_match succeeded. Returning true.\");\n  return true;\n}\n"
}