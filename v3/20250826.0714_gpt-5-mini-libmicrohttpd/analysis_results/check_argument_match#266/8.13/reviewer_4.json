{
  "user_message": "An agent A claimed that the following check_argument_match code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of check_argument_match.\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'pos' is used only for read-only traversal of connection->rq.headers_received (accessing pos->kind and pos->next) and never modifies the pointed-to object. Per MISRA C 2023 Rule 8.13 it should therefore be declared to point to a const-qualified type, e.g. 'const struct MHD_HTTP_Req_Header *pos;'.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\ncheck_argument_match: entry connection=0x7fb694000b70 args=0x7fb69b869f7b\ncheck_argument_match: before parse_arguments param.num_headers=0\ncheck_argument_match: MHD_parse_arguments_ returned 1 param.num_headers=8\ncheck_argument_match: loop pos=0x7fb694008db0 kind=8 next=0x7fb694008d70\ncheck_argument_match: matching pos=0x7fb694008db0 decrementing num_headers (was 8)\ncheck_argument_match: num_headers now 7\ncheck_argument_match: loop pos=0x7fb694008d70 kind=8 next=0x7fb694008d30\ncheck_argument_match: matching pos=0x7fb694008d70 decrementing num_headers (was 7)\ncheck_argument_match: num_headers now 6\ncheck_argument_match: loop pos=0x7fb694008d30 kind=8 next=0x7fb694008cf0\ncheck_argument_match: matching pos=0x7fb694008d30 decrementing num_headers (was 6)\ncheck_argument_match: num_headers now 5\ncheck_argument_match: loop pos=0x7fb694008cf0 kind=8 next=0x7fb694008cb0\ncheck_argument_match: matching pos=0x7fb694008cf0 decrementing num_headers (was 5)\ncheck_argument_match: num_headers now 4\ncheck_argument_match: loop pos=0x7fb694008cb0 kind=8 next=0x7fb694008c70\ncheck_argument_match: matching pos=0x7fb694008cb0 decrementing num_headers (was 4)\ncheck_argument_match: num_headers now 3\ncheck_argument_match: loop pos=0x7fb694008c70 kind=8 next=0x7fb694008c30\ncheck_argument_match: matching pos=0x7fb694008c70 decrementing num_headers (was 3)\ncheck_argument_match: num_headers now 2\ncheck_argument_match: loop pos=0x7fb694008c30 kind=8 next=0x7fb694008bf0\ncheck_argument_match: matching pos=0x7fb694008c30 decrementing num_headers (was 2)\ncheck_argument_match: num_headers now 1\ncheck_argument_match: loop pos=0x7fb694008bf0 kind=8 next=0x7fb694008bb0\ncheck_argument_match: matching pos=0x7fb694008bf0 decrementing num_headers (was 1)\ncheck_argument_match: num_headers now 0\ncheck_argument_match: loop pos=0x7fb694008bb0 kind=1 next=0x7fb694008b70\ncheck_argument_match: skipping pos=0x7fb694008bb0 kind=1\ncheck_argument_match: loop pos=0x7fb694008b70 kind=1 next=0x7fb694008b30\ncheck_argument_match: skipping pos=0x7fb694008b70 kind=1\ncheck_argument_match: loop pos=0x7fb694008b30 kind=1 next=(nil)\ncheck_argument_match: skipping pos=0x7fb694008b30 kind=1\ncheck_argument_match: after loop param.num_headers=0\ncheck_argument_match: all checks passed -> returning true\ncheck_argument_match: entry connection=0x7f219c000b70 args=0x7f21a09e4f7b\ncheck_argument_match: before parse_arguments param.num_headers=0\ncheck_argument_match: MHD_parse_arguments_ returned 1 param.num_headers=1\ncheck_argument_match: loop pos=0x7f219c008db0 kind=8 next=0x7f219c008d70\ncheck_argument_match: matching pos=0x7f219c008db0 decrementing num_headers (was 1)\ncheck_argument_match: num_headers now 0\ncheck_argument_match: loop pos=0x7f219c008d70 kind=1 next=0x7f219c008d30\ncheck_argument_match: skipping pos=0x7f219c008d70 kind=1\ncheck_argument_match: loop pos=0x7f219c008d30 kind=1 next=0x7f219c008cf0\ncheck_argument_match: skipping pos=0x7f219c008d30 kind=1\ncheck_argument_match: loop pos=0x7f219c008cf0 kind=1 next=(nil)\ncheck_argument_match: skipping pos=0x7f219c008cf0 kind=1\ncheck_argument_match: after loop param.num_headers=0\ncheck_argument_match: all checks passed -> returning true\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. The local variable 'pos' is only used to traverse and read fields of the linked list (pos->kind and pos->next) and never used to modify the pointed-to objects. MISRA C 2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible. Declaring\n\n  const struct MHD_HTTP_Req_Header *pos;\n\nis both allowed and appropriate: assigning the non-const connection->rq.headers_received to a pointer-to-const is permitted, and reading pos->kind and pos->next remains valid. No use in the shown function requires pos to be a pointer-to-non-const, so the agent A report is correct."
}