{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'char *args' is not const-qualified even though check_argument_match does not modify the string (it only passes args to MHD_parse_arguments_). According to MISRA C 2023 Rule 8.13, the pointer should be declared const when possible \u2014 e.g. change to 'const char *args'. (If MHD_parse_arguments_ genuinely requires a modifiable buffer, then keeping it non-const would be justified; given the shown code, that justification is not present.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_argument_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_argument_match code.\n",
  "test_code": "#include <stdio.h>\n\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  FILE *log = fopen(\"/tmp/logs/2663.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"check_argument_match ENTRY: connection=%p, args=%p\\n\", (void *)connection, (void *)args);\n    if (args != NULL)\n    {\n      /* Print the argument string for forensic evidence (guarded by NULL check).\") */\n      fprintf(log, \"args string: %s\\n\", args);\n    }\n    else\n    {\n      fprintf(log, \"args is NULL\\n\");\n    }\n  }\n\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n\n  if (log)\n    fprintf(log, \"Before MHD_parse_arguments_: num_headers=%d\\n\", param.num_headers);\n\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n\n  if (log)\n    fprintf(log, \"MHD_parse_arguments_ returned %d, num_headers=%d\\n\", (int)ret, param.num_headers);\n\n  if (MHD_NO == ret)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_parse_arguments_ returned MHD_NO -> returning false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log)\n      fprintf(log, \"loop: pos=%p, pos->kind=%d, pos->next=%p\\n\", (void *)pos, (int)pos->kind, (void *)pos->next);\n\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n\n    param.num_headers--;\n\n    if (log)\n      fprintf(log, \"decremented num_headers -> %d\\n\", param.num_headers);\n  }\n\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    if (log)\n    {\n      fprintf(log, \"argument count mismatch: num_headers=%d -> returning false\\n\", param.num_headers);\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"check_argument_match EXIT: returning true\\n\");\n    fclose(log);\n  }\n\n  return true;\n}\n"
}