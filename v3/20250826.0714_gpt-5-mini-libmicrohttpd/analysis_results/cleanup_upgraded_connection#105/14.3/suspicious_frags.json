{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of cleanup_upgraded_connection:\n```c\nstatic void\ncleanup_upgraded_connection (struct MHD_Connection *connection)\n{\n  struct MHD_UpgradeResponseHandle *urh = connection->urh;\n\n  if (NULL == urh)\n    return;\n#ifdef HTTPS_SUPPORT\n  /* Signal remote client the end of TLS connection by\n   * gracefully closing TLS session. */\n  if (0 != (connection->daemon->options & MHD_USE_TLS))\n    gnutls_bye (connection->tls_session,\n                GNUTLS_SHUT_WR);\n\n  if (MHD_INVALID_SOCKET != urh->mhd.socket)\n    MHD_socket_close_chk_ (urh->mhd.socket);\n\n  if (MHD_INVALID_SOCKET != urh->app.socket)\n    MHD_socket_close_chk_ (urh->app.socket);\n#endif /* HTTPS_SUPPORT */\n  connection->urh = NULL;\n  free (urh);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No suspicious controlling expressions found relevant to MISRA C 2023 Rule 14.3. Reasoning:\n- There are no loop controlling expressions (no for, while, or do-while constructs) in the function, so the common sources of invariant controlling expressions (e.g., do { ... } while (0), infinite loops, constant-condition loops) are not present.\n- The conditional if (NULL == urh) tests a pointer value loaded at run-time (urh) and is not a compile-time invariant.\n- The conditional if (0 != (connection->daemon->options & MHD_USE_TLS)) depends on the run-time value of connection->daemon->options (the macro MHD_USE_TLS is a mask constant but the result of the bitwise-and is run-time), so it is not invariant. The surrounding #ifdef HTTPS_SUPPORT is a preprocessor inclusion guard, not a C controlling expression; code excluded by the preprocessor simply does not exist in the translation unit.\n- The socket checks if (MHD_INVALID_SOCKET != urh->mhd.socket) and if (MHD_INVALID_SOCKET != urh->app.socket) compare a compile-time constant against run-time socket members; these conditions are not invariant because urh->mhd.socket and urh->app.socket are run-time values.\n- Other statements (setting connection->urh = NULL; free(urh); calls to gnutls_bye / MHD_socket_close_chk_) are not controlling expressions and thus outside the scope of Rule 14.3.\n\nTherefore there are no controlling expressions in this function that are statically invariant and needing investigation under Rule 14.3."
}