{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nIf sizeof(off_t) >= sizeof(uint64_t) the subexpression (sizeof(off_t) < sizeof(uint64_t)) is a compile\u2011time constant false, so the whole controlling expression is always false (invariant). In that build the if statement\u2019s controlling expression is invariant and thus violates MISRA C 2023 Rule 14.3. (If sizeof(off_t) < sizeof(uint64_t) the expression is not invariant, so compliance depends on the target configuration.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified file_reader code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2215.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of file_reader as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of file_reader:\n```c\nstatic ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  ssize_t n;\n#else  /* _WIN32 && !__CYGWIN__ */\n  const HANDLE fh = (HANDLE) (uintptr_t) _get_osfhandle (response->fd);\n#endif /* _WIN32 && !__CYGWIN__ */\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  if (offset64 < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  if (max > SSIZE_MAX)\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n\n#if defined(HAVE_PREAD64)\n  n = pread64 (response->fd, buf, max, offset64);\n#elif defined(HAVE_PREAD)\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Read at required position is not possible. */\n\n  n = pread (response->fd, buf, max, (off_t) offset64);\n#else  /* ! HAVE_PREAD */\n#if defined(HAVE_LSEEK64)\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n#else  /* ! HAVE_LSEEK64 */\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n#endif /* ! HAVE_LSEEK64 */\n  n = read (response->fd,\n            buf,\n            max);\n\n#endif /* ! HAVE_PREAD */\n  if (0 == n)\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  if (n < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return n;\n#else /* _WIN32 && !__CYGWIN__ */\n  if (INVALID_HANDLE_VALUE == fh)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Value of 'response->fd' is not valid. */\n  else\n  {\n    OVERLAPPED f_ol = {0, 0, {{0, 0}}, 0};   /* Initialize to zero. */\n    ULARGE_INTEGER pos_uli;\n    DWORD toRead = (max > INT32_MAX) ? INT32_MAX : (DWORD) max;\n    DWORD resRead;\n\n    pos_uli.QuadPart = (uint64_t) offset64;   /* Simple transformation 64bit -> 2x32bit. */\n    f_ol.Offset = pos_uli.LowPart;\n    f_ol.OffsetHigh = pos_uli.HighPart;\n    if (! ReadFile (fh, (void *) buf, toRead, &resRead, &f_ol))\n      return MHD_CONTENT_READER_END_WITH_ERROR;   /* Read error. */\n    if (0 == resRead)\n      return MHD_CONTENT_READER_END_OF_STREAM;\n    return (ssize_t) resRead;\n  }\n#endif /* _WIN32 && !__CYGWIN__ */\n}\n```\n</target_code>\nPlease provide the modified file_reader code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\nstatic void\nfile_reader_probe(const char *where,\n                  uint64_t pos,\n                  int64_t offset64,\n                  size_t max,\n                  int fd)\n{\n  FILE *f = fopen(\"/tmp/logs/2215.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log key runtime state. sizeof(off_t) is compile-time but useful to record here. */\n    fprintf(f, \"[file_reader] %s: pos=%\" PRIu64 \", offset64=%\" PRId64 \", max=%zu, fd=%d, sizeof(off_t)=%zu, sizeof(uint64_t)=%zu\\n\",\n            where, pos, offset64, max, fd, sizeof(off_t), sizeof(uint64_t));\n    fclose(f);\n  }\n}\n\nstatic void\nfile_reader_probe_cond(const char *where,\n                        uint64_t pos,\n                        int64_t offset64,\n                        size_t max,\n                        int fd,\n                        int cond_val)\n{\n  FILE *f = fopen(\"/tmp/logs/2215.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"[file_reader] %s: pos=%\" PRIu64 \", offset64=%\" PRId64 \", max=%zu, fd=%d, cond=(sizeof(off_t) < sizeof(uint64_t))=%d\\n\",\n            where, pos, offset64, max, fd, cond_val);\n    fclose(f);\n  }\n}\n\nstatic ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  ssize_t n;\n#else  /* _WIN32 && !__CYGWIN__ */\n  const HANDLE fh = (HANDLE) (uintptr_t) _get_osfhandle (response->fd);\n#endif /* _WIN32 && !__CYGWIN__ */\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  /* Entry probe: record initial state */\n  file_reader_probe(\"entry\", pos, offset64, max, response->fd);\n\n  if (offset64 < 0)\n  {\n    file_reader_probe(\"offset_negative\", pos, offset64, max, response->fd);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  if (max > SSIZE_MAX)\n  {\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n    file_reader_probe(\"clamped_max\", pos, offset64, max, response->fd);\n  }\n\n#if defined(HAVE_PREAD64)\n  file_reader_probe(\"pread64_path\", pos, offset64, max, response->fd);\n  n = pread64 (response->fd, buf, max, offset64);\n  file_reader_probe(\"after_pread64\", pos, offset64, max, response->fd);\n#elif defined(HAVE_PREAD)\n  /* Probe the compile-time size comparison at runtime for evidence. */\n  file_reader_probe_cond(\"pre_pread_check\", pos, offset64, max, response->fd,\n                         (sizeof(off_t) < sizeof (uint64_t)) ? 1 : 0);\n\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    file_reader_probe(\"pre_pread_seek_impossible\", pos, offset64, max, response->fd);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Read at required position is not possible. */\n  }\n\n  n = pread (response->fd, buf, max, (off_t) offset64);\n  file_reader_probe(\"after_pread\", pos, offset64, max, response->fd);\n#else  /* ! HAVE_PREAD */\n#if defined(HAVE_LSEEK64)\n  file_reader_probe(\"lseek64_path\", pos, offset64, max, response->fd);\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n  {\n    file_reader_probe(\"lseek64_failed\", pos, offset64, max, response->fd);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#else  /* ! HAVE_LSEEK64 */\n  file_reader_probe_cond(\"pre_lseek_check\", pos, offset64, max, response->fd,\n                         (sizeof(off_t) < sizeof (uint64_t)) ? 1 : 0);\n\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    file_reader_probe(\"pre_lseek_seek_impossible\", pos, offset64, max, response->fd);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n  {\n    file_reader_probe(\"lseek_failed\", pos, offset64, max, response->fd);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#endif /* ! HAVE_LSEEK64 */\n  n = read (response->fd,\n            buf,\n            max);\n  file_reader_probe(\"after_read\", pos, offset64, max, response->fd);\n\n#endif /* ! HAVE_PREAD */\n  if (0 == n)\n  {\n    file_reader_probe(\"end_of_stream\", pos, offset64, max, response->fd);\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n  if (n < 0)\n  {\n    file_reader_probe(\"read_error\", pos, offset64, max, response->fd);\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  }\n  file_reader_probe(\"return_success\", pos, offset64, (size_t) n, response->fd);\n  return n;\n#else /* _WIN32 && !__CYGWIN__ */\n  if (INVALID_HANDLE_VALUE == fh)\n  {\n    file_reader_probe(\"invalid_handle\", pos, offset64, max, response->fd);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Value of 'response->fd' is not valid. */\n  }\n  else\n  {\n    OVERLAPPED f_ol = {0, 0, {{0, 0}}, 0};   /* Initialize to zero. */\n    ULARGE_INTEGER pos_uli;\n    DWORD toRead = (max > INT32_MAX) ? INT32_MAX : (DWORD) max;\n    DWORD resRead;\n\n    pos_uli.QuadPart = (uint64_t) offset64;   /* Simple transformation 64bit -> 2x32bit. */\n    f_ol.Offset = pos_uli.LowPart;\n    f_ol.OffsetHigh = pos_uli.HighPart;\n    file_reader_probe(\"win_read_before\", pos, offset64, max, response->fd);\n    if (! ReadFile (fh, (void *) buf, toRead, &resRead, &f_ol))\n    {\n      file_reader_probe(\"win_read_error\", pos, offset64, max, response->fd);\n      return MHD_CONTENT_READER_END_WITH_ERROR;   /* Read error. */\n    }\n    if (0 == resRead)\n    {\n      file_reader_probe(\"win_end_of_stream\", pos, offset64, max, response->fd);\n      return MHD_CONTENT_READER_END_OF_STREAM;\n    }\n    file_reader_probe(\"win_return_success\", pos, offset64, (size_t) resRead, response->fd);\n    return (ssize_t) resRead;\n  }\n#endif /* _WIN32 && !__CYGWIN__ */\n}\n"
}