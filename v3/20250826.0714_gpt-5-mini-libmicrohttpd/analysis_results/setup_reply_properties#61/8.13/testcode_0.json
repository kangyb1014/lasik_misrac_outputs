{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local alias 'r' is declared as 'struct MHD_Response *const r' (a const pointer to a non-const object). In this function 'r' is only used for reading its fields (e.g. r->total_size, r->flags_auto, r->flags, r->upgrade_handler), so it could and should be declared to point to a const-qualified type (e.g. 'const struct MHD_Response *const r'). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified setup_reply_properties code that contains useful probe functions that print useful logs to a file \"/tmp/logs/613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of setup_reply_properties as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of setup_reply_properties:\n```c\nstatic void\nsetup_reply_properties (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n  enum replyBodyUse use_rp_body;\n  bool use_chunked;\n\n  mhd_assert (NULL != r);\n\n  /* ** Adjust reply properties ** */\n\n  c->keepalive = keepalive_possible (c);\n  use_rp_body = is_reply_body_needed (c, c->rp.responseCode);\n  c->rp.props.send_reply_body = (use_rp_body > RP_BODY_HEADERS_ONLY);\n  c->rp.props.use_reply_body_headers = (use_rp_body >= RP_BODY_HEADERS_ONLY);\n\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ( (NULL == r->upgrade_handler) ||\n               (RP_BODY_NONE == use_rp_body) );\n#endif /* UPGRADE_SUPPORT */\n\n  if (c->rp.props.use_reply_body_headers)\n  {\n    if ((MHD_SIZE_UNKNOWN == r->total_size) ||\n        (0 != (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)))\n    { /* Use chunked reply encoding if possible */\n\n      /* Check whether chunked encoding is supported by the client */\n      if (! MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n        use_chunked = false;\n      /* Check whether chunked encoding is allowed for the reply */\n      else if (0 != (r->flags & (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT\n                                 | MHD_RF_HTTP_1_0_SERVER)))\n        use_chunked = false;\n      else\n        /* If chunked encoding is supported and allowed, and response size\n         * is unknown, use chunked even for non-Keep-Alive connections.\n         * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3\n         * Also use chunked if it is enforced by application and supported by\n         * the client. */\n        use_chunked = true;\n    }\n    else\n      use_chunked = false;\n\n    if ( (MHD_SIZE_UNKNOWN == r->total_size) &&\n         (! use_chunked) )\n    {\n      /* End of the stream is indicated by closure */\n      c->keepalive = MHD_CONN_MUST_CLOSE;\n    }\n  }\n  else\n    use_chunked = false; /* chunked encoding cannot be used without body */\n\n  c->rp.props.chunked = use_chunked;\n#ifdef _DEBUG\n  c->rp.props.set = true;\n#endif /* _DEBUG */\n}\n```\n</target_code>\nPlease provide the modified setup_reply_properties code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Probe logging function: append structured logs to /tmp/logs/613.txt */\nstatic void\nmhd_log_probe_setup (const char *stage,\n                      const struct MHD_Connection *c,\n                      const struct MHD_Response *r,\n                      enum replyBodyUse use_rp_body,\n                      bool use_chunked)\n{\n  FILE *f = fopen(\"/tmp/logs/613.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log stage, pointer values and relevant fields used in the decision */\n  fprintf (f, \"[setup_reply_properties] stage=%s\\n\", stage ? stage : \"(null)\");\n  fprintf (f, \"  connection ptr=%p\\n\", (const void *)c);\n  fprintf (f, \"  response ptr=%p\\n\", (const void *)r);\n\n  if (r != NULL)\n  {\n    /* total_size may be an integer type; print via cast to long long */\n    fprintf (f, \"  r->total_size=%lld\\n\", (long long) r->total_size);\n    fprintf (f, \"  r->flags_auto=0x%08x\\n\", (unsigned) r->flags_auto);\n    fprintf (f, \"  r->flags=0x%08x\\n\", (unsigned) r->flags);\n#ifdef UPGRADE_SUPPORT\n    fprintf (f, \"  r->upgrade_handler=%p\\n\", (const void *) r->upgrade_handler);\n#else\n    fprintf (f, \"  r->upgrade_handler=(not compiled UPGRADE_SUPPORT)\\n\");\n#endif\n  }\n  else\n  {\n    fprintf (f, \"  response is NULL\\n\");\n  }\n\n  if (c != NULL)\n  {\n    /* rq.http_ver might be an enum or integer type; print as integer */\n    fprintf (f, \"  c->rq.http_ver=%d\\n\", (int) c->rq.http_ver);\n    fprintf (f, \"  c->rp.responseCode=%d\\n\", (int) c->rp.responseCode);\n    fprintf (f, \"  c->keepalive=%d\\n\", (int) c->keepalive);\n    fprintf (f, \"  c->rp.props.send_reply_body=%d\\n\", (int) c->rp.props.send_reply_body);\n  }\n\n  fprintf (f, \"  use_rp_body=%d\\n\", (int) use_rp_body);\n  fprintf (f, \"  use_chunked=%d\\n\", (int) use_chunked);\n  fprintf (f, \"---\\n\");\n  fclose (f);\n}\n\nstatic void\nsetup_reply_properties (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n  enum replyBodyUse use_rp_body;\n  bool use_chunked;\n\n  /* Log entry with initial alias/state */\n  mhd_log_probe_setup (\"entry\", c, r, 0, false);\n\n  mhd_assert (NULL != r);\n\n  /* ** Adjust reply properties ** */\n\n  c->keepalive = keepalive_possible (c);\n  use_rp_body = is_reply_body_needed (c, c->rp.responseCode);\n  c->rp.props.send_reply_body = (use_rp_body > RP_BODY_HEADERS_ONLY);\n  c->rp.props.use_reply_body_headers = (use_rp_body >= RP_BODY_HEADERS_ONLY);\n\n  /* Log after computing body-use decisions */\n  mhd_log_probe_setup (\"after_use_rp_body\", c, r, use_rp_body, false);\n\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ( (NULL == r->upgrade_handler) ||\n               (RP_BODY_NONE == use_rp_body) );\n#endif /* UPGRADE_SUPPORT */\n\n  if (c->rp.props.use_reply_body_headers)\n  {\n    if ((MHD_SIZE_UNKNOWN == r->total_size) ||\n        (0 != (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)))\n    { /* Use chunked reply encoding if possible */\n\n      /* Check whether chunked encoding is supported by the client */\n      if (! MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n        use_chunked = false;\n      /* Check whether chunked encoding is allowed for the reply */\n      else if (0 != (r->flags & (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT\n                                 | MHD_RF_HTTP_1_0_SERVER)))\n        use_chunked = false;\n      else\n        /* If chunked encoding is supported and allowed, and response size\n         * is unknown, use chunked even for non-Keep-Alive connections.\n         * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3\n         * Also use chunked if it is enforced by application and supported by\n         * the client. */\n        use_chunked = true;\n\n      /* Log decision point inside chunked-possible branch */\n      mhd_log_probe_setup (\"inside_chunked_possible_branch\", c, r, use_rp_body, use_chunked);\n    }\n    else\n      use_chunked = false;\n\n    if ( (MHD_SIZE_UNKNOWN == r->total_size) &&\n         (! use_chunked) )\n    {\n      /* End of the stream is indicated by closure */\n      c->keepalive = MHD_CONN_MUST_CLOSE;\n\n      /* Log that keepalive was forced to close due to unknown size + no chunked */\n      mhd_log_probe_setup (\"forced_close_due_unknown_size_no_chunked\", c, r, use_rp_body, use_chunked);\n    }\n  }\n  else\n    use_chunked = false; /* chunked encoding cannot be used without body */\n\n  c->rp.props.chunked = use_chunked;\n\n  /* Log final properties before optional debug set */\n  mhd_log_probe_setup (\"final\", c, r, use_rp_body, use_chunked);\n\n#ifdef _DEBUG\n  c->rp.props.set = true;\n#endif /* _DEBUG */\n}\n"
}