{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_unlock:\n```c\nstatic void\nMHD_ip_count_unlock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (NULL == daemon->master);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in this fragment. The statement only compares daemon->master to NULL; Rule 8.13 concerns pointer declarations (they should be const-qualified where possible). From this use alone you cannot tell how daemon->master was declared. A violation would occur if the member is declared as a non-const pointer but is only used for read-only access throughout the code (it should then be declared as a pointer to const), but that cannot be determined from this single comparison."
}