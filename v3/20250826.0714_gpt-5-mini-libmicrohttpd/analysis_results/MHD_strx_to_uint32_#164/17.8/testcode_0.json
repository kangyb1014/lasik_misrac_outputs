{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'str' is modified inside the function (str++ in the while loop). MISRA C 2023 Rule 17.8 prohibits modifying a pointer function parameter itself (only the object pointed to may be modified). The write to *out_val is permitted (it modifies the pointed object), but incrementing the parameter 'str' violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint32_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1647.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint32_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint32_:\n```c\nsize_t\nMHD_strx_to_uint32_ (const char *str,\n                     uint32_t *out_val)\n{\n  const char *const start = str;\n  uint32_t res;\n  int digit;\n\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    if ( (res < (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit <= (UINT32_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n    }\n    else\n      return 0;\n    str++;\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint32_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n#include <stdarg.h>\n\n/* Declaration of external helper used by the original code. */\nint toxdigitvalue (int c);\n\n/* Helper: append formatted logs to /tmp/logs/1647.txt. */\nstatic void\nmhd_log_append (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1647.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nsize_t\nMHD_strx_to_uint32_ (const char *str,\n                     uint32_t *out_val)\n{\n  const char *const start = str;\n  uint32_t res;\n  int digit;\n\n  /* Log entry with safe checks for NULL str. */\n  if (str)\n    mhd_log_append (\"ENTER: MHD_strx_to_uint32_: str=%p, first_char=(int)%d, out_val=%p\",\n                    (void *) str, (int) (unsigned char) *str, (void *) out_val);\n  else\n    mhd_log_append (\"ENTER: MHD_strx_to_uint32_: str=NULL, out_val=%p\", (void *) out_val);\n\n  if (! str || ! out_val)\n  {\n    mhd_log_append (\"EARLY RETURN: NULL parameter detected (str=%p, out_val=%p)\", (void *) str, (void *) out_val);\n    return 0;\n  }\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  mhd_log_append (\"INIT: res=%u, digit=%d, str=%p, char=(int)%d\", (unsigned) res, digit, (void *) str, (int) (unsigned char) *str);\n\n  while (digit >= 0)\n  {\n    mhd_log_append (\"LOOP TOP: res=%u, digit=%d, str=%p, char=(int)%d\", (unsigned) res, digit, (void *) str, (int) (unsigned char) *str);\n\n    if ( (res < (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit <= (UINT32_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n      mhd_log_append (\"RES UPDATED: res=%u (after incorporating digit %d)\", (unsigned) res, digit);\n    }\n    else\n    {\n      mhd_log_append (\"OVERFLOW: res=%u, digit=%d -> returning 0\", (unsigned) res, digit);\n      return 0;\n    }\n\n    /* Log pointer before incrementing \u2014 this is the modification of the parameter that demonstrates the violation scenario. */\n    mhd_log_append (\"STR INCREMENT: before str=%p\", (void *) str);\n    str++;\n    mhd_log_append (\"STR INCREMENT: after  str=%p, moved_by=%td\", (void *) str, (ptrdiff_t) (str - start));\n\n    digit = toxdigitvalue (*str);\n    mhd_log_append (\"NEXT DIGIT: digit=%d, str=%p, char=(int)%d\", digit, (void *) str, (int) (unsigned char) *str);\n  }\n\n  if (str - start > 0)\n  {\n    *out_val = res;\n    mhd_log_append (\"ASSIGN OUT: out_val=%p assigned %u, consumed=%td\", (void *) out_val, (unsigned) res, (ptrdiff_t) (str - start));\n  }\n  else\n  {\n    mhd_log_append (\"NO DIGITS: consumed=0, out_val not assigned\");\n  }\n\n  mhd_log_append (\"EXIT: returning %zu (str=%p, start=%p, consumed=%td)\", (size_t) (str - start), (void *) str, (void *) start, (ptrdiff_t) (str - start));\n  return (size_t) (str - start);\n}\n"
}