{
  "user_message": "An agent A claimed that the following MHD_init code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_init.\n```c\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThis line can violate MISRA C 2023 Rule 8.13 when the translation macro/function '_' or the MHD_PANIC parameter are declared to use a non-const pointer (e.g. char *). For example, the common gettext prototype is 'char *gettext(const char *msgid);' (returns non-const char *). If '_' expands to such a function (returning char *) or MHD_PANIC is declared to take 'char *' rather than 'const char *', then a pointer to the string literal is being used without const qualification and Rule 8.13 is violated. To conform, '_' should return 'const char *' and/or MHD_PANIC should accept 'const char *'.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\nMHD_init: entry\nMHD_init: calling MHD_set_panic_func(NULL, NULL)\nMHD_init: exit\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 concerns pointer declarations \u2014 a pointer shall point to a const\u2011qualified type whenever possible. The MHD_init snippet you provided does not declare any pointer variables; it only passes string literals through the translation macro '_' into MHD_PANIC. Whether a Rule 8.13 violation actually exists depends on the declarations/prototypes of '_' and MHD_PANIC (which are not shown). If either '_' or MHD_PANIC is declared to accept/return a non\u2011const char * (for example gettext commonly returns char *), then that declaration would be contrary to the spirit of Rule 8.13 and would be a violation. But the snippet itself does not prove a violation \u2014 the problem is conditional on external prototypes. Recommendation: inspect/adjust the prototypes of '_' and MHD_PANIC (and any translation wrapper) so they use const char * for read\u2011only strings (or provide a const\u2011qualified wrapper) to conform with Rule 8.13."
}