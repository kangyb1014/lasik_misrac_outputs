{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis line can violate MISRA C 2023 Rule 8.13 when the translation macro/function '_' or the MHD_PANIC parameter are declared to use a non-const pointer (e.g. char *). For example, the common gettext prototype is 'char *gettext(const char *msgid);' (returns non-const char *). If '_' expands to such a function (returning char *) or MHD_PANIC is declared to take 'char *' rather than 'const char *', then a pointer to the string literal is being used without const qualification and Rule 8.13 is violated. To conform, '_' should return 'const char *' and/or MHD_PANIC should accept 'const char *'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/813.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_init:\n```c\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n}\n```\n</target_code>\nPlease provide the modified MHD_init code.\n",
  "test_code": "void\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  /* Log entry and record panic func initialization */\n  {\n    FILE *log = fopen(\"/tmp/logs/813.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_init: entry\\n\");\n      fprintf(log, \"MHD_init: calling MHD_set_panic_func(NULL, NULL)\\n\");\n      fclose(log);\n    }\n  }\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n  {\n    /* Probe: capture the translation result and log pointer and content for analysis. */\n    const char *msg_probe = _ (\"Failed to initialize winsock.\\n\");\n    {\n      FILE *log = fopen(\"/tmp/logs/813.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"MHD_init: WSAStartup failed (return != 0). wsd.wVersion=0x%08x. msg_ptr=%p. msg=\\\"%s\\\"\\n\",\n                (unsigned)wsd.wVersion, (const void *)msg_probe, msg_probe ? msg_probe : \"(null)\");\n        fclose(log);\n      }\n    }\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  }\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n  {\n    const char *msg_probe = _ (\"Winsock version 2.2 is not available.\\n\");\n    {\n      FILE *log = fopen(\"/tmp/logs/813.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"MHD_init: Winsock version check failed. wsd.wVersion=0x%08x. msg_ptr=%p. msg=\\\"%s\\\"\\n\",\n                (unsigned)wsd.wVersion, (const void *)msg_probe, msg_probe ? msg_probe : \"(null)\");\n        fclose(log);\n      }\n    }\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n  {\n    const char *msg_probe = _ (\"Failed to initialise multithreading in libgcrypt.\\n\");\n    FILE *log = fopen(\"/tmp/logs/813.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_init: gcry_control(GCRYCTL_SET_THREAD_CBS, &gcry_threads_pthread) returned non-zero. msg_ptr=%p. msg=\\\"%s\\\"\\n\",\n              (const void *)msg_probe, msg_probe ? msg_probe : \"(null)\");\n      fclose(log);\n    }\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n  }\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n  {\n    const char *msg_probe = _ (\"Failed to initialise multithreading in libgcrypt.\\n\");\n    FILE *log = fopen(\"/tmp/logs/813.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_init: gcry_control(GCRYCTL_SET_THREAD_CBS, &gcry_threads_w32) returned non-zero. msg_ptr=%p. msg=\\\"%s\\\"\\n\",\n              (const void *)msg_probe, msg_probe ? msg_probe : \"(null)\");\n      fclose(log);\n    }\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n  }\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  /* gcry_check_version may be called for side-effects; log its return for evidence. */\n  {\n    const char *gcry_ver = gcry_check_version (NULL);\n    FILE *log = fopen(\"/tmp/logs/813.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_init: gcry_check_version(NULL) returned %p (\\\"%s\\\").\\n\",\n              (const void *)gcry_ver, gcry_ver ? gcry_ver : \"(null)\");\n      fclose(log);\n    }\n  }\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n  {\n    const char *msg_probe = _ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\");\n    FILE *log = fopen(\"/tmp/logs/813.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_init: gcry_check_version(\\\"1.6.0\\\") returned NULL. msg_ptr=%p. msg=\\\"%s\\\"\\n\",\n              (const void *)msg_probe, msg_probe ? msg_probe : \"(null)\");\n      fclose(log);\n    }\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n  }\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  /* Log that gnutls_global_init is being called */\n  {\n    FILE *log = fopen(\"/tmp/logs/813.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_init: calling gnutls_global_init()\\n\");\n      fclose(log);\n    }\n  }\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n\n  /* Final log exit */\n  {\n    FILE *log = fopen(\"/tmp/logs/813.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_init: exit\\n\");\n      fclose(log);\n    }\n  }\n}\n"
}