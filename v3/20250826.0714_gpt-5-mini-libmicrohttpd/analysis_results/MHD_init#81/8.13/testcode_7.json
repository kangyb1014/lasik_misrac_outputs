{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis is a violation if MHD_PANIC (or the _() macro) accepts/returns a non-const char *: passing a string literal (or the result of _()) to a function parameter declared as char * means the pointer does not point to a const-qualified type. For example, if MHD_PANIC is declared as void MHD_PANIC(char *msg); then this call violates MISRA C 2023 Rule 8.13. To conform, the function parameter (and/or _() return type) should be declared as const char *.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/813.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_init:\n```c\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n}\n```\n</target_code>\nPlease provide the modified MHD_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe/logging helpers to record control flow and state to a file. */\nstatic void\nmhd_log_v (const char *fmt, va_list ap)\n{\n  FILE *f = fopen(\"/tmp/logs/813.txt\", \"a\");\n  if (f != NULL)\n    {\n      vfprintf (f, fmt, ap);\n      fputc ('\\n', f);\n      fclose (f);\n    }\n}\n\nstatic void\nmhd_log (const char *fmt, ...)\n{\n  va_list ap;\n  va_start (ap, fmt);\n  mhd_log_v (fmt, ap);\n  va_end (ap);\n}\n\n/* Log the argument passed to MHD_PANIC and a context string. */\nstatic void\nmhd_log_panic_arg (const char *msg, const char *context)\n{\n  if (msg == NULL)\n    mhd_log (\"MHD_PANIC called from %s: msg=(null)\", context ? context : \"(unknown)\");\n  else\n    mhd_log (\"MHD_PANIC called from %s: msg=\\\"%s\\\"\", context ? context : \"(unknown)\", msg);\n}\n\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  {\n    int _wsa_rc = WSAStartup (MAKEWORD (2, 2), &wsd);\n    if (0 != _wsa_rc)\n      {\n        /* Log the return code and the fact that a panic will follow. */\n        mhd_log (\"WSAStartup failed: return=%d\", _wsa_rc);\n        mhd_log_panic_arg (_ (\"Failed to initialize winsock.\\n\"), \"WSAStartup\");\n        MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n      }\n  }\n  {\n    unsigned int ver = (unsigned int) wsd.wVersion;\n    unsigned int lo = (unsigned int) (ver & 0xFFu);\n    unsigned int hi = (unsigned int) ((ver >> 8) & 0xFFu);\n    if ((2 != lo) && (2 != hi))\n      {\n        /* Log the detected version bytes before panicking. */\n        mhd_log (\"Winsock version mismatch: wVersion=0x%04x, LOBYTE=%u, HIBYTE=%u\", ver, lo, hi);\n        mhd_log_panic_arg (_ (\"Winsock version 2.2 is not available.\\n\"), \"winsock_version_check\");\n        MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n      }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  {\n    int _gcry_rc = gcry_control (GCRYCTL_SET_THREAD_CBS,\n                                 &gcry_threads_pthread);\n    if (0 != _gcry_rc)\n      {\n        mhd_log (\"gcry_control(GCRYCTL_SET_THREAD_CBS, gcry_threads_pthread) returned %d\", _gcry_rc);\n        mhd_log_panic_arg (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"), \"gcry_control_pthread\");\n        MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n      }\n  }\n#elif defined(MHD_W32_MUTEX_)\n  {\n    int _gcry_rc = gcry_control (GCRYCTL_SET_THREAD_CBS,\n                                 &gcry_threads_w32);\n    if (0 != _gcry_rc)\n      {\n        mhd_log (\"gcry_control(GCRYCTL_SET_THREAD_CBS, gcry_threads_w32) returned %d\", _gcry_rc);\n        mhd_log_panic_arg (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"), \"gcry_control_w32\");\n        MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n      }\n  }\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  {\n    const char *gcry_ver = gcry_check_version (\"1.6.0\");\n    if (NULL == gcry_ver)\n      {\n        mhd_log (\"gcry_check_version returned NULL for required version 1.6.0\");\n        mhd_log_panic_arg (_ (\"libgcrypt is too old. MHD was compiled for \"\n                              \"libgcrypt 1.6.0 or newer.\\n\"), \"gcry_check_version_required\");\n        MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \"\n                      \"libgcrypt 1.6.0 or newer.\\n\"));\n      }\n  }\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n}\n"
}