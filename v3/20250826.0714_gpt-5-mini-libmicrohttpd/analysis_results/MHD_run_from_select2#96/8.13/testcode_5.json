{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the macro/function MHD_D_IS_USING_THREADS_ is declared to take a non-const pointer (e.g. 'struct MHD_Daemon *daemon') but only reads fields from daemon, then it violates MISRA C 2023 Rule 8.13 \u2014 the parameter should be 'const struct MHD_Daemon *'. The fragment 'MHD_D_IS_USING_THREADS_(daemon)' therefore indicates a potential violation when the underlying declaration is non-const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run_from_select2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_run_from_select2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_run_from_select2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  if (MHD_D_IS_USING_POLL_ (daemon) ||\n      MHD_D_IS_USING_THREADS_ (daemon))\n    return MHD_NO;\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n    return MHD_NO;\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    resume_suspended_connections (daemon);\n\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n```\n</target_code>\nPlease provide the modified MHD_run_from_select2 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n#include <string.h>\n\n/* Probe helper: append an event line to the log file. */\nstatic void mhd_probe_log(const char *stage,\n                          const struct MHD_Daemon *daemon,\n                          const char *detail)\n{\n  FILE *f = fopen(\"/tmp/logs/963.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* Best-effort logging only; do not change program flow on failure. */\n    return;\n  }\n  fprintf(f, \"[MHD_run_from_select2] %s: daemon=%p\", stage, (const void *) daemon);\n  if (detail != NULL)\n  {\n    fprintf(f, \" detail=%s\", detail);\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Small helper to format an integer into a buffer and call the logger. */\nstatic void mhd_probe_log_int2(const char *stage,\n                               const struct MHD_Daemon *daemon,\n                               const char *name1, int val1,\n                               const char *name2, int val2)\n{\n  char buf[256];\n  /* Preserve safety: ensure termination. */\n  (void) snprintf(buf, sizeof(buf), \"%s=%d %s=%d\", name1, val1, name2, val2);\n  mhd_probe_log(stage, daemon, buf);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  /* Log entry and incoming parameters */\n  {\n    char buf[256];\n    (void) snprintf(buf, sizeof(buf), \"read_fd_set=%p write_fd_set=%p except_fd_set=%p fd_setsize=%u\",\n                    (const void *) read_fd_set, (const void *) write_fd_set,\n                    (const void *) except_fd_set, fd_setsize);\n    mhd_probe_log(\"entry\", daemon, buf);\n  }\n\n  /* Preserve original short-circuit behavior while inserting logs. */\n  if (MHD_D_IS_USING_POLL_ (daemon))\n  {\n    mhd_probe_log(\"using_poll_true\", daemon, NULL);\n    return MHD_NO;\n  }\n  else\n  {\n    mhd_probe_log(\"using_poll_false\", daemon, NULL);\n  }\n\n  if (MHD_D_IS_USING_THREADS_ (daemon))\n  {\n    mhd_probe_log(\"using_threads_true\", daemon, NULL);\n    return MHD_NO;\n  }\n  else\n  {\n    mhd_probe_log(\"using_threads_false\", daemon, NULL);\n  }\n\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n  {\n    mhd_probe_log(\"null_fd_sets\", daemon, \"read_fd_set or write_fd_set is NULL\");\n    return MHD_NO;\n  }\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    mhd_probe_log(\"except_fd_set_null\", daemon, \"except_fd_set is NULL (deprecated)\");\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n  {\n    mhd_probe_log(\"fd_setsize_zero\", daemon, NULL);\n    return MHD_NO;\n  }\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n  {\n    mhd_probe_log(\"fd_setsize_too_large\", daemon, NULL);\n    fd_setsize = (unsigned int) INT_MAX;\n  }\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    /* Log the values that cause the branch */\n    mhd_probe_log_int2(\"fdset_size_check\", daemon, \"fd_setsize\", (int) fd_setsize,\n                       \"daemon->fdset_size\", daemon->fdset_size);\n    if (daemon->fdset_size_set_by_app)\n    {\n      mhd_probe_log(\"fdset_size_set_by_app_true\", daemon, NULL);\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      mhd_probe_log(\"fdset_size_set_by_app_false\", daemon, NULL);\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    mhd_probe_log_int2(\"fd_setsize_less_than_FD_SETSIZE\", daemon, \"fd_setsize\", (int) fd_setsize,\n                       \"FD_SETSIZE\", (int) FD_SETSIZE);\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    mhd_probe_log(\"using_epoll_true\", daemon, NULL);\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    mhd_probe_log(\"epoll_return\", daemon, NULL);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    mhd_probe_log(\"using_epoll_true_no_support\", daemon, NULL);\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n  else\n  {\n    mhd_probe_log(\"using_epoll_false\", daemon, NULL);\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n  {\n    mhd_probe_log(\"resume_suspended_connections_called\", daemon, NULL);\n    resume_suspended_connections (daemon);\n  }\n\n  mhd_probe_log(\"call_internal_run_from_select\", daemon, NULL);\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n"
}