{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls free(pos->value) but pos->value is used only for storage/transfer and not modified in this routine. Declaring the pointer in the struct without const means a pointer to a non-const type is used where a pointer to a const-qualified type would be preferable. Under MISRA C:2023 Rule 8.13 the pointer should be const-qualified when possible, so leaving pos->value non-const is a violation. (If the implementation actually needs to modify the pointed-to object elsewhere, keep it non-const; otherwise change the declaration to a const-qualified pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_destroy_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_destroy_response as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_destroy_response:\n```c\n_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if (NULL == response)\n    return;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n#endif\n  if (NULL != response->crfc)\n    response->crfc (response->crc_cls);\n\n  if (NULL != response->data_iov)\n  {\n    free (response->data_iov);\n  }\n\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n    free (pos->header);\n    free (pos->value);\n    free (pos);\n  }\n  free (response);\n}\n```\n</target_code>\nPlease provide the modified MHD_destroy_response code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append messages to /tmp/logs/2093.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_probe_log(\"MHD_destroy_response: enter response=%p\", (void *)response);\n\n  if (NULL == response)\n  {\n    mhd_probe_log(\"MHD_destroy_response: response is NULL, returning\");\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_probe_log(\"MHD_destroy_response: locking mutex at %p\", (void *)&response->mutex);\n  MHD_mutex_lock_chk_ (&response->mutex);\n  mhd_probe_log(\"MHD_destroy_response: locked mutex at %p\", (void *)&response->mutex);\n#endif\n\n  mhd_probe_log(\"MHD_destroy_response: reference_count before decrement = %d\", response->reference_count);\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    mhd_probe_log(\"MHD_destroy_response: reference_count after decrement = %d, unlocking and returning\", response->reference_count);\n    MHD_mutex_unlock_chk_ (&response->mutex);\n    mhd_probe_log(\"MHD_destroy_response: unlocked mutex at %p (early return)\", (void *)&response->mutex);\n#endif\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_probe_log(\"MHD_destroy_response: reference_count reached zero, unlocking and destroying mutex at %p\", (void *)&response->mutex);\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n  mhd_probe_log(\"MHD_destroy_response: mutex destroyed at %p\", (void *)&response->mutex);\n#endif\n\n  if (NULL != response->crfc)\n  {\n    mhd_probe_log(\"MHD_destroy_response: calling crfc callback at %p with crc_cls=%p\", (void *)response->crfc, (void *)response->crc_cls);\n    response->crfc (response->crc_cls);\n    mhd_probe_log(\"MHD_destroy_response: crfc callback returned\");\n  }\n\n  if (NULL != response->data_iov)\n  {\n    mhd_probe_log(\"MHD_destroy_response: freeing data_iov=%p\", (void *)response->data_iov);\n    free (response->data_iov);\n    mhd_probe_log(\"MHD_destroy_response: freed data_iov=%p\", (void *)response->data_iov);\n  }\n\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n\n    mhd_probe_log(\"MHD_destroy_response: header node pos=%p, pos->next=%p, pos->header=%p, pos->value=%p\",\n                  (void *)pos, (void *)pos->next, (void *)pos->header, (void *)pos->value);\n\n    if (NULL != pos->header)\n    {\n      mhd_probe_log(\"MHD_destroy_response: freeing pos->header=%p\", (void *)pos->header);\n      free (pos->header);\n      mhd_probe_log(\"MHD_destroy_response: freed pos->header=%p\", (void *)pos->header);\n    }\n\n    if (NULL != pos->value)\n    {\n      mhd_probe_log(\"MHD_destroy_response: freeing pos->value=%p\", (void *)pos->value);\n      free (pos->value);\n      mhd_probe_log(\"MHD_destroy_response: freed pos->value=%p\", (void *)pos->value);\n    }\n\n    mhd_probe_log(\"MHD_destroy_response: freeing header node pos=%p\", (void *)pos);\n    free (pos);\n    mhd_probe_log(\"MHD_destroy_response: freed header node pos=%p\", (void *)pos);\n  }\n\n  mhd_probe_log(\"MHD_destroy_response: freeing response=%p\", (void *)response);\n  free (response);\n  mhd_probe_log(\"MHD_destroy_response: freed response=%p and exiting\", (void *)response);\n}\n"
}