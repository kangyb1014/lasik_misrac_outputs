{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of send_all:\n```c\nstatic void\nsend_all (MHD_socket sock,\n          const char *buf,\n          size_t len)\n{\n  ssize_t ret;\n  size_t off;\n\n  make_blocking (sock);\n  for (off = 0; off < len; off += (size_t) ret)\n  {\n    ret = send (sock,\n                &buf[off],\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n                len - off,\n#else  /* Native W32 */\n                (int) (len - off),\n#endif /* Native W32 */\n                0);\n    if (0 > ret)\n    {\n      if (EAGAIN == errno)\n      {\n        ret = 0;\n        continue;\n      }\n      break;\n    }\n    if (0 == ret)\n      break;\n  }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_socket sock,\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No language extension is used. The fragment declares a parameter of type 'MHD_socket' (presumably a typedef or macro-defined platform type from the library). Using a typedef as a parameter type is standard ISO C; there are no compiler-specific keywords or constructs (no __attribute__, __declspec, inline assembler, or other documented compiler extensions) in the fragment shown."
}