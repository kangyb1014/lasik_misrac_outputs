{
  "user_message": "An agent A claimed that the following MHD_SHA512_256_update code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_SHA512_256_update.\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn MHD_SHA512_256_update the parameter 'length' (declared as size_t length) is modified by the statement 'length -= SHA512_256_BLOCK_SIZE;' inside the loop. This changes the function parameter variable itself to track remaining bytes and thus violates MISRA C 2023 Rule 17.8. (Fix: copy length to a local variable and modify that local variable.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n--- MHD_SHA512_256_update ENTRY ---\nEntry: length=3 ctx=0x7ffdb08ccf88 data=0x5624799de01b\n[before_count_add] ctx=0x7ffdb08ccf88 data=0x5624799de01b length=3 bytes_have=0\nAfter ctx->count += length: ctx->count=3\n[after_count_updates] ctx=0x7ffdb08ccf88 data=0x5624799de01b length=3 bytes_have=0\nfinal copy of incomplete block: length=3 bytes_have=0 data=0x5624799de01b\n--- MHD_SHA512_256_update EXIT: final length=3 bytes_have=0 ctx->count=3 ctx=0x7ffdb08ccf88 ---\n--- MHD_SHA512_256_update ENTRY ---\nEntry: length=112 ctx=0x7ffdb08ccf88 data=0x5624799de01f\n[before_count_add] ctx=0x7ffdb08ccf88 data=0x5624799de01f length=112 bytes_have=0\nAfter ctx->count += length: ctx->count=112\n[after_count_updates] ctx=0x7ffdb08ccf88 data=0x5624799de01f length=112 bytes_have=0\nfinal copy of incomplete block: length=112 bytes_have=0 data=0x5624799de01f\n--- MHD_SHA512_256_update EXIT: final length=112 bytes_have=0 ctx->count=112 ctx=0x7ffdb08ccf88 ---\n--- MHD_SHA512_256_update ENTRY ---\nEntry: length=28 ctx=0x7ffdb08ccf88 data=0x5624799de090\n[before_count_add] ctx=0x7ffdb08ccf88 data=0x5624799de090 length=28 bytes_have=0\nAfter ctx->count += length: ctx->count=28\n[after_count_updates] ctx=0x7ffdb08ccf88 data=0x5624799de090 length=28 bytes_have=0\nfinal copy of incomplete block: length=28 bytes_have=0 data=0x5624799de090\n--- MHD_SHA512_256_update EXIT: final length=28 bytes_have=0 ctx->count=28 ctx=0x7ffdb08ccf88 ---\n--- MHD_SHA512_256_update ENTRY ---\nEntry: length=14 ctx=0x7ffdb08ccf88 data=0x5624799de0ad\n[before_count_add] ctx=0x7ffdb08ccf88 data=0x5624799de0ad length=14 bytes_have=0\nAfter ctx->count += length: ctx->count=14\n[after_count_updates] ctx=0x7ffdb08ccf88 data=0x5624799de0ad length=14 bytes_have=0\nfinal copy of incomplete block: length=14 bytes_have=0 data=0x5624799de0ad\n--- MHD_SHA512_256_update EXIT: final length=14 bytes_have=0 ctx->count=14 ctx=0x7ffdb08ccf88 ---\n--- MHD_SHA512_256_update ENTRY ---\nEntry: length=26 ctx=0x7ffdb08ccf88 data=0x5624799de0bc\n[before_count_add] ctx=0x7ffdb08ccf88 data=0x5624799de0bc length=26 bytes_have=0\nAfter ctx->count += length: ctx->count=26\n[after_count_updates] ctx=0x7ffdb08ccf88 data=0x5624799de0bc length=26 bytes_have=0\nfinal copy of incomplete block: length=26 bytes_have=0 data=0x5624799de0bc\n--- MHD_SHA512_256_update EXIT: final length=26 bytes_have=0 ctx->count=26 ctx=0x7ffdb08ccf88 ---\n--- MHD_SHA512_256_update ENTRY ---\nEntry: length=26 ctx=0x7ffdb08ccf88 data=0x5624799de125\n[before_count_add] ctx=0x7ffdb08ccf88 data=0x5624799de125 length=26 bytes_have=0\nAfter ctx->count += length: ctx->count=26\n[after_count_updates] ctx=0x7ffdb08ccf88 data=0x5624799de125 length=26 bytes_have=0\nfinal copy of incomplete block: length=26 bytes_have=0 data=0x5624799de125\n--- MHD_SHA512_256_update EXIT: final length=26 bytes_have=0 ctx->count=26 ctx=0x7ffdb08ccf88 ---\n--- MHD_SHA512_256_update ENTRY ---\nEntry: length=104 ctx=0x7ffdb08ccf88 data=0x5624799de0d7\n[before_count_add] ctx=0x7ffdb08ccf88 data=0x5624799de0d7 length=104 bytes_have=0\nAfter ctx->count += length: ctx->count=104\n[after_count_updates] ctx=0x7ffdb08ccf88 data=0x5624799de0d7 length=104 bytes_have=0\nfinal copy of incomplete block: length=104 bytes_have=0 data=0x5624799de0d7\n--- MHD_SHA512_256_update EXIT: final length=104 bytes_have=0 ctx->count=104 ctx=0x7ffdb08ccf88 ---\n--- MHD_SHA512_256_update ENTRY ---\nEntry: length=378 ctx=0x7ffdb08ccf88 data=0x5624799de140\n[before_count_add] ctx=0x7ffdb08ccf88 data=0x5624799de140 length=378 bytes_have=0\nAfter ctx->count += length: ctx->count=378\n[after_count_updates] ctx=0x7ffdb08ccf88 data=0x5624799de140 length=378 bytes_have=0\nwhile-iter 0 start: length=378 data=0x5624799de140\n[before_subtract_block] ctx=0x7ffdb08ccf88 data=0x5624799de1c0 length=378 bytes_have=0\n[after_subtract_block] ctx=0x7ffdb08ccf88 data=0x5624799de1c0 length=250 bytes_have=0\nwhile-iter 0 end: length=250\nwhile-iter 1 start: length=250 data=0x5624799de1c0\n[before_subtract_block] ctx=0x7ffdb08ccf88 data=0x5624799de240 length=250 bytes_have=0\n[after_subtract_block] ctx=0x7ffdb08ccf88 data=0x5624799de240 length=122 bytes_have=0\nwhile\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C:2023 Rule 17.8 prohibits modifying function parameters (the exception only permits modifying the object pointed to by a pointer parameter, not the pointer variable itself). In MHD_SHA512_256_update the value parameter length is modified (e.g. length -= bytes_left; length -= SHA512_256_BLOCK_SIZE;). That is a direct violation. Additionally, the pointer parameter data is also modified (data += bytes_left; data += SHA512_256_BLOCK_SIZE;), which likewise violates the rule because the pointer itself is being changed. The appropriate fix is to copy parameters to local variables (for example: size_t remaining = length; const uint8_t *p = data;) and then modify those locals, leaving the formal parameters unmodified."
}