{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter pointer 'data' (declared as const uint8_t *data) is incremented by the statement 'data += bytes_left;'. This modifies the parameter variable itself, which violates MISRA C 2023 Rule 17.8. A compliant fix is to use a local pointer (e.g. 'const uint8_t *p = data;') and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA512_256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3047.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA512_256_update:\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA512_256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Probe logging helper. Appends entries to /tmp/logs/3047.txt. */\nstatic void mhd_log_probe(const char *stage,\n                          const void *ctx_ptr,\n                          const uint8_t *data_ptr,\n                          size_t length,\n                          uint64_t ctx_count,\n                          uint64_t ctx_count_bits_hi,\n                          unsigned int bytes_have,\n                          unsigned int bytes_left,\n                          uint64_t count_hi)\n{\n  FILE *f = fopen(\"/tmp/logs/3047.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* If logging is unavailable, do nothing to preserve original behavior. */\n    return;\n  }\n\n  fprintf(f, \"[%s] ctx=%p data=%p length=%zu ctx->count=%\" PRIu64 \" ctx->count_bits_hi=%\" PRIu64\n             \" bytes_have=%u bytes_left=%u count_hi=%\" PRIu64 \"\\n\",\n          stage,\n          ctx_ptr,\n          (const void *) data_ptr,\n          length,\n          ctx_count,\n          ctx_count_bits_hi,\n          bytes_have,\n          bytes_left,\n          count_hi);\n  fclose(f);\n}\n\n/*\n * The following function is the original MHD_SHA512_256_update\n * with logging probes inserted to capture the control flow and\n * state changes \u2014 in particular the points where the parameter\n * 'data' is modified (e.g. data += bytes_left; and data += blocksize).\n *\n * Constraints: original logic is preserved as much as possible.\n */\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Initial state log */\n  mhd_log_probe(\"entry\", ctx, data, length, ctx->count, ctx->count_bits_hi, 0U, 0U, 0ULL);\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  /* Log after updating counts */\n  mhd_log_probe(\"after_count_update\", ctx, data, length, ctx->count, ctx->count_bits_hi, bytes_have, 0U, count_hi);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      /* Log just before memcpy and before modifying 'data' parameter */\n      mhd_log_probe(\"before_partial_copy\", ctx, data, length, ctx->count, ctx->count_bits_hi, bytes_have, bytes_left, count_hi);\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Log the pointer/value before the increment */\n      mhd_log_probe(\"before_data_increment_partial\", ctx, data, length, ctx->count, ctx->count_bits_hi, bytes_have, bytes_left, count_hi);\n\n      /* This is the modification of the parameter 'data' that demonstrates the violation. */\n      data += bytes_left;\n      length -= bytes_left;\n\n      /* Log after the parameter has been modified */\n      mhd_log_probe(\"after_data_increment_partial\", ctx, data, length, ctx->count, ctx->count_bits_hi, 0U, 0U, count_hi);\n\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    /* Log each block processing before transform */\n    mhd_log_probe(\"before_full_block_transform\", ctx, data, length, ctx->count, ctx->count_bits_hi, bytes_have, SHA512_256_BLOCK_SIZE, count_hi);\n\n    sha512_256_transform (ctx->H, data);\n\n    /* Log before and after modifying 'data' and 'length' for each block */\n    mhd_log_probe(\"before_data_increment_full\", ctx, data, length, ctx->count, ctx->count_bits_hi, bytes_have, SHA512_256_BLOCK_SIZE, count_hi);\n\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n\n    mhd_log_probe(\"after_data_increment_full\", ctx, data, length, ctx->count, ctx->count_bits_hi, bytes_have, 0U, count_hi);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    /* Log final partial copy */\n    mhd_log_probe(\"final_partial_copy\", ctx, data, length, ctx->count, ctx->count_bits_hi, bytes_have, (unsigned int) length, count_hi);\n\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  /* Final state log */\n  mhd_log_probe(\"exit\", ctx, data, length, ctx->count, ctx->count_bits_hi, bytes_have, 0U, count_hi);\n}\n"
}