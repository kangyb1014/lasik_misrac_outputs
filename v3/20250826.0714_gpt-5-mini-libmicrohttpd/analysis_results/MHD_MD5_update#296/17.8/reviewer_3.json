{
  "user_message": "An agent A claimed that the following MHD_MD5_update code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_MD5_update.\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer parameter 'data' (declared as const uint8_t *data) is modified by the statement 'data += MD5_BLOCK_SIZE;'. This changes the pointer parameter itself, which violates MISRA C 2023 Rule 17.8 (the pointer object may be used to access/modifiy the pointee, but the parameter pointer shall not be modified).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nentry: data=0x55a43571401b length=28 bytes_have=0\nafter_count_update: data=0x55a43571401b length=28 bytes_have=0\nbefore_copy_remainder: data=0x55a43571401b length=28 bytes_have=0\nafter_copy_remainder: data=0x55a43571401b length=28 bytes_have=0\nexit: data=0x55a43571401b length=28 bytes_have=0\nentry: data=0x55a435714038 length=14 bytes_have=0\nafter_count_update: data=0x55a435714038 length=14 bytes_have=0\nbefore_copy_remainder: data=0x55a435714038 length=14 bytes_have=0\nafter_copy_remainder: data=0x55a435714038 length=14 bytes_have=0\nexit: data=0x55a435714038 length=14 bytes_have=0\nentry: data=0x55a435714047 length=26 bytes_have=0\nafter_count_update: data=0x55a435714047 length=26 bytes_have=0\nbefore_copy_remainder: data=0x55a435714047 length=26 bytes_have=0\nafter_copy_remainder: data=0x55a435714047 length=26 bytes_have=0\nexit: data=0x55a435714047 length=26 bytes_have=0\nentry: data=0x55a4357140b0 length=26 bytes_have=0\nafter_count_update: data=0x55a4357140b0 length=26 bytes_have=0\nbefore_copy_remainder: data=0x55a4357140b0 length=26 bytes_have=0\nafter_copy_remainder: data=0x55a4357140b0 length=26 bytes_have=0\nexit: data=0x55a4357140b0 length=26 bytes_have=0\nentry: data=0x55a435714062 length=104 bytes_have=0\nafter_count_update: data=0x55a435714062 length=104 bytes_have=0\nbefore_transform_full_block: data=0x55a435714062 length=104 bytes_have=0\nbefore_data_increment_full_block: data=0x55a435714062 length=104 bytes_have=0\nafter_data_increment_full_block: data=0x55a4357140a2 length=40 bytes_have=0\nbefore_copy_remainder: data=0x55a4357140a2 length=40 bytes_have=0\nafter_copy_remainder: data=0x55a4357140a2 length=40 bytes_have=0\nexit: data=0x55a4357140a2 length=40 bytes_have=0\nentry: data=0x55a4357140cb length=378 bytes_have=0\nafter_count_update: data=0x55a4357140cb length=378 bytes_have=0\nbefore_transform_full_block: data=0x55a4357140cb length=378 bytes_have=0\nbefore_data_increment_full_block: data=0x55a4357140cb length=378 bytes_have=0\nafter_data_increment_full_block: data=0x55a43571410b length=314 bytes_have=0\nbefore_transform_full_block: data=0x55a43571410b length=314 bytes_have=0\nbefore_data_increment_full_block: data=0x55a43571410b length=314 bytes_have=0\nafter_data_increment_full_block: data=0x55a43571414b length=250 bytes_have=0\nbefore_transform_full_block: data=0x55a43571414b length=250 bytes_have=0\nbefore_data_increment_full_block: data=0x55a43571414b length=250 bytes_have=0\nafter_data_increment_full_block: data=0x55a43571418b length=186 bytes_have=0\nbefore_transform_full_block: data=0x55a43571418b length=186 bytes_have=0\nbefore_data_increment_full_block: data=0x55a43571418b length=186 bytes_have=0\nafter_data_increment_full_block: data=0x55a4357141cb length=122 bytes_have=0\nbefore_transform_full_block: data=0x55a4357141cb length=122 bytes_have=0\nbefore_data_increment_full_block: data=0x55a4357141cb length=122 bytes_have=0\nafter_data_increment_full_block: data=0x55a43571420b length=58 bytes_have=0\nbefore_copy_remainder: data=0x55a43571420b length=58 bytes_have=0\nafter_copy_remainder: data=0x55a43571420b length=58 bytes_have=0\nexit: data=0x55a43571420b length=58 bytes_have=0\nentry: data=0x55a435715bdd length=0 bytes_have=0\nearly_return_zero_length: data=0x55a435715bdd length=0 bytes_have=0\nentry: data=0x55a435715ac3 length=1 bytes_have=0\nafter_count_update: data=0x55a435715ac3 length=1 bytes_have=0\nbefore_copy_remainder: data=0x55a435715ac3 length=1 bytes_have=0\nafter_copy_remainder: data=0x55a435715ac3 length=1 bytes_have=0\nexit: data=0x55a435715ac3 length=1 bytes_have=0\nentry: data=0x55a435714246 length=3 bytes_have=0\nafter_count_update: data=0x55a435714246 length=3 bytes_have=0\nbefore_copy_remainder: data=0x55a435714246 length=3 bytes_have=0\nafter_copy_remainder: data=0x55a435714246 length=3 bytes_have=0\nexit: data=0x55a435714246 length=3 bytes_have=0\nentry: data=0x55a43571424a length=14 bytes_have=0\nafter_count_update: data=0x55a43571424a length=14 bytes_have=0\nbefore_copy_remainder: data=0x55a43571424a length=14 bytes_have=0\nafter_copy_remainder: data=0x55a43571424a length=14 bytes_have=0\nexit: data=0x55a43571424a lengt\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function parameter 'data' (declared as const uint8_t *data) is modified in the function (e.g. statements like 'data += bytes_left;' and 'data += MD5_BLOCK_SIZE;'). MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified \u2014 the pointer object itself must not be changed (although the object it points to may be). Modifying the parameter variable 'data' therefore violates Rule 17.8. To comply, make a local copy (for example, 'const uint8_t *p = data;') and update 'p' instead, or change the API to express intended semantics (e.g. pass a pointer-to-pointer) if appropriate."
}