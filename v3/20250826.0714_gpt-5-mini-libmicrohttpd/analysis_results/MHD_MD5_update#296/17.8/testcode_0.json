{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_MD5_update the non-const parameter 'length' (declared as size_t length) is modified by the statement 'length -= MD5_BLOCK_SIZE;'. This directly changes a function parameter variable and therefore violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2967.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_MD5_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper: append a line to /tmp/logs/2967.txt with state info. */\nstatic void\nmhd_md5_log_probe(const char *stage, struct Md5Ctx *ctx, const uint8_t *data, size_t length, unsigned int bytes_have)\n{\n  FILE *f = fopen(\"/tmp/logs/2967.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging, do not alter behavior if logging fails */\n\n  /* Log: stage, pointers, numeric state. Cast ctx->count to unsigned long long for printing\n     since actual type is unknown here; this preserves original behavior. */\n  fprintf(f, \"[MHD_MD5_update] %s: ctx=%p, data=%p, length=%zu, bytes_have=%u, ctx->count=%llu\\n\",\n          stage, (void *) ctx, (void *) data, length, bytes_have, (unsigned long long) ctx->count);\n  fclose(f);\n}\n\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log entry state */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  mhd_md5_log_probe(\"entry (before count add)\", ctx, data, length, bytes_have);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_md5_log_probe(\"early return (length==0)\", ctx, data, length, bytes_have);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  ctx->count += length;\n\n  /* Log after modifying ctx->count (important state change) */\n  mhd_md5_log_probe(\"after count add\", ctx, data, length, bytes_have);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    mhd_md5_log_probe(\"entered bytes_have!=0 branch\", ctx, data, length, bytes_have);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      mhd_md5_log_probe(\"about to memcpy to fill buffer\", ctx, data, length, bytes_have);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Log values immediately before modifying the parameters */\n      mhd_md5_log_probe(\"before data += bytes_left & length -= bytes_left\", ctx, data, length, bytes_have);\n\n      data += bytes_left;\n      length -= bytes_left; /* <--- parameter 'length' is modified here (evidence point) */\n\n      /* Log after parameter modification to capture the violation scenario */\n      mhd_md5_log_probe(\"after data += & length -=\", ctx, data, length, 0u);\n\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_md5_log_probe(\"while-loop iteration: about to transform full block\", ctx, data, length, bytes_have);\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE; /* another modification of the parameter 'length' */\n    mhd_md5_log_probe(\"while-loop iteration: after data += & length -=\", ctx, data, length, bytes_have);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_md5_log_probe(\"about to memcpy remaining bytes to buffer\", ctx, data, length, bytes_have);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n    mhd_md5_log_probe(\"after memcpy remaining bytes\", ctx, data, length, bytes_have);\n  }\n\n  mhd_md5_log_probe(\"exit\", ctx, data, length, bytes_have);\n}\n"
}