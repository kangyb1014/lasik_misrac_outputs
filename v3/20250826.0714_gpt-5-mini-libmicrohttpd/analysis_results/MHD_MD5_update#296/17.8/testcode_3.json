{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'data' (declared as const uint8_t *data) is modified by the statement 'data += MD5_BLOCK_SIZE;'. This changes the pointer parameter itself, which violates MISRA C 2023 Rule 17.8 (the pointer object may be used to access/modifiy the pointee, but the parameter pointer shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2967.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_MD5_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper. Appends a concise record about control flow and state\n   to /tmp/logs/2967.txt. Keeps logging minimal to avoid changing program\n   behavior. */\nstatic void\nmhd_log_md5(const char *stage, const uint8_t *data, size_t length, unsigned int bytes_have)\n{\n  FILE *f = fopen(\"/tmp/logs/2967.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Print pointer, length and buffer usage. Use %p for pointer, %zu for size_t. */\n    fprintf(f, \"%s: data=%p length=%zu bytes_have=%u\\n\",\n            stage, (void *) data, length, bytes_have);\n    fclose(f);\n  }\n}\n\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log entry state */\n  mhd_log_md5(\"entry\", data, length, 0u);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_log_md5(\"early_return_zero_length\", data, length, 0u);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  /* Log after updating count */\n  mhd_log_md5(\"after_count_update\", data, length, bytes_have);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      mhd_log_md5(\"before_copy_partial\", data, length, bytes_have);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      /* Log immediately before pointer modification to capture original pointer */\n      mhd_log_md5(\"before_data_increment_partial\", data, length, bytes_have);\n      data += bytes_left; /* <-- pointer parameter modified (evidence for Rule 17.8) */\n      length -= bytes_left;\n      mhd_log_md5(\"after_data_increment_partial\", data, length, 0u);\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_log_md5(\"before_transform_full_block\", data, length, 0u);\n    md5_transform (ctx->H, data);\n    /* Log before and after advancing the pointer so the change is visible in logs */\n    mhd_log_md5(\"before_data_increment_full_block\", data, length, 0u);\n    data += MD5_BLOCK_SIZE; /* <-- pointer parameter modified (evidence for Rule 17.8) */\n    length -= MD5_BLOCK_SIZE;\n    mhd_log_md5(\"after_data_increment_full_block\", data, length, 0u);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_log_md5(\"before_copy_remainder\", data, length, 0u);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n    mhd_log_md5(\"after_copy_remainder\", data, length, bytes_have);\n  }\n\n  mhd_log_md5(\"exit\", data, length, 0u);\n}\n"
}