{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe expression 'data += bytes_left;' modifies the pointer parameter 'data' (it increments the pointer). MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified \u2014 the object pointed to may be changed, but not the pointer parameter itself. Therefore this statement violates Rule 17.8. A compliant fix is to copy the parameter to a local pointer (e.g. 'const uint8_t *p = data;') and update 'p' instead, using 'p' for subsequent accesses.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2967.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_MD5_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helper. Writes a line with the event name, pointer and\n   key state information to /tmp/logs/2967.txt. */\nstatic void\nmhd_probe_log(const char *event,\n              const uint8_t *data_ptr,\n              size_t length,\n              unsigned int bytes_have,\n              const struct Md5Ctx *ctx)\n{\n  FILE *f;\n  (void) mkdir(\"/tmp/logs\", 0777); /* best-effort, ignore error */\n  f = fopen(\"/tmp/logs/2967.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log basic runtime state. Cast ctx->count to unsigned long long to avoid\n     format issues regardless of its exact integer type. The fields used\n     here (count, buffer, H) exist in the original code. */\n  fprintf(f, \"%s: data=%p length=%zu bytes_have=%u ctx=%p ctx_count=%llu\\n\",\n          event,\n          (const void *) data_ptr,\n          length,\n          bytes_have,\n          (const void *) ctx,\n          (unsigned long long) ctx->count);\n\n  /* If there is data, also print up to the first 16 bytes in hex to show\n     the bytes being consumed/processed. */\n  if (data_ptr != NULL && length > 0)\n  {\n    size_t i, n = (length < 16u) ? length : 16u;\n    fprintf(f, \"  data[0..%zu] =\", n - 1);\n    for (i = 0; i < n; ++i)\n      fprintf(f, \" %02x\", (unsigned) data_ptr[i]);\n    fprintf(f, \"\\n\");\n  }\n\n  fclose(f);\n}\n\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log entry state */\n  mhd_probe_log(\"entry\", data, length, 0u, ctx);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_probe_log(\"early_return_zero_length\", data, length, 0u, ctx);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  /* Log after updating count and computing bytes_have */\n  mhd_probe_log(\"after_count_update\", data, length, bytes_have, ctx);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      mhd_probe_log(\"before_combine\", data, length, bytes_have, ctx);\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Log the fact that the pointer parameter will be advanced */\n      mhd_probe_log(\"about_to_advance_data_by_bytes_left\", data, length, bytes_have, ctx);\n\n      data += bytes_left; /* <-- pointer parameter is modified here (evidence) */\n      length -= bytes_left;\n\n      md5_transform (ctx->H, ctx->buffer);\n\n      /* Log after combining and processing the buffer */\n      mhd_probe_log(\"after_combine_and_transform\", data, length, 0u, ctx);\n\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_probe_log(\"while_before_transform\", data, length, 0u, ctx);\n\n    md5_transform (ctx->H, data);\n\n    /* Log the transform and the pointer/length update about to happen */\n    mhd_probe_log(\"while_after_transform_before_advance\", data, length, 0u, ctx);\n\n    data += MD5_BLOCK_SIZE; /* <-- pointer parameter is modified here (evidence) */\n    length -= MD5_BLOCK_SIZE;\n\n    mhd_probe_log(\"while_after_advance\", data, length, 0u, ctx);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_probe_log(\"before_final_copy\", data, length, bytes_have, ctx);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n    mhd_probe_log(\"after_final_copy\", data, length, bytes_have, ctx);\n  }\n\n  /* Final state log */\n  mhd_probe_log(\"exit\", data, length, bytes_have, ctx);\n}\n"
}