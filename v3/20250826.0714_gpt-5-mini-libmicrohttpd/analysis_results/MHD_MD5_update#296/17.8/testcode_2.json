{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'length' (a by-value function parameter) is modified by the statement 'length -= bytes_left;'. MISRA C 2023 Rule 17.8 prohibits modifying function parameters; only the object referred to by a pointer parameter may be modified (and pointer itself must not be changed). This assignment therefore violates Rule 17.8. Use a local copy (e.g. 'size_t len = length;') and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2967.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_MD5_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append a formatted log entry to /tmp/logs/2967.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2967.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* More structured state logging */\nstatic void mhd_log_state(const char *stage,\n                          const void *ctx_ptr,\n                          const uint8_t *data_ptr,\n                          size_t length,\n                          unsigned int bytes_have)\n{\n    mhd_probe_log(\"%s: ctx=%p, data=%p, length=%llu, bytes_have=%u\",\n                  stage,\n                  ctx_ptr,\n                  (const void *)data_ptr,\n                  (unsigned long long) length,\n                  bytes_have);\n}\n\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  mhd_probe_log(\"ENTER MHD_MD5_update: ctx=%p, data=%p, length=%llu\",\n                ctx, (const void *)data, (unsigned long long) length);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_probe_log(\"Shortcut return: length is 0\");\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  mhd_probe_log(\"Before count update: ctx->count=%llu, adding length=%llu\",\n                (unsigned long long) ctx->count,\n                (unsigned long long) length);\n  ctx->count += length;\n  mhd_probe_log(\"After count update: ctx->count=%llu\",\n                (unsigned long long) ctx->count);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    mhd_probe_log(\"Non-empty buffer: bytes_have=%u, bytes_left=%u, length=%llu\",\n                  bytes_have, bytes_left, (unsigned long long) length);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      mhd_probe_log(\"Branch: length >= bytes_left (true): length(before)=%llu, bytes_left=%u\",\n                    (unsigned long long) length, bytes_left);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left; /* <-- the reported violation: modifying parameter 'length' */\n      mhd_probe_log(\"After combining and consuming bytes_left: data=%p, length=%llu\",\n                    (const void *)data, (unsigned long long) length);\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n      mhd_probe_log(\"After transform: bytes_have reset to %u\", bytes_have);\n    }\n    else\n    {\n      mhd_probe_log(\"Branch: length >= bytes_left (false): length=%llu, bytes_left=%u\",\n                    (unsigned long long) length, bytes_left);\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_probe_log(\"While loop entry: processing full block: data=%p, length=%llu\",\n                  (const void *)data, (unsigned long long) length);\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE; /* modifying parameter 'length' further */\n    mhd_probe_log(\"While loop after transform: data=%p, length=%llu\",\n                  (const void *)data, (unsigned long long) length);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_probe_log(\"Final copy of incomplete block: data=%p, length=%llu, bytes_have=%u\",\n                  (const void *)data, (unsigned long long) length, bytes_have);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  mhd_probe_log(\"EXIT MHD_MD5_update: ctx=%p, final length parameter=%llu\",\n                ctx, (unsigned long long) length);\n}\n"
}