{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the code is built with MHD_FAVOR_SMALL_CODE defined (so the early \"if (0 == length) return;\" shortcut is omitted) and MHD_MD5_update() is called with length == 0, the statement ctx->count += length is executed but adds zero and has no effect. Removing that statement would not change program behaviour in that case, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2962.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_MD5_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append a line describing current state to /tmp/logs/2962.txt */\nstatic void\nmhd_log_md5_update (const struct Md5Ctx *ctx,\n                    const uint8_t *data,\n                    size_t length,\n                    const char *stage,\n                    unsigned int bytes_have)\n{\n  FILE *f = fopen(\"/tmp/logs/2962.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Attempt to print a few pieces of state that are useful to reproduce\n     the reported scenario. Cast count to unsigned long long to avoid\n     format mismatches for typical integer sizes. */\n  fprintf (f, \"%s: ctx=%p count=%llu length=%zu bytes_have=%u data=%p\\n\",\n           stage,\n           (const void *) ctx,\n           (unsigned long long) ctx->count,\n           length,\n           bytes_have,\n           (const void *) data);\n  fclose (f);\n}\n\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    /* Log that the early-return path was taken. */\n    mhd_log_md5_update (ctx, data, length, \"early_return_taken\", 0);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n\n  /* Log state before the addition to capture the potential dead operation. */\n  mhd_log_md5_update (ctx, data, length, \"before_count_add\", bytes_have);\n\n  ctx->count += length;\n\n  /* Log state after the addition to show whether count changed. */\n  mhd_log_md5_update (ctx, data, length, \"after_count_add\", bytes_have);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    mhd_log_md5_update (ctx, data, length, \"entered_bytes_have_branch\", bytes_have);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      mhd_log_md5_update (ctx, data, length, \"will_fill_buffer_and_transform\", bytes_have);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      mhd_log_md5_update (ctx, data, length, \"after_transform_from_buffer\", 0);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_log_md5_update (ctx, data, length, \"transform_full_block\", bytes_have);\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_log_md5_update (ctx, data, length, \"copy_incomplete_block\", bytes_have);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n    mhd_log_md5_update (ctx, data, length, \"after_copy_incomplete_block\", bytes_have);\n  }\n}\n"
}