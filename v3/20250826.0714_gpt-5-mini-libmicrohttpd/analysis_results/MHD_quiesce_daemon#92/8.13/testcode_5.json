{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function MHD_itc_activate_ is declared to take a non-const pointer for the message (for example: int MHD_itc_activate_(..., char *msg)), then passing the string literal \"q\" violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type (const char *) whenever possible. If, however, MHD_itc_activate_ is declared to accept a const char * (or equivalent const-qualified type), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_quiesce_daemon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/923.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_quiesce_daemon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_quiesce_daemon:\n```c\n_MHD_EXTERN MHD_socket\nMHD_quiesce_daemon (struct MHD_Daemon *daemon)\n{\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n  MHD_socket ret;\n\n  ret = daemon->listen_fd;\n  if ((MHD_INVALID_SOCKET == ret)\n      || daemon->was_quiesced)\n    return MHD_INVALID_SOCKET;\n  if ( (0 == (daemon->options & (MHD_USE_ITC))) &&\n       MHD_D_IS_USING_THREADS_ (daemon) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Using MHD_quiesce_daemon in this mode \" \\\n                 \"requires MHD_USE_ITC.\\n\"));\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n    for (i = 0; i < daemon->worker_pool_size; i++)\n    {\n      daemon->worker_pool[i].was_quiesced = true;\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n          (-1 != daemon->worker_pool[i].epoll_fd) &&\n          (daemon->worker_pool[i].listen_socket_in_epoll) )\n      {\n        if (0 != epoll_ctl (daemon->worker_pool[i].epoll_fd,\n                            EPOLL_CTL_DEL,\n                            ret,\n                            NULL))\n          MHD_PANIC (_ (\"Failed to remove listen FD from epoll set.\\n\"));\n        daemon->worker_pool[i].listen_socket_in_epoll = false;\n      }\n      else\n#endif\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        if (! MHD_itc_activate_ (daemon->worker_pool[i].itc, \"q\"))\n          MHD_PANIC (_ (\"Failed to signal quiesce via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n    }\n#endif\n  daemon->was_quiesced = true;\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (-1 != daemon->epoll_fd) &&\n      (daemon->listen_socket_in_epoll) )\n  {\n    if ( (0 != epoll_ctl (daemon->epoll_fd,\n                          EPOLL_CTL_DEL,\n                          ret,\n                          NULL)) &&\n         (ENOENT != errno) )   /* ENOENT can happen due to race with\n                                  #MHD_epoll() */\n      MHD_PANIC (\"Failed to remove listen FD from epoll set.\\n\");\n    daemon->listen_socket_in_epoll = false;\n  }\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"q\")) )\n    MHD_PANIC (_ (\"failed to signal quiesce via inter-thread \" \\\n                  \"communication channel.\\n\"));\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_quiesce_daemon code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/923.txt. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/923.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    va_end(ap);\n    fclose(f);\n}\n\n_MHD_EXTERN MHD_socket\nMHD_quiesce_daemon (struct MHD_Daemon *daemon)\n{\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n  MHD_socket ret;\n\n  mhd_probe_log(\"ENTER: MHD_quiesce_daemon daemon=%p\", (void *)daemon);\n\n  ret = daemon->listen_fd;\n  mhd_probe_log(\"listen_fd=%ld, was_quiesced=%d\", (long)ret, (int)daemon->was_quiesced);\n\n  if ((MHD_INVALID_SOCKET == ret)\n      || daemon->was_quiesced)\n  {\n    mhd_probe_log(\"EARLY RETURN: invalid socket or already quiesced -> returning MHD_INVALID_SOCKET\");\n    return MHD_INVALID_SOCKET;\n  }\n  if ( (0 == (daemon->options & (MHD_USE_ITC))) &&\n       MHD_D_IS_USING_THREADS_ (daemon) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Using MHD_quiesce_daemon in this mode \" \\\n                 \"requires MHD_USE_ITC.\\n\"));\n#endif\n    mhd_probe_log(\"MISSING OPTION: threads in use but MHD_USE_ITC not set -> returning MHD_INVALID_SOCKET\");\n    return MHD_INVALID_SOCKET;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n    for (i = 0; i < daemon->worker_pool_size; i++)\n    {\n      daemon->worker_pool[i].was_quiesced = true;\n      mhd_probe_log(\"worker[%u]: was_quiesced set to true\", i);\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n          (-1 != daemon->worker_pool[i].epoll_fd) &&\n          (daemon->worker_pool[i].listen_socket_in_epoll) )\n      {\n        mhd_probe_log(\"worker[%u]: EPOLL path: epoll_fd=%d, listen_socket_in_epoll=%d\", i, (int)daemon->worker_pool[i].epoll_fd, (int)daemon->worker_pool[i].listen_socket_in_epoll);\n        if (0 != epoll_ctl (daemon->worker_pool[i].epoll_fd,\n                            EPOLL_CTL_DEL,\n                            ret,\n                            NULL))\n          MHD_PANIC (_ (\"Failed to remove listen FD from epoll set.\\n\"));\n        daemon->worker_pool[i].listen_socket_in_epoll = false;\n      }\n      else\n#endif\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        /* Log details about the message pointer being passed. */\n        const char *msg = \"q\"; /* keep local const-qualified pointer for logging */\n        mhd_probe_log(\"worker[%u]: ITC valid -> about to call MHD_itc_activate_ with msg=\"\"%s\"\" at %p\", i, msg, (void *)msg);\n        if (! MHD_itc_activate_ (daemon->worker_pool[i].itc, \"q\"))\n        {\n          mhd_probe_log(\"worker[%u]: MHD_itc_activate_ returned FAILURE\", i);\n          MHD_PANIC (_ (\"Failed to signal quiesce via inter-thread \" \\\n                        \"communication channel.\\n\"));\n        }\n        else\n        {\n          mhd_probe_log(\"worker[%u]: MHD_itc_activate_ returned SUCCESS\", i);\n        }\n      }\n    }\n#endif\n  daemon->was_quiesced = true;\n  mhd_probe_log(\"daemon->was_quiesced set to true\");\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (-1 != daemon->epoll_fd) &&\n      (daemon->listen_socket_in_epoll) )\n  {\n    mhd_probe_log(\"EPOLL main path: epoll_fd=%d, listen_socket_in_epoll=%d\", (int)daemon->epoll_fd, (int)daemon->listen_socket_in_epoll);\n    if ( (0 != epoll_ctl (daemon->epoll_fd,\n                          EPOLL_CTL_DEL,\n                          ret,\n                          NULL)) &&\n         (ENOENT != errno) )   /* ENOENT can happen due to race with\n                                  #MHD_epoll() */\n      MHD_PANIC (\"Failed to remove listen FD from epoll set.\\n\");\n    daemon->listen_socket_in_epoll = false;\n  }\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"q\")) )\n  {\n    mhd_probe_log(\"MAIN ITC: about to call MHD_itc_activate_ with msg=\\\"q\\\" at %p\", (void *)\"q\");\n    MHD_PANIC (_ (\"failed to signal quiesce via inter-thread \" \\\n                  \"communication channel.\\n\"));\n  }\n  else if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    /* If valid and returned true, log that success case. */\n    mhd_probe_log(\"MAIN ITC: MHD_itc_activate_ succeeded for daemon->itc, msg=\\\"q\\\" at %p\", (void *)\"q\");\n  }\n  mhd_probe_log(\"EXIT: returning listen_fd=%ld\", (long)ret);\n  return ret;\n}\n"
}