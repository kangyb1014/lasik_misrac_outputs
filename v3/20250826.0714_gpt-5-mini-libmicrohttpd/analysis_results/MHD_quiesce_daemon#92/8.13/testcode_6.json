{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function MHD_itc_activate_ is declared to take a non-const char * for the second parameter (e.g. int MHD_itc_activate_(itc_t itc, char *msg)), then this call passes a string literal \"q\" to a non-const pointer. That violates MISRA C 2023 Rule 8.13 because the pointer parameter should be const-qualified (const char *) when the function does not modify the pointed data.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_quiesce_daemon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/923.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_quiesce_daemon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_quiesce_daemon:\n```c\n_MHD_EXTERN MHD_socket\nMHD_quiesce_daemon (struct MHD_Daemon *daemon)\n{\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n  MHD_socket ret;\n\n  ret = daemon->listen_fd;\n  if ((MHD_INVALID_SOCKET == ret)\n      || daemon->was_quiesced)\n    return MHD_INVALID_SOCKET;\n  if ( (0 == (daemon->options & (MHD_USE_ITC))) &&\n       MHD_D_IS_USING_THREADS_ (daemon) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Using MHD_quiesce_daemon in this mode \" \\\n                 \"requires MHD_USE_ITC.\\n\"));\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n    for (i = 0; i < daemon->worker_pool_size; i++)\n    {\n      daemon->worker_pool[i].was_quiesced = true;\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n          (-1 != daemon->worker_pool[i].epoll_fd) &&\n          (daemon->worker_pool[i].listen_socket_in_epoll) )\n      {\n        if (0 != epoll_ctl (daemon->worker_pool[i].epoll_fd,\n                            EPOLL_CTL_DEL,\n                            ret,\n                            NULL))\n          MHD_PANIC (_ (\"Failed to remove listen FD from epoll set.\\n\"));\n        daemon->worker_pool[i].listen_socket_in_epoll = false;\n      }\n      else\n#endif\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        if (! MHD_itc_activate_ (daemon->worker_pool[i].itc, \"q\"))\n          MHD_PANIC (_ (\"Failed to signal quiesce via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n    }\n#endif\n  daemon->was_quiesced = true;\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (-1 != daemon->epoll_fd) &&\n      (daemon->listen_socket_in_epoll) )\n  {\n    if ( (0 != epoll_ctl (daemon->epoll_fd,\n                          EPOLL_CTL_DEL,\n                          ret,\n                          NULL)) &&\n         (ENOENT != errno) )   /* ENOENT can happen due to race with\n                                  #MHD_epoll() */\n      MHD_PANIC (\"Failed to remove listen FD from epoll set.\\n\");\n    daemon->listen_socket_in_epoll = false;\n  }\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"q\")) )\n    MHD_PANIC (_ (\"failed to signal quiesce via inter-thread \" \\\n                  \"communication channel.\\n\"));\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_quiesce_daemon code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append structured logs to /tmp/logs/923.txt. */\nstatic void\nMHD_log_state (const char *stage, struct MHD_Daemon *daemon, MHD_socket ret, unsigned int index)\n{\n  FILE *f = fopen(\"/tmp/logs/923.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf (f, \"MHD_quiesce_daemon: stage=%s ret=%ld daemon=%p index=%u\\n\",\n           (stage != NULL) ? stage : \"(null)\", (long) ret, (void *) daemon,\n           index);\n  if (NULL != daemon)\n  {\n    fprintf (f,\n             \"  daemon->options=0x%lx was_quiesced=%d listen_fd=%ld worker_pool=%p worker_pool_size=%u itc=%p\\n\",\n             (unsigned long) daemon->options,\n             daemon->was_quiesced ? 1 : 0,\n             (long) daemon->listen_fd,\n             (void *) daemon->worker_pool,\n             (unsigned int) daemon->worker_pool_size,\n             (void *) daemon->itc);\n  }\n  fclose (f);\n}\n\nstatic void\nMHD_log_itc_call (struct MHD_Daemon *daemon, unsigned int index, void *itc, const char *msg, int result)\n{\n  FILE *f = fopen(\"/tmp/logs/923.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf (f, \"MHD_quiesce_daemon: itc_call index=%u itc=%p msg_ptr=%p msg='%s' result=%d daemon=%p\\n\",\n           index, itc, (const void *) msg, (msg != NULL) ? msg : \"(null)\", result,\n           (void *) daemon);\n  fclose (f);\n}\n\n_MHD_EXTERN MHD_socket\nMHD_quiesce_daemon (struct MHD_Daemon *daemon)\n{\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n  MHD_socket ret;\n\n  ret = daemon->listen_fd;\n  /* log immediate state after computing ret */\n  MHD_log_state (\"after_ret_assign\", daemon, ret, 0u);\n\n  if ((MHD_INVALID_SOCKET == ret)\n      || daemon->was_quiesced)\n  {\n    MHD_log_state (\"early_return_invalid_or_quiesced\", daemon, ret, 0u);\n    return MHD_INVALID_SOCKET;\n  }\n  if ( (0 == (daemon->options & (MHD_USE_ITC))) &&\n       MHD_D_IS_USING_THREADS_ (daemon) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Using MHD_quiesce_daemon in this mode \" \\\n                 \"requires MHD_USE_ITC.\\n\"));\n#endif\n    MHD_log_state (\"requires_itc_but_not_set\", daemon, ret, 0u);\n    return MHD_INVALID_SOCKET;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n    for (i = 0; i < daemon->worker_pool_size; i++)\n    {\n      daemon->worker_pool[i].was_quiesced = true;\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n          (-1 != daemon->worker_pool[i].epoll_fd) &&\n          (daemon->worker_pool[i].listen_socket_in_epoll) )\n      {\n        if (0 != epoll_ctl (daemon->worker_pool[i].epoll_fd,\n                            EPOLL_CTL_DEL,\n                            ret,\n                            NULL))\n          MHD_PANIC (_ (\"Failed to remove listen FD from epoll set.\\n\"));\n        daemon->worker_pool[i].listen_socket_in_epoll = false;\n      }\n      else\n#endif\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        /* Log the intention to call the inter-thread communication function. */\n        MHD_log_state (\"before_worker_itc\", daemon, ret, i);\n        /* Log specifics about the call: pointer and message content. */\n        MHD_log_itc_call (daemon, i, (void *) daemon->worker_pool[i].itc, \"q\", -1);\n\n        /* Preserve original logic but capture the result so we can log it. */\n        int success = MHD_itc_activate_ (daemon->worker_pool[i].itc, \"q\");\n        MHD_log_itc_call (daemon, i, (void *) daemon->worker_pool[i].itc, \"q\", success ? 1 : 0);\n        if (! success)\n          MHD_PANIC (_ (\"Failed to signal quiesce via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n    }\n#endif\n  daemon->was_quiesced = true;\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (-1 != daemon->epoll_fd) &&\n      (daemon->listen_socket_in_epoll) )\n  {\n    if ( (0 != epoll_ctl (daemon->epoll_fd,\n                          EPOLL_CTL_DEL,\n                          ret,\n                          NULL)) &&\n         (ENOENT != errno) )   /* ENOENT can happen due to race with\n                                  #MHD_epoll() */\n      MHD_PANIC (\"Failed to remove listen FD from epoll set.\\n\");\n    daemon->listen_socket_in_epoll = false;\n  }\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) )\n  {\n    /* Log the impending call for the daemon-level itc. */\n    MHD_log_state (\"before_daemon_itc\", daemon, ret, 0u);\n    MHD_log_itc_call (daemon, 0u, (void *) daemon->itc, \"q\", -1);\n\n    int success = MHD_itc_activate_ (daemon->itc, \"q\");\n    MHD_log_itc_call (daemon, 0u, (void *) daemon->itc, \"q\", success ? 1 : 0);\n\n    if (! success)\n      MHD_PANIC (_ (\"failed to signal quiesce via inter-thread \" \\\n                    \"communication channel.\\n\"));\n  }\n  MHD_log_state (\"returning_success\", daemon, ret, 0u);\n  return ret;\n}\n"
}