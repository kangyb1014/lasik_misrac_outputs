{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout (struct MHD_Daemon *daemon,\n                 MHD_UNSIGNED_LONG_LONG *timeout)\n{\n  uint64_t t64;\n  if (MHD_NO == MHD_get_timeout64 (daemon, &t64))\n    return MHD_NO;\n\n#if SIZEOF_UINT64_T > SIZEOF_UNSIGNED_LONG_LONG\n  if (ULLONG_MAX <= t64)\n    *timeout = ULLONG_MAX;\n  else\n#endif /* SIZEOF_UINT64_T > SIZEOF_UNSIGNED_LONG_LONG */\n  *timeout = (MHD_UNSIGNED_LONG_LONG) t64;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "(MHD_UNSIGNED_LONG_LONG) t64",
    "MHD_UNSIGNED_LONG_LONG",
    "_MHD_EXTERN"
  ],
  "explanation": "All other tokens and constructs in the snippet are standard-conforming C (enum return type, function definition, use of uint64_t, preprocessor #if/#else/#endif, integer constant ULLONG_MAX, simple assignment, comparison, and return statements). These do not inherently rely on compiler-specific language extensions. The three fragments reported are macros/typedefs or their use: they may hide compiler-specific extensions (for example _MHD_EXTERN could expand to compiler-specific linkage/visibility attributes like __declspec or __attribute__, and MHD_UNSIGNED_LONG_LONG could be a typedef or macro that maps to a compiler-specific extended type or uses an extension in its definition). Those expansions are not visible in this snippet and therefore should be investigated for possible use of compiler-specific language extensions. No other constructs in the shown code require investigation for Rule 1.2."
}