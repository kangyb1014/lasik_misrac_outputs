{
  "user_message": "An agent A claimed that the following MHD_get_daemon_info code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_daemon_info.\n```c\n_MHD_EXTERN const union MHD_DaemonInfo *\nMHD_get_daemon_info (struct MHD_Daemon *daemon,\n                     enum MHD_DaemonInfoType info_type,\n                     ...)\n{\n  if (NULL == daemon)\n    return NULL;\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  switch (info_type)\n  {\n  case MHD_DAEMON_INFO_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_MAC_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_LISTEN_FD:\n    daemon->daemon_info_dummy_listen_fd.listen_fd = daemon->listen_fd;\n    return &daemon->daemon_info_dummy_listen_fd;\n  case MHD_DAEMON_INFO_EPOLL_FD:\n#ifdef EPOLL_SUPPORT\n    daemon->daemon_info_dummy_epoll_fd.epoll_fd = daemon->epoll_fd;\n    return &daemon->daemon_info_dummy_epoll_fd;\n#else  /* ! EPOLL_SUPPORT */\n    return NULL;\n#endif /* ! EPOLL_SUPPORT */\n  case MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n    if (! MHD_D_IS_THREAD_SAFE_ (daemon))\n      MHD_cleanup_connections (daemon);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    else if (daemon->worker_pool)\n    {\n      unsigned int i;\n      /* Collect the connection information stored in the workers. */\n      daemon->connections = 0;\n      for (i = 0; i < daemon->worker_pool_size; i++)\n      {\n        /* FIXME: next line is thread-safe only if read is atomic. */\n        daemon->connections += daemon->worker_pool[i].connections;\n      }\n    }\n#endif\n    daemon->daemon_info_dummy_num_connections.num_connections\n      = daemon->connections;\n    return &daemon->daemon_info_dummy_num_connections;\n  case MHD_DAEMON_INFO_FLAGS:\n    daemon->daemon_info_dummy_flags.flags = daemon->options;\n    return &daemon->daemon_info_dummy_flags;\n  case MHD_DAEMON_INFO_BIND_PORT:\n    daemon->daemon_info_dummy_port.port = daemon->port;\n    return &daemon->daemon_info_dummy_port;\n  default:\n    return NULL;\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert evaluates the boolean expression (reads daemon->options, daemon->worker_pool and calls MHD_thread_handle_ID_is_valid_handle_) and those evaluations have no observable side effects, then in normal (non\u2011failing) executions the assertion only performs checks and does not alter program behaviour. In that case the executed operations are removable without affecting program behaviour and therefore constitute dead code, violating MISRA C 2023 Rule 2.2. (If instead mhd_assert is compiled out completely or the predicate/called function has observable side effects, there is no violation.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[MHD_get_daemon_info] entry: info_type=6 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] pre_assert_checks: info_type=6 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] before_switch: info_type=6 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] case_BIND_PORT_set_and_return: info_type=6 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] entry: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] pre_assert_checks: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] before_switch: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] case_FLAGS_set_and_return: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] entry: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] pre_assert_checks: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] before_switch: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] case_LISTEN_FD_set_and_return: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] entry: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] pre_assert_checks: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] before_switch: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] case_FLAGS_set_and_return: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] entry: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] pre_assert_checks: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] before_switch: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] case_LISTEN_FD_set_and_return: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] entry: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] pre_assert_checks: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] before_switch: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] case_FLAGS_set_and_return: info_type=5 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] entry: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] pre_assert_checks: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] before_switch: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info] case_LISTEN_FD_set_and_return: info_type=2 daemon=0x560807fd88d0\n  options=0x80001 worker_pool=(nil) tid_addr=0x560807fd8a28 tid_valid=0\n[MHD_get_daemon_info\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s argument is not categorically correct \u2014 the claim is conditional, not definitive. Whether the mhd_assert usage constitutes a MISRA 2.2 violation depends on the observable effects of the assertion and the functions it invokes. Rule 2.2 forbids operations that are executed but whose removal would not affect program behaviour. If, in your project build, mhd_assert merely evaluates the boolean expression (only reading non\u2011volatile state and calling functions that themselves have no observable side effects), and removal of that evaluation would not change program behaviour (including timing), then those executed checks would meet the definition of dead code and thus violate Rule 2.2. However, in many realistic cases the assertion macro or the called predicate may produce observable effects (logging, diagnostics, calling functions with side effects, invoking abort(), or reading volatile objects), or the presence/absence of the assertion may affect timing in an embedded system (note 1), in which case removal would alter behaviour and there is no dead\u2011code violation. Therefore the report is not definitely correct; you must inspect the mhd_assert macro and MHD_thread_handle_ID_is_valid_handle_ (and whether reads access volatile objects or the assertion emits diagnostics) and consider timing impacts to decide if a real Rule 2.2 violation exists."
}