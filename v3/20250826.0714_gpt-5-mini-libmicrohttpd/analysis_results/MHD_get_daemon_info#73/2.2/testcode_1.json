{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe case label for MHD_DAEMON_INFO_MAC_KEY_SIZE simply does 'return NULL;' while the switch's default case also returns NULL. Removing this case and its return statement would not change program behaviour (the default would handle that enum value), so the operation is redundant and constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_daemon_info code that contains useful probe functions that print useful logs to a file \"/tmp/logs/732.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_daemon_info as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_daemon_info:\n```c\n_MHD_EXTERN const union MHD_DaemonInfo *\nMHD_get_daemon_info (struct MHD_Daemon *daemon,\n                     enum MHD_DaemonInfoType info_type,\n                     ...)\n{\n  if (NULL == daemon)\n    return NULL;\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  switch (info_type)\n  {\n  case MHD_DAEMON_INFO_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_MAC_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_LISTEN_FD:\n    daemon->daemon_info_dummy_listen_fd.listen_fd = daemon->listen_fd;\n    return &daemon->daemon_info_dummy_listen_fd;\n  case MHD_DAEMON_INFO_EPOLL_FD:\n#ifdef EPOLL_SUPPORT\n    daemon->daemon_info_dummy_epoll_fd.epoll_fd = daemon->epoll_fd;\n    return &daemon->daemon_info_dummy_epoll_fd;\n#else  /* ! EPOLL_SUPPORT */\n    return NULL;\n#endif /* ! EPOLL_SUPPORT */\n  case MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n    if (! MHD_D_IS_THREAD_SAFE_ (daemon))\n      MHD_cleanup_connections (daemon);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    else if (daemon->worker_pool)\n    {\n      unsigned int i;\n      /* Collect the connection information stored in the workers. */\n      daemon->connections = 0;\n      for (i = 0; i < daemon->worker_pool_size; i++)\n      {\n        /* FIXME: next line is thread-safe only if read is atomic. */\n        daemon->connections += daemon->worker_pool[i].connections;\n      }\n    }\n#endif\n    daemon->daemon_info_dummy_num_connections.num_connections\n      = daemon->connections;\n    return &daemon->daemon_info_dummy_num_connections;\n  case MHD_DAEMON_INFO_FLAGS:\n    daemon->daemon_info_dummy_flags.flags = daemon->options;\n    return &daemon->daemon_info_dummy_flags;\n  case MHD_DAEMON_INFO_BIND_PORT:\n    daemon->daemon_info_dummy_port.port = daemon->port;\n    return &daemon->daemon_info_dummy_port;\n  default:\n    return NULL;\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_get_daemon_info code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/* Probe helpers: write logs to /tmp/logs/732.txt. */\nstatic void\nmhd_log_write (const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n  time_t t = time (NULL);\n\n  /* Try to ensure the directory exists. Ignore errors. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  f = fopen(\"/tmp/logs/732.txt\", \"a\");\n  if (! f)\n    return;\n\n  fprintf (f, \"[%ld] pid=%d: \", (long) t, (int) getpid ());\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n/* Attempt to pretty-print known info_type constants. */\nstatic const char *\nmhd_info_type_name (enum MHD_DaemonInfoType t)\n{\n  switch (t)\n  {\n    case MHD_DAEMON_INFO_KEY_SIZE: return \"MHD_DAEMON_INFO_KEY_SIZE\";\n    case MHD_DAEMON_INFO_MAC_KEY_SIZE: return \"MHD_DAEMON_INFO_MAC_KEY_SIZE\";\n    case MHD_DAEMON_INFO_LISTEN_FD: return \"MHD_DAEMON_INFO_LISTEN_FD\";\n    case MHD_DAEMON_INFO_EPOLL_FD: return \"MHD_DAEMON_INFO_EPOLL_FD\";\n    case MHD_DAEMON_INFO_CURRENT_CONNECTIONS: return \"MHD_DAEMON_INFO_CURRENT_CONNECTIONS\";\n    case MHD_DAEMON_INFO_FLAGS: return \"MHD_DAEMON_INFO_FLAGS\";\n    case MHD_DAEMON_INFO_BIND_PORT: return \"MHD_DAEMON_INFO_BIND_PORT\";\n    default: return \"<UNKNOWN>\";\n  }\n}\n\n_MHD_EXTERN const union MHD_DaemonInfo *\nMHD_get_daemon_info (struct MHD_Daemon *daemon,\n                     enum MHD_DaemonInfoType info_type,\n                     ...)\n{\n  if (NULL == daemon)\n  {\n    mhd_log_write (\"MHD_get_daemon_info called with daemon=NULL info_type=%d\",\n                   (int) info_type);\n    return NULL;\n  }\n\n  mhd_log_write (\"MHD_get_daemon_info ENTER daemon=%p info_type=%d (%s) options=0x%x\",\n                 (void *) daemon,\n                 (int) info_type,\n                 mhd_info_type_name (info_type),\n                 (unsigned) daemon->options);\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  switch (info_type)\n  {\n  case MHD_DAEMON_INFO_KEY_SIZE:\n    mhd_log_write (\"CASE MHD_DAEMON_INFO_KEY_SIZE: returning NULL (no longer supported)\");\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_MAC_KEY_SIZE:\n    /* Probe: log this specific case so we can reproduce/report the redundancy\n       vs. the default case returning NULL. */\n    mhd_log_write (\"CASE MHD_DAEMON_INFO_MAC_KEY_SIZE: returning NULL (no longer supported)\");\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_LISTEN_FD:\n    daemon->daemon_info_dummy_listen_fd.listen_fd = daemon->listen_fd;\n    mhd_log_write (\"CASE MHD_DAEMON_INFO_LISTEN_FD: listen_fd=%d returning address=%p\",\n                   daemon->listen_fd,\n                   (void *) &daemon->daemon_info_dummy_listen_fd);\n    return &daemon->daemon_info_dummy_listen_fd;\n  case MHD_DAEMON_INFO_EPOLL_FD:\n#ifdef EPOLL_SUPPORT\n    daemon->daemon_info_dummy_epoll_fd.epoll_fd = daemon->epoll_fd;\n    mhd_log_write (\"CASE MHD_DAEMON_INFO_EPOLL_FD: epoll_fd=%d returning address=%p\",\n                   daemon->epoll_fd,\n                   (void *) &daemon->daemon_info_dummy_epoll_fd);\n    return &daemon->daemon_info_dummy_epoll_fd;\n#else  /* ! EPOLL_SUPPORT */\n    mhd_log_write (\"CASE MHD_DAEMON_INFO_EPOLL_FD: EPOLL_SUPPORT not defined, returning NULL\");\n    return NULL;\n#endif /* ! EPOLL_SUPPORT */\n  case MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n    if (! MHD_D_IS_THREAD_SAFE_ (daemon))\n      MHD_cleanup_connections (daemon);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    else if (daemon->worker_pool)\n    {\n      unsigned int i;\n      /* Collect the connection information stored in the workers. */\n      daemon->connections = 0;\n      for (i = 0; i < daemon->worker_pool_size; i++)\n      {\n        /* FIXME: next line is thread-safe only if read is atomic. */\n        daemon->connections += daemon->worker_pool[i].connections;\n      }\n    }\n#endif\n    daemon->daemon_info_dummy_num_connections.num_connections\n      = daemon->connections;\n    mhd_log_write (\"CASE MHD_DAEMON_INFO_CURRENT_CONNECTIONS: connections=%u returning address=%p\",\n                   (unsigned) daemon->connections,\n                   (void *) &daemon->daemon_info_dummy_num_connections);\n    return &daemon->daemon_info_dummy_num_connections;\n  case MHD_DAEMON_INFO_FLAGS:\n    daemon->daemon_info_dummy_flags.flags = daemon->options;\n    mhd_log_write (\"CASE MHD_DAEMON_INFO_FLAGS: options=0x%x returning address=%p\",\n                   (unsigned) daemon->options,\n                   (void *) &daemon->daemon_info_dummy_flags);\n    return &daemon->daemon_info_dummy_flags;\n  case MHD_DAEMON_INFO_BIND_PORT:\n    daemon->daemon_info_dummy_port.port = daemon->port;\n    mhd_log_write (\"CASE MHD_DAEMON_INFO_BIND_PORT: port=%u returning address=%p\",\n                   (unsigned) daemon->port,\n                   (void *) &daemon->daemon_info_dummy_port);\n    return &daemon->daemon_info_dummy_port;\n  default:\n    mhd_log_write (\"DEFAULT: info_type=%d (%s) returning NULL\", (int) info_type, mhd_info_type_name (info_type));\n    return NULL;\n  }\n}\n"
}