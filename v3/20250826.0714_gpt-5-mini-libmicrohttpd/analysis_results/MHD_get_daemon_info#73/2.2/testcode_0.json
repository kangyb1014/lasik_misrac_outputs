{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert evaluates the boolean expression (reads daemon->options, daemon->worker_pool and calls MHD_thread_handle_ID_is_valid_handle_) and those evaluations have no observable side effects, then in normal (non\u2011failing) executions the assertion only performs checks and does not alter program behaviour. In that case the executed operations are removable without affecting program behaviour and therefore constitute dead code, violating MISRA C 2023 Rule 2.2. (If instead mhd_assert is compiled out completely or the predicate/called function has observable side effects, there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_daemon_info code that contains useful probe functions that print useful logs to a file \"/tmp/logs/732.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_daemon_info as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_daemon_info:\n```c\n_MHD_EXTERN const union MHD_DaemonInfo *\nMHD_get_daemon_info (struct MHD_Daemon *daemon,\n                     enum MHD_DaemonInfoType info_type,\n                     ...)\n{\n  if (NULL == daemon)\n    return NULL;\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  switch (info_type)\n  {\n  case MHD_DAEMON_INFO_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_MAC_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_LISTEN_FD:\n    daemon->daemon_info_dummy_listen_fd.listen_fd = daemon->listen_fd;\n    return &daemon->daemon_info_dummy_listen_fd;\n  case MHD_DAEMON_INFO_EPOLL_FD:\n#ifdef EPOLL_SUPPORT\n    daemon->daemon_info_dummy_epoll_fd.epoll_fd = daemon->epoll_fd;\n    return &daemon->daemon_info_dummy_epoll_fd;\n#else  /* ! EPOLL_SUPPORT */\n    return NULL;\n#endif /* ! EPOLL_SUPPORT */\n  case MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n    if (! MHD_D_IS_THREAD_SAFE_ (daemon))\n      MHD_cleanup_connections (daemon);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    else if (daemon->worker_pool)\n    {\n      unsigned int i;\n      /* Collect the connection information stored in the workers. */\n      daemon->connections = 0;\n      for (i = 0; i < daemon->worker_pool_size; i++)\n      {\n        /* FIXME: next line is thread-safe only if read is atomic. */\n        daemon->connections += daemon->worker_pool[i].connections;\n      }\n    }\n#endif\n    daemon->daemon_info_dummy_num_connections.num_connections\n      = daemon->connections;\n    return &daemon->daemon_info_dummy_num_connections;\n  case MHD_DAEMON_INFO_FLAGS:\n    daemon->daemon_info_dummy_flags.flags = daemon->options;\n    return &daemon->daemon_info_dummy_flags;\n  case MHD_DAEMON_INFO_BIND_PORT:\n    daemon->daemon_info_dummy_port.port = daemon->port;\n    return &daemon->daemon_info_dummy_port;\n  default:\n    return NULL;\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_get_daemon_info code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper. Appends execution/state info to /tmp/logs/732.txt.\n   Kept lightweight to avoid altering program logic. */\nstatic void mhd_probe_log(const char *tag, struct MHD_Daemon *daemon,\n                          enum MHD_DaemonInfoType info_type)\n{\n  FILE *f = fopen(\"/tmp/logs/732.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"[MHD_get_daemon_info] %s: info_type=%d daemon=%p\\n\",\n          tag, (int)info_type, (void *)daemon);\n  if (daemon != NULL)\n  {\n    /* Log the raw fields inspected by the assertions. Casts to unsigned long\n       / uintptr_t are used to produce portable prints of integral/pointer\n       representations without assuming exact types. */\n    unsigned long options_val = (unsigned long) daemon->options;\n    void *worker_pool_ptr = (void *) daemon->worker_pool;\n    uintptr_t tid_val = (uintptr_t) daemon->tid;\n    /* Call the same helper used in the assertion to log its result. This\n       duplicates the check but (per scenario) is assumed to be side-effect free.\n       If that call has side effects in the environment, the probe may alter\n       behaviour; the scenario under investigation assumes it does not. */\n    int tid_valid = MHD_thread_handle_ID_is_valid_handle_(daemon->tid);\n\n    fprintf(f, \"  options=0x%lx worker_pool=%p tid(raw)=%#tx tid_valid=%d\\n\",\n            options_val, worker_pool_ptr, (uintptr_t) tid_val, tid_valid);\n  }\n  fclose(f);\n}\n\n_MHD_EXTERN const union MHD_DaemonInfo *\nMHD_get_daemon_info (struct MHD_Daemon *daemon,\n                     enum MHD_DaemonInfoType info_type,\n                     ...)\n{\n  /* Log entry and parameters. */\n  mhd_probe_log(\"entry\", daemon, info_type);\n\n  if (NULL == daemon)\n  {\n    mhd_probe_log(\"daemon_null_return\", daemon, info_type);\n    return NULL;\n  }\n\n  /* Probe before assertions: record the values that the assertions would\n     inspect (daemon->options, daemon->worker_pool and the thread-handle\n     validity). This duplicates the reads/call performed by the assertions\n     but preserves original assertion lines to keep behaviour unchanged when\n     assertions are enabled/disabled by compilation. */\n  mhd_probe_log(\"pre_assert_checks\", daemon, info_type);\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  /* Log just before entering the switch to show that assertions passed\n     (or at least that execution reached this point). */\n  mhd_probe_log(\"before_switch\", daemon, info_type);\n\n  switch (info_type)\n  {\n  case MHD_DAEMON_INFO_KEY_SIZE:\n    mhd_probe_log(\"case_KEY_SIZE_return_null\", daemon, info_type);\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_MAC_KEY_SIZE:\n    mhd_probe_log(\"case_MAC_KEY_SIZE_return_null\", daemon, info_type);\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_LISTEN_FD:\n    daemon->daemon_info_dummy_listen_fd.listen_fd = daemon->listen_fd;\n    mhd_probe_log(\"case_LISTEN_FD_set_and_return\", daemon, info_type);\n    return &daemon->daemon_info_dummy_listen_fd;\n  case MHD_DAEMON_INFO_EPOLL_FD:\n#ifdef EPOLL_SUPPORT\n    daemon->daemon_info_dummy_epoll_fd.epoll_fd = daemon->epoll_fd;\n    mhd_probe_log(\"case_EPOLL_FD_set_and_return\", daemon, info_type);\n    return &daemon->daemon_info_dummy_epoll_fd;\n#else  /* ! EPOLL_SUPPORT */\n    mhd_probe_log(\"case_EPOLL_FD_return_null_no_support\", daemon, info_type);\n    return NULL;\n#endif /* ! EPOLL_SUPPORT */\n  case MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n    if (! MHD_D_IS_THREAD_SAFE_ (daemon))\n      MHD_cleanup_connections (daemon);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    else if (daemon->worker_pool)\n    {\n      unsigned int i;\n      /* Collect the connection information stored in the workers. */\n      daemon->connections = 0;\n      for (i = 0; i < daemon->worker_pool_size; i++)\n      {\n        /* FIXME: next line is thread-safe only if read is atomic. */\n        daemon->connections += daemon->worker_pool[i].connections;\n      }\n    }\n#endif\n    daemon->daemon_info_dummy_num_connections.num_connections\n      = daemon->connections;\n    mhd_probe_log(\"case_CURRENT_CONNECTIONS_set_and_return\", daemon, info_type);\n    return &daemon->daemon_info_dummy_num_connections;\n  case MHD_DAEMON_INFO_FLAGS:\n    daemon->daemon_info_dummy_flags.flags = daemon->options;\n    mhd_probe_log(\"case_FLAGS_set_and_return\", daemon, info_type);\n    return &daemon->daemon_info_dummy_flags;\n  case MHD_DAEMON_INFO_BIND_PORT:\n    daemon->daemon_info_dummy_port.port = daemon->port;\n    mhd_probe_log(\"case_BIND_PORT_set_and_return\", daemon, info_type);\n    return &daemon->daemon_info_dummy_port;\n  default:\n    mhd_probe_log(\"case_default_return_null\", daemon, info_type);\n    return NULL;\n  }\n}\n"
}