{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion mhd_assert(0 != token68_len); is redundant: token68_len is computed as i - token68_start where token68_start is set to the first non-whitespace character and the subsequent loop that advances i over the token executes at least once, so token68_len is guaranteed > 0. Thus the assert has no effect on program behaviour (its removal would not change behaviour), so it is executed but constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_bauth_params code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2442.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_bauth_params as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_bauth_params:\n```c\nstatic bool\nparse_bauth_params (const char *str,\n                    size_t str_len,\n                    struct MHD_RqBAuth *pbauth)\n{\n  size_t i;\n\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  if (str_len > i)\n  {\n    size_t token68_start;\n    size_t token68_len;\n\n    /* 'i' points to the first non-whitespace char after scheme token */\n    token68_start = i;\n    /* Find end of the token. Token cannot contain whitespace. */\n    while (i < str_len && ' ' != str[i] && '\\t' != str[i])\n    {\n      if (0 == str[i])\n        return false;  /* Binary zero is not allowed */\n      if ((',' == str[i]) || (';' == str[i]))\n        return false;  /* Only single token68 is allowed */\n      i++;\n    }\n    token68_len = i - token68_start;\n    mhd_assert (0 != token68_len);\n\n    /* Skip all whitespaces */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n    /* Check whether any garbage is present at the end of the string */\n    if (str_len != i)\n      return false;\n    else\n    {\n      /* No more data in the string, only single token68. */\n      pbauth->token68.str = str + token68_start;\n      pbauth->token68.len = token68_len;\n    }\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified parse_bauth_params code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Minimal definitions to allow this translation unit to compile and run tests. */\nstruct {\n  const char *str;\n  size_t len;\n};\n\nstruct MHD_RqBAuth {\n  struct {\n    const char *str;\n    size_t len;\n  } token68;\n};\n\n/* Probe logger: append messages to /tmp/logs/2442.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2442.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Minimal assertion implementation that logs and aborts on failure. */\nstatic void mhd_assert(int cond)\n{\n  if (!cond)\n  {\n    probe_log(\"ASSERTION FAILED: mhd_assert(%d)\", cond);\n    /* Preserve the usual assert behaviour by terminating the program. */\n    abort();\n  }\n}\n\nstatic bool\nparse_bauth_params (const char *str,\n                    size_t str_len,\n                    struct MHD_RqBAuth *pbauth)\n{\n  size_t i;\n\n  i = 0;\n\n  probe_log(\"parse_bauth_params: called with str_len=%zu\", str_len);\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n  {\n    probe_log(\"skipping whitespace at index=%zu char=%02x\", i, (unsigned char)str[i]);\n    i++;\n  }\n\n  probe_log(\"after initial skip i=%zu\", i);\n\n  if (str_len > i)\n  {\n    size_t token68_start;\n    size_t token68_len;\n\n    /* 'i' points to the first non-whitespace char after scheme token */\n    token68_start = i;\n    probe_log(\"token68_start=%zu (char=%02x)\", token68_start, (unsigned char)str[token68_start]);\n    /* Find end of the token. Token cannot contain whitespace. */\n    while (i < str_len && ' ' != str[i] && '\\t' != str[i])\n    {\n      probe_log(\"scanning token at index=%zu char=%02x\", i, (unsigned char)str[i]);\n      if (0 == str[i])\n      {\n        probe_log(\"binary zero encountered at index=%zu -> returning false\", i);\n        return false;  /* Binary zero is not allowed */\n      }\n      if ((',' == str[i]) || (';' == str[i]))\n      {\n        probe_log(\"separator char '%c' (0x%02x) encountered at index=%zu -> returning false\", str[i], (unsigned char)str[i], i);\n        return false;  /* Only single token68 is allowed */\n      }\n      i++;\n    }\n    token68_len = i - token68_start;\n    probe_log(\"computed token68_len=%zu (i=%zu token68_start=%zu)\", token68_len, i, token68_start);\n\n    /* Log before the assertion so callers can see the value that makes the assert redundant. */\n    probe_log(\"about to assert token68_len != 0 (observed %zu)\", token68_len);\n    mhd_assert (0 != token68_len);\n\n    /* Skip all whitespaces */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    {\n      probe_log(\"skipping trailing whitespace at index=%zu char=%02x\", i, (unsigned char)str[i]);\n      i++;\n    }\n    /* Check whether any garbage is present at the end of the string */\n    if (str_len != i)\n    {\n      probe_log(\"garbage at end of string: str_len=%zu i=%zu -> returning false\", str_len, i);\n      return false;\n    }\n    else\n    {\n      /* No more data in the string, only single token68. */\n      pbauth->token68.str = str + token68_start;\n      pbauth->token68.len = token68_len;\n      probe_log(\"success: token68 at offset=%zu len=%zu\", token68_start, token68_len);\n    }\n  }\n  else\n  {\n    probe_log(\"no token present (str_len=%zu i=%zu) -> considered success\", str_len, i);\n  }\n  probe_log(\"parse_bauth_params: returning true\");\n  return true;\n}\n"
}