{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'str' is declared as 'const char *'. If 'pbauth->token68.str' is declared as a non-const pointer (e.g. 'char *token68.str;'), then the assignment pbauth->token68.str = str + token68_start; discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. If, however, token68.str is declared as 'const char *', there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_bauth_params code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_bauth_params as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_bauth_params:\n```c\nstatic bool\nparse_bauth_params (const char *str,\n                    size_t str_len,\n                    struct MHD_RqBAuth *pbauth)\n{\n  size_t i;\n\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  if (str_len > i)\n  {\n    size_t token68_start;\n    size_t token68_len;\n\n    /* 'i' points to the first non-whitespace char after scheme token */\n    token68_start = i;\n    /* Find end of the token. Token cannot contain whitespace. */\n    while (i < str_len && ' ' != str[i] && '\\t' != str[i])\n    {\n      if (0 == str[i])\n        return false;  /* Binary zero is not allowed */\n      if ((',' == str[i]) || (';' == str[i]))\n        return false;  /* Only single token68 is allowed */\n      i++;\n    }\n    token68_len = i - token68_start;\n    mhd_assert (0 != token68_len);\n\n    /* Skip all whitespaces */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n    /* Check whether any garbage is present at the end of the string */\n    if (str_len != i)\n      return false;\n    else\n    {\n      /* No more data in the string, only single token68. */\n      pbauth->token68.str = str + token68_start;\n      pbauth->token68.len = token68_len;\n    }\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified parse_bauth_params code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Probe logging helper. Writes human-readable trace to /tmp/logs/2443.txt */\nstatic void\nmhd_probe_log(const char *phase,\n              const char *str,\n              size_t str_len,\n              size_t i,\n              size_t token68_start,\n              size_t token68_len,\n              const void *pbauth_void)\n{\n  FILE *f = fopen(\"/tmp/logs/2443.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  time_t t = time(NULL);\n  (void)fprintf(f, \"[%ld] PHASE: %s\\n\", (long)t, phase);\n  (void)fprintf(f, \"  str (base) = %p, str_len = %zu, i = %zu\\n\", (const void *)str, str_len, i);\n  (void)fprintf(f, \"  token68_start = %zu, token68_len = %zu\\n\", token68_start, token68_len);\n  (void)fprintf(f, \"  pbauth pointer = %p\\n\", pbauth_void);\n\n  /* Print a short preview of the token bytes (up to 64 bytes) */\n  if (str != NULL && token68_len > 0 && token68_start < str_len)\n  {\n    size_t preview = token68_len;\n    if (preview > 64u)\n      preview = 64u;\n    (void)fprintf(f, \"  token preview (first %zu bytes):\\n    \", preview);\n    for (size_t k = 0; k < preview && (token68_start + k) < str_len; ++k)\n    {\n      unsigned char c = (unsigned char)str[token68_start + k];\n      /* Print printable as char, otherwise as hex */\n      if (c >= 32u && c <= 126u)\n        (void)fprintf(f, \"%c\", (char)c);\n      else\n        (void)fprintf(f, \"\\\\x%02X\", c);\n    }\n    (void)fprintf(f, \"\\n\");\n  }\n  else\n  {\n    (void)fprintf(f, \"  token preview: <none>\\n\");\n  }\n\n  (void)fprintf(f, \"---\\n\");\n  (void)fclose(f);\n}\n\nstatic bool\nparse_bauth_params (const char *str,\n                    size_t str_len,\n                    struct MHD_RqBAuth *pbauth)\n{\n  size_t i;\n\n  i = 0;\n\n  /* Initial probe: entry state */\n  mhd_probe_log(\"entry\", str, str_len, i, 0, 0, (const void *)pbauth);\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  /* Probe after skipping leading whitespace */\n  mhd_probe_log(\"after_leading_ws\", str, str_len, i, 0, 0, (const void *)pbauth);\n\n  if (str_len > i)\n  {\n    size_t token68_start;\n    size_t token68_len;\n\n    /* 'i' points to the first non-whitespace char after scheme token */\n    token68_start = i;\n    /* Find end of the token. Token cannot contain whitespace. */\n    while (i < str_len && ' ' != str[i] && '\\t' != str[i])\n    {\n      if (0 == str[i])\n      {\n        /* Log the reason for failure (binary zero found) */\n        mhd_probe_log(\"binary_zero_found\", str, str_len, i, token68_start, 0, (const void *)pbauth);\n        return false;  /* Binary zero is not allowed */\n      }\n      if ((',' == str[i]) || (';' == str[i]))\n      {\n        /* Log the reason for failure (delimiter found) */\n        mhd_probe_log(\"delimiter_found\", str, str_len, i, token68_start, 0, (const void *)pbauth);\n        return false;  /* Only single token68 is allowed */\n      }\n      i++;\n    }\n    token68_len = i - token68_start;\n    mhd_assert (0 != token68_len);\n\n    /* Probe after token scanning */\n    mhd_probe_log(\"after_token_scan\", str, str_len, i, token68_start, token68_len, (const void *)pbauth);\n\n    /* Skip all whitespaces */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n    /* Check whether any garbage is present at the end of the string */\n    if (str_len != i)\n    {\n      /* Log trailing garbage */\n      mhd_probe_log(\"trailing_garbage\", str, str_len, i, token68_start, token68_len, (const void *)pbauth);\n      return false;\n    }\n    else\n    {\n      /* No more data in the string, only single token68. */\n\n      /* Probe right before assignment */\n      mhd_probe_log(\"before_assignment\", str, str_len, i, token68_start, token68_len, (const void *)pbauth);\n\n      pbauth->token68.str = str + token68_start;\n      pbauth->token68.len = token68_len;\n\n      /* Probe right after assignment: log the resulting pointer value and len */\n      mhd_probe_log(\"after_assignment\", str, str_len, i, token68_start, token68_len, (const void *)pbauth);\n    }\n  }\n\n  /* Final probe: normal return */\n  mhd_probe_log(\"exit_success\", str, str_len, i, 0, 0, (const void *)pbauth);\n\n  return true;\n}\n"
}