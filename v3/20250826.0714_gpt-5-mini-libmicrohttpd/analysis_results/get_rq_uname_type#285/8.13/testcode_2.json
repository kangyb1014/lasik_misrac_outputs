{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf params->username_ext.value.str is declared as a non-const pointer (e.g. char *value.str), this fragment violates MISRA C 2023 Rule 8.13. The function takes a const struct MHD_RqDAuth *params, so pointed-to character data is not intended to be modified here and the pointer type should be const-qualified (e.g. const char *value.str). Checking it for NULL does not remove the need for the pointer-to-char to be const-qualified. If, however, value.str is already declared as const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname_type code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname_type as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname_type:\n```c\n_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  if (NULL != params->username.value.str)\n  {\n    if (NULL == params->username_ext.value.str)\n      return params->userhash ?\n             MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n             MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n    else  /* Both 'username' and 'username*' are used */\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  else if (NULL != params->username_ext.value.str)\n  {\n    if (! params->username_ext.quoted && ! params->userhash &&\n        (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n      return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n    else\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname_type code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logger: write control flow and key state to /tmp/logs/2853.txt */\nstatic void mhd_log_rqdauth(const struct MHD_RqDAuth *params, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/2853.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"stage=%s, params=%p\\n\", stage, (void *)params);\n  if (NULL != params)\n  {\n    /* Log pointer values and key flags/lengths to help reproduce pointer constness issues */\n    fprintf(f, \" username.value.str=%p, username.value.len=%zu\\n\",\n            (void *)params->username.value.str,\n            (size_t)params->username.value.len);\n    fprintf(f, \" username_ext.value.str=%p, username_ext.value.len=%zu\\n\",\n            (void *)params->username_ext.value.str,\n            (size_t)params->username_ext.value.len);\n    fprintf(f, \" username_ext.quoted=%d, userhash=%d\\n\",\n            params->username_ext.quoted ? 1 : 0,\n            params->userhash ? 1 : 0);\n  }\n\n  fclose(f);\n}\n\n_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  /* Entry probe */\n  mhd_log_rqdauth(params, \"entry\");\n\n  if (NULL != params->username.value.str)\n  {\n    /* username present */\n    mhd_log_rqdauth(params, \"username_present\");\n\n    if (NULL == params->username_ext.value.str)\n    {\n      /* username_ext missing -> decide between userhash or standard */\n      mhd_log_rqdauth(params, \"username_ext_missing_deciding_userhash\");\n      return params->userhash ?\n             MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n             MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n    }\n    else  /* Both 'username' and 'username*' are used */\n    {\n      mhd_log_rqdauth(params, \"both_username_and_username_ext_used_invalid\");\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n  }\n  else if (NULL != params->username_ext.value.str)\n  {\n    /* username missing, username_ext present */\n    mhd_log_rqdauth(params, \"username_missing_ext_present\");\n\n    if (! params->username_ext.quoted && ! params->userhash &&\n        (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n    {\n      mhd_log_rqdauth(params, \"username_ext_valid_extended\");\n      return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n    }\n    else\n    {\n      mhd_log_rqdauth(params, \"username_ext_invalid\");\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n  }\n\n  mhd_log_rqdauth(params, \"missing\");\n  return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}\n"
}