{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a pointer to const struct (const struct MHD_RqDAuth *params) and only reads params->username.value.str (it compares it to NULL). If the member username.value.str is declared as a pointer to non-const (e.g. char *str), then the pointer points to a non-const-qualified target while only being used for read-only purposes. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type (e.g. const char *str) whenever possible. Therefore this use constitutes a violation: the member should be changed to point to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname_type code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname_type as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname_type:\n```c\n_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  if (NULL != params->username.value.str)\n  {\n    if (NULL == params->username_ext.value.str)\n      return params->userhash ?\n             MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n             MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n    else  /* Both 'username' and 'username*' are used */\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  else if (NULL != params->username_ext.value.str)\n  {\n    if (! params->username_ext.quoted && ! params->userhash &&\n        (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n      return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n    else\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname_type code.\n",
  "test_code": "/* Probe helper: logs control flow and state to /tmp/logs/2853.txt */\nstatic void mhd_log_uname_probe(const struct MHD_RqDAuth *p,\n                                 const char *stage,\n                                 enum MHD_DigestAuthUsernameType ret,\n                                 int have_ret)\n{\n    FILE *f = fopen(\"/tmp/logs/2853.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log a short stage description and key state values used by get_rq_uname_type */\n        fprintf(f, \"get_rq_uname_type: stage=%s\\n\", stage);\n        fprintf(f, \" params=%p\\n\", (const void *)p);\n        /* Print pointer values and integer flags/lengths used in branch decisions */\n        fprintf(f, \" username.value.str=%p\\n\",\n                (const void *)(p->username.value.str));\n        fprintf(f, \" username_ext.value.str=%p\\n\",\n                (const void *)(p->username_ext.value.str));\n        fprintf(f, \" userhash=%d\\n\", (int)(p->userhash));\n        fprintf(f, \" username_ext.quoted=%d\\n\", (int)(p->username_ext.quoted));\n        fprintf(f, \" username_ext.value.len=%zu\\n\",\n                (size_t)(p->username_ext.value.len));\n        if (have_ret)\n        {\n            fprintf(f, \" returning=%d\\n\", (int)ret);\n        }\n        fprintf(f, \"----\\n\");\n        fclose(f);\n    }\n}\n\n_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  if (NULL != params->username.value.str)\n  {\n    if (NULL == params->username_ext.value.str)\n    {\n      enum MHD_DigestAuthUsernameType r = params->userhash ?\n             MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n             MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n      mhd_log_uname_probe(params, \"username present, ext missing\", r, 1);\n      return r;\n    }\n    else  /* Both 'username' and 'username*' are used */\n    {\n      mhd_log_uname_probe(params, \"both username and username_ext present\",\n                           MHD_DIGEST_AUTH_UNAME_TYPE_INVALID, 1);\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n  }\n  else if (NULL != params->username_ext.value.str)\n  {\n    if (! params->username_ext.quoted && ! params->userhash &&\n        (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n    {\n      mhd_log_uname_probe(params, \"username absent, ext valid for extended\",\n                           MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED, 1);\n      return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n    }\n    else\n    {\n      mhd_log_uname_probe(params, \"username absent, ext invalid\",\n                           MHD_DIGEST_AUTH_UNAME_TYPE_INVALID, 1);\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n  }\n\n  mhd_log_uname_probe(params, \"missing both username and username_ext\",\n                       MHD_DIGEST_AUTH_UNAME_TYPE_MISSING, 1);\n  return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}\n"
}