{
  "user_message": "An agent A claimed that the following keepalive_possible code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of keepalive_possible.\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local alias 'c' is declared as 'struct MHD_Connection *const c = connection;' \u2014 a constant pointer to a non-const object. In this function 'c' is only used for read-only access, so the pointed-to type could (and per MISRA 8.13 should) be const-qualified. A better declaration would be 'const struct MHD_Connection *const c = connection;'. If calls made with 'c' require a non-const parameter, then making it point-to-const may not be possible without wider API changes; otherwise the current code violates the guidance of Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[keepalive] stage=start c=0x55dab29ffdf0 r=0x55dab2a080c0 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler c=0x55dab29ffdf0 r=0x55dab2a080c0 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=start c=0x55dab2a08a80 r=0x55dab2a08cd0 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler c=0x55dab2a08a80 r=0x55dab2a08cd0 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=start c=0x55dab2a00090 r=0x55dab2a09290 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler c=0x55dab2a00090 r=0x55dab2a09290 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=start c=0x7f1cf4000b90 r=0x7f1cfc000b90 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler c=0x7f1cf4000b90 r=0x7f1cfc000b90 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=start c=0x7f1cf4000b90 r=0x7f1cf8000b90 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler c=0x7f1cf4000b90 r=0x7f1cf8000b90 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=start c=0x7f1cf4000b90 r=0x7f1cf8000b90 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler c=0x7f1cf4000b90 r=0x7f1cf8000b90 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=start c=0x7f1cf4000b90 r=0x7f1cf4008f40 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler c=0x7f1cf4000b90 r=0x7f1cf4008f40 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=start c=0x7f1cf4000b90 r=0x7f1cf4008f40 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler c=0x7f1cf4000b90 r=0x7f1cf4008f40 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=start c=0x7f1cf4000b90 r=0x7f1cf4008f40 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler c=0x7f1cf4000b90 r=0x7f1cf4008f40 keepalive=0 http_ver=3 stop_with_error=0 read_closed=0 discard_request=1 r_flags=0x00000000 r_flags_auto=0x00000001 upgrade_handler=0x55da7792faf0\n[keepalive] stage=s\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In this function the local alias c is only used for read-only access (field reads and calls that do not modify *c), so it can and should be declared to point to a const-qualified type (for example: \"const struct MHD_Connection *const c = connection;\"). Under MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible. Because the code does not perform any modifications through c, the current declaration (pointer to non-const) violates that guidance. The only caveat is if some called APIs require a non-const pointer type; in that case making c point-to-const might not be feasible without changing call sites or API signatures. Given the code shown, however, agent A\u2019s report is correct."
}