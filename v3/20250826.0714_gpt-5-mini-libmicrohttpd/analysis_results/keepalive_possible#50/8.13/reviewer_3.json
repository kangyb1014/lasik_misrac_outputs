{
  "user_message": "An agent A claimed that the following keepalive_possible code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of keepalive_possible.\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local alias is declared as 'struct MHD_Response *const r' (a constant pointer to a non-const MHD_Response). In the function r is only used for read-only accesses (r->upgrade_handler, r->flags_auto, r->flags, etc.), so the pointed-to type can and should be const-qualified. According to MISRA C 2023 Rule 8.13 the pointer target should be const whenever possible. Change the declaration to 'const struct MHD_Response *const r' (or 'struct MHD_Response const *const r') to comply.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[keepalive] stage=entry_aliases c=0x55f61d014df0 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x55f61d01d0c0 r=0x55f61d01d0c0\n[keepalive] stage=entry_aliases r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=after_assert_r_not_null c=0x55f61d014df0 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x55f61d01d0c0 r=0x55f61d01d0c0\n[keepalive] stage=after_assert_r_not_null r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=must_upgrade c=0x55f61d014df0 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x55f61d01d0c0 r=0x55f61d01d0c0\n[keepalive] stage=must_upgrade r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=must_upgrade extra=r->upgrade_handler != NULL -> upgrade\n[keepalive] stage=entry_aliases c=0x55f61d01da80 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x55f61d01dcd0 r=0x55f61d01dcd0\n[keepalive] stage=entry_aliases r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=after_assert_r_not_null c=0x55f61d01da80 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x55f61d01dcd0 r=0x55f61d01dcd0\n[keepalive] stage=after_assert_r_not_null r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=must_upgrade c=0x55f61d01da80 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x55f61d01dcd0 r=0x55f61d01dcd0\n[keepalive] stage=must_upgrade r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=must_upgrade extra=r->upgrade_handler != NULL -> upgrade\n[keepalive] stage=entry_aliases c=0x55f61d015090 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x55f61d01e290 r=0x55f61d01e290\n[keepalive] stage=entry_aliases r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=after_assert_r_not_null c=0x55f61d015090 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x55f61d01e290 r=0x55f61d01e290\n[keepalive] stage=after_assert_r_not_null r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=must_upgrade c=0x55f61d015090 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x55f61d01e290 r=0x55f61d01e290\n[keepalive] stage=must_upgrade r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=must_upgrade extra=r->upgrade_handler != NULL -> upgrade\n[keepalive] stage=entry_aliases c=0x7f726c000b90 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x7f7274000b90 r=0x7f7274000b90\n[keepalive] stage=entry_aliases r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=after_assert_r_not_null c=0x7f726c000b90 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x7f7274000b90 r=0x7f7274000b90\n[keepalive] stage=after_assert_r_not_null r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=must_upgrade c=0x7f726c000b90 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x7f7274000b90 r=0x7f7274000b90\n[keepalive] stage=must_upgrade r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=must_upgrade extra=r->upgrade_handler != NULL -> upgrade\n[keepalive] stage=entry_aliases c=0x7f726c000b90 keepalive=0 rq.http_ver=3 stop_with_error=0 discard_request=1 read_closed=0 rp.response=0x7f7270000b90 r=0x7f7270000b90\n[keepalive] stage=entry_aliases r->upgrade_handler=0x55f60e3c9af0 r->flags_auto=0x00000001 r->flags=0x00000000\n[keepalive] stage=after_assert_r_not_null c=0x7f726c000b90 keepalive=0 rq.http_ver=3\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In keepalive_possible the local alias r is declared as \"struct MHD_Response *const r\" (a const pointer to a non-const MHD_Response) but all uses in the function are read-only (r->upgrade_handler, r->flags_auto, r->flags, etc.). According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible. Changing the declaration to \"const struct MHD_Response *const r\" (or the equivalent placement of const) would satisfy the rule and is safe here: assigning the non-const c->rp.response to a pointer-to-const is permitted and the code only performs reads through r. The execution log also shows only read accesses. (One caveat: if later code in the function or callees needed to modify the response through r, adding const would be inappropriate; that is not the case here.)"
}