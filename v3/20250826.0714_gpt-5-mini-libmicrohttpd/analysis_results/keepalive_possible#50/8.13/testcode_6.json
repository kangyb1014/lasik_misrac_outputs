{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function MHD_lookup_header_s_token_ci has a non-const parameter for the token (e.g. prototype uses 'char *token'), then this call is a violation: a string literal \"close\" is being passed to a non-const pointer. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible, so the function parameter should be declared as 'const char *' (and likewise the connection parameter should be 'const struct MHD_Connection *' if the function only reads it).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void mhd_logf (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/503.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fclose (f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n\n  mhd_logf (\"keepalive_possible: entry connection=%p c=%p r=%p\\n\",\n            (void *) connection, (void *) c, (void *) r);\n  /* Log some relevant state used in branch decisions */\n  mhd_logf (\"state: c->keepalive=%d c->rq.http_ver=%d c->read_closed=%d c->discard_request=%d c->stop_with_error=%d\\n\",\n            (int) c->keepalive,\n            (int) c->rq.http_ver,\n            (int) c->read_closed,\n            (int) c->discard_request,\n            (int) c->stop_with_error);\n  mhd_logf (\"response: r->flags=0x%08x r->flags_auto=0x%08x r->upgrade_handler=%p\\n\",\n            (unsigned) r->flags,\n            (unsigned) r->flags_auto,\n            (void *) r->upgrade_handler);\n\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_logf (\"decision: early MUST_CLOSE because c->keepalive == MHD_CONN_MUST_CLOSE\\n\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    mhd_logf (\"decision: MUST_UPGRADE because r->upgrade_handler != NULL\\n\");\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_logf (\"decision: MUST_CLOSE because read_closed || discard_request\\n\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_logf (\"decision: MUST_CLOSE because response flags indicate HTTP/1.0 strict\\n\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_logf (\"decision: MUST_CLOSE because response has Connection: close header (flags_auto)\\n\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    mhd_logf (\"decision: MUST_CLOSE because HTTP version not supported (http_ver=%d)\\n\",\n              (int) c->rq.http_ver);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Probe the call that is reported as a potential MISRA violation scenario. */\n  mhd_logf (\"about to call MHD_lookup_header_s_token_ci with token literal \\\"close\\\" (addr=%p)\\n\",\n            (void *) \"close\");\n  {\n    int found = MHD_lookup_header_s_token_ci (c,\n                                              MHD_HTTP_HEADER_CONNECTION,\n                                              \"close\");\n    mhd_logf (\"MHD_lookup_header_s_token_ci(token=\\\"close\\\") returned %d\\n\",\n              found);\n    if (found)\n    {\n      mhd_logf (\"decision: MUST_CLOSE because Connection: close header present\\n\");\n      return MHD_CONN_MUST_CLOSE;\n    }\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    mhd_logf (\"entering HTTP/1.0 or server-1.0 branch (http_ver=%d, response->flags=0x%08x)\\n\",\n              (int) connection->rq.http_ver,\n              (unsigned) connection->rp.response->flags);\n\n    mhd_logf (\"about to call MHD_lookup_header_s_token_ci with token literal \\\"Keep-Alive\\\" (addr=%p)\\n\",\n              (void *) \"Keep-Alive\");\n    {\n      int found = MHD_lookup_header_s_token_ci (connection,\n                                                MHD_HTTP_HEADER_CONNECTION,\n                                                \"Keep-Alive\");\n      mhd_logf (\"MHD_lookup_header_s_token_ci(token=\\\"Keep-Alive\\\") returned %d\\n\",\n                found);\n      if (found)\n      {\n        mhd_logf (\"decision: USE_KEEPALIVE because Connection: Keep-Alive header present\\n\");\n        return MHD_CONN_USE_KEEPALIVE;\n      }\n    }\n\n    mhd_logf (\"decision: MUST_CLOSE in HTTP/1.0 branch (no Keep-Alive header)\\n\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_logf (\"decision: USE_KEEPALIVE because HTTP version is 1.1 compatible (http_ver=%d)\\n\",\n              (int) c->rq.http_ver);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_logf (\"decision: MUST_CLOSE (default)\\n\");\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}