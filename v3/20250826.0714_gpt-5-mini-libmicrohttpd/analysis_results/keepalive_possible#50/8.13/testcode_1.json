{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a non-const pointer parameter (struct MHD_Connection *connection) and uses it only to read fields. In the fragment the code reads connection->rq.http_ver and connection->rp.response->flags through that non-const pointer. Also the local alias is declared as 'struct MHD_Connection *const c' (a const pointer to mutable data) rather than 'const struct MHD_Connection *' (pointer to const). Because the pointed-to data is not modified and could be const-qualified, Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "static void mhd_log_keepalive_probe (struct MHD_Connection *connection,\n                                         const char *stage,\n                                         struct MHD_Response *r)\n{\n  FILE *f = fopen(\"/tmp/logs/503.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log basic pointer/field state used by keepalive_possible. Avoid\n     modifying any state \u2014 only read. Cast to (void *) for pointer printing\n     and to unsigned long for integer-like fields to be safe. */\n  fprintf (f, \"STAGE=%s\\n\", stage ?: \"(null)\");\n  fprintf (f, \" connection=%p\\n\", (void *) connection);\n  if (NULL != connection)\n  {\n    fprintf (f, \"  keepalive=%lu\\n\", (unsigned long) connection->keepalive);\n    fprintf (f, \"  rq.http_ver=%lu\\n\", (unsigned long) connection->rq.http_ver);\n    fprintf (f, \"  stop_with_error=%lu\\n\", (unsigned long) connection->stop_with_error);\n    fprintf (f, \"  read_closed=%lu\\n\", (unsigned long) connection->read_closed);\n    fprintf (f, \"  discard_request=%lu\\n\", (unsigned long) connection->discard_request);\n    fprintf (f, \"  rp.response=%p\\n\", (void *) (connection->rp.response));\n  }\n  if (NULL != r)\n  {\n    fprintf (f, \" response=%p\\n\", (void *) r);\n    fprintf (f, \"  flags=0x%lx\\n\", (unsigned long) r->flags);\n    fprintf (f, \"  flags_auto=0x%lx\\n\", (unsigned long) r->flags_auto);\n    fprintf (f, \"  upgrade_handler=%p\\n\", (void *) r->upgrade_handler);\n  }\n  fprintf (f, \"----\\n\");\n  fclose (f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log entry state */\n  mhd_log_keepalive_probe (connection, \"entry\", r);\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_log_keepalive_probe (connection, \"keepalive==MHD_CONN_MUST_CLOSE\", r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    mhd_log_keepalive_probe (connection, \"upgrade_handler != NULL -> MUST_UPGRADE\", r);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_log_keepalive_probe (connection, \"read_closed || discard_request -> MUST_CLOSE\", r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_log_keepalive_probe (connection, \"RF_HTTP_1_0_COMPATIBLE_STRICT -> MUST_CLOSE\", r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_log_keepalive_probe (connection, \"RAF_HAS_CONNECTION_CLOSE -> MUST_CLOSE\", r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    mhd_log_keepalive_probe (connection, \"!HTTP_VER_SUPPORTED -> MUST_CLOSE\", r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* This lookup may be somewhat expensive; preserve behavior by calling\n     exactly as before but capture the result so we can log it prior to\n     returning. */\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    mhd_log_keepalive_probe (connection, \"Connection: close header present -> MUST_CLOSE\", r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      mhd_log_keepalive_probe (connection, \"HTTP/1.0 and Connection: Keep-Alive -> USE_KEEPALIVE\", r);\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_log_keepalive_probe (connection, \"HTTP/1.0 and no Keep-Alive -> MUST_CLOSE\", r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_log_keepalive_probe (connection, \"HTTP/1.1 compat -> USE_KEEPALIVE\", r);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_log_keepalive_probe (connection, \"default -> MUST_CLOSE\", r);\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}