{
  "user_message": "An agent A claimed that the following keepalive_possible code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of keepalive_possible.\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function never modifies the object pointed to by 'connection' (only reads fields and calls helpers). The parameter is declared as 'struct MHD_Connection *connection' rather than 'const struct MHD_Connection *connection', and the local alias 'struct MHD_Connection *const c' makes the pointer itself const but not the pointee. Therefore the pointer could and should point to a const-qualified type. Change the signature to 'keepalive_possible(const struct MHD_Connection *connection)' (and update callees like MHD_lookup_header_s_token_ci if they accept const) to comply with Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-26 09:14:45 keepalive_possible: entry\n  connection=0x559f6f294df0\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x559f6f29d0c0\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:45 keepalive_possible: must_upgrade_due_to_upgrade_handler\n  connection=0x559f6f294df0\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x559f6f29d0c0\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:45 keepalive_possible: entry\n  connection=0x559f6f29dc60\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x559f6f29deb0\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:45 keepalive_possible: must_upgrade_due_to_upgrade_handler\n  connection=0x559f6f29dc60\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x559f6f29deb0\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:45 keepalive_possible: entry\n  connection=0x559f6f295090\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x559f6f29e470\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:45 keepalive_possible: must_upgrade_due_to_upgrade_handler\n  connection=0x559f6f295090\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x559f6f29e470\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:45 keepalive_possible: entry\n  connection=0x7fd374000b90\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x7fd37c000b90\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:45 keepalive_possible: must_upgrade_due_to_upgrade_handler\n  connection=0x7fd374000b90\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x7fd37c000b90\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:46 keepalive_possible: entry\n  connection=0x7fd374000b90\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x7fd378000b90\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:46 keepalive_possible: must_upgrade_due_to_upgrade_handler\n  connection=0x7fd374000b90\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x7fd378000b90\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:46 keepalive_possible: entry\n  connection=0x7fd374000b90\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x7fd37c000b90\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:46 keepalive_possible: must_upgrade_due_to_upgrade_handler\n  connection=0x7fd374000b90\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x7fd37c000b90\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:46 keepalive_possible: entry\n  connection=0x7fd374000b90\n  keepalive=0\n  read_closed=0\n  discard_request=1\n  stop_with_error=0\n  rq.http_ver=3\n  rp.response=0x7fd374008f40\n  response->flags=0x00000000\n  response->flags_auto=0x00000001\n  response->upgrade_handler=0x559f507b8af0\n\n2025-08-26 09:14:46 keepalive_possible: must_upgrade_due_to_upgrade_\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function never modifies the MHD_Connection object it points to and only reads its fields (and forwards the pointer to helpers). Declaring the parameter as struct MHD_Connection *connection leaves the pointee unqualified; the local alias struct MHD_Connection *const c only makes the pointer itself const, not the pointee. MISRA C 2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible, so the parameter should be const-qualified (e.g. const struct MHD_Connection *connection) unless doing so is impossible because of incompatible callees or required mutations. If helper functions such as MHD_lookup_header_s_token_ci have non-const prototypes, either those should be updated to accept const or an explicit justified deviation is needed. Therefore the reported violation is valid."
}