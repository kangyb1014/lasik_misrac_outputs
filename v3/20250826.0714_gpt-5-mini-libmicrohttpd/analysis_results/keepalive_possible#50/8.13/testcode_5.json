{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local alias 'c' is declared as 'struct MHD_Connection *const c = connection;' \u2014 a constant pointer to a non-const object. In this function 'c' is only used for read-only access, so the pointed-to type could (and per MISRA 8.13 should) be const-qualified. A better declaration would be 'const struct MHD_Connection *const c = connection;'. If calls made with 'c' require a non-const parameter, then making it point-to-const may not be possible without wider API changes; otherwise the current code violates the guidance of Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe/logging functions to capture control flow and state for keepalive_possible. */\nstatic void\nmhd_log_keepalive_state (const struct MHD_Connection *c,\n                         const struct MHD_Response *r,\n                         const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/503.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n\n  /* Safe guards: r may be NULL in non-assert builds, so avoid dereferencing if so. */\n  if (NULL != r)\n  {\n    fprintf (f,\n             \"[keepalive] stage=%s c=%p r=%p keepalive=%d http_ver=%d stop_with_error=%d read_closed=%d discard_request=%d r_flags=0x%08x r_flags_auto=0x%08x upgrade_handler=%p\\n\",\n             stage,\n             (const void *) c,\n             (const void *) r,\n             (int) c->keepalive,\n             (int) c->rq.http_ver,\n             (int) c->stop_with_error,\n             (int) c->read_closed,\n             (int) c->discard_request,\n             (unsigned int) r->flags,\n             (unsigned int) r->flags_auto,\n             (const void *) r->upgrade_handler);\n  }\n  else\n  {\n    fprintf (f,\n             \"[keepalive] stage=%s c=%p r=NULL keepalive=%d http_ver=%d stop_with_error=%d read_closed=%d discard_request=%d\\n\",\n             stage,\n             (const void *) c,\n             (int) c->keepalive,\n             (int) c->rq.http_ver,\n             (int) c->stop_with_error,\n             (int) c->read_closed,\n             (int) c->discard_request);\n  }\n\n  fclose (f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log initial state right after aliasing to show the alias and fields used read-only. */\n  mhd_log_keepalive_state (c, r, \"start\");\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_log_keepalive_state (c, r, \"return_MHD_CONN_MUST_CLOSE_due_keepalive_field\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n\n    mhd_log_keepalive_state (c, r, \"return_MHD_CONN_MUST_UPGRADE_due_upgrade_handler\");\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n\n  /* Log state before checking read_closed / discard_request */\n  mhd_log_keepalive_state (c, r, \"before_read_closed_discard_request_check\");\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_log_keepalive_state (c, r, \"return_MHD_CONN_MUST_CLOSE_due_read_closed_or_discard_request\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_log_keepalive_state (c, r, \"return_MHD_CONN_MUST_CLOSE_due_1_0_compatible_strict_flag\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_log_keepalive_state (c, r, \"return_MHD_CONN_MUST_CLOSE_due_flags_auto_connection_close\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    mhd_log_keepalive_state (c, r, \"return_MHD_CONN_MUST_CLOSE_due_http_ver_not_supported\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Check \"Connection: close\" token. Capture decision in a local variable so we can log it. */\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    mhd_log_keepalive_state (c, r, \"return_MHD_CONN_MUST_CLOSE_due_connection_close_header\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    /* For logging and reproducibility, evaluate the Keep-Alive lookup here and log it. */\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      mhd_log_keepalive_state (c, r, \"return_MHD_CONN_USE_KEEPALIVE_due_http_1_0_and_keep_alive_header\");\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_log_keepalive_state (c, r, \"return_MHD_CONN_MUST_CLOSE_http_1_0_no_keepalive_header\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_log_keepalive_state (c, r, \"return_MHD_CONN_USE_KEEPALIVE_http_1_1_compat\");\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_log_keepalive_state (c, r, \"return_MHD_CONN_MUST_CLOSE_default\");\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}