{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_str_to_uint64_:\n```c\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    str++;\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided function. Specifically:\n- There are no GCC/Clang/MSVC extension tokens or constructs such as __attribute__, __builtin_*, __asm, __extension__, typeof, statement expressions ({ ... }), nested functions, or inline assembly.\n- No C++-only features are present (no references, templates, classes, new/delete, etc.).\n- No vendor-specific pragmas or nonstandard storage-class specifiers are used.\n- The integer types (uint64_t, UINT64_MAX) and size_t are standard C (C99 and later) types/macros from the standard headers, and the casts used are ordinary C casts.\n- The do/while loop, const qualifiers, pointer arithmetic, and explicit casts are standard C language constructs.\n\nNote on isasciidigit: this identifier appears to be a library function or macro, not a compiler language extension. MISRA Rule 1.2 concerns language/compiler extensions; library functions or nonstandard library APIs are not language extensions per that rule, so isasciidigit is not flagged here. If investigation of nonstandard library use is required, that is outside the scope of Rule 1.2 and should be checked separately."
}