{
  "user_message": "An agent A claimed that the following MHD_str_to_uint64_ code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_str_to_uint64_.\n```c\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    str++;\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement 'str++' increments the function parameter 'str' (the pointer itself). MISRA C 2023 Rule 17.8 forbids modifying pointer parameters \u2014 the pointed-to object may be changed but not the pointer parameter. This is a violation; use a local iterator (e.g. 'const char *p = str;') and increment that instead.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTRY: start=0x55ab13a326dc str=0x55ab13a326dc offset=0 char_code=49 digit=-1 res=0\nBEFORE_CHECK: start=0x55ab13a326dc str=0x55ab13a326dc offset=0 char_code=49 digit=1 res=0\nAFTER_ACCUM: start=0x55ab13a326dc str=0x55ab13a326dc offset=0 char_code=49 digit=1 res=1\nAFTER_INCREMENT: start=0x55ab13a326dc str=0x55ab13a326dd offset=1 char_code=0 digit=-1 res=1\nEXIT_SUCCESS: start=0x55ab13a326dc str=0x55ab13a326dd offset=1 char_code=0 digit=-1 res=1\nENTRY: start=0x55ab13a328f5 str=0x55ab13a328f5 offset=0 char_code=48 digit=-1 res=0\nBEFORE_CHECK: start=0x55ab13a328f5 str=0x55ab13a328f5 offset=0 char_code=48 digit=0 res=0\nAFTER_ACCUM: start=0x55ab13a328f5 str=0x55ab13a328f5 offset=0 char_code=48 digit=0 res=0\nAFTER_INCREMENT: start=0x55ab13a328f5 str=0x55ab13a328f6 offset=1 char_code=0 digit=-1 res=0\nEXIT_SUCCESS: start=0x55ab13a328f5 str=0x55ab13a328f6 offset=1 char_code=0 digit=-1 res=0\nENTRY: start=0x55ab13a3256b str=0x55ab13a3256b offset=0 char_code=49 digit=-1 res=0\nBEFORE_CHECK: start=0x55ab13a3256b str=0x55ab13a3256b offset=0 char_code=49 digit=1 res=0\nAFTER_ACCUM: start=0x55ab13a3256b str=0x55ab13a3256b offset=0 char_code=49 digit=1 res=1\nAFTER_INCREMENT: start=0x55ab13a3256b str=0x55ab13a3256c offset=1 char_code=48 digit=-1 res=1\nBEFORE_CHECK: start=0x55ab13a3256b str=0x55ab13a3256c offset=1 char_code=48 digit=0 res=1\nAFTER_ACCUM: start=0x55ab13a3256b str=0x55ab13a3256c offset=1 char_code=48 digit=0 res=10\nAFTER_INCREMENT: start=0x55ab13a3256b str=0x55ab13a3256d offset=2 char_code=48 digit=-1 res=10\nBEFORE_CHECK: start=0x55ab13a3256b str=0x55ab13a3256d offset=2 char_code=48 digit=0 res=10\nAFTER_ACCUM: start=0x55ab13a3256b str=0x55ab13a3256d offset=2 char_code=48 digit=0 res=100\nAFTER_INCREMENT: start=0x55ab13a3256b str=0x55ab13a3256e offset=3 char_code=48 digit=-1 res=100\nBEFORE_CHECK: start=0x55ab13a3256b str=0x55ab13a3256e offset=3 char_code=48 digit=0 res=100\nAFTER_ACCUM: start=0x55ab13a3256b str=0x55ab13a3256e offset=3 char_code=48 digit=0 res=1000\nAFTER_INCREMENT: start=0x55ab13a3256b str=0x55ab13a3256f offset=4 char_code=48 digit=-1 res=1000\nBEFORE_CHECK: start=0x55ab13a3256b str=0x55ab13a3256f offset=4 char_code=48 digit=0 res=1000\nAFTER_ACCUM: start=0x55ab13a3256b str=0x55ab13a3256f offset=4 char_code=48 digit=0 res=10000\nAFTER_INCREMENT: start=0x55ab13a3256b str=0x55ab13a32570 offset=5 char_code=0 digit=-1 res=10000\nEXIT_SUCCESS: start=0x55ab13a3256b str=0x55ab13a32570 offset=5 char_code=0 digit=-1 res=10000\nENTRY: start=0x55ab13a32571 str=0x55ab13a32571 offset=0 char_code=49 digit=-1 res=0\nBEFORE_CHECK: start=0x55ab13a32571 str=0x55ab13a32571 offset=0 char_code=49 digit=1 res=0\nAFTER_ACCUM: start=0x55ab13a32571 str=0x55ab13a32571 offset=0 char_code=49 digit=1 res=1\nAFTER_INCREMENT: start=0x55ab13a32571 str=0x55ab13a32572 offset=1 char_code=50 digit=-1 res=1\nBEFORE_CHECK: start=0x55ab13a32571 str=0x55ab13a32572 offset=1 char_code=50 digit=2 res=1\nAFTER_ACCUM: start=0x55ab13a32571 str=0x55ab13a32572 offset=1 char_code=50 digit=2 res=12\nAFTER_INCREMENT: start=0x55ab13a32571 str=0x55ab13a32573 offset=2 char_code=51 digit=-1 res=12\nBEFORE_CHECK: start=0x55ab13a32571 str=0x55ab13a32573 offset=2 char_code=51 digit=3 res=12\nAFTER_ACCUM: start=0x55ab13a32571 str=0x55ab13a32573 offset=2 char_code=51 digit=3 res=123\nAFTER_INCREMENT: start=0x55ab13a32571 str=0x55ab13a32574 offset=3 char_code=52 digit=-1 res=123\nBEFORE_CHECK: start=0x55ab13a32571 str=0x55ab13a32574 offset=3 char_code=52 digit=4 res=123\nAFTER_ACCUM: start=0x55ab13a32571 str=0x55ab13a32574 offset=3 char_code=52 digit=4 res=1234\nAFTER_INCREMENT: start=0x55ab13a32571 str=0x55ab13a32575 offset=4 char_code=0 digit=-1 res=1234\nEXIT_SUCCESS: start=0x55ab13a32571 str=0x55ab13a32575 offset=4 char_code=0 digit=-1 res=1234\nENTRY: start=0x55ab13a32576 str=0x55ab13a32576 offset=0 char_code=52 digit=-1 res=0\nBEFORE_CHECK: start=0x55ab13a32576 str=0x55ab13a32576 offset=0 char_code=52 digit=4 res=0\nAFTER_ACCUM: start=0x55ab13a32576 str=0x55ab13a32576 offset=0 char_code=52 digit=4 res=4\nAFTER_INCREMENT: start=0x55ab13a32576 str=0x55ab13a32577 offset=1 char_code=53 digit=-1 re\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. MISRA C 2023 Rule 17.8 requires that function parameters shall not be modified \u2014 the object pointed to by a pointer parameter may be changed, but the pointer parameter itself must not be altered. In this function the parameter 'str' (type const char *) is incremented via 'str++', which modifies the pointer parameter. The execution log shows 'str' advancing, confirming the modification. Even though 'str' is a by-value copy and modifying it does not affect the caller, MISRA 17.8 still forbids altering parameter variables. The reported remedy (use a local iterator such as 'const char *p = str;' and increment p) is the appropriate fix."
}