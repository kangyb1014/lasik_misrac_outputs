{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'str++' increments the function parameter 'str' (the pointer itself). MISRA C 2023 Rule 17.8 forbids modifying pointer parameters \u2014 the pointed-to object may be changed but not the pointer parameter. This is a violation; use a local iterator (e.g. 'const char *p = str;') and increment that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_to_uint64_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1617.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_to_uint64_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_to_uint64_:\n```c\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    str++;\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\nPlease provide the modified MHD_str_to_uint64_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <limits.h>\n#include <stddef.h>\n\n/* Probe/log helper: append a single line describing the current state to the log file. */\nstatic void MHD_log_probe(const char *tag,\n                          const char *start,\n                          const char *str,\n                          uint64_t res,\n                          int digit)\n{\n    FILE *f = fopen(\"/tmp/logs/1617.txt\", \"a\");\n    if (! f)\n        return; /* best-effort logging; do not alter function behavior if logging fails */\n\n    /* Log tag, pointer addresses, offset from start, current char code, digit, and res */\n    (void) fprintf(f,\n                   \"%s: start=%p str=%p offset=%td char_code=%u digit=%d res=%llu\\n\",\n                   tag,\n                   (const void *) start,\n                   (const void *) str,\n                   (ptrdiff_t) (str - start),\n                   (unsigned) (unsigned char) (*str),\n                   digit,\n                   (unsigned long long) res);\n    (void) fclose(f);\n}\n\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  /* Log entry into the function and initial state. */\n  MHD_log_probe(\"ENTRY\", start, str, 0ULL, -1);\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n  {\n    /* Log why we're returning early. */\n    MHD_log_probe(\"EARLY_RETURN_INVALID_ARGS\", start, str ? str : \"(null)\", 0ULL, -1);\n    return 0;\n  }\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n\n    /* Log state before performing overflow checks. */\n    MHD_log_probe(\"BEFORE_CHECK\", start, str, res, digit);\n\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n    {\n      /* Log overflow detection and reason, then return 0 as original code does. */\n      MHD_log_probe(\"OVERFLOW_DETECTED\", start, str, res, digit);\n      return 0;\n    }\n\n    res *= 10;\n    res += (unsigned int) digit;\n\n    /* Log state after accumulation but before incrementing the pointer. */\n    MHD_log_probe(\"AFTER_ACCUM\", start, str, res, digit);\n\n    /* This is the original code's modification of the pointer parameter (the reported violation).\n       We keep it so other agents can reproduce and observe the violation. */\n    str++;\n\n    /* Log pointer movement and new current character (may be \\0 or non-digit). */\n    MHD_log_probe(\"AFTER_INCREMENT\", start, str, res, -1);\n\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n\n  /* Log final state and the length computed. */\n  MHD_log_probe(\"EXIT_SUCCESS\", start, str, res, -1);\n\n  return (size_t) (str - start);\n}\n"
}