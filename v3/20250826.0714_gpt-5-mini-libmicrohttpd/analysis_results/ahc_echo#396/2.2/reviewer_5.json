{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls, struct MHD_Connection *con, const char *url, const\n          char *method, const char *version,\n          const char *upload_data, size_t *upload_size, void **req_cls)\n{\n  struct Holder *holder;\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n  (void) cls;\n  (void) url;\n  (void) method;\n  (void) version;\n  (void) upload_data;\n  (void) upload_size;\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  holder = calloc (1, sizeof (struct Holder));\n  if (! holder)\n    return MHD_NO;\n  holder->file = fopen (__FILE__, \"rb\");\n  if (NULL == holder->file)\n    goto file_error;\n  if (Z_OK != deflateInit (&holder->stream, Z_BEST_COMPRESSION))\n    goto stream_error;\n  holder->buf = malloc (CHUNK);\n  if (NULL == holder->buf)\n    goto buf_error;\n  res = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN, 1024, &read_cb,\n                                           holder, &free_cb);\n  if (NULL == res)\n    goto error;\n  ret = MHD_add_response_header (res, MHD_HTTP_HEADER_CONTENT_ENCODING,\n                                 \"deflate\");\n  if (MHD_YES != ret)\n    goto res_error;\n  ret = MHD_add_response_header (res, MHD_HTTP_HEADER_CONTENT_TYPE, \"text/x-c\");\n  if (MHD_YES != ret)\n    goto res_error;\n  ret = MHD_queue_response (con, MHD_HTTP_OK, res);\nres_error:\n  MHD_destroy_response (res);\n  return ret;\nerror:\n  free (holder->buf);\nbuf_error:\n  deflateEnd (&holder->stream);\nstream_error:\n  fclose (holder->file);\nfile_error:\n  free (holder);\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression '(void) version;' is an executed no-op used to silence an unused-parameter warning. Removing it would not affect program behaviour (assuming 'version' is not volatile and its evaluation has no side-effects), so it constitutes dead code and violates Rule 2.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's claim is not correct. The (void)version; (and the other (void) param; lines) are the common, intentional idiom to mark parameters as unused and to suppress compiler warnings. Although these statements are no-ops at runtime (their removal would not change program behaviour in terms of observable effects), they serve a diagnostic/intent purpose and are an accepted way to document/force a use of a parameter. MISRA guidance recognises that such idioms are used to indicate intentionally unused parameters; they are not the kind of inadvertent dead code that Rule 2.2 is intended to forbid. If a project policy prefers a different approach, you can omit parameter names in the function prototype where allowed or use a standard UNUSED() macro, but simply having (void)version; does not by itself constitute a Rule 2.2 violation."
}