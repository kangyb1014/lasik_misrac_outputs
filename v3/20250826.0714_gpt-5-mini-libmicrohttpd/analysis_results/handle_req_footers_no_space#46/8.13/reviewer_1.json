{
  "user_message": "An agent A claimed that the following handle_req_footers_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_footers_no_space.\n```c\nstatic void\nhandle_req_footers_no_space (struct MHD_Connection *c,\n                             const char *add_footer,\n                             size_t add_footer_size)\n{\n  (void) add_footer; (void) add_footer_size; /* Unused */\n  mhd_assert (c->rq.have_chunked_upload);\n\n  /* Footers should be optional */\n  transmit_error_response_static (c,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_FOOTER_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes a pointer to a connection object and a message token that are likely not modified by the caller. If the prototype of transmit_error_response_static is something like\n  void transmit_error_response_static(struct MHD_Connection *c, int code, char *msg);\n(i.e. takes non-const pointers for the connection or the message), then Rule 8.13 is violated because the pointers should be to const-qualified types when modification is not required. Concretely: passing a string literal (ERR_MSG_REQUEST_FOOTER_TOO_BIG) to a non-const char * parameter or passing c as struct MHD_Connection * when the function does not modify the connection state would both violate MISRA C 2023 Rule 8.13. If, however, transmit_error_response_static legitimately modifies the pointed-to objects (i.e. the function prototype requires non-const), then there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as stated. MISRA C:2023 Rule 8.13 concerns the types of pointer declarations (a pointer should point to a const-qualified type whenever possible). The call site shown does not itself declare pointer types; any Rule 8.13 violation would be in the declaration/prototype of transmit_error_response_static (or in some other function that takes a non-const pointer unnecessarily), not in this call site. The agent\u2019s scenario is plausible: if transmit_error_response_static were prototyped as taking a non-const char * for the error message (or a non-const struct MHD_Connection * even though it does not modify the object), then that prototype would violate Rule 8.13. But that is a property of the callee\u2019s prototype, and we are not given that prototype here. Also note: passing a string literal to a function declared as taking char * is allowed by the language type system (string literals have array type), but modifying such data is undefined; MISRA would prefer const char * for literal messages. In short, there is insufficient information to establish a Rule 8.13 violation in the shown code; the potential violation would be in transmit_error_response_static\u2019s declaration if it uses non-const pointer parameters when it does not modify the pointees."
}