{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrlen(username) is called without validating username. If username is NULL or points to a non\u2011null\u2011terminated buffer, strlen will read beyond the object bounds (NULL dereference or buffer overread), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userhash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userhash as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userhash:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userhash (&da,\n                   username,\n                   strlen (username),\n                   realm,\n                   strlen (realm),\n                   userhash_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userhash code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  FILE *log = fopen(\"/tmp/logs/2479.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTRY: MHD_digest_auth_calc_userhash algo3=%d username=%p realm=%p bin_buf_size=%zu\\n\",\n            (int)algo3, (const void *)username, (const void *)realm, bin_buf_size);\n    fflush(log);\n  }\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    if (log)\n    {\n      fprintf(log, \"digest_init_one_time() returned false\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"digest initialized, digest_size=%zu\\n\", digest_get_size(&da));\n    fflush(log);\n  }\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    /* Probe: record pointers and that we are about to call strlen.\n       We intentionally do NOT guard the strlen calls here so that the\n       original behavior (and potential violation) is preserved for\n       reproduction. */\n    if (log)\n    {\n      fprintf(log, \"About to call strlen on username and realm. username=%p realm=%p\\n\",\n              (const void *)username, (const void *)realm);\n      fflush(log);\n    }\n\n    /* These calls mirror the original code; if username or realm are NULL or\n       not null-terminated this will reproduce the reported violation (NULL\n       dereference or buffer overread). We capture returned lengths for the\n       logs. */\n    size_t username_len = strlen (username);\n    size_t realm_len = strlen (realm);\n\n    if (log)\n    {\n      fprintf(log, \"strlen results: username_len=%zu realm_len=%zu\\n\", username_len, realm_len);\n      fflush(log);\n    }\n\n    calc_userhash (&da,\n                   username,\n                   username_len,\n                   realm,\n                   realm_len,\n                   userhash_bin);\n\n    if (log)\n    {\n      fprintf(log, \"calc_userhash called\\n\");\n      fflush(log);\n    }\n\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n    {\n      ret = MHD_NO;\n      if (log)\n      {\n        fprintf(log, \"digest_ext_error reported\\n\");\n        fflush(log);\n      }\n    }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  if (log)\n  {\n    fprintf(log, \"EXIT: ret=%d\\n\", (int)ret);\n    fclose(log);\n  }\n\n  return ret;\n}\n"
}