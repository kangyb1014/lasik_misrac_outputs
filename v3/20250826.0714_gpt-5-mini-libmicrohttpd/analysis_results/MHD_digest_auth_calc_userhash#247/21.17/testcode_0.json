{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(username) and strlen(realm) without checking that those pointers are non-NULL and point to NUL-terminated objects. If the caller supplies NULL or a non-terminated buffer (or a buffer whose terminator lies beyond its allocated bounds), strlen will read past the object bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userhash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userhash as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userhash:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userhash (&da,\n                   username,\n                   strlen (username),\n                   realm,\n                   strlen (realm),\n                   userhash_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userhash code.\n",
  "test_code": "static void probe_log_entry (int algo3_int, const void *username, const void *realm, const void *userhash_bin, size_t bin_buf_size)\n{\n  FILE *f = fopen(\"/tmp/logs/2479.txt\", \"a\");\n  if (! f)\n    return;\n  fprintf (f, \"ENTRY: MHD_digest_auth_calc_userhash algo3=%d username=%p realm=%p userhash_bin=%p bin_buf_size=%zu\\n\",\n           algo3_int, username, realm, userhash_bin, bin_buf_size);\n  fclose (f);\n}\n\nstatic void probe_log_msg (const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/2479.txt\", \"a\");\n  if (! f)\n    return;\n  fprintf (f, \"%s\\n\", msg);\n  fclose (f);\n}\n\nstatic void probe_log_ptrs_before_calc (const void *username, const void *realm)\n{\n  FILE *f = fopen(\"/tmp/logs/2479.txt\", \"a\");\n  if (! f)\n    return;\n  fprintf (f, \"ABOUT_TO_CALL_calc_userhash: username=%p realm=%p\\n\", username, realm);\n  fclose (f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Log entry and key input pointer values so callers can observe the state\n     immediately before any use of strlen() (which occurs later in the\n     original logic). This helps reproduce the violation scenario where\n     username or realm may be NULL or not NUL-terminated. */\n  probe_log_entry ((int) algo3, username, realm, userhash_bin, bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    probe_log_msg (\"digest_init_one_time returned FALSE -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (digest_get_size (&da) > bin_buf_size)\n  {\n    probe_log_msg (\"digest_get_size > bin_buf_size -> setting ret = MHD_NO\");\n    ret = MHD_NO;\n  }\n  else\n  {\n    /* Log pointer values immediately before calling calc_userhash so the\n       log contains the last known state prior to the strlen() calls that are\n       present in the original call to calc_userhash. If username or realm is\n       NULL, the subsequent strlen() in the original call may cause a crash;\n       the log above will record the pointer values and help reproduce that\n       behaviour. */\n    probe_log_ptrs_before_calc (username, realm);\n\n    calc_userhash (&da,\n                   username,\n                   strlen (username),\n                   realm,\n                   strlen (realm),\n                   userhash_bin);\n\n    probe_log_msg (\"calc_userhash returned; setting ret = MHD_YES\");\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n    {\n      probe_log_msg (\"digest_ext_error() returned TRUE -> setting ret = MHD_NO\");\n      ret = MHD_NO;\n    }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  /* Final log of the return value so the control-flow outcome is captured. */\n  {\n    FILE *f = fopen (\"/tmp/logs/2479.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"EXIT: MHD_digest_auth_calc_userhash returning %d\\n\", (int) ret);\n      fclose (f);\n    }\n  }\n\n  return ret;\n}\n"
}