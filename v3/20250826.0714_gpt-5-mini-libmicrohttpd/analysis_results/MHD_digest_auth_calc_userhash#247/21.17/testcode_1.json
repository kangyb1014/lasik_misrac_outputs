{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes realm == NULL (or passes a pointer to a character array that is not NUL-terminated within its allocated bounds), the call strlen(realm) will read beyond the valid object (or dereference a NULL pointer). The function does not check realm for NULL or otherwise ensure it is NUL-terminated before calling strlen, so this can result in out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userhash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userhash as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userhash:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userhash (&da,\n                   username,\n                   strlen (username),\n                   realm,\n                   strlen (realm),\n                   userhash_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userhash code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Probe/logging helper: append simple structured logs to /tmp/logs/2479.txt */\n  do {\n    FILE *f = fopen(\"/tmp/logs/2479.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_digest_auth_calc_userhash: entry\\n\");\n      fprintf(f, \"  algo3=%d\\n\", (int)algo3);\n      fprintf(f, \"  username_ptr=%p\\n\", (const void *)username);\n      fprintf(f, \"  realm_ptr=%p\\n\", (const void *)realm);\n      fprintf(f, \"  userhash_bin_ptr=%p\\n\", userhash_bin);\n      fprintf(f, \"  bin_buf_size=%zu\\n\", bin_buf_size);\n      fflush(f);\n      fclose(f);\n    }\n  } while (0);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3))) {\n    FILE *f = fopen(\"/tmp/logs/2479.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"  digest_init_one_time: FAILED -> returning MHD_NO\\n\");\n      fflush(f);\n      fclose(f);\n    }\n    return MHD_NO;\n  }\n\n  {\n    size_t needed = digest_get_size (&da);\n    FILE *f = fopen(\"/tmp/logs/2479.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"  digest_get_size=%zu\\n\", needed);\n      fprintf(f, \"  comparing digest_get_size > bin_buf_size -> %s\\n\",\n              (needed > bin_buf_size) ? \"true\" : \"false\");\n      fflush(f);\n      fclose(f);\n    }\n\n    if (needed > bin_buf_size)\n      ret = MHD_NO;\n    else\n    {\n      /* Log just before the call that will compute/string-length username and realm.\n         We intentionally DO NOT change the original control flow or avoid the strlen\n         calls: we only log pointer values and intent so that, if realm == NULL or\n         not NUL-terminated, the logs provide evidence of the input pointers prior\n         to the out-of-bounds read/NULL dereference. */\n      FILE *f2 = fopen(\"/tmp/logs/2479.txt\", \"a\");\n      if (f2) {\n        fprintf(f2, \"  about to call calc_userhash\\n\");\n        fprintf(f2, \"    username_ptr=%p\\n\", (const void *)username);\n        fprintf(f2, \"    realm_ptr=%p\\n\", (const void *)realm);\n        fprintf(f2, \"    NOTE: the next operations will call strlen(username) and strlen(realm) as in the original code\\n\");\n        fflush(f2);\n        fclose(f2);\n      }\n\n      calc_userhash (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     userhash_bin);\n      ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n      if (digest_ext_error (&da))\n        ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n      FILE *f3 = fopen(\"/tmp/logs/2479.txt\", \"a\");\n      if (f3) {\n        fprintf(f3, \"  calc_userhash returned; provisional ret=%s\\n\", (ret == MHD_YES) ? \"MHD_YES\" : \"MHD_NO\");\n        fflush(f3);\n        fclose(f3);\n      }\n    }\n  }\n  digest_deinit (&da);\n\n  {\n    FILE *f = fopen(\"/tmp/logs/2479.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_digest_auth_calc_userhash: exit -> ret=%s\\n\\n\", (ret == MHD_YES) ? \"MHD_YES\" : \"MHD_NO\");\n      fflush(f);\n      fclose(f);\n    }\n  }\n\n  return ret;\n}\n"
}