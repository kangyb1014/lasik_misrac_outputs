{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code only checks that the destination buffer has enough space (new_used_size <= buf_size) but does not validate the source pointer or that pos->header actually points to an object of at least pos->header_size bytes (nor that pos->header is non-NULL). If pos->header_size is larger than the actual size of the object referenced by pos->header (or pos->header is NULL while header_size>0), memcpy(buf + used_size, pos->header, pos->header_size) will read beyond the bounds of the source object. Example: pos->header points to a 12-byte string but pos->header_size is incorrectly 100 \u2014 memcpy will access out-of-bounds memory of pos->header, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/239.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/239.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  mhd_probe_log(\"ENTER: build_connection_chunked_response_footer: connection=%p, state=%d, chunked=%d\",\n                (void *)connection, (int)connection->state, (int)connection->rp.props.chunked);\n\n  buf_size = connection_maximize_write_buffer (c);\n  mhd_probe_log(\"buffer info: buf_size=%zu, write_buffer=%p, write_buffer_append_offset=%zu, write_buffer_size=%zu\",\n                buf_size, (void *)c->write_buffer, c->write_buffer_append_offset, c->write_buffer_size);\n\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5) {\n    mhd_probe_log(\"EARLY RETURN: buf_size < 5 (%zu) -> MHD_NO\", buf_size);\n    return MHD_NO;\n  }\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  mhd_probe_log(\"after initial zero-chunk: used_size=%zu, buf_ptr=%p\", used_size, (void *)buf);\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    mhd_probe_log(\"iter header: pos=%p, kind=%d, header=%p, header_size=%zu, value=%p, value_size=%zu, next=%p\",\n                  (void *)pos, (int)pos->kind, (void *)pos->header, pos->header_size, (void *)pos->value, pos->value_size, (void *)pos->next);\n\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      mhd_probe_log(\"computed sizes: used_size=%zu, header_size=%zu, value_size=%zu, new_used_size=%zu, buf_size=%zu\",\n                    used_size, pos->header_size, pos->value_size, new_used_size, buf_size);\n      if (new_used_size > buf_size)\n      {\n        mhd_probe_log(\"EARLY RETURN: not enough space for header: new_used_size=%zu > buf_size=%zu -> MHD_NO\",\n                      new_used_size, buf_size);\n        return MHD_NO;\n      }\n\n      /* Log pre-memcpy details that are relevant to the violation scenario */\n      mhd_probe_log(\"ABOUT TO MEMCPY header: dst=%p, src=%p, n=%zu\",\n                    (void *)(buf + used_size), (void *)pos->header, pos->header_size);\n\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n\n      mhd_probe_log(\"ABOUT TO MEMCPY value: dst=%p, src=%p, n=%zu\",\n                    (void *)(buf + used_size), (void *)pos->value, pos->value_size);\n\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n\n      mhd_probe_log(\"after header append: used_size=%zu (expected %zu)\", used_size, new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n  {\n    mhd_probe_log(\"EARLY RETURN: final CRLF doesn't fit: used_size+2=%zu > buf_size=%zu -> MHD_NO\",\n                  used_size + 2, buf_size);\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  mhd_probe_log(\"final buffer append: used_size=%zu, will add to write_buffer_append_offset (was %zu)\",\n                used_size, c->write_buffer_append_offset);\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  mhd_probe_log(\"EXIT: build_connection_chunked_response_footer: success, new write_buffer_append_offset=%zu\",\n                c->write_buffer_append_offset);\n\n  return MHD_YES;\n}\n"
}