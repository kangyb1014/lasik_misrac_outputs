{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential integer overflow in the computation of new_used_size can make the bounds check ineffective. Example: assume size_t is N-bit, let used_size = 10, pos->header_size = SIZE_MAX - 10, pos->value_size = 5, buf_size = 100. Then new_used_size = 10 + (SIZE_MAX-10) + 5 + 4 = SIZE_MAX + 9 \u2192 wraps to 8 (modulo SIZE_MAX+1), so (new_used_size > buf_size) is false and the function proceeds. The subsequent memcpy calls (first copying the huge pos->header, then the memcpy(buf + used_size, pos->value, pos->value_size); fragment under review) will write beyond the allocated buf, violating Rule 21.17. The code does not guard against size_t overflow when computing new_used_size.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helper. This helper is intentionally lightweight and\n   does not change any program state. It attempts to create /tmp/logs\n   if needed and appends human-readable state information to\n   /tmp/logs/239.txt for later inspection. */\nstatic void\nmhd_probe_log_state(const char *tag,\n                    struct MHD_Connection *connection,\n                    const char *stage,\n                    size_t buf_size,\n                    size_t used_size,\n                    struct MHD_HTTP_Res_Header *pos,\n                    size_t new_used_size)\n{\n  FILE *f;\n  /* Try to ensure the directory exists. Ignore errors if it fails. */\n  (void) mkdir(\"/tmp/logs\", 0700);\n  f = fopen(\"/tmp/logs/239.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[%s] %s\\n\", tag, stage);\n  if (NULL != connection)\n  {\n    fprintf(f, \"  connection=%p\\n\", (void *) connection);\n    fprintf(f, \"  write_buffer=%p\\n\", (void *) connection->write_buffer);\n    fprintf(f, \"  write_buffer_size=%zu\\n\", (size_t) connection->write_buffer_size);\n    fprintf(f, \"  write_buffer_append_offset=%zu\\n\", (size_t) connection->write_buffer_append_offset);\n  }\n  fprintf(f, \"  buf_size=%zu\\n\", buf_size);\n  fprintf(f, \"  used_size=%zu\\n\", used_size);\n\n  if (NULL != pos)\n  {\n    fprintf(f, \"  pos=%p\\n\", (void *) pos);\n    fprintf(f, \"  pos->kind=%d\\n\", (int) pos->kind);\n    fprintf(f, \"  pos->header_size=%zu\\n\", pos->header_size);\n    fprintf(f, \"  pos->value_size=%zu\\n\", pos->value_size);\n    fprintf(f, \"  pos->header=%p\\n\", (void *) pos->header);\n    fprintf(f, \"  pos->value=%p\\n\", (void *) pos->value);\n    fprintf(f, \"  computed new_used_size=%zu\\n\", new_used_size);\n\n    /* Log potential wrap observation: if new_used_size is smaller than\n       used_size or smaller than one of the components, a wrap likely\n       occurred. This helps reproduce overflowing-sum scenarios. */\n    if (new_used_size < used_size)\n      fprintf(f, \"  NOTE: new_used_size < used_size -> possible wrap-around\\n\");\n    if (new_used_size < pos->header_size)\n      fprintf(f, \"  NOTE: new_used_size < pos->header_size -> possible wrap-around\\n\");\n    if (new_used_size < pos->value_size)\n      fprintf(f, \"  NOTE: new_used_size < pos->value_size -> possible wrap-around\\n\");\n  }\n\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n\n  /* Log initial buffer state after maximizing write buffer. */\n  mhd_probe_log_state(\"ENTRY\", c, \"after maximize_write_buffer\", buf_size, 0, NULL, 0);\n\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      /* Log before computing new_used_size so we capture inputs. */\n      mhd_probe_log_state(\"LOOP\", c, \"before computing new_used_size\", buf_size, used_size, pos, 0);\n\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n\n      /* Log the computed value and potential wrap observations. */\n      mhd_probe_log_state(\"LOOP\", c, \"after computing new_used_size\", buf_size, used_size, pos, new_used_size);\n\n      if (new_used_size > buf_size)\n      {\n        mhd_probe_log_state(\"LOOP\", c, \"new_used_size > buf_size -> returning MHD_NO\", buf_size, used_size, pos, new_used_size);\n        return MHD_NO;\n      }\n\n      /* Log the memcpy targets and sizes for forensic inspection. */\n      mhd_probe_log_state(\"LOOP\", c, \"about to memcpy header\", buf_size, used_size, pos, new_used_size);\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      mhd_probe_log_state(\"LOOP\", c, \"about to memcpy value\", buf_size, used_size, pos, new_used_size);\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n  {\n    mhd_probe_log_state(\"EXIT\", c, \"final check failed: used_size + 2 > buf_size -> returning MHD_NO\", buf_size, used_size, NULL, 0);\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  mhd_probe_log_state(\"EXIT\", c, \"success returning MHD_YES\", buf_size, used_size, NULL, 0);\n\n  return MHD_YES;\n}\n"
}