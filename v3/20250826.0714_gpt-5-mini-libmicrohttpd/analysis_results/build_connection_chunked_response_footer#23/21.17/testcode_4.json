{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes buf = c->write_buffer + c->write_buffer_append_offset without an explicit check that write_buffer_append_offset is within the allocated write_buffer. If write_buffer_append_offset > c->write_buffer_size (or otherwise points past the end of the allocated buffer) then buf will point outside the object and the subsequent memcpy/memset writes (used later in the function) can write beyond the bounds of the buffer, violating MISRA C 2023 Rule 21.17. Note: the code relies on connection_maximize_write_buffer and debug-only mhd_assert checks to prevent this, but those are not guaranteed at all times, so a concrete out\u2011of\u2011bounds scenario is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper. Keeps original logic intact; only appends logs to a file for\n   reproducing potential out-of-bounds scenarios. */\nstatic void\nmhd_probe_log_connection_state(const struct MHD_Connection *c,\n                               const char *stage,\n                               size_t buf_size,\n                               size_t used_size,\n                               size_t new_used_size,\n                               const struct MHD_HTTP_Res_Header *pos)\n{\n  FILE *f = fopen(\"/tmp/logs/239.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"STAGE: %s\\n\", stage ? stage : \"(null)\");\n  fprintf(f, \"  connection ptr: %p\\n\", (void *) c);\n  if (c != NULL)\n  {\n    fprintf(f, \"  write_buffer ptr: %p\\n\", (void *) c->write_buffer);\n    fprintf(f, \"  write_buffer_size: %zu\\n\", (size_t) c->write_buffer_size);\n    fprintf(f, \"  write_buffer_append_offset: %zu\\n\", (size_t) c->write_buffer_append_offset);\n    fprintf(f, \"  state: %d\\n\", (int) c->state);\n  }\n  fprintf(f, \"  reported buf_size (maximize returned): %zu\\n\", (size_t) buf_size);\n  fprintf(f, \"  used_size: %zu\\n\", (size_t) used_size);\n  fprintf(f, \"  new_used_size (if applicable): %zu\\n\", (size_t) new_used_size);\n\n  if (pos != NULL)\n  {\n    fprintf(f, \"  header pos ptr: %p\\n\", (void *) pos);\n    fprintf(f, \"    kind: %d\\n\", (int) pos->kind);\n    fprintf(f, \"    header ptr: %p size: %zu\\n\", (void *) pos->header, (size_t) pos->header_size);\n    fprintf(f, \"    value ptr: %p size: %zu\\n\", (void *) pos->value, (size_t) pos->value_size);\n  }\n\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  /* Log entry state before maximizing the buffer */\n  mhd_probe_log_connection_state(c, \"entry-before-maximize\", 0U, 0U, 0U, NULL);\n\n  buf_size = connection_maximize_write_buffer (c);\n\n  /* Log after maximize to capture the returned buf_size and current connection state */\n  mhd_probe_log_connection_state(c, \"after-maximize\", buf_size, 0U, 0U, NULL);\n\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n  {\n    mhd_probe_log_connection_state(c, \"buf_size-too-small(<5)-return\", buf_size, 0U, 0U, NULL);\n    return MHD_NO;\n  }\n  mhd_assert (NULL != c->write_buffer);\n\n  /* Compute the buffer pointer and log it (this is central to the reported violation) */\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_probe_log_connection_state(c, \"after-buf-compute\", buf_size, 0U, 0U, NULL);\n\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n\n      /* Log before checking space for this header */\n      mhd_probe_log_connection_state(c, \"before-header-space-check\", buf_size, used_size, new_used_size, pos);\n\n      if (new_used_size > buf_size)\n      {\n        mhd_probe_log_connection_state(c, \"not-enough-space-for-header-return\", buf_size, used_size, new_used_size, pos);\n        return MHD_NO;\n      }\n\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n\n      /* Log after writing this header to capture intermediate used_size */\n      mhd_probe_log_connection_state(c, \"after-writing-header\", buf_size, used_size, new_used_size, pos);\n\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n\n  /* Log just before final CRLF check */\n  mhd_probe_log_connection_state(c, \"before-final-crlf-check\", buf_size, used_size, 0U, NULL);\n\n  if (used_size + 2 > buf_size)\n  {\n    mhd_probe_log_connection_state(c, \"final-crlf-not-enough-space-return\", buf_size, used_size, (size_t)(used_size + 2U), NULL);\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  /* Log before updating append offset */\n  mhd_probe_log_connection_state(c, \"before-append-offset-update\", buf_size, used_size, 0U, NULL);\n\n  c->write_buffer_append_offset += used_size;\n\n  /* Log final state after update */\n  mhd_probe_log_connection_state(c, \"after-append-offset-update\", buf_size, used_size, 0U, NULL);\n\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n"
}