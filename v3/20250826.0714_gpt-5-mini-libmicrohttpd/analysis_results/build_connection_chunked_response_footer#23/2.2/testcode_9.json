{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion is redundant: buf_size is obtained from connection_maximize_write_buffer(c) as the available space at c->write_buffer_append_offset, and the code has explicit checks (if (new_used_size > buf_size) return MHD_NO; and if (used_size + 2 > buf_size) return MHD_NO;) ensuring used_size never exceeds buf_size. After c->write_buffer_append_offset += used_size the relation c->write_buffer_append_offset <= c->write_buffer_size is therefore guaranteed by the earlier checks. The mhd_assert call only performs a runtime check (or is a no-op in non-debug builds) and has no side-effects when the condition holds, so removing it would not affect program behaviour. Because the assertion is executed but its removal would not change program behaviour, it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/232.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable entries to /tmp/logs/232.txt */\nstatic void\nmhd_log_printf (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/232.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n/* A small wrapper to log connection-related key fields */\nstatic void\nmhd_log_conn_state (const char *tag, struct MHD_Connection *c, size_t buf_size, size_t used_size)\n{\n  if (c == NULL)\n  {\n    mhd_log_printf (\"%s: connection = NULL\", tag);\n    return;\n  }\n  mhd_log_printf (\n    \"%s: conn=%p, write_buffer=%p, append_offset=%zu, write_buffer_size=%zu, buf_size=%zu, used_size=%zu\",\n    tag, (void *)c, (void *)c->write_buffer, c->write_buffer_append_offset, c->write_buffer_size, buf_size, used_size);\n}\n\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Log entry: function start and initial pointers */\n  mhd_log_printf (\"enter build_connection_chunked_response_footer: connection=%p\", (void *)connection);\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* Log buffer sizing result */\n  mhd_log_conn_state (\"after connection_maximize_write_buffer\", c, buf_size, 0);\n\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n  {\n    mhd_log_printf (\"insufficient buf_size: %zu < 5 => returning MHD_NO\", buf_size);\n    return MHD_NO;\n  }\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  mhd_log_printf (\"wrote initial chunk terminator, used_size=%zu\", used_size);\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n\n      /* Log details about the footer being processed */\n      mhd_log_printf (\n        \"processing footer: pos=%p, header_size=%zu, value_size=%zu, used_size_before=%zu, new_used_size=%zu, buf_size=%zu\",\n        (void *)pos, pos->header_size, pos->value_size, used_size, new_used_size, buf_size);\n\n      if (new_used_size > buf_size)\n      {\n        mhd_log_printf (\"footer does not fit: new_used_size=%zu > buf_size=%zu => returning MHD_NO\", new_used_size, buf_size);\n        return MHD_NO;\n      }\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n\n      /* Log state after copying this footer */\n      mhd_log_printf (\"after footer: used_size=%zu, buf_size=%zu, append_offset=%zu\", used_size, buf_size, c->write_buffer_append_offset);\n    }\n  }\n  if (used_size + 2 > buf_size)\n  {\n    mhd_log_printf (\"final CRLF does not fit: used_size+2=%zu > buf_size=%zu => returning MHD_NO\", used_size + 2, buf_size);\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  /* Log before updating the connection append offset */\n  mhd_log_printf (\"about to advance append_offset: old=%zu, adding used_size=%zu, write_buffer_size=%zu\",\n                  c->write_buffer_append_offset, used_size, c->write_buffer_size);\n\n  c->write_buffer_append_offset += used_size;\n\n  /* Log after update; this provides evidence whether the assertion would succeed */\n  mhd_log_printf (\"after advancing append_offset: new=%zu, write_buffer_size=%zu, (assert condition = %s)\",\n                  c->write_buffer_append_offset, c->write_buffer_size,\n                  (c->write_buffer_append_offset <= c->write_buffer_size) ? \"true\" : \"false\");\n\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  mhd_log_printf (\"exiting build_connection_chunked_response_footer: returning MHD_YES\");\n  return MHD_YES;\n}\n"
}