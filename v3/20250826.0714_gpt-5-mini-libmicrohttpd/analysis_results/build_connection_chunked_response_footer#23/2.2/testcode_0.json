{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mhd_assert macro is defined as a no-op in production builds (e.g. expands to ((void)0) or nothing), the statement mhd_assert(connection->rp.props.chunked); is an executed no-op whose removal would not affect program behaviour \u2014 therefore it is dead code and violates MISRA C 2023 Rule 2.2. If, however, mhd_assert expands to code that can alter program flow (for example aborts or logs and changes behaviour when the condition is false), then the assertion is not dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/232.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe helpers to log runtime information to /tmp/logs/232.txt. */\nstatic void\nmhd_probe_vlog (const char *fmt, va_list ap)\n{\n  FILE *f = fopen (\"/tmp/logs/232.txt\", \"a\");\n  if (f == NULL)\n    return;\n  time_t t = time (NULL);\n  fprintf (f, \"[%ld] \", (long) t);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nmhd_probe_logf (const char *fmt, ...)\n{\n  va_list ap;\n  va_start (ap, fmt);\n  mhd_probe_vlog (fmt, ap);\n  va_end (ap);\n}\n\nstatic void\nmhd_probe_log_connection (const struct MHD_Connection *c, const char *where)\n{\n  FILE *f = fopen (\"/tmp/logs/232.txt\", \"a\");\n  if (f == NULL)\n    return;\n  time_t t = time (NULL);\n  fprintf (f, \"[%ld] Probe %s: c=%p, state=%u, rp.response=%p, write_buffer=%p, write_buffer_size=%zu, write_buffer_append_offset=%zu\\n\",\n           (long) t, where, (const void *) c, (unsigned) c->state,\n           (const void *) c->rp.response,\n           (const void *) c->write_buffer, c->write_buffer_size,\n           c->write_buffer_append_offset);\n  fclose (f);\n}\n\n/* Modified function with logging probes. Original logic preserved. */\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Probe: log state before the first assertion. */\n  mhd_probe_log_connection (connection, \"before_assert_chunked\");\n  {\n    /* Evaluate the condition once for logging to capture its runtime value. */\n    bool cond_chunked = (connection->rp.props.chunked != 0) ? true : false;\n    mhd_probe_logf (\"mhd_assert check: connection->rp.props.chunked = %d\", (int) cond_chunked);\n  }\n  mhd_assert (connection->rp.props.chunked);\n\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_probe_log_connection (connection, \"before_assert_state\");\n  {\n    bool cond_state = (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state) ? true : false;\n    mhd_probe_logf (\"mhd_assert check: MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state -> %d\",\n                    (int) cond_state);\n  }\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n\n  mhd_probe_log_connection (connection, \"before_assert_response_not_null\");\n  {\n    bool cond_resp = (NULL != c->rp.response) ? true : false;\n    mhd_probe_logf (\"mhd_assert check: NULL != c->rp.response -> %d\", (int) cond_resp);\n  }\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  mhd_probe_logf (\"connection_maximize_write_buffer returned buf_size=%zu\", buf_size);\n\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n  {\n    mhd_probe_logf (\"early return: buf_size < 5 (%zu)\", buf_size);\n    return MHD_NO;\n  }\n  mhd_assert (NULL != c->write_buffer);\n  mhd_probe_log_connection (connection, \"after_write_buffer_assert\");\n\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  mhd_probe_logf (\"wrote initial chunk terminator, used_size=%zu\", used_size);\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      mhd_probe_logf (\"processing footer header: header=%p, header_size=%zu, value=%p, value_size=%zu, proposed_new_used_size=%zu\",\n                      (const void *) pos->header, pos->header_size,\n                      (const void *) pos->value, pos->value_size, new_used_size);\n      if (new_used_size > buf_size)\n      {\n        mhd_probe_logf (\"early return: new_used_size (%zu) > buf_size (%zu)\", new_used_size, buf_size);\n        return MHD_NO;\n      }\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n      mhd_probe_logf (\"after appending header, used_size=%zu\", used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n  {\n    mhd_probe_logf (\"early return: final check used_size + 2 > buf_size (%zu + 2 > %zu)\", used_size, buf_size);\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  mhd_probe_logf (\"final footer written, used_size=%zu\", used_size);\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n  mhd_probe_log_connection (connection, \"before_return_yes\");\n\n  return MHD_YES;\n}\n"
}