{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'pos' is declared as 'struct MHD_HTTP_Res_Header *pos;' but is only used to read fields (pos->kind, pos->header_size, pos->value_size, pos->header, pos->value, pos->next) and never modifies the pointed-to object. According to MISRA C 2023 Rule 8.13, it should be declared to point to a const-qualified type (e.g. 'const struct MHD_HTTP_Res_Header *pos;'). Declaring it non-const therefore violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "static void\nmhd_log_bytes(FILE *f, const char *label, const char *data, size_t len)\n{\n  size_t i;\n\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"%s len=%zu ptr=%p: \", label, len, (void *) data);\n  if (data != NULL && len > 0)\n  {\n    /* Print up to 256 bytes as hex for safe logging of possibly non-null-terminated data */\n    for (i = 0u; i < len && i < 256u; ++i)\n      fprintf(f, \"%02X \", (unsigned char) data[i]);\n    if (len > 256u)\n      fprintf(f, \"... \");\n  }\n  fprintf(f, \"\\n\");\n}\n\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *logf = fopen(\"/tmp/logs/233.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"enter build_connection_chunked_response_footer: connection=%p, c=%p\\n\", (void *) connection, (void *) c);\n  }\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  if (logf)\n    fprintf(logf, \"buffer size after maximize: buf_size=%zu\\n\", buf_size);\n\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n  {\n    if (logf)\n      fprintf(logf, \"return MHD_NO: buf_size < 5 (buf_size=%zu)\\n\", buf_size);\n    if (logf)\n      fclose(logf);\n    return MHD_NO;\n  }\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  if (logf)\n    fprintf(logf, \"initial footer start written: used_size=%zu, write_buffer_append_offset=%zu, write_buffer_size=%zu\\n\",\n            used_size, c->write_buffer_append_offset, c->write_buffer_size);\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (logf)\n      fprintf(logf, \"iter header: pos=%p, kind=%d, header_size=%zu, value_size=%zu, header_ptr=%p, value_ptr=%p, next=%p\\n\",\n              (void *) pos, (int) pos->kind, pos->header_size, pos->value_size,\n              (void *) pos->header, (void *) pos->value, (void *) pos->next);\n\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (logf)\n        fprintf(logf, \"footer candidate: new_used_size=%zu, buf_size=%zu\\n\", new_used_size, buf_size);\n\n      if (new_used_size > buf_size)\n      {\n        if (logf)\n          fprintf(logf, \"return MHD_NO: buffer overflow would occur (new_used_size=%zu, buf_size=%zu)\\n\", new_used_size, buf_size);\n        if (logf)\n          fclose(logf);\n        return MHD_NO;\n      }\n\n      if (logf)\n        mhd_log_bytes(logf, \"header bytes\", pos->header, pos->header_size);\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n\n      if (logf)\n        mhd_log_bytes(logf, \"value bytes\", pos->value, pos->value_size);\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n\n      if (logf)\n        fprintf(logf, \"footer written: updated used_size=%zu\\n\", used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n  {\n    if (logf)\n      fprintf(logf, \"return MHD_NO: not enough space for final CRLF (used_size=%zu, buf_size=%zu)\\n\", used_size, buf_size);\n    if (logf)\n      fclose(logf);\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  if (logf)\n    fprintf(logf, \"final CRLF appended: used_size=%zu\\n\", used_size);\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  if (logf)\n  {\n    fprintf(logf, \"exiting with MHD_YES: final write_buffer_append_offset=%zu, write_buffer_size=%zu\\n\",\n            c->write_buffer_append_offset, c->write_buffer_size);\n    fclose(logf);\n  }\n\n  return MHD_YES;\n}\n"
}