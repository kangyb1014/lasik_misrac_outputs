{
  "user_message": "An agent A claimed that the following MHD_digest_auth_check code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_check.\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       unsigned int nonce_timeout)\n{\n  return MHD_digest_auth_check2 (connection,\n                                 realm,\n                                 username,\n                                 password,\n                                 nonce_timeout,\n                                 MHD_DIGEST_ALG_MD5);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'connection' is declared as a non-const pointer (struct MHD_Connection *connection). If the function and any callees (here MHD_digest_auth_check2) only read the connection object and do not modify it, the pointer should be const-qualified (const struct MHD_Connection *connection). Because the fragment shows a non-const pointer with no evidence it must be modified, this violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the provided fragment. MISRA R8.13 requires pointers to point to const-qualified types when that is possible, but whether it is possible here cannot be determined from this snippet alone. The function forwards the parameter to MHD_digest_auth_check2; if that callee (or this API) expects to modify the connection, or if API/binary-compatibility or the type being opaque prevents const qualification, then a non-const parameter is appropriate and not a violation. To justify a R8.13 violation you must show that the connection object is never modified anywhere (including in MHD_digest_auth_check2) and that it is safe to change the public API; none of that evidence is present. Therefore the claim of a violation is not correct based on the given code."
}