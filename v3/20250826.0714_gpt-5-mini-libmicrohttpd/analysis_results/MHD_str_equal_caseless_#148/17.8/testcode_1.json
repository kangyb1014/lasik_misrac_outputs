{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'str1++' modifies the pointer parameter str1 (i.e. the value of the function parameter), which is forbidden by MISRA C 2023 Rule 17.8. The rule allows modifying the object pointed-to, but not the pointer parameter itself. This is a violation. (Fix: use a local copy, e.g. 'const char *p = str1;' and increment p instead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1487.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_:\n```c\nint\nMHD_str_equal_caseless_ (const char *str1,\n                         const char *str2)\n{\n  while (0 != (*str1))\n  {\n    const char c1 = *str1;\n    const char c2 = *str2;\n    if (charsequalcaseless (c1, c2))\n    {\n      str1++;\n      str2++;\n    }\n    else\n      return 0;\n  }\n  return 0 == (*str2);\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe function: append a log line describing current pointers and characters */\nstatic void MHD_log_probe(const char *stage,\n                          const char *str1,\n                          const char *str2,\n                          char c1,\n                          char c2,\n                          int extra)\n{\n  FILE *fp = fopen(\"/tmp/logs/1487.txt\", \"a\");\n  if (fp != NULL)\n  {\n    /* Print pointer values, printable characters if possible, and hex values */\n    fprintf(fp, \"%s: str1=%p, *str1='%c'(0x%02X), str2=%p, *str2='%c'(0x%02X), extra=%d\\n\",\n            stage,\n            (void *)str1, (c1 >= 32 && c1 < 127) ? c1 : '?', (unsigned int)(unsigned char)c1,\n            (void *)str2, (c2 >= 32 && c2 < 127) ? c2 : '?', (unsigned int)(unsigned char)c2,\n            extra);\n    fclose(fp);\n  }\n}\n\nint\nMHD_str_equal_caseless_ (const char *str1,\n                         const char *str2)\n{\n  /* Log entry into the function */\n  if ((str1 != NULL) && (str2 != NULL))\n  {\n    MHD_log_probe(\"entry\", str1, str2, *str1, *str2, 0);\n  }\n\n  while (0 != (*str1))\n  {\n    const char c1 = *str1;\n    const char c2 = *str2;\n\n    /* Log before comparison */\n    MHD_log_probe(\"loop_before_cmp\", str1, str2, c1, c2, 0);\n\n    if (charsequalcaseless (c1, c2))\n    {\n      /* Log just before incrementing the pointer parameter (this is the operation\n         that demonstrates the violation scenario reported by the other agent) */\n      MHD_log_probe(\"before_increment(str1++)\", str1, str2, c1, c2, 0);\n\n      str1++;\n      str2++;\n\n      /* Log after increment so callers can observe the pointer change */\n      MHD_log_probe(\"after_increment\", str1, str2, *str1, *str2, 0);\n    }\n    else\n    {\n      /* Log mismatch and reason for early return */\n      MHD_log_probe(\"mismatch_return\", str1, str2, c1, c2, 0);\n      return 0;\n    }\n  }\n\n  /* Loop ended: log final state and result */\n  {\n    int result = (0 == (*str2));\n    MHD_log_probe(\"function_exit\", str1, str2, *str1, *str2, result);\n    return result;\n  }\n}\n"
}