{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos' but is only used for read access inside the loop (pos->kind, pos->header, pos->header_size, pos->value, pos->value_size). Therefore it could be declared as 'const struct MHD_HTTP_Req_Header *pos' so the pointer would point to a const-qualified type. (Only if other code or the iterator callback requires modifying the pointed-to data would const-qualification be impossible.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values_n:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n\n  if (NULL == iterator)\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  else\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n          return ret;\n      }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper */\nstatic void mhd_log113(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/113.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  mhd_log113(\"MHD_get_connection_values_n: enter; connection=%p, kind=%u, iterator=%p, iterator_cls=%p\",\n             (void *)connection, (unsigned)kind, (void *)iterator, iterator_cls);\n\n  if (NULL == connection)\n  {\n    mhd_log113(\"MHD_get_connection_values_n: connection is NULL -> return -1\");\n    return -1;\n  }\n  ret = 0;\n\n  if (NULL == iterator)\n  {\n    mhd_log113(\"MHD_get_connection_values_n: iterator is NULL -> counting mode\");\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      mhd_log113(\"iter count: pos=%p, pos->kind=%u, header=%p, header_size=%lu, value=%p, value_size=%lu\",\n                 (void *)pos, (unsigned)pos->kind,\n                 (void *)pos->header, (unsigned long)pos->header_size,\n                 (void *)pos->value, (unsigned long)pos->value_size);\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  }\n  else\n  {\n    mhd_log113(\"MHD_get_connection_values_n: iterator provided -> callback mode\");\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      mhd_log113(\"iter cb: pos=%p, pos->kind=%u, header=%p, header_size=%lu, value=%p, value_size=%lu\",\n                 (void *)pos, (unsigned)pos->kind,\n                 (void *)pos->header, (unsigned long)pos->header_size,\n                 (void *)pos->value, (unsigned long)pos->value_size);\n\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        mhd_log113(\"MHD_get_connection_values_n: invoking iterator with kind=%u, header=%p, header_size=%lu, value=%p, value_size=%lu\",\n                   (unsigned)pos->kind,\n                   (void *)pos->header, (unsigned long)pos->header_size,\n                   (void *)pos->value, (unsigned long)pos->value_size);\n\n        /* Preserve original semantics but capture iterator return value for logging */\n        int iterator_result = iterator (iterator_cls,\n                                        pos->kind,\n                                        pos->header,\n                                        pos->header_size,\n                                        pos->value,\n                                        pos->value_size);\n        mhd_log113(\"MHD_get_connection_values_n: iterator returned %d\", iterator_result);\n\n        if (MHD_NO == iterator_result)\n        {\n          mhd_log113(\"MHD_get_connection_values_n: iterator requested early exit -> returning %d\", ret);\n          return ret;\n        }\n      }\n    }\n  }\n  mhd_log113(\"MHD_get_connection_values_n: exit -> returning %d\", ret);\n  return ret;\n}\n"
}