{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes pos->header and pos->value to the iterator function. If the iterator type is declared to take non-const pointers (e.g. char *header, char *value) or the struct fields are declared as char * (not const char *), then pointer types are not const-qualified even though the data is only read here. That violates MISRA C 2023 Rule 8.13. Example violating scenario: MHD_KeyValueIteratorN is typedef int (*)(void *, enum MHD_ValueKind, char *header, size_t, char *value, size_t) or struct MHD_HTTP_Req_Header has char *header; char *value; \u2014 both should use const char * when the data is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values_n:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n\n  if (NULL == iterator)\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  else\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n          return ret;\n      }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values_n code.\n",
  "test_code": "static void mhd_log_bytes(FILE *log, const char *label, const char *data, size_t size)\n{\n  size_t i, max = (size > 32U) ? 32U : size;\n  if (NULL == log || NULL == data || 0U == size)\n    return;\n  fprintf(log, \"  %s (size=%zu):\", label, size);\n  for (i = 0U; i < max; ++i)\n    fprintf(log, \" %02x\", (unsigned char)data[i]);\n  if (max < size)\n    fprintf(log, \" ...\");\n  fprintf(log, \"\\n\");\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/113.txt\", \"a\");\n\n  if (log)\n    fprintf(log, \"MHD_get_connection_values_n called: connection=%p kind=%d iterator=%p iterator_cls=%p\\n\",\n            (void *)connection, (int)kind, (void *)iterator, iterator_cls);\n\n  if (NULL == connection)\n  {\n    if (log)\n    {\n      fprintf(log, \"connection is NULL -> returning -1\\n\");\n      fclose(log);\n    }\n    return -1;\n  }\n  ret = 0;\n\n  if (NULL == iterator)\n  {\n    if (log)\n      fprintf(log, \"iterator is NULL: counting matching headers only\\n\");\n\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (log)\n        {\n          fprintf(log, \"match #%d: pos=%p kind=%u header=%p header_size=%zu value=%p value_size=%zu\\n\",\n                  ret, (void *)pos, (unsigned)pos->kind,\n                  (void *)pos->header, pos->header_size,\n                  (void *)pos->value, pos->value_size);\n          mhd_log_bytes(log, \"header bytes\", pos->header, pos->header_size);\n          mhd_log_bytes(log, \"value bytes\", pos->value, pos->value_size);\n        }\n      }\n    }\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"iterator provided: calling iterator for each matching header\\n\");\n\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (log)\n        {\n          fprintf(log, \"invocation #%d: pos=%p kind=%u header=%p header_size=%zu value=%p value_size=%zu\\n\",\n                  ret, (void *)pos, (unsigned)pos->kind,\n                  (void *)pos->header, pos->header_size,\n                  (void *)pos->value, pos->value_size);\n          mhd_log_bytes(log, \"header bytes\", pos->header, pos->header_size);\n          mhd_log_bytes(log, \"value bytes\", pos->value, pos->value_size);\n          fprintf(log, \"about to call iterator at %p\\n\", (void *)iterator);\n        }\n\n        /* Call iterator once and capture return to allow logging */\n        int iter_ret = iterator (iterator_cls,\n                                 pos->kind,\n                                 pos->header,\n                                 pos->header_size,\n                                 pos->value,\n                                 pos->value_size);\n\n        if (log)\n          fprintf(log, \"iterator returned %d\\n\", iter_ret);\n\n        if (MHD_NO == iter_ret)\n        {\n          if (log)\n          {\n            fprintf(log, \"iterator requested stop -> returning %d\\n\", ret);\n            fclose(log);\n          }\n          return ret;\n        }\n      }\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"completed: returning %d\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n"
}