{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code casts the callback context to a non-const pointer: (struct handler_param *) cls. In the shown function the resulting param is only read (param->response_page) and never modified, so the pointer should be const-qualified. This violates MISRA C 2023 Rule 8.13. Recommended fixes: use a const-qualified local pointer, e.g. const struct handler_param *param = (const struct handler_param *) cls; or, if allowed by the API, change the callback prototype to take a const void *cls. If cls must be modified by design, then the non-const cast would be acceptable.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 8.13 recommends that a pointer should point to a const-qualified type whenever the pointed-to object is not modified through that pointer. In the shown function cls is cast to a non-const struct handler_param * but the code only reads from param (uses param->response_page) and does not modify the pointed-to object. Thus the local pointer should be const-qualified. Simple fixes are: make the local pointer const (e.g. const struct handler_param *param = cls; or const struct handler_param *param = (const struct handler_param *)cls;) or \u2014 if the API permits \u2014 change the callback prototype to take a const void *cls. If, however, the library/API requires cls to be a modifiable context (i.e. it may be modified elsewhere), then keeping a non-const pointer would be justified. Given the code shown, the non-const cast is unnecessary and the agent\u2019s report of a Rule 8.13 violation is correct."
}