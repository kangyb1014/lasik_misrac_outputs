{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to strlen(param->response_page) can read past the object\u2019s bounds if param or param->response_page is NULL, points to freed memory, or points to a buffer that is not NUL-terminated. For example, if param->response_page is a buffer of length 10 filled with data but not terminated with '\\0', strlen will scan beyond the 10 bytes causing an out-of-bounds read. There is no evidence in the fragment that the string is always NUL-terminated or that the pointer is valid, so the use of strlen may violate Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The code calls strlen(param->response_page) without any local check or visible invariant ensuring param and param->response_page are non-NULL, point to valid storage, and that the buffer is NUL-terminated. MISRA C 2023 Rule 21.17 requires that use of <string.h> functions must not result in accesses beyond the bounds of the referenced objects. From the provided fragment there is no proof that the preconditions for strlen are met (pointer validity and NUL termination), so the call is potentially able to read past the object\u2019s bounds and thus violates Rule 21.17. (If elsewhere in the program there is a documented, verifiable guarantee that response_page is a valid, NUL-terminated string for the lifetime of this call, the use could be compliant; that guarantee is not present in this fragment.)"
}