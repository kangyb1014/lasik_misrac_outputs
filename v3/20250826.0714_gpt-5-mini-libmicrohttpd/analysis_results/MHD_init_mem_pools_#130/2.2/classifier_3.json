{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_init_mem_pools_:\n```c\nvoid\nMHD_init_mem_pools_ (void)\n{\n#ifdef MHD_SC_PAGESIZE\n  long result;\n  result = sysconf (MHD_SC_PAGESIZE);\n  if (-1 != result)\n    MHD_sys_page_size_ = (size_t) result;\n  else\n    MHD_sys_page_size_ = (size_t) MHD_DEF_PAGE_SIZE_;\n#elif defined(_WIN32)\n  SYSTEM_INFO si;\n  GetSystemInfo (&si);\n  MHD_sys_page_size_ = (size_t) si.dwPageSize;\n#else\n  MHD_sys_page_size_ = (size_t) MHD_DEF_PAGE_SIZE_;\n#endif /* _WIN32 */\n  mhd_assert (0 == (MHD_sys_page_size_ % ALIGN_SIZE));\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nelse\n    MHD_sys_page_size_ = (size_t) MHD_DEF_PAGE_SIZE_;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The 'else' assigns a default page size when sysconf returns -1 (failure). This branch is reachable at runtime and its removal would change program behaviour (MHD_sys_page_size_ would remain unset or retain a previous value), so it is not dead code."
}