{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_param_value:\n```c\nstatic enum PerfRepl_param_result\nget_param_value (const char *param_name, const char *param_tail,\n                 const char *next_param, unsigned int *param_value)\n{\n  const char *value_str;\n  size_t digits;\n  if (0 != param_tail[0])\n  {\n    if ('=' != param_tail[0])\n      value_str = param_tail;\n    else\n      value_str = param_tail + 1;\n  }\n  else\n    value_str = next_param;\n\n  if (NULL != value_str)\n    digits = mhd_tool_str_to_uint (value_str, param_value);\n  else\n    digits = 0;\n\n  if ((0 == digits) || (0 != value_str[digits]))\n  {\n    fprintf (stderr, \"Parameter '%s' is not followed by valid number.\\n\",\n             param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n\n  if (0 != param_tail[0])\n    return PERF_RPL_PARAM_FULL_STR;\n\n  return PERF_RPL_PARAM_STR_PLUS_NEXT;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "digits = mhd_tool_str_to_uint (value_str, param_value);",
    "static enum PerfRepl_param_result\nget_param_value (const char *param_name, const char *param_tail,\n                 const char *next_param, unsigned int *param_value)"
  ],
  "explanation": "Most pointer uses in this function are already const-qualified: param_name, param_tail, next_param and the local value_str are declared as const char *, so they conform to the intent of MISRA C 2023 Rule 8.13. The only non-const pointer parameter in the signature is unsigned int *param_value, which is used to return an output value and therefore must be non-const; it does not indicate a violation by itself. The call to mhd_tool_str_to_uint(value_str, param_value) is flagged because the prototype of that function (not shown here) must be checked: the first parameter should accept a pointer to const char (or take const correctly) and the second should accept an unsigned int * as an output. If mhd_tool_str_to_uint's prototype expects a non-const char * for the input string, or otherwise discards const-qualification, that would be a potential Rule 8.13 issue. All other fragments in the function either already use const-qualified pointer types or necessarily require non-const pointers for output and therefore do not need investigation for Rule 8.13."
}