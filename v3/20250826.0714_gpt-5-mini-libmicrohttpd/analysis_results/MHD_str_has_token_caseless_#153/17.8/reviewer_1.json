{
  "user_message": "An agent A claimed that the following MHD_str_has_token_caseless_ code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_str_has_token_caseless_.\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe fragment increments the pointer parameter 'str' (str++;), i.e. it modifies the pointer itself. MISRA C 2023 Rule 17.8 prohibits modifying pointer parameters (the object pointed to may be modified, but the pointer shall not be).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nEVENT=outer_loop_start str=0x560dc7fb0c62 *str=0x73 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=0 sc=0x00 tc=0x00\nEVENT=inner_before_increment str=0x560dc7fb0c62 *str=0x73 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=0 sc=0x73 tc=0x00\nEVENT=inner_char_read str=0x560dc7fb0c63 *str=0x74 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=1 sc=0x73 tc=0x73\nEVENT=inner_before_increment str=0x560dc7fb0c63 *str=0x74 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=1 sc=0x74 tc=0x00\nEVENT=inner_char_read str=0x560dc7fb0c64 *str=0x72 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=2 sc=0x74 tc=0x74\nEVENT=inner_before_increment str=0x560dc7fb0c64 *str=0x72 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=2 sc=0x72 tc=0x00\nEVENT=inner_char_read str=0x560dc7fb0c65 *str=0x69 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=3 sc=0x72 tc=0x72\nEVENT=inner_before_increment str=0x560dc7fb0c65 *str=0x69 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=3 sc=0x69 tc=0x00\nEVENT=inner_char_read str=0x560dc7fb0c66 *str=0x6e token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=4 sc=0x69 tc=0x69\nEVENT=inner_before_increment str=0x560dc7fb0c66 *str=0x6e token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=4 sc=0x6e tc=0x00\nEVENT=inner_char_read str=0x560dc7fb0c67 *str=0x67 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=5 sc=0x6e tc=0x6e\nEVENT=inner_before_increment str=0x560dc7fb0c67 *str=0x67 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=5 sc=0x67 tc=0x00\nEVENT=inner_char_read str=0x560dc7fb0c68 *str=0x00 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=6 sc=0x67 tc=0x67\nEVENT=match_success str=0x560dc7fb0c68 *str=0x00 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=6 sc=0x67 tc=0x67\nEVENT=outer_loop_start str=0x560dc7faf004 *str=0x53 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=0 sc=0x00 tc=0x00\nEVENT=inner_before_increment str=0x560dc7faf004 *str=0x53 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=0 sc=0x53 tc=0x00\nEVENT=inner_char_read str=0x560dc7faf005 *str=0x74 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=1 sc=0x53 tc=0x73\nEVENT=inner_before_increment str=0x560dc7faf005 *str=0x74 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=1 sc=0x74 tc=0x00\nEVENT=inner_char_read str=0x560dc7faf006 *str=0x72 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=2 sc=0x74 tc=0x74\nEVENT=inner_before_increment str=0x560dc7faf006 *str=0x72 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=2 sc=0x72 tc=0x00\nEVENT=inner_char_read str=0x560dc7faf007 *str=0x69 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=3 sc=0x72 tc=0x72\nEVENT=inner_before_increment str=0x560dc7faf007 *str=0x69 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=3 sc=0x69 tc=0x00\nEVENT=inner_char_read str=0x560dc7faf008 *str=0x6e token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=4 sc=0x69 tc=0x69\nEVENT=inner_before_increment str=0x560dc7faf008 *str=0x6e token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=4 sc=0x6e tc=0x00\nEVENT=inner_char_read str=0x560dc7faf009 *str=0x67 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=5 sc=0x6e tc=0x6e\nEVENT=inner_before_increment str=0x560dc7faf009 *str=0x67 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=5 sc=0x67 tc=0x00\nEVENT=inner_char_read str=0x560dc7faf00a *str=0x00 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=6 sc=0x67 tc=0x67\nEVENT=match_success str=0x560dc7faf00a *str=0x00 token=0x560dc7fb0c62 token[0]=0x73 token_len=6 i=6 sc=0x67 tc=0x67\nEVENT=outer_loop_start str=0x560dc7fb0c62 *str=0x73 token=0x560dc7faf004 token[0]=0x53 token_len=6 i=0 sc=0x00 tc=0x00\nEVENT=inner_before_increment str=0x560dc7fb0c62 *str=0x73 token=0x560dc7faf004 token[0]=0x53 token_len=6 i=0 sc=0x73 tc=0x00\nEVENT=inner_char_read str=0x560dc7fb0c63 *str=0x74 token=0x560dc7faf004 token[0]=0x53 token_len=6 i=1 sc=0x73 tc=0x53\nEVENT=inner_before_increment str=0x560dc7fb0c63 *str=0x74 token=0x560dc7faf004 token[0]=0x53 token_len=6 i=1 sc=0x74 tc=0x00\nEVENT=inner_char_read str=0x560dc7fb0c64 *str=0x72 token=0x560dc7faf004 token[0]=0x53 token_len=6 i=2 sc=0x74 tc=0x74\nEVENT=inner_before_increment str=0x560dc7fb0c64 *str=0x72 token=0x560dc7faf004 token[0]=0x53 token_len=6 \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. MISRA C 2023 Rule 17.8 forbids modifying function parameters themselves (though the object pointed to may be modified). In the shown code the parameter 'str' (declared as const char *str) is incremented in several places (e.g. the whitespace-skipping loop uses str++; the inner loop reads with *(str++); and the substring-skip loop advances str). Those operations modify the pointer parameter rather than the characters it points to, so this is a violation. Remediation: use a local copy (e.g. const char *p = str;) and advance p instead of str, leaving the parameter unmodified."
}