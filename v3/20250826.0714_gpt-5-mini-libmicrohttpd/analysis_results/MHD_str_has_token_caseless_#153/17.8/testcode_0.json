{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'str' (declared as 'const char *str') is incremented in the loop (str++), e.g. while (0 != *str && ',' != *str) str++; \u2014 this modifies the function parameter itself, which violates MISRA C 2023 Rule 17.8. Use a local pointer (e.g. const char *p = str;) and advance p instead of str to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_has_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1537.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_has_token_caseless_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_has_token_caseless_:\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_has_token_caseless_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <ctype.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Forward declaration of external helper used by original code. */\nextern int charsequalcaseless (char a, char b);\n\n/* Helper to attempt opening the log file; try to create the directory if needed. */\nstatic FILE *open_log_file(void)\n{\n  FILE *f = fopen(\"/tmp/logs/1537.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* Try to create the directory and reopen. */\n    (void) mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/1537.txt\", \"a\");\n  }\n  return f;\n}\n\n/* Small helper to produce a printable representation of a char. */\nstatic char printable_char(unsigned char c)\n{\n  if (isprint(c))\n    return (char) c;\n  return '.';\n}\n\n/* Probe function that logs a consistent set of state info. */\nstatic void log_probe(const char *event,\n                      const char *str,\n                      const char *token,\n                      size_t token_len,\n                      size_t i,\n                      int sc,\n                      int tc)\n{\n  FILE *f = open_log_file();\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"%s: str=%p *str=0x%02x('%c') token_len=%zu i=%zu sc=0x%02x tc=0x%02x token=\\\"%.*s\\\"\\n\",\n          event,\n          (const void *) str,\n          (unsigned) (str ? (unsigned char) *str : 0U),\n          printable_char((unsigned char) (str ? *str : '\\0')),\n          token_len,\n          i,\n          sc,\n          tc,\n          (int) token_len, token ? token : \"\");\n\n  fflush(f);\n  fclose(f);\n}\n\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  /* Log function entry state */\n  log_probe(\"ENTER\", str, token, token_len, 0U, 0, 0);\n\n  if (0 == token_len)\n  {\n    log_probe(\"RETURN_EMPTY_TOKEN\", str, token, token_len, 0U, 0, 0);\n    return false;\n  }\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n    {\n      /* Log before advancing the parameter pointer to capture the violation scenario. */\n      log_probe(\"SKIP_WS_BEFORE_INC\", str, token, token_len, 0U, 0, 0);\n      str++;\n      log_probe(\"SKIP_WS_AFTER_INC\", str, token, token_len, 0U, 0, 0);\n    }\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char *old_str = str;\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      /* Log the inner-loop step showing the old and new pointer and characters. */\n      /* Note: i has already been incremented to represent how many token chars were consumed. */\n      log_probe(\"INNER_STEP\", old_str, token, token_len, i, (int) (unsigned char) sc, (int) (unsigned char) tc);\n\n      if (0 == sc)\n      {\n        log_probe(\"INNER_SC_ZERO_RETURN_FALSE\", str, token, token_len, i, (int) (unsigned char) sc, (int) (unsigned char) tc);\n        return false;\n      }\n      if (! charsequalcaseless (sc, tc))\n      {\n        log_probe(\"INNER_MISMATCH\", str, token, token_len, i, (int) (unsigned char) sc, (int) (unsigned char) tc);\n        break;\n      }\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n        {\n          log_probe(\"MATCH_SKIP_WS_BEFORE_INC\", str, token, token_len, i, 0, 0);\n          str++;\n          log_probe(\"MATCH_SKIP_WS_AFTER_INC\", str, token, token_len, i, 0, 0);\n        }\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n        {\n          log_probe(\"RETURN_TRUE_MATCHED\", str, token, token_len, i, 0, 0);\n          return true;\n        }\n        /* Unmatched chars at end of substring. */\n        log_probe(\"MATCH_UNMATCHED_TAIL\", str, token, token_len, i, 0, 0);\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n    {\n      log_probe(\"SKIP_TO_COMMA_BEFORE_INC\", str, token, token_len, 0U, 0, 0);\n      str++;\n      log_probe(\"SKIP_TO_COMMA_AFTER_INC\", str, token, token_len, 0U, 0, 0);\n    }\n  }\n\n  log_probe(\"RETURN_FALSE_END\", str, token, token_len, 0U, 0, 0);\n  return false;\n}\n"
}