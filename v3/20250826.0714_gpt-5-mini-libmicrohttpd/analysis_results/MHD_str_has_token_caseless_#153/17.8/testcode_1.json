{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment increments the pointer parameter 'str' (str++;), i.e. it modifies the pointer itself. MISRA C 2023 Rule 17.8 prohibits modifying pointer parameters (the object pointed to may be modified, but the pointer shall not be).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_has_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1537.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_has_token_caseless_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_has_token_caseless_:\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_has_token_caseless_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <stdarg.h>\n\n/* External dependency assumed to exist elsewhere. */\nextern int charsequalcaseless (char a, char b);\n\n/* Helper to log events to the required file. */\nstatic void\nlog_event(const char *event,\n          const char *str,\n          const char *token,\n          size_t token_len,\n          size_t i,\n          int sc,\n          int tc)\n{\n  FILE *f = fopen(\"/tmp/logs/1537.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Print useful debugging information: pointer values and nearby chars. */\n  fprintf(f,\n          \"EVENT=%s str=%p *str=0x%02x token=%p token[0]=0x%02x token_len=%zu i=%zu sc=0x%02x tc=0x%02x\\n\",\n          event,\n          (const void *)str,\n          (unsigned int)(unsigned char)(str != NULL ? *str : 0),\n          (const void *)token,\n          (unsigned int)(unsigned char)(token != NULL ? token[0] : 0),\n          token_len,\n          i,\n          sc & 0xff,\n          tc & 0xff);\n  fclose(f);\n}\n\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n  {\n    log_event(\"token_len_zero\", str, token, token_len, 0, 0, 0);\n    return false;\n  }\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Log start of outer loop iteration. */\n    log_event(\"outer_loop_start\", str, token, token_len, 0, 0, 0);\n\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n    {\n      /* Log the pointer and character before incrementing the pointer. */\n      log_event(\"skip_whitespace_before_increment\", str, token, token_len, 0, 0, 0);\n      str++;\n      /* Log the pointer and character after incrementing the pointer. */\n      log_event(\"skip_whitespace_after_increment\", str, token, token_len, 0, 0, 0);\n    }\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      /* Preserve original semantics of post-increment in a way that lets us log pointer changes. */\n      const char sc_before = *str; /* character at current pointer */\n      log_event(\"inner_before_increment\", str, token, token_len, i, (int)sc_before, 0);\n      const char sc = sc_before;\n      str++; /* original used *(str++). This preserves the same behaviour. */\n\n      const char tc = token[i];\n      i++; /* original used token[i++]; */\n\n      /* Log after reading characters and after the pointer increment has occurred. */\n      log_event(\"inner_char_read\", str, token, token_len, i, (int)sc, (int)tc);\n\n      if (0 == sc)\n      {\n        log_event(\"inner_sc_zero_return_false\", str, token, token_len, i, (int)sc, (int)tc);\n        return false;\n      }\n      if (! charsequalcaseless (sc, tc))\n      {\n        log_event(\"inner_chars_mismatch\", str, token, token_len, i, (int)sc, (int)tc);\n        break;\n      }\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n        {\n          log_event(\"match_success\", str, token, token_len, i, (int)sc, (int)tc);\n          return true;\n        }\n        /* Unmatched chars at end of substring. */\n        log_event(\"match_partial_unmatched_tail\", str, token, token_len, i, (int)sc, (int)tc);\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n\n    log_event(\"advance_to_next_substring\", str, token, token_len, i, 0, 0);\n  }\n  log_event(\"no_match_end\", str, token, token_len, 0, 0, 0);\n  return false;\n}\n"
}