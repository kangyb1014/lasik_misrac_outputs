{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment const char tc = token[i++]; (and the increment of i) is executed even when sc == 0 and the function immediately returns. In that branch the read of token[i] and the increment of i have no observable effect on program behaviour (the function returns), so those operations are executed but could be removed without changing behaviour. Therefore the code contains dead code (violates MISRA C 2023 Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_has_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1532.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_has_token_caseless_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_has_token_caseless_:\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_has_token_caseless_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <ctype.h>\n\n/* Forward declaration of external helper used by original code. */\nextern bool charsequalcaseless (char a, char b);\n\nstatic void log_state(const char *event,\n                      const char *str_ptr,\n                      const char *token_ptr,\n                      size_t token_len,\n                      size_t i_before,\n                      size_t i_after,\n                      char sc,\n                      char tc)\n{\n  FILE *f = fopen(\"/tmp/logs/1532.txt\", \"a\");\n  if (f != NULL)\n  {\n    int sc_print = (int) sc;\n    int tc_print = (int) tc;\n    char sc_ch = (isprint((unsigned char) sc) ? sc : '.');\n    char tc_ch = (isprint((unsigned char) tc) ? tc : '.');\n    (void) fprintf(f,\n                   \"%s: token_len=%zu, i_before=%zu, i_after=%zu, sc=%d('%c'), tc=%d('%c'), str=%p, token=%p\\n\",\n                   event,\n                   token_len,\n                   i_before,\n                   i_after,\n                   sc_print,\n                   sc_ch,\n                   tc_print,\n                   tc_ch,\n                   (const void *) str_ptr,\n                   (const void *) token_ptr);\n    (void) fclose(f);\n  }\n}\n\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n  {\n    log_state(\"TOKEN_LEN_ZERO\", str, token, token_len, 0u, 0u, (char)0, (char)0);\n    return false;\n  }\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      /* Log read of sc and tc and i values; capture i_before and i_after. */\n      {\n        size_t i_after = i;\n        size_t i_before = (i_after > 0u) ? (i_after - 1u) : 0u;\n        log_state(\"READ_SC_TC\", str, token, token_len, i_before, i_after, sc, tc);\n      }\n\n      if (0 == sc)\n      {\n        /* Log the condition that triggers the early return. */\n        {\n          size_t i_after = i;\n          size_t i_before = (i_after > 0u) ? (i_after - 1u) : 0u;\n          log_state(\"SC_ZERO_BEFORE_RETURN\", str, token, token_len, i_before, i_after, sc, tc);\n        }\n        return false;\n      }\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n        {\n          log_state(\"MATCH_FOUND\", str, token, token_len, i, i, sc, tc);\n          return true;\n        }\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  log_state(\"NO_MATCH_END\", str, token, token_len, 0u, 0u, (char)0, (char)0);\n  return false;\n}\n"
}