{
  "user_message": "An agent A claimed that the following add_session_cookie code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_session_cookie.\n```c\nstatic void\nadd_session_cookie (struct Session *session,\n                    struct MHD_Response *response)\n{\n  char cstr[256];\n  snprintf (cstr,\n            sizeof (cstr),\n            \"%s=%s\",\n            COOKIE_NAME,\n            session->sid);\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_SET_COOKIE,\n                               cstr))\n  {\n    fprintf (stderr,\n             \"Failed to set session cookie header!\\n\");\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'session' is declared as 'struct Session *session' but within add_session_cookie the object pointed to is only read (session->sid) and not modified. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible (e.g. 'const struct Session *session').\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 8.13 recommends that pointers should point to const-qualified types whenever possible. In add_session_cookie the function only reads session->sid and does not modify the pointed-to Session object, so the parameter should be declared as const struct Session *session (or otherwise const-qualified) to reflect intent and satisfy the rule. The response parameter must remain non-const because it is passed to MHD_add_response_header which may modify it. Note: changing the signature to const will require updating any callers if their prototypes differ, but that does not negate the rule."
}