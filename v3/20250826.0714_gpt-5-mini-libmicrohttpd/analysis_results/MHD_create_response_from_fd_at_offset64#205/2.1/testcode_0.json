{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nWhen the conditional-compilation branch is included (HAVE___LSEEKI64 and HAVE_LSEEK64 not defined) and sizeof(off_t) is greater-than-or-equal-to sizeof(uint64_t) (for example on a 64-bit system where both are 8 bytes), the expression sizeof(uint64_t) > sizeof(off_t) is a compile-time constant false. Because of short-circuiting, the entire if condition becomes a compile-time false and the return NULL inside the if is unreachable in that built translation unit. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_fd_at_offset64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2051.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_from_fd_at_offset64 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_fd_at_offset64:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n    return NULL;\n#endif\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n    return NULL;\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n    return NULL;\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n  return response;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_from_fd_at_offset64 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <limits.h>\n#include <sys/types.h>\n#include <inttypes.h>\n\n/* Probe helpers: append logs to /tmp/logs/2051.txt */\nstatic void probe_log_printf(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2051.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n#if ! defined(HAVE___LSEEKI64)\nstatic const char *probe_have_lseeki64 = \"NOT_DEFINED\";\n#else\nstatic const char *probe_have_lseeki64 = \"DEFINED\";\n#endif\n\n#if ! defined(HAVE_LSEEK64)\nstatic const char *probe_have_lseek64 = \"NOT_DEFINED\";\n#else\nstatic const char *probe_have_lseek64 = \"DEFINED\";\n#endif\n\nstatic void probe_before_branch(uint64_t size, int fd, uint64_t offset)\n{\n  /* Log the environment and parameter values that determine the conditional. */\n  probe_log_printf(\"[probe] entering MHD_create_response_from_fd_at_offset64\");\n  probe_log_printf(\"[probe] parameters: size=%\" PRIu64 \", fd=%d, offset=%\" PRIu64, size, fd, offset);\n  probe_log_printf(\"[probe] macro HAVE___LSEEKI64=%s, HAVE_LSEEK64=%s\", probe_have_lseeki64, probe_have_lseek64);\n  probe_log_printf(\"[probe] sizeof(uint64_t)=%zu, sizeof(off_t)=%zu\", sizeof(uint64_t), sizeof(off_t));\n\n  /* Evaluate the same expressions as in the guarded if and log their runtime values. */\n  bool cond_size_gt_offt = (sizeof(uint64_t) > sizeof(off_t));\n  bool cond_over_int32 = ( (size > (uint64_t) INT32_MAX) ||\n                           (offset > (uint64_t) INT32_MAX) ||\n                           ((size + offset) >= (uint64_t) INT32_MAX) );\n  probe_log_printf(\"[probe] (sizeof(uint64_t) > sizeof(off_t)) => %s\", cond_size_gt_offt ? \"true\" : \"false\");\n  probe_log_printf(\"[probe] size/offset overflow-int32 check => %s\", cond_over_int32 ? \"true\" : \"false\");\n  probe_log_printf(\"[probe] combined-if-result (before short-circuit) => %s\",\n                   (cond_size_gt_offt && cond_over_int32) ? \"true\" : \"false\");\n}\n\nstatic void probe_inside_guard(uint64_t size, int fd, uint64_t offset)\n{\n  /* This function is intended to be called inside the guarded-if before returning NULL.\n     If the guarded-if is a compile-time constant false, this will never execute; the log\n     of the surrounding conditions (above) will demonstrate that. */\n  probe_log_printf(\"[probe] inside guarded-if: would return NULL due to size/offset checks\");\n  probe_log_printf(\"[probe] parameters at guarded-if: size=%\" PRIu64 \", fd=%d, offset=%\" PRIu64, size, fd, offset);\n}\n\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n\n  /* Probe before evaluating the conditional-compilation guarded check. */\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  probe_before_branch(size, fd, offset);\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) ) {\n    /* If this statement ever executes, log it for evidence. If it is a compile-time\n       constant false (e.g. sizeof(uint64_t) <= sizeof(off_t)), this block will be\n       unreachable in that translation unit; the logs above will show the evaluated\n       constants and explain why the block is unreachable. */\n    probe_inside_guard(size, fd, offset);\n    return NULL;\n  }\n#endif\n\n  /* Log the checks for negative values as well. */\n  probe_log_printf(\"[probe] checking negative-value conditions: size=%\" PRIu64 \", offset=%\" PRIu64, size, offset);\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) ) {\n    probe_log_printf(\"[probe] negative-value check triggered: returning NULL\");\n    return NULL;\n  }\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n  {\n    probe_log_printf(\"[probe] MHD_create_response_from_callback returned NULL\");\n    return NULL;\n  }\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n  probe_log_printf(\"[probe] created response: fd=%d, fd_off=%\" PRIu64, fd, offset);\n  return response;\n}\n"
}