{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_fd_at_offset64:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n    return NULL;\n#endif\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n    return NULL;\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n    return NULL;\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n  return response;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No function parameter is modified in this function. The parameters are: uint64_t size, int fd, uint64_t offset \u2014 all passed by value and never assigned to after declaration. The following code locations might look relevant but do not violate Rule 17.8 and therefore do not need investigation:\n- The comparisons and casts: ((int64_t) size < 0), ((int64_t) offset < 0), ((int64_t) (size + offset) < 0) \u2014 these perform temporary casts and arithmetic but do not assign to the parameters.\n- The check involving (size + offset) and INT32_MAX under the preprocessor guard \u2014 arithmetic and comparisons only, no parameter assignment.\n- The call MHD_create_response_from_callback(size, ...) \u2014 size is passed by value; this function call does not modify the local parameter variable.\n- Assignments into the response structure (response->fd = fd; response->fd_off = offset;) \u2014 these copy the parameter values into struct members but do not modify the parameter variables themselves.\n- Passing &file_reader and &free_callback to the callback-creation function \u2014 these are taking addresses of objects to pass as arguments; there are no pointer parameters in the current function that could be modified.\n- The early returns (return NULL) \u2014 they do not modify parameters.\n\nBecause none of the parameter identifiers are assigned to and there are no pointer parameters whose pointer values are modified, there are no fragments that require investigation for MISRA C 2023 Rule 17.8 in this function."
}