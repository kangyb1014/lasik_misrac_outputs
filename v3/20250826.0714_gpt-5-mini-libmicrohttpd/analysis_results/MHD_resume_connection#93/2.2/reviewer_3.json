{
  "user_message": "An agent A claimed that the following MHD_resume_connection code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_resume_connection.\n```c\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nPotential violation: if the mhd_assert macro expands to a no-op (for example when assertions are disabled in production builds), the statement mhd_assert(NULL == daemon->worker_pool); is an executed no-op whose removal would not affect program behaviour, so it is dead code and violates MISRA C 2023 Rule 2.2. If, however, mhd_assert has an observable effect (e.g. aborts/logs on failure) then removing it would change behaviour and there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[enter] connection=0x7fab88000b90 daemon=0x5577b6b5c2e0 worker_pool=(nil) options=0xa40d connection->resuming=0 daemon->resuming=0 itc=0x5577b6b5c4d8\n[before_assert] connection=0x7fab88000b90 daemon=0x5577b6b5c2e0 worker_pool=(nil) options=0xa40d connection->resuming=0 daemon->resuming=0 itc=0x5577b6b5c4d8\n[after_assert] connection=0x7fab88000b90 daemon=0x5577b6b5c2e0 worker_pool=(nil) options=0xa40d connection->resuming=0 daemon->resuming=0 itc=0x5577b6b5c4d8\n[post_resuming_set] connection=0x7fab88000b90 daemon=0x5577b6b5c2e0 worker_pool=(nil) options=0xa40d connection->resuming=1 daemon->resuming=1 itc=0x5577b6b5c4d8\n[itc] daemon=0x5577b6b5c2e0 itc=0x5577b6b5c4d8 activated=1\n[exit] connection=0x7fab88000b90 daemon=0x5577b6b5c2e0 worker_pool=(nil) options=0xa40d connection->resuming=1 daemon->resuming=0 itc=0x5577b6b5c4d8\n[enter] connection=0x7fab88000b90 daemon=0x5577b6b5c760 worker_pool=(nil) options=0x1a44d connection->resuming=0 daemon->resuming=0 itc=0x5577b6b5c958\n[before_assert] connection=0x7fab88000b90 daemon=0x5577b6b5c760 worker_pool=(nil) options=0x1a44d connection->resuming=0 daemon->resuming=0 itc=0x5577b6b5c958\n[after_assert] connection=0x7fab88000b90 daemon=0x5577b6b5c760 worker_pool=(nil) options=0x1a44d connection->resuming=0 daemon->resuming=0 itc=0x5577b6b5c958\n[post_resuming_set] connection=0x7fab88000b90 daemon=0x5577b6b5c760 worker_pool=(nil) options=0x1a44d connection->resuming=1 daemon->resuming=1 itc=0x5577b6b5c958\n[itc] daemon=0x5577b6b5c760 itc=0x5577b6b5c958 activated=1\n[exit] connection=0x7fab88000b90 daemon=0x5577b6b5c760 worker_pool=(nil) options=0x1a44d connection->resuming=1 daemon->resuming=1 itc=0x5577b6b5c958\n[enter] connection=0x7fab88000b90 daemon=0x5577b6b5cba0 worker_pool=(nil) options=0xa44d connection->resuming=0 daemon->resuming=0 itc=0x5577b6b5cd98\n[before_assert] connection=0x7fab88000b90 daemon=0x5577b6b5cba0 worker_pool=(nil) options=0xa44d connection->resuming=0 daemon->resuming=0 itc=0x5577b6b5cd98\n[after_assert] connection=0x7fab88000b90 daemon=0x5577b6b5cba0 worker_pool=(nil) options=0xa44d connection->resuming=0 daemon->resuming=0 itc=0x5577b6b5cd98\n[post_resuming_set] connection=0x7fab88000b90 daemon=0x5577b6b5cba0 worker_pool=(nil) options=0xa44d connection->resuming=1 daemon->resuming=1 itc=0x5577b6b5cd98\n[itc] daemon=0x5577b6b5cba0 itc=0x5577b6b5cd98 activated=1\n[exit] connection=0x7fab88000b90 daemon=0x5577b6b5cba0 worker_pool=(nil) options=0xa44d connection->resuming=1 daemon->resuming=0 itc=0x5577b6b5cd98\n[enter] connection=0x7f4228000b90 daemon=0x5603ca96fb00 worker_pool=(nil) options=0xa40d connection->resuming=0 daemon->resuming=0 itc=0x5603ca96fcf8\n[before_assert] connection=0x7f4228000b90 daemon=0x5603ca96fb00 worker_pool=(nil) options=0xa40d connection->resuming=0 daemon->resuming=0 itc=0x5603ca96fcf8\n[after_assert] connection=0x7f4228000b90 daemon=0x5603ca96fb00 worker_pool=(nil) options=0xa40d connection->resuming=0 daemon->resuming=0 itc=0x5603ca96fcf8\n[post_resuming_set] connection=0x7f4228000b90 daemon=0x5603ca96fb00 worker_pool=(nil) options=0xa40d connection->resuming=1 daemon->resuming=1 itc=0x5603ca96fcf8\n[itc] daemon=0x5603ca96fb00 itc=0x5603ca96fcf8 activated=1\n[exit] connection=0x7f4228000b90 daemon=0x5603ca96fb00 worker_pool=(nil) options=0xa40d connection->resuming=1 daemon->resuming=1 itc=0x5603ca96fcf8\n[enter] connection=0x7f4228000b90 daemon=0x5603ca96ff80 worker_pool=(nil) options=0x1a44d connection->resuming=0 daemon->resuming=0 itc=0x5603ca970178\n[before_assert] connection=0x7f4228000b90 daemon=0x5603ca96ff80 worker_pool=(nil) options=0x1a44d connection->resuming=0 daemon->resuming=0 itc=0x5603ca970178\n[after_assert] connection=0x7f4228000b90 daemon=0x5603ca96ff80 worker_pool=(nil) options=0x1a44d connection->resuming=0 daemon->resuming=0 itc=0x5603ca970178\n[post_resuming_set] connection=0x7f4228000b90 daemon=0x5603ca96ff80 worker_pool=(nil) options=0x1a44d connection->resuming=1 daemon->resuming=1 itc=0x5603ca970178\n[itc] daemon=0x5603ca96ff80 itc=0x5603ca970178 activated=1\n[exit] connection=0x7f4228000b90 daemon=0x5603ca96ff80 worker\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Rule 2.2 forbids executed operations whose removal would not affect program behaviour (i.e. dead code) in the project as built. The mhd_assert line (inside #if defined(MHD_USE_THREADS)) can be compiled either to an expression with observable behaviour (e.g. abort/log) or to a no-op (commonly ((void)0)) depending on the assertion macro definition/configuration. If mhd_assert expands to a no-op in the project build, then that statement is an executed no-op whose removal would not change program behaviour, and thus it is dead code under MISRA C 2023 Rule 2.2. If mhd_assert has observable effects in the project build, removing it would change behaviour and there is no dead\u2011code violation. Therefore Agent A\u2019s report (stating a potential violation when asserts are disabled) is correct: the presence or absence of a Rule 2.2 violation depends on the actual macro/configuration used for the project build."
}