{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: if the mhd_assert macro expands to a no-op (for example when assertions are disabled in production builds), the statement mhd_assert(NULL == daemon->worker_pool); is an executed no-op whose removal would not affect program behaviour, so it is dead code and violates MISRA C 2023 Rule 2.2. If, however, mhd_assert has an observable effect (e.g. aborts/logs on failure) then removing it would change behaviour and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_resume_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/932.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_resume_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_resume_connection:\n```c\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_resume_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe helper: log state to file for reproduction/evidence. */\nstatic void\nmhd_probe_log_state (const char *stage,\n                     struct MHD_Daemon *daemon,\n                     struct MHD_Connection *connection)\n{\n  FILE *f = fopen(\"/tmp/logs/932.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Safely print fields we expect to exist on the structures. */\n  fprintf (f,\n           \"[%s] connection=%p daemon=%p worker_pool=%p options=0x%lx \"\n           \"connection->resuming=%d daemon->resuming=%d itc=%p\\n\",\n           stage,\n           (void *) connection,\n           (void *) daemon,\n           (void *) (daemon ? daemon->worker_pool : NULL),\n           (unsigned long) (daemon ? daemon->options : 0UL),\n           (int) (connection ? connection->resuming : 0),\n           (int) (daemon ? daemon->resuming : 0),\n           (void *) (daemon ? daemon->itc : NULL));\n\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log_itc_result (struct MHD_Daemon *daemon,\n                          int activated)\n{\n  FILE *f = fopen(\"/tmp/logs/932.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[itc] daemon=%p itc=%p activated=%d\\n\",\n           (void *) daemon,\n           (void *) (daemon ? daemon->itc : NULL),\n           activated);\n\n  fclose (f);\n}\n\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n\n  /* Log entry and initial state. */\n  mhd_probe_log_state (\"enter\", daemon, connection);\n\n#if defined(MHD_USE_THREADS)\n  /* Record state around the assert so we can see whether this check is\n     meaningful at runtime (i.e. whether worker_pool is NULL when reached). */\n  mhd_probe_log_state (\"before_assert\", daemon, connection);\n  mhd_assert (NULL == daemon->worker_pool);\n  mhd_probe_log_state (\"after_assert\", daemon, connection);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n  {\n    /* Log that we're about to panic so logs show the reason and state. */\n    mhd_probe_log_state (\"pre_panic\", daemon, connection);\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n\n  /* Log state after we set resuming flags. */\n  mhd_probe_log_state (\"post_resuming_set\", daemon, connection);\n\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    /* Call the activation once, record the result and log it. */\n    int activated = MHD_itc_activate_ (daemon->itc, \"r\");\n    mhd_probe_log_itc_result (daemon, activated);\n\n    if (! activated)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal resume via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n      /* Log the failure branch to make it visible in the probe logs. */\n      mhd_probe_log_state (\"itc_activation_failed\", daemon, connection);\n    }\n  }\n\n  /* Final log before returning. */\n  mhd_probe_log_state (\"exit\", daemon, connection);\n}\n"
}