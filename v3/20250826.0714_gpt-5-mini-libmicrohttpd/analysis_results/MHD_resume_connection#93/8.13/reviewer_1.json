{
  "user_message": "An agent A claimed that the following MHD_resume_connection code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_resume_connection.\n```c\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes the string literal \"r\" to MHD_itc_activate_. If the prototype of MHD_itc_activate_ accepts a non-const char * (e.g. int MHD_itc_activate_(..., char *cmd)), this is a violation: the function should take a const char * because the argument is a string literal and not meant to be modified. If, however, MHD_itc_activate_ is declared to take a const char * (or daemon->itc is a pointer to a type that must be mutable and is legitimately non-const), then there is no violation. Based on the fragment alone the likely problematic scenario is a non-const parameter for the string literal.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s finding is potentially valid but not proved by the fragment alone. MISRA C:2023 Rule 8.13 requires pointer types to be const-qualified where possible. The call MHD_itc_activate_(daemon->itc, \"r\") will only violate that rule if the prototype of MHD_itc_activate_ declares the corresponding parameter as a non-const char * (or other non-const pointer) while the function does not need to modify the string. If the prototype already uses const char * (or another appropriately const-qualified type), there is no violation. The source snippet does not show the prototype, so you cannot conclude a definite MISRA violation from the fragment. Recommendation: inspect the declaration of MHD_itc_activate_; if it takes a non-const char * that is not modified, change it to take a const char * (or otherwise const-qualify the parameter). Avoid casting the string literal to (char *) because that hides the problem and would not satisfy MISRA intent."
}