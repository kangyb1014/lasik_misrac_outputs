{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(\"\\r\\n--\", &buf[newline], 4) where the first operand is a string literal (a null\u2011terminated string). MISRA C 2023 Rule 21.14 forbids using memcmp to compare null\u2011terminated strings \u2014 use the appropriate string function (e.g. strncmp) or compare raw memory that is not a C string. Therefore this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value_to_boundary code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2368.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_value_to_boundary as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_value_to_boundary:\n```c\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        newline = pp->buffer_pos - 4;\n        break;\n      }\n      newline = (size_t) (r - buf);\n      if (0 == memcmp (\"\\r\\n--\",\n                       &buf[newline],\n                       4))\n        break;\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      if (0 != memcmp (&buf[newline + 4],\n                       boundary,\n                       blen))\n      {\n        /* no boundary, \"\\r\\n--\" is part of content, skip */\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        /* boundary found, process until newline then\n           skip boundary and go back to init */\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;             /* skip boundary as well */\n        buf[newline] = '\\0';\n        break;\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    pp->state = PP_Error;\n    return MHD_NO;\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_value_to_boundary code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\nstatic void\nlog_append(const char *fmt, ...)\n{\n  FILE *f = NULL;\n  /* ensure log directory exists; ignore error if it already does */\n  (void) mkdir(\"/tmp/logs\", 0777);\n  f = fopen(\"/tmp/logs/2368.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic void\nlog_hex(const char *label, const char *p, size_t len)\n{\n  size_t i;\n  FILE *f = NULL;\n  (void) mkdir(\"/tmp/logs\", 0777);\n  f = fopen(\"/tmp/logs/2368.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s:\", label);\n  for (i = 0; i < len; ++i)\n    fprintf(f, \" %02x\", (unsigned char) p[i]);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* Log entry and initial state */\n  log_append(\"ENTER process_value_to_boundary: pp=%p, buffer_pos=%zu, buffer_size=%zu, blen=%zu, ioff=%zu, next_state=%d, next_dash_state=%d\",\n             (void *) pp,\n             (size_t) pp->buffer_pos,\n             (size_t) pp->buffer_size,\n             (size_t) blen,\n             (size_t) *ioffptr,\n             (int) next_state,\n             (int) next_dash_state);\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      log_append(\"inner loop: newline=%zu, buffer_pos=%zu\", newline, pp->buffer_pos);\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        log_append(\"memchr: no '\\\\r' found from offset %zu, set newline=buffer_pos-4=%zu\", newline, pp->buffer_pos - 4);\n        newline = pp->buffer_pos - 4;\n        break;\n      }\n      newline = (size_t) (r - buf);\n      log_append(\"memchr: found '\\\\r' at ptr %p -> newline=%zu\", (void *) r, newline);\n\n      /* Probe bytes around newline and log comparison with literal \"\\r\\n--\" */\n      log_hex(\"bytes_at_newline(4)\", &buf[newline], 4);\n      int cmp_lit = memcmp (\"\\r\\n--\",\n                            &buf[newline],\n                            4);\n      log_append(\"memcmp literal vs buf[newline]: result=%d\", cmp_lit);\n      if (0 == cmp_lit)\n      {\n        log_append(\"literal match at newline=%zu -> potential boundary prefix found\", newline);\n        break;\n      }\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      log_append(\"can check full boundary: newline=%zu, blen=%zu, buffer_pos=%zu\", newline, blen, pp->buffer_pos);\n      log_hex(\"bytes_after_prefix(blen)\", &buf[newline + 4], blen > 64 ? 64 : blen);\n      int cmp_boundary = memcmp (&buf[newline + 4],\n                                 boundary,\n                                 blen);\n      log_append(\"memcmp buf[newline+4] vs boundary: result=%d\", cmp_boundary);\n      if (0 != cmp_boundary)\n      {\n        /* no boundary, \"\\r\\n--\" is part of content, skip */\n        log_append(\"no boundary at newline=%zu; treating '\\\\r\\\\n--' as content and skipping 4 bytes\", newline);\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        /* boundary found, process until newline then\n           skip boundary and go back to init */\n        log_append(\"boundary matched at newline=%zu; setting states and skipping blen+4=%zu bytes\", newline, blen + 4);\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;             /* skip boundary as well */\n        buf[newline] = '\\0';\n        log_append(\"after boundary: ioff=%zu, buf[newline] set to NUL at offset %zu\", *ioffptr, newline);\n        break;\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      log_append(\"cannot check for boundary yet: newline=%zu, buffer_pos=%zu, buffer_size=%zu\", newline, pp->buffer_pos, pp->buffer_size);\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        pp->state = PP_Error;\n        log_append(\"OUT OF MEMORY: setting state=PP_Error and returning MHD_NO\");\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    pp->state = PP_Error;\n    log_append(\"ikvi callback returned MHD_NO: setting state=PP_Error and returning MHD_NO (value_offset=%zu, newline=%zu)\", pp->value_offset, newline);\n    return MHD_NO;\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n  log_append(\"EXIT process_value_to_boundary: new value_offset=%zu, ioff=%zu, must_ikvi=%d, state=%d\", pp->value_offset, *ioffptr, (int) pp->must_ikvi, (int) pp->state);\n  return MHD_YES;\n}\n"
}