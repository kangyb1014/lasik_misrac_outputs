{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  FILE *file;\n  int fd;\n  struct stat buf;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, MHD_HTTP_METHOD_GET))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  file = fopen (&url[1], \"rb\");\n  if (NULL != file)\n  {\n    fd = fileno (file);\n    if (-1 == fd)\n    {\n      (void) fclose (file);\n      return MHD_NO;     /* internal error */\n    }\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      fclose (file);\n      file = NULL;\n    }\n  }\n\n  if (NULL == file)\n  {\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    response = MHD_create_response_from_callback ((size_t) buf.st_size,\n                                                  32 * 1024, /* 32k page size */\n                                                  &file_reader,\n                                                  file,\n                                                  &free_callback);\n    if (NULL == response)\n    {\n      fclose (file);\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call strcmp(method, MHD_HTTP_METHOD_GET) can read memory until a '\\0' is found from the 'method' pointer. If 'method' is NULL or points to a non\u2011NUL\u2011terminated buffer (for example, a caller supplies a 3\u2011byte buffer {'G','E','T'} without a terminating '\\0', or an invalid pointer), strcmp will access beyond the bounds of the referenced object (or dereference NULL), causing out\u2011of\u2011bounds access/undefined behavior. Thus the code can violate Rule 21.17 unless it is guaranteed by higher\u2011level code that 'method' is a valid, NUL\u2011terminated string.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s scenario describes a real class of undefined behavior (strcmp will read until a '\\0' and will misbehave if its pointer is NULL or not NUL\u2011terminated). However, in this code the strcmp call is made on the 'method' parameter supplied by the libmicrohttpd callback API and against MHD_HTTP_METHOD_GET (a compile\u2011time string). The libmicrohttpd callback contract provides 'method' as a valid, NUL\u2011terminated HTTP method string (i.e. not NULL and properly terminated), so the call does not, in the intended use, result in accesses beyond object bounds. Therefore the reported MISRA 21.17 violation is not correct for this code as used with the library. If the code were to be reused outside that library context or if the API guarantee could not be relied upon, a defensive runtime check (e.g. ensure method != NULL) or explicit documentation/annotation of the precondition would be necessary to satisfy MISRA 21.17."
}