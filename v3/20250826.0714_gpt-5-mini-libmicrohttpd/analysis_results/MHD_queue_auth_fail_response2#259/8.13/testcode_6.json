{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'connection' is declared as 'struct MHD_Connection *connection' but the function body does not modify the pointed-to object \u2014 it only forwards the pointer to another function. Therefore the pointer could be const-qualified (i.e. 'const struct MHD_Connection *connection'). As written this violates Rule 8.13 unless the forwarded callee requires a non-const pointer (in which case const cannot be used without casting).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_queue_auth_fail_response2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_queue_auth_fail_response2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_queue_auth_fail_response2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n\n  if (MHD_DIGEST_ALG_MD5 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (MHD_DIGEST_ALG_AUTO == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n\n  return MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                            NULL, response, signal_stale,\n                                            MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                            algo3,\n                                            0, 0);\n}\n```\n</target_code>\nPlease provide the modified MHD_queue_auth_fail_response2 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Probe helper to write logs to /tmp/logs/2593.txt. */\nstatic void mhd_probe_log_start(void)\n{\n  FILE *fp = fopen(\"/tmp/logs/2593.txt\", \"a\");\n  if (fp) {\n    time_t t = time(NULL);\n    fprintf(fp, \"\\n---- MHD_queue_auth_fail_response2 invocation at %ld ----\\n\", (long)t);\n    fclose(fp);\n  }\n}\n\nstatic void mhd_probe_log_params(const struct MHD_Connection *connection,\n                                 const char *realm,\n                                 const char *opaque,\n                                 const struct MHD_Response *response,\n                                 int signal_stale,\n                                 int algo)\n{\n  FILE *fp = fopen(\"/tmp/logs/2593.txt\", \"a\");\n  if (!fp)\n    return;\n\n  fprintf(fp, \"connection=%p\\n\", (void *)connection);\n  fprintf(fp, \"realm=%s\\n\", realm ? realm : \"(null)\");\n  fprintf(fp, \"opaque=%s\\n\", opaque ? opaque : \"(null)\");\n  fprintf(fp, \"response=%p\\n\", (void *)response);\n  fprintf(fp, \"signal_stale=%d\\n\", signal_stale);\n  fprintf(fp, \"algo=%d\\n\", algo);\n  fclose(fp);\n}\n\nstatic void mhd_probe_log_branch(const char *branch_descr)\n{\n  FILE *fp = fopen(\"/tmp/logs/2593.txt\", \"a\");\n  if (!fp)\n    return;\n  fprintf(fp, \"branch_taken=%s\\n\", branch_descr);\n  fclose(fp);\n}\n\nstatic void mhd_probe_log_result(int result)\n{\n  FILE *fp = fopen(\"/tmp/logs/2593.txt\", \"a\");\n  if (!fp)\n    return;\n  fprintf(fp, \"returned_result=%d\\n\", result);\n  fclose(fp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n  enum MHD_Result retval;\n\n  /* Start probe logging for this invocation. */\n  mhd_probe_log_start();\n  mhd_probe_log_params(connection, realm, opaque, response, signal_stale, (int)algo);\n\n  if (MHD_DIGEST_ALG_MD5 == algo) {\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n    mhd_probe_log_branch(\"MHD_DIGEST_ALG_MD5\");\n  } else if (MHD_DIGEST_ALG_SHA256 == algo) {\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n    mhd_probe_log_branch(\"MHD_DIGEST_ALG_SHA256\");\n  } else if (MHD_DIGEST_ALG_AUTO == algo) {\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n    mhd_probe_log_branch(\"MHD_DIGEST_ALG_AUTO\");\n  } else {\n    mhd_probe_log_branch(\"Wrong algo value (panic)\");\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n  }\n\n  /* Log chosen algo3 value. */\n  {\n    FILE *fp = fopen(\"/tmp/logs/2593.txt\", \"a\");\n    if (fp) {\n      fprintf(fp, \"algo3=%d\\n\", (int)algo3);\n      fclose(fp);\n    }\n  }\n\n  /* Call the original function and capture returned result so we can log it. */\n  retval = MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                              NULL, response, signal_stale,\n                                              MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                              algo3,\n                                              0, 0);\n\n  mhd_probe_log_result((int)retval);\n\n  return retval;\n}\n"
}