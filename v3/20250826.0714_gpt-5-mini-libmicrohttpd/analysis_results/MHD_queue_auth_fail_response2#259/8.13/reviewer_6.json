{
  "user_message": "An agent A claimed that the following MHD_queue_auth_fail_response2 code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_queue_auth_fail_response2.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n\n  if (MHD_DIGEST_ALG_MD5 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (MHD_DIGEST_ALG_AUTO == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n\n  return MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                            NULL, response, signal_stale,\n                                            MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                            algo3,\n                                            0, 0);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'connection' is declared as 'struct MHD_Connection *connection' but the function body does not modify the pointed-to object \u2014 it only forwards the pointer to another function. Therefore the pointer could be const-qualified (i.e. 'const struct MHD_Connection *connection'). As written this violates Rule 8.13 unless the forwarded callee requires a non-const pointer (in which case const cannot be used without casting).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not provably correct. Rule 8.13 requires pointers to point to const-qualified types when that is practicable, but it only applies when the object really can be treated as const throughout the call chain. In this function the 'connection' pointer is simply forwarded to MHD_queue_auth_required_response3. If that callee expects a non-const 'struct MHD_Connection *' (as is typical for libmicrohttpd APIs that operate on connection state), then the parameter here cannot be changed to const without introducing a cast or changing the callee\u2019s signature. MISRA allows the non-const form in that case. To determine a real violation you must inspect the signature of MHD_queue_auth_required_response3: if it already accepts a const pointer, then this wrapper should also be const and the report would be correct; if it requires a non-const pointer, the report is incorrect. Given typical API usage, the report is likely false."
}