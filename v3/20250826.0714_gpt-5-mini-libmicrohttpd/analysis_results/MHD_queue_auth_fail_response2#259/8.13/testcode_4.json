{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'response' is declared as a plain pointer: 'struct MHD_Response *response'. In this function 'response' is not modified (it is only forwarded to MHD_queue_auth_required_response3), so if the pointee is intended to be read-only in this routine (and in the called routine), the parameter should be 'const struct MHD_Response *response'. Thus, if neither this function nor the callee modify the object pointed to, the current declaration violates MISRA C 2023 Rule 8.13. If, however, MHD_queue_auth_required_response3 (or other code) legitimately modifies *response, then the non-const declaration is appropriate and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_queue_auth_fail_response2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_queue_auth_fail_response2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_queue_auth_fail_response2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n\n  if (MHD_DIGEST_ALG_MD5 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (MHD_DIGEST_ALG_AUTO == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n\n  return MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                            NULL, response, signal_stale,\n                                            MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                            algo3,\n                                            0, 0);\n}\n```\n</target_code>\nPlease provide the modified MHD_queue_auth_fail_response2 code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logging helper: append control-flow/state information to /tmp/logs/2593.txt. */\nstatic void mhd_probe_log(const char *stage,\n                          void *connection_ptr,\n                          const char *realm,\n                          const char *opaque,\n                          void *response_ptr,\n                          int signal_stale,\n                          int algo_int,\n                          int algo3_int,\n                          int result_present,\n                          int result_int)\n{\n  FILE *f = fopen(\"/tmp/logs/2593.txt\", \"a\");\n  if (f == NULL)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] stage=%s conn=%p realm=%s opaque=%s response=%p signal_stale=%d algo=%d algo3=%d result_present=%d result=%d\\n\",\n          (long)t,\n          stage,\n          connection_ptr,\n          realm ? realm : \"(null)\",\n          opaque ? opaque : \"(null)\",\n          response_ptr,\n          signal_stale,\n          algo_int,\n          algo3_int,\n          result_present,\n          result_int);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n\n  /* Log entry: capture inputs and pointer values. */\n  mhd_probe_log(\"enter\", (void *)connection, realm, opaque, (void *)response,\n                signal_stale, (int)algo, -1, 0, 0);\n\n  if (MHD_DIGEST_ALG_MD5 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (MHD_DIGEST_ALG_AUTO == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else {\n    /* Log unexpected algo before panic so callers can see the value. */\n    mhd_probe_log(\"invalid_algo_before_panic\", (void *)connection, realm, opaque, (void *)response,\n                  signal_stale, (int)algo, -1, 0, 0);\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n  }\n\n  /* Log selected algo3. Do not modify any input pointer or pointee. */\n  mhd_probe_log(\"before_call\", (void *)connection, realm, opaque, (void *)response,\n                signal_stale, (int)algo, (int)algo3, 0, 0);\n\n  enum MHD_Result res = MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                                            NULL, response, signal_stale,\n                                                            MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                                            algo3,\n                                                            0, 0);\n\n  /* Log the result and the fact that response was forwarded (pointer value). */\n  mhd_probe_log(\"after_call\", (void *)connection, realm, opaque, (void *)response,\n                signal_stale, (int)algo, (int)algo3, 1, (int)res);\n\n  return res;\n}\n"
}