{
  "user_message": "An agent A claimed that the following MHD_strx_to_uint64_ code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_strx_to_uint64_.\n```c\nsize_t\nMHD_strx_to_uint64_ (const char *str,\n                     uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    if ( (res < (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit <= (UINT64_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n    }\n    else\n      return 0;\n    str++;\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'str' (declared as const char *str) is incremented with 'str++' inside the loop, which modifies the pointer parameter. MISRA C 2023 Rule 17.8 forbids modifying function parameters; a local pointer copy (e.g. const char *p = str) should be used instead.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_strx_to_uint64_: start=0x560f5d0066dc out_val=0x7fffc916d5e8\nloop idx=0 ptr=0x560f5d0066dc ch=0x31 res=0 digit=1\nres updated to 1\nstr incremented -> new ptr=0x560f5d0066dd\nconsumed=1 final_value=1 -> out_val set\nEXIT MHD_strx_to_uint64_: consumed=1\n\nENTER MHD_strx_to_uint64_: start=0x560f5d0068f5 out_val=0x7fffc916d5e8\nloop idx=0 ptr=0x560f5d0068f5 ch=0x30 res=0 digit=0\nres updated to 0\nstr incremented -> new ptr=0x560f5d0068f6\nconsumed=1 final_value=0 -> out_val set\nEXIT MHD_strx_to_uint64_: consumed=1\n\nENTER MHD_strx_to_uint64_: start=0x560f5d00656b out_val=0x7fffc916d5e8\nloop idx=0 ptr=0x560f5d00656b ch=0x31 res=0 digit=1\nres updated to 1\nstr incremented -> new ptr=0x560f5d00656c\nloop idx=1 ptr=0x560f5d00656c ch=0x30 res=1 digit=0\nres updated to 16\nstr incremented -> new ptr=0x560f5d00656d\nloop idx=2 ptr=0x560f5d00656d ch=0x30 res=16 digit=0\nres updated to 256\nstr incremented -> new ptr=0x560f5d00656e\nloop idx=3 ptr=0x560f5d00656e ch=0x30 res=256 digit=0\nres updated to 4096\nstr incremented -> new ptr=0x560f5d00656f\nloop idx=4 ptr=0x560f5d00656f ch=0x30 res=4096 digit=0\nres updated to 65536\nstr incremented -> new ptr=0x560f5d006570\nconsumed=5 final_value=65536 -> out_val set\nEXIT MHD_strx_to_uint64_: consumed=5\n\nENTER MHD_strx_to_uint64_: start=0x560f5d006571 out_val=0x7fffc916d5e8\nloop idx=0 ptr=0x560f5d006571 ch=0x31 res=0 digit=1\nres updated to 1\nstr incremented -> new ptr=0x560f5d006572\nloop idx=1 ptr=0x560f5d006572 ch=0x32 res=1 digit=2\nres updated to 18\nstr incremented -> new ptr=0x560f5d006573\nloop idx=2 ptr=0x560f5d006573 ch=0x33 res=18 digit=3\nres updated to 291\nstr incremented -> new ptr=0x560f5d006574\nloop idx=3 ptr=0x560f5d006574 ch=0x34 res=291 digit=4\nres updated to 4660\nstr incremented -> new ptr=0x560f5d006575\nconsumed=4 final_value=4660 -> out_val set\nEXIT MHD_strx_to_uint64_: consumed=4\n\nENTER MHD_strx_to_uint64_: start=0x560f5d006576 out_val=0x7fffc916d5e8\nloop idx=0 ptr=0x560f5d006576 ch=0x34 res=0 digit=4\nres updated to 4\nstr incremented -> new ptr=0x560f5d006577\nloop idx=1 ptr=0x560f5d006577 ch=0x35 res=4 digit=5\nres updated to 69\nstr incremented -> new ptr=0x560f5d006578\nloop idx=2 ptr=0x560f5d006578 ch=0x36 res=69 digit=6\nres updated to 1110\nstr incremented -> new ptr=0x560f5d006579\nloop idx=3 ptr=0x560f5d006579 ch=0x37 res=1110 digit=7\nres updated to 17767\nstr incremented -> new ptr=0x560f5d00657a\nconsumed=4 final_value=17767 -> out_val set\nEXIT MHD_strx_to_uint64_: consumed=4\n\nENTER MHD_strx_to_uint64_: start=0x560f5d00657b out_val=0x7fffc916d5e8\nloop idx=0 ptr=0x560f5d00657b ch=0x37 res=0 digit=7\nres updated to 7\nstr incremented -> new ptr=0x560f5d00657c\nloop idx=1 ptr=0x560f5d00657c ch=0x38 res=7 digit=8\nres updated to 120\nstr incremented -> new ptr=0x560f5d00657d\nloop idx=2 ptr=0x560f5d00657d ch=0x39 res=120 digit=9\nres updated to 1929\nstr incremented -> new ptr=0x560f5d00657e\nloop idx=3 ptr=0x560f5d00657e ch=0x30 res=1929 digit=0\nres updated to 30864\nstr incremented -> new ptr=0x560f5d00657f\nconsumed=4 final_value=30864 -> out_val set\nEXIT MHD_strx_to_uint64_: consumed=4\n\nENTER MHD_strx_to_uint64_: start=0x560f5d006580 out_val=0x7fffc916d5e8\nloop idx=0 ptr=0x560f5d006580 ch=0x38 res=0 digit=8\nres updated to 8\nstr incremented -> new ptr=0x560f5d006581\nloop idx=1 ptr=0x560f5d006581 ch=0x30 res=8 digit=0\nres updated to 128\nstr incremented -> new ptr=0x560f5d006582\nloop idx=2 ptr=0x560f5d006582 ch=0x32 res=128 digit=2\nres updated to 2050\nstr incremented -> new ptr=0x560f5d006583\nloop idx=3 ptr=0x560f5d006583 ch=0x31 res=2050 digit=1\nres updated to 32801\nstr incremented -> new ptr=0x560f5d006584\nconsumed=4 final_value=32801 -> out_val set\nEXIT MHD_strx_to_uint64_: consumed=4\n\nENTER MHD_strx_to_uint64_: start=0x560f5d006585 out_val=0x7fffc916d5e8\nloop idx=0 ptr=0x560f5d006585 ch=0x39 res=0 digit=9\nres updated to 9\nstr incremented -> new ptr=0x560f5d006586\nloop idx=1 ptr=0x560f5d006586 ch=0x37 res=9 digit=7\nres updated to 151\nstr incremented -> new ptr=0x560f5d006587\nloop idx=2 ptr=0x560f5d006587 ch=0x35 res=151 digit=5\nres updated to 2421\nstr incremented -> new ptr=0x560f5d006588\nloop \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states the pointer parameter itself shall not be modified (the object pointed to may be). In the function MHD_strx_to_uint64_ the parameter 'str' (declared as const char *str) is incremented via 'str++' inside the loop, which modifies the pointer parameter object and therefore violates Rule 17.8. (Using '*out_val = res' is allowed because the pointee may be modified. A simple fix is to use a local pointer copy, e.g. 'const char *p = str;' and increment p, or declare the parameter as 'const char * const str' to prevent modification.)"
}