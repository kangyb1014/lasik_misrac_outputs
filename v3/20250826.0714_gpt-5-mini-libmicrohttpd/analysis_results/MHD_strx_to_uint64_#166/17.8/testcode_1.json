{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function increments the pointer parameter 'str' (str++ and str = start comparisons). Modifying the pointer parameter itself violates MISRA C 2023 Rule 17.8. A local pointer copy (e.g. const char *p = str) or declaring the parameter as const char * const str would avoid the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint64_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1667.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint64_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint64_:\n```c\nsize_t\nMHD_strx_to_uint64_ (const char *str,\n                     uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    if ( (res < (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit <= (UINT64_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n    }\n    else\n      return 0;\n    str++;\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint64_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <inttypes.h>\n\n/* Forward declaration of external helper used by the original code. */\nextern int toxdigitvalue (int c);\n\n/* Simple logging helper that appends to /tmp/logs/1667.txt. */\nstatic void mhd_logf(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1667.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nsize_t\nMHD_strx_to_uint64_ (const char *str,\n                     uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n  int digit;\n\n  /* Log entry and parameters */\n  mhd_logf(\"MHD_strx_to_uint64_: entry start=%p str=%p out_val=%p\", (void *) start, (void *) str, (void *) out_val);\n\n  if (! str || ! out_val)\n  {\n    mhd_logf(\"MHD_strx_to_uint64_: null parameter(s) - returning 0\");\n    return 0;\n  }\n\n  res = 0;\n  digit = toxdigitvalue ((int) *str);\n\n  mhd_logf(\"MHD_strx_to_uint64_: initial char='\\0' or printable? %c (0x%02x), digit=%d, res=%\" PRIu64 \"\",\n            (*str >= ' ' && *str <= '~') ? *str : '?', (unsigned char) *str, digit, res);\n\n  size_t iter = 0;\n  while (digit >= 0)\n  {\n    /* Log state at loop top */\n    mhd_logf(\"MHD_strx_to_uint64_: loop iter=%zu str=%p char='\\0' or printable? %c (0x%02x) digit=%d res=%\" PRIu64,\n              iter, (void *) str, (*str >= ' ' && *str <= '~') ? *str : '?', (unsigned char) *str, digit, res);\n\n    if ( (res < (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit <= (UINT64_MAX % 16)) ) )\n    {\n      /* Log taking safe branch */\n      mhd_logf(\"MHD_strx_to_uint64_: safe to accumulate (res=%\" PRIu64 \")\", res);\n      res *= 16;\n      res += (unsigned int) digit;\n      mhd_logf(\"MHD_strx_to_uint64_: after accumulate res=%\" PRIu64 \"\", res);\n    }\n    else\n    {\n      /* Log overflow scenario and return 0 preserving original behavior */\n      mhd_logf(\"MHD_strx_to_uint64_: overflow detected res=%\" PRIu64 \" digit=%d - returning 0\", res, digit);\n      return 0;\n    }\n\n    /* Move pointer forward (this is the operation that modifies the parameter 'str') */\n    str++;\n    mhd_logf(\"MHD_strx_to_uint64_: advanced str -> %p (start=%p) diff=%zu\", (void *) str, (void *) start, (size_t) (str - start));\n\n    digit = toxdigitvalue ((int) *str);\n    mhd_logf(\"MHD_strx_to_uint64_: next char='\\0' or printable? %c (0x%02x), next digit=%d\", (*str >= ' ' && *str <= '~') ? *str : '?', (unsigned char) *str, digit);\n\n    iter++;\n  }\n\n  /* Log final condition and assignment */\n  if (str - start > 0)\n  {\n    *out_val = res;\n    mhd_logf(\"MHD_strx_to_uint64_: parsed length=%zu res=%\" PRIu64 \" assigned to out_val\", (size_t) (str - start), res);\n  }\n  else\n  {\n    mhd_logf(\"MHD_strx_to_uint64_: no digits parsed (length=0)\");\n  }\n\n  mhd_logf(\"MHD_strx_to_uint64_: exit returning length=%zu\", (size_t) (str - start));\n  return (size_t) (str - start);\n}\n"
}