{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert(NULL != res) is redundant: all control paths that reach it guarantee that the pool has enough space and MHD_pool_allocate(pool, size, true) is expected to succeed. The assert only evaluates a condition and (assuming the macro has no side effects or is compiled out in production) its presence does not affect program behaviour; removing it would not change behaviour. Therefore this is dead code and violates Rule 2.2. (If mhd_assert can perform observable actions beyond the check\u2014e.g. logging or aborting in release builds\u2014then it would not be dead; the verdict above assumes the usual side\u2011effect\u2011free/assert\u2011compiled\u2011out behaviour.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_alloc_memory_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_alloc_memory_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_alloc_memory_:\n```c\nvoid *\nMHD_connection_alloc_memory_ (struct MHD_Connection *connection,\n                              size_t size)\n{\n  struct MHD_Connection *const c = connection; /* a short alias */\n  struct MemoryPool *const pool = c->pool;     /* a short alias */\n  size_t need_to_be_freed = 0; /**< The required amount of additional free memory */\n  void *res;\n\n  res = MHD_pool_try_alloc (pool,\n                            size,\n                            &need_to_be_freed);\n  if (NULL != res)\n    return res;\n\n  if (MHD_pool_is_resizable_inplace (pool,\n                                     c->write_buffer,\n                                     c->write_buffer_size))\n  {\n    if (c->write_buffer_size - c->write_buffer_append_offset >=\n        need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->write_buffer_size - need_to_be_freed;\n      buf = MHD_pool_reallocate (pool,\n                                 c->write_buffer,\n                                 c->write_buffer_size,\n                                 new_buf_size);\n      mhd_assert (c->write_buffer == buf);\n      mhd_assert (c->write_buffer_append_offset <= new_buf_size);\n      mhd_assert (c->write_buffer_send_offset <= new_buf_size);\n      c->write_buffer_size = new_buf_size;\n      c->write_buffer = buf;\n    }\n    else\n      return NULL;\n  }\n  else if (MHD_pool_is_resizable_inplace (pool,\n                                          c->read_buffer,\n                                          c->read_buffer_size))\n  {\n    if (c->read_buffer_size - c->read_buffer_offset >= need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->read_buffer_size - need_to_be_freed;\n      buf = MHD_pool_reallocate (pool,\n                                 c->read_buffer,\n                                 c->read_buffer_size,\n                                 new_buf_size);\n      mhd_assert (c->read_buffer == buf);\n      mhd_assert (c->read_buffer_offset <= new_buf_size);\n      c->read_buffer_size = new_buf_size;\n      c->read_buffer = buf;\n    }\n    else\n      return NULL;\n  }\n  else\n    return NULL;\n  res = MHD_pool_allocate (pool, size, true);\n  mhd_assert (NULL != res); /* It has been checked that pool has enough space */\n  return res;\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_alloc_memory_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper - lightweight and intended not to change program logic. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  fprintf(f, \"[MHD_connection_alloc_memory_] \");\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nvoid *\nMHD_connection_alloc_memory_ (struct MHD_Connection *connection,\n                              size_t size)\n{\n  struct MHD_Connection *const c = connection; /* a short alias */\n  struct MemoryPool *const pool = c->pool;     /* a short alias */\n  size_t need_to_be_freed = 0; /**< The required amount of additional free memory */\n  void *res;\n\n  probe_log(\"entered: connection=%p, pool=%p, requested_size=%zu, write_buffer=%p, write_buffer_size=%zu, write_buffer_append_offset=%zu, write_buffer_send_offset=%zu, read_buffer=%p, read_buffer_size=%zu, read_buffer_offset=%zu\",\n            (void *)connection, (void *)pool, size,\n            (void *)c->write_buffer, c->write_buffer_size, c->write_buffer_append_offset, c->write_buffer_send_offset,\n            (void *)c->read_buffer, c->read_buffer_size, c->read_buffer_offset);\n\n  res = MHD_pool_try_alloc (pool,\n                            size,\n                            &need_to_be_freed);\n  probe_log(\"MHD_pool_try_alloc returned res=%p, need_to_be_freed=%zu\", res, need_to_be_freed);\n  if (NULL != res) {\n    probe_log(\"fast path: allocation succeeded from pool, returning %p\", res);\n    return res;\n  }\n\n  if (MHD_pool_is_resizable_inplace (pool,\n                                     c->write_buffer,\n                                     c->write_buffer_size))\n  {\n    probe_log(\"write buffer is resizable in place: write_buffer=%p, write_buffer_size=%zu\", (void *)c->write_buffer, c->write_buffer_size);\n    if (c->write_buffer_size - c->write_buffer_append_offset >=\n        need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->write_buffer_size - need_to_be_freed;\n      probe_log(\"will reallocate write buffer: old_size=%zu, new_size=%zu, append_offset=%zu, send_offset=%zu\",\n                c->write_buffer_size, new_buf_size, c->write_buffer_append_offset, c->write_buffer_send_offset);\n      buf = MHD_pool_reallocate (pool,\n                                 c->write_buffer,\n                                 c->write_buffer_size,\n                                 new_buf_size);\n      probe_log(\"MHD_pool_reallocate(write) returned buf=%p (old buf=%p)\", (void *)buf, (void *)c->write_buffer);\n      mhd_assert (c->write_buffer == buf);\n      mhd_assert (c->write_buffer_append_offset <= new_buf_size);\n      mhd_assert (c->write_buffer_send_offset <= new_buf_size);\n      c->write_buffer_size = new_buf_size;\n      c->write_buffer = buf;\n      probe_log(\"after reallocation write_buffer=%p, write_buffer_size=%zu\", (void *)c->write_buffer, c->write_buffer_size);\n    }\n    else\n    {\n      probe_log(\"write buffer resizable but not enough space to free: write_buffer_size=%zu, append_offset=%zu, need_to_be_freed=%zu -> returning NULL\",\n                c->write_buffer_size, c->write_buffer_append_offset, need_to_be_freed);\n      return NULL;\n    }\n  }\n  else if (MHD_pool_is_resizable_inplace (pool,\n                                          c->read_buffer,\n                                          c->read_buffer_size))\n  {\n    probe_log(\"read buffer is resizable in place: read_buffer=%p, read_buffer_size=%zu\", (void *)c->read_buffer, c->read_buffer_size);\n    if (c->read_buffer_size - c->read_buffer_offset >= need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->read_buffer_size - need_to_be_freed;\n      probe_log(\"will reallocate read buffer: old_size=%zu, new_size=%zu, read_offset=%zu\",\n                c->read_buffer_size, new_buf_size, c->read_buffer_offset);\n      buf = MHD_pool_reallocate (pool,\n                                 c->read_buffer,\n                                 c->read_buffer_size,\n                                 new_buf_size);\n      probe_log(\"MHD_pool_reallocate(read) returned buf=%p (old buf=%p)\", (void *)buf, (void *)c->read_buffer);\n      mhd_assert (c->read_buffer == buf);\n      mhd_assert (c->read_buffer_offset <= new_buf_size);\n      c->read_buffer_size = new_buf_size;\n      c->read_buffer = buf;\n      probe_log(\"after reallocation read_buffer=%p, read_buffer_size=%zu\", (void *)c->read_buffer, c->read_buffer_size);\n    }\n    else\n    {\n      probe_log(\"read buffer resizable but not enough space to free: read_buffer_size=%zu, read_offset=%zu, need_to_be_freed=%zu -> returning NULL\",\n                c->read_buffer_size, c->read_buffer_offset, need_to_be_freed);\n      return NULL;\n    }\n  }\n  else\n  {\n    probe_log(\"neither write nor read buffer is resizable in place -> returning NULL\");\n    return NULL;\n  }\n  res = MHD_pool_allocate (pool, size, true);\n  probe_log(\"MHD_pool_allocate after resizing returned res=%p (expected non-NULL if pool has enough space)\", res);\n  mhd_assert (NULL != res); /* It has been checked that pool has enough space */\n  probe_log(\"returning allocation %p\", res);\n  return res;\n}\n"
}