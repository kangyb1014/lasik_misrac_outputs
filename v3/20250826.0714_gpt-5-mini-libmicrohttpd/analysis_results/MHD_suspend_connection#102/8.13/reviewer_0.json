{
  "user_message": "An agent A claimed that the following MHD_suspend_connection code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_suspend_connection.\n```c\n_MHD_EXTERN void\nMHD_suspend_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot suspend connections without \" \\\n                  \"enabling MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#ifdef UPGRADE_SUPPORT\n  if (NULL != connection->urh)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Error: connection scheduled for \\\"upgrade\\\" cannot \" \\\n                 \"be suspended.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return;\n  }\n#endif /* UPGRADE_SUPPORT */\n  internal_suspend_connection_ (connection);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local variable is declared as a const pointer to a non-const MHD_Daemon: 'struct MHD_Daemon *const daemon = connection->daemon;'. In this function the daemon object is only read (fields accessed like daemon->options, daemon->tid) and not modified, so the pointer could and should point to a const-qualified type (e.g. 'const struct MHD_Daemon *const daemon'). Therefore the code violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 R.8.13 recommends that a pointer should point to a const\u2011qualified type whenever that is possible. In the shown function the local variable is declared as a const pointer to a non\u2011const object (struct MHD_Daemon *const daemon). On the face of it the code only reads fields from daemon (daemon->options, daemon->tid) so qualifying the pointed\u2011to type as const would be attractive. However, within the same function daemon is passed to macros/functions (e.g. MHD_DLOG(daemon, ...), and the various MHD_D_IS_*_ macros) whose parameter types are not visible in this snippet. If any of those expect a non\u2011const struct MHD_Daemon * (i.e. have non\u2011const parameters or expand to code that would modify the object), then changing the local declaration to const struct MHD_Daemon *const would be incompatible and thus not \u201cpossible.\u201d MISRA\u2019s wording is \u201cwhenever possible,\u201d so the rule is violated only when it is possible to make the pointee const without breaking the surrounding API/usage. Because the snippet shows daemon being passed to other APIs and we do not have their prototypes, we cannot conclude that it is possible to change the pointee to const. Therefore the report asserting a definite MISRA R.8.13 violation is not justified on the evidence given."
}