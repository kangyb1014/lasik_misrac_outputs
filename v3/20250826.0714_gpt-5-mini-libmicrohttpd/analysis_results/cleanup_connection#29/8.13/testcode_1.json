{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis call passes a string literal (via _()) to MHD_DLOG. If MHD_DLOG (or the _ macro/gettext) is declared to take a plain char * (non-const), then the pointer parameter is not const-qualified even though the argument is an immutable string literal \u2014 violating MISRA C 2023 Rule 8.13. Example violating declaration: void MHD_DLOG(struct MHD_Daemon *d, char *msg); or char *_(const char *s); (returning non-const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified cleanup_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of cleanup_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of cleanup_connection:\n```c\nstatic void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (connection->in_cleanup)\n    return; /* Prevent double cleanup. */\n  connection->in_cleanup = true;\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      else\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n         (! MHD_itc_activate_ (daemon->itc, \"c\")) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal end of connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n  }\n}\n```\n</target_code>\nPlease provide the modified cleanup_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe helper: logs state to /tmp/logs/293.txt without altering logic. */\nstatic void\nmhd_probe_log_state (const char *stage,\n                     struct MHD_Daemon *daemon,\n                     struct MHD_Connection *connection,\n                     const char *msg_ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/293.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"--- cleanup_connection probe: %s ---\\n\", stage);\n  fprintf(f, \"connection=%p daemon=%p\\n\", (void *)connection, (void *)daemon);\n  if (connection != NULL)\n  {\n    fprintf(f, \"  in_cleanup=%d suspended=%d resuming=%d in_idle=%d\\n\",\n            connection->in_cleanup ? 1 : 0,\n            connection->suspended ? 1 : 0,\n            connection->resuming ? 1 : 0,\n            connection->in_idle ? 1 : 0);\n    /* Attempt to print timeout values in a safe manner */\n    fprintf(f, \"  connection_timeout_ms=%ld\\n\",\n            (long) connection->connection_timeout_ms);\n  }\n  if (daemon != NULL)\n  {\n    fprintf(f, \"  daemon->connection_timeout_ms=%ld\\n\",\n            (long) daemon->connection_timeout_ms);\n  }\n  if (msg_ptr != NULL)\n  {\n    /* Print pointer and the string to show what is passed to MHD_DLOG/_(). */\n    fprintf(f, \"  message_ptr=%p message=\\\"%s\\\"\\n\",\n            (const void *) msg_ptr,\n            msg_ptr);\n  }\n  fprintf(f, \"-------------------------------\\n\\n\");\n  fclose(f);\n}\n\nstatic void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  /* Probe: entry */\n  mhd_probe_log_state (\"entry\", daemon, connection, NULL);\n\n  if (connection->in_cleanup)\n  {\n    /* Probe: double cleanup prevented */\n    mhd_probe_log_state (\"already_in_cleanup_return\", daemon, connection, NULL);\n    return; /* Prevent double cleanup. */\n  }\n  connection->in_cleanup = true;\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n\n    /* Probe: after destroying response */\n    mhd_probe_log_state (\"after_destroy_response\", daemon, connection, NULL);\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n\n    /* Probe: removed from suspended list */\n    mhd_probe_log_state (\"removed_from_suspended\", daemon, connection, NULL);\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      else\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n\n    /* Probe: removed from connections list (normal path) */\n    mhd_probe_log_state (\"removed_from_connections\", daemon, connection, NULL);\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n\n  /* Probe: inserted into cleanup list */\n  mhd_probe_log_state (\"inserted_into_cleanup\", daemon, connection, NULL);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n         (! MHD_itc_activate_ (daemon->itc, \"c\")) )\n    {\n#ifdef HAVE_MESSAGES\n      /* Prepare the message via _() so we can capture pointer and value. */\n      const char *probe_msg = _ (\"Failed to signal end of connection via inter-thread \"\n                                 \"communication channel.\\n\");\n\n      /* Probe: about to call MHD_DLOG and provide the message pointer/value. */\n      mhd_probe_log_state (\"about_to_mhd_dlog\", daemon, connection, probe_msg);\n\n      /* Original logging call preserved. */\n      MHD_DLOG (daemon,\n                probe_msg);\n#endif\n    }\n  }\n}\n"
}