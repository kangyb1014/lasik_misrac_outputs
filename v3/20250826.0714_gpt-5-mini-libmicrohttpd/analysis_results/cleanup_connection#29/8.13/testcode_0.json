{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the string literal \"c\" to MHD_itc_activate_. If the prototype of MHD_itc_activate_ declares the parameter as a non-const pointer (e.g. char *), this discards the const nature of the literal and violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when modification is not required. If, however, the function prototype already declares the parameter as const char * (or equivalent const-qualified type), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified cleanup_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of cleanup_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of cleanup_connection:\n```c\nstatic void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (connection->in_cleanup)\n    return; /* Prevent double cleanup. */\n  connection->in_cleanup = true;\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      else\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n         (! MHD_itc_activate_ (daemon->itc, \"c\")) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal end of connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n  }\n}\n```\n</target_code>\nPlease provide the modified cleanup_connection code.\n",
  "test_code": "static void\nprobe_log_connection_state(struct MHD_Connection *connection, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/293.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log basic connection/daemon state relevant to cleanup control flow */\n    fprintf(f, \"probe: %s: stage=%s, connection=%p, daemon=%p, in_cleanup=%d, suspended=%d, resuming=%d, in_idle=%d, connection_timeout_ms=%d\\n\",\n            __func__, stage,\n            (void *)connection,\n            (void *)(connection ? connection->daemon : NULL),\n            (int)(connection ? connection->in_cleanup : 0),\n            (int)(connection ? connection->suspended : 0),\n            (int)(connection ? connection->resuming : 0),\n            (int)(connection ? connection->in_idle : 0),\n            (int)(connection ? connection->connection_timeout_ms : -1));\n    fclose(f);\n  }\n}\n\nstatic void\nprobe_log_itc_activate_attempt(struct MHD_Daemon *daemon)\n{\n  FILE *f = fopen(\"/tmp/logs/293.txt\", \"a\");\n  if (f != NULL)\n  {\n    const char *lit = \"c\";\n    /* Log the intent to call the inter-thread communication activation\n       and the pointer/value of the string literal passed. This provides\n       evidence that a string literal is being passed (address and content). */\n    fprintf(f, \"probe: %s: daemon=%p, itc=%p, MHD_ITC_IS_VALID=%d, literal_ptr=%p, literal_value='%s'\\n\",\n            __func__, (void *)daemon, (void *)(daemon ? daemon->itc : NULL), (int)MHD_ITC_IS_VALID_ (daemon ? daemon->itc : NULL), (const void *)lit, lit);\n    fclose(f);\n  }\n}\n\nstatic void\nprobe_log_itc_activate_result(struct MHD_Daemon *daemon, int result)\n{\n  FILE *f = fopen(\"/tmp/logs/293.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"probe: %s: daemon=%p, itc=%p, activate_result=%d\\n\",\n            __func__, (void *)daemon, (void *)(daemon ? daemon->itc : NULL), result);\n    fclose(f);\n  }\n}\n\nstatic void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  probe_log_connection_state(connection, \"entry\");\n\n  if (connection->in_cleanup)\n  {\n    probe_log_connection_state(connection, \"early_return_already_in_cleanup\");\n    return; /* Prevent double cleanup. */\n  }\n  connection->in_cleanup = true;\n  probe_log_connection_state(connection, \"marked_in_cleanup\");\n\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n    probe_log_connection_state(connection, \"response_destroyed\");\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n    probe_log_connection_state(connection, \"was_suspended_removed_from_list\");\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      else\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n      probe_log_connection_state(connection, \"timeout_list_adjusted\");\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n    probe_log_connection_state(connection, \"removed_from_connections_list\");\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n  probe_log_connection_state(connection, \"inserted_into_cleanup_list\");\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      /* Log the attempt and the literal pointer/content we will pass. */\n      probe_log_itc_activate_attempt(daemon);\n\n      /* Call once, capture and log the result so reproducer agents have\n         concrete evidence whether the activation succeeded or failed. */\n      int activate_ok = MHD_itc_activate_ (daemon->itc, \"c\");\n      probe_log_itc_activate_result(daemon, activate_ok);\n\n      if (! activate_ok)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon,\n                  _ (\"Failed to signal end of connection via inter-thread \" \\\n                     \"communication channel.\\n\"));\n#endif\n      }\n    }\n  }\n\n  probe_log_connection_state(connection, \"exit\");\n}\n"
}