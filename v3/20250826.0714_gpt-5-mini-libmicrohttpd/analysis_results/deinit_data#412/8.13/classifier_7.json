{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of deinit_data:\n```c\nstatic void\ndeinit_data (void)\n{\n  if (NULL != resp_single)\n    MHD_destroy_response (resp_single);\n  resp_single = NULL;\n  if (NULL != resps)\n  {\n    unsigned int i;\n    for (i = 0; i < num_resps; ++i)\n      MHD_destroy_response (resps[i]);\n    num_resps = 0;\n    free (resps);\n  }\n  resps = NULL;\n  if (NULL != body_dyn)\n    free (body_dyn);\n  body_dyn = NULL;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor (i = 0; i < num_resps; ++i)\n      MHD_destroy_response (resps[i]);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: resps[i] is being passed to MHD_destroy_response which must take a non-const pointer because it destroys/frees/modifies the response object; therefore the pointed-to type cannot reasonably be const. A concrete violation would be if the code and all callees treated the response objects as read-only but the pointer type was left non-const (for example, declaring 'struct MHD_Response **resps' while the objects are never modified); in that case the pointed-to type should be const (e.g. 'const struct MHD_Response *resps[]' or 'const struct MHD_Response * const *resps')."
}