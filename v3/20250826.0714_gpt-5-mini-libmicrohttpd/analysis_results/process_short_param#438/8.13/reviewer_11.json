{
  "user_message": "An agent A claimed that the following process_short_param code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of process_short_param.\n```c\nstatic enum PerfRepl_param_result\nprocess_short_param (const char *param, const char *next_param)\n{\n  const char param_chr = param[0];\n  if ('A' == param_chr)\n    return process_param__all_cpus (\"-A\");\n  else if ('t' == param_chr)\n    return process_param__threads (\"-t\", param + 1, next_param);\n  else if ('P' == param_chr)\n    return process_param__thread_per_conn (\"-P\");\n  else if ('e' == param_chr)\n    return process_param__epoll (\"-e\");\n  else if ('p' == param_chr)\n    return process_param__poll (\"-p\");\n  else if ('s' == param_chr)\n    return process_param__select (\"-s\");\n  else if ('E' == param_chr)\n    return process_param__empty (\"-E\");\n  else if ('T' == param_chr)\n    return process_param__tiny (\"-T\");\n  else if ('M' == param_chr)\n    return process_param__medium (\"-M\");\n  else if ('L' == param_chr)\n    return process_param__large (\"-L\");\n  else if ('S' == param_chr)\n    return process_param__shared (\"-S\");\n  else if ('I' == param_chr)\n    return process_param__single (\"-I\");\n  else if ('U' == param_chr)\n    return process_param__unique (\"-U\");\n  else if ('c' == param_chr)\n    return process_param__connections (\"-c\", param + 1, next_param);\n  else if ('O' == param_chr)\n    return process_param__timeout (\"-O\", param + 1, next_param);\n  else if ('V' == param_chr)\n    return process_param__version (\"-V\");\n\n  fprintf (stderr, \"Unrecognised parameter: -%c.\\n\", param_chr);\n  return PERF_RPL_PARAM_ERROR;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nprocess_param__poll is (or is assumed to be) declared to take a non-const pointer (e.g. char *). Passing the string literal \"-p\" to a non-const parameter means the pointer does not point to a const-qualified type, violating MISRA C 2023 Rule 8.13. The fix is to declare the function to take const char * (e.g. process_param__poll(const char *)).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 concerns pointer declarations: a pointer type should be const-qualified whenever the pointed-to object is not intended to be modified. The code shown is only a caller; it does not show the declarations of process_param__poll (or the other process_param__* functions). Whether a rule violation exists depends on those function prototypes, not on this call site.\n\nAgent A\u2019s argument conflates two things: (a) in C a string literal has type array of char (not const-qualified), so passing \"-p\" to a parameter declared as char * is allowed by the language (although modifying a string literal is undefined behavior), and (b) MISRA 8.13 would be violated if a function\u2019s parameter is declared as a non-const pointer even though the function does not and should not modify the pointed data. Thus the possible violation is in the callee\u2019s declaration, not in process_short_param itself.\n\nTherefore, the report as stated (that process_short_param violates 8.13) is not correct. The correct action is to inspect and, if appropriate, change the prototypes of the called functions to take const char * when they do not modify the pointed-to data (which would satisfy MISRA 8.13)."
}