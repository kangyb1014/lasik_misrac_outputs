{
  "user_message": "An agent A claimed that the following process_short_param code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of process_short_param.\n```c\nstatic enum PerfRepl_param_result\nprocess_short_param (const char *param, const char *next_param)\n{\n  const char param_chr = param[0];\n  if ('A' == param_chr)\n    return process_param__all_cpus (\"-A\");\n  else if ('t' == param_chr)\n    return process_param__threads (\"-t\", param + 1, next_param);\n  else if ('P' == param_chr)\n    return process_param__thread_per_conn (\"-P\");\n  else if ('e' == param_chr)\n    return process_param__epoll (\"-e\");\n  else if ('p' == param_chr)\n    return process_param__poll (\"-p\");\n  else if ('s' == param_chr)\n    return process_param__select (\"-s\");\n  else if ('E' == param_chr)\n    return process_param__empty (\"-E\");\n  else if ('T' == param_chr)\n    return process_param__tiny (\"-T\");\n  else if ('M' == param_chr)\n    return process_param__medium (\"-M\");\n  else if ('L' == param_chr)\n    return process_param__large (\"-L\");\n  else if ('S' == param_chr)\n    return process_param__shared (\"-S\");\n  else if ('I' == param_chr)\n    return process_param__single (\"-I\");\n  else if ('U' == param_chr)\n    return process_param__unique (\"-U\");\n  else if ('c' == param_chr)\n    return process_param__connections (\"-c\", param + 1, next_param);\n  else if ('O' == param_chr)\n    return process_param__timeout (\"-O\", param + 1, next_param);\n  else if ('V' == param_chr)\n    return process_param__version (\"-V\");\n\n  fprintf (stderr, \"Unrecognised parameter: -%c.\\n\", param_chr);\n  return PERF_RPL_PARAM_ERROR;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf process_param__epoll is declared to accept a non-const pointer (e.g. char *), then passing the string literal \"-e\" violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type. The remedy is to declare the function parameter as const char * (e.g. enum PerfRepl_param_result process_param__epoll(const char *s)).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. MISRA C 2023 Rule 8.13 directs that pointer types used where the pointed-to object is not modified should be const-qualified. In the scenario posited, if process_param__epoll (or any of the other process_param__* functions called with string literals like \"-e\") is declared to take a non-const pointer (e.g. char *), that declaration violates Rule 8.13 because the argument is an immutable string literal and the callee should be declared to accept const char *. The proper remedy is to change the function declaration/definition to use const char * (for example, enum PerfRepl_param_result process_param__epoll(const char *s)) unless the function actually needs to modify the pointee. Note: if the function genuinely modifies the pointed-to data, then const is inappropriate and no Rule 8.13 violation occurs; otherwise the change to const is required to conform to the rule."
}