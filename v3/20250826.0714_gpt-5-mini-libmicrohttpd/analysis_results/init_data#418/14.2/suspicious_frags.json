{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of init_data:\n```c\nstatic int\ninit_data (void)\n{\n  unsigned int i;\n\n  if (tool_params.medium)\n    body_dyn_size = 8U * 1024U;\n  else if (tool_params.large)\n    body_dyn_size = 1024U * 1024U;\n  else\n    body_dyn_size = 0;\n\n  if (! init_response_body_data ())\n    return 25;\n\n  if (tool_params.unique)\n    return 0; /* Responses are generated on-fly */\n\n  if (tool_params.single)\n  {\n    resp_single = create_response_object ();\n    if (NULL == resp_single)\n    {\n      fprintf (stderr, \"Failed to create response.\\n\");\n      return 25;\n    }\n    return 0;\n  }\n\n  /* Use more responses to minimise waiting in threads while the response\n     used by other thread. */\n  if (! tool_params.thread_per_conn)\n    num_resps = 16 * get_num_threads ();\n  else\n    num_resps = 16 * get_cpu_core_count ();\n\n  resps = (struct MHD_Response **)\n          malloc ((sizeof(struct MHD_Response *)) * num_resps);\n  if (NULL == resps)\n  {\n    if (NULL != body_dyn)\n    {\n      free (body_dyn);\n      body_dyn = NULL;\n    }\n    fprintf (stderr, \"Failed to allocate memory.\\n\");\n    return 25;\n  }\n  for (i = 0; i < num_resps; ++i)\n  {\n    resps[i] = create_response_object ();\n    if (NULL == resps[i])\n    {\n      fprintf (stderr, \"Failed to create responses.\\n\");\n      break;\n    }\n  }\n  if (i == num_resps)\n    return 0; /* Success */\n\n  /* Cleanup */\n  while (--i < num_resps)\n    MHD_destroy_response (resps[i]);\n  free (resps);\n  resps = NULL;\n  num_resps = 0;\n  if (NULL != body_dyn)\n    free (body_dyn);\n  body_dyn = NULL;\n  return 32;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "for (i = 0; i < num_resps; ++i)\n  {\n    resps[i] = create_response_object ();\n    if (NULL == resps[i])\n    {\n      fprintf (stderr, \"Failed to create responses.\\n\");\n      break;\n    }\n  }",
    "while (--i < num_resps)\n    MHD_destroy_response (resps[i]);",
    "unsigned int i;"
  ],
  "explanation": "Only the shown fragments need investigation with respect to MISRA C 2023 Rule 14.2. The code contains a single for statement; that for loop is flagged because its second clause uses the external object 'num_resps' (allowed only if 'num_resps' is not modified by the loop body or by functions called from the body) and the body calls a function (create_response_object) whose side effects must be checked to ensure they do not modify any objects used in the loop condition. The while (--i < num_resps) cleanup uses and modifies the same loop counter 'i' after the for loop and uses the same 'num_resps' value, so its interaction with the for-loop-created counter warrants review (even though it is not a for-statement itself). The declaration 'unsigned int i;' is included because the loop counter's type and unsigned wrap behaviour (used by the decrement in the cleanup) should be examined. Other parts of the function (if/else branches, allocations, returns, the single-response branch, the allocation null-checks, the comparison if (i == num_resps) return 0; etc.) do not constitute for-statements nor introduce additional loop counters or loop-condition expressions that would be subject to Rule 14.2, so they need not be investigated for this specific rule."
}