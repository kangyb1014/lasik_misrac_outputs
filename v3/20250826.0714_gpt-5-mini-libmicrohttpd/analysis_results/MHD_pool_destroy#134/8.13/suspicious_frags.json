{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_destroy:\n```c\nvoid\nMHD_pool_destroy (struct MemoryPool *pool)\n{\n  if (NULL == pool)\n    return;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  _MHD_UNPOISON_MEMORY (pool->memory, pool->size);\n  if (! pool->is_mmap)\n    free (pool->memory);\n  else\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    munmap (pool->memory,\n            pool->size);\n#elif defined(_WIN32)\n    VirtualFree (pool->memory,\n                 0,\n                 MEM_RELEASE);\n#else\n    abort ();\n#endif\n  free (pool);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "free (pool);",
    "_MHD_UNPOISON_MEMORY (pool->memory, pool->size);",
    "VirtualFree (pool->memory,\n                 0,\n                 MEM_RELEASE);",
    "if (! pool->is_mmap)\n    free (pool->memory);",
    "munmap (pool->memory,\n            pool->size);",
    "MHD_pool_destroy (struct MemoryPool *pool)"
  ],
  "explanation": "Fragments not listed above do not need investigation for Rule 8.13 because they do not introduce pointer types that could/should be const-qualified. Specifically: the NULL check (if (NULL == pool) return;) is only a null-pointer guard; the mhd_assert(...) lines only read members for verification and do not declare new pointers; the ROUND_TO_ALIGN usage operates on integer values; the #if/#elif/#else/abort() preprocessor control and abort() call are control-flow/platform selection and do not involve pointer declarations that could be const-qualified. Therefore only the listed fragments (function parameter and uses of pool->memory and pool itself passed to deallocation/unmapping APIs) need further investigation under Rule 8.13."
}