{
  "user_message": "An agent A claimed that the following MHD_set_connection_value_n_nocheck_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value_n_nocheck_.\n```c\nstatic enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                     enum MHD_ValueKind kind,\n                                     const char *key,\n                                     size_t key_size,\n                                     const char *value,\n                                     size_t value_size)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  pos = MHD_connection_alloc_memory_ (connection,\n                                      sizeof (struct MHD_HTTP_Res_Header));\n  if (NULL == pos)\n    return MHD_NO;\n  pos->header = key;\n  pos->header_size = key_size;\n  pos->value = value;\n  pos->value_size = value_size;\n  pos->kind = kind;\n  pos->next = NULL;\n  /* append 'pos' to the linked list of headers */\n  if (NULL == connection->rq.headers_received_tail)\n  {\n    connection->rq.headers_received = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  else\n  {\n    connection->rq.headers_received_tail->next = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'value' is declared as 'const char *value' but 'pos->value' is (presumably) a non-const pointer (e.g. 'char *'). The assignment 'pos->value = value;' therefore discards the const qualifier and makes a pointer point to a non-const-qualified type. This violates MISRA C 2023 Rule 8.13. Corrective action: declare 'pos->value' as 'const char *' (or otherwise ensure the pointed-to type is const-qualified).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_set_connection_value_n_nocheck_: connection=0x55d7c2071270 kind=1 key=0x55d7c20714d1 key_size=4 value=0x55d7c20714d7 value_size=9\nKEY (first 4 bytes): 'Host'\nVALUE (first 9 bytes): 'localhost'\nallocated pos=0x55d7c2079480\nAssigned pos fields: header=0x55d7c20714d1 header_size=4 value=0x55d7c20714d7 value_size=9 kind=1 next=(nil)\nNOTE: parameter 'value' is declared as 'const char *' and is assigned to 'pos->value' here. If 'pos->value' is a non-const pointer type this assignment discards the const qualifier.\nheaders_received_tail is NULL: setting headers_received and headers_received_tail to pos\nFinal headers_received_tail=0x55d7c2079480, returning MHD_YES\nENTER MHD_set_connection_value_n_nocheck_: connection=0x55d7c2071270 kind=1 key=0x55d7c20714d1 key_size=4 value=0x55d7c20714d7 value_size=9\nKEY (first 4 bytes): 'Host'\nVALUE (first 9 bytes): 'localhost'\nallocated pos=0x55d7c2079480\nAssigned pos fields: header=0x55d7c20714d1 header_size=4 value=0x55d7c20714d7 value_size=9 kind=1 next=(nil)\nNOTE: parameter 'value' is declared as 'const char *' and is assigned to 'pos->value' here. If 'pos->value' is a non-const pointer type this assignment discards the const qualifier.\nheaders_received_tail is NULL: setting headers_received and headers_received_tail to pos\nFinal headers_received_tail=0x55d7c2079480, returning MHD_YES\nENTER MHD_set_connection_value_n_nocheck_: connection=0x55d7c2071270 kind=1 key=0x55d7c20714d1 key_size=4 value=0x55d7c20714d7 value_size=9\nKEY (first 4 bytes): 'Host'\nVALUE (first 9 bytes): 'localhost'\nallocated pos=0x55d7c2079480\nAssigned pos fields: header=0x55d7c20714d1 header_size=4 value=0x55d7c20714d7 value_size=9 kind=1 next=(nil)\nNOTE: parameter 'value' is declared as 'const char *' and is assigned to 'pos->value' here. If 'pos->value' is a non-const pointer type this assignment discards the const qualifier.\nheaders_received_tail is NULL: setting headers_received and headers_received_tail to pos\nFinal headers_received_tail=0x55d7c2079480, returning MHD_YES\nENTER MHD_set_connection_value_n_nocheck_: connection=0x55d7c2071270 kind=1 key=0x55d7c20714d1 key_size=4 value=0x55d7c20714d7 value_size=9\nKEY (first 4 bytes): 'Host'\nVALUE (first 9 bytes): 'localhost'\nallocated pos=0x55d7c2079480\nAssigned pos fields: header=0x55d7c20714d1 header_size=4 value=0x55d7c20714d7 value_size=9 kind=1 next=(nil)\nNOTE: parameter 'value' is declared as 'const char *' and is assigned to 'pos->value' here. If 'pos->value' is a non-const pointer type this assignment discards the const qualifier.\nheaders_received_tail is NULL: setting headers_received and headers_received_tail to pos\nFinal headers_received_tail=0x55d7c2079480, returning MHD_YES\nENTER MHD_set_connection_value_n_nocheck_: connection=0x55d7c2071270 kind=1 key=0x55d7c20714d1 key_size=4 value=0x55d7c20714d7 value_size=9\nKEY (first 4 bytes): 'Host'\nVALUE (first 9 bytes): 'localhost'\nallocated pos=0x55d7c2079480\nAssigned pos fields: header=0x55d7c20714d1 header_size=4 value=0x55d7c20714d7 value_size=9 kind=1 next=(nil)\nNOTE: parameter 'value' is declared as 'const char *' and is assigned to 'pos->value' here. If 'pos->value' is a non-const pointer type this assignment discards the const qualifier.\nheaders_received_tail is NULL: setting headers_received and headers_received_tail to pos\nFinal headers_received_tail=0x55d7c2079480, returning MHD_YES\nENTER MHD_set_connection_value_n_nocheck_: connection=0x55d7c2071270 kind=1 key=0x55d7c20714d1 key_size=4 value=0x55d7c20714d7 value_size=9\nKEY (first 4 bytes): 'Host'\nVALUE (first 9 bytes): 'localhost'\nallocated pos=0x55d7c2079480\nAssigned pos fields: header=0x55d7c20714d1 header_size=4 value=0x55d7c20714d7 value_size=9 kind=1 next=(nil)\nNOTE: parameter 'value' is declared as 'const char *' and is assigned to 'pos->value' here. If 'pos->value' is a non-const pointer type this assignment discards the const qualifier.\nheaders_received_tail is NULL: setting headers_received and headers_received_tail to pos\nFinal headers_received_tail=0x55d7c2079480, returning MHD_YES\nENTER MHD_set_connection_value_n_nocheck_: connectio\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s report cannot be confirmed from the code shown. The function parameter value is declared as const char *value; whether the assignment pos->value = value violates MISRA R8.13 depends on the declaration of pos->value inside struct MHD_HTTP_Req_Header (or the actual struct type used). If pos->value is declared as const char * then the assignment is fine; if it is declared as char * then the assignment discards the const qualifier and is a violation (and should be corrected by making pos->value const char * or otherwise preserving the qualifier). The provided snippet does not include the struct definition, so there is insufficient information to conclude a violation. (Separately: the code uses sizeof(struct MHD_HTTP_Res_Header) while pos is a pointer to struct MHD_HTTP_Req_Header \u2014 that mismatch looks suspicious and should be reviewed, but it is unrelated to the const-qualification question.)"
}