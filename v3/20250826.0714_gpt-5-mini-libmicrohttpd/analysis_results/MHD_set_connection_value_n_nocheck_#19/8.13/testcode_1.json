{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'value' is declared as 'const char *value' but 'pos->value' is (presumably) a non-const pointer (e.g. 'char *'). The assignment 'pos->value = value;' therefore discards the const qualifier and makes a pointer point to a non-const-qualified type. This violates MISRA C 2023 Rule 8.13. Corrective action: declare 'pos->value' as 'const char *' (or otherwise ensure the pointed-to type is const-qualified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n_nocheck_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/193.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value_n_nocheck_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n_nocheck_:\n```c\nstatic enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                     enum MHD_ValueKind kind,\n                                     const char *key,\n                                     size_t key_size,\n                                     const char *value,\n                                     size_t value_size)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  pos = MHD_connection_alloc_memory_ (connection,\n                                      sizeof (struct MHD_HTTP_Res_Header));\n  if (NULL == pos)\n    return MHD_NO;\n  pos->header = key;\n  pos->header_size = key_size;\n  pos->value = value;\n  pos->value_size = value_size;\n  pos->kind = kind;\n  pos->next = NULL;\n  /* append 'pos' to the linked list of headers */\n  if (NULL == connection->rq.headers_received_tail)\n  {\n    connection->rq.headers_received = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  else\n  {\n    connection->rq.headers_received_tail->next = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value_n_nocheck_ code.\n",
  "test_code": "#include <stdio.h>\n\nstatic enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                     enum MHD_ValueKind kind,\n                                     const char *key,\n                                     size_t key_size,\n                                     const char *value,\n                                     size_t value_size)\n{\n  FILE *log = fopen(\"/tmp/logs/193.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_set_connection_value_n_nocheck_: connection=%p kind=%d key=%p key_size=%zu value=%p value_size=%zu\\n\",\n            (void *)connection, (int)kind, (const void *)key, key_size, (const void *)value, value_size);\n    if (key != NULL && key_size > 0)\n    {\n      size_t lim = key_size < 64 ? key_size : 64;\n      fprintf(log, \"KEY (first %zu bytes): '\", lim);\n      for (size_t i = 0; i < lim; ++i)\n      {\n        unsigned char c = (unsigned char) key[i];\n        if (c >= 32 && c <= 126)\n          fputc((int)c, log);\n        else\n          fprintf(log, \"\\\\x%02x\", c);\n      }\n      if (key_size > lim)\n        fprintf(log, \"... (total %zu bytes)\", key_size);\n      fprintf(log, \"'\\n\");\n    }\n    else\n    {\n      fprintf(log, \"KEY is NULL or empty\\n\");\n    }\n\n    if (value != NULL && value_size > 0)\n    {\n      size_t lim = value_size < 64 ? value_size : 64;\n      fprintf(log, \"VALUE (first %zu bytes): '\", lim);\n      for (size_t i = 0; i < lim; ++i)\n      {\n        unsigned char c = (unsigned char) value[i];\n        if (c >= 32 && c <= 126)\n          fputc((int)c, log);\n        else\n          fprintf(log, \"\\\\x%02x\", c);\n      }\n      if (value_size > lim)\n        fprintf(log, \"... (total %zu bytes)\", value_size);\n      fprintf(log, \"'\\n\");\n    }\n    else\n    {\n      fprintf(log, \"VALUE is NULL or empty\\n\");\n    }\n    fflush(log);\n  }\n\n  struct MHD_HTTP_Req_Header *pos;\n\n  pos = MHD_connection_alloc_memory_ (connection,\n                                      sizeof (struct MHD_HTTP_Res_Header));\n  if (log)\n    fprintf(log, \"allocated pos=%p\\n\", (void *)pos);\n  if (NULL == pos)\n  {\n    if (log)\n    {\n      fprintf(log, \"Allocation failed, returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* preserve original assignments */\n  pos->header = key;\n  pos->header_size = key_size;\n  pos->value = value; /* <-- potential const-qualifier discard here */\n  pos->value_size = value_size;\n  pos->kind = kind;\n  pos->next = NULL;\n\n  if (log)\n  {\n    fprintf(log, \"Assigned pos fields: header=%p header_size=%zu value=%p value_size=%zu kind=%d next=%p\\n\",\n            (const void *)pos->header, pos->header_size, (const void *)pos->value, pos->value_size, (int)pos->kind, (void *)pos->next);\n    fprintf(log, \"NOTE: parameter 'value' is declared as 'const char *' and is assigned to 'pos->value' here. If 'pos->value' is a non-const pointer type this assignment discards the const qualifier.\\n\");\n    fflush(log);\n  }\n\n  /* append 'pos' to the linked list of headers */\n  if (NULL == connection->rq.headers_received_tail)\n  {\n    if (log)\n      fprintf(log, \"headers_received_tail is NULL: setting headers_received and headers_received_tail to pos\\n\");\n    connection->rq.headers_received = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"Appending pos to tail: old_tail=%p\\n\", (void *)connection->rq.headers_received_tail);\n    connection->rq.headers_received_tail->next = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"Final headers_received_tail=%p, returning MHD_YES\\n\", (void *)connection->rq.headers_received_tail);\n    fclose(log);\n  }\n  return MHD_YES;\n}\n"
}