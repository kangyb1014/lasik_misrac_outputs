{
  "user_message": "An agent A claimed that the following check_params code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of check_params.\n```c\nstatic int\ncheck_params (int argc, char *const *const argv)\n{\n  size_t i;\n  unsigned int port_value;\n\n  if (2 > argc)\n    return 0;\n\n  for (i = 1; i < (unsigned int) argc; ++i)\n  {\n    if (0 == strcmp (argv[i], \"--md5\"))\n    { /* Force use MD5 */\n      force_md5 = ! 0;\n      force_sha256 = 0;\n      force_sha512_256 = 0;\n    }\n    else if (0 == strcmp (argv[i], \"--sha256\"))\n    { /* Force use SHA-256 instead of default MD5 */\n      force_md5 = 0;\n      force_sha256 = ! 0;\n      force_sha512_256 = 0;\n    }\n    else if (0 == strcmp (argv[i], \"--sha512-256\"))\n    { /* Force use SHA-512/256 instead of default MD5 */\n      force_md5 = 0;\n      force_sha256 = 0;\n      force_sha512_256 = ! 0;\n    }\n    else if (0 == strcmp (argv[i], \"--allow-rfc2069\"))\n      allow_rfc2069 = ! 0; /* Allow fallback to RFC2069. Not recommended! */\n    else if ((1 == sscanf (argv[i], \"%u\", &port_value))\n             && (0 < port_value) && (65535 >= port_value))\n      daemon_port = (uint16_t) port_value;\n    else\n    {\n      fprintf (stderr, \"Unrecognized parameter: %s\\n\",\n               argv[i]);\n      return 0;\n    }\n  }\n\n  if (force_sha512_256)\n    printf (\n      \"Note: when testing with curl/libcurl do not be surprised with failures as \"\n      \"libcurl incorrectly implements SHA-512/256 algorithm.\\n\");\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'argv' is declared as char *const *const argv (pointer to non-const char). The function only reads the argument strings (calls strcmp, sscanf, fprintf) and never modifies the characters, so the pointee should be const-qualified. According to MISRA C 2023 Rule 8.13, argv should be declared as const char * const * const (or char const * const * const) to make the pointed-to characters const-qualified.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The parameter is declared as char *const *const argv (a pointer to const pointers to non-const char). The function only reads the strings (strcmp, sscanf, fprintf) and does not modify the characters pointed to. MISRA C:2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible, so the pointee here should be const-qualified. The parameter should be declared as const char * const * const (or char const * const * const) to express that the pointed-to characters are not modified. Note: changing the signature may require addressing call-site compatibility (implicit conversion from char ** to const char * const * const is not allowed), but that is a separate interoperability concern; it does not invalidate that the current declaration violates Rule 8.13."
}