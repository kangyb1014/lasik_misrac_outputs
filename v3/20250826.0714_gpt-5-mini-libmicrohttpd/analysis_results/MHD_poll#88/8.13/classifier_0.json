{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_poll:\n```c\nstatic enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    return MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n  return MHD_poll_listen_socket (daemon,\n                                 may_block);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn MHD_poll_listen_socket (daemon,\n                                 may_block);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Based on the single fragment it is not possible to prove a violation. The call passes the local parameter daemon (type struct MHD_Daemon *). Rule 8.13 is violated only if the pointer could have been const-qualified but was declared non-const. For example, if neither MHD_poll nor MHD_poll_listen_socket modify *daemon (and the prototype of MHD_poll_listen_socket could reasonably be changed to take const struct MHD_Daemon *), then the current non-const declarations would violate 8.13. With only this fragment and no information about whether *daemon is modified or the callee\u2019s prototype, we cannot conclude a violation."
}