{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_poll:\n```c\nstatic enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    return MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n  return MHD_poll_listen_socket (daemon,\n                                 may_block);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment itself is a call passing 'daemon' to MHD_poll_all. The MISRA rule concerns pointer declarations/definitions being const-qualified when possible. From this single call we cannot prove a violation. If MHD_poll_all is declared to take a non-const pointer (e.g. struct MHD_Daemon *), but it does not modify the pointed-to object (and the caller does not expect modification), then that declaration would violate Rule 8.13 \u2014 MHD_poll_all (and possibly MHD_poll) should use 'const struct MHD_Daemon *'. If, however, MHD_poll_all legitimately modifies the daemon or the function signatures already use const where appropriate, there is no violation."
}