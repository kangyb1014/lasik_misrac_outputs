{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_poll:\n```c\nstatic enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    return MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n  return MHD_poll_listen_socket (daemon,\n                                 may_block);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_D_IS_USING_THREAD_PER_CONN_ (daemon)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown fragment. The expression MHD_D_IS_USING_THREAD_PER_CONN_(daemon) merely passes the daemon pointer to a predicate-like macro; that usage alone does not require the pointer to be const. A violation would occur if the pointed-to object is never modified anywhere and the parameter could be declared as const (e.g. if neither MHD_poll nor any callees modify *daemon), in which case the parameter should be 'const struct MHD_Daemon *daemon'. However, since MHD_poll later calls MHD_poll_all and MHD_poll_listen_socket (which likely modify the daemon), keeping the non-const pointer is appropriate and Rule 8.13 is not violated here."
}