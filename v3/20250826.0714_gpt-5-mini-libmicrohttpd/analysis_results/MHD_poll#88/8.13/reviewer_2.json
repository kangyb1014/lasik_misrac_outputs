{
  "user_message": "An agent A claimed that the following MHD_poll code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_poll.\n```c\nstatic enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    return MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n  return MHD_poll_listen_socket (daemon,\n                                 may_block);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as a non-const pointer (struct MHD_Daemon *daemon) even though the shown body only queries/forwards the pointer (calls MHD_D_IS_USING_THREAD_PER_CONN_(daemon) and passes daemon to MHD_poll_all / MHD_poll_listen_socket). If MHD_poll and the callees do not modify the pointed-to MHD_Daemon object, the parameter should be declared as pointer to const (const struct MHD_Daemon *daemon). Hence, in the common case where the daemon is only read, this signature violates Rule 8.13. (If the function or any callees actually modify the object or require a non-const pointer, then no violation occurs.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is speculative and cannot be confirmed from the snippet alone. MISRA C 2023 Rule 8.13 states that pointer types should be const-qualified when possible, but whether it is \u201cpossible\u201d requires whole-translation-unit (and callee prototype) knowledge. In this snippet the function is static (internal linkage) and forwards the pointer to MHD_D_IS_USING_THREAD_PER_CONN_ and to MHD_poll_all / MHD_poll_listen_socket. If any of those macros/functions (or other code in the translation unit) expect or perform modifications and therefore take a non-const pointer, then the current signature is required and there is no violation. Conversely, if none of the uses modify the pointed object and all callees accept a pointer-to-const, then the parameter could be changed to const struct MHD_Daemon *daemon and that would satisfy Rule 8.13. Because the provided code does not show the prototypes or other uses, the report cannot be concluded correct from this excerpt alone. To decide definitively: inspect the prototypes of MHD_D_IS_USING_THREAD_PER_CONN_, MHD_poll_all and MHD_poll_listen_socket and all uses of daemon in the translation unit. If they all accept/require const, change the parameter to const; otherwise keep it non-const."
}