{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as a non-const pointer (struct MHD_Daemon *daemon) even though the shown body only queries/forwards the pointer (calls MHD_D_IS_USING_THREAD_PER_CONN_(daemon) and passes daemon to MHD_poll_all / MHD_poll_listen_socket). If MHD_poll and the callees do not modify the pointed-to MHD_Daemon object, the parameter should be declared as pointer to const (const struct MHD_Daemon *daemon). Hence, in the common case where the daemon is only read, this signature violates Rule 8.13. (If the function or any callees actually modify the object or require a non-const pointer, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_poll code that contains useful probe functions that print useful logs to a file \"/tmp/logs/883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_poll as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_poll:\n```c\nstatic enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    return MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n  return MHD_poll_listen_socket (daemon,\n                                 may_block);\n}\n```\n</target_code>\nPlease provide the modified MHD_poll code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: logs control flow/state to /tmp/logs/883.txt. */\nstatic void\nmhd_log_probe(const struct MHD_Daemon *daemon,\n              int may_block,\n              const char *branch_taken,\n              int using_thread_per_conn)\n{\n  FILE *f = fopen(\"/tmp/logs/883.txt\", \"a\");\n  if (f != NULL) {\n    /* Log pointer value, may_block, the thread-per-conn flag and chosen branch. */\n    fprintf(f, \"MHD_poll ENTER: daemon=%p may_block=%d using_thread_per_conn=%d branch=%s\\n\",\n            (const void *)daemon,\n            may_block,\n            using_thread_per_conn,\n            branch_taken);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n  /* Evaluate the condition once, log it, then proceed exactly as original. */\n  int using_thread = MHD_D_IS_USING_THREAD_PER_CONN_ (daemon);\n  if (! using_thread) {\n    mhd_log_probe(daemon, may_block, \"MHD_poll_all\", using_thread);\n    return MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n  }\n  mhd_log_probe(daemon, may_block, \"MHD_poll_listen_socket\", using_thread);\n  return MHD_poll_listen_socket (daemon,\n                                 may_block);\n}\n"
}