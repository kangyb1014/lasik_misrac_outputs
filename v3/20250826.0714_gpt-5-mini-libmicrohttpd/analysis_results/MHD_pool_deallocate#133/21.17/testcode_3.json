{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call _MHD_POISON_MEMORY(pool->memory + block_offset, alg_start - block_offset) can write bytes beyond the pool memory if alg_start is greater than the pool buffer size (or otherwise beyond the allocated object). Although the code contains mhd_assert checks (e.g. alg_start <= pool->pos and block_offset <= pool->size), there is no guaranteed compile-time or unconditional runtime proof here that alg_start <= pool->size (or that pool->pos <= pool->size). If pool->pos (and thus alg_start) can exceed pool->size, the range [pool->memory + block_offset, pool->memory + alg_start) will lie partly past the allocated object and the poisoning/memset call will access out-of-bounds memory. Because the code relies on assertions (which may be compiled out) rather than an unconditional bound, this fragment can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_deallocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1339.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_deallocate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_deallocate:\n```c\nvoid\nMHD_pool_deallocate (struct MemoryPool *pool,\n                     void *block,\n                     size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  if (NULL != block)\n  {   /* Have previously allocated data */\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (block_offset <= pool->size);\n    mhd_assert ((block_offset != pool->pos) || (block_size == 0));\n    /* Zero-out deallocated region */\n    if (0 != block_size)\n    {\n      memset (block, 0, block_size);\n      _MHD_POISON_MEMORY (block, block_size);\n    }\n#if ! defined(MHD_FAVOR_SMALL_CODE) && ! defined(MHD_ASAN_POISON_ACTIVE)\n    else\n      return; /* Zero size, no need to do anything */\n#endif /* ! MHD_FAVOR_SMALL_CODE && ! MHD_ASAN_POISON_ACTIVE */\n    if (block_offset <= pool->pos)\n    {\n      /* \"Normal\" block, not allocated \"from the end\". */\n      const size_t alg_end =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n      mhd_assert (alg_end <= pool->pos);\n      if (alg_end == pool->pos)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        size_t alg_start = ROUND_TO_ALIGN (block_offset);\n        mhd_assert (alg_start >= block_offset);\n#if defined(MHD_ASAN_POISON_ACTIVE)\n        if (alg_start != block_offset)\n        {\n          _MHD_POISON_MEMORY (pool->memory + block_offset, \\\n                              alg_start - block_offset);\n        }\n        else if (0 != alg_start)\n        {\n          bool need_red_zone_before;\n          mhd_assert (_MHD_RED_ZONE_SIZE <= alg_start);\n#if defined(HAVE___ASAN_REGION_IS_POISONED)\n          need_red_zone_before =\n            (NULL == __asan_region_is_poisoned (pool->memory\n                                                + alg_start\n                                                - _MHD_RED_ZONE_SIZE,\n                                                _MHD_RED_ZONE_SIZE));\n#elif defined(HAVE___ASAN_ADDRESS_IS_POISONED)\n          need_red_zone_before =\n            (0 == __asan_address_is_poisoned (pool->memory + alg_start - 1));\n#else  /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          need_red_zone_before = true; /* Unknown, assume new red zone needed */\n#endif /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          if (need_red_zone_before)\n          {\n            _MHD_POISON_MEMORY (pool->memory + alg_start, _MHD_RED_ZONE_SIZE);\n            alg_start += _MHD_RED_ZONE_SIZE;\n          }\n        }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n        mhd_assert (alg_start <= pool->pos);\n        mhd_assert (alg_start == ROUND_TO_ALIGN (alg_start));\n        pool->pos = alg_start;\n      }\n    }\n    else\n    {\n      /* Allocated \"from the end\" block. */\n      /* The size and the pointers of such block should not be manipulated by\n         MHD code (block split is disallowed). */\n      mhd_assert (block_offset >= pool->end);\n      mhd_assert (ROUND_TO_ALIGN (block_offset) == block_offset);\n      if (block_offset == pool->end)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        const size_t alg_end =\n          ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n        pool->end = alg_end;\n      }\n    }\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_deallocate code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Helper logging function to capture control flow and state. */\nstatic void\nmhd_log_pool_state (const char *stage,\n                    struct MemoryPool *pool,\n                    void *block,\n                    size_t block_size,\n                    size_t block_offset,\n                    size_t alg_end,\n                    size_t alg_start)\n{\n  FILE *f = fopen(\"/tmp/logs/1339.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Print available state; avoid dereferencing pool when NULL. */\n  fprintf (f,\n           \"[%s] pool=%p memory=%p size=%zu pos=%zu end=%zu block=%p \"\n           \"block_size=%zu block_offset=%zu alg_end=%zu alg_start=%zu\\n\",\n           stage,\n           (void *) pool,\n           (void *) (pool ? pool->memory : NULL),\n           (size_t) (pool ? pool->size : 0),\n           (size_t) (pool ? pool->pos : 0),\n           (size_t) (pool ? pool->end : 0),\n           block,\n           block_size,\n           block_offset,\n           alg_end,\n           alg_start);\n  fclose (f);\n}\n\nvoid\nMHD_pool_deallocate (struct MemoryPool *pool,\n                     void *block,\n                     size_t block_size)\n{\n  /* Log entry state */\n  mhd_log_pool_state (\"entry\", pool, block, block_size, 0, 0, 0);\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  if (NULL != block)\n  {   /* Have previously allocated data */\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (block_offset <= pool->size);\n    mhd_assert ((block_offset != pool->pos) || (block_size == 0));\n\n    /* Log after computing block_offset */\n    mhd_log_pool_state (\"after_block_offset\", pool, block, block_size,\n                        block_offset, 0, 0);\n\n    /* Zero-out deallocated region */\n    if (0 != block_size)\n    {\n      /* Log just before memset of the returned block */\n      mhd_log_pool_state (\"before_block_memset\", pool, block, block_size,\n                          block_offset, 0, 0);\n\n      memset (block, 0, block_size);\n      _MHD_POISON_MEMORY (block, block_size);\n\n      /* Log immediately after poisoning block */\n      mhd_log_pool_state (\"after_block_poison\", pool, block, block_size,\n                          block_offset, 0, 0);\n    }\n#if ! defined(MHD_FAVOR_SMALL_CODE) && ! defined(MHD_ASAN_POISON_ACTIVE)\n    else\n      return; /* Zero size, no need to do anything */\n#endif /* ! MHD_FAVOR_SMALL_CODE && ! MHD_ASAN_POISON_ACTIVE */\n    if (block_offset <= pool->pos)\n    {\n      /* \"Normal\" block, not allocated \"from the end\". */\n      const size_t alg_end =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n      mhd_assert (alg_end <= pool->pos);\n\n      /* Log when computing alg_end */\n      mhd_log_pool_state (\"computed_alg_end\", pool, block, block_size,\n                          block_offset, alg_end, 0);\n\n      if (alg_end == pool->pos)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        size_t alg_start = ROUND_TO_ALIGN (block_offset);\n        mhd_assert (alg_start >= block_offset);\n\n#if defined(MHD_ASAN_POISON_ACTIVE)\n        if (alg_start != block_offset)\n        {\n          /* Log right before poisoning the padding between block_offset and alg_start */\n          mhd_log_pool_state (\"before_poison_padding\", pool, block, block_size,\n                              block_offset, alg_end, alg_start);\n\n          _MHD_POISON_MEMORY (pool->memory + block_offset, alg_start - block_offset);\n\n          /* Log after poisoning padding */\n          mhd_log_pool_state (\"after_poison_padding\", pool, block, block_size,\n                              block_offset, alg_end, alg_start);\n        }\n        else if (0 != alg_start)\n        {\n          bool need_red_zone_before;\n          mhd_assert (_MHD_RED_ZONE_SIZE <= alg_start);\n#if defined(HAVE___ASAN_REGION_IS_POISONED)\n          need_red_zone_before =\n            (NULL == __asan_region_is_poisoned (pool->memory\n                                                + alg_start\n                                                - _MHD_RED_ZONE_SIZE,\n                                                _MHD_RED_ZONE_SIZE));\n#elif defined(HAVE___ASAN_ADDRESS_IS_POISONED)\n          need_red_zone_before =\n            (0 == __asan_address_is_poisoned (pool->memory + alg_start - 1));\n#else  /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          need_red_zone_before = true; /* Unknown, assume new red zone needed */\n#endif /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          if (need_red_zone_before)\n          {\n            /* Log before adding red zone */\n            mhd_log_pool_state (\"before_add_red_zone\", pool, block, block_size,\n                                block_offset, alg_end, alg_start);\n\n            _MHD_POISON_MEMORY (pool->memory + alg_start, _MHD_RED_ZONE_SIZE);\n            alg_start += _MHD_RED_ZONE_SIZE;\n\n            /* Log after adding red zone */\n            mhd_log_pool_state (\"after_add_red_zone\", pool, block, block_size,\n                                block_offset, alg_end, alg_start);\n          }\n        }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n        mhd_assert (alg_start <= pool->pos);\n        mhd_assert (alg_start == ROUND_TO_ALIGN (alg_start));\n\n        /* Log just before updating pool->pos */\n        mhd_log_pool_state (\"before_update_pos\", pool, block, block_size,\n                            block_offset, alg_end, alg_start);\n\n        pool->pos = alg_start;\n\n        /* Log after updating pool->pos */\n        mhd_log_pool_state (\"after_update_pos\", pool, block, block_size,\n                            block_offset, alg_end, alg_start);\n      }\n    }\n    else\n    {\n      /* Allocated \"from the end\" block. */\n      /* The size and the pointers of such block should not be manipulated by\n         MHD code (block split is disallowed). */\n      mhd_assert (block_offset >= pool->end);\n      mhd_assert (ROUND_TO_ALIGN (block_offset) == block_offset);\n\n      /* Log path for end-allocated blocks */\n      mhd_log_pool_state (\"end_allocated_path\", pool, block, block_size,\n                          block_offset, 0, 0);\n\n      if (block_offset == pool->end)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        const size_t alg_end =\n          ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n\n        /* Log before updating pool->end */\n        mhd_log_pool_state (\"before_update_end\", pool, block, block_size,\n                            block_offset, alg_end, 0);\n\n        pool->end = alg_end;\n\n        /* Log after updating pool->end */\n        mhd_log_pool_state (\"after_update_end\", pool, block, block_size,\n                            block_offset, alg_end, 0);\n      }\n    }\n  }\n\n  /* Log exit state */\n  mhd_log_pool_state (\"exit\", pool, block, block_size, 0, 0, 0);\n}\n"
}