{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameters header_name and header_value are declared as char * although this function never modifies the contents they point to (they are only passed on and eventually free()d). According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so these should be declared as const char * (message is already const-qualified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified transmit_error_response_len code that contains useful probe functions that print useful logs to a file \"/tmp/logs/633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of transmit_error_response_len as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of transmit_error_response_len:\n```c\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n}\n```\n</target_code>\nPlease provide the modified transmit_error_response_len code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helpers - append-only logging to /tmp/logs/633.txt */\nstatic void\nprobe_log_raw (const char *msg)\n{\n  FILE *f = fopen (\"/tmp/logs/633.txt\", \"a\");\n  if (f)\n  {\n    fputs (msg, f);\n    fputc('\\n', f);\n    fclose (f);\n  }\n}\n\nstatic void\nprobe_logf (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/633.txt\", \"a\");\n  if (f)\n  {\n    va_list ap;\n    va_start (ap, fmt);\n    vfprintf (f, fmt, ap);\n    va_end (ap);\n    fputc('\\n', f);\n    fclose (f);\n  }\n}\n\nstatic void\nprobe_log_entry (struct MHD_Connection *connection,\n                 unsigned int status_code,\n                 const char *message,\n                 size_t message_len,\n                 char *header_name,\n                 size_t header_name_len,\n                 char *header_value,\n                 size_t header_value_len)\n{\n  probe_logf (\"transmit_error_response_len ENTRY: connection=%p state=%d stop_with_error=%d discard_request=%d\",\n              (void *) connection,\n              (int) (connection ? connection->state : -1),\n              (int) (connection ? connection->stop_with_error : -1),\n              (int) (connection ? connection->discard_request : -1));\n  probe_logf (\"  status_code=%u message=%p message_len=%zu\",\n              status_code,\n              (const void *) message,\n              message_len);\n  /* Print a short prefix of message, if available */\n  if (message != NULL)\n  {\n    /* avoid very long logs */\n    probe_logf (\"  message_text='%.*s'\", (int) (message_len < 200 ? message_len : 200), message);\n  }\n  probe_logf (\"  header_name=%p header_name_len=%zu header_value=%p header_value_len=%zu\",\n              (void *) header_name,\n              header_name_len,\n              (void *) header_value,\n              header_value_len);\n}\n\nstatic void\nprobe_log_free (const char *label, void *ptr)\n{\n  probe_logf (\"FREE: %s %p\", label, ptr);\n}\n\nstatic void\nprobe_log_state (const char *event, struct MHD_Connection *connection)\n{\n  if (connection)\n    probe_logf (\"EVENT: %s connection=%p state=%d stop_with_error=%d in_access_handler=%d keepalive=%d\",\n                event,\n                (void *) connection,\n                (int) connection->state,\n                (int) connection->stop_with_error,\n                (int) connection->in_access_handler,\n                (int) connection->keepalive);\n  else\n    probe_logf (\"EVENT: %s connection=NULL\", event);\n}\n\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  probe_log_entry (connection, status_code, message, message_len,\n                   header_name, header_name_len, header_value, header_value_len);\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    probe_log_state (\"early_return_stop_with_error\", connection);\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    /* Log frees for evidence of ownership and freeing */\n    if (header_name)\n      probe_log_free (\"header_name\", header_name);\n    if (header_value)\n      probe_log_free (\"header_value\", header_value);\n    free (header_name);\n    free (header_value);\n    probe_log_state (\"after_free_stop_with_error\", connection);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    probe_log_state (\"too_late_to_send_response\", connection);\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    if (header_name)\n      probe_log_free (\"header_name\", header_name);\n    if (header_value)\n      probe_log_free (\"header_value\", header_value);\n    free (header_name);\n    free (header_value);\n    probe_log_state (\"after_free_too_late\", connection);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  probe_log_state (\"set_state_full_req_received\", connection);\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n    probe_log_state (\"cleared_read_buffer\", connection);\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n    probe_log_state (\"destroyed_existing_response\", connection);\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    probe_log_state (\"failed_create_response\", connection);\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    if (header_name)\n      probe_log_free (\"header_name\", header_name);\n    if (header_value)\n      probe_log_free (\"header_value\", header_value);\n    free (header_name);\n    free (header_value);\n    probe_log_state (\"after_free_failed_create_response\", connection);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    probe_logf (\"attempt_add_header: header_name=%p header_name_len=%zu header_value=%p header_value_len=%zu\",\n                (void *) header_name, header_name_len, (void *) header_value, header_value_len);\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    probe_logf (\"MHD_add_response_entry_no_alloc_ returned=%d\", (int) iret);\n    if (MHD_NO == iret)\n    {\n      probe_log_free (\"header_name_on_add_fail\", header_name);\n      probe_log_free (\"header_value_on_add_fail\", header_value);\n      free (header_name);\n      free (header_value);\n      probe_log_state (\"after_free_add_fail\", connection);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    probe_logf (\"queue_response: before_in_access_handler=%d\", (int) before);\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n\n    probe_logf (\"queue_response returned=%d after restoring in_access_handler=%d\", (int) iret, (int) before);\n  }\n  MHD_destroy_response (response);\n  probe_logf (\"destroyed_response, iret=%d\", (int) iret);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    probe_log_state (\"close_error_after_queue_fail\", connection);\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  probe_log_state (\"set_keepalive_must_close\", connection);\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    probe_log_state (\"build_header_response_failed_first_try\", connection);\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    probe_log_state (\"cleared_request_state_retry_build_header\", connection);\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      probe_log_state (\"close_error_after_build_header_retry_failed\", connection);\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n  probe_log_state (\"exit_success_headers_sending\", connection);\n}\n"
}