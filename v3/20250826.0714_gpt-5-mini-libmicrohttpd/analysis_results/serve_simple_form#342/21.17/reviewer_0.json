{
  "user_message": "An agent A claimed that the following serve_simple_form code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of serve_simple_form.\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code casts the generic pointer cls to const char * (const char *form = cls;) and later calls strlen(form). If cls does not point to a NUL-terminated string (for example it points to a binary buffer of known length, or a fixed-size buffer that lacks a terminating '\\0'), strlen will read past the bounds of the referenced object until a NUL is found \u2014 this is a violation of MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. Rule 21.17 requires that use of functions such as strlen must not cause accesses beyond the bounds of the object pointed to. In this function cls is a generic const void * that is cast to const char * without any check that the object it points to is a NUL-terminated character array. strlen(form) will read bytes until it finds a NUL byte, so if cls does not actually point to a NUL-terminated string (for example a binary buffer or a fixed-size buffer lacking a terminating '\\0') the call can read past the bounds of the object \u2014 exactly the situation the rule forbids. Note: if the surrounding code / API contract guarantees that cls always points to a NUL-terminated string (or the function signature were changed to take const char *), the use would be acceptable; but as written the function does not enforce or document that guarantee and therefore presents a potential violation of MISRA C 2023 Rule 21.17. Recommended fixes include changing the parameter type to const char *, providing an explicit length and using that length with the response creation API, or otherwise ensuring/validating a terminating NUL within the object bounds before calling strlen."
}