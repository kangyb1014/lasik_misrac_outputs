{
  "user_message": "An agent A claimed that the following connection_done code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of connection_done.\n```c\nstatic void\nconnection_done (void *cls,\n                 struct MHD_Connection *connection,\n                 void **req_cls,\n                 enum MHD_RequestTerminationCode toe)\n{\n  struct Request *req = *req_cls;\n\n  (void) cls;\n  (void) connection;\n  (void) toe;\n  if (-1 != req->timerfd)\n    if (0 != close (req->timerfd))\n      abort ();\n  free (req);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'connection' is declared as 'struct MHD_Connection *connection' but is not used or modified in the function (it is explicitly (void) cast). According to MISRA C 2023 Rule 8.13 it should be declared as 'const struct MHD_Connection *connection' when possible. If the non-const signature is imposed by an external callback API (e.g. libmicrohttpd) and cannot be changed, then this is acceptable; otherwise the code violates the rule.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not provably a MISRA 8.13 violation in this context. Rule 8.13 says pointers should point to const-qualified types when possible, but it applies only where you can change the declaration. In this code the parameter 'connection' is unused and could, in isolation, be declared as 'const struct MHD_Connection *'. However the function is clearly a callback (libmicrohttpd-style name/signature), and those callbacks have a fixed prototype supplied by the external API. If this function must match that external prototype, you cannot change the parameter to 'const' and the current code is acceptable. The report therefore is not correct unless the reporter can show that this function is not constrained by an external API and the signature is under the author\u2019s control. If the signature is controllable, then the pointer should be const; if it is imposed by the external callback API, no violation occurs (document the reason or file a formal deviation)."
}