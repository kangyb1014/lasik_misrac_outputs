{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment needs investigation for MISRA C 2023 Rule 17.8. Rule 17.8 forbids modifying a function parameter itself (the pointer variable), but allows modifying the object referred to by a pointer parameter. In this function:\n- The parameter variable data is never assigned to or otherwise modified. There is only a null check (if (NULL == data)) and it is passed to free(), but passing the pointer to free() deallocates the pointed-to object rather than modifying the parameter variable itself (this is allowed by the rule).\n- A local pointer param is initialized from data as a const pointer (struct ... * const param), so the local pointer cannot be modified and no modification of the original parameter occurs.\n- Reading fields (param->arg, param->start_routine, param->name) and assigning them to local variables (arg, thr_func) does not modify the parameter variable.\n- Calling MHD_set_cur_thread_name_(param->name) or invoking thr_func(arg) may modify the underlying object/state, which is permitted by the rule because it affects the object referred to, not the parameter pointer itself.\nTherefore there are no fragments in this function that violate Rule 17.8."
}