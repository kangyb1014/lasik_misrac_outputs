{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function obtains a function pointer thr_func from param->start_routine and then calls it. If param->start_routine was set to named_thread_starter (i.e. the wrapper itself), the call return thr_func(arg) will invoke named_thread_starter indirectly (recursively). This constitutes an indirect self-call and violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified named_thread_starter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2266.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of named_thread_starter as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\nPlease provide the modified named_thread_starter code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/2266.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2266.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic void ptr_to_hex(const void *p, size_t psize, char *outbuf, size_t outlen)\n{\n  /* Produce a hex representation of the raw bytes of p into outbuf.\n     This avoids casting function pointers to data pointers. */\n  const unsigned char *b = (const unsigned char *) p;\n  size_t i;\n  size_t need = psize * 2 + 1;\n  if (outlen < need)\n  {\n    /* Not enough space; produce an empty string */\n    if (outlen) outbuf[0] = '\\0';\n    return;\n  }\n  for (i = 0; i < psize; ++i)\n  {\n    unsigned int v = b[i];\n    outbuf[i*2]     = \"0123456789abcdef\"[v >> 4];\n    outbuf[i*2 + 1] = \"0123456789abcdef\"[v & 0xF];\n  }\n  outbuf[psize*2] = '\\0';\n}\n\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n  MHD_THRD_RTRN_TYPE_ result;\n\n  probe_log(\"named_thread_starter: entered, data=%p\\n\", data);\n\n  if (NULL == data)\n  {\n    probe_log(\"named_thread_starter: data is NULL, returning 0\\n\");\n    return (MHD_THRD_RTRN_TYPE_) 0;\n  }\n\n  /* Capture name safely (copy up to a limit) before free */\n  char name_buf[256] = { '\\0' };\n  if (param->name != NULL)\n  {\n    /* Copy only up to the buffer size - avoid overruns */\n    strncpy(name_buf, param->name, sizeof(name_buf) - 1);\n    name_buf[sizeof(name_buf) - 1] = '\\0';\n  }\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n\n  /* Produce hex representation of the raw bytes of the function pointer */\n  char thr_func_hex[sizeof(thr_func) * 2 + 1];\n  ptr_to_hex(&thr_func, sizeof(thr_func), thr_func_hex, sizeof(thr_func_hex));\n\n  probe_log(\"named_thread_starter: param=%p name=\\\"%s\\\" name_ptr=%p arg=%p thr_func_bytes=%s\\n\",\n            (void *) param, name_buf, (void *) param->name, arg, thr_func_hex);\n\n  /* Preserve original behavior: free data before invoking the thread routine */\n  free (data);\n  probe_log(\"named_thread_starter: freed data=%p; invoking thr_func(arg=%p)\\n\", data, arg);\n\n  /* Call the thread start routine and capture result for logging */\n  result = thr_func (arg);\n\n  /* Log the raw bytes of the return value as hex (size may vary) */\n  char result_hex[sizeof(result) * 2 + 1];\n  ptr_to_hex(&result, sizeof(result), result_hex, sizeof(result_hex));\n  probe_log(\"named_thread_starter: thr_func returned result_bytes=%s\\n\", result_hex);\n\n  return result;\n}\n"
}