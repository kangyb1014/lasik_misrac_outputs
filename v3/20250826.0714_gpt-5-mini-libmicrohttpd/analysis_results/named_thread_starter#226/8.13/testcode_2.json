{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'data' is declared as void * but the function only reads the pointed-to object's fields (param->name, param->arg, param->start_routine) and does not modify its contents. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 e.g. const void *data (and use a pointer to const struct). Declaring it non-const therefore violates the rule. Note: if the function's intent is to take ownership and free the allocation (as it does), keeping a non-const parameter may be justified, but the presented code as written (no modification of object contents before free) still violates the \u201cpointer should be const when possible\u201d guidance.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified named_thread_starter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of named_thread_starter as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\nPlease provide the modified named_thread_starter code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstatic void\nlog_named_thread_starter(const char *stage, void *data, struct MHD_named_helper_param_ *param, void *arg, MHD_THREAD_START_ROUTINE_ thr_func)\n{\n  FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n  if (f != NULL)\n    {\n      /* Log stage, raw pointers and the name if available. Be careful not to\n         dereference param if it's NULL. */\n      fprintf(f, \"stage=%s data=%p param=%p arg=%p thr_func=%p name=%s\\n\",\n              stage,\n              data,\n              (void *) param,\n              arg,\n              (void *) thr_func,\n              (param != NULL && param->name != NULL) ? param->name : \"(null)\");\n      fclose(f);\n    }\n}\n\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  log_named_thread_starter(\"entry\", data, param, NULL, (MHD_THREAD_START_ROUTINE_)NULL);\n\n  if (NULL == data)\n    {\n      log_named_thread_starter(\"null_data_return\", data, NULL, NULL, (MHD_THREAD_START_ROUTINE_)NULL);\n      return (MHD_THRD_RTRN_TYPE_) 0;\n    }\n\n  /* Log state before using param and before freeing it. */\n  log_named_thread_starter(\"before_set_name\", data, param, NULL, (MHD_THREAD_START_ROUTINE_)NULL);\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n\n  /* Log the extracted values before freeing the container. */\n  log_named_thread_starter(\"before_free\", data, param, arg, thr_func);\n\n  free (data);\n\n  /* After free we must not dereference 'param'. Log only pointers we still hold. */\n  log_named_thread_starter(\"after_free\", NULL, NULL, arg, thr_func);\n\n  return thr_func (arg);\n}\n"
}