{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'param' is declared as 'struct MHD_named_helper_param_ *const' (pointer to a non-const object) but in the function it is used only for read access (param->name, param->arg, param->start_routine) before freeing the original void *data. According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type when possible. A compliant declaration would be: 'const struct MHD_named_helper_param_ *const param = data;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified named_thread_starter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of named_thread_starter as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\nPlease provide the modified named_thread_starter code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helper: writes control-flow and state information to /tmp/logs/2263.txt\n * This helper is careful not to dereference param when NULL and does not attempt to\n * convert a function pointer to a data pointer (which can be undefined behaviour).\n */\nstatic void\nlog_named_thread_state (const char *stage,\n                        const struct MHD_named_helper_param_ *const param,\n                        void *arg,\n                        int thr_func_present)\n{\n  FILE *f = fopen (\"/tmp/logs/2263.txt\", \"a\");\n  if (f == NULL)\n    {\n      /* Try to create directory and retry once. */\n      (void) mkdir (\"/tmp/logs\", 0777);\n      f = fopen (\"/tmp/logs/2263.txt\", \"a\");\n      if (f == NULL)\n        {\n          /* If still NULL, give up silently to avoid changing program behaviour. */\n          return;\n        }\n    }\n\n  /* Safe extraction of name without dereferencing when param is NULL. */\n  const char *name_str = \"<NULL>\";\n  if (param != NULL)\n    {\n      if (param->name != NULL)\n        {\n          name_str = param->name;\n        }\n      else\n        {\n          name_str = \"<name=NULL>\";\n        }\n    }\n\n  /* Log available pointers and flags. Do NOT access param after it has been freed. */\n  (void) fprintf (f,\n                  \"[%s] data_ptr=%p, param_ptr=%p, name=%s, arg_ptr=%p, thr_func_nonnull=%d\\n\",\n                  stage,\n                  (void *) param, /* pointer value for param */\n                  (void *) param,\n                  name_str,\n                  arg,\n                  thr_func_present);\n\n  (void) fclose (f);\n}\n\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    {\n      /* Log the NULL-data control path. */\n      log_named_thread_state (\"entry_null_data\", NULL, NULL, 0);\n      return (MHD_THRD_RTRN_TYPE_) 0;\n    }\n\n  /* Preserve original behaviour: set thread name as before. */\n  MHD_set_cur_thread_name_ (param->name);\n\n  /* Log state after setting thread name and before extracting fields. */\n  log_named_thread_state (\"after_set_thread_name\", param, NULL, 0);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n\n  /* Log state just before freeing the parameter block. We do not dereference param after free. */\n  log_named_thread_state (\"before_free\", param, arg, (thr_func != (MHD_THREAD_START_ROUTINE_) 0) ? 1 : 0);\n\n  free (data);\n\n  /* After free we log that the block was released and we still have arg and whether thr_func was present. */\n  log_named_thread_state (\"after_free\", NULL, arg, (thr_func != (MHD_THREAD_START_ROUTINE_) 0) ? 1 : 0);\n\n  return thr_func (arg);\n}\n"
}