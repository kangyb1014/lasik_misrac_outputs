{
  "user_message": "An agent A claimed that the following named_thread_starter code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of named_thread_starter.\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'param' is declared as 'struct MHD_named_helper_param_ *const' (pointer to a non-const object) but in the function it is used only for read access (param->name, param->arg, param->start_routine) before freeing the original void *data. According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type when possible. A compliant declaration would be: 'const struct MHD_named_helper_param_ *const param = data;'.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. The pointer 'param' is only used to read members (param->name, param->arg, param->start_routine) and the object is not modified via that pointer. MISRA C 2023 Rule 8.13 requires a pointer to point to a const-qualified type when possible, so declaring param as pointing to a const-qualified struct would be appropriate, e.g.:\n\nconst struct MHD_named_helper_param_ *const param = data;\n\nThis does not prevent calling free(data) (free takes a void*) and avoids allowing modification through param. Thus the agent A report is correct: the current declaration violates Rule 8.13."
}