{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses 'struct MHD_named_helper_param_ *const param' \u2014 the pointer itself is const but it points to a non-const struct. In the fragment 'thr_func = param->start_routine;' param is only read from and could have been declared as a pointer to const (e.g. 'const struct MHD_named_helper_param_ *const param = (const struct MHD_named_helper_param_ *)data;'). Because the pointed-to type is not const-qualified even though it could be, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified named_thread_starter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of named_thread_starter as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\nPlease provide the modified named_thread_starter code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helpers: write control flow and state information to /tmp/logs/2263.txt\n * These helpers do not change the original logic; they only record\n * the pointer values and relevant fields that demonstrate the scenario\n * where the parameter could have been a pointer to const.\n */\nstatic void\nlog_named_thread_starter_entry (const void *data)\n{\n  FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"named_thread_starter: entry, data=%p\\n\", data);\n  fclose(f);\n}\n\nstatic void\nlog_named_thread_starter_param (struct MHD_named_helper_param_ *const param,\n                                void *arg,\n                                int thr_func_nonnull)\n{\n  FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"named_thread_starter: param=%p\\n\", (void *) param);\n\n  if (param == NULL)\n  {\n    fprintf(f, \"named_thread_starter: param is NULL\\n\");\n  }\n  else\n  {\n    /* name may be NULL; guard printing as string */\n    if (param->name != NULL)\n      fprintf(f, \"named_thread_starter: param->name=\\\"%s\\\"\\n\", param->name);\n    else\n      fprintf(f, \"named_thread_starter: param->name=(null)\\n\");\n\n    fprintf(f, \"named_thread_starter: param->arg=%p\\n\", arg);\n    fprintf(f, \"named_thread_starter: param->start_routine %s\\n\",\n            thr_func_nonnull ? \"is non-NULL\" : \"is NULL\");\n  }\n\n  fclose(f);\n}\n\nstatic void\nlog_named_thread_starter_before_call (void *arg)\n{\n  FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"named_thread_starter: about to call thread routine with arg=%p\\n\", arg);\n  fclose(f);\n}\n\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  /* Log entry and raw data pointer */\n  log_named_thread_starter_entry (data);\n\n  if (NULL == data)\n  {\n    /* Log the NULL-data exit */\n    FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"named_thread_starter: data is NULL, returning 0\\n\");\n      fclose(f);\n    }\n\n    return (MHD_THRD_RTRN_TYPE_) 0;\n  }\n\n  /* Preserve original behavior: set thread name, extract args and function,\n   * free the parameter block, then call the thread routine.\n   * Insert logging to capture the values used.\n   */\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n\n  /* Log the state (param pointer, name, arg, whether start_routine is NULL).\n   * Note: we intentionally do not cast function pointers to data pointers\n   * for printing; instead we log whether the function pointer is NULL.\n   */\n  log_named_thread_starter_param (param, arg, thr_func != (MHD_THREAD_START_ROUTINE_) 0);\n\n  /* Free the data as in original code */\n  free (data);\n\n  /* Log before calling the thread function */\n  log_named_thread_starter_before_call (arg);\n\n  /* Call the start routine and return its value (preserve original behavior) */\n  return thr_func (arg);\n}\n"
}