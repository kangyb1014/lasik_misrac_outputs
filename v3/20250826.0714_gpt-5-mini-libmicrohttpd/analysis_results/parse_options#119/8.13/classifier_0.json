{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n                          params,\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment itself does not prove a violation. As written, params has type \"struct MHD_InterimParams_ *\" and is forwarded to parse_options_va(daemon, params, ap). This is not a Rule 8.13 violation unless the pointed-to object is never modified. A concrete violation scenario would be: both parse_options() and parse_options_va() only read the contents of *params (they do not modify it), yet params is declared and passed as a non-const pointer. In that case params should be declared as \"const struct MHD_InterimParams_ *params\" (and the callee prototype updated accordingly), and the current non-const usage would violate MISRA C 2023 Rule 8.13."
}