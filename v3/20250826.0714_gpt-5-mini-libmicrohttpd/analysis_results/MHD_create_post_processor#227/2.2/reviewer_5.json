{
  "user_message": "An agent A claimed that the following MHD_create_post_processor code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_post_processor.\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement `encoding = NULL;` is redundant. Immediately after this assignment the function calls MHD_lookup_connection_value_n(&encoding,...). If that call fails the function returns immediately, so the earlier assignment has no effect; if it succeeds it will set encoding to the returned value, overwriting the assignment. Removing the single assignment would not change program behaviour, so the operation is dead code.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[MHD_create_post_processor] ENTRY\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=NULL\n  boundary=(nil)\n  blen=0\n\n[MHD_create_post_processor] AFTER encoding = NULL\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=NULL\n  boundary=(nil)\n  blen=0\n\n[MHD_create_post_processor] LOOKUP SUCCEEDED\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=(nil)\n  blen=0\n  lookup_ret=0\n\n[MHD_create_post_processor] BOUNDARY DETERMINED\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=0x55afb684f041\n  blen=6\n\n[MHD_create_post_processor] ALLOCATED - populating ret fields\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1028\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=0x55afb684f041\n  blen=6\n\n[MHD_create_post_processor] RETURNING ret\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1028\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=0x55afb684f041\n  blen=6\n\n[MHD_create_post_processor] ENTRY\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=NULL\n  boundary=(nil)\n  blen=0\n\n[MHD_create_post_processor] AFTER encoding = NULL\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=NULL\n  boundary=(nil)\n  blen=0\n\n[MHD_create_post_processor] LOOKUP SUCCEEDED\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=(nil)\n  blen=0\n  lookup_ret=0\n\n[MHD_create_post_processor] BOUNDARY DETERMINED\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=0x55afb684f041\n  blen=6\n\n[MHD_create_post_processor] ALLOCATED - populating ret fields\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1028\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=0x55afb684f041\n  blen=6\n\n[MHD_create_post_processor] RETURNING ret\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1028\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=0x55afb684f041\n  blen=6\n\n[MHD_create_post_processor] ENTRY\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=NULL\n  boundary=(nil)\n  blen=0\n\n[MHD_create_post_processor] AFTER encoding = NULL\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=NULL\n  boundary=(nil)\n  blen=0\n\n[MHD_create_post_processor] LOOKUP SUCCEEDED\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=(nil)\n  blen=0\n  lookup_ret=0\n\n[MHD_create_post_processor] BOUNDARY DETERMINED\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=0x55afb684f041\n  blen=6\n\n[MHD_create_post_processor] ALLOCATED - populating ret fields\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1028\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=0x55afb684f041\n  blen=6\n\n[MHD_create_post_processor] RETURNING ret\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1028\n  encoding=0x55afb684f023, encoding_str=multipart/form-data, boundary=AaB03x\n  boundary=0x55afb684f041\n  blen=6\n\n[MHD_create_post_processor] ENTRY\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=NULL\n  boundary=(nil)\n  blen=0\n\n[MHD_create_post_processor] AFTER encoding = NULL\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n  encoding=NULL\n  boundary=(nil)\n  blen=0\n\n[MHD_create_post_processor] LOOKUP SUCCEEDED\n  connection=0x7ffc67c4e3a0, iter=0x55afb684bad0, buffer_size=1024\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The assignment encoding = NULL; is executed but has no effect on program behaviour: if MHD_lookup_connection_value_n fails the function returns immediately (so the earlier assignment is unused), and if it succeeds the call stores the pointer into encoding, overwriting the assignment. Therefore removing that single assignment would not change program behaviour, so it meets the definition of dead code in MISRA C 2023 Rule 2.2. Note 3 of the rule clarifies that initialization at declaration is not considered an assignment for the purposes of dead code; to avoid the violation while keeping a well-defined initial value you should initialize at declaration (e.g. \"const char *encoding = NULL;\") rather than performing a separate assignment."
}