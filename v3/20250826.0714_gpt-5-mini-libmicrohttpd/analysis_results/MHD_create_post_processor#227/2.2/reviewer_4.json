{
  "user_message": "An agent A claimed that the following MHD_create_post_processor code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_post_processor.\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe mhd_assert(NULL != encoding); call is redundant: earlier the code returns NULL if MHD_lookup_connection_value_n indicates failure, and on success that function provides a non-NULL encoding pointer. Thus the assertion will always be true in correct execution and (if it only performs checking/diagnostics) its execution does not affect program behaviour \u2014 removing it would not change behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_create_post_processor: connection=0x7ffde0ee1430 buffer_size=1024 iter=0x55c3b309aad0\nBefore lookup: encoding=(nil) (expected NULL)\nMHD_lookup_connection_value_n returned success: encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x'\nAbout to call mhd_assert(NULL != encoding)\nmhd_assert(NULL != encoding) passed (execution reached assertion)\nfound boundary start=0x55c3b309e041 boundary_str='AaB03x' blen=6\nFinal blen=6 (after parsing), buffer_size(before adjust)=1024\nAdjusted buffer_size=1028 (added 4)\nReturning new MHD_PostProcessor at 0x55c3d7acda00: connection=0x7ffde0ee1430 encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x' buffer_size=1028 blen=6 boundary=0x55c3b309e041\nENTER MHD_create_post_processor: connection=0x7ffde0ee1430 buffer_size=1024 iter=0x55c3b309aad0\nBefore lookup: encoding=(nil) (expected NULL)\nMHD_lookup_connection_value_n returned success: encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x'\nAbout to call mhd_assert(NULL != encoding)\nmhd_assert(NULL != encoding) passed (execution reached assertion)\nfound boundary start=0x55c3b309e041 boundary_str='AaB03x' blen=6\nFinal blen=6 (after parsing), buffer_size(before adjust)=1024\nAdjusted buffer_size=1028 (added 4)\nReturning new MHD_PostProcessor at 0x55c3d7acda00: connection=0x7ffde0ee1430 encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x' buffer_size=1028 blen=6 boundary=0x55c3b309e041\nENTER MHD_create_post_processor: connection=0x7ffde0ee1430 buffer_size=1024 iter=0x55c3b309aad0\nBefore lookup: encoding=(nil) (expected NULL)\nMHD_lookup_connection_value_n returned success: encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x'\nAbout to call mhd_assert(NULL != encoding)\nmhd_assert(NULL != encoding) passed (execution reached assertion)\nfound boundary start=0x55c3b309e041 boundary_str='AaB03x' blen=6\nFinal blen=6 (after parsing), buffer_size(before adjust)=1024\nAdjusted buffer_size=1028 (added 4)\nReturning new MHD_PostProcessor at 0x55c3d7acda00: connection=0x7ffde0ee1430 encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x' buffer_size=1028 blen=6 boundary=0x55c3b309e041\nENTER MHD_create_post_processor: connection=0x7ffde0ee1430 buffer_size=1024 iter=0x55c3b309aad0\nBefore lookup: encoding=(nil) (expected NULL)\nMHD_lookup_connection_value_n returned success: encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x'\nAbout to call mhd_assert(NULL != encoding)\nmhd_assert(NULL != encoding) passed (execution reached assertion)\nfound boundary start=0x55c3b309e041 boundary_str='AaB03x' blen=6\nFinal blen=6 (after parsing), buffer_size(before adjust)=1024\nAdjusted buffer_size=1028 (added 4)\nReturning new MHD_PostProcessor at 0x55c3d7acda00: connection=0x7ffde0ee1430 encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x' buffer_size=1028 blen=6 boundary=0x55c3b309e041\nENTER MHD_create_post_processor: connection=0x7ffde0ee1430 buffer_size=1024 iter=0x55c3b309aad0\nBefore lookup: encoding=(nil) (expected NULL)\nMHD_lookup_connection_value_n returned success: encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x'\nAbout to call mhd_assert(NULL != encoding)\nmhd_assert(NULL != encoding) passed (execution reached assertion)\nfound boundary start=0x55c3b309e041 boundary_str='AaB03x' blen=6\nFinal blen=6 (after parsing), buffer_size(before adjust)=1024\nAdjusted buffer_size=1028 (added 4)\nReturning new MHD_PostProcessor at 0x55c3d7acda00: connection=0x7ffde0ee1430 encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x' buffer_size=1028 blen=6 boundary=0x55c3b309e041\nENTER MHD_create_post_processor: connection=0x7ffde0ee1430 buffer_size=1024 iter=0x55c3b309aad0\nBefore lookup: encoding=(nil) (expected NULL)\nMHD_lookup_connection_value_n returned success: encoding=0x55c3b309e023 encoding_str='multipart/form-data, boundary=AaB03x'\nAbout to call mhd_assert(NULL != encoding)\nmhd_assert(NULL != encoding) passed (execution reached assertion)\nfound boundary start=0x55c\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Whether the mhd_assert call is \u201cdead code\u201d cannot be decided from the snippet alone \u2014 you must know what the mhd_assert macro expands to and whether its execution produces observable side\u2011effects. MISRA 2.2 forbids executed operations whose removal would not affect program behaviour. If mhd_assert simply evaluates a condition with no observable side effects and that condition is provably always true, then its execution would be dead code. However typical assert implementations perform observable actions (logging, diagnostics, or abort on failure) and therefore their presence does affect program behaviour; removal would change outputs/timing or disable diagnostics. The provided execution log even shows messages around the assertion, indicating observable behaviour. Thus, with the available evidence the agent\u2019s claim is not proven and the report that this code violates MISRA C 2023 Rule 2.2 is incorrect. (If, in your project, mhd_assert is a pure no\u2011op and the condition is provably always true, then you would have a dead\u2011code issue \u2014 that would be a project\u2011specific finding.)"
}