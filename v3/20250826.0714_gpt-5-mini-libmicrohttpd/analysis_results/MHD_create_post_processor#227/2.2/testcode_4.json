{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert(NULL != encoding); call is redundant: earlier the code returns NULL if MHD_lookup_connection_value_n indicates failure, and on success that function provides a non-NULL encoding pointer. Thus the assertion will always be true in correct execution and (if it only performs checking/diagnostics) its execution does not affect program behaviour \u2014 removing it would not change behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_post_processor code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2272.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_post_processor as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_post_processor:\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_post_processor code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append logs to /tmp/logs/2272.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2272.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n\n  /* Log entry and initial state */\n  mhd_probe_log(\"ENTER MHD_create_post_processor: connection=%p buffer_size=%zu iter=%p\",\n                (void *) connection, buffer_size, (void *) iter);\n\n  encoding = NULL;\n  mhd_probe_log(\"Before lookup: encoding=%p (expected NULL)\", (const void *) encoding);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL)) {\n    mhd_probe_log(\"MHD_lookup_connection_value_n returned MHD_NO; returning NULL\");\n    return NULL;\n  }\n\n  /* Log result of lookup: pointer and string content if available */\n  if (NULL == encoding)\n    mhd_probe_log(\"MHD_lookup_connection_value_n returned success but encoding==NULL (unexpected)\");\n  else\n    mhd_probe_log(\"MHD_lookup_connection_value_n returned success: encoding=%p encoding_str='%s'\",\n                  (const void *) encoding, encoding);\n\n  mhd_probe_log(\"About to call mhd_assert(NULL != encoding)\");\n  mhd_assert (NULL != encoding);\n  mhd_probe_log(\"mhd_assert(NULL != encoding) passed (execution reached assertion)\");\n\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    {\n      mhd_probe_log(\"encoding did not match known types; returning NULL. encoding_str='%s'\",\n                    encoding ? encoding : \"(null)\");\n      return NULL;\n    }\n\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary) {\n      mhd_probe_log(\"failed to find 'boundary=' in encoding string; returning NULL. encoding_str='%s'\",\n                    encoding);\n      return NULL; /* failed to determine boundary */\n    }\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    mhd_probe_log(\"found boundary start=%p boundary_str='%s' blen=%zu\",\n                  (const void *) boundary, boundary, blen);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) ) {\n      mhd_probe_log(\"boundary length invalid or would exceed buffer: blen=%zu buffer_size=%zu; returning NULL\",\n                    blen, buffer_size);\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    }\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n      mhd_probe_log(\"removed enclosing quotes from boundary; new boundary_str='%s' blen=%zu\",\n                    boundary, blen);\n    }\n  }\n  else\n    blen = 0;\n\n  mhd_probe_log(\"Final blen=%zu (after parsing), buffer_size(before adjust)=%zu\",\n                blen, buffer_size);\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n  mhd_probe_log(\"Adjusted buffer_size=%zu (added 4)\", buffer_size);\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1))) {\n    mhd_probe_log(\"MHD_calloc_ failed; returning NULL\");\n    return NULL;\n  }\n\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n\n  mhd_probe_log(\"Returning new MHD_PostProcessor at %p: connection=%p encoding=%p encoding_str='%s' buffer_size=%zu blen=%zu boundary=%p\",\n                (void *) ret, (void *) connection, (const void *) encoding,\n                encoding ? encoding : \"(null)\", buffer_size, blen, (const void *) boundary);\n\n  return ret;\n}\n"
}