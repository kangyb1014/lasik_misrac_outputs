{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The pointer passed as the haystack (boundary) may not point to a NUL-terminated object, so strstr(boundary, \"boundary=\") can read past the end of the underlying buffer. For example, if MHD_lookup_connection_value_n returns a pointer into a header value that is length-delimited (not guaranteed NUL-terminated) or if encoding points near the end of a non-terminated buffer, calling strstr will scan until it finds a NUL in memory beyond the object bounds\u2014violating Rule 21.17. The subsequent use of strlen(boundary) has the same risk.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_post_processor code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2279.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_post_processor as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_post_processor:\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_post_processor code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper. Appends logs to /tmp/logs/2279.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2279.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  probe_log(\"MHD_create_post_processor entry: buffer_size=%zu connection=%p iter=%p iter_cls=%p\",\n            buffer_size, (void *)connection, (void *)iter, iter_cls);\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n  {\n    probe_log(\"MHD_lookup_connection_value_n returned MHD_NO; encoding=%p\", (void *)encoding);\n    return NULL;\n  }\n  mhd_assert (NULL != encoding);\n  probe_log(\"MHD_lookup_connection_value_n returned success; encoding=%p\", (void *)encoding);\n\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    {\n      probe_log(\"encoding is neither form-urlencoded nor multipart/form-data; encoding=%p\", (void *)encoding);\n      return NULL;\n    }\n\n    /* At this point encoding points right after the multipart/form-data token */\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    probe_log(\"candidate boundary pointer before strstr: %p (points into encoding=%p)\", (void *)boundary, (void *)encoding);\n\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    probe_log(\"after strstr(boundary, \\\"boundary=\\\"): boundary=%p\", (void *)boundary);\n\n    if (NULL == boundary)\n    {\n      probe_log(\"strstr did not find \\\"boundary=\\\"; giving up\");\n      return NULL; /* failed to determine boundary */\n    }\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    probe_log(\"boundary advanced past \\\"boundary=\\\": boundary=%p\", (void *)boundary);\n\n    blen = strlen (boundary);\n    probe_log(\"computed blen = strlen(boundary) = %zu for boundary=%p\", blen, (void *)boundary);\n\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n    {\n      probe_log(\"boundary length invalid or would cause OOM: blen=%zu buffer_size=%zu\", blen, buffer_size);\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    }\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      probe_log(\"boundary is quoted: first='\\%c' last='\\%c' at %p (blen=%zu)\", boundary[0], boundary[blen - 1], (void *)boundary, blen);\n      ++boundary;\n      blen -= 2;\n      probe_log(\"trimmed quotes: boundary now=%p blen=%zu\", (void *)boundary, blen);\n    }\n  }\n  else\n    blen = 0;\n\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n  probe_log(\"final buffer_size (after +4)=%zu blen=%zu\", buffer_size, blen);\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n  {\n    probe_log(\"MHD_calloc_ failed for size=%zu\", sizeof (struct MHD_PostProcessor) + buffer_size + 1);\n    return NULL;\n  }\n\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n\n  probe_log(\"created MHD_PostProcessor ret=%p connection=%p encoding=%p buffer_size=%zu blen=%zu boundary=%p\",\n            (void *)ret, (void *)ret->connection, (void *)ret->encoding, ret->buffer_size, ret->blen, (void *)ret->boundary);\n\n  return ret;\n}\n"
}