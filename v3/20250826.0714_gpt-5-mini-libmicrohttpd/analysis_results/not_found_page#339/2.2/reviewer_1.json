{
  "user_message": "An agent A claimed that the following not_found_page code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of not_found_page.\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement '(void) session;' is an executed no-op (an expression statement with no side effects) used only to silence an \"unused parameter\" warning. Removing that statement would not change program behaviour, so it meets the definition of dead code and therefore violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s reasoning is too literal and the report is not correct. Although the statement \u201c(void) session;\u201d is an executed no\u2011op and removing it would not change the program\u2019s runtime behaviour in the sense of observable effects, this idiom is an explicit, well\u2011defined way to mark a parameter as intentionally unused and to suppress compiler diagnostics. MISRA\u2019s Rule 2.2 is aimed at genuinely redundant/dead code that could hide logic errors or that the program relies on being absent; it is not intended to forbid the standard idiom for documenting unused parameters or silencing warnings. If you want to avoid any questions in a strict audit, you can (a) remove the unused parameter from the function signature, (b) use a project\u2011approved UNUSED macro (e.g. MACRO_UNUSED(session)), or (c document the use of the (void) cast in the project\u2019s deviation/justification records. But the single \u201c(void) session;\u201d line itself should not be treated as a violation of MISRA C:2023 Rule 2.2."
}