{
  "user_message": "An agent A claimed that the following close_connection code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of close_connection.\n```c\nstatic void\nclose_connection (struct MHD_Connection *pos)\n{\n  struct MHD_Daemon *daemon = pos->daemon;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    MHD_connection_mark_closed_ (pos);\n    return;   /* must let thread to do the rest */\n  }\n  MHD_connection_close_ (pos,\n                         MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  mhd_assert (! pos->suspended);\n  mhd_assert (! pos->resuming);\n  if (pos->connection_timeout_ms == daemon->connection_timeout_ms)\n    XDLL_remove (daemon->normal_timeout_head,\n                 daemon->normal_timeout_tail,\n                 pos);\n  else\n    XDLL_remove (daemon->manual_timeout_head,\n                 daemon->manual_timeout_tail,\n                 pos);\n  DLL_remove (daemon->connections_head,\n              daemon->connections_tail,\n              pos);\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              pos);\n  daemon->data_already_pending = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThis call passes 'pos' (type struct MHD_Connection *) to XDLL_remove as a non-const pointer. If XDLL_remove does not modify the MHD_Connection object that 'pos' points to (i.e. it only uses the pointer value to unlink the node from the list), then 'pos' should be a pointer to const-qualified type and the code violates MISRA C 2023 Rule 8.13. If, however, XDLL_remove modifies fields inside the pointed MHD_Connection (for example next/prev pointers stored in the node), then a non-const pointer is required and there is no violation. Without the XDLL_remove prototype/implementation we cannot prove compliance; the rule is violated in the specific scenario where XDLL_remove only reads 'pos' but its parameter is non-const.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not proven correct. MISRA C 2023 Rule 8.13 says a pointer should point to const-qualified type whenever the pointee is not modified. Agent A\u2019s scenario is only one possible situation: if XDLL_remove (or DLL_remove/DLL_insert) only reads the pointer and its prototype unnecessarily takes a non-const pointer, then the prototype (and calls) could be said to violate 8.13. However, we do not have the prototypes/implementations. In typical list code, remove/insert operations update node fields (next/prev), so a non-const pointer is required and there is no violation. Also, the shown function calls other helpers (MHD_connection_close_, MHD_connection_mark_closed_) which likely modify the object, further indicating pos is not immutable here. Finally, Rule 8.13 concerns the declaration/prototype (whether the pointer could be const); the mere call site passing a non-const pointer is not sufficient evidence of a violation. Because there is no proof that XDLL_remove could use a const-qualified parameter, the claim of a definite MISRA 8.13 violation is not supported."
}