{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis call passes 'pos' (type struct MHD_Connection *) to XDLL_remove as a non-const pointer. If XDLL_remove does not modify the MHD_Connection object that 'pos' points to (i.e. it only uses the pointer value to unlink the node from the list), then 'pos' should be a pointer to const-qualified type and the code violates MISRA C 2023 Rule 8.13. If, however, XDLL_remove modifies fields inside the pointed MHD_Connection (for example next/prev pointers stored in the node), then a non-const pointer is required and there is no violation. Without the XDLL_remove prototype/implementation we cannot prove compliance; the rule is violated in the specific scenario where XDLL_remove only reads 'pos' but its parameter is non-const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified close_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1073.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of close_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of close_connection:\n```c\nstatic void\nclose_connection (struct MHD_Connection *pos)\n{\n  struct MHD_Daemon *daemon = pos->daemon;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    MHD_connection_mark_closed_ (pos);\n    return;   /* must let thread to do the rest */\n  }\n  MHD_connection_close_ (pos,\n                         MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  mhd_assert (! pos->suspended);\n  mhd_assert (! pos->resuming);\n  if (pos->connection_timeout_ms == daemon->connection_timeout_ms)\n    XDLL_remove (daemon->normal_timeout_head,\n                 daemon->normal_timeout_tail,\n                 pos);\n  else\n    XDLL_remove (daemon->manual_timeout_head,\n                 daemon->manual_timeout_tail,\n                 pos);\n  DLL_remove (daemon->connections_head,\n              daemon->connections_tail,\n              pos);\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              pos);\n  daemon->data_already_pending = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n}\n```\n</target_code>\nPlease provide the modified close_connection code.\n",
  "test_code": "static void\nlog_close_connection(const struct MHD_Connection *pos, const char *stage)\n{\n    /* Probe function: append human-readable trace info to a local log file. */\n    FILE *f = fopen(\"/tmp/logs/1073.txt\", \"a\");\n    if (f)\n    {\n        /* Record pointer addresses and key state fields used in close_connection. */\n        fprintf(f, \"[close_connection] stage=%s pos=%p daemon=%p suspended=%d resuming=%d \",\n                stage,\n                (void *) pos,\n                (void *) (pos ? pos->daemon : NULL),\n                (int) (pos ? pos->suspended : 0),\n                (int) (pos ? pos->resuming : 0));\n        if (pos && pos->daemon)\n        {\n            fprintf(f, \"conn_timeout=%llu daemon_timeout=%llu\\n\",\n                    (unsigned long long) pos->connection_timeout_ms,\n                    (unsigned long long) pos->daemon->connection_timeout_ms);\n        }\n        else\n        {\n            fprintf(f, \"conn_timeout=NA daemon_timeout=NA\\n\");\n        }\n        fflush(f);\n        fclose(f);\n    }\n}\n\nstatic void\nclose_connection (struct MHD_Connection *pos)\n{\n  struct MHD_Daemon *daemon = pos->daemon;\n\n  /* Log entry with initial state */\n  log_close_connection(pos, \"entry\");\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    MHD_connection_mark_closed_ (pos);\n    /* Log the early-return path for thread-per-connection */\n    log_close_connection(pos, \"thread_per_conn:before_return\");\n    return;   /* must let thread to do the rest */\n  }\n\n  /* Close the connection and log after close action */\n  MHD_connection_close_ (pos,\n                         MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN);\n  log_close_connection(pos, \"after_connection_close\");\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  log_close_connection(pos, \"before_mutex_lock_cleanup_connection\");\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  log_close_connection(pos, \"after_mutex_lock_cleanup_connection\");\n#endif\n  mhd_assert (! pos->suspended);\n  mhd_assert (! pos->resuming);\n\n  /* Log which timeout list will be used and the pointer passed to XDLL_remove */\n  if (pos->connection_timeout_ms == daemon->connection_timeout_ms)\n  {\n    log_close_connection(pos, \"about_to_XDLL_remove:normal_timeout_list\");\n    XDLL_remove (daemon->normal_timeout_head,\n                 daemon->normal_timeout_tail,\n                 pos);\n    log_close_connection(pos, \"after_XDLL_remove:normal_timeout_list\");\n  }\n  else\n  {\n    log_close_connection(pos, \"about_to_XDLL_remove:manual_timeout_list\");\n    XDLL_remove (daemon->manual_timeout_head,\n                 daemon->manual_timeout_tail,\n                 pos);\n    log_close_connection(pos, \"after_XDLL_remove:manual_timeout_list\");\n  }\n\n  /* Log before and after removing from global connections list */\n  log_close_connection(pos, \"about_to_DLL_remove:connections_list\");\n  DLL_remove (daemon->connections_head,\n              daemon->connections_tail,\n              pos);\n  log_close_connection(pos, \"after_DLL_remove:connections_list\");\n\n  /* Log insertion into cleanup list */\n  log_close_connection(pos, \"about_to_DLL_insert:cleanup_list\");\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              pos);\n  log_close_connection(pos, \"after_DLL_insert:cleanup_list\");\n\n  daemon->data_already_pending = true;\n  log_close_connection(pos, \"done_set_data_already_pending\");\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  log_close_connection(pos, \"after_mutex_unlock_cleanup_connection\");\n#endif\n}\n"
}