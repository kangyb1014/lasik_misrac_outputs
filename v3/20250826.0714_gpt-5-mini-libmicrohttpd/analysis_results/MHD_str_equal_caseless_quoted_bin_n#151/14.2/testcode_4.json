{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"j = 0;\" initializes a second loop counter outside the for header. The for statement later uses and increments both i and j (for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)), so the loop has two loop counters (i and j) and the second counter (j) is initialized outside the first clause. This violates MISRA C 2023 Rule 14.2 which mandates only one loop counter per for loop and that the first clause should set or define/initialize the loop counter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_quoted_bin_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1514.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_quoted_bin_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_quoted_bin_n:\n```c\nbool\nMHD_str_equal_caseless_quoted_bin_n (const char *quoted,\n                                     size_t quoted_len,\n                                     const char *unquoted,\n                                     size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (! charsequalcaseless (quoted[i], unquoted[j]))\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_quoted_bin_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/1514.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* External comparison function used by the original code. */\nextern bool charsequalcaseless (char a, char b);\n\nbool\nMHD_str_equal_caseless_quoted_bin_n (const char *quoted,\n                                     size_t quoted_len,\n                                     const char *unquoted,\n                                     size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n\n  probe_log(\"ENTER: MHD_str_equal_caseless_quoted_bin_n quoted_len=%zu unquoted_len=%zu quoted=%p unquoted=%p\",\n            quoted_len, unquoted_len, (const void *)quoted, (const void *)unquoted);\n\n  if (unquoted_len < quoted_len / 2)\n  {\n    probe_log(\"EARLY RETURN: unquoted_len < quoted_len/2 (%zu < %zu) -> false\",\n              unquoted_len, quoted_len / 2);\n    return false;\n  }\n\n  /* Intentionally initialize j outside the for header to reproduce the reported scenario. */\n  j = 0;\n  probe_log(\"Initialized j outside for header: j=%zu (this demonstrates second loop counter initialized outside first clause)\", j);\n\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    probe_log(\"LOOP ENTRY: i=%zu j=%zu quoted[i]=%c unquoted[j]=%c\",\n              i, j,\n              (quoted != NULL && i < quoted_len) ? quoted[i] : '?',\n              (unquoted != NULL && j < unquoted_len) ? unquoted[j] : '?');\n\n    if ('\\\\' == quoted[i])\n    {\n      probe_log(\"BACKSLASH FOUND at quoted[%zu], advancing i to i+1\", i);\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n      {\n        probe_log(\"EARLY RETURN: quoted_len == i after escaping backslash -> false (quoted_len=%zu i=%zu)\", quoted_len, i);\n        return false; /* No character after escaping backslash */\n      }\n      probe_log(\"AFTER ESCAPE: i=%zu j=%zu quoted[i]=%c unquoted[j]=%c\",\n                i, j,\n                (quoted != NULL && i < quoted_len) ? quoted[i] : '?',\n                (unquoted != NULL && j < unquoted_len) ? unquoted[j] : '?');\n    }\n\n    {\n      bool eq = charsequalcaseless (quoted[i], unquoted[j]);\n      probe_log(\"COMPARE: quoted[%zu]='%c' unquoted[%zu]='%c' -> charsequalcaseless=%s\",\n                i, quoted[i], j, unquoted[j], eq ? \"true\" : \"false\");\n      if (! eq)\n      {\n        probe_log(\"EARLY RETURN: character mismatch at i=%zu j=%zu -> false\", i, j);\n        return false; /* Different characters */\n      }\n    }\n\n    probe_log(\"LOOP PROGRESS: end of iteration i=%zu j=%zu (note: both i and j are incremented in the for header)\", i, j);\n  }\n\n  probe_log(\"AFTER LOOP: i=%zu j=%zu quoted_len=%zu unquoted_len=%zu\", i, j, quoted_len, unquoted_len);\n  if ((quoted_len != i) || (unquoted_len != j))\n  {\n    probe_log(\"FINAL RETURN: length mismatch -> false (quoted_len!=i || unquoted_len!=j)\");\n    return false; /* The strings have different length */\n  }\n\n  probe_log(\"RETURN true: strings equal caselessly\");\n  return true;\n}\n"
}