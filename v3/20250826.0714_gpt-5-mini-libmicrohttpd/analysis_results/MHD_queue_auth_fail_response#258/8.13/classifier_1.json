{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_queue_auth_fail_response:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response (struct MHD_Connection *connection,\n                              const char *realm,\n                              const char *opaque,\n                              struct MHD_Response *response,\n                              int signal_stale)\n{\n  return MHD_queue_auth_fail_response2 (connection,\n                                        realm,\n                                        opaque,\n                                        response,\n                                        signal_stale,\n                                        MHD_DIGEST_ALG_MD5);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstruct MHD_Connection *connection\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "If neither MHD_queue_auth_fail_response nor the callee MHD_queue_auth_fail_response2 modify the MHD_Connection object (they only read from it), then declaring the parameter as a non-const pointer (struct MHD_Connection *connection) violates MISRA C 2023 Rule 8.13. In that case the correct declaration would be const struct MHD_Connection *connection. However, based on the fragment alone (no evidence whether the pointee is modified), a violation cannot be established for sure."
}