{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of has_unprocessed_upload_body_data_in_buffer:\n```c\nstatic bool\nhas_unprocessed_upload_body_data_in_buffer (struct MHD_Connection *c)\n{\n  mhd_assert (MHD_CONNECTION_BODY_RECEIVING == c->state);\n  if (! c->rq.have_chunked_upload)\n    return 0 != c->read_buffer_offset;\n\n  /* Chunked upload */\n  mhd_assert (0 != c->rq.remaining_upload_size); /* Must not be possible in MHD_CONNECTION_BODY_RECEIVING state */\n  if (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    return false;\n  }\n  return 0 != c->read_buffer_offset; /* Chunk payload data in the read buffer */\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    return false;\n  }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. Both branches are reachable: when c->rq.current_chunk_offset == c->rq.current_chunk_size (e.g. waiting for a chunk header or CRLF) the function returns false; when they differ the final return (0 != c->read_buffer_offset) is executed. There is no unreachable code in the fragment."
}