{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MHD_Connection *c' is not const-qualified even though the function only reads fields of *c (accesses c->state, c->rq..., c->read_buffer_offset) and does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. The signature should be changed to: static bool has_unprocessed_upload_body_data_in_buffer(const struct MHD_Connection *c).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified has_unprocessed_upload_body_data_in_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of has_unprocessed_upload_body_data_in_buffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of has_unprocessed_upload_body_data_in_buffer:\n```c\nstatic bool\nhas_unprocessed_upload_body_data_in_buffer (struct MHD_Connection *c)\n{\n  mhd_assert (MHD_CONNECTION_BODY_RECEIVING == c->state);\n  if (! c->rq.have_chunked_upload)\n    return 0 != c->read_buffer_offset;\n\n  /* Chunked upload */\n  mhd_assert (0 != c->rq.remaining_upload_size); /* Must not be possible in MHD_CONNECTION_BODY_RECEIVING state */\n  if (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    return false;\n  }\n  return 0 != c->read_buffer_offset; /* Chunk payload data in the read buffer */\n}\n```\n</target_code>\nPlease provide the modified has_unprocessed_upload_body_data_in_buffer code.\n",
  "test_code": "static bool\nhas_unprocessed_upload_body_data_in_buffer (struct MHD_Connection *c)\n{\n  /* Probe logging: append control flow and state info to /tmp/logs/483.txt\n     Keep logging non-intrusive: if the log file cannot be opened, proceed normally. */\n  FILE *logf = fopen(\"/tmp/logs/483.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"has_unprocessed_upload_body_data_in_buffer: entry\\n\");\n    fprintf(logf, \"  c=%p\\n\", (void *)c);\n    fprintf(logf, \"  c->state=%d\\n\", (int)c->state);\n    fprintf(logf, \"  c->rq.have_chunked_upload=%d\\n\", (int)c->rq.have_chunked_upload);\n    fprintf(logf, \"  c->read_buffer_offset=%zu\\n\", (size_t)c->read_buffer_offset);\n    fprintf(logf, \"  c->rq.remaining_upload_size=%lld\\n\", (long long)c->rq.remaining_upload_size);\n    fprintf(logf, \"  c->rq.current_chunk_offset=%zu\\n\", (size_t)c->rq.current_chunk_offset);\n    fprintf(logf, \"  c->rq.current_chunk_size=%zu\\n\", (size_t)c->rq.current_chunk_size);\n    fflush(logf);\n  }\n\n  mhd_assert (MHD_CONNECTION_BODY_RECEIVING == c->state);\n  if (! c->rq.have_chunked_upload)\n  {\n    bool ret = 0 != c->read_buffer_offset;\n    if (logf)\n    {\n      fprintf(logf, \"has_unprocessed_upload_body_data_in_buffer: non-chunked path, returning %d\\n\", ret);\n      fclose(logf);\n    }\n    return ret;\n  }\n\n  /* Chunked upload */\n  mhd_assert (0 != c->rq.remaining_upload_size); /* Must not be possible in MHD_CONNECTION_BODY_RECEIVING state */\n  if (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"has_unprocessed_upload_body_data_in_buffer: chunk boundary (current_chunk_offset==current_chunk_size = %zu), returning false\\n\",\n              (size_t)c->rq.current_chunk_offset);\n      fclose(logf);\n    }\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    return false;\n  }\n\n  {\n    bool ret = 0 != c->read_buffer_offset; /* Chunk payload data in the read buffer */\n    if (logf)\n    {\n      fprintf(logf, \"has_unprocessed_upload_body_data_in_buffer: chunk payload path, read_buffer_offset=%zu, returning %d\\n\",\n              (size_t)c->read_buffer_offset, ret);\n      fclose(logf);\n    }\n    return ret;\n  }\n}\n"
}