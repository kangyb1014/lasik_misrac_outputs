{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local loop pointer 'pos' is declared as 'struct MHD_HTTP_Res_Header *pos' and is only used to read header fields while traversing 'response->first_header'. It does not modify the pointed-to objects, so per MISRA C 2023 Rule 8.13 it should be const-qualified (e.g. 'const struct MHD_HTTP_Res_Header *pos' and the chain members/first_header also const-qualified). As written, the non-const pointer violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_header:\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n  FILE *log = fopen(\"/tmp/logs/2113.txt\", \"a\");\n\n  if (NULL == log)\n  {\n    /* try to create directory and reopen log file */\n    (void) mkdir(\"/tmp/logs\", 0777);\n    log = fopen(\"/tmp/logs/2113.txt\", \"a\");\n  }\n\n  if (log)\n  {\n    fprintf(log, \"Entered MHD_get_response_header: response=%p key=%s\\n\",\n            (void *) response, (key != NULL) ? key : \"(null)\");\n  }\n\n  if (NULL == key)\n  {\n    if (log)\n    {\n      fprintf(log, \"Key is NULL -> returning NULL\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n\n  key_size = strlen (key);\n  if (log)\n    fprintf(log, \"Computed key_size=%zu\\n\", key_size);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if (log)\n    {\n      /* header may not be NUL-terminated; print up to header_size characters */\n      if (pos->header != NULL)\n        fprintf(log, \"Visiting header: pos=%p header=\\'%.*s\\' header_size=%zu value=%p next=%p\\n\",\n                (void *) pos,\n                (int) pos->header_size,\n                pos->header,\n                pos->header_size,\n                (void *) pos->value,\n                (void *) pos->next);\n      else\n        fprintf(log, \"Visiting header: pos=%p header=(null) header_size=%zu value=%p next=%p\\n\",\n                (void *) pos,\n                pos->header_size,\n                (void *) pos->value,\n                (void *) pos->next);\n    }\n\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n    {\n      if (log)\n      {\n        fprintf(log, \"Match found: header matches key. Returning value=%p\\n\", (void *) pos->value);\n        fclose(log);\n      }\n      return pos->value;\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"No match for this header (header_size=%zu, key_size=%zu)\\n\",\n                pos->header_size, key_size);\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"No matching header found -> returning NULL\\n\");\n    fclose(log);\n  }\n  return NULL;\n}\n"
}