{
  "user_message": "An agent A claimed that the following MHD_get_response_header code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_response_header.\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'pos' is declared as 'struct MHD_HTTP_Res_Header *pos;' but it is only used for read-only access (inspecting header_size, header, value, and next). According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type when possible. Here it should be declared as 'const struct MHD_HTTP_Res_Header *pos;' (assigning response->first_header to a pointer-to-const is allowed), so the current declaration violates Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_get_response_header: start search key=\"Header-Type-A\" key_size=13 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25920 header_size=13 header=\"Header-Type-A\" (printed 13 bytes) value=0x55d534b25900 value_str=\"value-a1\" next=(nil)\nMHD_get_response_header: match found at pos=0x55d534b25920 -> returning value=0x55d534b25900 value_str=\"value-a1\"\nMHD_get_response_header: start search key=\"Header-Type-A\" key_size=13 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25920 header_size=13 header=\"Header-Type-A\" (printed 13 bytes) value=0x55d534b25900 value_str=\"value-a1\" next=0x55d534b25b80\nMHD_get_response_header: match found at pos=0x55d534b25920 -> returning value=0x55d534b25900 value_str=\"value-a1\"\nMHD_get_response_header: start search key=\"Header-Type-A\" key_size=13 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25b80 header_size=13 header=\"Header-Type-A\" (printed 13 bytes) value=0x55d534b25b60 value_str=\"value-a2\" next=(nil)\nMHD_get_response_header: match found at pos=0x55d534b25b80 -> returning value=0x55d534b25b60 value_str=\"value-a2\"\nMHD_get_response_header: start search key=\"Header-Type-A\" key_size=13 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25b80 header_size=13 header=\"Header-Type-A\" (printed 13 bytes) value=0x55d534b25b60 value_str=\"value-a2\" next=0x55d534b25bc0\nMHD_get_response_header: match found at pos=0x55d534b25b80 -> returning value=0x55d534b25b60 value_str=\"value-a2\"\nMHD_get_response_header: start search key=\"Header-Type-A\" key_size=13 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25b80 header_size=13 header=\"Header-Type-A\" (printed 13 bytes) value=0x55d534b25b60 value_str=\"value-a2\" next=(nil)\nMHD_get_response_header: match found at pos=0x55d534b25b80 -> returning value=0x55d534b25b60 value_str=\"value-a2\"\nMHD_get_response_header: start search key=\"Header-Type-B\" key_size=13 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25b80 header_size=13 header=\"Header-Type-A\" (printed 13 bytes) value=0x55d534b25b60 value_str=\"value-a2\" next=(nil)\nMHD_get_response_header: no match found for key=\"Header-Type-B\" -> returning NULL\nMHD_get_response_header: start search key=\"Connection\" key_size=10 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25c00 header_size=10 header=\"Connection\" (printed 10 bytes) value=0x55d534b258e0 value_str=\"a, b, c, d, e\" next=0x55d534b25b80\nMHD_get_response_header: match found at pos=0x55d534b25c00 -> returning value=0x55d534b258e0 value_str=\"a, b, c, d, e\"\nMHD_get_response_header: start search key=\"Connection\" key_size=10 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25b80 header_size=13 header=\"Header-Type-A\" (printed 13 bytes) value=0x55d534b25b60 value_str=\"value-a2\" next=(nil)\nMHD_get_response_header: no match found for key=\"Connection\" -> returning NULL\nMHD_get_response_header: start search key=\"Connection\" key_size=10 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25c70 header_size=10 header=\"Connection\" (printed 10 bytes) value=0x55d534b25c40 value_str=\"close, i, k, l, m, n, o, p\" next=0x55d534b25b80\nMHD_get_response_header: match found at pos=0x55d534b25c70 -> returning value=0x55d534b25c40 value_str=\"close, i, k, l, m, n, o, p\"\nMHD_get_response_header: start search key=\"Connection\" key_size=10 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25b80 header_size=13 header=\"Header-Type-A\" (printed 13 bytes) value=0x55d534b25b60 value_str=\"value-a2\" next=(nil)\nMHD_get_response_header: no match found for key=\"Connection\" -> returning NULL\nMHD_get_response_header: start search key=\"Connection\" key_size=10 response=0x55d534b25820\nMHD_get_response_header: iter pos=0x55d534b25cb0 header_size=10 header=\"Connection\" (printed 10 bytes) value=0x55d534b25c40 value_str=\"close, 1, 2, 3, 4, 5, 6, 7\" next=0x55d534b25b80\nMHD_get_response_header: match found at pos=0x55d534b25cb0 -> returning value=0x55d534b25c40 value_str=\"close, 1, 2, 3, 4, 5, 6, 7\"\nMHD_get_response_header: start search key=\"Connection\" key\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In MHD_get_response_header the local pointer 'pos' is only used for read-only access (inspecting members and following the next pointer) and no modification is done through it. It can therefore be declared as 'const struct MHD_HTTP_Res_Header *pos;'. Assigning the non-const response->first_header (and pos->next) to a pointer-to-const is allowed, and accessing pos->header/pos->value remains valid. Therefore the current declaration (non-const pointer) violates MISRA C 2023 Rule 8.13, which recommends const-qualifying pointers when possible."
}