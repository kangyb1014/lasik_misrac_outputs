{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_header:\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are present in the provided code snippet. I inspected the source for common, documented compiler extensions (and did not find them):\n- No use of GCC/Clang/MSC extensions such as __attribute__, __asm, __declspec, __builtin_*, typeof, __extension__, __volatile__, inline-asm, or other non\u2011standard keywords.\n- No use of implementation-specific linkage like extern \"C\" (C++), calling conventions (__stdcall, __cdecl), or platform-specific pragmas.\n- All identifiers and constructs used (function definition, pointers to structs, size_t, NULL, strlen, for-loop, return statements) are standard C.\n- The only macro-like token visible is _MHD_EXTERN and the called function MHD_str_equal_caseless_bin_n_. Their expansions or definitions are not in the snippet; since the rule requires reporting only when the code explicitly uses compiler extensions, and those expansions are not shown here, they cannot be flagged from this fragment alone.\n\nRecommendation: review the definitions of macros such as _MHD_EXTERN (and any other macros used but not defined here) to ensure they do not expand to compiler-specific extensions. If such expansions are present, provide those definitions so they can be evaluated."
}