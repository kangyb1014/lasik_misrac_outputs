{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_header:\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No unreachable code fragments were found in the supplied function. Reasoning by control flow:\n\n- Function entry and the check \"if (NULL == key) return NULL;\" are reachable whenever the function is called; the early return executes only when key is actually NULL.\n- The assignment \"key_size = strlen (key);\" is reachable whenever key is non-NULL (the preceding guard ensures safety).\n- The for-loop header \"for (pos = response->first_header; NULL != pos; pos = pos->next)\" is reachable; if response->first_header is NULL the loop body is simply skipped (this is not unreachable code, it is a reachable control-flow path). Note: dereferencing response->first_header when response is NULL would be undefined behavior, but that is not an instance of unreachable code.\n- The if-condition inside the loop uses short-circuit semantics: the second operand (the call to MHD_str_equal_caseless_bin_n_) is only evaluated when the first operand is true. That call is therefore reachable in cases where pos->header_size == key_size; it is not dead/unreachable code.\n- The return inside the loop (\"return pos->value;\") is reachable whenever a matching header is found. The final \"return NULL;\" after the loop is reachable whenever no matching header exists.\n\nThere are no unreachable statements (no code after unconditional return statements, no labels/goto constructs that are never branched to, no mutually-exclusive constant conditions making code impossible to execute). Therefore no code fragments need further investigation for MISRA C 2023 Rule 2.1 (unreachable code)."
}