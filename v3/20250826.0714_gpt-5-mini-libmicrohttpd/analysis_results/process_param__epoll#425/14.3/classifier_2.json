{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of process_param__epoll:\n```c\nstatic enum PerfRepl_param_result\nprocess_param__epoll (const char *param_name)\n{\n  if (tool_params.poll)\n  {\n    fprintf (stderr, \"Parameter '%s' cannot be used together \"\n             \"with '-p' or '--poll'.\\n\", param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  if (tool_params.select)\n  {\n    fprintf (stderr, \"Parameter '%s' cannot be used together \"\n             \"with '-s' or '--select'.\\n\", param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  tool_params.epoll = ! 0;\n  return '-' == param_name[1] ?\n         PERF_RPL_PARAM_FULL_STR :PERF_RPL_PARAM_ONE_CHAR;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntool_params.epoll = ! 0;\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment is an assignment that sets tool_params.epoll to the result of '! 0' (constant 1). Rule 14.3 concerns invariant controlling expressions (e.g. conditions of if/while/for/do). This line is not a controlling expression, so it does not violate MISRA C 2023 Rule 14.3."
}