{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes pos->header to memcmp while key is const char *. If the struct member pos->header is declared as a non-const char * (i.e. it is only read from here), Rule 8.13 is violated because the pointer should be const-qualified (e.g. const char *header). Change the declaration of pos->header to const char * (and similarly for pos->value) to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/2933.txt */\nstatic void write_hex(FILE *f, const void *ptr, size_t size, size_t max)\n{\n  const unsigned char *p = (const unsigned char *) ptr;\n  size_t i, n = (size < max) ? size : max;\n  for (i = 0; i < n; ++i)\n  {\n    fprintf(f, \"%02x\", p[i]);\n    if (i + 1 < n)\n      fputc(' ', f);\n  }\n  if (size > max)\n    fprintf(f, \" ... (%zu bytes total)\", size);\n}\n\nstatic void probe_log_compare(const char *label,\n                              const void *a_ptr, size_t a_size,\n                              const void *b_ptr, size_t b_size,\n                              size_t index,\n                              int kind)\n{\n  FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[probe] %s: index=%zu kind=%d\\n\", label, index, kind);\n  fprintf(f, \"  a_ptr=%p a_size=%zu\\n\", a_ptr, a_size);\n  fprintf(f, \"  b_ptr=%p b_size=%zu\\n\", b_ptr, b_size);\n  fprintf(f, \"  a (hex, up to 32 bytes): \");\n  if (a_ptr != NULL && a_size > 0)\n    write_hex(f, a_ptr, a_size, 32);\n  else\n    fprintf(f, \"<empty>\");\n  fprintf(f, \"\\n  b (hex, up to 32 bytes): \");\n  if (b_ptr != NULL && b_size > 0)\n    write_hex(f, b_ptr, b_size, 32);\n  else\n    fprintf(f, \"<empty>\");\n  fprintf(f, \"\\n\\n\");\n\n  fclose(f);\n}\n\n/* Original function with logging probes inserted just before comparisons. */\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n\n        /* Probe: log the key and the header about to be compared. This\n           captures pointer addresses, sizes and a short hex dump of the\n           contents so observers can see the parameters passed to memcmp. */\n        probe_log_compare(\"compare_key_header\",\n                          (const void *) key, key_size,\n                          (const void *) pos->header, pos->header_size,\n                          i, (int) kind);\n\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n\n        /* Probe: log the value and the stored header value about to be compared. */\n        probe_log_compare(\"compare_value\",\n                          (const void *) value, value_size,\n                          (const void *) pos->value, pos->value_size,\n                          i, (int) kind);\n\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n"
}