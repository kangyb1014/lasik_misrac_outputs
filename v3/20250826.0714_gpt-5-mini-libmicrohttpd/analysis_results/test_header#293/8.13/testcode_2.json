{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn test_header the local pointer 'pos' is used only to read fields from the headers list (pos->kind, pos->header_size, pos->value_size, pos->header, pos->value, pos->next) and never modifies the pointee. Therefore it could and should be declared as a pointer to const, e.g. 'const struct MHD_HTTP_Req_Header *pos;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe function: logs details about the current header node and comparison inputs.\n   Writes to /tmp/logs/2933.txt in append mode. */\nstatic void\nprobe_log_header(const struct MHD_Connection *connection,\n                 const struct MHD_HTTP_Req_Header *pos,\n                 size_t iter_index,\n                 const char *key,\n                 size_t key_size,\n                 const char *value,\n                 size_t value_size,\n                 enum MHD_ValueKind kind)\n{\n  FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[probe] connection=%p iter=%lu kind=%d key_size=%lu value_size=%lu pos=%p\\n\",\n          (const void *) connection,\n          (unsigned long) iter_index,\n          (int) kind,\n          (unsigned long) key_size,\n          (unsigned long) value_size,\n          (const void *) pos);\n\n  if (NULL == pos)\n  {\n    fprintf(f, \"[probe] pos is NULL\\n\\n\");\n    fclose(f);\n    return;\n  }\n\n  fprintf(f, \"[probe] pos->kind=%d pos->header_size=%lu pos->value_size=%lu pos->header=%p pos->value=%p pos->next=%p\\n\",\n          (int) pos->kind,\n          (unsigned long) pos->header_size,\n          (unsigned long) pos->value_size,\n          (const void *) pos->header,\n          (const void *) pos->value,\n          (const void *) pos->next);\n\n  /* Log a small hexdump of the header/name and value (up to 32 bytes) if present */\n  if (pos->header != NULL && pos->header_size > 0)\n  {\n    size_t j, lim = pos->header_size < 32u ? pos->header_size : 32u;\n    fprintf(f, \"[probe] header (len=%lu): \", (unsigned long) pos->header_size);\n    for (j = 0; j < lim; ++j)\n      fprintf(f, \"%02x\", (unsigned char) pos->header[j]);\n    if (pos->header_size > lim)\n      fprintf(f, \"...\");\n    fprintf(f, \"\\n\");\n  }\n  else\n  {\n    fprintf(f, \"[probe] header: <empty or NULL>\\n\");\n  }\n\n  if (pos->value != NULL && pos->value_size > 0)\n  {\n    size_t j, lim = pos->value_size < 32u ? pos->value_size : 32u;\n    fprintf(f, \"[probe] value  (len=%lu): \", (unsigned long) pos->value_size);\n    for (j = 0; j < lim; ++j)\n      fprintf(f, \"%02x\", (unsigned char) pos->value[j]);\n    if (pos->value_size > lim)\n      fprintf(f, \"...\");\n    fprintf(f, \"\\n\");\n  }\n  else\n  {\n    fprintf(f, \"[probe] value: <empty or NULL>\\n\");\n  }\n\n  /* Also log the expected key/value bytes passed into the callback for comparison */\n  if (key != NULL && key_size > 0)\n  {\n    size_t j, lim = key_size < 32u ? key_size : 32u;\n    fprintf(f, \"[probe] input key (len=%lu): \", (unsigned long) key_size);\n    for (j = 0; j < lim; ++j)\n      fprintf(f, \"%02x\", (unsigned char) key[j]);\n    if (key_size > lim)\n      fprintf(f, \"...\");\n    fprintf(f, \"\\n\");\n  }\n  else\n  {\n    fprintf(f, \"[probe] input key: <empty or NULL>\\n\");\n  }\n\n  if (value != NULL && value_size > 0)\n  {\n    size_t j, lim = value_size < 32u ? value_size : 32u;\n    fprintf(f, \"[probe] input value (len=%lu): \", (unsigned long) value_size);\n    for (j = 0; j < lim; ++j)\n      fprintf(f, \"%02x\", (unsigned char) value[j]);\n    if (value_size > lim)\n      fprintf(f, \"...\");\n    fprintf(f, \"\\n\");\n  }\n  else\n  {\n    fprintf(f, \"[probe] input value: <empty or NULL>\\n\");\n  }\n\n  fprintf(f, \"[probe] ---\\n\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  /* Log entry into the function and the parameters of interest */\n  {\n    FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[test_header] entry: cls=%p param=%p connection=%p key_size=%lu value_size=%lu kind=%d\\n\",\n              cls,\n              (void *) param,\n              (void *) connection,\n              (unsigned long) key_size,\n              (unsigned long) value_size,\n              (int) kind);\n      fclose(f);\n    }\n  }\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log the current iteration and pos details */\n    probe_log_header(connection, pos, i, key, key_size, value, value_size, kind);\n\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      /* Log the comparisons being made to help reproduce the violation scenario */\n      {\n        FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n        if (f != NULL)\n        {\n          fprintf(f, \"[test_header] comparing expected(header_size=%lu,value_size=%lu) with pos(header_size=%lu,value_size=%lu)\\n\",\n                  (unsigned long) key_size,\n                  (unsigned long) value_size,\n                  (unsigned long) pos->header_size,\n                  (unsigned long) pos->value_size);\n          fclose(f);\n        }\n      }\n\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n\n        /* Log that we are about to memcmp the key */\n        {\n          FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n          if (f != NULL)\n          {\n            fprintf(f, \"[test_header] memcmp key vs pos->header (len=%lu)\\n\", (unsigned long) key_size);\n            fclose(f);\n          }\n        }\n\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n\n        /* Log that we are about to memcmp the value */\n        {\n          FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n          if (f != NULL)\n          {\n            fprintf(f, \"[test_header] memcmp value vs pos->value (len=%lu)\\n\", (unsigned long) value_size);\n            fclose(f);\n          }\n        }\n\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n\n      /* Successful match: log and return */\n      {\n        FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n        if (f != NULL)\n        {\n          fprintf(f, \"[test_header] match found for iter=%lu\\n\\n\", (unsigned long) i);\n          fclose(f);\n        }\n      }\n      return MHD_YES;\n    }\n  }\n\n  /* No match found: log and return */\n  {\n    FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[test_header] no match found, returning MHD_NO\\n\\n\");\n      fclose(f);\n    }\n  }\n  return MHD_NO;\n}\n"
}