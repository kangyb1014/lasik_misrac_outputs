{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert can be disabled (i.e. it is a no-op in production) then when value_size != 0 and either value or pos->value is NULL (or either buffer is shorter than value_size) the call memcmp(value, pos->value, value_size) will dereference an invalid pointer / read past object bounds. Although the code checks value_size == pos->value_size, it relies only on assertions to validate the pointers; those checks are not guaranteed at runtime. This can result in out-of-bounds access and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2939.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: append messages to /tmp/logs/2939.txt */\nstatic void test_header_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2939.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  test_header_log(\"ENTER test_header: cls=%p, key=%p, key_size=%zu, value=%p, value_size=%zu, kind=%d, param=%p, connection=%p\",\n                  cls, (const void*)key, key_size, (const void*)value, value_size, (int)kind, (void*)param, (void*)connection);\n  if (NULL != connection) {\n    /* Log headers_received pointer if available */\n    test_header_log(\"connection->rq.headers_received=%p\", (void *) connection->rq.headers_received);\n  } else {\n    test_header_log(\"connection is NULL\");\n  }\n\n  param->num_headers++;\n  test_header_log(\"param->num_headers incremented -> %zu\", (size_t)param->num_headers);\n\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    test_header_log(\"iter pos=%p: pos->kind=%d, pos->header_size=%zu, pos->value_size=%zu, pos->header=%p, pos->value=%p\",\n                    (void*)pos, (int)pos->kind, (size_t)pos->header_size, (size_t)pos->value_size,\n                    (void*)pos->header, (void*)pos->value);\n\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      test_header_log(\"matched header index i=%zu (num_headers=%zu)\", i, (size_t)param->num_headers);\n\n      if (key_size != pos->header_size) {\n        test_header_log(\"header_size mismatch: key_size=%zu, pos->header_size=%zu -> returning MHD_NO\", key_size, (size_t)pos->header_size);\n        return MHD_NO;\n      }\n      if (value_size != pos->value_size) {\n        test_header_log(\"value_size mismatch: value_size=%zu, pos->value_size=%zu -> returning MHD_NO\", value_size, (size_t)pos->value_size);\n        return MHD_NO;\n      }\n      if (0 != key_size)\n      {\n        /* Preserve original assertions */\n        test_header_log(\"about to assert/check key pointers: key=%p, pos->header=%p, key_size=%zu\", (void*)key, (void*)pos->header, key_size);\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        /* Invoke memcmp once, log the result */\n        {\n          int cmp = memcmp (key,\n                            pos->header,\n                            key_size);\n          test_header_log(\"memcmp(key, pos->header, %zu) -> %d (key=%p, pos->header=%p)\", key_size, cmp, (void*)key, (void*)pos->header);\n          if (0 != cmp) {\n            test_header_log(\"key comparison failed -> returning MHD_NO\");\n            return MHD_NO;\n          }\n        }\n      }\n      if (0 != value_size)\n      {\n        /* Preserve original assertions */\n        test_header_log(\"about to assert/check value pointers: value=%p, pos->value=%p, value_size=%zu\", (void*)value, (void*)pos->value, value_size);\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        /* Invoke memcmp once, log the result */\n        {\n          int cmp = memcmp (value,\n                            pos->value,\n                            value_size);\n          test_header_log(\"memcmp(value, pos->value, %zu) -> %d (value=%p, pos->value=%p)\", value_size, cmp, (void*)value, (void*)pos->value);\n          if (0 != cmp) {\n            test_header_log(\"value comparison failed -> returning MHD_NO\");\n            return MHD_NO;\n          }\n        }\n      }\n      test_header_log(\"comparisons succeeded -> returning MHD_YES\");\n      return MHD_YES;\n    }\n  }\n  test_header_log(\"no matching header found -> returning MHD_NO\");\n  return MHD_NO;\n}\n"
}