{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nAlthough key_size is compared to pos->header_size and checked non\u2011zero before calling memcmp, the code only uses mhd_assert to check that key and pos->header are non\u2011NULL. If mhd_assert is a no\u2011op (e.g. removed in release builds) or the pointers can be NULL despite the size, memcmp(key, pos->header, key_size) with key_size > 0 may dereference NULL / access beyond the referenced objects. Thus the fragment can violate Rule 21.17 unless there is an external guarantee that the pointers are non\u2011NULL when key_size > 0.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2939.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe/logging helper: append human-readable trace lines to /tmp/logs/2939.txt */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2939.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  /* Log entry and pointers of interest (avoid dereferencing beyond original code) */\n  log_probe (\"ENTER test_header: cls=%p param=%p connection=%p key=%p key_size=%zu value=%p value_size=%zu kind=%d\",\n             cls, (void *) param, (void *) connection, (const void *) key, key_size, (const void *) value, value_size, (int) kind);\n\n  param->num_headers++;\n  i = 0;\n\n  log_probe (\"after increment: param->num_headers=%zu\", param->num_headers);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    log_probe (\"loop: pos=%p pos->kind=%d kind=%d i=%zu\", (void *) pos, (int) pos->kind, (int) kind, i);\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      log_probe (\"candidate header: pos=%p i=%zu key_size=%zu pos->header_size=%zu value_size=%zu pos->value_size=%zu\",\n                 (void *) pos, i, key_size, pos->header_size, value_size, pos->value_size);\n\n      if (key_size != pos->header_size)\n      {\n        log_probe (\"mismatch: key_size (%zu) != pos->header_size (%zu): returning MHD_NO\", key_size, pos->header_size);\n        return MHD_NO;\n      }\n\n      if (value_size != pos->value_size)\n      {\n        log_probe (\"mismatch: value_size (%zu) != pos->value_size (%zu): returning MHD_NO\", value_size, pos->value_size);\n        return MHD_NO;\n      }\n\n      if (0 != key_size)\n      {\n        /* Log pointer values and sizes before potential memcmp that may access them. */\n        log_probe (\"about to compare key: key=%p pos->header=%p key_size=%zu\", (const void *) key, (const void *) pos->header, key_size);\n\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n\n        /* Preserve original behavior: call memcmp and act on its result, but log the result where possible. */\n        int cmp_key = memcmp (key, pos->header, key_size);\n        log_probe (\"memcmp(key,pos->header,%zu) returned %d\", key_size, cmp_key);\n        if (0 != cmp_key)\n        {\n          log_probe (\"memcmp for key indicates inequality: returning MHD_NO\");\n          return MHD_NO;\n        }\n      }\n\n      if (0 != value_size)\n      {\n        /* Log pointer values and sizes before potential memcmp that may access them. */\n        log_probe (\"about to compare value: value=%p pos->value=%p value_size=%zu\", (const void *) value, (const void *) pos->value, value_size);\n\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n\n        int cmp_val = memcmp (value, pos->value, value_size);\n        log_probe (\"memcmp(value,pos->value,%zu) returned %d\", value_size, cmp_val);\n        if (0 != cmp_val)\n        {\n          log_probe (\"memcmp for value indicates inequality: returning MHD_NO\");\n          return MHD_NO;\n        }\n      }\n\n      log_probe (\"header matched: returning MHD_YES\");\n      return MHD_YES;\n    }\n  }\n\n  log_probe (\"no matching header found: returning MHD_NO\");\n  return MHD_NO;\n}\n"
}