{
  "user_message": "An agent A claimed that the following process_multipart_headers code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of process_multipart_headers.\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the function try_get_value is declared to take a non-const pointer for the header text (for example: int try_get_value(char *header, const char *key, char **out)), then this call passes a modifiable char * where a const-qualified pointer would be appropriate because the buffer is being examined, not modified. In that case Rule 8.13 is violated \u2014 the header parameter should be declared const char * (or buf should be const char *) so the pointer points to a const-qualified type whenever possible.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[probe] process_multipart_headers enter\n[probe] pp=0x55b99e457820 buf=0x55b99e4578c0 buffer_pos=221 buffer_size=1028 state=7 skip_rn=0\n[probe] computed newline=0 ioffptr=0x7fff403a27e8 (*ioffptr)=0 next_state=8\n[probe] after scan newline=45 buffer_pos=221 buffer_size=1028\n[probe] header_line: label=\"full\" ptr=0x55b99e4578c0\n[probe] header_line: content_sample=\"content-disposition: form-data; name=\"field1\"\" (len=45)\n[probe] try_get_value: label=\"name\" ptr=0x55b99e4578d5\n[probe] try_get_value: content_sample=\"form-data; name=\"field1\"\" (len=24)\n[probe] after try_get_value name: pp->content_name=0x55b99e457eb0\n[probe] try_get_value: label=\"filename\" ptr=0x55b99e4578d5\n[probe] try_get_value: content_sample=\"form-data; name=\"field1\"\" (len=24)\n[probe] after try_get_value filename: pp->content_filename=(nil)\n[probe] advancing ioffptr by 46 -> new value 46\n[probe] process_multipart_headers exit returning MHD_YES\n[probe] process_multipart_headers enter\n[probe] pp=0x55b99e457820 buf=0x55b99e4578c0 buffer_pos=174 buffer_size=1028 state=7 skip_rn=0\n[probe] computed newline=0 ioffptr=0x7fff403a27e8 (*ioffptr)=0 next_state=8\n[probe] after scan newline=0 buffer_pos=174 buffer_size=1028\n[probe] empty line: end of headers -> skip_rn=RN_Full state=8\n[probe] process_multipart_headers enter\n[probe] pp=0x55b99e457820 buf=0x55b99e4578c0 buffer_pos=152 buffer_size=1028 state=7 skip_rn=0\n[probe] computed newline=0 ioffptr=0x7fff403a27e8 (*ioffptr)=0 next_state=8\n[probe] after scan newline=65 buffer_pos=152 buffer_size=1028\n[probe] header_line: label=\"full\" ptr=0x55b99e4578c0\n[probe] header_line: content_sample=\"content-disposition: form-data; name=\"pics\"; filename=\"file1.txt\"\" (len=65)\n[probe] try_get_value: label=\"name\" ptr=0x55b99e4578d5\n[probe] try_get_value: content_sample=\"form-data; name=\"pics\"; filename=\"file1.txt\"\" (len=44)\n[probe] after try_get_value name: pp->content_name=0x55b99e457eb0\n[probe] try_get_value: label=\"filename\" ptr=0x55b99e4578d5\n[probe] try_get_value: content_sample=\"form-data; name=\"pics\"; filename=\"file1.txt\"\" (len=44)\n[probe] after try_get_value filename: pp->content_filename=0x55b99e457ed0\n[probe] advancing ioffptr by 66 -> new value 66\n[probe] process_multipart_headers exit returning MHD_YES\n[probe] process_multipart_headers enter\n[probe] pp=0x55b99e457820 buf=0x55b99e4578c0 buffer_pos=85 buffer_size=1028 state=7 skip_rn=0\n[probe] computed newline=0 ioffptr=0x7fff403a27e8 (*ioffptr)=0 next_state=8\n[probe] after scan newline=24 buffer_pos=85 buffer_size=1028\n[probe] header_line: label=\"full\" ptr=0x55b99e4578c0\n[probe] header_line: content_sample=\"Content-Type: text/plain\" (len=24)\n[probe] try_match_header: label=\"Content-type\" ptr=0x55b99e4578c0\n[probe] try_match_header: content_sample=\"Content-Type: text/plain\" (len=24)\n[probe] after try_match_header Content-type: pp->content_type=0x55b99e457ef0\n[probe] try_match_header: label=\"Content-Transfer-Encoding\" ptr=0x55b99e4578c0\n[probe] try_match_header: content_sample=\"Content-Type: text/plain\" (len=24)\n[probe] after try_match_header Content-Transfer-Encoding: pp->content_transfer_encoding=(nil)\n[probe] advancing ioffptr by 25 -> new value 25\n[probe] process_multipart_headers exit returning MHD_YES\n[probe] process_multipart_headers enter\n[probe] pp=0x55b99e457820 buf=0x55b99e4578c0 buffer_pos=59 buffer_size=1028 state=7 skip_rn=0\n[probe] computed newline=0 ioffptr=0x7fff403a27e8 (*ioffptr)=0 next_state=8\n[probe] after scan newline=33 buffer_pos=59 buffer_size=1028\n[probe] header_line: label=\"full\" ptr=0x55b99e4578c0\n[probe] header_line: content_sample=\"Content-Transfer-Encoding: binary\" (len=33)\n[probe] try_match_header: label=\"Content-type\" ptr=0x55b99e4578c0\n[probe] try_match_header: content_sample=\"Content-Transfer-Encoding: binary\" (len=33)\n[probe] after try_match_header Content-type: pp->content_type=0x55b99e457ef0\n[probe] try_match_header: label=\"Content-Transfer-Encoding\" ptr=0x55b99e4578c0\n[probe] try_match_header: content_sample=\"Content-Transfer-Encoding: binary\" (len=33)\n[probe] after try_match_header Content-Transfer-Encoding: pp->content_transfer_encoding=0\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent A report is not correct for process_multipart_headers itself. Rule 8.13 concerns pointer declarations: a pointer type should be const-qualified when the pointed-to object is not modified. In process_multipart_headers the buffer is intentionally modified (buf[newline] = '\\0'), so buf must be a modifiable char * and there is no MISRA 8.13 violation in this function. The only possible 8.13 issue would be in the declaration of try_get_value (not in the call site): if try_get_value is declared as int try_get_value(char *header, ...) but it does not modify header, then that declaration should be changed to const char *header to satisfy Rule 8.13. The violation (if any) would be located in try_get_value's prototype/definition, not in process_multipart_headers."
}