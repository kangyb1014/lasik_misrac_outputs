{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe buffer is explicitly NUL-terminated in the shown function (buf[newline] = '\\0'), so buf is a null-terminated string when try_match_header is called. If try_match_header performs the comparison by calling the Standard Library function memcmp to compare the header literal against buf (even with an explicit length such as MHD_STATICSTR_LEN_), that is using memcmp to compare a null-terminated string and thus violates MISRA C 2023 Rule 21.14. (If try_match_header instead uses a proper string comparison function such as strncmp/strncasecmp or a dedicated routine that does not use memcmp on NUL-terminated strings, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2348.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_multipart_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_multipart_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append human-readable logs about control flow and key state\n   to /tmp/logs/2348.txt. Keeps original logic unchanged; only observes. */\nstatic void probe_log_state(const char *stage, char *buf, size_t newline, struct MHD_PostProcessor *pp)\n{\n    FILE *f = fopen(\"/tmp/logs/2348.txt\", \"a\");\n    if (f == NULL)\n        return;\n\n    fprintf(f, \"stage=%s newline=%zu buffer_pos=%zu buffer_size=%zu skip_rn=%d state=%d\\n\",\n            stage,\n            newline,\n            pp->buffer_pos,\n            pp->buffer_size,\n            (int) pp->skip_rn,\n            (int) pp->state);\n\n    /* Print a safe prefix of the buffer (up to 200 chars or up to buffer_pos). */\n    fprintf(f, \"buf_prefix=\\\"\");\n    for (size_t i = 0U; i < 200U && i < pp->buffer_pos; ++i)\n    {\n        char c = buf[i];\n        if (c == '\\0')\n        {\n            fprintf(f, \"\\\\0\");\n            break;\n        }\n        /* print printable characters directly, escape others */\n        if ((unsigned char) c >= 0x20U && (unsigned char) c <= 0x7EU)\n            fputc(c, f);\n        else if (c == '\\r')\n            fputs(\"\\\\r\", f);\n        else if (c == '\\n')\n            fputs(\"\\\\n\", f);\n        else\n            fprintf(f, \"\\\\x%02X\", (unsigned char) c);\n    }\n    if (pp->buffer_pos > 200U)\n        fputs(\"...\", f);\n    fprintf(f, \"\\\"\\n\\n\");\n\n    fclose(f);\n}\n\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  probe_log_state(\"entry_before_loop\", buf, newline, pp);\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n\n  probe_log_state(\"after_find_newline\", buf, newline, pp);\n\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    probe_log_state(\"error_out_of_memory\", buf, newline, pp);\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n  {\n    probe_log_state(\"need_more_data\", buf, newline, pp);\n    return MHD_NO;              /* will need more data */\n  }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    probe_log_state(\"end_of_headers_empty_line\", buf, newline, pp);\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n  {\n    pp->skip_rn = RN_OptN;\n    probe_log_state(\"saw_cr_set_skip_rn_OptN\", buf, newline, pp);\n  }\n\n  /* NUL-terminate the header line for string-processing routines. */\n  buf[newline] = '\\0';\n  probe_log_state(\"nul_terminated_buf\", buf, newline, pp);\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    probe_log_state(\"branch_content_disposition\", buf, newline, pp);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    probe_log_state(\"after_try_get_value_name\", buf, newline, pp);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n    probe_log_state(\"after_try_get_value_filename\", buf, newline, pp);\n  }\n  else\n  {\n    probe_log_state(\"branch_other_headers_before_match_content_type\", buf, newline, pp);\n    probe_log_state(\"calling_try_match_header_Content-type\", buf, newline, pp);\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    probe_log_state(\"after_try_match_header_Content-type\", buf, newline, pp);\n\n    probe_log_state(\"calling_try_match_header_Content-Transfer-Encoding\", buf, newline, pp);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n    probe_log_state(\"after_try_match_header_Content-Transfer-Encoding\", buf, newline, pp);\n  }\n  (*ioffptr) += newline + 1;\n  probe_log_state(\"exit_success\", buf, newline, pp);\n  return MHD_YES;\n}\n"
}