{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a conventional assert-like macro that is a no-op in non-debug/production builds (i.e. it and the contained comparison are compiled out) and the condition (0 == c->rq.url_len) has no side-effects, then the statement is removable without affecting program behaviour. In that common configuration the assertion constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. (If, instead, mhd_assert performs observable actions such as logging or aborting on failure, then it would not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_request_target code that contains useful probe functions that print useful logs to a file \"/tmp/logs/582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_request_target as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_request_target:\n```c\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified process_request_target code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to log control flow and key state to /tmp/logs/582.txt */\nstatic void\nprobe_log_connection (const struct MHD_Connection *c, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf (f, \"[process_request_target] %s\\n\", stage ? stage : \"(null)\");\n  fprintf (f, \"  c=%p\\n\", (const void *) c);\n  if (c != NULL)\n  {\n    fprintf (f, \"  state=%d\\n\", (int) c->state);\n    fprintf (f, \"  rq.url=%p, rq.url_len=%zu\\n\",\n             (const void *) c->rq.url,\n             c->rq.url_len);\n    fprintf (f, \"  rq.hdrs.rq_line.rq_tgt=%p, rq_tgt_qmark=%p, req_target_len=%zu\\n\",\n             (const void *) c->rq.hdrs.rq_line.rq_tgt,\n             (const void *) c->rq.hdrs.rq_line.rq_tgt_qmark,\n             c->rq.req_target_len);\n    fprintf (f, \"  daemon=%p, uri_log_callback=%p, unescape_callback=%p\\n\",\n             (const void *) c->daemon,\n             (const void *) c->daemon->uri_log_callback,\n             (const void *) c->daemon->unescape_callback);\n  }\n\n  fclose (f);\n}\n\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n\n  /* Log initial state before assertions (so we capture values even when mhd_assert is a no-op) */\n  probe_log_connection (c, \"entry - before asserts\");\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    probe_log_connection (c, \"uri_log_callback present - before calling\");\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n    probe_log_connection (c, \"uri_log_callback returned\");\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n    {\n      char buf[128];\n      /* Log params_len and a small sample of characters after the '?', if available */\n      size_t sample_len = 0;\n      const char *p = c->rq.hdrs.rq_line.rq_tgt_qmark + 1;\n      while (sample_len + 1 < sizeof (buf) && p[sample_len] != '\\0')\n      {\n        buf[sample_len] = p[sample_len];\n        sample_len++;\n      }\n      buf[sample_len] = '\\0';\n      FILE *f = fopen (\"/tmp/logs/582.txt\", \"a\");\n      if (f)\n      {\n        fprintf (f, \"[process_request_target] qmark branch - params_len=%zu, sample_after_qmark=\\\"%s\\\"\\n\",\n                 params_len, buf);\n        fclose (f);\n      }\n    }\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n\n    probe_log_connection (c, \"before MHD_parse_arguments_\");\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      probe_log_connection (c, \"MHD_parse_arguments_ returned MHD_NO - will return false\");\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n    probe_log_connection (c, \"MHD_parse_arguments_ succeeded\");\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n#ifdef _DEBUG\n  {\n    /* Log the computed lengths used in the following assert for post-mortem */\n    FILE *f = fopen (\"/tmp/logs/582.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"[process_request_target] about to check strlen == req_target_len - params_len; req_target_len=%zu, params_len=%zu\\n\",\n               c->rq.req_target_len, params_len);\n      fclose (f);\n    }\n  }\n#endif /* _DEBUG */\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  probe_log_connection (c, \"exit - after unescape\");\n\n  return true;\n}\n"
}