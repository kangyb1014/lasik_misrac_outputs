{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code can overflow the size_t addition used in the bounds check, allowing memcpy to access beyond the buffer. Example: on a 32-bit size_t, let buf_size = 100, *ppos = SIZE_MAX - 15 (4294967280), append_size = 20. Then *ppos + append_size wraps to 9, so (buf_size < *ppos + append_size) is false and memcpy(buf + *ppos, append, append_size) will attempt to write 20 bytes starting at an out-of-bounds address. The subsequent '*ppos += append_size;' stores the wrapped (incorrect) position. Thus Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified buffer_append code that contains useful probe functions that print useful logs to a file \"/tmp/logs/229.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of buffer_append as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of buffer_append:\n```c\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n  if (buf_size < *ppos + append_size)\n    return false;\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified buffer_append code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  /* Preserve original assertion */\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n\n  /* Open log file for appending probe data. If opening fails, continue\n     without logging to avoid changing original behavior. */\n  FILE *log = fopen(\"/tmp/logs/229.txt\", \"a\");\n  if (log) {\n    /* Log input pointer values and sizes. Use %p for pointers and %zu for size_t. */\n    fprintf(log, \"buffer_append called: buf=%p, ppos=%p, *ppos=%zu, buf_size=%zu, append_size=%zu\\n\",\n            (void *)buf, (void *)ppos, (ppos ? *ppos : (size_t)0), buf_size, append_size);\n\n    /* Compute the sum as performed by the original code (may wrap) and also\n       compute a wide (unsigned long long) sum to detect if wrapping occurred. */\n    size_t wrapped_sum = (ppos ? *ppos : (size_t)0) + append_size;\n    unsigned long long wide_sum = (unsigned long long)(ppos ? *ppos : (size_t)0) + (unsigned long long)append_size;\n\n    fprintf(log, \"computed sums: wrapped_sum=%zu, wide_sum=%llu\\n\", wrapped_sum, wide_sum);\n    fprintf(log, \"bounds check: (buf_size < *ppos + append_size) -> (%zu < %zu)\\n\", buf_size, wrapped_sum);\n    fflush(log);\n  }\n\n  /* Preserve original logic exactly for the bounds check. */\n  if (buf_size < *ppos + append_size)\n  {\n    if (log) {\n      fprintf(log, \"result: bounds check FAILED, returning false\\n\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  /* Original copy and update operations. */\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n\n  if (log) {\n    fprintf(log, \"memcpy performed, new *ppos=%zu, return true\\n\\n\", *ppos);\n    fclose(log);\n  }\n\n  return true;\n}\n"
}