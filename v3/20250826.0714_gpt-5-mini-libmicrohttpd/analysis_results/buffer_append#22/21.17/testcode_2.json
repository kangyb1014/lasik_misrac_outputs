{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 the pre-check can be defeated by size_t overflow. For example, with size_t buf_size = 100; *ppos = SIZE_MAX - 5; append_size = 10; the expression *ppos + append_size overflows and wraps to a small value (e.g. 4). The test if (buf_size < *ppos + append_size) therefore evaluates to false and memcpy(buf + *ppos, append, append_size) is executed, copying 10 bytes to an address buf + (SIZE_MAX - 5) well beyond the allocated buffer. Thus the memcpy can access out-of-bounds memory and violates Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified buffer_append code that contains useful probe functions that print useful logs to a file \"/tmp/logs/229.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of buffer_append as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of buffer_append:\n```c\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n  if (buf_size < *ppos + append_size)\n    return false;\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified buffer_append code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stdint.h>\n\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  /* Preserve original assertion */\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n\n  /* Probe logging: record inputs and intermediary computations. */\n  FILE *log = fopen(\"/tmp/logs/229.txt\", \"a\");\n  if (log) {\n    size_t sum = *ppos + append_size; /* may overflow (wrap) in size_t */\n    int overflow = (sum < *ppos) ? 1 : 0; /* detect wrapping overflow */\n\n    fprintf(log, \"buffer_append called\\n\");\n    fprintf(log, \"  buf=%p, append=%p\\n\", (void *)buf, (void *)append);\n    fprintf(log, \"  buf_size=%zu, *ppos=%zu, append_size=%zu\\n\",\n            buf_size, *ppos, append_size);\n    fprintf(log, \"  computed sum = *ppos + append_size -> %zu (overflow=%d)\\n\",\n            sum, overflow);\n    if (buf_size < sum)\n      fprintf(log, \"  pre-check result: buf_size < sum evaluates to true (%zu < %zu) -> will return false\\n\",\n              buf_size, sum);\n    else\n      fprintf(log, \"  pre-check result: buf_size < sum evaluates to false (%zu < %zu) -> will proceed to memcpy\\n\",\n              buf_size, sum);\n    fclose(log);\n  }\n\n  /* Original logic must be preserved exactly as much as possible. */\n  if (buf_size < *ppos + append_size)\n    return false;\n\n  /* Log just before the memcpy to capture the destination address and sizes. */\n  log = fopen(\"/tmp/logs/229.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"  about to memcpy: dest=buf + *ppos -> %p, src=append=%p, append_size=%zu\\n\",\n            (void *)(buf + *ppos), (void *)append, append_size);\n    fclose(log);\n  }\n\n  memcpy (buf + *ppos, append, append_size);\n\n  *ppos += append_size;\n\n  /* Log final state after successful append. */\n  log = fopen(\"/tmp/logs/229.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"  memcpy done, new *ppos=%zu\\n\", *ppos);\n    fprintf(log, \"buffer_append returning true\\n\\n\");\n    fclose(log);\n  }\n\n  return true;\n}\n"
}