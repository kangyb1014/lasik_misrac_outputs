{
  "user_message": "An agent A claimed that the following buffer_append code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of buffer_append.\n```c\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n  if (buf_size < *ppos + append_size)\n    return false;\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the mhd_assert macro expands to a no\u2011op in the build (for example to ((void)0) or is compiled out), the statement is executed but has no effect and its removal would not change program behaviour \u2014 this makes it dead code and therefore violates MISRA C 2023 Rule 2.2. (If, however, mhd_assert expands to an expression with observable side effects such as logging/abort on failure, then removal would change behaviour and it would not be dead code.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct in the scenario described. MISRA C:2023 Rule 2.2 forbids operations that are executed but whose removal would not affect program behaviour (i.e. dead code). If mhd_assert expands to a no-op in the build (for example ((void)0) or is compiled out), the statement mhd_assert(NULL != buf); is an executed no\u2011op whose removal would not change runtime behaviour \u2014 it therefore meets the definition of dead code and would be a Rule 2.2 violation unless a documented justification (deviation) is provided. \n\nIf, however, mhd_assert expands to an expression with observable side effects (logging, abort, etc.), its removal would change behaviour and it would not be dead code. In practice, assertions used only to satisfy static analysers or that are compiled out in production need a suitable MISRA deviation or should be reworked so that no dead code remains in the delivered project build."
}