{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of buffer_append:\n```c\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n  if (buf_size < *ppos + append_size)\n    return false;\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n  return true;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (NULL != buf); /* Mute static analyzer */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The mhd_assert(NULL != buf); invocation as written does not itself introduce unreachable code. Typical assert macros are either no-ops in release builds or perform a runtime check that aborts/returns only when the condition is false; neither makes the subsequent memcpy and updates statically unreachable. A violation would occur if mhd_assert were (incorrectly) defined to unconditionally terminate control flow (for example #define mhd_assert(x) abort() or #define mhd_assert(x) return false), because then the code that follows (memcpy, *ppos += append_size, return true) would be unreachable and thus violate MISRA C 2023 Rule 2.1."
}