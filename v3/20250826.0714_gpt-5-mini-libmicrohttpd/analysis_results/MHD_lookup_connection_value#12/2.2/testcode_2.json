{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the callee MHD_lookup_connection_value_n unconditionally assigns to the out-parameter (i.e. always writes to *value on every execution path), the prior assignment value = NULL; is overwritten before any use. Removing that line would not change program behaviour, so the assignment is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_connection_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/122.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_connection_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value:\n```c\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n  return value;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_connection_value code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: logs control flow and state to /tmp/logs/122.txt */\nstatic void MHD_log_probe(const char *stage,\n                          struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  FILE *f = fopen(\"/tmp/logs/122.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* Attempt to create the directory and retry once. Ignore failures. */\n    (void) mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/122.txt\", \"a\");\n  }\n  if (NULL != f)\n  {\n    fprintf(f, \"Stage: %s\\n\", (stage != NULL) ? stage : \"(null)\");\n    fprintf(f, \" connection=%p, kind=%d, key_ptr=%p\\n\",\n            (void *) connection,\n            (int) kind,\n            (const void *) key);\n    if (NULL != key)\n    {\n      fprintf(f, \" key_len=%zu, key_str=\\\"%s\\\"\\n\", strlen(key), key);\n    }\n    else\n    {\n      fprintf(f, \" key_len=0, key_str=(null)\\n\");\n    }\n    fprintf(f, \" value_ptr=%p\", (const void *) value);\n    if (NULL != value)\n      fprintf(f, \", value_str=\\\"%s\\\"\\n\", value);\n    else\n      fprintf(f, \", value_str=(null)\\n\");\n    fprintf(f, \"----\\n\");\n    (void) fflush(f);\n    (void) fclose(f);\n  }\n}\n\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  /* Original logic preserved: initialize value to NULL. */\n  value = NULL;\n\n  /* Log state before calling the callee that may assign to *value. */\n  MHD_log_probe(\"before_call\", connection, kind, key, value);\n\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n\n  /* Log state after the call so agents can observe whether value was overwritten. */\n  MHD_log_probe(\"after_call\", connection, kind, key, value);\n\n  return value;\n}\n"
}