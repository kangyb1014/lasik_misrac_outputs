{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert expands to an actual runtime check (e.g. a function or code that is executed in production) then the assertion is provably always true at that point (digit is derived from val/divisor where divisor = 10^19 and uint64_t val \u2264 18446744073709551615), so the check has no effect on program behaviour. Because the operation is executed but its removal would not affect behaviour, this constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint64_to_str code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1702.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_uint64_to_str as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_uint64_to_str:\n```c\nsize_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val %= divisor;\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\nPlease provide the modified MHD_uint64_to_str code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/1702.txt */\nstatic void\nmhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1702.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* If logging cannot be opened, skip logging to avoid affecting behavior */\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nsize_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  /* Log entry with initial inputs */\n  mhd_probe_log(\"ENTER MHD_uint64_to_str: val=%\" PRIu64 \", buf_size=%zu\", val, buf_size);\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_probe_log(\"After initial division: divisor=%\" PRIu64 \", digit=%d\", divisor, digit);\n  mhd_probe_log(\"ASSERT CHECK BEFORE first mhd_assert: digit=%d, check=(digit < 10) -> %s\", digit, (digit < 10) ? \"true\" : \"false\");\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    mhd_probe_log(\"ENTER leading-zero loop: divisor=%\" PRIu64 \", digit=%d\", divisor, digit);\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_probe_log(\"After reducing divisor: divisor=%\" PRIu64 \", digit=%d\", divisor, digit);\n    mhd_probe_log(\"ASSERT CHECK IN leading-zero loop: digit=%d, check=(digit < 10) -> %s\", digit, (digit < 10) ? \"true\" : \"false\");\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    mhd_probe_log(\"ENTER printing loop: remaining buf_size=%zu, divisor=%\" PRIu64 \", digit=%d\", buf_size, divisor, digit);\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    mhd_probe_log(\"WROTE digit '%c', new buf_size=%zu\", (char) (digit + '0'), buf_size);\n    if (1 == divisor)\n    {\n      size_t len = (size_t) (chr - buf);\n      mhd_probe_log(\"RETURN (finished): length=%zu\", len);\n      return (size_t) (chr - buf);\n    }\n    val %= divisor;\n    mhd_probe_log(\"After val modulus: val=%\" PRIu64 \", divisor(before reduction)=%\" PRIu64, val, divisor);\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_probe_log(\"After reducing divisor for next digit: divisor=%\" PRIu64 \", digit=%d\", divisor, digit);\n    mhd_probe_log(\"ASSERT CHECK IN printing loop: digit=%d, check=(digit < 10) -> %s\", digit, (digit < 10) ? \"true\" : \"false\");\n    mhd_assert (digit < 10);\n  }\n  mhd_probe_log(\"RETURN (buffer too small): buf_size exhausted, written=%zu\", (size_t) (chr - buf));\n  return 0; /* The buffer is too small */\n}\n"
}