{
  "result": "success",
  "message": "ENTER MHD_uint64_to_str: val=1, buf_size=0\nAfter initial division: divisor=10000000000000000000, digit=0\nASSERT CHECK BEFORE first mhd_assert: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=10000000000000000000, digit=0\nAfter reducing divisor: divisor=1000000000000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=1000000000000000000, digit=0\nAfter reducing divisor: divisor=100000000000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=100000000000000000, digit=0\nAfter reducing divisor: divisor=10000000000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=10000000000000000, digit=0\nAfter reducing divisor: divisor=1000000000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=1000000000000000, digit=0\nAfter reducing divisor: divisor=100000000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=100000000000000, digit=0\nAfter reducing divisor: divisor=10000000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=10000000000000, digit=0\nAfter reducing divisor: divisor=1000000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=1000000000000, digit=0\nAfter reducing divisor: divisor=100000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=100000000000, digit=0\nAfter reducing divisor: divisor=10000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=10000000000, digit=0\nAfter reducing divisor: divisor=1000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=1000000000, digit=0\nAfter reducing divisor: divisor=100000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=100000000, digit=0\nAfter reducing divisor: divisor=10000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=10000000, digit=0\nAfter reducing divisor: divisor=1000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=1000000, digit=0\nAfter reducing divisor: divisor=100000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=100000, digit=0\nAfter reducing divisor: divisor=10000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=10000, digit=0\nAfter reducing divisor: divisor=1000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=1000, digit=0\nAfter reducing divisor: divisor=100, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=100, digit=0\nAfter reducing divisor: divisor=10, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=10, digit=0\nAfter reducing divisor: divisor=1, digit=1\nASSERT CHECK IN leading-zero loop: digit=1, check=(digit < 10) -> true\nRETURN (buffer too small): buf_size exhausted, written=0\nENTER MHD_uint64_to_str: val=1, buf_size=1\nAfter initial division: divisor=10000000000000000000, digit=0\nASSERT CHECK BEFORE first mhd_assert: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=10000000000000000000, digit=0\nAfter reducing divisor: divisor=1000000000000000000, digit=0\nASSERT CHECK IN leading-zero loop: digit=0, check=(digit < 10) -> true\nENTER leading-zero loop: divisor=1000000000000000000, digit=0\nAfter reducing divisor: divisor=100000000000000000, digit=0\nA"
}