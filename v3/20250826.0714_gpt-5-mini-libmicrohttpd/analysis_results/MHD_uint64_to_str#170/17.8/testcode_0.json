{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function decrements the value of the parameter 'buf_size' (buf_size--), i.e. modifies the function parameter object itself inside MHD_uint64_to_str. This is a direct violation of MISRA C 2023 Rule 17.8. Use a local copy (e.g. size_t remaining = buf_size;) and decrement that instead to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint64_to_str code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_uint64_to_str as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_uint64_to_str:\n```c\nsize_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val %= divisor;\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\nPlease provide the modified MHD_uint64_to_str code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <stdlib.h>\n\n/* Provide a simple implementation of mhd_assert so this file is\n   self-contained and compilable. Do not define a macro. */\nstatic void\nmhd_assert (int cond)\n{\n  if (!cond)\n  {\n    FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"mhd_assert FAILED\\n\");\n      fclose(f);\n    }\n    abort();\n  }\n}\n\n/* Probe helper: append a log line to /tmp/logs/1707.txt. */\nstatic void\nmhd_log_probe (const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n  }\n}\n\nsize_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  /* Log entry state */\n  {\n    FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"ENTRY: val=%\" PRIu64 \", buf=%p, buf_size=%zu, divisor=%\" PRIu64 \"\\n\",\n              val, (void *) buf, buf_size, divisor);\n      fclose(f);\n    }\n  }\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    /* Log skipping leading zero iteration */\n    {\n      FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"SKIP_LEADING_ZERO: divisor(before)=%\" PRIu64 \", digit(before)=%d\\n\",\n                divisor, digit);\n        fclose(f);\n      }\n    }\n\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n\n    {\n      FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"SKIP_LEADING_ZERO: divisor(after)=%\" PRIu64 \", digit(after)=%d\\n\",\n                divisor, digit);\n        fclose(f);\n      }\n    }\n  }\n\n  while (0 != buf_size)\n  {\n    /* Log state at top of loop */\n    {\n      FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"LOOP_TOP: chr=%p, buf_size(before)=%zu, divisor=%\" PRIu64 \", digit=%d, val=%\" PRIu64 \"\\n\",\n                (void *) chr, buf_size, divisor, digit, val);\n        fclose(f);\n      }\n    }\n\n    *chr = (char) ((char) digit + '0');\n    chr++;\n\n    /* Capture and log the modification of the function parameter buf_size. */\n    {\n      FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MODIFY_PARAM: buf_size(before_decrement)=%zu -> buf_size(after_decrement)=%zu (operation: buf_size--)\\n\",\n                buf_size, (size_t)(buf_size - 1));\n        fclose(f);\n      }\n    }\n\n    buf_size--;\n\n    if (1 == divisor)\n    {\n      /* Log successful return path */\n      size_t written = (size_t) (chr - buf);\n      FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"RETURN_SUCCESS: written=%zu, final_buf_size=%zu\\n\",\n                written, buf_size);\n        fclose(f);\n      }\n      return (size_t) (chr - buf);\n    }\n\n    val %= divisor;\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n\n    /* Log state at bottom of loop */\n    {\n      FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"LOOP_BOTTOM: chr=%p, buf_size=%zu, divisor=%\" PRIu64 \", digit=%d, val=%\" PRIu64 \"\\n\",\n                (void *) chr, buf_size, divisor, digit, val);\n        fclose(f);\n      }\n    }\n  }\n\n  /* The buffer is too small */\n  {\n    FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"RETURN_FAILURE: buffer too small, final_buf_size=%zu\\n\", buf_size);\n      fclose(f);\n    }\n  }\n  return 0; /* The buffer is too small */\n}\n"
}