{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable nodep is declared as void ** (pointer to a non-const pointer). The pointer returned by tfind is only used for read access (the code never modifies *nodep), so nodep should point to a const-qualified type (for example: void * const *nodep, or const void * const *nodep) to express that the pointed-to pointer/data are not modified. Declaring nodep as void ** therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_limit_del code that contains useful probe functions that print useful logs to a file \"/tmp/logs/863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_limit_del as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_limit_del:\n```c\nstatic void\nMHD_ip_limit_del (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount search_key;\n  struct MHD_IPCount *found_key;\n  void **nodep;\n\n  daemon = MHD_get_master (daemon);\n  /* Ignore if no connection limit assigned */\n  if (0 == daemon->per_ip_connection_limit)\n    return;\n  /* Initialize search key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    &search_key))\n    return;\n\n  MHD_ip_count_lock (daemon);\n\n  /* Search for the IP address */\n  if (NULL == (nodep = tfind (&search_key,\n                              &daemon->per_ip_connection_count,\n                              &MHD_ip_addr_compare)))\n  {\n    /* Something's wrong if we couldn't find an IP address\n     * that was previously added */\n    MHD_PANIC (_ (\"Failed to find previously-added IP address.\\n\"));\n  }\n  found_key = (struct MHD_IPCount *) *nodep;\n  /* Validate existing count for IP address */\n  if (0 == found_key->count)\n  {\n    MHD_PANIC (_ (\"Previously-added IP address had counter of zero.\\n\"));\n  }\n  /* Remove the node entirely if count reduces to 0 */\n  if (0 == --found_key->count)\n  {\n    tdelete (found_key,\n             &daemon->per_ip_connection_count,\n             &MHD_ip_addr_compare);\n    MHD_ip_count_unlock (daemon);\n    free (found_key);\n  }\n  else\n    MHD_ip_count_unlock (daemon);\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_limit_del code.\n",
  "test_code": "static void\nMHD_ip_limit_del (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount search_key;\n  struct MHD_IPCount *found_key;\n  void **nodep;\n  FILE *log = NULL;\n\n  /* Open probe log (append) so repeated runs accumulate evidence */\n  log = fopen(\"/tmp/logs/863.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf(log, \"ENTER MHD_ip_limit_del: daemon=%p, addr=%p, addrlen=%u\\n\",\n            (void *)daemon, (const void *)addr, (unsigned)addrlen);\n    if (daemon != NULL)\n      fprintf(log, \"daemon->per_ip_connection_limit=%d\\n\",\n              (int)daemon->per_ip_connection_limit);\n    fflush(log);\n  }\n\n  daemon = MHD_get_master (daemon);\n  if (NULL != log)\n  {\n    fprintf(log, \"After MHD_get_master: master daemon=%p\\n\", (void *)daemon);\n    fflush(log);\n  }\n\n  /* Ignore if no connection limit assigned */\n  if (0 == daemon->per_ip_connection_limit)\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"No per-ip limit (0) \u2014 returning early\\n\");\n      fclose(log);\n    }\n    return;\n  }\n  /* Initialize search key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    &search_key))\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"MHD_ip_addr_to_key returned MHD_NO \u2014 returning early\\n\");\n      fclose(log);\n    }\n    return;\n  }\n\n  MHD_ip_count_lock (daemon);\n  if (NULL != log)\n  {\n    fprintf(log, \"Acquired IP count lock\\n\");\n    fflush(log);\n  }\n\n  /* Search for the IP address */\n  if (NULL == (nodep = tfind (&search_key,\n                              &daemon->per_ip_connection_count,\n                              &MHD_ip_addr_compare)))\n  {\n    /* Something's wrong if we couldn't find an IP address\n     * that was previously added */\n    if (NULL != log)\n    {\n      fprintf(log, \"tfind returned NULL \u2014 failed to find previously-added IP address.\\n\");\n      fflush(log);\n      /* Ensure log is flushed before triggering panic which may exit */\n      fclose(log);\n    }\n    MHD_PANIC (_ (\"Failed to find previously-added IP address.\\n\"));\n  }\n\n  if (NULL != log)\n  {\n    /* Log the node pointer and the pointer stored in the tree node (without modifying it)\n       This demonstrates the scenario: nodep is of type void ** and is only used for read access. */\n    fprintf(log, \"tfind returned nodep=%p, *nodep=%p\\n\",\n            (void *)nodep, (void *)*nodep);\n    fflush(log);\n  }\n\n  found_key = (struct MHD_IPCount *) *nodep;\n\n  if (NULL != log)\n  {\n    fprintf(log, \"found_key=%p\\n\", (void *)found_key);\n    if (found_key != NULL)\n      fprintf(log, \"found_key->count(before)=%d\\n\", (int)found_key->count);\n    fflush(log);\n  }\n\n  /* Validate existing count for IP address */\n  if (0 == found_key->count)\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"Previously-added IP address had counter of zero. About to panic.\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    MHD_PANIC (_ (\"Previously-added IP address had counter of zero.\\n\"));\n  }\n  /* Remove the node entirely if count reduces to 0 */\n  if (0 == --found_key->count)\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"Decremented count; new count=0. Will call tdelete and free(found_key=%p)\\n\",\n              (void *)found_key);\n      fflush(log);\n    }\n    tdelete (found_key,\n             &daemon->per_ip_connection_count,\n             &MHD_ip_addr_compare);\n    MHD_ip_count_unlock (daemon);\n    free (found_key);\n    if (NULL != log)\n    {\n      fprintf(log, \"Node deleted and memory freed for %p.\\n\", (void *)found_key);\n      fclose(log);\n    }\n  }\n  else\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"Decremented count; new count=%d. Keeping node.\\n\", (int)found_key->count);\n      fflush(log);\n      fclose(log);\n    }\n    MHD_ip_count_unlock (daemon);\n  }\n}\n"
}