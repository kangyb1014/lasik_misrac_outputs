{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe response object is allocated by MHD_calloc_ (a calloc-style allocator that zero-initializes the memory). Because the memory is already zeroed, the executed statement response->total_size = 0; has no effect \u2014 removing it would not change program behaviour. Therefore this assignment is redundant (dead) code under MISRA C 2023 Rule 2.2. (If MHD_calloc_ did not zero memory\u2014i.e. it behaves like malloc\u2014then the assignment would be required and not a violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_for_upgrade code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1972.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_for_upgrade as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_for_upgrade:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_for_upgrade (MHD_UpgradeHandler upgrade_handler,\n                                 void *upgrade_handler_cls)\n{\n  struct MHD_Response *response;\n\n  if (NULL == upgrade_handler)\n    return NULL; /* invalid request */\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n    return NULL;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->upgrade_handler = upgrade_handler;\n  response->upgrade_handler_cls = upgrade_handler_cls;\n  response->total_size = 0;\n  response->reference_count = 1;\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONNECTION,\n                               \"Upgrade\"))\n  {\n    MHD_destroy_response (response);\n    return NULL;\n  }\n  return response;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_for_upgrade code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper probe function: append formatted logs to /tmp/logs/1972.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1972.txt\", \"a\");\n    if (NULL == f)\n        return; /* best-effort logging only */\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_for_upgrade (MHD_UpgradeHandler upgrade_handler,\n                                 void *upgrade_handler_cls)\n{\n  struct MHD_Response *response;\n\n  probe_log(\"ENTER MHD_create_response_for_upgrade: upgrade_handler=%p, upgrade_handler_cls=%p\",\n            (void *) upgrade_handler, upgrade_handler_cls);\n\n  if (NULL == upgrade_handler)\n  {\n    probe_log(\"EXIT MHD_create_response_for_upgrade: invalid upgrade_handler (NULL)\");\n    return NULL; /* invalid request */\n  }\n\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  probe_log(\"after MHD_calloc_: response=%p\", (void *) response);\n  if (NULL == response)\n  {\n    probe_log(\"EXIT MHD_create_response_for_upgrade: allocation failed\");\n    return NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    probe_log(\"MHD_mutex_init_ failed for response=%p, freeing response\", (void *) response);\n    free (response);\n    probe_log(\"EXIT MHD_create_response_for_upgrade: mutex init failed\");\n    return NULL;\n  }\n  probe_log(\"mutex init succeeded for response=%p\", (void *) response);\n#endif\n  response->upgrade_handler = upgrade_handler;\n  response->upgrade_handler_cls = upgrade_handler_cls;\n\n  /* Log the value of total_size before and after the assignment to demonstrate\n     whether the assignment changes state. If MHD_calloc_ zero-initializes the\n     memory, the before-value will already be 0 and the assignment is redundant. */\n  probe_log(\"response->total_size before assignment = %llu\",\n            (unsigned long long) response->total_size);\n  response->total_size = 0;\n  probe_log(\"response->total_size after assignment = %llu\",\n            (unsigned long long) response->total_size);\n\n  response->reference_count = 1;\n  probe_log(\"response->reference_count set to %u for response=%p\",\n            (unsigned int) response->reference_count, (void *) response);\n\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONNECTION,\n                               \"Upgrade\"))\n  {\n    probe_log(\"MHD_add_response_header failed for response=%p, destroying response\", (void *) response);\n    MHD_destroy_response (response);\n    probe_log(\"EXIT MHD_create_response_for_upgrade: header add failed\");\n    return NULL;\n  }\n\n  probe_log(\"EXIT MHD_create_response_for_upgrade: success response=%p\", (void *) response);\n  return response;\n}\n"
}