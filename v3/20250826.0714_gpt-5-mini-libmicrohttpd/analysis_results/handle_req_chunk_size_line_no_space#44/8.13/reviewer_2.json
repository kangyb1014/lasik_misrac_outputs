{
  "user_message": "An agent A claimed that the following handle_req_chunk_size_line_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_chunk_size_line_no_space.\n```c\nstatic void\nhandle_req_chunk_size_line_no_space (struct MHD_Connection *c,\n                                     const char *chunk_size_line,\n                                     size_t chunk_size_line_size)\n{\n  unsigned int err_code;\n\n  if (NULL != chunk_size_line)\n  {\n    const char *semicol;\n    /* Check for chunk extension */\n    semicol = memchr (chunk_size_line, ';', chunk_size_line_size);\n    if (NULL != semicol)\n    { /* Chunk extension present. It could be removed without any loss of the\n         details of the request. */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      ERR_MSG_REQUEST_CHUNK_LINE_EXT_TOO_BIG);\n    }\n  }\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_BODY_CHUNKED,\n                                           chunk_size_line,\n                                           chunk_size_line_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_CHUNK_LINE_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\ntransmit_error_response_static likely declares its message parameter as a non-const pointer (e.g. char *msg) while ERR_MSG_REQUEST_CHUNK_LINE_EXT_TOO_BIG is a string literal (const char[]). Passing a string literal (const char *) to a non-const char * parameter discards the const qualifier; the pointer parameter should be declared as const char * to satisfy MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is speculative and cannot be confirmed from the supplied code. MISRA C:2023 Rule 8.13 requires pointer objects to be declared to point to const-qualified types when they are not used to modify the pointed-to value. The call sites in handle_req_chunk_size_line_no_space pass string-literal error messages to transmit_error_response_static, but the rule applies to how transmit_error_response_static (and other functions) declare their pointer parameters, not to these call sites alone. If transmit_error_response_static is declared to take a non-const char * for a message that is only read, then that function declaration would violate MISRA 8.13 and should be changed to const char *. However, the code shown does not include the declaration of transmit_error_response_static, so the reported violation cannot be proven from the provided snippet. Note also that C string literals have type char[N] (historically not const), so passing them to either const char * or char * is allowed by the language; the MISRA concern is whether the callee\u2019s parameter should be const. Recommendation: inspect the prototype/definition of transmit_error_response_static and, if it only reads the message, change its parameter to const char * to satisfy MISRA 8.13."
}