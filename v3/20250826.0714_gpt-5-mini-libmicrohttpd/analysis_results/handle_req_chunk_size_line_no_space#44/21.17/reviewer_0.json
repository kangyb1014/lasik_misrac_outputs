{
  "user_message": "An agent A claimed that the following handle_req_chunk_size_line_no_space code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_chunk_size_line_no_space.\n```c\nstatic void\nhandle_req_chunk_size_line_no_space (struct MHD_Connection *c,\n                                     const char *chunk_size_line,\n                                     size_t chunk_size_line_size)\n{\n  unsigned int err_code;\n\n  if (NULL != chunk_size_line)\n  {\n    const char *semicol;\n    /* Check for chunk extension */\n    semicol = memchr (chunk_size_line, ';', chunk_size_line_size);\n    if (NULL != semicol)\n    { /* Chunk extension present. It could be removed without any loss of the\n         details of the request. */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      ERR_MSG_REQUEST_CHUNK_LINE_EXT_TOO_BIG);\n    }\n  }\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_BODY_CHUNKED,\n                                           chunk_size_line,\n                                           chunk_size_line_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_CHUNK_LINE_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes \u2014 memchr is called with chunk_size_line and chunk_size_line_size but the function only checks chunk_size_line != NULL; it does not ensure that the object referenced by chunk_size_line contains at least chunk_size_line_size bytes. If the caller passes a buffer shorter than chunk_size_line_size (for example chunk_size_line points to a NUL-terminated string of length L but chunk_size_line_size > actual allocated buffer length or > L+1), memchr will read beyond the object\u2019s bounds, violating MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. Rule 21.17 forbids uses of string.h functions that might access beyond the bounds of the object referred to by the pointer parameter. memchr(ptr, ch, n) will read up to n bytes starting at ptr; the code only checks ptr != NULL and does not ensure that the object that ptr refers to actually contains at least chunk_size_line_size bytes. Absent an external, provable contract (or an explicit runtime check) that chunk_size_line_size is no larger than the object referred to by chunk_size_line, this use can result in an out\u2011of\u2011bounds read and therefore violates MISRA C 2023 Rule 21.17. (The same concern applies to the subsequent calls that pass the same pointer/size.)"
}