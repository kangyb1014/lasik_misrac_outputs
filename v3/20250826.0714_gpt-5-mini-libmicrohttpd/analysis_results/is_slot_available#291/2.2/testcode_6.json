{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion compares two macro-defined constants (NONCE_STD_LEN(MAX_DIGEST) and MAX_DIGEST_NONCE_LENGTH). Because both sides are compile-time constants the condition is always true and the runtime assertion has no effect \u2014 removing it would not change program behaviour. Therefore this executed check is dead code. (Replace with a compile-time check such as _Static_assert or remove it.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_slot_available code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2912.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_slot_available as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_slot_available:\n```c\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n    return true; /* The slot is empty */\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n    return true; /* Wrong nonce format in the slot */\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n    return true;\n\n  return false;\n}\n```\n</target_code>\nPlease provide the modified is_slot_available code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe helper: append a single log entry to the requested logfile. */\nstatic void\nprobe_log_append (const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/2912.txt\", \"a\");\n  if (f)\n  {\n    fprintf (f, \"%s\\n\", msg);\n    fclose (f);\n  }\n}\n\n/* Probe helper: log a formatted state snapshot. Keep it simple to avoid\n * introducing side-effects. */\nstatic void\nprobe_log_state (const char *event,\n                 const void *nn_ptr,\n                 int first_nonce_byte,\n                 unsigned long nc_value,\n                 size_t new_nonce_len,\n                 size_t nonce_std_len_val,\n                 size_t max_digest_nonce_len_val,\n                 int last_nonce_byte,\n                 int timestamp_valid,\n                 uint64_t timestamp,\n                 uint64_t now)\n{\n  FILE *f = fopen(\"/tmp/logs/2912.txt\", \"a\");\n  if (! f)\n    return;\n\n  fprintf (f, \"EVENT: %s\\n\", event);\n  fprintf (f, \"  nn pointer: %p\\n\", nn_ptr);\n  fprintf (f, \"  nn->nonce[0]: %d\\n\", first_nonce_byte);\n  fprintf (f, \"  nn->nc: %lu\\n\", (unsigned long) nc_value);\n  fprintf (f, \"  new_nonce_len: %zu\\n\", new_nonce_len);\n  fprintf (f, \"  NONCE_STD_LEN(MAX_DIGEST): %zu\\n\", nonce_std_len_val);\n  fprintf (f, \"  MAX_DIGEST_NONCE_LENGTH: %zu\\n\", max_digest_nonce_len_val);\n  fprintf (f, \"  nn->nonce[last]: %d\\n\", last_nonce_byte);\n  fprintf (f, \"  timestamp_valid: %d\\n\", timestamp_valid);\n  fprintf (f, \"  timestamp: %"
}