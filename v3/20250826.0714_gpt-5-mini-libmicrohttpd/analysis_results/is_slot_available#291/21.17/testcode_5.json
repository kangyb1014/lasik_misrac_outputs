{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call memcmp(nn->nonce, new_nonce, new_nonce_len) can read new_nonce_len bytes from both nn->nonce and new_nonce. Although the code contains asserts that limit new_nonce_len relative to compile-time constants and checks nn->nonce's last byte, there is no guaranteed (checked) property in this function that the object pointed to by new_nonce is at least new_nonce_len bytes long. If the caller passes a new_nonce that references a shorter buffer (or the assertion is disabled/compiled out), memcmp will access beyond the bounds of new_nonce (and, if sizes differ unexpectedly, could also overrun nn->nonce). Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_slot_available code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2919.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_slot_available as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_slot_available:\n```c\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n    return true; /* The slot is empty */\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n    return true; /* Wrong nonce format in the slot */\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n    return true;\n\n  return false;\n}\n```\n</target_code>\nPlease provide the modified is_slot_available code.\n",
  "test_code": "static bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n\n  /* Probe: log entry parameters and some slot state to /tmp/logs/2919.txt. */\n  {\n    FILE *fp = fopen(\"/tmp/logs/2919.txt\", \"a\");\n    if (fp)\n    {\n      size_t slot_nonce_size = sizeof (nn->nonce);\n      /* Log pointer values, sizes and key bytes we can access safely.\n       * NOTE: We intentionally avoid reading from new_nonce buffer contents\n       * to not introduce any new out-of-bounds accesses. */\n      fprintf (fp, \"is_slot_available: entry nn=%p now=%llu new_nonce=%p new_nonce_len=%zu slot_nonce_size=%zu\\n\",\n               (void *) nn,\n               (unsigned long long) now,\n               (void *) new_nonce,\n               new_nonce_len,\n               slot_nonce_size);\n      /* Log first byte of slot nonce (safe) and nc field. */\n      fprintf (fp, \"  nn->nonce[0]=%u nn->nc=%u\\n\",\n               (unsigned int) (unsigned char) nn->nonce[0],\n               (unsigned int) nn->nc);\n      fflush (fp);\n      fclose (fp);\n    }\n  }\n\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n  {\n    FILE *fp = fopen(\"/tmp/logs/2919.txt\", \"a\");\n    if (fp)\n    {\n      fprintf (fp, \"  early return: slot empty (nn->nonce[0] == 0)\\n\");\n      fflush (fp);\n      fclose (fp);\n    }\n    return true; /* The slot is empty */\n  }\n\n  /* Before calling memcmp, log the fact that we are about to compare. */\n  {\n    FILE *fp = fopen(\"/tmp/logs/2919.txt\", \"a\");\n    if (fp)\n    {\n      fprintf (fp, \"  about to call memcmp(nn->nonce, new_nonce, new_nonce_len=%zu)\\n\",\n               new_nonce_len);\n      fflush (fp);\n      fclose (fp);\n    }\n  }\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* Log that memcmp returned equal */\n    FILE *fp = fopen(\"/tmp/logs/2919.txt\", \"a\");\n    if (fp)\n    {\n      fprintf (fp, \"  memcmp -> equal; returning false (same nonce already)\\n\");\n      fflush (fp);\n      fclose (fp);\n    }\n\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n  {\n    FILE *fp = fopen(\"/tmp/logs/2919.txt\", \"a\");\n    if (fp)\n    {\n      fprintf (fp, \"  nn->nc != 0 -> returning true (client already used nonce)\\n\");\n      fflush (fp);\n      fclose (fp);\n    }\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n  }\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n  {\n    FILE *fp = fopen(\"/tmp/logs/2919.txt\", \"a\");\n    if (fp)\n    {\n      fprintf (fp, \"  nn->nonce last byte != 0 -> returning true (wrong format)\\n\");\n      fflush (fp);\n      fclose (fp);\n    }\n    return true; /* Wrong nonce format in the slot */\n  }\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n  {\n    FILE *fp = fopen(\"/tmp/logs/2919.txt\", \"a\");\n    if (fp)\n    {\n      fprintf (fp, \"  get_nonce_timestamp failed -> returning true (invalid timestamp)\\n\");\n      fflush (fp);\n      fclose (fp);\n    }\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n  }\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n  {\n    FILE *fp = fopen(\"/tmp/logs/2919.txt\", \"a\");\n    if (fp)\n    {\n      fprintf (fp, \"  reuse timeout exceeded -> returning true\\n\");\n      fflush (fp);\n      fclose (fp);\n    }\n\n    return true;\n  }\n\n  FILE *fp = fopen(\"/tmp/logs/2919.txt\", \"a\");\n  if (fp)\n  {\n    fprintf (fp, \"  final: returning false (slot not available)\\n\");\n    fflush (fp);\n    fclose (fp);\n  }\n\n  return false;\n}\n"
}