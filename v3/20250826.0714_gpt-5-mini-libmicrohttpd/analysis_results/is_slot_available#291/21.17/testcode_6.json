{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcmp(nn->nonce, new_nonce, new_nonce_len) can read new_nonce_len bytes from both nn->nonce and new_nonce without a guaranteed runtime check that new_nonce_len <= sizeof(nn->nonce) and that new_nonce points to at least new_nonce_len bytes. The function only uses mhd_assert to bound new_nonce_len, but assertions may be compiled out and do not prevent a real out\u2011of\u2011bounds access at runtime. Example violating scenario: caller supplies new_nonce_len greater than the actual size of nn->nonce (or greater than the allocated length of new_nonce) \u2014 memcmp then reads past the buffer(s), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_slot_available code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2919.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_slot_available as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_slot_available:\n```c\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n    return true; /* The slot is empty */\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n    return true; /* Wrong nonce format in the slot */\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n    return true;\n\n  return false;\n}\n```\n</target_code>\nPlease provide the modified is_slot_available code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe/logging helper. Keeps reads within safe bounds when dumping buffers. */\nstatic void\nlog_is_slot_probe(const struct MHD_NonceNc *const nn,\n                  const uint64_t now,\n                  const char *const new_nonce,\n                  size_t new_nonce_len,\n                  const char *phase,\n                  int memcmp_result)\n{\n  FILE *f = fopen(\"/tmp/logs/2919.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"--- is_slot_available probe (%s) ---\\n\", phase ? phase : \"?\");\n  fprintf(f, \"now=%llu new_nonce_len=%zu memcmp_result=%d\\n\",\n          (unsigned long long) now, new_nonce_len, memcmp_result);\n\n  if (nn == NULL) {\n    fprintf(f, \"nn == NULL\\n\\n\");\n    fclose(f);\n    return;\n  }\n\n  /* Log some basic slot state */\n  fprintf(f, \"nn->nc=%u nn->nonce[0]=%u\\n\",\n          (unsigned) nn->nc, (unsigned) (unsigned char) nn->nonce[0]);\n\n  /* Size of the nonce array inside the structure. This mirrors the checks\n     in the original code which uses sizeof(nn->nonce). */\n  size_t slot_size = sizeof(nn->nonce);\n  fprintf(f, \"slot_size=sizeof(nn->nonce)=%zu\\n\", slot_size);\n\n  /* To avoid reading beyond either buffer when printing their contents,\n     only print up to the smaller of the two lengths. */\n  size_t min_len = new_nonce_len < slot_size ? new_nonce_len : slot_size;\n  if (min_len > 0) {\n    fprintf(f, \"bytes (hex) up to min_len=%zu:\\n\", min_len);\n    fprintf(f, \"  nn->nonce: \");\n    for (size_t i = 0; i < min_len; ++i)\n      fprintf(f, \"%02x\", (unsigned) (unsigned char) nn->nonce[i]);\n    fprintf(f, \"\\n\");\n\n    fprintf(f, \"  new_nonce: \");\n    for (size_t i = 0; i < min_len; ++i)\n      fprintf(f, \"%02x\", (unsigned) (unsigned char) new_nonce[i]);\n    fprintf(f, \"\\n\");\n  } else {\n    fprintf(f, \"no bytes to display (min_len=0)\\n\");\n  }\n\n  /* Log last byte of slot (the code asserts it must be zero). */\n  fprintf(f, \"nn->nonce[slot_size-1]=%u\\n\", (unsigned) (unsigned char) nn->nonce[slot_size - 1]);\n\n  fprintf(f, \"-----------------------------------\\n\\n\");\n  fclose(f);\n}\n\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n\n  /* Log entry state */\n  log_is_slot_probe(nn, now, new_nonce, new_nonce_len, \"entry\", 0);\n\n  if (0 == nn->nonce[0])\n  {\n    log_is_slot_probe(nn, now, new_nonce, new_nonce_len, \"slot empty -> return true\", 0);\n    return true; /* The slot is empty */\n  }\n\n  /* Capture memcmp result once so we can log it without changing control flow. */\n  int cmp = memcmp (nn->nonce, new_nonce, new_nonce_len);\n  log_is_slot_probe(nn, now, new_nonce, new_nonce_len, \"after memcmp\", cmp);\n  if (0 == cmp)\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    log_is_slot_probe(nn, now, new_nonce, new_nonce_len, \"same nonce -> return false\", cmp);\n    return false;\n  }\n\n  if (0 != nn->nc)\n  {\n    log_is_slot_probe(nn, now, new_nonce, new_nonce_len, \"nc != 0 -> return true\", cmp);\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n  }\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n  {\n    log_is_slot_probe(nn, now, new_nonce, new_nonce_len, \"bad format -> return true\", cmp);\n    return true; /* Wrong nonce format in the slot */\n  }\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n  {\n    log_is_slot_probe(nn, now, new_nonce, new_nonce_len, \"timestamp invalid -> return true\", cmp);\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n  }\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n  {\n    log_is_slot_probe(nn, now, new_nonce, new_nonce_len, \"timeout -> return true\", cmp);\n    return true;\n  }\n\n  log_is_slot_probe(nn, now, new_nonce, new_nonce_len, \"return false\", cmp);\n  return false;\n}\n"
}