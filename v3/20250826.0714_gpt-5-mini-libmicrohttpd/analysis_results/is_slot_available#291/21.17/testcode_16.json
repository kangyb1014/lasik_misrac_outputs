{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code asserts new_nonce_len <= NONCE_STD_LEN(MAX_DIGEST) but memcmp(nn->nonce, new_nonce, new_nonce_len) is called before any check that nn->nonce (or new_nonce) actually contains at least new_nonce_len bytes. The assertion only constrains new_nonce_len relative to NONCE_STD_LEN(MAX_DIGEST) (and can be compiled out), not relative to sizeof(nn->nonce) or the actual buffer length of new_nonce. Example violation: if NONCE_STD_LEN(MAX_DIGEST) == 32 and sizeof(nn->nonce) == 16, a new_nonce_len of 24 satisfies the assertion but causes memcmp to read beyond nn->nonce bounds (reads bytes 16..23), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_slot_available code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2919.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_slot_available as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_slot_available:\n```c\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n    return true; /* The slot is empty */\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n    return true; /* Wrong nonce format in the slot */\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n    return true;\n\n  return false;\n}\n```\n</target_code>\nPlease provide the modified is_slot_available code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n#include <inttypes.h>\n\n/* Probe logging helper. Keeps logging non-invasive: does not read beyond\n * sizeof(nn->nonce) and avoids reading new_nonce contents (only logs its\n * pointer and requested length). Appends to /tmp/logs/2919.txt. */\nstatic void\nlog_nonce_probe (const char *event,\n                 const void *nn_ptr,\n                 const void *new_nonce_ptr,\n                 size_t new_nonce_len,\n                 size_t nonce_array_size,\n                 unsigned int first_byte,\n                 unsigned int last_byte,\n                 unsigned int nc_val,\n                 uint64_t now)\n{\n  FILE *f = fopen(\"/tmp/logs/2919.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf (f,\n           \"[%s] nn=%p new_nonce=%p new_nonce_len=%zu nonce_array_size=%zu \"\n           \"nn->nonce[0]=%u nn->nonce[last]=%u nn->nc=%u now=%\" PRIu64 \"\\n\",\n           event, nn_ptr, new_nonce_ptr, new_nonce_len, nonce_array_size,\n           first_byte, last_byte, nc_val, now);\n  fflush (f);\n  fclose (f);\n}\n\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n\n  /* Log function entry with pointers and sizes we can safely obtain here. */\n  log_nonce_probe (\"entry\",\n                   (const void *) nn,\n                   (const void *) new_nonce,\n                   new_nonce_len,\n                   sizeof (nn->nonce),\n                   (unsigned int) (unsigned char) nn->nonce[0],\n                   (unsigned int) (unsigned char) nn->nonce[sizeof (nn->nonce) - 1],\n                   (unsigned int) nn->nc,\n                   now);\n\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n  {\n    log_nonce_probe (\"empty_slot_return_true\",\n                     (const void *) nn,\n                     (const void *) new_nonce,\n                     new_nonce_len,\n                     sizeof (nn->nonce),\n                     (unsigned int) (unsigned char) nn->nonce[0],\n                     (unsigned int) (unsigned char) nn->nonce[sizeof (nn->nonce) - 1],\n                     (unsigned int) nn->nc,\n                     now);\n    return true; /* The slot is empty */\n  }\n\n  /* Log just before memcmp so reproducer can see pointers and lengths used. */\n  log_nonce_probe (\"before_memcmp\",\n                   (const void *) nn,\n                   (const void *) new_nonce,\n                   new_nonce_len,\n                   sizeof (nn->nonce),\n                   (unsigned int) (unsigned char) nn->nonce[0],\n                   (unsigned int) (unsigned char) nn->nonce[sizeof (nn->nonce) - 1],\n                   (unsigned int) nn->nc,\n                   now);\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* Log the fact that memcmp matched and the function will return false. */\n    log_nonce_probe (\"memcmp_equal_return_false\",\n                     (const void *) nn,\n                     (const void *) new_nonce,\n                     new_nonce_len,\n                     sizeof (nn->nonce),\n                     (unsigned int) (unsigned char) nn->nonce[0],\n                     (unsigned int) (unsigned char) nn->nonce[sizeof (nn->nonce) - 1],\n                     (unsigned int) nn->nc,\n                     now);\n\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n  {\n    log_nonce_probe (\"nc_nonzero_return_true\",\n                     (const void *) nn,\n                     (const void *) new_nonce,\n                     new_nonce_len,\n                     sizeof (nn->nonce),\n                     (unsigned int) (unsigned char) nn->nonce[0],\n                     (unsigned int) (unsigned char) nn->nonce[sizeof (nn->nonce) - 1],\n                     (unsigned int) nn->nc,\n                     now);\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n  }\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof (nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof (nn->nonce) - 1])\n  {\n    log_nonce_probe (\"bad_format_return_true\",\n                     (const void *) nn,\n                     (const void *) new_nonce,\n                     new_nonce_len,\n                     sizeof (nn->nonce),\n                     (unsigned int) (unsigned char) nn->nonce[0],\n                     (unsigned int) (unsigned char) nn->nonce[sizeof (nn->nonce) - 1],\n                     (unsigned int) nn->nc,\n                     now);\n    return true; /* Wrong nonce format in the slot */\n  }\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n  {\n    log_nonce_probe (\"invalid_timestamp_return_true\",\n                     (const void *) nn,\n                     (const void *) new_nonce,\n                     new_nonce_len,\n                     sizeof (nn->nonce),\n                     (unsigned int) (unsigned char) nn->nonce[0],\n                     (unsigned int) (unsigned char) nn->nonce[sizeof (nn->nonce) - 1],\n                     (unsigned int) nn->nc,\n                     now);\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n  }\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n  {\n    log_nonce_probe (\"timeout_return_true\",\n                     (const void *) nn,\n                     (const void *) new_nonce,\n                     new_nonce_len,\n                     sizeof (nn->nonce),\n                     (unsigned int) (unsigned char) nn->nonce[0],\n                     (unsigned int) (unsigned char) nn->nonce[sizeof (nn->nonce) - 1],\n                     (unsigned int) nn->nc,\n                     now);\n    return true;\n  }\n\n  log_nonce_probe (\"final_return_false\",\n                   (const void *) nn,\n                   (const void *) new_nonce,\n                   new_nonce_len,\n                   sizeof (nn->nonce),\n                   (unsigned int) (unsigned char) nn->nonce[0],\n                   (unsigned int) (unsigned char) nn->nonce[sizeof (nn->nonce) - 1],\n                   (unsigned int) nn->nc,\n                   now);\n\n  return false;\n}\n"
}