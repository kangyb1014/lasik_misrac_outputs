{
  "user_message": "An agent A claimed that the following is_slot_available code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of is_slot_available.\n```c\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n    return true; /* The slot is empty */\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n    return true; /* Wrong nonce format in the slot */\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n    return true;\n\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call memcmp(nn->nonce, new_nonce, new_nonce_len) can read past the bounds of nn->nonce or new_nonce if new_nonce_len is greater than the actual size of either object. The function only uses mhd_assert to constrain new_nonce_len (and to relate NONCE_STD_LEN to the buffer size), but mhd_assert may be a no-op in production builds. If a caller supplies new_nonce_len > sizeof(nn->nonce) (or greater than the allocated size of new_nonce), memcmp will access out-of-bounds memory \u2014 violating MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. memcmp(nn->nonce, new_nonce, new_nonce_len) will read new_nonce_len bytes from both nn->nonce and new_nonce. The code only uses mhd_assert to constrain new_nonce_len (and the relation of NONCE_STD_LEN to some maximum) \u2014 mhd_assert can be a no-op in production, so there is no real runtime protection that new_nonce_len is <= sizeof(nn->nonce) or that new_nonce actually has new_nonce_len bytes. Thus memcmp can access beyond the bounds of either object, violating MISRA C 2023 Rule 21.17. To conform, the code must enforce the size constraints at runtime (e.g. an explicit check on new_nonce_len against sizeof nn->nonce and/or the actual buffer length) rather than relying solely on assertions."
}