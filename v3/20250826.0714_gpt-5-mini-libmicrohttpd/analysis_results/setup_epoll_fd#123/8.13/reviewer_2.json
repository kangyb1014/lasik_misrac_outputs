{
  "user_message": "An agent A claimed that the following setup_epoll_fd code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of setup_epoll_fd.\n```c\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n  return fd;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes read-only strings but the called functions return or accept non-const char * pointers. For example, if MHD_socket_last_strerr_ is declared to return 'char *' (or the _() / MHD_DLOG prototypes take 'char *' for format/message), then a pointer to a read-only/static error string is not const-qualified and Rule 8.13 is violated. The correct form would be to declare those interfaces to use 'const char *' for messages/strings that are not modified.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=4, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=4, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=4, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=4, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=7, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=7, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=7, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=7, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=7, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=7, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=entry, fd=-1, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=after_epoll_create, fd=5, errmsg_ptr=(nil), errmsg=\"(null)\", errno=17 (File exists)\nstage=exit, fd=5, errmsg\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the code shown. MISRA C 2023 Rule 8.13 concerns pointer declarations: pointers should point to const-qualified types when they do not modify the pointee. In the snippet the only pointer parameter is 'struct MHD_Daemon *daemon'. That parameter is not modified in the body and could, in principle, be declared const, but changing it may be impossible if it must match the surrounding API (and the logging macro MHD_DLOG may expect a non-const pointer). The agent\u2019s scenario instead points to the prototypes of external interfaces (MHD_socket_last_strerr_, the _() translation macro, and MHD_DLOG). If those external functions are declared to return/accept non-const char * while they actually yield or consume read-only strings, the problem would be in those declarations, not in setup_epoll_fd itself. Also many standard APIs (e.g. strerror) historically return char *; you cannot fix such external prototypes from inside this function, and MISRA compliance in that case requires treating the external declaration or documenting an exemption. Without inspecting the declarations of MHD_socket_last_strerr_, _() and MHD_DLOG, you cannot conclude this function violates Rule 8.13. Therefore the report is not correct for the code shown."
}