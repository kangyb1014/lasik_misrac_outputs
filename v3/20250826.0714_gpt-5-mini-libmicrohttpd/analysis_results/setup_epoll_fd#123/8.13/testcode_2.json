{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes read-only strings but the called functions return or accept non-const char * pointers. For example, if MHD_socket_last_strerr_ is declared to return 'char *' (or the _() / MHD_DLOG prototypes take 'char *' for format/message), then a pointer to a read-only/static error string is not const-qualified and Rule 8.13 is violated. The correct form would be to declare those interfaces to use 'const char *' for messages/strings that are not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified setup_epoll_fd code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of setup_epoll_fd as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of setup_epoll_fd:\n```c\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n  return fd;\n}\n```\n</target_code>\nPlease provide the modified setup_epoll_fd code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/* Helper probe function: append a small trace line to /tmp/logs/1233.txt.\n   Keeps logic external to setup_epoll_fd and does not change control flow. */\nstatic void\nmhd_probe_log(const char *stage, int fd, const char *errmsg)\n{\n  /* Try to create the logs directory; ignore errors (e.g. already exists). */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  FILE *f = fopen(\"/tmp/logs/1233.txt\", \"a\");\n  if (f)\n  {\n    /* Print basic context: stage, returned fd, pointer value and message content.\n       Include errno information to help diagnose system call failures. */\n    fprintf(f, \"stage=%s, fd=%d, errmsg_ptr=%p, errmsg=\\\"%s\\\", errno=%d (%s)\\n\",\n            stage,\n            fd,\n            (void *) errmsg,\n            (errmsg != NULL) ? errmsg : \"(null)\",\n            errno,\n            strerror(errno));\n    fclose(f);\n  }\n}\n\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n  /* Log entry into function. fd is not known yet. */\n  mhd_probe_log(\"entry\", -1, NULL);\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n\n  /* Log the result of the create call (even when successful). */\n  mhd_probe_log(\"after_epoll_create\", fd, NULL);\n\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    /* Capture the textual error to the probe log for evidence. */\n    /* Note: MHD_socket_last_strerr_() may return a non-const char *; we\n       accept it as a const char * for logging purposes without altering\n       original behavior. */\n    const char *probe_err = MHD_socket_last_strerr_ ();\n    mhd_probe_log(\"epoll_create_failed\", fd, probe_err);\n\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    mhd_probe_log(\"noninheritable_failed\", fd, NULL);\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n\n  /* Log exit with the fd being returned. */\n  mhd_probe_log(\"exit\", fd, NULL);\n  return fd;\n}\n"
}