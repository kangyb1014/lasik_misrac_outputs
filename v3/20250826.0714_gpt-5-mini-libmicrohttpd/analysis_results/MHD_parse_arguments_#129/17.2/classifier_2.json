{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_parse_arguments_:\n```c\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n        return MHD_NO;\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n      return MHD_NO;\n    args = amper;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_unescape_plus (args);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call MHD_unescape_plus(args) itself does not inherently violate Rule 17.2. A violation would occur only if MHD_unescape_plus (or any function it calls), or any of the unescape callbacks invoked later (daemon->unescape_callback or the iterator cb), ends up calling MHD_parse_arguments_ again (directly or via a chain of calls). Example violating scenario: MHD_parse_arguments_ -> MHD_unescape_plus -> helper() -> MHD_parse_arguments_ (direct indirect recursion), or MHD_parse_arguments_ -> daemon->unescape_callback -> user_callback -> MHD_parse_arguments_. In the absence of such a call chain, this fragment does not violate the rule."
}