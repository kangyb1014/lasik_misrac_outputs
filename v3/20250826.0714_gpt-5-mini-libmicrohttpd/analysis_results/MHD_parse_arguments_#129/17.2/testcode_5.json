{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls a function pointer cb passed into MHD_parse_arguments_. If that callback is (or eventually calls) MHD_parse_arguments_ \u2014 for example if cb was set to (MHD_ArgumentIterator_)MHD_parse_arguments_ or to a function that calls MHD_parse_arguments_ \u2014 then the cb(...) call is an indirect call back into the same function, creating indirect recursion and violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_parse_arguments_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1296.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_parse_arguments_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_parse_arguments_:\n```c\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n        return MHD_NO;\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n      return MHD_NO;\n    args = amper;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_parse_arguments_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe/log helper. Keeps logging simple and avoids calling any user callbacks. */\nstatic void mhd_log_probe(const char *stage,\n                          struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          char *args,\n                          void *cb_ptr,\n                          void *cls,\n                          char *equals,\n                          char *amper,\n                          int cb_ret)\n{\n  FILE *f = fopen(\"/tmp/logs/1296.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s: connection=%p kind=%d args=%s cb=%p cls=%p equals=%p amper=%p cb_ret=%d\\n\",\n          stage,\n          (void *) connection,\n          (int) kind,\n          (NULL != args) ? args : \"(null)\",\n          cb_ptr,\n          cls,\n          (void *) equals,\n          (void *) amper,\n          cb_ret);\n  fclose(f);\n}\n\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  /* Log function entry */\n  mhd_log_probe(\"ENTER MHD_parse_arguments_\", connection, kind, args, (void *) cb, cls, NULL, NULL, -1);\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        /* Log just before invoking cb */\n        mhd_log_probe(\"CALL_CB (last arg, no '=')\", connection, kind, args, (void *) cb, cls, equals, amper, -1);\n\n        {\n          enum MHD_Result cb_ret = cb (cls,\n                                       args,\n                                       key_len,\n                                       NULL,\n                                       0,\n                                       kind);\n          /* Log cb return */\n          mhd_log_probe(\"RETURNED_CB (last arg, no '=')\", connection, kind, args, (void *) cb, cls, equals, amper, (int) cb_ret);\n          if (MHD_NO == cb_ret)\n          {\n            mhd_log_probe(\"EXIT MHD_parse_arguments_ (cb returned MHD_NO)\", connection, kind, args, (void *) cb, cls, equals, amper, (int) cb_ret);\n            return MHD_NO;\n          }\n        }\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n\n      /* Log just before invoking cb */\n      mhd_log_probe(\"CALL_CB (last arg, with '=')\", connection, kind, args, (void *) cb, cls, equals, amper, -1);\n\n      {\n        enum MHD_Result cb_ret = cb (cls,\n                                     args,\n                                     key_len,\n                                     equals,\n                                     value_len,\n                                     kind);\n        /* Log cb return */\n        mhd_log_probe(\"RETURNED_CB (last arg, with '=')\", connection, kind, args, (void *) cb, cls, equals, amper, (int) cb_ret);\n        if (MHD_NO == cb_ret)\n        {\n          mhd_log_probe(\"EXIT MHD_parse_arguments_ (cb returned MHD_NO)\", connection, kind, args, (void *) cb, cls, equals, amper, (int) cb_ret);\n          return MHD_NO;\n        }\n      }\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n\n      /* Log just before invoking cb */\n      mhd_log_probe(\"CALL_CB (no '=' before '&')\", connection, kind, args, (void *) cb, cls, equals, amper, -1);\n\n      {\n        enum MHD_Result cb_ret = cb (cls,\n                                     args,\n                                     key_len,\n                                     NULL,\n                                     0,\n                                     kind);\n        /* Log cb return */\n        mhd_log_probe(\"RETURNED_CB (no '=' before '&')\", connection, kind, args, (void *) cb, cls, equals, amper, (int) cb_ret);\n        if (MHD_NO == cb_ret)\n        {\n          mhd_log_probe(\"EXIT MHD_parse_arguments_ (cb returned MHD_NO)\", connection, kind, args, (void *) cb, cls, equals, amper, (int) cb_ret);\n          return MHD_NO;\n        }\n      }\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n\n    /* Log just before invoking cb */\n    mhd_log_probe(\"CALL_CB (regular key=value&...)\", connection, kind, args, (void *) cb, cls, equals, amper, -1);\n\n    {\n      enum MHD_Result cb_ret = cb (cls,\n                                   args,\n                                   key_len,\n                                   equals,\n                                   value_len,\n                                   kind);\n      /* Log cb return */\n      mhd_log_probe(\"RETURNED_CB (regular key=value&...)\", connection, kind, args, (void *) cb, cls, equals, amper, (int) cb_ret);\n      if (MHD_NO == cb_ret)\n      {\n        mhd_log_probe(\"EXIT MHD_parse_arguments_ (cb returned MHD_NO)\", connection, kind, args, (void *) cb, cls, equals, amper, (int) cb_ret);\n        return MHD_NO;\n      }\n    }\n    args = amper;\n  }\n\n  mhd_log_probe(\"EXIT MHD_parse_arguments_ (success)\", connection, kind, args, (void *) cb, cls, NULL, NULL, (int) MHD_YES);\n  return MHD_YES;\n}\n"
}