{
  "user_message": "An agent A claimed that the following MHD_stop_daemon code violates the MISRA C 2023 rule 17.2.\n<misra_rule>\nMISRA C 2023 Rule 17.2 is Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_stop_daemon.\n```c\n_MHD_EXTERN void\nMHD_stop_daemon (struct MHD_Daemon *daemon)\n{\n  MHD_socket fd;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n\n  if (NULL == daemon)\n    return;\n  if ( (daemon->shutdown) && (NULL == daemon->master) )\n    MHD_PANIC (_ (\"MHD_stop_daemon() was called twice.\"));\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  /* Slave daemons must be stopped by master daemon. */\n  mhd_assert ( (NULL == daemon->master) || (daemon->shutdown) );\n\n  daemon->shutdown = true;\n  if (daemon->was_quiesced)\n    fd = MHD_INVALID_SOCKET; /* Do not use FD if daemon was quiesced */\n  else\n    fd = daemon->listen_fd;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n  {   /* Master daemon with worker pool. */\n    mhd_assert (1 < daemon->worker_pool_size);\n    mhd_assert (MHD_D_IS_USING_THREADS_ (daemon));\n\n    /* Let workers shutdown in parallel. */\n    for (i = 0; i < daemon->worker_pool_size; ++i)\n    {\n      daemon->worker_pool[i].shutdown = true;\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        if (! MHD_itc_activate_ (daemon->worker_pool[i].itc,\n                                 \"e\"))\n          MHD_PANIC (_ (\"Failed to signal shutdown via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n      else\n        mhd_assert (MHD_INVALID_SOCKET != fd);\n    }\n#ifdef HAVE_LISTEN_SHUTDOWN\n    if (MHD_INVALID_SOCKET != fd)\n    {\n      (void) shutdown (fd,\n                       SHUT_RDWR);\n    }\n#endif /* HAVE_LISTEN_SHUTDOWN */\n    for (i = 0; i < daemon->worker_pool_size; ++i)\n    {\n      MHD_stop_daemon (&daemon->worker_pool[i]);\n    }\n    free (daemon->worker_pool);\n    mhd_assert (MHD_ITC_IS_INVALID_ (daemon->itc));\n#ifdef EPOLL_SUPPORT\n    mhd_assert (-1 == daemon->epoll_fd);\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n    mhd_assert (-1 == daemon->epoll_upgrade_fd);\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n#endif /* EPOLL_SUPPORT */\n  }\n  else\n#endif\n  {   /* Worker daemon or single daemon. */\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    if (MHD_D_IS_USING_THREADS_ (daemon))\n    {     /* Worker daemon or single daemon with internal thread(s). */\n      mhd_assert (0 == daemon->worker_pool_size);\n      /* Separate thread(s) is used for polling sockets. */\n      if (MHD_ITC_IS_VALID_ (daemon->itc))\n      {\n        if (! MHD_itc_activate_ (daemon->itc,\n                                 \"e\"))\n          MHD_PANIC (_ (\"Failed to signal shutdown via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n      else\n      {\n#ifdef HAVE_LISTEN_SHUTDOWN\n        if (MHD_INVALID_SOCKET != fd)\n        {\n          if (NULL == daemon->master)\n            (void) shutdown (fd,\n                             SHUT_RDWR);\n        }\n        else\n#endif /* HAVE_LISTEN_SHUTDOWN */\n        mhd_assert (false); /* Should never happen */\n      }\n\n      if (! MHD_thread_handle_ID_join_thread_ (daemon->tid))\n      {\n        MHD_PANIC (_ (\"Failed to join a thread.\\n\"));\n      }\n      /* close_all_connections() was called in daemon thread. */\n    }\n    else\n#endif\n    {\n      /* No internal threads are used for polling sockets. */\n      close_all_connections (daemon);\n    }\n    mhd_assert (NULL == daemon->connections_head);\n    mhd_assert (NULL == daemon->cleanup_head);\n    mhd_assert (NULL == daemon->suspended_connections_head);\n    mhd_assert (NULL == daemon->new_connections_head);\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n    mhd_assert (NULL == daemon->urh_head);\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n      MHD_itc_destroy_chk_ (daemon->itc);\n\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n        (-1 != daemon->epoll_fd) )\n      MHD_socket_close_chk_ (daemon->epoll_fd);\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n    if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n        (-1 != daemon->epoll_upgrade_fd) )\n      MHD_socket_close_chk_ (daemon->epoll_upgrade_fd);\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n#endif /* EPOLL_SUPPORT */\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_destroy_chk_ (&daemon->cleanup_connection_mutex);\n    MHD_mutex_destroy_chk_ (&daemon->new_connections_mutex);\n#endif\n  }\n\n  if (NULL == daemon->master)\n  {   /* Cleanup that should be done only one time in master/single daemon.\n       * Do not perform this cleanup in worker daemons. */\n\n    if (MHD_INVALID_SOCKET != fd)\n      MHD_socket_close_chk_ (fd);\n\n    /* TLS clean up */\n#ifdef HTTPS_SUPPORT\n    if (daemon->have_dhparams)\n    {\n      gnutls_dh_params_deinit (daemon->https_mem_dhparams);\n      daemon->have_dhparams = false;\n    }\n    if (0 != (daemon->options & MHD_USE_TLS))\n    {\n      gnutls_priority_deinit (daemon->priority_cache);\n      if (daemon->x509_cred)\n        gnutls_certificate_free_credentials (daemon->x509_cred);\n      if (daemon->psk_cred)\n        gnutls_psk_free_server_credentials (daemon->psk_cred);\n    }\n#endif /* HTTPS_SUPPORT */\n\n#ifdef DAUTH_SUPPORT\n    free (daemon->digest_auth_random_copy);\n    free (daemon->nnc);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_destroy_chk_ (&daemon->nnc_lock);\n#endif\n#endif\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_destroy_chk_ (&daemon->per_ip_connection_mutex);\n#endif\n    free (daemon);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWithin MHD_stop_daemon the function calls itself directly in the worker pool shutdown loop: for (i = 0; i < daemon->worker_pool_size; ++i) { MHD_stop_daemon(&daemon->worker_pool[i]); } \u2014 this is a direct self-call (even though on different daemon instances) and therefore violates MISRA C 2023 Rule 17.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_stop_daemon() entry: daemon=0x555c2ccac820\nMHD_stop_daemon(): pre-assert state: options=0x00000009, worker_pool=(nil), tid=0x555c2ccac978\nMHD_stop_daemon(): set shutdown=true for daemon=0x555c2ccac820\nMHD_stop_daemon(): was_quiesced=0, listen_fd=3\nMHD_stop_daemon(): calling shutdown() on listen fd=3 for single daemon\nMHD_stop_daemon(): joined thread tid=0x555c2ccac978\nMHD_stop_daemon(): performing master-only cleanup for daemon=0x555c2ccac820\nMHD_stop_daemon(): closing listen fd=3 for master/single daemon\nMHD_stop_daemon(): freeing daemon structure at 0x555c2ccac820\nMHD_stop_daemon() exit for daemon=0x555c2ccac820\nMHD_stop_daemon() entry: daemon=0x555c2ccacfc0\nMHD_stop_daemon(): pre-assert state: options=0x0000000d, worker_pool=(nil), tid=0x555c2ccad118\nMHD_stop_daemon(): set shutdown=true for daemon=0x555c2ccacfc0\nMHD_stop_daemon(): was_quiesced=0, listen_fd=3\nMHD_stop_daemon(): calling shutdown() on listen fd=3 for single daemon\nMHD_stop_daemon(): joined thread tid=0x555c2ccad118\nMHD_stop_daemon(): performing master-only cleanup for daemon=0x555c2ccacfc0\nMHD_stop_daemon(): closing listen fd=3 for master/single daemon\nMHD_stop_daemon(): freeing daemon structure at 0x555c2ccacfc0\nMHD_stop_daemon() exit for daemon=0x555c2ccacfc0\nMHD_stop_daemon() entry: daemon=0x555c2ccad440\nMHD_stop_daemon(): pre-assert state: options=0x00000009, worker_pool=0x555c2ccad8c0, tid=0x555c2ccad598\nMHD_stop_daemon(): set shutdown=true for daemon=0x555c2ccad440\nMHD_stop_daemon(): was_quiesced=0, listen_fd=3\nMHD_stop_daemon(): master with worker_pool, pool=0x555c2ccad8c0, size=2\nMHD_stop_daemon(): signaling worker 0 at 0x555c2ccad8c0 to shutdown\nMHD_stop_daemon(): worker 0 has invalid itc, expect worker to use fd=3\nMHD_stop_daemon(): signaling worker 1 at 0x555c2ccadb68 to shutdown\nMHD_stop_daemon(): worker 1 has invalid itc, expect worker to use fd=3\nMHD_stop_daemon(): calling shutdown() on fd=3 before worker joins\nMHD_stop_daemon(): recursively calling MHD_stop_daemon() on worker 0 at 0x555c2ccad8c0\nMHD_stop_daemon() entry: daemon=0x555c2ccad8c0\nMHD_stop_daemon(): pre-assert state: options=0x00000009, worker_pool=(nil), tid=0x555c2ccada18\nMHD_stop_daemon(): set shutdown=true for daemon=0x555c2ccad8c0\nMHD_stop_daemon(): was_quiesced=0, listen_fd=3\nMHD_stop_daemon(): joined thread tid=0x555c2ccada18\nMHD_stop_daemon() exit for daemon=0x555c2ccad8c0\nMHD_stop_daemon(): returned from recursive call for worker 0\nMHD_stop_daemon(): recursively calling MHD_stop_daemon() on worker 1 at 0x555c2ccadb68\nMHD_stop_daemon() entry: daemon=0x555c2ccadb68\nMHD_stop_daemon(): pre-assert state: options=0x00000009, worker_pool=(nil), tid=0x555c2ccadcc0\nMHD_stop_daemon(): set shutdown=true for daemon=0x555c2ccadb68\nMHD_stop_daemon(): was_quiesced=0, listen_fd=3\nMHD_stop_daemon(): joined thread tid=0x555c2ccadcc0\nMHD_stop_daemon() exit for daemon=0x555c2ccadb68\nMHD_stop_daemon(): returned from recursive call for worker 1\nMHD_stop_daemon(): freed worker_pool, set pointer to NULL\nMHD_stop_daemon(): performing master-only cleanup for daemon=0x555c2ccad440\nMHD_stop_daemon(): closing listen fd=3 for master/single daemon\nMHD_stop_daemon(): freeing daemon structure at 0x555c2ccad440\nMHD_stop_daemon() exit for daemon=0x555c2ccad440\nMHD_stop_daemon() entry: daemon=0x555c2ccad8c0\nMHD_stop_daemon(): pre-assert state: options=0x00000001, worker_pool=(nil), tid=0x555c2ccada18\nMHD_stop_daemon(): set shutdown=true for daemon=0x555c2ccad8c0\nMHD_stop_daemon(): was_quiesced=0, listen_fd=3\nMHD_stop_daemon(): closing all connections for daemon=0x555c2ccad8c0\nMHD_stop_daemon(): performing master-only cleanup for daemon=0x555c2ccad8c0\nMHD_stop_daemon(): closing listen fd=3 for master/single daemon\nMHD_stop_daemon(): freeing daemon structure at 0x555c2ccad8c0\nMHD_stop_daemon() exit for daemon=0x555c2ccad8c0\nMHD_stop_daemon() entry: daemon=0x555c2ccadf60\nMHD_stop_daemon(): pre-assert state: options=0x00080001, worker_pool=(nil), tid=0x555c2ccae0b8\nMHD_stop_daemon(): set shutdown=true for daemon=0x555c2ccadf60\nMHD_stop_daemon(): was_quiesced=0, listen_fd=3\nMHD_stop_daemon(): closing all c\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The call MHD_stop_daemon(&daemon->worker_pool[i]) inside MHD_stop_daemon is a direct recursive call: the function calls itself (albeit on different daemon instances). MISRA C 2023 Rule 17.2 forbids functions calling themselves, either directly or indirectly. The execution log also shows the recursive calls occurring at runtime. Therefore this code violates Rule 17.2 unless a formal deviation is documented."
}