{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert duplicates the subsequent runtime check. In normal operation when c->state >= MHD_CONNECTION_HEADERS_PROCESSED the assertion expression is evaluated (executed) but has no effect on control flow because the following if handles the out-of-range case. Thus the assert is an executed operation whose removal (in the normal-success path) would not affect program behaviour, i.e. it is redundant/dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_auth_rq_header_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2412.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of find_auth_rq_header_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of find_auth_rq_header_:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n</target_code>\nPlease provide the modified find_auth_rq_header_ code.\n",
  "test_code": "static void probe_log_enter(const struct MHD_Connection *c, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/2412.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"%s: c=%p state=%d rq.headers_received=%p\\n\",\n          stage, (void *)c, (int)c->state, (void *)c->rq.headers_received);\n  fclose(f);\n}\n\nstatic void probe_log_msg(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/2412.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"%s\\n\", msg);\n  fclose(f);\n}\n\nstatic void probe_log_header(const struct MHD_HTTP_Req_Header *h, const char *where)\n{\n  FILE *f = fopen(\"/tmp/logs/2412.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"%s: header=%p kind=%d header_size=%lu value_size=%lu header_ptr=%p value_ptr=%p\\n\",\n          where, (void *)h, (int)h->kind,\n          (unsigned long)h->header_size, (unsigned long)h->value_size,\n          (void *)h->header, (void *)h->value);\n  fclose(f);\n}\n\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  /* Log entry and pre-assert state */\n  probe_log_enter(c, \"find_auth_rq_header_ enter\");\n\n  /* Evaluate the assertion expression once so we can log its value without\n     changing the original assert semantics. */\n  bool assert_expr = (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"assert_expr evaluated: (MHD_CONNECTION_HEADERS_PROCESSED <= c->state) -> %d\",\n             (int)assert_expr);\n    probe_log_msg(buf);\n  }\n\n  mhd_assert (assert_expr);\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n  {\n    /* Log that the runtime check fails and we return early */\n    probe_log_msg(\"Runtime check: MHD_CONNECTION_HEADERS_PROCESSED > c->state -> returning false\");\n    return false;\n  }\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n    {\n      char buf[128];\n      snprintf(buf, sizeof(buf), \"token selected: DIGEST token=%p token_len=%lu\",\n               (void *)token, (unsigned long)token_len);\n      probe_log_msg(buf);\n    }\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n    {\n      char buf[128];\n      snprintf(buf, sizeof(buf), \"token selected: BASIC token=%p token_len=%lu\",\n               (void *)token, (unsigned long)token_len);\n      probe_log_msg(buf);\n    }\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    probe_log_msg(\"Unsupported auth type: asserting 0 and returning false\");\n    mhd_assert (0);\n    return false;\n  }\n\n  /* Iterate over headers; log each candidate header and key checks to allow\n     reproduction of matching (or non-matching) steps. */\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    probe_log_header(h, \"checking header\");\n\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"Match found: header=%p token=%p token_len=%lu auth_value->str=%p auth_value->len=%lu\",\n                 (void *)h, (void *)token, (unsigned long)token_len,\n                 (void *)auth_value->str, (unsigned long)auth_value->len);\n        probe_log_msg(buf);\n      }\n      return true; /* Found a match */\n    }\n  }\n\n  probe_log_msg(\"No matching header has been found: returning false\");\n  return false; /* No matching header has been found */\n}\n"
}