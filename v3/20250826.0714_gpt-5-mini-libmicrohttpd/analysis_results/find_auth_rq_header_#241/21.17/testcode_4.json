{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf token_len == h->value_size - 1 and the character at h->value[token_len] is a space or tab, the code sets auth_value->str = h->value + token_len + 1 which equals h->value + h->value_size (a pointer one past the end) and auth_value->len = 0. If that pointer is later passed to a <string.h> function that reads the string data (for example strlen(auth_value->str), strcpy, strcat, or any function that expects a NUL-terminated buffer or a non\u2011zero length), the function will attempt to access memory past the end of h->value, causing an out\u2011of\u2011bounds access and violating MISRA C 2023 Rule 21.17. Note: the code\u2019s immediate indexing of h->value[token_len] is safe because an earlier check and short\u2011circuit evaluation guarantee token_len < h->value_size when that access occurs, but the produced one\u2011past\u2011end pointer + zero length can lead to a later string.h call reading out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_auth_rq_header_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of find_auth_rq_header_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of find_auth_rq_header_:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n</target_code>\nPlease provide the modified find_auth_rq_header_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/2419.txt */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2419.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  probe_log (\"enter find_auth_rq_header_: c=%p state=%lu\", (void *) c,\n             (unsigned long) c->state);\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n  {\n    probe_log (\"early return: headers not processed (state=%lu)\",\n               (unsigned long) c->state);\n    return false;\n  }\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n    probe_log (\"selected DIGEST token=%p token_len=%zu\", (const void *) token,\n               token_len);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n    probe_log (\"selected BASIC token=%p token_len=%zu\", (const void *) token,\n               token_len);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    probe_log (\"unsupported auth type=%d, returning false\", (int) type);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    probe_log (\"header iter: h=%p kind=%d header_size=%zu value_size=%zu header=%p value=%p\",\n               (void *) h, (int) h->kind, h->header_size, h->value_size,\n               (void *) h->header, (void *) h->value);\n\n    if (MHD_HEADER_KIND != h->kind)\n    {\n      probe_log (\"skipping header %p: wrong kind (%d)\", (void *) h,\n                 (int) h->kind);\n      continue;\n    }\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n    {\n      probe_log (\"skipping header %p: header_size mismatch (expected %zu, got %zu)\",\n                 (void *) h,\n                 (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION),\n                 h->header_size);\n      continue;\n    }\n    if (token_len > h->value_size)\n    {\n      probe_log (\"skipping header %p: token_len (%zu) > value_size (%zu)\",\n                 (void *) h, token_len, h->value_size);\n      continue;\n    }\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n    {\n      probe_log (\"skipping header %p: header name mismatch\", (void *) h);\n      continue;\n    }\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n    {\n      probe_log (\"skipping header %p: token prefix mismatch (token_len=%zu)\",\n                 (void *) h, token_len);\n      continue;\n    }\n\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if (token_len < h->value_size)\n    {\n      /* safe to read h->value[token_len] because token_len < h->value_size */\n      unsigned char ch = (unsigned char) h->value[token_len];\n      probe_log (\"checking continuation char at h->value[%zu] = 0x%02x ('%c')\",\n                 token_len, (unsigned) ch,\n                 (ch >= 32 && ch < 127) ? (char) ch : '?');\n    }\n    else\n    {\n      probe_log (\"token_len == h->value_size (%zu): no continuation char to read\",\n                 token_len);\n    }\n\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        const char *computed_ptr = h->value + token_len + 1;\n        size_t computed_len = h->value_size - (token_len + 1);\n        probe_log (\"assigning auth_value (skip ws): auth_value->str=%p auth_value->len=%zu (h->value=%p token_len=%zu value_size=%zu)\",\n                   (const void *) computed_ptr, computed_len,\n                   (const void *) h->value, token_len, h->value_size);\n        /* Note: computed_ptr may equal h->value + h->value_size (one-past-end) when\n         * token_len == h->value_size - 1 and the character at that index is space or tab.\n         * That situation is logged above and results in auth_value->len == 0.\n         */\n        auth_value->str = computed_ptr;\n        auth_value->len = computed_len;\n      }\n      else\n      { /* No whitespace to skip */\n        const char *computed_ptr = h->value + token_len;\n        size_t computed_len = h->value_size - token_len;\n        probe_log (\"assigning auth_value (no ws): auth_value->str=%p auth_value->len=%zu (h->value=%p token_len=%zu value_size=%zu)\",\n                   (const void *) computed_ptr, computed_len,\n                   (const void *) h->value, token_len, h->value_size);\n        auth_value->str = computed_ptr;\n        auth_value->len = computed_len;\n      }\n      probe_log (\"match found, returning true\");\n      return true; /* Found a match */\n    }\n  }\n  probe_log (\"no matching header found, returning false\");\n  return false; /* No matching header has been found */\n}\n"
}