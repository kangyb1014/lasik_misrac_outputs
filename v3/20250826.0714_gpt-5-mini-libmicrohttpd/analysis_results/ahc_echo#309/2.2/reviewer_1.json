{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  (void) req_cls;           /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  return MHD_queue_response (connection, MHD_HTTP_OK, response);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression-statement \u201c(void) req_cls;\u201d is an executed no-op present solely to suppress an unused-parameter warning. Removing this statement would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s narrow reading is technically true in a literal sense (the statement \u201c(void) req_cls;\u201d is an executed no\u2011op and removing it does not change the program\u2019s runtime behaviour), but the report is not correct as a MISRA violation. The (void)parameter idiom is the conventional and MISRA\u2011acceptable way to document an intentionally unused parameter and to suppress compiler warnings; it is not the kind of \u201cdead code\u201d that Rule 2.2 is intended to forbid. Rule 2.2 targets code that is unnecessary and latent (i.e. code that serves no purpose and should be removed). An explicit void\u2011cast on an unused parameter communicates intent and affects build diagnostics (and in some cases could affect observable behaviour if the parameter were volatile or had side effects), so it is treated as permissible practice rather than dead code. If you wish to avoid even the appearance of such statements you can omit the parameter name in the function signature, use a standard UNUSED/UNREFERENCED macro, or apply an appropriate compiler attribute."
}