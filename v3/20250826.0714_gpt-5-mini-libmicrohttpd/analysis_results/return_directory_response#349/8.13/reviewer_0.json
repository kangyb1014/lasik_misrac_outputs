{
  "user_message": "An agent A claimed that the following return_directory_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of return_directory_response.\n```c\nstatic enum MHD_Result\nreturn_directory_response (struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n\n  (void) pthread_mutex_lock (&mutex);\n  if (NULL == cached_directory_response)\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_INTERNAL_SERVER_ERROR,\n                              internal_error_response);\n  else\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              cached_directory_response);\n  (void) pthread_mutex_unlock (&mutex);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'connection' is declared as a non-const pointer (struct MHD_Connection *connection) but in the body it is only used as an input and never modified. According to MISRA C 2023 Rule 8.13 it should be const-qualified (const struct MHD_Connection *connection) unless an called API (e.g. MHD_queue_response) requires a non-const pointer. If the called API accepts a const pointer or if the function does not need to modify the pointed object, this is a violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 8.13 recommends that pointers should point to const-qualified types when possible, but an obvious and accepted exception is when the pointer must match an API that requires a non-const parameter. In this function the connection pointer is passed directly to MHD_queue_response. The libmicrohttpd prototype for that function expects a struct MHD_Connection * (non-const), so the parameter cannot be made const without breaking the call. Therefore the reported violation is not correct: this usage conforms to the practical exception to Rule 8.13 (the called API requires a non-const pointer)."
}