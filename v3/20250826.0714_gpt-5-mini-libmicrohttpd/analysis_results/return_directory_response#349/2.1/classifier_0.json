{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of return_directory_response:\n```c\nstatic enum MHD_Result\nreturn_directory_response (struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n\n  (void) pthread_mutex_lock (&mutex);\n  if (NULL == cached_directory_response)\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_INTERNAL_SERVER_ERROR,\n                              internal_error_response);\n  else\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              cached_directory_response);\n  (void) pthread_mutex_unlock (&mutex);\n  return ret;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(void) pthread_mutex_lock (&mutex);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No \u2014 the statement '(void) pthread_mutex_lock(&mutex);' is executable and does not introduce unreachable code. It merely discards the function return value. A concrete violation of MISRA C 2023 Rule 2.1 would be, for example, code placed after an unconditional return or an infinite loop, e.g. 'return; x = 1; /* x = 1 is unreachable */' or 'for(;;) { } y = 0; /* y = 0 is unreachable */'."
}