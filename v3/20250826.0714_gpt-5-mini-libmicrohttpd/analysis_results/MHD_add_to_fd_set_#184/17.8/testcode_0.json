{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'fd_setsize = (int) FD_SETSIZE;' assigns to the function parameter fd_setsize, modifying a non\u2011pointer parameter inside the function. MISRA C 2023 Rule 17.8 prohibits modifying function parameters (the exception only allows modifying the object referred to by a pointer parameter, not non\u2011pointer parameters or the pointer itself). This assignment therefore violates Rule 17.8. (Fix: use a local variable, e.g. 'int local_fd_setsize = (int)FD_SETSIZE;'.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_to_fd_set_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1847.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_to_fd_set_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_to_fd_set_:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_add_to_fd_set_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void write_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1847.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  write_log(\"MHD_add_to_fd_set_: enter fd=%ld set=%p max_fd=%p fd_setsize_in=%d\",\n            (long) fd, (void *) set, (void *) max_fd, fd_setsize);\n\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n  {\n    write_log(\"MHD_add_to_fd_set_: early exit - null set or invalid socket (fd=%ld)\", (long) fd);\n    return 0;\n  }\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  write_log(\"MHD_add_to_fd_set_: before assignment fd_setsize=%d FD_SETSIZE=%d\",\n            fd_setsize, (int) FD_SETSIZE);\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n  write_log(\"MHD_add_to_fd_set_: after assignment fd_setsize=%d\",\n            fd_setsize);\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n  {\n    write_log(\"MHD_add_to_fd_set_: fd does not fit in fd_setsize=%d => return 0\", fd_setsize);\n    return 0;\n  }\n\n  write_log(\"MHD_add_to_fd_set_: fd fits - adding to fd_set (fd=%ld, fd_setsize=%d)\", (long) fd, fd_setsize);\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n  {\n    write_log(\"MHD_add_to_fd_set_: updating max_fd from %ld to %ld\", (long) ( (NULL != max_fd) ? *max_fd : (MHD_socket) -1 ), (long) fd);\n    *max_fd = fd;\n  }\n\n  write_log(\"MHD_add_to_fd_set_: exit returning 1 (success)\");\n  return ! 0;\n}\n"
}