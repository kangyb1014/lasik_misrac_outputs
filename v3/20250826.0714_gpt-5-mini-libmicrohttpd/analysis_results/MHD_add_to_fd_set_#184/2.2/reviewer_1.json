{
  "user_message": "An agent A claimed that the following MHD_add_to_fd_set_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_to_fd_set_.\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression statement '(void) fd_setsize;' is an executed expression with no side-effects whose removal would not change program behaviour. For example (when HAS_FD_SETSIZE_OVERRIDABLE is not defined) the subsequent assignment 'fd_setsize = (int) FD_SETSIZE;' establishes the value, so the preceding void-cast is redundant and can be removed without effect\u2014constituting dead code.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cfd0, max_fd=0x7ffc9416cfcc, fd_setsize=1024\n       initial *max_fd=0\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from 0 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cea8, max_fd=0x7ffc9416cda4, fd_setsize=1024\n       initial *max_fd=-1\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from -1 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cfd0, max_fd=0x7ffc9416cfcc, fd_setsize=1024\n       initial *max_fd=0\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from 0 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cea8, max_fd=0x7ffc9416cda4, fd_setsize=1024\n       initial *max_fd=-1\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from -1 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cfd0, max_fd=0x7ffc9416cfcc, fd_setsize=1024\n       initial *max_fd=0\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from 0 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cea8, max_fd=0x7ffc9416cda4, fd_setsize=1024\n       initial *max_fd=-1\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from -1 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cfd0, max_fd=0x7ffc9416cfcc, fd_setsize=1024\n       initial *max_fd=0\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from 0 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cea8, max_fd=0x7ffc9416cda4, fd_setsize=1024\n       initial *max_fd=-1\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from -1 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cfd0, max_fd=0x7ffc9416cfcc, fd_setsize=1024\n       initial *max_fd=0\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from 0 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set=0x7ffc9416cea8, max_fd=0x7ffc9416cda4, fd_setsize=1024\n       initial *max_fd=-1\nPRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=1024\nPOST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=1024\nASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> 1024\nMAX_FD_UPDATE: max_fd changed from -1 to 3\nEXIT: MHD_add_to_fd_set_ returning success (1). fd=3\nENTRY: MHD_add_to_fd_set_. fd=3, set\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 2.2 forbids executed operations whose removal would not affect program behaviour. The statement\n  (void) fd_setsize;\nis an expression statement that merely evaluates the parameter and discards the result; it has no side-effects. In the code path shown (HAS_FD_SETSIZE_OVERRIDABLE not defined) fd_setsize is immediately assigned a new value on the next statement, so the prior void-cast does not affect program behaviour and can be removed. Therefore that statement qualifies as dead code under Rule 2.2.\n\n(Only caveat: if fd_setsize were declared volatile or its evaluation could trigger a trap/side-effect, the cast could matter. In this function fd_setsize is an ordinary int parameter, so no such side-effects apply.)"
}