{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment in the function modifies any of the function parameters or the pointers themselves:\n- The parameter 'param' is used only to read members (param->value.str, param->value.len, param->quoted); there are no assignments to 'param' or to its pointer value. Although 'param' is a pointer-to-const, the code only reads from the pointed object.\n- The parameter 'str' is declared as 'const char *const', so neither the pointer nor the pointed data can be modified; the code only reads from it (passed to memcmp or MHD_str_equal_quoted_bin_n).\n- The parameter 'str_len' is a value parameter (size_t) and is only read, not assigned to.\n- Calls made (memcmp and MHD_str_equal_quoted_bin_n) take const pointer arguments and are not expected to modify the pointer parameters; mhd_assert is read-only in this context (no assignment to parameters).\n\nTherefore there are no fragments that violate MISRA C 2023 Rule 17.8 (function parameters being modified), and no other fragments need investigation for this specific rule."
}