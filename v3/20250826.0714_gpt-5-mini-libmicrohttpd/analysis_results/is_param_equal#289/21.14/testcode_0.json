{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the compared objects are C-style null-terminated strings. For example, if 'str' is a null-terminated string and 'str_len' was obtained via strlen(str) (or includes the terminating '\\0'), and param->value.str is also a null-terminated string, then using memcmp to compare them constitutes comparing null-terminated strings with memcmp and thus violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_param_equal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2898.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_param_equal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\nPlease provide the modified is_param_equal code.\n",
  "test_code": "static void mhd_log_probe(const struct MHD_RqDAuthParam *param,\n                              const char *const str,\n                              const size_t str_len,\n                              const char *stage,\n                              int cmp_result_valid,\n                              int cmp_result)\n{\n  FILE *f = fopen(\"/tmp/logs/2898.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"--- is_param_equal probe (%s) ---\\n\", stage);\n  fprintf(f, \"param pointer: %p\\n\", (void *)param);\n  if (param != NULL)\n  {\n    fprintf(f, \" param->value.str: %p\\n\", (void *)param->value.str);\n    fprintf(f, \" param->value.len: %zu\\n\", param->value.len);\n    fprintf(f, \" param->quoted   : %d\\n\", param->quoted ? 1 : 0);\n\n    /* Print the last byte (if any) safely to detect terminating '\\0' */\n    if (param->value.len > 0 && param->value.str != NULL)\n    {\n      unsigned char last = (unsigned char) param->value.str[param->value.len - 1u];\n      fprintf(f, \" param last byte (as int): %u\\n\", (unsigned) last);\n      fprintf(f, \" param last byte is NUL: %s\\n\", (last == '\\0') ? \"YES\" : \"NO\");\n    }\n  }\n\n  fprintf(f, \" arg str pointer: %p\\n\", (void *)str);\n  fprintf(f, \" arg str_len    : %zu\\n\", str_len);\n  if (str_len > 0 && str != NULL)\n  {\n    unsigned char last = (unsigned char) str[str_len - 1u];\n    fprintf(f, \" arg last byte (as int): %u\\n\", (unsigned) last);\n    fprintf(f, \" arg last byte is NUL: %s\\n\", (last == '\\0') ? \"YES\" : \"NO\");\n  }\n\n  if (cmp_result_valid)\n    fprintf(f, \" memcmp result: %d\\n\", cmp_result);\n  else\n    fprintf(f, \" memcmp not invoked in this path\\n\");\n\n  fprintf(f, \"--- end probe (%s) ---\\n\\n\", stage);\n  fclose(f);\n}\n\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  /* preserve original assertions */\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* Log entry and state before branching */\n  mhd_log_probe(param, str, str_len, \"entry\", 0, 0);\n\n  if (param->quoted)\n  {\n    /* Log that we are taking the quoted branch */\n    mhd_log_probe(param, str, str_len, \"quoted-branch-before-call\", 0, 0);\n    bool res = MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                           str, str_len);\n    /* Log result of the quoted comparison */\n    mhd_log_probe(param, str, str_len, \"quoted-branch-after-call\", 0, 0);\n    return res;\n  }\n\n  /* Non-quoted path: we must preserve short-circuit semantics */\n  if (str_len != param->value.len)\n  {\n    /* lengths differ -> no memcmp invoked (preserve behavior) */\n    mhd_log_probe(param, str, str_len, \"length-mismatch\", 0, 0);\n    return false;\n  }\n\n  /* lengths equal -> memcmp will be invoked as in original code */\n  int cmp = memcmp (str, param->value.str, str_len);\n  mhd_log_probe(param, str, str_len, \"memcmp-invoked\", 1, cmp);\n  return (0 == cmp);\n}\n"
}