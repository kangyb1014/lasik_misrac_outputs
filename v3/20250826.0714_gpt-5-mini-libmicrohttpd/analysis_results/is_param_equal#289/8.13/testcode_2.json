{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression param->value.str refers to a pointer-to-mutable-char. Although param is a pointer to a const struct, that yields a char * const lvalue (top-level const on the pointer), not a pointer to const data. If the string is only read (as here), MISRA C 2023 Rule 8.13 requires the pointer to point to a const-qualified type (i.e. const char *). In other words, if struct MHD_RqDAuthParam::value.str is declared as char * (or ends up as char * via the member type), this use violates Rule 8.13; the member should be declared as const char * (or equivalent) so the pointer points to const-qualified data.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_param_equal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_param_equal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\nPlease provide the modified is_param_equal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging helper: write hex dump of up to max_bytes from p, using bound. */\nstatic void\nprobe_hexdump (FILE *f, const char *label, const char *p, size_t bound, size_t max_bytes)\n{\n  size_t i, to_print = (bound < max_bytes) ? bound : max_bytes;\n  fprintf (f, \"%s: pointer=%p len=%zu dump=\", label, (const void *)p, bound);\n  for (i = 0; i < to_print; ++i)\n    fprintf (f, \"%02x\", (unsigned char)p[i]);\n  if (to_print < bound)\n    fprintf (f, \"...\");\n  fprintf (f, \"\\n\");\n}\n\nstatic void\nprobe_log (const struct MHD_RqDAuthParam *param,\n           const char *const str,\n           const size_t str_len,\n           int branch_id,\n           int result)\n{\n  FILE *f = fopen(\"/tmp/logs/2893.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t t = time(NULL);\n  fprintf (f, \"timestamp=%ld is_param_equal probe\\n\", (long)t);\n  fprintf (f, \"param_ptr=%p quoted=%d\\n\", (const void *)param, (int)(param ? param->quoted : 0));\n\n  if (param) {\n    /* print member pointers and lengths that are relevant to the violation scenario */\n    fprintf (f, \"param->value.str=%p param->value.len=%zu\\n\",\n             (const void *)param->value.str, (size_t)param->value.len);\n  }\n  fprintf (f, \"str_ptr=%p str_len=%zu\\n\", (const void *)str, str_len);\n  fprintf (f, \"branch_taken=%d result=%d\\n\", branch_id, result);\n\n  /* hexdumps (limit to 64 bytes to avoid huge logs) */\n  if (param && param->value.str)\n    probe_hexdump (f, \"param_value_str\", param->value.str, (size_t)param->value.len, 64);\n  if (str)\n    probe_hexdump (f, \"input_str\", str, str_len, 64);\n\n  fprintf (f, \"---\\n\");\n  fflush (f);\n  fclose (f);\n}\n\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (param->quoted)\n    {\n      /* preserve original logic: call and capture result, then log and return */\n      bool res = MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                             str, str_len);\n      probe_log (param, str, str_len, /*branch_id=*/1, /*result=*/res ? 1 : 0);\n      return res;\n    }\n\n  bool res = (str_len == param->value.len) &&\n             (0 == memcmp (str, param->value.str, str_len));\n  probe_log (param, str, str_len, /*branch_id=*/0, /*result=*/res ? 1 : 0);\n  return res;\n}"
}