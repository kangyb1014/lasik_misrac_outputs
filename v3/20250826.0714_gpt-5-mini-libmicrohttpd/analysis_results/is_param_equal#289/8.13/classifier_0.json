{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The expression param->value.str is passed as a read-only string to an equality routine. If the struct member value.str is declared as a plain char * (not const char *), then the code is violating MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when it is only used for read access. Note: having the parameter declared as const struct MHD_RqDAuthParam * does not make the pointee type of the member const; the correct fix is to declare the member as const char * (or otherwise const-qualify the pointed-to type). If value.str is already declared const char *, there is no violation."
}