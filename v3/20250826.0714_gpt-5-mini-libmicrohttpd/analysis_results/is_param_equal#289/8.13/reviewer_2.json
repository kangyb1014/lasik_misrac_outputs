{
  "user_message": "An agent A claimed that the following is_param_equal code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_param_equal.\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression param->value.str refers to a pointer-to-mutable-char. Although param is a pointer to a const struct, that yields a char * const lvalue (top-level const on the pointer), not a pointer to const data. If the string is only read (as here), MISRA C 2023 Rule 8.13 requires the pointer to point to a const-qualified type (i.e. const char *). In other words, if struct MHD_RqDAuthParam::value.str is declared as char * (or ends up as char * via the member type), this use violates Rule 8.13; the member should be declared as const char * (or equivalent) so the pointer points to const-qualified data.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's point about the intent of MISRA C:2023 Rule 8.13 is correct in substance: when a pointer is used only to read the pointed-to data it should, where possible, be declared to point to const-qualified data (i.e. const char * rather than char *). However, the snippet alone does not show the declaration of struct MHD_RqDAuthParam::value.str. In C, given a parameter declared const struct MHD_RqDAuthParam *param, the expression param->value.str is an lvalue with a top-level const applied by the const-qualified enclosing struct, but its type is still whatever was declared in the struct (e.g. char * if that is how it was declared). Rule 8.13 targets the pointee type (the target of the pointer) and therefore is violated only if the member is declared as a pointer-to-mutable-char (char *) instead of pointer-to-const-char (const char *). Because the struct member declaration is not shown, the reported violation cannot be confirmed from this code alone. If value.str is declared as char * then the report is correct; if it is declared as const char * then there is no violation. The agent's reasoning is valid but the claim cannot be proven from the provided snippet alone."
}