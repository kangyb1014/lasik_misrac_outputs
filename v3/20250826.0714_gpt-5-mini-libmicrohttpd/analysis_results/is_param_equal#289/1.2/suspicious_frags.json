{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are present in the provided fragment. Specifically:\n- There are no use of compiler-specific tokens such as __attribute__, __asm__, __builtin_*, __extension__, typeof, pragma(pack), or inline assembly that would be explicitly documented as compiler extensions.\n- The identifier _MHD_static_inline is a macro name in the source, but its expansion is not shown here; a macro name alone is not proof of a compiler extension. Its expansion should be inspected where it is defined \u2014 if it expands to compiler-specific constructs then that definition would be the real point of investigation, but the current fragment does not itself use an extension token.\n- mhd_assert and MHD_str_equal_quoted_bin_n are function/macros but their use here is standard-looking; their definitions would need review to determine any extension usage, but the calls themselves are not extensions.\n- Use of bool, size_t, const, and memcmp are standard C library/keywords (bool requires stdbool.h in C99+, but the identifier itself is not a compiler extension).\nTherefore, based on the code shown, there are no code fragments that explicitly use documented compiler language extensions to report. If you want further checks, provide the definitions of macros such as _MHD_static_inline, mhd_assert, or any included headers so those definitions can be examined for extensions."
}