{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_lookup_connection_value_n returns an expect pointer that is not NUL-terminated (note the call passed NULL for the length), and MHD_str_equal_caseless_ is implemented using standard string.h functions that expect NUL-terminated strings (e.g. strcmp/strlen/strncasecmp/memcmp without length), the comparison can read past the bounds of the expect object. In that situation the code would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified need_100_continue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/519.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of need_100_continue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of need_100_continue:\n```c\nstatic bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    return false;\n\n  if (0 == connection->rq.remaining_upload_size)\n    return false;\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_EXPECT,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_EXPECT),\n                                     &expect,\n                                     NULL))\n    return false;\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n    return true;\n\n  return false;\n}\n```\n</target_code>\nPlease provide the modified need_100_continue code.\n",
  "test_code": "static bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n  FILE *logf = fopen(\"/tmp/logs/519.txt\", \"a\");\n\n  if (logf)\n    {\n      /* Log entry and key state without dereferencing 'expect'. */\n      (void) fprintf(logf,\n                     \"need_100_continue: entry; http_ver=%u; remaining_upload_size=%lld\\n\",\n                     (unsigned) connection->rq.http_ver,\n                     (long long) connection->rq.remaining_upload_size);\n      (void) fflush(logf);\n    }\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    {\n      if (logf)\n        {\n          (void) fprintf(logf, \"need_100_continue: exit - HTTP version not 1.1 compatible\\n\");\n          (void) fclose(logf);\n        }\n      return false;\n    }\n\n  if (0 == connection->rq.remaining_upload_size)\n    {\n      if (logf)\n        {\n          (void) fprintf(logf, \"need_100_continue: exit - no remaining upload size\\n\");\n          (void) fclose(logf);\n        }\n      return false;\n    }\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_EXPECT,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_EXPECT),\n                                     &expect,\n                                     NULL))\n    {\n      if (logf)\n        {\n          (void) fprintf(logf, \"need_100_continue: exit - MHD_lookup_connection_value_n returned MHD_NO\\n\");\n          (void) fclose(logf);\n        }\n      return false;\n    }\n\n  /* Log the pointer returned by lookup. Do NOT dereference it here (to avoid\n     introducing further out-of-bounds accesses). Note that the call passed\n     NULL for the length parameter above; log this fact to help reproduce the\n     scenario where the returned pointer may not be NUL-terminated. */\n  if (logf)\n    {\n      (void) fprintf(logf,\n                     \"need_100_continue: lookup succeeded; expect pointer=%p; length param=\\\"NULL\\\" (caller did not request length)\\n\",\n                     (void *) expect);\n      (void) fflush(logf);\n    }\n\n  /* Call the original comparison and log its result. We capture the result in\n     a temporary variable so logging does not change the original control\n     flow. */\n  bool cmp_res = MHD_str_equal_caseless_ (expect,\n                                          \"100-continue\");\n\n  if (logf)\n    {\n      (void) fprintf(logf,\n                     \"need_100_continue: MHD_str_equal_caseless_ called with expect=%p -> %d\\n\",\n                     (void *) expect,\n                     (int) cmp_res);\n      (void) fclose(logf);\n    }\n\n  if (cmp_res)\n    return true;\n\n  return false;\n}\n"
}