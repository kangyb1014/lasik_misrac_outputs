{
  "user_message": "An agent A claimed that the following need_100_continue code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of need_100_continue.\n```c\nstatic bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    return false;\n\n  if (0 == connection->rq.remaining_upload_size)\n    return false;\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_EXPECT,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_EXPECT),\n                                     &expect,\n                                     NULL))\n    return false;\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n    return true;\n\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'connection' is declared as a pointer to a non-const struct (struct MHD_Connection *connection) yet the function, as shown, only performs read-only accesses. Per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible (i.e. const struct MHD_Connection *connection). This is a violation unless there is a reason it must be non-const (for example, if called APIs require a non-const pointer or the function may modify the object).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not proven correct from the snippet alone. MISRA C:2023 Rule 8.13 does require that a pointer should point to a const-qualified type whenever possible, but there are legitimate exceptions: e.g. the parameter must match an existing API that takes a non-const pointer, or the parameter is passed to other functions that require a non-const pointer. In this function the parameter is passed to MHD_lookup_connection_value_n and used with macros/functions whose declarations are not shown; if any of those APIs require a non-const struct MHD_Connection * (or if the function actually modifies the object in code not shown), then the non-const declaration is justified and there is no MISRA violation. If, however, the prototype of MHD_lookup_connection_value_n and all other callees accept a pointer-to-const and the function truly performs only read-only accesses, then the parameter should be declared const struct MHD_Connection * and the report would be correct. Without the relevant prototypes/contexts the claim cannot be confirmed, so the reported violation is not definitively correct."
}