{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'connection' is declared as a pointer to a non-const struct (struct MHD_Connection *connection) yet the function, as shown, only performs read-only accesses. Per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible (i.e. const struct MHD_Connection *connection). This is a violation unless there is a reason it must be non-const (for example, if called APIs require a non-const pointer or the function may modify the object).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified need_100_continue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of need_100_continue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of need_100_continue:\n```c\nstatic bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    return false;\n\n  if (0 == connection->rq.remaining_upload_size)\n    return false;\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_EXPECT,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_EXPECT),\n                                     &expect,\n                                     NULL))\n    return false;\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n    return true;\n\n  return false;\n}\n```\n</target_code>\nPlease provide the modified need_100_continue code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <sys/stat.h>\n\n/*\n * Probe logger for need_100_continue. Writes append logs to /tmp/logs/513.txt.\n * Attempts to create /tmp/logs directory but ignores failures (keeps original\n * behavior otherwise).\n */\nstatic void\nprobe_log_need_100_continue(const char *stage,\n                            const struct MHD_Connection *connection,\n                            const char *expect,\n                            int lookup_ret,\n                            int http_ver_1_1_compat,\n                            unsigned long long remaining_upload_size,\n                            int result)\n{\n  /* best-effort directory creation; ignore return value to avoid changing\n     control flow of the original function */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  FILE *f = fopen(\"/tmp/logs/513.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"need_100_continue - %s\\n\", stage ? stage : \"(null)\");\n  fprintf(f, \"  connection=%p\\n\", (void *) connection);\n  fprintf(f, \"  http_ver_1_1_compat=%d\\n\", http_ver_1_1_compat);\n  fprintf(f, \"  remaining_upload_size=%llu\\n\", remaining_upload_size);\n  fprintf(f, \"  lookup_ret=%d\\n\", lookup_ret);\n  fprintf(f, \"  expect=\\\"%s\\\"\\n\", expect ? expect : \"(null)\");\n  fprintf(f, \"  result=%d\\n\\n\", result);\n\n  fclose(f);\n}\n\nstatic bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n  int lookup_ret = -1;\n  int compat = 0;\n  unsigned long long remaining = 0u;\n\n  /* entry probe */\n  probe_log_need_100_continue(\"entry\", (const struct MHD_Connection *)connection,\n                              NULL, lookup_ret, compat, remaining, 0);\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n  {\n    /* record that HTTP version check failed */\n    compat = 0;\n    probe_log_need_100_continue(\"http version not 1.1\", (const struct MHD_Connection *)connection,\n                                NULL, lookup_ret, compat, remaining, 0);\n    return false;\n  }\n\n  compat = 1;\n\n  remaining = (unsigned long long) connection->rq.remaining_upload_size;\n  if (0 == connection->rq.remaining_upload_size)\n  {\n    probe_log_need_100_continue(\"no remaining upload\", (const struct MHD_Connection *)connection,\n                                NULL, lookup_ret, compat, remaining, 0);\n    return false;\n  }\n\n  lookup_ret = MHD_lookup_connection_value_n (connection,\n                                              MHD_HEADER_KIND,\n                                              MHD_HTTP_HEADER_EXPECT,\n                                              MHD_STATICSTR_LEN_ ( \\\n                                                MHD_HTTP_HEADER_EXPECT),\n                                              &expect,\n                                              NULL);\n\n  if (MHD_NO ==\n      lookup_ret)\n  {\n    probe_log_need_100_continue(\"no Expect header\", (const struct MHD_Connection *)connection,\n                                NULL, lookup_ret, compat, remaining, 0);\n    return false;\n  }\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n  {\n    probe_log_need_100_continue(\"matches 100-continue\", (const struct MHD_Connection *)connection,\n                                expect, lookup_ret, compat, remaining, 1);\n    return true;\n  }\n\n  probe_log_need_100_continue(\"does not match 100-continue\", (const struct MHD_Connection *)connection,\n                              expect, lookup_ret, compat, remaining, 0);\n  return false;\n}\n"
}