{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of need_100_continue:\n```c\nstatic bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    return false;\n\n  if (0 == connection->rq.remaining_upload_size)\n    return false;\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_EXPECT,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_EXPECT),\n                                     &expect,\n                                     NULL))\n    return false;\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n    return true;\n\n  return false;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    return false;\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown fragment itself. The call to MHD_IS_HTTP_VER_1_1_COMPAT does not demonstrate recursion. A violation would occur only if MHD_IS_HTTP_VER_1_1_COMPAT (or any function/macro it expands to) directly or indirectly called need_100_continue; for example, if MHD_IS_HTTP_VER_1_1_COMPAT calls helper_fn(), and helper_fn() calls need_100_continue(), that would create an indirect recursive call chain and violate MISRA C 2023 Rule 17.2."
}