{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_DLOG:\n```c\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ndaemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "From the single call site alone there is no definite violation of MISRA C 2023 Rule 8.13. Rule 8.13 concerns how pointers are declared (they should point to const-qualified types whenever possible). The fragment only shows a call to daemon->custom_error_log(...). A violation would occur if the function-pointer or its first parameter (daemon->custom_error_log_cls) or the format parameter in the function-pointer type is declared as a non-const pointer even though the pointed-to data is not modified. For example, if custom_error_log is declared as void (*custom_error_log)(void *cls, char *fmt, va_list) while it does not modify cls or fmt, then the declaration should use const (e.g. const void *cls, const char *fmt) and that would be a Rule 8.13 violation in the declaration. Given only the call site, the rule is not demonstrably violated."
}