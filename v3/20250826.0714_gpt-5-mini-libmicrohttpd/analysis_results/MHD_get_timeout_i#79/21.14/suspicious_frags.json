{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout_i:\n```c\n_MHD_EXTERN int\nMHD_get_timeout_i (struct MHD_Daemon *daemon)\n{\n#if SIZEOF_INT >= SIZEOF_INT64_T\n  return MHD_get_timeout64s (daemon);\n#else  /* SIZEOF_INT < SIZEOF_INT64_T */\n  const int64_t to64 = MHD_get_timeout64s (daemon);\n  if (INT_MAX >= to64)\n    return (int) to64;\n  return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "const int64_t to64 = MHD_get_timeout64s (daemon);",
    "return MHD_get_timeout64s (daemon);"
  ],
  "explanation": "No direct use of memcmp or any C string handling appears in this function: there are no char pointers, no string literals, and no calls to standard string functions (memcmp, strcmp, strncmp, strcpy, etc.). The body only performs conditional compilation based on SIZEOF_INT / SIZEOF_INT64_T, calls MHD_get_timeout64s, performs integer range checking against INT_MAX, and returns an integer (possibly via a cast). Those arithmetic, cast and preprocessor operations do not relate to Rule 21.14. The only locations that could possibly involve a prohibited memcmp usage in the context of this function are the calls to MHD_get_timeout64s (daemon) \u2014 the implementation of that function is outside the fragment shown, so its usage should be investigated. All other lines (preprocessor directives, the range check if (INT_MAX >= to64), the cast (int) to64, and the numeric returns) do not use memcmp and therefore do not need to be investigated for Rule 21.14."
}