{
  "user_message": "An agent A claimed that the following MHD_get_timeout_i code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_timeout_i.\n```c\n_MHD_EXTERN int\nMHD_get_timeout_i (struct MHD_Daemon *daemon)\n{\n#if SIZEOF_INT >= SIZEOF_INT64_T\n  return MHD_get_timeout64s (daemon);\n#else  /* SIZEOF_INT < SIZEOF_INT64_T */\n  const int64_t to64 = MHD_get_timeout64s (daemon);\n  if (INT_MAX >= to64)\n    return (int) to64;\n  return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter is not const-qualified even though MHD_get_timeout_i does not modify the pointed object: the function only forwards daemon to MHD_get_timeout64s and reads a timeout. Therefore the parameter should be declared as 'const struct MHD_Daemon *daemon' (unless MHD_get_timeout64s requires a non-const pointer), so Rule 8.13 is violated.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not proven correct. MISRA 8.13 does recommend that pointers point to const-qualified types when possible, but you cannot decide that solely from this function body: whether the parameter can be const depends on how the pointer is used elsewhere (notably the signature and behaviour of MHD_get_timeout64s and any callers). If MHD_get_timeout64s is declared to take a non-const struct MHD_Daemon * or actually modifies the daemon, then MHD_get_timeout_i cannot safely change its parameter to const. If, on the other hand, MHD_get_timeout64s already accepts a const struct MHD_Daemon * (or does not modify the object) then the wrapper should also accept const and the reported issue would be valid. Agent A assumed the callee accepts a const pointer without showing its declaration; that assumption is necessary to establish a definite MISRA 8.13 violation. So as presented the report is incomplete/uncertain and therefore not correct."
}