{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of file_reader:\n```c\nstatic ssize_t\nfile_reader (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  FILE *file = (FILE *) cls;\n  size_t bytes_read;\n\n  /* 'fseek' may not support files larger 2GiB, depending on platform.\n   * For production code, make sure that 'pos' has valid values, supported by\n   * 'fseek', or use 'fseeko' or similar function. */\n  if (0 != fseek (file, (long) pos, SEEK_SET))\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  bytes_read = fread (buf, 1, max, file);\n  if (0 == bytes_read)\n    return (0 != ferror (file)) ? MHD_CONTENT_READER_END_WITH_ERROR :\n           MHD_CONTENT_READER_END_OF_STREAM;\n  return (ssize_t) bytes_read;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No uses of the <string.h> string-handling functions listed by MISRA C 2023 Rule 21.17 (e.g. memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn) appear in this function. The function only calls fseek, fread and ferror, none of which are in <string.h>, so there are no direct candidates that could violate Rule 21.17.\n\nNotes on other potential concerns (not relevant to Rule 21.17):\n- fread writes up to 'max' bytes into 'buf'; correctness depends on the caller ensuring 'buf' points to an object at least 'max' bytes long. This is a caller-contract / bounds-check issue but not a <string.h> function use covered by Rule 21.17.\n- Casting 'pos' (uint64_t) to (long) for fseek can truncate large offsets and cause incorrect behavior; the comment already notes this and suggests using fseeko or validating 'pos'. This is not a <string.h> violation either.\n\nBecause Rule 21.17 is specifically about the use of string-handling functions from <string.h>, there are no fragments in this code that need investigation for that rule."
}