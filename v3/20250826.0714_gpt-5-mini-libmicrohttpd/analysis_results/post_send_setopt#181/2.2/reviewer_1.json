{
  "user_message": "An agent A claimed that the following post_send_setopt code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of post_send_setopt.\n```c\nstatic void\npost_send_setopt (struct MHD_Connection *connection,\n                  bool plain_send_next,\n                  bool push_data)\n{\n  /* Try to buffer data if not sending the final piece.\n   * Final piece is indicated by push_data == true. */\n  const bool buffer_data = (! push_data);\n\n  if (_MHD_YES == connection->is_nonip)\n    return;\n  if (buffer_data)\n    return; /* Nothing to do after send(). */\n\n#ifndef MHD_USE_MSG_MORE\n  (void) plain_send_next; /* Mute compiler warning */\n#endif /* ! MHD_USE_MSG_MORE */\n\n  /* Need to push data. */\n#ifdef MHD_TCP_CORK_NOPUSH\n#ifdef _MHD_CORK_RESET_PUSH_DATA_ALWAYS\n#ifdef _MHD_NODELAY_SET_PUSH_DATA_ALWAYS\n#ifdef MHD_USE_MSG_MORE\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n      return; /* Data was already pushed by send(). */\n  }\n  /* This is Linux kernel. There are options:\n   * * Push the data by setting of TCP_NODELAY (without change\n   *   of the cork on the socket),\n   * * Push the data by resetting of TCP_CORK.\n   * The optimal choice depends on the next final send functions\n   * used on the same socket. If TCP_NODELAY wasn't set then push\n   * data by setting TCP_NODELAY (TCP_NODELAY will not be removed\n   * and is needed to push the data by send() without MSG_MORE).\n   * If send()/sendmsg() will be used next than push data by\n   * resetting of TCP_CORK so next send without MSG_MORE will push\n   * data to the network (without additional sys-call to push data).\n   * If next final send function will not support MSG_MORE (like\n   * sendfile() or TLS-connection) than push data by setting\n   * TCP_NODELAY so socket will remain corked (no additional\n   * sys-call before next send()). */\n  if ((_MHD_ON != connection->sk_nodelay) ||\n      (! plain_send_next))\n  {\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n      return; /* Data has been pushed by TCP_NODELAY. */\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_cork_state_ (connection, false))\n      return; /* Data has been pushed by uncorking the socket. */\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n  else\n  {\n    if (MHD_connection_set_cork_state_ (connection, false))\n      return; /* Data has been pushed by uncorking the socket. */\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n      return; /* Data has been pushed by TCP_NODELAY. */\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n#else  /* ! MHD_USE_MSG_MORE */\n  /* Use setting of TCP_NODELAY here to avoid sys-call\n   * for corking the socket during sending of the next response. */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n    return; /* Data was pushed by TCP_NODELAY. */\n  /* Failed to set TCP_NODELAY for the socket.\n   * Really unlikely to happen on TCP connections. */\n  if (MHD_connection_set_cork_state_ (connection, false))\n    return; /* Data was pushed by uncorking the socket. */\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n\n  /* The socket remains corked, no way to push data */\n#endif /* ! MHD_USE_MSG_MORE */\n#else  /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n  if (MHD_connection_set_cork_state_ (connection, false))\n    return; /* Data was pushed by uncorking the socket. */\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n  return; /* Socket remains corked, no way to push data */\n#endif /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n#else  /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n  /* This is a typical *BSD or Darwin kernel. */\n\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n      return; /* Data was already pushed by send(). */\n\n    /* Unlikely to reach this code.\n     * TCP_NODELAY should be turned on before send(). */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n    {\n      /* TCP_NODELAY has been set on uncorked socket.\n       * Use zero-send to push the data. */\n      if (zero_send_ (connection))\n        return; /* The data has been pushed by zero-send. */\n    }\n\n    /* Failed to push the data by all means. */\n    /* There is nothing left to try. */\n  }\n  else\n  {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n    enum MHD_tristate old_cork_state = connection->sk_corked;\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n    /* The socket is corked or cork state is unknown. */\n\n    if (MHD_connection_set_cork_state_ (connection, false))\n    {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n      /* FreeBSD kernel */\n      if (_MHD_OFF == old_cork_state)\n        return; /* Data has been pushed by uncorking the socket. */\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n\n      /* Unlikely to reach this code.\n       * The data should be pushed by uncorking (FreeBSD) or\n       * the socket should be uncorked before send(). */\n      if ((_MHD_ON == connection->sk_nodelay) ||\n          (MHD_connection_set_nodelay_state_ (connection, true)))\n      {\n        /* TCP_NODELAY is turned ON on uncorked socket.\n         * Use zero-send to push the data. */\n        if (zero_send_ (connection))\n          return; /* The data has been pushed by zero-send. */\n      }\n    }\n    /* The socket remains corked. Data cannot be pushed. */\n  }\n#endif /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n#else  /* ! MHD_TCP_CORK_NOPUSH */\n  /* Corking is not supported. Buffering is controlled\n   * by TCP_NODELAY only. */\n  mhd_assert (_MHD_ON != connection->sk_corked);\n  if (_MHD_ON == connection->sk_nodelay)\n    return; /* Data was already pushed by send(). */\n\n  /* Unlikely to reach this code.\n   * TCP_NODELAY should be turned on before send(). */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n  {\n    /* TCP_NODELAY has been set.\n     * Use zero-send to push the data. */\n    if (zero_send_ (connection))\n      return; /* The data has been pushed by zero-send. */\n  }\n\n  /* Failed to push the data. */\n#endif /* ! MHD_TCP_CORK_NOPUSH */\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Failed to push the data from buffers to the network. \"\n               \"Client may experience some delay \"\n               \"(usually in range 200ms - 5 sec).\\n\"));\n#endif /* HAVE_MESSAGES */\n  return;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThis fragment can constitute dead code if the mhd_assert macro has no observable side effects in the deployed build (for example it expands to ((void)0) or to an expression that only reads connection->sk_corked). In that case the executed assertion does not affect program behaviour and its removal would not change the program \u2014 a dead-code situation under MISRA C 2023 Rule 2.2. If, on the other hand, mhd_assert performs an action with observable effect (logging, aborting on failure, etc.), then it is not dead code.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1756199082] post_send_setopt: entry connection=0x5585bc2c9df0 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, returning\n[1756199082] post_send_setopt: entry connection=0x5585bc2d2a80 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, returning\n[1756199082] post_send_setopt: entry connection=0x5585bc2ca090 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, returning\n[1756199082] post_send_setopt: entry connection=0x7f19d8000b90 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, returning\n[1756199082] post_send_setopt: entry connection=0x7f19d8000b90 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, returning\n[1756199082] post_send_setopt: entry connection=0x7f19d8000b90 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, returning\n[1756199082] post_send_setopt: entry connection=0x7f19d8000b90 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, returning\n[1756199082] post_send_setopt: entry connection=0x7f19d8000b90 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, returning\n[1756199082] post_send_setopt: entry connection=0x7f19d8000b90 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, returning\n[1756199082] post_send_setopt: entry connection=0x7f19d8000b90 plain_send_next=1 push_data=1 buffer_data=0 is_nonip=0 sk_corked=0 sk_nodelay=0\n[1756199082] branch: _MHD_OFF == connection->sk_corked. sk_nodelay=0\n[1756199082] attempt: set nodelay (preferred). sk_nodelay=0 plain_send_next=1\n[1756199082] post_send_setopt: MHD_connection_set_nodelay_state_ returned true -> Data pushed by TCP_NODELAY, return\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct in this context. The mhd_assert(...) statement in the branch for the !MHD_TCP_CORK_NOPUSH path is an executed statement whose removal would not change program behaviour when the mhd_assert macro expands to a no-op or to an expression with no observable side effects (for example ((void)0) or an expression that only reads a field). Under MISRA C 2023 Rule 2.2 (\u201cA project shall not contain dead code\u201d), such an executed, effect-less statement is dead code. \n\nWhether a violation actually exists therefore depends on the build configuration / definition of mhd_assert: if mhd_assert produces an observable effect (logging, abort, diagnostics, etc.) then it is not dead code; if it is compiled out to a no-op, the statement is dead code and Rule 2.2 is breached. (As a side note, the (void) plain_send_next; cast used under #ifndef MHD_USE_MSG_MORE is a similar situation: it is an executed no-op whose removal would not change behaviour, so it would also meet the definition of dead code unless its presence is considered required by the project.)"
}