{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nWhen the function is compiled with MHD_TCP_CORK_NOPUSH defined and _MHD_NODELAY_SET_PUSH_DATA_ALWAYS not defined, the nested branch contains an unconditional return (the final \u201creturn; /* Socket remains corked, no way to push data */\u201d). In that configuration control always returns before the final logging/return fragment, so the MHD_DLOG call and the trailing return are unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_send_setopt code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1811.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of post_send_setopt as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of post_send_setopt:\n```c\nstatic void\npost_send_setopt (struct MHD_Connection *connection,\n                  bool plain_send_next,\n                  bool push_data)\n{\n  /* Try to buffer data if not sending the final piece.\n   * Final piece is indicated by push_data == true. */\n  const bool buffer_data = (! push_data);\n\n  if (_MHD_YES == connection->is_nonip)\n    return;\n  if (buffer_data)\n    return; /* Nothing to do after send(). */\n\n#ifndef MHD_USE_MSG_MORE\n  (void) plain_send_next; /* Mute compiler warning */\n#endif /* ! MHD_USE_MSG_MORE */\n\n  /* Need to push data. */\n#ifdef MHD_TCP_CORK_NOPUSH\n#ifdef _MHD_CORK_RESET_PUSH_DATA_ALWAYS\n#ifdef _MHD_NODELAY_SET_PUSH_DATA_ALWAYS\n#ifdef MHD_USE_MSG_MORE\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n      return; /* Data was already pushed by send(). */\n  }\n  /* This is Linux kernel. There are options:\n   * * Push the data by setting of TCP_NODELAY (without change\n   *   of the cork on the socket),\n   * * Push the data by resetting of TCP_CORK.\n   * The optimal choice depends on the next final send functions\n   * used on the same socket. If TCP_NODELAY wasn't set then push\n   * data by setting TCP_NODELAY (TCP_NODELAY will not be removed\n   * and is needed to push the data by send() without MSG_MORE).\n   * If send()/sendmsg() will be used next than push data by\n   * resetting of TCP_CORK so next send without MSG_MORE will push\n   * data to the network (without additional sys-call to push data).\n   * If next final send function will not support MSG_MORE (like\n   * sendfile() or TLS-connection) than push data by setting\n   * TCP_NODELAY so socket will remain corked (no additional\n   * sys-call before next send()). */\n  if ((_MHD_ON != connection->sk_nodelay) ||\n      (! plain_send_next))\n  {\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n      return; /* Data has been pushed by TCP_NODELAY. */\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_cork_state_ (connection, false))\n      return; /* Data has been pushed by uncorking the socket. */\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n  else\n  {\n    if (MHD_connection_set_cork_state_ (connection, false))\n      return; /* Data has been pushed by uncorking the socket. */\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n      return; /* Data has been pushed by TCP_NODELAY. */\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n#else  /* ! MHD_USE_MSG_MORE */\n  /* Use setting of TCP_NODELAY here to avoid sys-call\n   * for corking the socket during sending of the next response. */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n    return; /* Data was pushed by TCP_NODELAY. */\n  /* Failed to set TCP_NODELAY for the socket.\n   * Really unlikely to happen on TCP connections. */\n  if (MHD_connection_set_cork_state_ (connection, false))\n    return; /* Data was pushed by uncorking the socket. */\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n\n  /* The socket remains corked, no way to push data */\n#endif /* ! MHD_USE_MSG_MORE */\n#else  /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n  if (MHD_connection_set_cork_state_ (connection, false))\n    return; /* Data was pushed by uncorking the socket. */\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n  return; /* Socket remains corked, no way to push data */\n#endif /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n#else  /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n  /* This is a typical *BSD or Darwin kernel. */\n\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n      return; /* Data was already pushed by send(). */\n\n    /* Unlikely to reach this code.\n     * TCP_NODELAY should be turned on before send(). */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n    {\n      /* TCP_NODELAY has been set on uncorked socket.\n       * Use zero-send to push the data. */\n      if (zero_send_ (connection))\n        return; /* The data has been pushed by zero-send. */\n    }\n\n    /* Failed to push the data by all means. */\n    /* There is nothing left to try. */\n  }\n  else\n  {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n    enum MHD_tristate old_cork_state = connection->sk_corked;\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n    /* The socket is corked or cork state is unknown. */\n\n    if (MHD_connection_set_cork_state_ (connection, false))\n    {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n      /* FreeBSD kernel */\n      if (_MHD_OFF == old_cork_state)\n        return; /* Data has been pushed by uncorking the socket. */\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n\n      /* Unlikely to reach this code.\n       * The data should be pushed by uncorking (FreeBSD) or\n       * the socket should be uncorked before send(). */\n      if ((_MHD_ON == connection->sk_nodelay) ||\n          (MHD_connection_set_nodelay_state_ (connection, true)))\n      {\n        /* TCP_NODELAY is turned ON on uncorked socket.\n         * Use zero-send to push the data. */\n        if (zero_send_ (connection))\n          return; /* The data has been pushed by zero-send. */\n      }\n    }\n    /* The socket remains corked. Data cannot be pushed. */\n  }\n#endif /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n#else  /* ! MHD_TCP_CORK_NOPUSH */\n  /* Corking is not supported. Buffering is controlled\n   * by TCP_NODELAY only. */\n  mhd_assert (_MHD_ON != connection->sk_corked);\n  if (_MHD_ON == connection->sk_nodelay)\n    return; /* Data was already pushed by send(). */\n\n  /* Unlikely to reach this code.\n   * TCP_NODELAY should be turned on before send(). */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n  {\n    /* TCP_NODELAY has been set.\n     * Use zero-send to push the data. */\n    if (zero_send_ (connection))\n      return; /* The data has been pushed by zero-send. */\n  }\n\n  /* Failed to push the data. */\n#endif /* ! MHD_TCP_CORK_NOPUSH */\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Failed to push the data from buffers to the network. \"\n               \"Client may experience some delay \"\n               \"(usually in range 200ms - 5 sec).\\n\"));\n#endif /* HAVE_MESSAGES */\n  return;\n}\n```\n</target_code>\nPlease provide the modified post_send_setopt code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1811.txt\", \"a\");\n  if (!f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic void\npost_send_setopt (struct MHD_Connection *connection,\n                  bool plain_send_next,\n                  bool push_data)\n{\n  /* Try to buffer data if not sending the final piece.\n   * Final piece is indicated by push_data == true. */\n  const bool buffer_data = (! push_data);\n\n  mhd_probe_log (\"post_send_setopt: entry conn=%p plain_send_next=%d push_data=%d buffer_data=%d\",\n                 (void *) connection,\n                 (int) plain_send_next,\n                 (int) push_data,\n                 (int) buffer_data);\n\n  if (_MHD_YES == connection->is_nonip)\n  {\n    mhd_probe_log (\"post_send_setopt: is_nonip => early return (no IP)\");\n    return;\n  }\n  if (buffer_data)\n  {\n    mhd_probe_log (\"post_send_setopt: buffer_data true => early return (Nothing to do after send())\");\n    return; /* Nothing to do after send(). */\n  }\n\n#ifndef MHD_USE_MSG_MORE\n  (void) plain_send_next; /* Mute compiler warning */\n#endif /* ! MHD_USE_MSG_MORE */\n\n  /* Need to push data. */\n#ifdef MHD_TCP_CORK_NOPUSH\n#ifdef _MHD_CORK_RESET_PUSH_DATA_ALWAYS\n#ifdef _MHD_NODELAY_SET_PUSH_DATA_ALWAYS\n#ifdef MHD_USE_MSG_MORE\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n    {\n      mhd_probe_log (\"post_send_setopt: sk_corked OFF and sk_nodelay ON => return (data already pushed by send())\");\n      return; /* Data was already pushed by send(). */\n    }\n  }\n  /* This is Linux kernel. There are options:\n   * * Push the data by setting of TCP_NODELAY (without change\n   *   of the cork on the socket),\n   * * Push the data by resetting of TCP_CORK.\n   * The optimal choice depends on the next final send functions\n   * used on the same socket. If TCP_NODELAY wasn't set then push\n   * data by setting TCP_NODELAY (TCP_NODELAY will not be removed\n   * and is needed to push the data by send() without MSG_MORE).\n   * If send()/sendmsg() will be used next than push data by\n   * resetting of TCP_CORK so next send without MSG_MORE will push\n   * data to the network (without additional sys-call to push data).\n   * If next final send function will not support MSG_MORE (like\n   * sendfile() or TLS-connection) than push data by setting\n   * TCP_NODELAY so socket will remain corked (no additional\n   * sys-call before next send()). */\n  if ((_MHD_ON != connection->sk_nodelay) ||\n      (! plain_send_next))\n  {\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n    {\n      mhd_probe_log (\"post_send_setopt: set_nodelay_state_ succeeded => return (Data pushed by TCP_NODELAY)\");\n      return; /* Data has been pushed by TCP_NODELAY. */\n    }\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_cork_state_ (connection, false))\n    {\n      mhd_probe_log (\"post_send_setopt: set_cork_state_ (false) succeeded => return (Data pushed by uncorking)\");\n      return; /* Data has been pushed by uncorking the socket. */\n    }\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n    mhd_probe_log (\"post_send_setopt: failed to set nodelay and failed to uncork => fallthrough (socket cannot be uncorked)\");\n  }\n  else\n  {\n    if (MHD_connection_set_cork_state_ (connection, false))\n    {\n      mhd_probe_log (\"post_send_setopt: set_cork_state_ (false) succeeded in else branch => return (Data pushed by uncorking)\");\n      return; /* Data has been pushed by uncorking the socket. */\n    }\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n    {\n      mhd_probe_log (\"post_send_setopt: set_nodelay_state_ succeeded in else branch => return (Data pushed by TCP_NODELAY)\");\n      return; /* Data has been pushed by TCP_NODELAY. */\n    }\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n    mhd_probe_log (\"post_send_setopt: failed to uncork and failed to set nodelay in else branch => fallthrough (socket cannot be uncorked)\");\n  }\n#else  /* ! MHD_USE_MSG_MORE */\n  /* Use setting of TCP_NODELAY here to avoid sys-call\n   * for corking the socket during sending of the next response. */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n  {\n    mhd_probe_log (\"post_send_setopt: set_nodelay_state_ (no MSG_MORE) succeeded => return (Data pushed by TCP_NODELAY)\");\n    return; /* Data was pushed by TCP_NODELAY. */\n  }\n  /* Failed to set TCP_NODELAY for the socket.\n   * Really unlikely to happen on TCP connections. */\n  if (MHD_connection_set_cork_state_ (connection, false))\n  {\n    mhd_probe_log (\"post_send_setopt: set_cork_state_ (false) (no MSG_MORE) succeeded => return (Data pushed by uncorking)\");\n    return; /* Data was pushed by uncorking the socket. */\n  }\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n\n  /* The socket remains corked, no way to push data */\n  mhd_probe_log (\"post_send_setopt: failed to push data (no MSG_MORE) => fallthrough (socket remains corked)\");\n#endif /* ! MHD_USE_MSG_MORE */\n#else  /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n  if (MHD_connection_set_cork_state_ (connection, false))\n  {\n    mhd_probe_log (\"post_send_setopt: set_cork_state_ (false) for !NODELAY_SET_PUSH_DATA_ALWAYS succeeded => return (Data pushed by uncorking)\");\n    return; /* Data was pushed by uncorking the socket. */\n  }\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n  mhd_probe_log (\"post_send_setopt: failed to uncork in !NODELAY_SET_PUSH_DATA_ALWAYS => returning (Socket remains corked, no way to push data)\");\n  return; /* Socket remains corked, no way to push data */\n#endif /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n#else  /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n  /* This is a typical *BSD or Darwin kernel. */\n\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n    {\n      mhd_probe_log (\"post_send_setopt: BSD path sk_corked OFF and sk_nodelay ON => return (Data already pushed)\");\n      return; /* Data was already pushed by send(). */\n    }\n\n    /* Unlikely to reach this code.\n     * TCP_NODELAY should be turned on before send(). */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n    {\n      /* TCP_NODELAY has been set on uncorked socket.\n       * Use zero-send to push the data. */\n      if (zero_send_ (connection))\n      {\n        mhd_probe_log (\"post_send_setopt: BSD path set_nodelay succeeded and zero_send_ succeeded => return (data pushed by zero-send)\");\n        return; /* The data has been pushed by zero-send. */\n      }\n    }\n\n    /* Failed to push the data by all means. */\n    /* There is nothing left to try. */\n    mhd_probe_log (\"post_send_setopt: BSD path failed to push data on uncorked socket => fallthrough\");\n  }\n  else\n  {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n    enum MHD_tristate old_cork_state = connection->sk_corked;\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n    /* The socket is corked or cork state is unknown. */\n\n    if (MHD_connection_set_cork_state_ (connection, false))\n    {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n      /* FreeBSD kernel */\n      if (_MHD_OFF == old_cork_state)\n      {\n        mhd_probe_log (\"post_send_setopt: BSD path uncorking changed state from OFF => return (data pushed by uncorking)\");\n        return; /* Data has been pushed by uncorking the socket. */\n      }\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n\n      /* Unlikely to reach this code.\n       * The data should be pushed by uncorking (FreeBSD) or\n       * the socket should be uncorked before send(). */\n      if ((_MHD_ON == connection->sk_nodelay) ||\n          (MHD_connection_set_nodelay_state_ (connection, true)))\n      {\n        /* TCP_NODELAY is turned ON on uncorked socket.\n         * Use zero-send to push the data. */\n        if (zero_send_ (connection))\n        {\n          mhd_probe_log (\"post_send_setopt: BSD path uncorked and zero_send_ succeeded => return (data pushed by zero-send)\");\n          return; /* The data has been pushed by zero-send. */\n        }\n      }\n    }\n    /* The socket remains corked. Data cannot be pushed. */\n    mhd_probe_log (\"post_send_setopt: BSD path socket remains corked => fallthrough (data cannot be pushed)\");\n  }\n#endif /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n#else  /* ! MHD_TCP_CORK_NOPUSH */\n  /* Corking is not supported. Buffering is controlled\n   * by TCP_NODELAY only. */\n  mhd_assert (_MHD_ON != connection->sk_corked);\n  if (_MHD_ON == connection->sk_nodelay)\n  {\n    mhd_probe_log (\"post_send_setopt: corking not supported and sk_nodelay ON => return (data already pushed)\");\n    return; /* Data was already pushed by send(). */\n  }\n\n  /* Unlikely to reach this code.\n   * TCP_NODELAY should be turned on before send(). */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n  {\n    /* TCP_NODELAY has been set.\n     * Use zero-send to push the data. */\n    if (zero_send_ (connection))\n    {\n      mhd_probe_log (\"post_send_setopt: cork unsupported path set_nodelay and zero_send_ succeeded => return (data pushed by zero-send)\");\n      return; /* The data has been pushed by zero-send. */\n    }\n  }\n\n  /* Failed to push the data. */\n  mhd_probe_log (\"post_send_setopt: cork unsupported path failed to push data => fallthrough\");\n#endif /* ! MHD_TCP_CORK_NOPUSH */\n#ifdef HAVE_MESSAGES\n  mhd_probe_log (\"post_send_setopt: reached final MHD_DLOG call (failure to push data)\");\n  MHD_DLOG (connection->daemon,\n            _ (\"Failed to push the data from buffers to the network. \"\n               \"Client may experience some delay \"\n               \"(usually in range 200ms - 5 sec).\\n\"));\n#endif /* HAVE_MESSAGES */\n  mhd_probe_log (\"post_send_setopt: exiting (final return)\");\n  return;\n}\n"
}