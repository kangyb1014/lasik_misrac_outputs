{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(realm) without validating 'realm' may read beyond the object bounds. For example, if the caller passes realm == NULL, strlen(realm) dereferences a null pointer; or if 'realm' points to a buffer that is not NUL-terminated, strlen will scan past the buffer until a NUL byte is found. Both situations violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2469.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  /* Probe helper: write control-flow and state info to /tmp/logs/2469.txt. */\n  static void mhd_probe_log(const char *stage,\n                            const char *username,\n                            const char *realm,\n                            const char *password,\n                            size_t bin_buf_size,\n                            size_t da_size,\n                            int size_overflow)\n  {\n    /* Use stdio functions via their declarations to avoid adding headers here. */\n    extern FILE *fopen(const char *, const char *);\n    extern int fprintf(FILE *, const char *, ...);\n    extern int fclose(FILE *);\n    FILE *f = fopen(\"/tmp/logs/2469.txt\", \"a\");\n    if (! f)\n      return;\n\n    fprintf(f, \"--- MHD_probe: %s ---\\n\", stage);\n    fprintf(f, \" username ptr=%p (%s)\\n\", (const void *) username,\n            username ? \"non-NULL\" : \"NULL\");\n    fprintf(f, \" realm    ptr=%p (%s)\\n\", (const void *) realm,\n            realm ? \"non-NULL\" : \"NULL\");\n    fprintf(f, \" password ptr=%p (%s)\\n\", (const void *) password,\n            password ? \"non-NULL\" : \"NULL\");\n    fprintf(f, \" bin_buf_size=%zu\\n\", bin_buf_size);\n    fprintf(f, \" digest algo size (digest_get_size)=%zu\\n\", da_size);\n    fprintf(f, \" size_overflow_check (digest_size > bin_buf_size)=%d\\n\",\n            size_overflow);\n    fprintf(f, \" Note: The code will call strlen(username) and strlen(realm) without prior validation here.\\n\");\n    fprintf(f, \"---------------------------\\n\");\n    fclose(f);\n  }\n\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  /* Log state after digest init (we do not change control flow or behavior). */\n  mhd_probe_log(\"after digest_init\", username, realm, password, bin_buf_size, 0U, 0);\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    /* Log before calling strlen on the parameters to capture pointer values\n       and the fact that strlen will be invoked without additional validation.\n       We intentionally do not avoid calling strlen to preserve original logic. */\n    size_t da_size = digest_get_size(&da);\n    mhd_probe_log(\"before calc_userdigest (pre-strlen)\", username, realm, password, bin_buf_size, da_size, (da_size > bin_buf_size));\n\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n\n    /* Log after attempting to compute userdigest (if reached). */\n    mhd_probe_log(\"after calc_userdigest\", username, realm, password, bin_buf_size, da_size, (da_size > bin_buf_size));\n\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n"
}