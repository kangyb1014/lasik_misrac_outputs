{
  "user_message": "An agent A claimed that the following MHD_digest_auth_calc_userdigest code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_calc_userdigest.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the caller passes a username pointer that is NULL or that points to a character array not terminated by a '\\0' within its allocated bounds, the call to strlen(username) may read beyond the object\u2019s bounds (scanning until a NUL is found) and thus violates Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[MHD_DIGEST_PROBE] stage=entry username=0x557ed49520fa realm=0x557ed4952122 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=about_to_strlen_and_calc_userdigest username=0x557ed49520fa realm=0x557ed4952122 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=after_calc_userdigest username=0x557ed49520fa realm=0x557ed4952122 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=exit username=0x557ed49520fa realm=0x557ed4952122 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=entry username=0x557ed49520fe realm=0x557ed4952107 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=about_to_strlen_and_calc_userdigest username=0x557ed49520fe realm=0x557ed4952107 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=after_calc_userdigest username=0x557ed49520fe realm=0x557ed4952107 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=exit username=0x557ed49520fe realm=0x557ed4952107 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=entry username=0x557ed495211a realm=0x557ed4952124 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=about_to_strlen_and_calc_userdigest username=0x557ed495211a realm=0x557ed4952124 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=after_calc_userdigest username=0x557ed495211a realm=0x557ed4952124 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=exit username=0x557ed495211a realm=0x557ed4952124 userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=entry username=0x557ed4952138 realm=0x557ed495213f userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=about_to_strlen_and_calc_userdigest username=0x557ed4952138 realm=0x557ed495213f userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] stage=after_calc_userdigest username=0x557ed4952138 realm=0x557ed495213f userdigest_bin=0x7ffe18d22f50 bin_buf_size=16\n[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\n[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function calls strlen(username) and strlen(realm) without validating that the pointers are non-NULL and point to NUL-terminated character arrays. Per MISRA C 2023 Rule 21.17, use of string.h functions must not result in accesses beyond the bounds of the referenced objects. If a caller passed a NULL pointer or a character array that lacks a terminating '\\0' within its allocated bounds, strlen would read out of bounds (or dereference NULL), violating the rule. The supplied probe log only shows non-NULL pointers at runtime but does not demonstrate any checks in the code; absent explicit validation or a documented and enforced precondition that the caller must supply valid NUL-terminated strings, this is a violation. (To comply, the function must validate its inputs, use bounded alternatives such as strnlen with a known maximum length, or rely on a formally specified caller precondition.)"
}