{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe case label 'MHD_TLS_CONN_NO_TLS' (commented \"Not possible\") is unreachable because the surrounding guard if (MHD_TLS_CONN_NO_TLS != connection->tls_state) prevents entering the switch when tls_state == MHD_TLS_CONN_NO_TLS. As a result the code associated with that case (and only reachable via that case value) can never execute. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1. Suggested fixes: remove the unreachable case label, or move the panic/validation check outside the guarded if so that the NO_TLS value can be handled explicitly.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_update_event_loop_info code that contains useful probe functions that print useful logs to a file \"/tmp/logs/81.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_update_event_loop_info as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_update_event_loop_info:\n```c\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_update_event_loop_info code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/81.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/81.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n  {\n    mhd_probe_log (\"MHD_connection_update_event_loop_info: connection=%p suspended=1 -> returning\", (void *)connection);\n    return; /* States will be updated after resume. */\n  }\n\n#ifdef HTTPS_SUPPORT\n  /* Log TLS state before any TLS-related decision */\n  mhd_probe_log (\"TLS: connection=%p tls_state=%d\", (void *)connection, (int)connection->tls_state);\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    mhd_probe_log (\"TLS: entering TLS-state switch for connection=%p tls_state=%d\", (void *)connection, (int)connection->tls_state);\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      mhd_probe_log (\"TLS case: MHD_TLS_CONN_INIT -> set READ for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      mhd_probe_log (\"TLS case: HANDSHAKING or WR_CLOSING for connection=%p, gnutls direction=%d\", (void *)connection, (int)gnutls_record_get_direction (connection->tls_session));\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      mhd_probe_log (\"TLS case: MHD_TLS_CONN_CONNECTED -> normal processing for connection=%p\", (void *)connection);\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      mhd_probe_log (\"TLS case: WR_CLOSED or TLS_FAILED -> CLEANUP for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n      mhd_probe_log (\"TLS case: INVALID/NO_TLS/default -> panic for connection=%p tls_state=%d\", (void *)connection, (int)connection->tls_state);\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n  else\n  {\n    /* Explicitly log the case when the TLS guard prevents entering the switch. */\n    mhd_probe_log (\"TLS: skipping TLS-state switch because tls_state == MHD_TLS_CONN_NO_TLS for connection=%p\", (void *)connection);\n  }\n#endif /* HTTPS_SUPPORT */\n\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    mhd_probe_log (\"STATE: connection=%p state=%d entering main state switch\", (void *)connection, (int)connection->state);\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      mhd_probe_log (\"STATE case: INIT/REQ_LINE_RECEIVING -> READ for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_probe_log (\"STATE case: REQ_LINE_RECEIVED -> assert for connection=%p\", (void *)connection);\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      mhd_probe_log (\"STATE case: REQ_HEADERS_RECEIVING -> READ for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_probe_log (\"STATE case: HEADERS_RECEIVED/PROCESSED -> assert for connection=%p\", (void *)connection);\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      mhd_probe_log (\"STATE case: CONTINUE_SENDING -> WRITE for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      mhd_probe_log (\"STATE case: BODY_RECEIVING for connection=%p: some_payload_processed=%d read_buffer_offset=%zu read_buffer_size=%zu\", (void *)connection, (int)connection->rq.some_payload_processed, (size_t)connection->read_buffer_offset, (size_t)connection->read_buffer_size);\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n          {\n            mhd_probe_log (\"BODY_RECEIVING -> PROCESS for connection=%p\", (void *)connection);\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          }\n          else\n          {\n            mhd_probe_log (\"BODY_RECEIVING -> PROCESS_READ for connection=%p\", (void *)connection);\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          }\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          mhd_probe_log (\"BODY_RECEIVING (chunked) -> PROCESS_READ for connection=%p\", (void *)connection);\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n      {\n        mhd_probe_log (\"BODY_RECEIVING -> READ for connection=%p\", (void *)connection);\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      }\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_probe_log (\"STATE case: BODY_RECEIVED -> assert for connection=%p\", (void *)connection);\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      mhd_probe_log (\"STATE case: FOOTERS_RECEIVING -> READ for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_probe_log (\"STATE case: FOOTERS_RECEIVED -> assert for connection=%p\", (void *)connection);\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      mhd_probe_log (\"STATE case: FULL_REQ_RECEIVED -> PROCESS for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_probe_log (\"STATE case: START_REPLY -> assert for connection=%p\", (void *)connection);\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      mhd_probe_log (\"STATE case: HEADERS_SENDING -> WRITE for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_probe_log (\"STATE case: HEADERS_SENT -> assert for connection=%p\", (void *)connection);\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      mhd_probe_log (\"STATE case: NORMAL_BODY_UNREADY -> PROCESS for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      mhd_probe_log (\"STATE case: NORMAL_BODY_READY -> WRITE for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      mhd_probe_log (\"STATE case: CHUNKED_BODY_UNREADY -> PROCESS for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      mhd_probe_log (\"STATE case: CHUNKED_BODY_READY -> WRITE for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_probe_log (\"STATE case: CHUNKED_BODY_SENT -> assert for connection=%p\", (void *)connection);\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      mhd_probe_log (\"STATE case: FOOTERS_SENDING -> WRITE for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_probe_log (\"STATE case: FULL_REPLY_SENT -> assert for connection=%p\", (void *)connection);\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      mhd_probe_log (\"STATE case: CLOSED -> CLEANUP and return for connection=%p\", (void *)connection);\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_probe_log (\"STATE case: UPGRADE -> assert for connection=%p\", (void *)connection);\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_probe_log (\"STATE case: default -> assert for connection=%p state=%d\", (void *)connection, (int)connection->state);\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      mhd_probe_log (\"IO check: connection=%p event_loop_info has READ bit -> checking/growing read buffer\", (void *)connection);\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_probe_log (\"IO check: connection=%p no buffer space -> discard_request expected=1\", (void *)connection);\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    mhd_probe_log (\"MHD_connection_update_event_loop_info: connection=%p processed -> event_loop_info=%d\", (void *)connection, (int)connection->event_loop_info);\n    break; /* Everything was processed. */\n  }\n}\n"
}