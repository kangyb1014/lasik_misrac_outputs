{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe default: mhd_assert(0); branch can be dead code when mhd_assert is compiled out (for example when configured like assert() under NDEBUG to ((void)0)) and all valid enum states are handled by the case labels. In that build the default label executes but performs no observable action, so removing it would not change program behaviour \u2014 this constitutes dead code under MISRA C 2023 Rule 2.2. (If mhd_assert performs a runtime action such as logging/abort in all builds, then the default is not dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_update_event_loop_info code that contains useful probe functions that print useful logs to a file \"/tmp/logs/82.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_update_event_loop_info as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_update_event_loop_info:\n```c\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_update_event_loop_info code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and relevant connection state. */\nstatic void\nMHD_probe_log_event (const char *where, const struct MHD_Connection *connection,\n                     const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/82.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  /* Try to log a compact but useful snapshot. Casts to unsigned long are\n     used to avoid format mismatches for integer-like fields. */\n  fprintf (f,\n           \"%s: state=%lu, tls_state=%lu, event_loop_info=0x%lx, suspended=%d, read_buffer_offset=%lu, read_buffer_size=%lu, rq.some_payload_processed=%d, rq.have_chunked_upload=%d, rq.remaining_upload_size=%lu, extra=%s\\n\",\n           where,\n           (unsigned long) connection->state,\n           (unsigned long) connection->tls_state,\n           (unsigned long) connection->event_loop_info,\n           (int) connection->suspended,\n           (unsigned long) connection->read_buffer_offset,\n           (unsigned long) connection->read_buffer_size,\n           (int) connection->rq.some_payload_processed,\n           (int) connection->rq.have_chunked_upload,\n           (unsigned long) connection->rq.remaining_upload_size,\n           extra ? extra : \"\");\n  fclose (f);\n}\n\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n\n  /* Log entry into the function with initial snapshot. */\n  MHD_probe_log_event (\"ENTRY\", connection, \"start\");\n\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      MHD_probe_log_event (\"TLS_INIT\", connection, \"set READ\");\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_probe_log_event (\"TLS_HANDSHAKE_WR_CLOSING\", connection, \"set RW based on direction\");\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      MHD_probe_log_event (\"TLS_CONNECTED\", connection, \"normal processing\");\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      MHD_probe_log_event (\"TLS_WR_CLOSED_OR_FAILED\", connection, \"set CLEANUP\");\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      /* Log the unexpected TLS state for later analysis before panic. */\n      MHD_probe_log_event (\"TLS_DEFAULT_INVALID\", connection, \"about to panic\");\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      MHD_probe_log_event (\"STATE_READ_INIT_OR_REQ_LINE_RECEIVING\", connection, \"set READ\");\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      /* Probe: capture that we hit an assert branch. This will record an\n         observable action even if mhd_assert is compiled out. */\n      MHD_probe_log_event (\"ASSERT_REQ_LINE_RECEIVED\", connection, \"mhd_assert about to be invoked\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      MHD_probe_log_event (\"STATE_REQ_HEADERS_RECEIVING\", connection, \"set READ\");\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      MHD_probe_log_event (\"ASSERT_HEADERS_RECEIVED_OR_PROCESSED\", connection, \"mhd_assert about to be invoked\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_probe_log_event (\"STATE_CONTINUE_SENDING\", connection, \"set WRITE\");\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          MHD_probe_log_event (\"BODY_RECEIVING_NONCHUNKED\", connection, \"set PROCESS or PROCESS_READ\");\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          MHD_probe_log_event (\"BODY_RECEIVING_CHUNKED\", connection, \"set PROCESS_READ\");\n        }\n      }\n      else\n      {\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n        MHD_probe_log_event (\"BODY_RECEIVING_ELSE\", connection, \"set READ\");\n      }\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      MHD_probe_log_event (\"ASSERT_BODY_RECEIVED\", connection, \"mhd_assert about to be invoked\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      MHD_probe_log_event (\"STATE_FOOTERS_RECEIVING\", connection, \"set READ\");\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      MHD_probe_log_event (\"ASSERT_FOOTERS_RECEIVED\", connection, \"mhd_assert about to be invoked\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      MHD_probe_log_event (\"STATE_FULL_REQ_RECEIVED\", connection, \"set PROCESS\");\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      MHD_probe_log_event (\"ASSERT_START_REPLY\", connection, \"mhd_assert about to be invoked\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_probe_log_event (\"STATE_HEADERS_SENDING\", connection, \"set WRITE\");\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      MHD_probe_log_event (\"ASSERT_HEADERS_SENT\", connection, \"mhd_assert about to be invoked\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      MHD_probe_log_event (\"STATE_NORMAL_BODY_UNREADY\", connection, \"set PROCESS\");\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_probe_log_event (\"STATE_NORMAL_BODY_READY\", connection, \"set WRITE\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      MHD_probe_log_event (\"STATE_CHUNKED_BODY_UNREADY\", connection, \"set PROCESS\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_probe_log_event (\"STATE_CHUNKED_BODY_READY\", connection, \"set WRITE\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      MHD_probe_log_event (\"ASSERT_CHUNKED_BODY_SENT\", connection, \"mhd_assert about to be invoked\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_probe_log_event (\"STATE_FOOTERS_SENDING\", connection, \"set WRITE\");\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      MHD_probe_log_event (\"ASSERT_FULL_REPLY_SENT\", connection, \"mhd_assert about to be invoked\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      MHD_probe_log_event (\"STATE_CLOSED\", connection, \"set CLEANUP and return\");\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      MHD_probe_log_event (\"ASSERT_UPGRADE\", connection, \"mhd_assert about to be invoked\");\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      /* Record a log so that even if mhd_assert is compiled out we have\n         evidence that the default branch was taken. */\n      MHD_probe_log_event (\"ASSERT_DEFAULT\", connection, \"mhd_assert about to be invoked (default)\");\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        MHD_probe_log_event (\"CHECK_GROW_READ_BUFFER_FAIL\", connection, \"discard_request asserted\");\n        continue;\n      }\n    }\n    MHD_probe_log_event (\"LOOP_BREAK\", connection, \"breaking out of while(1)\");\n    break; /* Everything was processed. */\n  }\n}\n"
}