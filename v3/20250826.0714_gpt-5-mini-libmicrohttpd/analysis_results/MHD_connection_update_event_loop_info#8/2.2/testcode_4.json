{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement mhd_assert(0); is intended as a diagnostic for an unreachable/invalid state. If the mhd_assert macro is a no-op in production builds (e.g. compiled out under NDEBUG or similar), then when the MHD_CONNECTION_START_REPLY case is reached the executed operation has no effect \u2014 removing it would not change program behaviour. In that build configuration this constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. (If mhd_assert actually performs a non\u2011trivial action such as aborting/logging, then removal would change behaviour and there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_update_event_loop_info code that contains useful probe functions that print useful logs to a file \"/tmp/logs/82.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_update_event_loop_info as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_update_event_loop_info:\n```c\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_update_event_loop_info code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe helper: write a concise log entry to /tmp/logs/82.txt. */\nstatic void\nMHD_log_probe (const struct MHD_Connection *connection, const char *where)\n{\n  FILE *f = fopen(\"/tmp/logs/82.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Timestamp + minimal state info that is available in this function. */\n  time_t t = time(NULL);\n  fprintf (f, \"[%ld] probe: %s; conn=%p; suspended=%d; state=%d; event_loop_info=0x%08x;\",\n           (long)t,\n           where,\n           (const void *)connection,\n           (int)connection->suspended,\n           (int)connection->state,\n           (unsigned int)connection->event_loop_info);\n#ifdef HTTPS_SUPPORT\n  fprintf (f, \" tls_state=%d;\", (int)connection->tls_state);\n#endif\n  /* Some additional fields used in logic below. */\n  fprintf (f, \" read_offset=%u; read_size=%u; discard_request=%d;\\n\",\n           (unsigned int)connection->read_buffer_offset,\n           (unsigned int)connection->read_buffer_size,\n           (int)connection->discard_request);\n  fflush (f);\n  fclose (f);\n}\n\nstatic void\nMHD_log_probe_extra (const struct MHD_Connection *connection, const char *where, const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/82.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf (f, \"[%ld] probe: %s; conn=%p; state=%d; extra=%s\\n\",\n           (long)t,\n           where,\n           (const void *)connection,\n           (int)connection->state,\n           extra ? extra : \"(null)\");\n  fflush (f);\n  fclose (f);\n}\n\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Log entry to function with basic connection snapshot. */\n  MHD_log_probe (connection, \"enter MHD_connection_update_event_loop_info\");\n\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n  {\n    MHD_log_probe (connection, \"suspended: return without update\");\n    return; /* States will be updated after resume. */\n  }\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    MHD_log_probe (connection, \"HTTPS branch entered\");\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      MHD_log_probe (connection, \"TLS INIT -> READ\");\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n      {\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n        MHD_log_probe (connection, \"TLS handshaking/wr_closing -> READ\");\n      }\n      else\n      {\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n        MHD_log_probe (connection, \"TLS handshaking/wr_closing -> WRITE\");\n      }\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      MHD_log_probe (connection, \"TLS CONNECTED -> normal processing\");\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      MHD_log_probe (connection, \"TLS WR_CLOSED/TLS_FAILED -> CLEANUP\");\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_log_probe (connection, \"TLS invalid/default -> panic\");\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    MHD_log_probe (connection, \"while-loop top\");\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      MHD_log_probe (connection, \"REQ_LINE_RECEIVING/INIT -> READ\");\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      MHD_log_probe (connection, \"REQ_LINE_RECEIVED -> assert about to run\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      MHD_log_probe (connection, \"REQ_HEADERS_RECEIVING -> READ\");\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      MHD_log_probe (connection, \"HEADERS_RECEIVED/PROCESSED -> assert about to run\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_log_probe (connection, \"CONTINUE_SENDING -> WRITE\");\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      MHD_log_probe (connection, \"BODY_RECEIVING -> check payload/buffer\");\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        MHD_log_probe (connection, \"BODY_RECEIVING: some_payload_processed && has_unprocessed_upload_body_data_in_buffer\");\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          MHD_log_probe_extra (connection, \"BODY_RECEIVING non-chunked decision\", (connection->event_loop_info == MHD_EVENT_LOOP_INFO_PROCESS) ? \"PROCESS\" : \"PROCESS_READ\");\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          MHD_log_probe (connection, \"BODY_RECEIVING chunked -> PROCESS_READ\");\n        }\n      }\n      else\n      {\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n        MHD_log_probe (connection, \"BODY_RECEIVING -> READ (no processed payload or no unprocessed buffer data)\");\n      }\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      MHD_log_probe (connection, \"BODY_RECEIVED -> assert about to run\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      MHD_log_probe (connection, \"FOOTERS_RECEIVING -> READ\");\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      MHD_log_probe (connection, \"FOOTERS_RECEIVED -> assert about to run\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      MHD_log_probe (connection, \"FULL_REQ_RECEIVED -> PROCESS\");\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      MHD_log_probe (connection, \"START_REPLY -> assert about to run (target scenario)\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_log_probe (connection, \"HEADERS_SENDING -> WRITE\");\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      MHD_log_probe (connection, \"HEADERS_SENT -> assert about to run\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      MHD_log_probe (connection, \"NORMAL_BODY_UNREADY -> PROCESS\");\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_log_probe (connection, \"NORMAL_BODY_READY -> WRITE\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      MHD_log_probe (connection, \"CHUNKED_BODY_UNREADY -> PROCESS\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_log_probe (connection, \"CHUNKED_BODY_READY -> WRITE\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      MHD_log_probe (connection, \"CHUNKED_BODY_SENT -> assert about to run\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      MHD_log_probe (connection, \"FOOTERS_SENDING -> WRITE\");\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      MHD_log_probe (connection, \"FULL_REPLY_SENT -> assert about to run\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      MHD_log_probe (connection, \"CLOSED -> CLEANUP and return\");\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      MHD_log_probe (connection, \"UPGRADE -> assert about to run\");\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      MHD_log_probe (connection, \"default -> assert about to run\");\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      MHD_log_probe (connection, \"about to check_and_grow_read_buffer_space\");\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        MHD_log_probe (connection, \"check_and_grow_read_buffer_space failed -> discard_request expected\");\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    MHD_log_probe (connection, \"break out of while: everything processed\");\n    break; /* Everything was processed. */\n  }\n}\n"
}