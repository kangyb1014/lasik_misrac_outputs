{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_n_:\n```c\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (0 == c2)\n      return 0 == c1;\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor (i = 0; i < maxlen; ++i)\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation of MISRA C 2023 Rule 21.17: the fragment for (i = 0; i < maxlen; ++i) does not invoke any of the <string.h> functions named by Rule 21.17 (memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn). Therefore Rule 21.17 is not applicable. (Note: the loop may still read str1[i]/str2[i] beyond the actual object bounds if the caller supplies pointers that are not valid for indices < maxlen or not NUL-terminated within maxlen \u2014 that is a separate out-of-bounds concern governed by other MISRA rules, not 21.17.)"
}