{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe logical-not operation applied to the constant 0 ('!0') is executed but redundant: it always evaluates to 1. Removing the '!' (i.e. using 'return 1;') does not change program behaviour, so the '!' operation is dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1502.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_n_:\n```c\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (0 == c2)\n      return 0 == c1;\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Prototype for external helper used by the original code. */\nint charsequalcaseless (char a, char b);\n\n/* Simple probe logger that appends human-readable traces to /tmp/logs/1502.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1502.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* If logging cannot be performed, preserve original behavior by doing nothing. */\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  probe_log(\"MHD_str_equal_caseless_n_ called: str1=%p str2=%p maxlen=%zu\", (void *)str1, (void *)str2, maxlen);\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    probe_log(\"iter %zu: c1=0x%02x c2=0x%02x\", i, (unsigned char)c1, (unsigned char)c2);\n    if (0 == c2)\n    {\n      int res = (0 == c1);\n      probe_log(\"end of str2 at i=%zu -> returning %d (0==c1? %d)\", i, res, (0 == c1));\n      return res;\n    }\n    if (charsequalcaseless (c1, c2))\n    {\n      probe_log(\"chars equal caseless at i=%zu: c1=0x%02x c2=0x%02x\", i, (unsigned char)c1, (unsigned char)c2);\n      continue;\n    }\n    else\n    {\n      probe_log(\"chars differ at i=%zu: c1=0x%02x c2=0x%02x -> returning 0\", i, (unsigned char)c1, (unsigned char)c2);\n      return 0;\n    }\n  }\n  probe_log(\"reached maxlen=%zu -> returning !0\", maxlen);\n  return ! 0;\n}\n"
}