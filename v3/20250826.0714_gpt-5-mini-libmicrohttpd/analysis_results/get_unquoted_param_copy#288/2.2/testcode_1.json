{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion mhd_assert(0 != param->value.len) can constitute dead code if mhd_assert is a side\u2011effect\u2011free check (e.g. expands to an expression that only tests the condition or to (void)0 in some builds). In that case the statement is executed only to verify an invariant and has no effect on normal program behaviour; removing it would not change the program\u2019s behaviour (except removing the runtime check), so it meets the definition of dead code and thus violates Rule 2.2. (If, conversely, mhd_assert is implemented to produce a visible effect on failure\u2014terminate, log, etc.\u2014then its removal would change behaviour and it would not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param_copy code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2882.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_unquoted_param_copy as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param_copy:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL == unquoted->str)\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  if (! param->quoted)\n  {\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\nPlease provide the modified get_unquoted_param_copy code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helpers: write control-flow and state information to file */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2882.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void log_param_state(const struct MHD_RqDAuthParam *param, const char *stage)\n{\n    if (NULL == param)\n    {\n        log_probe(\"%s: param == NULL\", stage);\n        return;\n    }\n\n    /* Log key fields relevant to the violation scenario */\n    log_probe(\"%s: param=%p value.str=%p value.len=%zu quoted=%d\",\n              stage,\n              (const void *)param,\n              (const void *)param->value.str,\n              (size_t)param->value.len,\n              (int)param->quoted);\n}\n\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  /* Log entry and parameter state before assertions so that we capture evidence\n     even if assertions are compiled out or trigger a terminate in some builds. */\n  log_probe(\"ENTER get_unquoted_param_copy: this invocation\");\n  log_param_state(param, \"BEFORE_ASSERTS\");\n\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  log_probe(\"Alloc request: size=%zu (value.len + 1)\", (size_t)(param->value.len + 1));\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  log_probe(\"get_buffer_for_size returned: unquoted->str=%p ptmp2=%p *ptmp2_size=%zu\",\n            (const void *)unquoted->str,\n            (const void *)ptmp2,\n            (ptmp2_size ? (size_t)*ptmp2_size : 0));\n\n  if (NULL == unquoted->str)\n  {\n    enum _MHD_GetUnqResult res = (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n    log_probe(\"Buffer allocation failed: returning %d (too_large=%d)\", (int)res,\n              (int)(param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE));\n    return res;\n  }\n\n  if (! param->quoted)\n  {\n    log_probe(\"Value not quoted: copying %zu bytes from %p to %p\",\n              (size_t)param->value.len,\n              (const void *)param->value.str,\n              (const void *)unquoted->str);\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n    log_probe(\"RETURN _MHD_UNQ_OK (not quoted): unquoted->len=%zu\", (size_t)unquoted->len);\n    return _MHD_UNQ_OK;\n  }\n\n  log_probe(\"Value is quoted: calling MHD_str_unquote on %p len=%zu\",\n            (const void *)param->value.str,\n            (size_t)param->value.len);\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n  log_probe(\"MHD_str_unquote returned: unquoted->len=%zu\", (size_t)unquoted->len);\n\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  log_probe(\"RETURN _MHD_UNQ_OK (quoted): unquoted->len=%zu\", (size_t)unquoted->len);\n  return _MHD_UNQ_OK;\n}\n"
}