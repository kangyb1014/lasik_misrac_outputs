{
  "user_message": "An agent A claimed that the following get_unquoted_param_copy code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_unquoted_param_copy.\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL == unquoted->str)\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  if (! param->quoted)\n  {\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe memcpy source is param->value.str accessed via a const struct pointer, but the member itself is not const-qualified (likely declared as char *str). The code reads from that buffer only, so the pointer should point to a const-qualified type (const char *) to show the data is not modified. Passing a non-const char * as memcpy source thus violates MISRA C 2023 Rule 8.13. Suggested fix: declare the member as const char *str (or use a local const char *src = param->value.str) so the pointer points to a const-qualified type.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA 8.13 concerns pointer declarations: a pointer should be declared to point to a const-qualified type when that is possible. In this snippet there is no new pointer declaration that clearly violates that intent. Note these points:\n\n- param is declared as const struct MHD_RqDAuthParam *param, so the expression param->value.str has type \"char * const\" (a const-qualified pointer object whose pointed-to type is char). That means you cannot assign to the member through the const-qualified struct lvalue, but it does not itself create a local pointer declaration to a non-const pointee inside this function.\n\n- memcpy's prototype is void *memcpy(void *dest, const void *src, size_t), so passing a char * (or char * const) as the source converts to const void * and is appropriate for a read operation; this by itself is not a violation of 8.13.\n\n- To claim a violation you would need to show a pointer declaration that should have been declared to point-to-const (and where making it const is possible). If the struct member is indeed declared as \"char *str\" in the type definition, then that is a declaration outside this function; whether it can/should be changed to \"const char *str\" depends on other uses in the code base. If you want to satisfy MISRA 8.13 locally in this function, a small non-invasive fix is to introduce a local declaration: \"const char *src = param->value.str;\" and use src in the memcpy/MHD_str_unquote calls. That makes the intent explicit and satisfies the rule for this function without changing the struct definition.\n\nGiven the snippet alone, the agent's claim that this code violates MISRA C 2023 Rule 8.13 is not supported."
}