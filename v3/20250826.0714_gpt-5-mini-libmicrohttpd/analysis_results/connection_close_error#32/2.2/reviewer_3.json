{
  "user_message": "An agent A claimed that the following connection_close_error code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of connection_close_error.\n```c\nstatic void\nconnection_close_error (struct MHD_Connection *connection,\n                        const char *emsg)\n{\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  if (NULL != emsg)\n    MHD_DLOG (connection->daemon,\n              \"%s\\n\",\n              emsg);\n#else  /* ! HAVE_MESSAGES */\n  (void) emsg; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n  MHD_connection_close_ (connection,\n                         MHD_REQUEST_TERMINATED_WITH_ERROR);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression-statement \u201c(void) emsg;\u201d is executed but has no effect on program behaviour (it only suppresses an unused-parameter warning). Removing that statement does not change runtime behaviour for a normal const char * parameter, so it constitutes dead code under Rule 2.2. (Only if evaluating the parameter had observable side-effects \u2014 e.g. emsg were volatile or its evaluation triggered a side-effect \u2014 would this not be dead code.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The statement \u201c(void) emsg;\u201d in the !HAVE_MESSAGES branch is an expression-statement that has no observable effect at runtime for a plain const char * parameter; removing it does not change program behaviour, so it meets the definition of dead code in MISRA C 2023 Rule 2.2. (If evaluating the parameter produced observable side-effects \u2014 e.g. emsg were volatile or evaluation invoked a side-effect \u2014 it would not be dead code, but that is not the case here.) Therefore the report is correct: the code contains dead code under Rule 2.2 (or a documented deviation/alternative suppression technique should be used)."
}