{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_increment_response_rc:\n```c\nvoid\nMHD_increment_response_rc (struct MHD_Response *response)\n{\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  (response->reference_count)++;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(response->reference_count)++;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "In the provided function the increment statement is reachable: there is no prior return, infinite loop, nor a non-returning call that would prevent control flow from reaching (response->reference_count)++. A concrete violation scenario would be if a return or an infinite loop were inserted before the increment, e.g.:\n\nvoid MHD_increment_response_rc(struct MHD_Response *response)\n{\n  return; /* makes the next line unreachable */\n  (response->reference_count)++; /* unreachable code \u2014 violates Rule 2.1 */\n}\n\nOr if a call to a noreturn function (e.g. exit()) or an unconditional goto to a location after the increment were placed before it."
}