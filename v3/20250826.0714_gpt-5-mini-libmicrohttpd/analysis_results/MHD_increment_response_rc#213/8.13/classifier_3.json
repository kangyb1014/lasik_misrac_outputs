{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_increment_response_rc:\n```c\nvoid\nMHD_increment_response_rc (struct MHD_Response *response)\n{\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  (response->reference_count)++;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_mutex_unlock_chk_ (&response->mutex);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated in normal use: MHD_mutex_unlock_chk_ is expected to modify the mutex state (unlocking it), so it must accept a pointer to a non-const mutex; passing &response->mutex therefore does not violate Rule 8.13. (Hypothetical violation: if the function actually did not modify the mutex but its parameter was declared as a non-const pointer, or conversely if the function could be declared to take a pointer-to-const, then the non-const usage would violate the rule.)"
}