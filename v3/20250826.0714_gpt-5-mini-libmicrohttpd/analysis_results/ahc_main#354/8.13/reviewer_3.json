{
  "user_message": "An agent A claimed that the following ahc_main code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_main.\n```c\nstatic enum MHD_Result\nahc_main (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size,\n          void **req_cls)\n{\n  static int already_called_marker;\n  size_t url_len;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      && (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return reply_with_method_not_supported (connection);\n\n  if (0 != *upload_data_size)\n    return MHD_NO; /* No upload expected for GET or HEAD */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (url, \"/\"))\n    return reply_with_main_page (connection);\n\n  url_len = strlen (url);\n\n  if ((strlen (SEC_AREA1_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA1_URL, strlen (SEC_AREA1_URL))))\n    return handle_sec_areas_req (connection, url, 1); /* The requested URL is within SEC_AREA1_URL */\n\n  if ((strlen (SEC_AREA2_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA2_URL, strlen (SEC_AREA2_URL))))\n    return handle_sec_areas_req (connection, url, 2); /* The requested URL is within SEC_AREA2_URL */\n\n  return reply_with_page_not_found (connection);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'void *cls' is declared as a non-const pointer but is neither used nor used to modify pointee data in the function. According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified (i.e. const void *cls) whenever possible. If the non-const signature is required to match an external callback API (library prototype), that is a justified exception; otherwise this is a violation and the parameter should be changed to const void *cls.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct in this context. MISRA C 2023 Rule 8.13 indeed recommends that a pointer should point to a const-qualified type whenever possible, but it also recognises justified exceptions where changing the type would break an external interface. ahc_main follows the typical callback signature used by libraries such as libmicrohttpd (e.g. MHD_AccessHandlerCallback), which requires a parameter of type void *cls (and void **con_cls). Because ahc_main must match that external prototype, the parameter cannot be changed to const void * without breaking the API \u2014 this is a legitimate, justified exception to Rule 8.13. The parameter is unused in the function (hence the (void) cls;), but that does not remove the requirement to match the external callback signature. Therefore the reported violation is not valid here."
}