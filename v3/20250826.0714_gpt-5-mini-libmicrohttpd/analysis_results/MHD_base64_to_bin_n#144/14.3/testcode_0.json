{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe code contains an if (1) statement \u2014 the controlling expression is the constant true (invariant). This is not an allowed exception (it's not creating an infinite loop nor a do-while with a constant false integer expression), so the invariant controlling expression violates MISRA C 2023 Rule 14.3. Replace the if (1) with an unconditional block (or remove it) or apply an approved deviation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_base64_to_bin_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1445.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_base64_to_bin_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_base64_to_bin_n:\n```c\nsize_t\nMHD_base64_to_bin_n (const char *base64,\n                     size_t base64_len,\n                     void *bin,\n                     size_t bin_size)\n{\n#if MHD_BASE64_FUNC_VERSION >= 2\n  static const MHD_base64_map_type_ map[] = {\n    /* -1 = invalid char, -2 = padding\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    NUL,  SOH,  STX,  ETX,  EOT,  ENQ,  ACK,  BEL,  */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,\n    BS,   HT,   LF,   VT,   FF,   CR,   SO,   SI,   */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    DLE,  DC1,  DC2,  DC3,  DC4,  NAK,  SYN,  ETB,  */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,\n    CAN,  EM,   SUB,  ESC,  FS,   GS,   RS,   US,   */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    ' ',  '!',  '\"',  '#',  '$',  '%',  '&',  '\\'', */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,\n    '(',  ')',  '*',  '+',  ',',  '-',  '.',  '/',  */\n    -1,   -1,   -1,   62,   -1,   -1,   -1,   63,\n    /*\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n    '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  */\n    52,   53,   54,   55,   56,   57,   58,   59,\n    /*\n    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,\n    '8',  '9',  ':',  ';',  '<',  '=',  '>',  '?',  */\n    60,   61,   -1,   -1,   -1,   -2,   -1,   -1,\n    /*\n    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n    '@',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  */\n    -1,    0,    1,    2,    3,    4,    5,    6,\n    /*\n    0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,\n    'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  */\n    7,     8,    9,   10,   11,   12,   13,   14,\n    /*\n    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,\n    'P',  'Q',  'R',  'S',  'T',  'U',  'V',  'W',  */\n    15,   16,   17,   18,   19,   20,   21,   22,\n    /*\n     0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,\n    'X',  'Y',  'Z',  '[',  '\\',  ']',  '^',  '_',  */\n    23,   24,   25,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n    '`',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  */\n    -1,   26,   27,   28,   29,   30,   31,   32,\n    /*\n    0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n    'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  */\n    33,   34,   35,   36,   37,   38,   39,   40,\n    /*\n    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n    'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  */\n    41,   42,   43,   44,   45,   46,   47,   48,\n    /*\n    0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,\n    'x',  'y',  'z',  '{',  '|',  '}',  '~',  DEL,  */\n    49,   50,   51,   -1,   -1,   -1,   -1,   -1\n\n#if MHD_BASE64_FUNC_VERSION == 3\n    ,\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* 80..8F */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* 90..9F */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* A0..AF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* B0..BF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* C0..CF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* D0..DF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* E0..EF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* F0..FF */\n#endif /* ! MHD_BASE64_FUNC_VERSION == 3 */\n  };\n#define base64_char_to_value_(c) map[(c)]\n#endif /* MHD_BASE64_FUNC_VERSION >= 2 */\n  const uint8_t *const in = (const uint8_t *) base64;\n  uint8_t *const out = (uint8_t *) bin;\n  size_t i;\n  size_t j;\n  if (0 == base64_len)\n    return 0;  /* Nothing to decode */\n  if (0 != base64_len % 4)\n    return 0;  /* Wrong input length */\n  if (base64_len / 4 * 3 - 2 > bin_size)\n    return 0;\n\n  j = 0;\n  for (i = 0; i < (base64_len - 4); i += 4)\n  {\n#if MHD_BASE64_FUNC_VERSION == 2\n    if (0 != (0x80 & (in[i] | in[i + 1] | in[i + 2] | in[i + 3])))\n      return 0;\n#endif /* MHD_BASE64_FUNC_VERSION == 2 */\n    if (1)\n    {\n      const MHD_base64_map_type_ v1 = base64_char_to_value_ (in[i + 0]);\n      const MHD_base64_map_type_ v2 = base64_char_to_value_ (in[i + 1]);\n      const MHD_base64_map_type_ v3 = base64_char_to_value_ (in[i + 2]);\n      const MHD_base64_map_type_ v4 = base64_char_to_value_ (in[i + 3]);\n      if ((0 > v1) || (0 > v2) || (0 > v3) || (0 > v4))\n        return 0;\n      out[j + 0] = (uint8_t) (((uint8_t) (((uint8_t) v1) << 2))\n                              | ((uint8_t) (((uint8_t) v2) >> 4)));\n      out[j + 1] = (uint8_t) (((uint8_t) (((uint8_t) v2) << 4))\n                              | ((uint8_t) (((uint8_t) v3) >> 2)));\n      out[j + 2] = (uint8_t) (((uint8_t) (((uint8_t) v3) << 6))\n                              | ((uint8_t) v4));\n    }\n    j += 3;\n  }\n#if MHD_BASE64_FUNC_VERSION == 2\n  if (0 != (0x80 & (in[i] | in[i + 1] | in[i + 2] | in[i + 3])))\n    return 0;\n#endif /* MHD_BASE64_FUNC_VERSION == 2 */\n  if (1)\n  { /* The last four chars block */\n    const MHD_base64_map_type_ v1 = base64_char_to_value_ (in[i + 0]);\n    const MHD_base64_map_type_ v2 = base64_char_to_value_ (in[i + 1]);\n    const MHD_base64_map_type_ v3 = base64_char_to_value_ (in[i + 2]);\n    const MHD_base64_map_type_ v4 = base64_char_to_value_ (in[i + 3]);\n    if ((0 > v1) || (0 > v2))\n      return 0; /* Invalid char or padding at first two positions */\n    mhd_assert (j < bin_size);\n    out[j++] = (uint8_t) (((uint8_t) (((uint8_t) v1) << 2))\n                          | ((uint8_t) (((uint8_t) v2) >> 4)));\n    if (0 > v3)\n    { /* Third char is either padding or invalid */\n      if ((-2 != v3) || (-2 != v4))\n        return 0;  /* Both two last chars must be padding */\n      if (0 != (uint8_t) (((uint8_t) v2) << 4))\n        return 0;  /* Wrong last char */\n      return j;\n    }\n    if (j >= bin_size)\n      return 0; /* Not enough space */\n    out[j++] = (uint8_t) (((uint8_t) (((uint8_t) v2) << 4))\n                          | ((uint8_t) (((uint8_t) v3) >> 2)));\n    if (0 > v4)\n    { /* Fourth char is either padding or invalid */\n      if (-2 != v4)\n        return 0;  /* The char must be padding */\n      if (0 != (uint8_t) (((uint8_t) v3) << 6))\n        return 0;  /* Wrong last char */\n      return j;\n    }\n    if (j >= bin_size)\n      return 0; /* Not enough space */\n    out[j++] = (uint8_t) (((uint8_t) (((uint8_t) v3) << 6))\n                          | ((uint8_t) v4));\n  }\n  return j;\n#if MHD_BASE64_FUNC_VERSION >= 2\n#undef base64_char_to_value_\n#endif /* MHD_BASE64_FUNC_VERSION >= 2 */\n}\n```\n</target_code>\nPlease provide the modified MHD_base64_to_bin_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Simple probe logger that appends messages to /tmp/logs/1445.txt.\n   It intentionally does not change program state and preserves original logic. */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/1445.txt\", \"a\");\n  if (NULL == f)\n  {\n    return; /* If logging is not available, do nothing to preserve semantics */\n  }\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nsize_t\nMHD_base64_to_bin_n (const char *base64,\n                     size_t base64_len,\n                     void *bin,\n                     size_t bin_size)\n{\n#if MHD_BASE64_FUNC_VERSION >= 2\n  static const MHD_base64_map_type_ map[] = {\n    /* -1 = invalid char, -2 = padding\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    NUL,  SOH,  STX,  ETX,  EOT,  ENQ,  ACK,  BEL,  */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,\n    BS,   HT,   LF,   VT,   FF,   CR,   SO,   SI,   */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    DLE,  DC1,  DC2,  DC3,  DC4,  NAK,  SYN,  ETB,  */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,\n    CAN,  EM,   SUB,  ESC,  FS,   GS,   RS,   US,   */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    ' ',  '!',  '\"',  '#',  '$',  '%',  '&',  '\\'', */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,\n    '(',  ')',  '*',  '+',  ',',  '-',  '.',  '/',  */\n    -1,   -1,   -1,   62,   -1,   -1,   -1,   63,\n    /*\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n    '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  */\n    52,   53,   54,   55,   56,   57,   58,   59,\n    /*\n    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,\n    '8',  '9',  ':',  ';',  '<',  '=',  '>',  '?',  */\n    60,   61,   -1,   -1,   -1,   -2,   -1,   -1,\n    /*\n    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n    '@',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  */\n    -1,    0,    1,    2,    3,    4,    5,    6,\n    /*\n    0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,\n    'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  */\n    7,     8,    9,   10,   11,   12,   13,   14,\n    /*\n    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,\n    'P',  'Q',  'R',  'S',  'T',  'U',  'V',  'W',  */\n    15,   16,   17,   18,   19,   20,   21,   22,\n    /*\n     0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,\n    'X',  'Y',  'Z',  '[',  '\\\\',  ']',  '^',  '_',  */\n    23,   24,   25,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n    '`',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  */\n    -1,   26,   27,   28,   29,   30,   31,   32,\n    /*\n    0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n    'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  */\n    33,   34,   35,   36,   37,   38,   39,   40,\n    /*\n    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n    'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  */\n    41,   42,   43,   44,   45,   46,   47,   48,\n    /*\n    0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,\n    'x',  'y',  'z',  '{',  '|',  '}',  '~',  DEL,  */\n    49,   50,   51,   -1,   -1,   -1,   -1,   -1\n\n#if MHD_BASE64_FUNC_VERSION == 3\n    ,\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* 80..8F */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* 90..9F */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* A0..AF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* B0..BF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* C0..CF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* D0..DF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* E0..EF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* F0..FF */\n#endif /* ! MHD_BASE64_FUNC_VERSION == 3 */\n  };\n#define base64_char_to_value_(c) map[(c)]\n#endif /* MHD_BASE64_FUNC_VERSION >= 2 */\n  const uint8_t *const in = (const uint8_t *) base64;\n  uint8_t *const out = (uint8_t *) bin;\n  size_t i;\n  size_t j;\n\n  mhd_log_probe(\"ENTER: MHD_base64_to_bin_n(base64_len=%zu, bin_size=%zu)\", base64_len, bin_size);\n\n  if (0 == base64_len)\n  {\n    mhd_log_probe(\"RETURN: base64_len == 0 -> 0\");\n    return 0;  /* Nothing to decode */\n  }\n  if (0 != base64_len % 4)\n  {\n    mhd_log_probe(\"RETURN: base64_len %% 4 != 0 (base64_len=%zu) -> 0\", base64_len);\n    return 0;  /* Wrong input length */\n  }\n  if (base64_len / 4 * 3 - 2 > bin_size)\n  {\n    mhd_log_probe(\"RETURN: output buffer too small (needed=%zu, bin_size=%zu)\", base64_len / 4 * 3 - 2, bin_size);\n    return 0;\n  }\n\n  j = 0;\n  for (i = 0; i < (base64_len - 4); i += 4)\n  {\n#if MHD_BASE64_FUNC_VERSION == 2\n    if (0 != (0x80 & (in[i] | in[i + 1] | in[i + 2] | in[i + 3])))\n    {\n      mhd_log_probe(\"RETURN: non-ASCII char detected in block at i=%zu -> 0\", i);\n      return 0;\n    }\n#endif /* MHD_BASE64_FUNC_VERSION == 2 */\n    if (1)\n    {\n      mhd_log_probe(\"BLOCK: processing block at i=%zu j=%zu bytes=[%u,%u,%u,%u]\",\n                    i, j, (unsigned) in[i + 0], (unsigned) in[i + 1], (unsigned) in[i + 2], (unsigned) in[i + 3]);\n      const MHD_base64_map_type_ v1 = base64_char_to_value_ (in[i + 0]);\n      const MHD_base64_map_type_ v2 = base64_char_to_value_ (in[i + 1]);\n      const MHD_base64_map_type_ v3 = base64_char_to_value_ (in[i + 2]);\n      const MHD_base64_map_type_ v4 = base64_char_to_value_ (in[i + 3]);\n      mhd_log_probe(\"VALUES: v1=%d v2=%d v3=%d v4=%d\", (int) v1, (int) v2, (int) v3, (int) v4);\n      if ((0 > v1) || (0 > v2) || (0 > v3) || (0 > v4))\n      {\n        mhd_log_probe(\"RETURN: invalid/base64 padding detected in block at i=%zu -> 0\", i);\n        return 0;\n      }\n      out[j + 0] = (uint8_t) (((uint8_t) (((uint8_t) v1) << 2))\n                              | ((uint8_t) (((uint8_t) v2) >> 4)));\n      out[j + 1] = (uint8_t) (((uint8_t) (((uint8_t) v2) << 4))\n                              | ((uint8_t) (((uint8_t) v3) >> 2)));\n      out[j + 2] = (uint8_t) (((uint8_t) (((uint8_t) v3) << 6))\n                              | ((uint8_t) v4));\n      mhd_log_probe(\"OUTPUT_BYTES: j=%zu -> [%u,%u,%u]\",\n                    j, (unsigned) out[j + 0], (unsigned) out[j + 1], (unsigned) out[j + 2]);\n    }\n    j += 3;\n  }\n#if MHD_BASE64_FUNC_VERSION == 2\n  if (0 != (0x80 & (in[i] | in[i + 1] | in[i + 2] | in[i + 3])))\n  {\n    mhd_log_probe(\"RETURN: non-ASCII char detected in final block at i=%zu -> 0\", i);\n    return 0;\n  }\n#endif /* MHD_BASE64_FUNC_VERSION == 2 */\n  if (1)\n  { /* The last four chars block */\n    mhd_log_probe(\"FINAL_BLOCK: i=%zu j=%zu bytes=[%u,%u,%u,%u]\",\n                  i, j, (unsigned) in[i + 0], (unsigned) in[i + 1], (unsigned) in[i + 2], (unsigned) in[i + 3]);\n    const MHD_base64_map_type_ v1 = base64_char_to_value_ (in[i + 0]);\n    const MHD_base64_map_type_ v2 = base64_char_to_value_ (in[i + 1]);\n    const MHD_base64_map_type_ v3 = base64_char_to_value_ (in[i + 2]);\n    const MHD_base64_map_type_ v4 = base64_char_to_value_ (in[i + 3]);\n    mhd_log_probe(\"FINAL_VALUES: v1=%d v2=%d v3=%d v4=%d\", (int) v1, (int) v2, (int) v3, (int) v4);\n    if ((0 > v1) || (0 > v2))\n    {\n      mhd_log_probe(\"RETURN: invalid char or padding at first two positions in final block -> 0\");\n      return 0; /* Invalid char or padding at first two positions */\n    }\n    mhd_assert (j < bin_size);\n    out[j++] = (uint8_t) (((uint8_t) (((uint8_t) v1) << 2))\n                          | ((uint8_t) (((uint8_t) v2) >> 4)));\n    mhd_log_probe(\"FINAL_OUTPUT_BYTE1: j=%zu value=%u\", (size_t)(j - 1), (unsigned) out[j - 1]);\n    if (0 > v3)\n    { /* Third char is either padding or invalid */\n      if ((-2 != v3) || (-2 != v4))\n      {\n        mhd_log_probe(\"RETURN: both two last chars must be padding in final block -> 0\");\n        return 0;  /* Both two last chars must be padding */\n      }\n      if (0 != (uint8_t) (((uint8_t) v2) << 4))\n      {\n        mhd_log_probe(\"RETURN: wrong last char (non-zero lower bits) in final block -> 0\");\n        return 0;  /* Wrong last char */\n      }\n      mhd_log_probe(\"RETURN: final block ended with padding, bytes_written=%zu\", j);\n      return j;\n    }\n    if (j >= bin_size)\n    {\n      mhd_log_probe(\"RETURN: not enough space before writing second byte in final block -> 0\");\n      return 0; /* Not enough space */\n    }\n    out[j++] = (uint8_t) (((uint8_t) (((uint8_t) v2) << 4))\n                          | ((uint8_t) (((uint8_t) v3) >> 2)));\n    mhd_log_probe(\"FINAL_OUTPUT_BYTE2: j=%zu value=%u\", (size_t)(j - 1), (unsigned) out[j - 1]);\n    if (0 > v4)\n    { /* Fourth char is either padding or invalid */\n      if (-2 != v4)\n      {\n        mhd_log_probe(\"RETURN: fourth char must be padding in final block -> 0\");\n        return 0;  /* The char must be padding */\n      }\n      if (0 != (uint8_t) (((uint8_t) v3) << 6))\n      {\n        mhd_log_probe(\"RETURN: wrong last char (non-zero lower bits) in final block (v3 check) -> 0\");\n        return 0;  /* Wrong last char */\n      }\n      mhd_log_probe(\"RETURN: final block ended with single padding, bytes_written=%zu\", j);\n      return j;\n    }\n    if (j >= bin_size)\n    {\n      mhd_log_probe(\"RETURN: not enough space before writing third byte in final block -> 0\");\n      return 0; /* Not enough space */\n    }\n    out[j++] = (uint8_t) (((uint8_t) (((uint8_t) v3) << 6))\n                          | ((uint8_t) v4));\n    mhd_log_probe(\"FINAL_OUTPUT_BYTE3: j=%zu value=%u\", (size_t)(j - 1), (unsigned) out[j - 1]);\n  }\n  mhd_log_probe(\"RETURN: success bytes_written=%zu\", j);\n  return j;\n#if MHD_BASE64_FUNC_VERSION >= 2\n#undef base64_char_to_value_\n#endif /* MHD_BASE64_FUNC_VERSION >= 2 */\n}\n"
}