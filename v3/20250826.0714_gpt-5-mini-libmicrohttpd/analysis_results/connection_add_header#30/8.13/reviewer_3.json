{
  "user_message": "An agent A claimed that the following connection_add_header code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of connection_add_header.\n```c\nstatic enum MHD_Result\nconnection_add_header (void *cls,\n                       const char *key,\n                       size_t key_size,\n                       const char *value,\n                       size_t value_size,\n                       enum MHD_ValueKind kind)\n{\n  struct MHD_Connection *connection = (struct MHD_Connection *) cls;\n  if (MHD_NO ==\n      MHD_set_connection_value_n (connection,\n                                  kind,\n                                  key,\n                                  key_size,\n                                  value,\n                                  value_size))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in pool to allocate header record!\\n\"));\n#endif\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                    ERR_MSG_REQUEST_TOO_BIG);\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes a translated string via _(\"...\") and the daemon pointer to MHD_DLOG. If the _ macro/gettext and/or MHD_DLOG are declared to use non-const char * (a common case for gettext returning char * and logging APIs taking char *), then an immutable string literal and a parameter that is not modified are being referenced by non-const pointers. Per MISRA C 2023 Rule 8.13 both should use const-qualified types (const char * and/or a pointer-to-const daemon) whenever possible. Therefore, if _() or MHD_DLOG use non-const pointer types, this is a violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the code shown. MISRA C:2023 Rule 8.13 is about how pointer types should be declared (a pointer should point to a const-qualified type whenever possible). The connection_add_header function itself already uses const for the string parameters (const char *key, const char *value) and only casts the incoming void *cls to struct MHD_Connection * (presumably because the connection object is intended to be modified). The only place Agent A points to is the call to MHD_DLOG and the use of the _() translation macro. If the declarations of _ or MHD_DLOG themselves use non-const pointer types, then those declarations (i.e. the external API prototypes) would be the place that can violate 8.13 \u2014 not this call site. A call site passing a string literal or a const-qualified object to a function that happens to take a non-const pointer does not itself change the function\u2019s declarations; the potential non-constness problem lies in the API declarations, which are outside the shown code. In short: this function does not demonstrate a Rule 8.13 violation; any violation would be in the (unshown) declarations of _ or MHD_DLOG if they failed to qualify pointers as const."
}