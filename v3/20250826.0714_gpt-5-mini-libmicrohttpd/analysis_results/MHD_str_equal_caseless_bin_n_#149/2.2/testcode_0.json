{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe 'continue;' statement inside the for-loop is executed whenever charsequalcaseless(c1, c2) is true. Removing that single 'continue;' does not change the program behavior because control simply reaches the end of the loop body and proceeds to the next iteration in either case. Since the operation is executed but its removal would not affect behavior, it is dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_bin_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1492.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_bin_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_bin_n_:\n```c\nbool\nMHD_str_equal_caseless_bin_n_ (const char *const str1,\n                               const char *const str2,\n                               size_t len)\n{\n  size_t i;\n\n  for (i = 0; i < len; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_bin_n_ code.\n",
  "test_code": "typedef struct FILE FILE;\n\n/* Forward declarations for logging functions from stdio.h. */\nextern FILE *fopen (const char *filename, const char *mode);\nextern int fprintf (FILE *stream, const char *format, ...);\nextern int fclose (FILE *stream);\n\n/* Helper to append a single log line describing the comparison state. */\nstatic void\nMHD_log_compare_state (size_t i, unsigned char c1, unsigned char c2, int equal, const char *action)\n{\n  FILE *f = fopen (\"/tmp/logs/1492.txt\", \"a\");\n  if (f != (FILE *)0)\n  {\n    /* Log index, numeric and printable characters, equality result and action taken. */\n    /* Use %zu for size_t; cast not necessary but allowed if size_t format supported. */\n    fprintf (f, \"i=%zu c1=%u('%c') c2=%u('%c') equal=%d action=%s\\n\",\n             i, (unsigned int)c1, (c1 >= 32 && c1 < 127) ? c1 : '.', (unsigned int)c2,\n             (c2 >= 32 && c2 < 127) ? c2 : '.', equal, action);\n    (void) fclose (f);\n  }\n}\n\nbool\nMHD_str_equal_caseless_bin_n_ (const char *const str1,\n                               const char *const str2,\n                               size_t len)\n{\n  size_t i;\n\n  for (i = 0; i < len; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (charsequalcaseless (c1, c2))\n    {\n      /* Log that characters compared equal and that the continue path is taken. */\n      MHD_log_compare_state (i, (unsigned char)c1, (unsigned char)c2, 1, \"continue\");\n      continue;\n    }\n    else\n    {\n      /* Log the mismatch and the impending return. */\n      MHD_log_compare_state (i, (unsigned char)c1, (unsigned char)c2, 0, \"return 0\");\n      return 0;\n    }\n  }\n  /* Log successful completion of the loop (all characters matched). */\n  MHD_log_compare_state (len, (unsigned char)0, (unsigned char)0, 1, \"return !0\");\n  return ! 0;\n}\n"
}