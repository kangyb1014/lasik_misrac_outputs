{
  "user_message": "An agent A claimed that the following MHD_pool_get_free code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_get_free.\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MemoryPool *pool' is used only for read access (checking pool->end, pool->pos, pool->size and computing a size) and is never modified. According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible. Change the prototype to 'size_t MHD_pool_get_free(const struct MemoryPool *pool)' to comply.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_pool_get_free: stage=after_asserts, pool=0x55d0800e9060, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x55d0800e9060, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x55d0800e9060, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9dac000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9dac000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9dac000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9dac000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9dac000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9dac000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9dac000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9db0000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9db0000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9db0000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x7f9db0000de0, end=32640, pos=64, size=32768\nMHD_pool_get_free: computed result=32576\nMHD_pool_get_free: stage=after_asserts, pool=0x561f6bd4c880, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x561f6bd4c880, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x561f6bd4c880, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb28000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb28000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb28000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb28000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb28000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb28000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb28000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb2c000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb2c000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb2c000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x7fdb2c000de0, end=3968, pos=64, size=4096\nMHD_pool_get_free: computed result=3904\nMHD_pool_get_free: stage=after_asserts, pool=0x55edcbe16080, end=65408, pos=64, size=65536\nMHD_pool_get_free: computed result=65344\nMHD_pool_get_free: stage=after_asserts, pool=0x55edcbe16080, end=65408, pos=64, size=65536\nMHD_pool_get_free: computed result=65344\nMHD_pool_get_free: stage=after_asserts, pool=0x55edcbe16080, end=65408, pos=64, size=65536\nMHD_pool_get_free: computed result=65344\nMHD_pool_get_free: stage=after_asserts, pool=0\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In the shown definition MHD_pool_get_free only reads members of *pool (asserts and arithmetic) and does not modify the pointee, so per MISRA C 2023 Rule 8.13 the parameter should be a pointer to const-qualified type (e.g. const struct MemoryPool *pool). The execution log also shows only reads. The only reasons not to change it would be external constraints (stable public API, function-pointer type compatibility, or other translation-unit uses that require a non-const parameter), but based solely on the code shown the agent A report is valid and a change to const is the appropriate remediation."
}