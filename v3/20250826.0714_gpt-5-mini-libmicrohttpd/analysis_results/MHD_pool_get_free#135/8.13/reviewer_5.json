{
  "user_message": "An agent A claimed that the following MHD_pool_get_free code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_get_free.\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as 'struct MemoryPool *pool' but the fragment only reads members (pool->size, pool->end, pool->pos) and does not modify the object. Thus the pointer could and should be declared as 'const struct MemoryPool *pool' (mhd_assert does not perform modification).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nStage=entry\n  pool=0x558fbc9a0060 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x558fbc9a0060 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x558fbc9a0060 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x558fbc9a0060 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x558fbc9a0060 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x558fbc9a0060 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc94000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc90000b90 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc90000b90 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc90000dc0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc90000dc0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc9c000cd0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc9c000cd0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc9c000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc9c000de0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc90000dc0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc90000dc0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x7fcc90000dc0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x7fcc90000dc0 size=32768 end=32640 pos=64 diff(end-pos)=32576\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=32576\nStage=entry\n  pool=0x5643deb57880 size=4096 end=3968 pos=64 diff(end-pos)=3904\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x5643deb57880 size=4096 end=3968 pos=64 diff(end-pos)=3904\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=3904\nStage=entry\n  pool=0x5643deb57880 size=4096 end=3968 pos=64 diff(end-pos)=3904\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x5643deb57880 size=4096 end=3968 pos=64 diff(end-pos)=3904\n  MHD_ASAN_POISON_ACTIVE=0\n  computed_result=3904\nStage=entry\n  pool=0x5643deb57880 size=4096 end=3968 pos=64 diff(end-pos)=3904\n  MHD_ASAN_POISON_ACTIVE=0\nStage=return\n  pool=0x5643deb57880 size=4096 end=3968 pos=64 diff(end-pos)=3904\n  MHD_ASAN_POISON_ACTIVE=0\n  compute\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function MHD_pool_get_free only reads members of *pool (pool->end, pool->pos, pool->size) and does not modify the pointed-to object. Under MISRA C 2023 Rule 8.13 (\u2018A pointer should point to a const\u2011qualified type whenever possible\u2019), the parameter should therefore be declared as const struct MemoryPool *pool. The execution log also shows only reads of the fields and no writes. The only plausible reasons not to make it const would be external API/ABI constraints or a need to match an existing non\u2011const function pointer type; nothing in the shown code requires non\u2011const, so this is a valid violation."
}