{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) r;' is a no-op used solely to silence an unused-variable compiler warning. It has no effect on program semantics or timing; removing it does not change program behaviour, therefore it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_connection_reply code that contains useful probe functions that print useful logs to a file \"/tmp/logs/272.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_connection_reply as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_connection_reply:\n```c\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n```\n</target_code>\nPlease provide the modified check_connection_reply code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe function: logs control flow and selected state to /tmp/logs/272.txt.\n   This function is intended to be non-intrusive (it preserves pointers and\n   values and only reads them) and is used to help reproduce the reported\n   dead-code scenario for the statement \"(void) r;\" in the #else branch.\n*/\nstatic void\nmhd_probe_log_connection_state (const struct MHD_Connection *c,\n                                const struct MHD_Response *r)\n{\n  FILE *f = fopen(\"/tmp/logs/272.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Timestamp */\n  time_t t = time(NULL);\n  char tb[32] = \"\";\n  if (0 <= (int) t)\n  {\n    /* ctime_r may include a trailing '\\n' */\n    if (NULL != ctime_r(&t, tb))\n    {\n      tb[strcspn(tb, \"\\n\")] = '\\0';\n    }\n  }\n\n  fprintf(f, \"[check_connection_reply probe] timestamp=%s\\n\", tb[0] ? tb : \"(unknown)\");\n  fprintf(f, \"[check_connection_reply probe] connection ptr=%p\\n\", (const void *) c);\n  fprintf(f, \"[check_connection_reply probe] response ptr=%p\\n\", (const void *) r);\n\n  /* Log some fields that are used elsewhere in the function when available.\n     Casts are used to avoid format warnings for unknown exact types here. */\n  if (c != NULL)\n  {\n    fprintf(f, \"[check_connection_reply probe] responseCode=%u use_reply_body_headers=%d\\n\",\n            (unsigned) (c->rp.responseCode), (int) (c->rp.props.use_reply_body_headers));\n  }\n  if (r != NULL)\n  {\n    fprintf(f, \"[check_connection_reply probe] r->total_size=%zu r->flags_auto=%u\\n\",\n            (size_t) (r->total_size), (unsigned) (r->flags_auto));\n  }\n\n  fprintf(f, \"[check_connection_reply probe] End probe entry\\n\\n\");\n  fclose(f);\n}\n\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  /* In the non-MESSAGES build the original code muted unused-variable\n     warnings with these casts. We preserve the original behavior but add a\n     probe that logs the control path and state so that the presence and\n     effect (or lack thereof) of \"(void) r;\" can be observed at runtime. */\n  (void) c; /* Mute compiler warning */\n\n  /* Log the control flow and relevant state to help reproduce the reported\n     dead-code scenario. This will create /tmp/logs/272.txt (append mode). */\n  mhd_probe_log_connection_state(c, r);\n\n  (void) r; /* Mute compiler warning (reported as dead code in analysis) */\n#endif\n}\n"
}