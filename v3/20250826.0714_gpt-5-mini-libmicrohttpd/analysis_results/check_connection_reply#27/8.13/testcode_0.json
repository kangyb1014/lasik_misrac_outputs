{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe alias 'c' is declared as 'struct MHD_Connection *const c = connection;', i.e. a const pointer to a non-const MHD_Connection. In the shown code 'c' is only used for read access (accessing fields, not modifying them), so the pointee could and should be const-qualified. To comply with MISRA C 2023 Rule 8.13 it should be declared as 'const struct MHD_Connection *const c = connection;'. If the function later modifies the pointed object (not shown), making the pointee const would be inappropriate; based on the provided fragment this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_connection_reply code that contains useful probe functions that print useful logs to a file \"/tmp/logs/273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_connection_reply as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_connection_reply:\n```c\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n```\n</target_code>\nPlease provide the modified check_connection_reply code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: log key fields of the connection and response for diagnosis. */\nstatic void\nprobe_log_connection_state (const struct MHD_Connection *conn)\n{\n  FILE *f = fopen(\"/tmp/logs/273.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n\n  fprintf(f, \"[check_connection_reply] conn=%p\\n\", (void *) conn);\n  if (NULL == conn)\n  {\n    fprintf(f, \"  conn is NULL\\n\");\n    fclose(f);\n    return;\n  }\n\n  /* Log properties that are read by check_connection_reply. */\n  fprintf(f, \"  rp.props.set=%d\\n\", (int) conn->rp.props.set);\n  fprintf(f, \"  rp.props.use_reply_body_headers=%d\\n\",\n          (int) conn->rp.props.use_reply_body_headers);\n  fprintf(f, \"  rp.responseCode=%u\\n\", (unsigned) conn->rp.responseCode);\n\n  if (conn->rp.response == NULL)\n  {\n    fprintf(f, \"  rp.response=NULL\\n\");\n  }\n  else\n  {\n    /* total_size is typically a size_t; flags_auto treated as unsigned for logging. */\n    fprintf(f, \"  rp.response=%p total_size=%zu flags_auto=0x%08x\\n\",\n            (void *) conn->rp.response,\n            (size_t) conn->rp.response->total_size,\n            (unsigned) conn->rp.response->flags_auto);\n  }\n\n  fclose(f);\n}\n\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Probe at entry to capture pointer value and the read-only fields used below. */\n  probe_log_connection_state((const struct MHD_Connection *) c);\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    /* Record that this branch was taken and include the response code. */\n    FILE *f = fopen(\"/tmp/logs/273.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"  branch: non-empty response body ignored; responseCode=%u\\n\",\n              (unsigned) c->rp.responseCode);\n      fclose(f);\n    }\n\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    /* Record that this branch was taken and include the response code. */\n    FILE *f = fopen(\"/tmp/logs/273.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"  branch: application-defined Content-Length header violates HTTP spec; responseCode=%u\\n\",\n              (unsigned) c->rp.responseCode);\n      fclose(f);\n    }\n\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n"
}