{
  "user_message": "An agent A claimed that the following check_connection_reply code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of check_connection_reply.\n```c\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'connection' is declared as struct MHD_Connection *connection but the function only reads fields and does not modify the pointed object. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. A corrected signature would be: static void check_connection_reply(const struct MHD_Connection *connection) and the local alias: const struct MHD_Connection *const c = connection; (the existing r assignment can remain as struct MHD_Response *const r = c->rp.response).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 8.13 recommends that a pointer should point to a const-qualified type whenever the pointed-to object is not modified. In the provided function check_connection_reply the code only reads members of the pointed-to MHD_Connection object (it does not modify the object or any of its members). Therefore the parameter should be declared as pointing to a const-qualified type. Changing the signature to\n\nstatic void check_connection_reply(const struct MHD_Connection *connection)\n\nand the local alias to\n\nconst struct MHD_Connection *const c = connection;\n\nsatisfies the rule; the subsequent initialization of r (struct MHD_Response *const r = c->rp.response;) remains valid because the const qualifier on the containing struct makes the member a const pointer to the response value, which can be used to initialize r. The only caveat is if any called macros/functions (e.g. mhd_assert) or other code paths actually expect to modify the connection through this pointer; if they do, const cannot be applied. Given the shown code, no such modification occurs, so the reported violation is correct."
}