{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'connection' is declared as struct MHD_Connection *connection but the function only reads fields and does not modify the pointed object. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. A corrected signature would be: static void check_connection_reply(const struct MHD_Connection *connection) and the local alias: const struct MHD_Connection *const c = connection; (the existing r assignment can remain as struct MHD_Response *const r = c->rp.response).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_connection_reply code that contains useful probe functions that print useful logs to a file \"/tmp/logs/273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_connection_reply as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_connection_reply:\n```c\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n```\n</target_code>\nPlease provide the modified check_connection_reply code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Helper probe: append a formatted message to /tmp/logs/273.txt.\n   Designed to be non-intrusive and preserve original logic. */\nstatic void\nprobe_log_append (const char *fmt, ...)\n{\n  /* Try to create the directory if it does not exist. Ignore errors. */\n  (void) mkdir(\"/tmp/logs\", 0755);\n\n  FILE *f = fopen(\"/tmp/logs/273.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* Best-effort logging; if the file cannot be opened, silently return. */\n    return;\n  }\n\n  va_list ap;\n  va_start (ap, fmt);\n  (void) vfprintf (f, fmt, ap);\n  va_end (ap);\n\n  (void) fflush (f);\n  (void) fclose (f);\n}\n\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  /* Keep the original aliases so we do not change the existing logic. */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log entry and key state to provide evidence that the function only reads\n     fields from the pointed-to object (the reported Rule 8.13 violation).\n     Cast pointer values to uintptr_t for portable printing. */\n  probe_log_append (\"ENTER check_connection_reply: connection=%\" PRIuPTR \"\\n\",\n                    (uintptr_t) connection);\n  probe_log_append (\"ALIASES: c=%\" PRIuPTR \", r=%\" PRIuPTR \"\\n\",\n                    (uintptr_t) c, (uintptr_t) r);\n\n  /* Log the relevant fields that are read by the function. Use unsigned\n     casts to avoid depending on type-specific formatters in this probe. */\n  probe_log_append (\"STATE: rp.props.set=%u, rp.props.use_reply_body_headers=%u,\\n\",\n                    (unsigned) (c->rp.props.set),\n                    (unsigned) (c->rp.props.use_reply_body_headers));\n  probe_log_append (\"       responseCode=%u, r->total_size=%lu, r->flags_auto=0x%08x\\n\",\n                    (unsigned) (c->rp.responseCode),\n                    (unsigned long) (r->total_size),\n                    (unsigned) (r->flags_auto));\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    /* Log that this branch has been taken and the values that triggered it. */\n    probe_log_append (\"BRANCH: non-empty response body ignored: responseCode=%u, total_size=%lu\\n\",\n                      (unsigned) (c->rp.responseCode), (unsigned long) (r->total_size));\n\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    /* Log that this branch has been taken and the values that triggered it. */\n    probe_log_append (\"BRANCH: application-defined Content-Length violates HTTP spec: responseCode=%u, flags_auto=0x%08x\\n\",\n                      (unsigned) (c->rp.responseCode), (unsigned) (r->flags_auto));\n\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n\n  /* Log exit to mark the end of this function's trace. */\n  probe_log_append (\"EXIT check_connection_reply: connection=%\" PRIuPTR \"\\n\",\n                    (uintptr_t) connection);\n}\n"
}