{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initial assignment alloc_size = 0; is redundant: in every control-flow path alloc_size is assigned a meaningful value before it is used (either set to the rounded page allocation when mmap/VirtualAlloc path is taken, or set to ROUND_TO_ALIGN(max) in the MAP_FAILED fallback). Therefore the write is executed but its removal would not affect program behaviour \u2014 it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1322.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_create as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_create:\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_create code.\n",
  "test_code": "struct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  /* Probe: log entry and initial state */\n  {\n    FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_create: ENTRY max=%zu\\n\", max);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n\n  /* Probe: log after initial assignment */\n  {\n    FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_create: after init alloc_size=%zu\\n\", alloc_size);\n      fclose(f);\n    }\n  }\n\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n  {\n    /* Probe: malloc failed */\n    FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_create: malloc(pool) failed\\n\");\n      fclose(f);\n    }\n    return NULL;\n  }\n\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n\n    /* Probe: took small-size branch -> MAP_FAILED */\n    FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_create: small/max branch selected: max=%zu -> MAP_FAILED\\n\", max);\n      fclose(f);\n    }\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n\n    /* Probe: log alloc_size computed for mmap/VirtualAlloc */\n    {\n      FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MHD_pool_create: computed alloc_size for mmap/VirtualAlloc = %zu\\n\", alloc_size);\n        fclose(f);\n      }\n    }\n\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n\n    /* Probe: log result of mmap call */\n    {\n      FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MHD_pool_create: mmap returned %p (alloc_size=%zu)\\n\", (void *) pool->memory, alloc_size);\n        fclose(f);\n      }\n    }\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n\n    /* Probe: log result of VirtualAlloc call */\n    {\n      FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MHD_pool_create: VirtualAlloc returned %p (alloc_size=%zu)\\n\", (void *) pool->memory, alloc_size);\n        fclose(f);\n      }\n    }\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n\n  /* Probe: platform without MAP_ANONYMOUS/_WIN32 -> MAP_FAILED */\n  {\n    FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_create: no mmap/VirtualAlloc available -> MAP_FAILED\\n\");\n      fclose(f);\n    }\n  }\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      /* Probe: malloc fallback for pool->memory failed */\n      FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MHD_pool_create: malloc(pool->memory, %zu) failed -> freeing pool and returning NULL\\n\", alloc_size);\n        fclose(f);\n      }\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n\n    /* Probe: log fallback allocation details */\n    {\n      FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MHD_pool_create: fallback malloc allocated %p size=%zu is_mmap=false\\n\", (void *) pool->memory, alloc_size);\n        fclose(f);\n      }\n    }\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n\n    /* Probe: log successful mmap/VirtualAlloc path */\n    {\n      FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MHD_pool_create: mmap/VirtualAlloc path used memory=%p alloc_size=%zu is_mmap=true\\n\", (void *) pool->memory, alloc_size);\n        fclose(f);\n      }\n    }\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n\n  /* Probe: final state before return */\n  {\n    FILE *f = fopen(\"/tmp/logs/1322.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_create: EXIT pool=%p memory=%p pos=%zu end=%zu size=%zu alloc_size=%zu\\n\",\n              (void *) pool, (void *) pool->memory, pool->pos, pool->end, pool->size, alloc_size);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n"
}