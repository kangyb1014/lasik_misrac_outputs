{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of free_unmarked:\n```c\nstatic void\nfree_unmarked (struct MHD_PostProcessor *pp)\n{\n  if ( (NULL != pp->content_name) &&\n       (0 == (pp->have & NE_content_name)) )\n  {\n    free (pp->content_name);\n    pp->content_name = NULL;\n  }\n  if ( (NULL != pp->content_type) &&\n       (0 == (pp->have & NE_content_type)) )\n  {\n    free (pp->content_type);\n    pp->content_type = NULL;\n  }\n  if ( (NULL != pp->content_filename) &&\n       (0 == (pp->have & NE_content_filename)) )\n  {\n    free (pp->content_filename);\n    pp->content_filename = NULL;\n  }\n  if ( (NULL != pp->content_transfer_encoding) &&\n       (0 == (pp->have & NE_content_transfer_encoding)) )\n  {\n    free (pp->content_transfer_encoding);\n    pp->content_transfer_encoding = NULL;\n  }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void\nfree_unmarked (struct MHD_PostProcessor *pp)\n{\n  if ( (NULL != pp->content_name) &&\n       (0 == (pp->have & NE_content_name)) )\n  {\n    free (pp->content_name);\n    pp->content_name = NULL;\n  }\n  if ( (NULL != pp->content_type) &&\n       (0 == (pp->have & NE_content_type)) )\n  {\n    free (pp->content_type);\n    pp->content_type = NULL;\n  }\n  if ( (NULL != pp->content_filename) &&\n       (0 == (pp->have & NE_content_filename)) )\n  {\n    free (pp->content_filename);\n    pp->content_filename = NULL;\n  }\n  if ( (NULL != pp->content_transfer_encoding) &&\n       (0 == (pp->have & NE_content_transfer_encoding)) )\n  {\n    free (pp->content_transfer_encoding);\n    pp->content_transfer_encoding = NULL;\n  }\n}\n\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the fragment itself: each if-body performs observable actions (freeing memory and clearing pointers) that affect program behaviour \u2014 removing them would change behaviour (memory leaks or dangling pointers). Therefore the code shown is not dead. Note: if the function free_unmarked is never called anywhere in the project, then the function would be dead code and would violate MISRA C 2023 Rule 2.2."
}