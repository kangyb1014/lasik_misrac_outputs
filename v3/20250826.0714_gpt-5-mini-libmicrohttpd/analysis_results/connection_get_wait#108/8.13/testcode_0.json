{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'c' (type 'struct MHD_Connection *') is only read in this function \u2014 e.g. const uint64_t since_actv = now - c->last_activity; \u2014 therefore it should be a pointer-to-const (e.g. const struct MHD_Connection *c). Declaring the parameter non-const when it is never used to modify the object violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_get_wait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1083.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_get_wait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_get_wait:\n```c\nstatic uint64_t\nconnection_get_wait (struct MHD_Connection *c)\n{\n  const uint64_t now = MHD_monotonic_msec_counter ();\n  const uint64_t since_actv = now - c->last_activity;\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t mseconds_left;\n\n  mhd_assert (0 != timeout);\n  /* Keep the next lines in sync with #connection_check_timedout() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      { /* Jump back is less than 5 seconds, try to recover. */\n        return 100; /* Set wait time to 0.1 seconds */\n      }\n      /* Too large jump back */\n    }\n    return 0; /* Connection has timed out */\n  }\n  else if (since_actv == timeout)\n  {\n    /* Exact match for timeout and time from last activity.\n     * Maybe this is just a precise match or this happens because the timer\n     * resolution is too low.\n     * Set wait time to 0.1 seconds to avoid busy-waiting with low\n     * timer resolution as connection is not timed-out yet. */\n    return 100;\n  }\n  mseconds_left = timeout - since_actv;\n\n  return mseconds_left;\n}\n```\n</target_code>\nPlease provide the modified connection_get_wait code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe helper: append a log entry describing control flow and state.\n * This helper is kept minimal and has no side-effects on the connection\n * object; it only writes an append-only log file for later inspection. */\nstatic void\nconnection_get_wait_log(const char *event, uint64_t now, uint64_t since_actv,\n                        uint64_t timeout, uint64_t mseconds_left,\n                        uint64_t jump_back, const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/1083.txt\", \"a\");\n  if (NULL == f)\n  {\n    return; /* best-effort logging only */\n  }\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] event=%s now=%\" PRIu64 \" since_actv=%\" PRIu64\n             \" timeout=%\" PRIu64 \" mseconds_left=%\" PRIu64,\n             (long)t, event, now, since_actv, timeout, mseconds_left);\n  if (UINT64_MAX != jump_back)\n  {\n    fprintf(f, \" jump_back=%\" PRIu64, jump_back);\n  }\n  if (note != NULL)\n  {\n    fprintf(f, \" note=%s\", note);\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic uint64_t\nconnection_get_wait (struct MHD_Connection *c)\n{\n  const uint64_t now = MHD_monotonic_msec_counter ();\n  const uint64_t since_actv = now - c->last_activity;\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t mseconds_left;\n\n  /* Log entry with the basic state at function entry. */\n  connection_get_wait_log(\"entry\", now, since_actv, timeout, 0, UINT64_MAX, NULL);\n\n  mhd_assert (0 != timeout);\n  /* Keep the next lines in sync with #connection_check_timedout() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    /* Log that timeout < since_actv branch is taken. */\n    connection_get_wait_log(\"branch_timeout_lt_since\", now, since_actv, timeout, 0, UINT64_MAX, NULL);\n\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Log values before evaluating jump_back heuristics. */\n      connection_get_wait_log(\"inside_big_since_actv\", now, since_actv, timeout, 0, jump_back, NULL);\n\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      { /* Jump back is less than 5 seconds, try to recover. */\n        /* Log decision to recover from small clock jump and the values that led to it. */\n        connection_get_wait_log(\"recover_from_small_jump\", now, since_actv, timeout, 100, jump_back, \"recover: return 100\");\n        return 100; /* Set wait time to 0.1 seconds */\n      }\n      /* Too large jump back */\n      connection_get_wait_log(\"too_large_jump_back\", now, since_actv, timeout, 0, jump_back, \"too large jump back\");\n    }\n    /* Log that connection is considered timed out and will return 0. */\n    connection_get_wait_log(\"timed_out_return\", now, since_actv, timeout, 0, UINT64_MAX, \"timed out: return 0\");\n    return 0; /* Connection has timed out */\n  }\n  else if (since_actv == timeout)\n  {\n    /* Exact match for timeout and time from last activity.\n     * Maybe this is just a precise match or this happens because the timer\n     * resolution is too low.\n     * Set wait time to 0.1 seconds to avoid busy-waiting with low\n     * timer resolution as connection is not timed-out yet. */\n    /* Log exact match case. */\n    connection_get_wait_log(\"since_equals_timeout\", now, since_actv, timeout, 100, UINT64_MAX, \"since_actv == timeout: return 100\");\n    return 100;\n  }\n  mseconds_left = timeout - since_actv;\n\n  /* Log the normal path with remaining milliseconds. */\n  connection_get_wait_log(\"normal_return\", now, since_actv, timeout, mseconds_left, UINT64_MAX, \"return remaining\");\n\n  return mseconds_left;\n}\n"
}