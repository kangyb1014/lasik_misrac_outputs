{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a pointer parameter 'struct MHD_Connection *c' but only reads from c (accesses c->last_activity and c->connection_timeout_ms) and does not modify the pointed-to object. Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible. The signature should be: static uint64_t connection_get_wait(const struct MHD_Connection *c).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_get_wait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1083.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_get_wait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_get_wait:\n```c\nstatic uint64_t\nconnection_get_wait (struct MHD_Connection *c)\n{\n  const uint64_t now = MHD_monotonic_msec_counter ();\n  const uint64_t since_actv = now - c->last_activity;\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t mseconds_left;\n\n  mhd_assert (0 != timeout);\n  /* Keep the next lines in sync with #connection_check_timedout() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      { /* Jump back is less than 5 seconds, try to recover. */\n        return 100; /* Set wait time to 0.1 seconds */\n      }\n      /* Too large jump back */\n    }\n    return 0; /* Connection has timed out */\n  }\n  else if (since_actv == timeout)\n  {\n    /* Exact match for timeout and time from last activity.\n     * Maybe this is just a precise match or this happens because the timer\n     * resolution is too low.\n     * Set wait time to 0.1 seconds to avoid busy-waiting with low\n     * timer resolution as connection is not timed-out yet. */\n    return 100;\n  }\n  mseconds_left = timeout - since_actv;\n\n  return mseconds_left;\n}\n```\n</target_code>\nPlease provide the modified connection_get_wait code.\n",
  "test_code": "#include <stdio.h>\n\nstatic uint64_t\nconnection_get_wait (struct MHD_Connection *c)\n{\n  const uint64_t now = MHD_monotonic_msec_counter ();\n  const uint64_t since_actv = now - c->last_activity;\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t mseconds_left;\n\n  /* Open log for appended diagnostics. Best-effort: if open fails, continue\n   * normal execution without logging. */\n  FILE *log = fopen(\"/tmp/logs/1083.txt\", \"a\");\n  if (log)\n  {\n    fprintf (log, \"connection_get_wait ENTRY: now=%llu since_actv=%llu timeout=%llu last_activity=%llu\\n\",\n             (unsigned long long) now,\n             (unsigned long long) since_actv,\n             (unsigned long long) timeout,\n             (unsigned long long) c->last_activity);\n    fflush (log);\n  }\n\n  mhd_assert (0 != timeout);\n  /* Keep the next lines in sync with #connection_check_timedout() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (log)\n    {\n      fprintf (log, \"BRANCH: timeout < since_actv (timeout=%llu < since_actv=%llu)\\n\",\n               (unsigned long long) timeout,\n               (unsigned long long) since_actv);\n      fflush (log);\n    }\n\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (log)\n      {\n        fprintf (log, \"SUBCHECK: large since_actv (since_actv=%llu), jump_back=%llu\\n\",\n                 (unsigned long long) since_actv,\n                 (unsigned long long) jump_back);\n        fflush (log);\n      }\n      if (5000 >= jump_back)\n      { /* Jump back is less than 5 seconds, try to recover. */\n        if (log)\n        {\n          fprintf (log, \"ACTION: clock jumped back <=5000ms, returning 100 (0.1s) to avoid busy-wait)\\n\");\n          fclose (log);\n        }\n        return 100; /* Set wait time to 0.1 seconds */\n      }\n      /* Too large jump back */\n    }\n    if (log)\n    {\n      fprintf (log, \"ACTION: connection timed out, returning 0\\n\");\n      fclose (log);\n    }\n    return 0; /* Connection has timed out */\n  }\n  else if (since_actv == timeout)\n  {\n    if (log)\n    {\n      fprintf (log, \"BRANCH: since_actv == timeout (since_actv=%llu timeout=%llu), returning 100 to avoid busy-wait\\n\",\n               (unsigned long long) since_actv,\n               (unsigned long long) timeout);\n      fclose (log);\n    }\n    /* Exact match for timeout and time from last activity.\n     * Maybe this is just a precise match or this happens because the timer\n     * resolution is too low.\n     * Set wait time to 0.1 seconds to avoid busy-waiting with low\n     * timer resolution as connection is not timed-out yet. */\n    return 100;\n  }\n  mseconds_left = timeout - since_actv;\n\n  if (log)\n  {\n    fprintf (log, \"EXIT: time remaining=%llu ms (timeout=%llu - since_actv=%llu)\\n\",\n             (unsigned long long) mseconds_left,\n             (unsigned long long) timeout,\n             (unsigned long long) since_actv);\n    fclose (log);\n  }\n\n  return mseconds_left;\n}\n"
}