{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'pos' is used only to read elements of the linked list (accessing pos->kind, pos->header, pos->value and advancing pos = pos->next) and the function does not modify the pointed-to MHD_HTTP_Req_Header objects. According to MISRA C 2023 Rule 8.13, the pointer should therefore be const-qualified. Change the declaration to: \n\nconst struct MHD_HTTP_Req_Header *pos;\n\nThis still allows pos = pos->next (reading the next pointer) and prevents accidental modification of the pointed-to objects.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/103.txt */\nstatic void mhd_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fflush(f);\n  fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  /* Log entry and basic parameters. Do not print function pointer value (non-portable);\n     only indicate whether iterator is NULL. */\n  mhd_log(\"MHD_get_connection_values: entry connection=%p kind=%u iterator_is_NULL=%d iterator_cls=%p\",\n          (void *)connection, (unsigned int)kind, (iterator == NULL), iterator_cls);\n\n  if (NULL == connection)\n  {\n    mhd_log(\"MHD_get_connection_values: connection is NULL -> returning -1\");\n    return -1;\n  }\n  ret = 0;\n\n  /* Log the head of the received headers list */\n  mhd_log(\"MHD_get_connection_values: headers_received=%p\",\n          (void *)connection->rq.headers_received);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log the pointer and the read-only fields that are accessed in the loop.\n       This demonstrates that pos is only used to read fields and to advance to pos->next. */\n    mhd_log(\"loop: pos=%p pos->kind=0x%X pos->header=%s pos->value=%s pos->next=%p\",\n            (void *)pos,\n            (unsigned int)pos->kind,\n            (pos->header != NULL) ? pos->header : \"(null)\",\n            (pos->value != NULL) ? pos->value : \"(null)\",\n            (void *)pos->next);\n\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      mhd_log(\"match: pos=%p matched kind (kind_mask=0x%X) -> ret=%d\",\n              (void *)pos, (unsigned int)kind, ret);\n\n      if ((NULL != iterator) &&\n          (MHD_NO == iterator (iterator_cls,\n                               pos->kind,\n                               pos->header,\n                               pos->value)))\n      {\n        mhd_log(\"iterator requested stop: returning early ret=%d\", ret);\n        return ret;\n      }\n      else\n      {\n        if (NULL != iterator)\n          mhd_log(\"iterator called and returned continue for pos=%p\", (void *)pos);\n      }\n    }\n  }\n\n  mhd_log(\"MHD_get_connection_values: end of loop -> returning ret=%d\", ret);\n  return ret;\n}\n"
}