{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop variable 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos' but is only used to read fields (pos->kind, pos->header, pos->value) and to follow the next pointer (pos = pos->next). The function does not modify the pointed-to list nodes, so the pointer could and should be declared to point to a const-qualified type (e.g. 'const struct MHD_HTTP_Req_Header *pos'). Therefore the fragment 'pos = pos->next' demonstrates a missed opportunity to use a const-qualified pointer, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/103.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  /* Try to ensure the directory exists. Ignore errors. */\n  (void)mkdir(\"/tmp/logs\", 0777);\n\n  f = fopen(\"/tmp/logs/103.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_start(ap, fmt);\n  (void)vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  (void)fclose(f);\n}\n\n/* Safe printer for a header node structure. The structure type is used\n   but not defined here; fields are accessed assuming the original code\n   layout (kind, header, value, next). */\nstatic void probe_log_header(const char *label, struct MHD_HTTP_Req_Header *p)\n{\n  unsigned long long kindval = 0uLL;\n  const char *h = \"<null>\";\n  const char *v = \"<null>\";\n  void *nextp = NULL;\n\n  if (NULL != p)\n  {\n    kindval = (unsigned long long)p->kind;\n    if (NULL != p->header)\n      h = p->header;\n    if (NULL != p->value)\n      v = p->value;\n    nextp = (void *)p->next;\n  }\n\n  probe_log(\"%s: node=%p kind=%llu header=\\\"%s\\\" value=\\\"%s\\\" next=%p\\n\",\n            label, (void *)p, kindval, h, v, nextp);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  probe_log(\"MHD_get_connection_values called: connection=%p kind=%llu iterator=%p iterator_cls=%p\\n\",\n            (void *)connection,\n            (unsigned long long)kind,\n            (void *)iterator,\n            iterator_cls);\n\n  if (NULL == connection)\n  {\n    probe_log(\"MHD_get_connection_values: connection is NULL, returning -1\\n\");\n    return -1;\n  }\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    probe_log_header(\"iterating\", pos);\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      probe_log(\"match found: node=%p updated ret=%d\\n\", (void *)pos, ret);\n      if (NULL != iterator)\n      {\n        int itres;\n        probe_log(\"invoking iterator: node=%p kind=%llu header=\\\"%s\\\" value=\\\"%s\\\"\\n\",\n                  (void *)pos,\n                  (unsigned long long)pos->kind,\n                  (NULL != pos->header) ? pos->header : \"<null>\",\n                  (NULL != pos->value) ? pos->value : \"<null>\");\n\n        itres = iterator (iterator_cls,\n                          pos->kind,\n                          pos->header,\n                          pos->value);\n\n        probe_log(\"iterator returned %d for node=%p\\n\", itres, (void *)pos);\n\n        if (MHD_NO == itres)\n        {\n          probe_log(\"iterator requested stop, returning ret=%d\\n\", ret);\n          return ret;\n        }\n      }\n    }\n  }\n  probe_log(\"MHD_get_connection_values completed, returning %d\\n\", ret);\n  return ret;\n}\n"
}