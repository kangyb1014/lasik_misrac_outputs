{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\npos->value is declared as a non-const pointer (e.g. char *value) but is used only for read-only access and passed to an iterator that does not modify it. The header/value strings are treated as immutable; therefore the member should be declared const char *value. Keeping it as char * is a violation of MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Insufficient evidence to call this a definite MISRA 8.13 violation. MISRA C 2023 Rule 8.13 says pointers should point to const-qualified types whenever possible (i.e. when the pointed-to object is not modified through that pointer). In the snippet shown, pos->value is only read and passed to an iterator, so within this function its use is read\u2011only. However, whether there is a rule violation depends on declarations and uses elsewhere: the definition of struct MHD_HTTP_Req_Header (the type of pos->value) and the prototype of MHD_KeyValueIterator must be examined. If pos->value is declared as char * and (a) it is never modified anywhere and (b) all consumers (including the iterator) accept a const char *, then the member should be declared const char * and leaving it as char * would violate 8.13. Conversely, if pos->value is modified elsewhere or the iterator requires a modifiable char * (or the API intentionally uses non\u2011const for compatibility), then forcing const would be incorrect and there is no violation in the shown function. Therefore Agent A\u2019s claim cannot be confirmed from the provided code alone; you must inspect the member declaration and all uses (and the iterator type) to decide whether the pointer can be made const."
}