{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment pos->header is used only for reading (passed into the iterator as a header name/value). If the struct member is declared as a non-const pointer (e.g. char *header) then Rule 8.13 is violated because the pointer should point to const-qualified data when it is not modified. A specific violation scenario: struct MHD_HTTP_Req_Header { char *header; char *value; ... }; header/value are never modified but are passed as read-only parameters to the iterator \u2014 they should be declared const char *header; const char *value;.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "static void MHD_log_probe(const char *stage,\n                                struct MHD_Connection *connection,\n                                enum MHD_ValueKind kind,\n                                struct MHD_HTTP_Req_Header *pos,\n                                int ret,\n                                int iterator_called,\n                                int iterator_result)\n{\n  FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"[MHD_get_connection_values] %s: connection=%p kind=%d ret=%d iterator_called=%d iterator_result=%d\\n\",\n          stage, (void *)connection, (int)kind, ret, iterator_called, iterator_result);\n  if (pos)\n  {\n    fprintf(f, \"  pos=%p pos->kind=0x%x pos->header=%p header_str=\\\"%s\\\" pos->value=%p value_str=\\\"%s\\\"\\n\",\n            (void *)pos, (unsigned int)pos->kind,\n            (void *)pos->header, (pos->header ? pos->header : \"(null)\"),\n            (void *)pos->value, (pos->value ? pos->value : \"(null)\"));\n  }\n  fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n  {\n    /* Log null connection path */\n    MHD_log_probe(\"null_connection\", connection, kind, NULL, -1, 0, 0);\n    return -1;\n  }\n  ret = 0;\n\n  /* Log entry into the function */\n  MHD_log_probe(\"entry\", connection, kind, NULL, ret, (iterator != NULL), 0);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n\n      /* Log the candidate header about to be processed */\n      MHD_log_probe(\"candidate_found\", connection, kind, pos, ret, (iterator != NULL), 0);\n\n      if (NULL != iterator)\n      {\n        int it_res = iterator (iterator_cls,\n                               pos->kind,\n                               pos->header,\n                               pos->value);\n\n        /* Log the iterator call and its result */\n        MHD_log_probe(\"after_iterator_call\", connection, kind, pos, ret, 1, it_res);\n\n        if (MHD_NO == it_res)\n          return ret;\n      }\n      else\n      {\n        /* Explicitly log that no iterator was provided for this header */\n        MHD_log_probe(\"no_iterator_for_candidate\", connection, kind, pos, ret, 0, 0);\n      }\n    }\n\n  /* Log normal exit */\n  MHD_log_probe(\"exit\", connection, kind, NULL, ret, (iterator != NULL), 0);\n  return ret;\n}\n"
}