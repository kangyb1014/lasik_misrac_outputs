{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function pointer type MHD_KeyValueIterator is declared without const for the pointed-to data (for example: typedef int (*MHD_KeyValueIterator)(void *cls, enum MHD_ValueKind kind, char *header, char *value); or if iterator_cls is declared as void * but the iterator only reads from it), then this call violates MISRA C 2023 Rule 8.13. The iterator parameters that point to header and value (and iterator_cls if it is not modified) should be const-qualified (e.g. const char *header, const char *value, const void *cls) whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *logf = NULL;\n\n  /* Log function entry and parameters */\n  logf = fopen(\"/tmp/logs/103.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"MHD_get_connection_values: entry connection=%p kind=%d iterator=%p iterator_cls=%p\\n\",\n            (void *)connection,\n            (int)kind,\n            (void *)iterator,\n            iterator_cls);\n    fclose(logf);\n  }\n\n  if (NULL == connection)\n  {\n    logf = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"MHD_get_connection_values: connection == NULL, returning -1\\n\");\n      fclose(logf);\n    }\n    return -1;\n  }\n\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n\n      /* Log the matched header information */\n      logf = fopen(\"/tmp/logs/103.txt\", \"a\");\n      if (NULL != logf)\n      {\n        fprintf(logf,\n                \"MHD_get_connection_values: matched header index=%d pos=%p pos->kind=%d header_ptr=%p value_ptr=%p header_str=\\\"%s\\\" value_str=\\\"%s\\\"\\n\",\n                ret,\n                (void *)pos,\n                (int)pos->kind,\n                (void *)pos->header,\n                (void *)pos->value,\n                (pos->header != NULL) ? pos->header : \"(null)\",\n                (pos->value != NULL) ? pos->value : \"(null)\");\n        fclose(logf);\n      }\n\n      /* Preserve original iterator call and semantics but log before/after the call. */\n      if (NULL != iterator)\n      {\n        int call_res;\n\n        logf = fopen(\"/tmp/logs/103.txt\", \"a\");\n        if (NULL != logf)\n        {\n          fprintf(logf, \"MHD_get_connection_values: calling iterator(iterator_cls=%p, kind=%d, header=%p, value=%p)\\n\",\n                  iterator_cls,\n                  (int)pos->kind,\n                  (void *)pos->header,\n                  (void *)pos->value);\n          fclose(logf);\n        }\n\n        call_res = iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value);\n\n        logf = fopen(\"/tmp/logs/103.txt\", \"a\");\n        if (NULL != logf)\n        {\n          fprintf(logf, \"MHD_get_connection_values: iterator returned %d\\n\", call_res);\n          fclose(logf);\n        }\n\n        if (MHD_NO == call_res)\n        {\n          logf = fopen(\"/tmp/logs/103.txt\", \"a\");\n          if (NULL != logf)\n          {\n            fprintf(logf, \"MHD_get_connection_values: iterator requested early stop, returning %d\\n\", ret);\n            fclose(logf);\n          }\n          return ret;\n        }\n      }\n    }\n  }\n\n  logf = fopen(\"/tmp/logs/103.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"MHD_get_connection_values: exit returning %d\\n\", ret);\n    fclose(logf);\n  }\n\n  return ret;\n}\n"
}