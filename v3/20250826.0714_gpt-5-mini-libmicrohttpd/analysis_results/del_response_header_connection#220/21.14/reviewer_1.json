{
  "user_message": "An agent A claimed that the following del_response_header_connection code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of del_response_header_connection.\n```c\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n    return MHD_NO;\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n    return MHD_NO;\n  if (0 == hdr->value_size)\n  {\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n  }\n  else\n  {\n    hdr->value[hdr->value_size] = 0; /* Null-terminate the result */\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    }\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls memcmp(hdr->value, \"close\", MHD_STATICSTR_LEN_(\"close\")) where hdr->value was explicitly null-terminated earlier (hdr->value[hdr->value_size] = 0). This uses memcmp to compare null-terminated strings, which violates MISRA C 2023 Rule 21.14. Replace with a string comparison function such as strcmp/strncmp (or otherwise compare raw non-null-terminated buffers) to comply.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nNOTE: before token removal\nresponse=0x55bc4b584820 flags_auto=0x1\nhdr=0x55bc4b584a20 header=0x55bc4b584900 value_ptr=0x55bc4b5848e0 value_size=13\nvalue (len 13): 'a, b, c, d, e'\ntoken_to_remove='e,b,c,d,a' strlen=9\n----\nNOTE: after token removal\nresponse=0x55bc4b584820 flags_auto=0x1\nhdr=0x55bc4b584a20 header=0x55bc4b584900 value_ptr=0x55bc4b5848e0 value_size=0\nvalue (len 0): ''\ntoken_to_remove='e,b,c,d,a' strlen=9\n----\nNOTE: value_size==0: removing header\nresponse=0x55bc4b584820 flags_auto=0x1\nhdr=0x55bc4b584a20 header=0x55bc4b584900 value_ptr=0x55bc4b5848e0 value_size=0\nvalue (len 0): ''\ntoken_to_remove='e,b,c,d,a' strlen=9\n----\nNOTE: exit returning MHD_YES\nresponse=0x55bc4b584820 flags_auto=0x0\nhdr=0x55bc4b584a20 header=0x55bc4b584900 value_ptr=0x55bc4b5848e0 value_size=0\nvalue (len 0): ''\ntoken_to_remove='e,b,c,d,a' strlen=9\n----\nNOTE: before token removal\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584c70 header=0x55bc4b584900 value_ptr=0x55bc4b584c40 value_size=26\nvalue (len 26): 'close, i, k, l, m, n, o, p'\ntoken_to_remove='i,k,l,m,n,o,p,close' strlen=19\n----\nNOTE: after token removal\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584c70 header=0x55bc4b584900 value_ptr=0x55bc4b584c40 value_size=0\nvalue (len 0): ''\ntoken_to_remove='i,k,l,m,n,o,p,close' strlen=19\n----\nNOTE: value_size==0: removing header\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584c70 header=0x55bc4b584900 value_ptr=0x55bc4b584c40 value_size=0\nvalue (len 0): ''\ntoken_to_remove='i,k,l,m,n,o,p,close' strlen=19\n----\nNOTE: exit returning MHD_YES\nresponse=0x55bc4b584820 flags_auto=0x0\nhdr=0x55bc4b584c70 header=0x55bc4b584900 value_ptr=0x55bc4b584c40 value_size=0\nvalue (len 0): ''\ntoken_to_remove='i,k,l,m,n,o,p,close' strlen=19\n----\nNOTE: before token removal\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c70 value_size=32\nvalue (len 32): 'close, 1, 2, 3, 4, 5, 6, 7, 8, 9'\ntoken_to_remove='1,3,5,7,9' strlen=9\n----\nNOTE: after token removal\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c70 value_size=17\nvalue (len 17): 'close, 2, 4, 6, 8'\ntoken_to_remove='1,3,5,7,9' strlen=9\n----\nNOTE: after null-terminate\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c70 value_size=17\nvalue (len 17): 'close, 2, 4, 6, 8'\ntoken_to_remove='1,3,5,7,9' strlen=9\n----\nNOTE: cmp branch: prefix 'close, '\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c70 value_size=17\nvalue (len 17): 'close, 2, 4, 6, 8'\ntoken_to_remove='1,3,5,7,9' strlen=9\ncmp_len=7 cmp_result=0\n----\nNOTE: exit returning MHD_YES\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c70 value_size=17\nvalue (len 17): 'close, 2, 4, 6, 8'\ntoken_to_remove='1,3,5,7,9' strlen=9\n----\nNOTE: before token removal\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c40 value_size=25\nvalue (len 25): 'close, 2, 4, 6, 8, 10, 12'\ntoken_to_remove='12  ,10  ,8  ,close' strlen=19\n----\nNOTE: after token removal\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c40 value_size=7\nvalue (len 7): '2, 4, 6'\ntoken_to_remove='12  ,10  ,8  ,close' strlen=19\n----\nNOTE: after null-terminate\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c40 value_size=7\nvalue (len 7): '2, 4, 6'\ntoken_to_remove='12  ,10  ,8  ,close' strlen=19\n----\nNOTE: cmp branch: other (shorter) value\nresponse=0x55bc4b584820 flags_auto=0x3\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c40 value_size=7\nvalue (len 7): '2, 4, 6'\ntoken_to_remove='12  ,10  ,8  ,close' strlen=19\n----\nNOTE: exit returning MHD_YES\nresponse=0x55bc4b584820 flags_auto=0x1\nhdr=0x55bc4b584cb0 header=0x55bc4b584900 value_ptr=0x55bc4b584c40 value_size=7\nvalue (len 7): '2, 4, 6'\ntoken_to_remove='12  ,10  ,8  ,close' strlen=19\n----\nNOTE: before token removal\nresp\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The code null-terminates hdr->value (hdr->value[hdr->value_size] = 0) and then uses memcmp to compare it against string literals (\"close\" and \"close, \"). MISRA C:2023 Rule 21.14 states that memcmp shall not be used to compare null\u2011terminated strings. Because both operands are null\u2011terminated strings at the point of comparison, the memcmp calls violate Rule 21.14. To comply, replace these memcmp uses with the appropriate string functions (e.g. strncmp for prefix/length comparisons or strcmp when lengths are known equal), or avoid null\u2011terminating and treat the buffers as raw byte sequences if memcmp must be used."
}