{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct ResponseContentCallbackParam *callback_param;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n\n  callback_param = malloc (sizeof(struct ResponseContentCallbackParam));\n  if (NULL == callback_param)\n    return MHD_NO; /* Not enough memory. */\n\n  callback_param->response_data = simple_response_text;\n  callback_param->response_size = (sizeof(simple_response_text)\n                                   / sizeof(char)) - 1;\n\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN,\n                                                1024,\n                                                &callback,\n                                                callback_param,\n                                                &free_callback_param);\n  if (NULL == response)\n  {\n    free (callback_param);\n    return MHD_NO;\n  }\n  /* Enforce chunked response, even for non-keep-alive connection. */\n  if (MHD_NO == MHD_add_response_header (response,\n                                         MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                         \"chunked\"))\n  {\n    free (callback_param);\n    MHD_destroy_response (response);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call strcmp(method, \"GET\") may access memory beyond the bounds of the object referenced by method if method is NULL or not NUL-terminated. For example, if method == NULL this causes a dereference of a NULL pointer; if method points to a char array missing the terminating '\\0' (e.g. {'G','E'}), strcmp will read past the buffer until it finds a '\\0', causing out\u2011of\u2011bounds access.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The call strcmp(method, \"GET\") will read bytes from the object referenced by method until it finds a '\\0'. If method == NULL this is a null pointer dereference; if method points to a buffer that is not NUL-terminated strcmp will read past the buffer bounds. MISRA C 2023 Rule 21.17 requires that use of <string.h> functions shall not result in accesses beyond the bounds of the objects passed. The code performs no NULL check nor otherwise guarantees that method is a valid NUL-terminated string, so the call can violate 21.17 unless there is a documented, provable guarantee from the caller/library that method is non-NULL and NUL-terminated. Absent such a guarantee, the report of a violation is correct."
}