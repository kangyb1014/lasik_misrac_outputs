{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of request_completed_callback:\n```c\nstatic void\nrequest_completed_callback (void *cls,\n                            struct MHD_Connection *connection,\n                            void **req_cls,\n                            enum MHD_RequestTerminationCode toe)\n{\n  struct Request *request = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == request)\n    return;\n  if (NULL != request->session)\n    request->session->rc--;\n  if (NULL != request->pp)\n    MHD_destroy_post_processor (request->pp);\n  free (request);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (NULL == request)\n    return;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The conditional return is a reachable guard: when *req_cls is NULL (i.e. request == NULL) the callback must return early to avoid dereferencing request. This branch is taken at runtime in that case, so it is not unreachable code. (If an external API contract strictly guaranteed request non\u2011NULL in all calls, a static analysis might flag the branch as unreachable, but nothing in the provided fragment makes it unreachable.)"
}