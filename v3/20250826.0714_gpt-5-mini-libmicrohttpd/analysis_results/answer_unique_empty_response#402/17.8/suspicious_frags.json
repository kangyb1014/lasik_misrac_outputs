{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of answer_unique_empty_response:\n```c\nstatic enum MHD_Result\nanswer_unique_empty_response (void *cls,\n                              struct MHD_Connection *connection,\n                              const char *url,\n                              const char *method,\n                              const char *version,\n                              const char *upload_data,\n                              size_t *upload_data_size,\n                              void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_empty (MHD_RF_NONE);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (0,\n                                       NULL,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No function parameter variable is assigned to in this function. The only write involving a parameter is the assignment '*req_cls = (void *)&marker;': this modifies the object referred to by the pointer parameter req_cls, which is explicitly allowed by Rule 17.8; the pointer parameter itself (req_cls) is not reassigned. The other parameters are only read or explicitly cast to void to mark them unused ((void) cls; (void) url; (void) version; (void) upload_data; (void) upload_data_size;), so they are not modified. There are no statements like 'req_cls = ...', 'connection = ...', or similar that would reassign pointer parameters. Therefore there are no code fragments that need investigation for a potential violation of MISRA C 2023 Rule 17.8."
}