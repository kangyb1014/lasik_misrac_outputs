{
  "user_message": "An agent A claimed that the following MHD_destroy_post_processor code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_destroy_post_processor.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_destroy_post_processor (struct MHD_PostProcessor *pp)\n{\n  enum MHD_Result ret;\n\n  if (NULL == pp)\n    return MHD_YES;\n  if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n  }\n  /* These internal strings need cleaning up since\n     the post-processing may have been interrupted\n     at any stage */\n  if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;\n  else\n    ret = MHD_YES;\n  pp->have = NE_none;\n  free_unmarked (pp);\n  if (NULL != pp->nested_boundary)\n    free (pp->nested_boundary);\n  free (pp);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes a string literal (\"\\n\") which decays to a pointer to char. If the prototype of post_process_urlencoded declares the corresponding parameter as a non-const pointer (e.g. char *), this violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when possible. If the function parameter is declared as const char * (or otherwise does not allow modification), then there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_destroy_post_processor: entry\n  pp=0x561fc18db3e0\n  state=5 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nAbout to call post_process_urlencoded: literal=0x561f951a8e3c value='\n' length=1\n  pp state before call: 5 xbuf_pos=0 have=0\nMHD_destroy_post_processor: after post_process_urlencoded call\n  pp=0x561fc18db3e0\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nDecision computed: ret=1 (0==MHD_YES?) pp->xbuf_pos=0 pp->state=1\nMHD_destroy_post_processor: before cleanup and free_unmarked\n  pp=0x561fc18db3e0\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nMHD_destroy_post_processor exit: returning ret=1\n========================================\nMHD_destroy_post_processor: entry\n  pp=0x561fc18db3e0\n  state=5 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nAbout to call post_process_urlencoded: literal=0x561f951a8e3c value='\n' length=1\n  pp state before call: 5 xbuf_pos=0 have=0\nMHD_destroy_post_processor: after post_process_urlencoded call\n  pp=0x561fc18db3e0\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nDecision computed: ret=1 (0==MHD_YES?) pp->xbuf_pos=0 pp->state=1\nMHD_destroy_post_processor: before cleanup and free_unmarked\n  pp=0x561fc18db3e0\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nMHD_destroy_post_processor exit: returning ret=1\n========================================\nMHD_destroy_post_processor: entry\n  pp=0x561fc18db3e0\n  state=5 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nAbout to call post_process_urlencoded: literal=0x561f951a8e3c value='\n' length=1\n  pp state before call: 5 xbuf_pos=0 have=0\nMHD_destroy_post_processor: after post_process_urlencoded call\n  pp=0x561fc18db3e0\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nDecision computed: ret=1 (0==MHD_YES?) pp->xbuf_pos=0 pp->state=1\nMHD_destroy_post_processor: before cleanup and free_unmarked\n  pp=0x561fc18db3e0\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nMHD_destroy_post_processor exit: returning ret=1\n========================================\nMHD_destroy_post_processor: entry\n  pp=0x7fc61faf8010\n  state=5 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nAbout to call post_process_urlencoded: literal=0x561f951a8e3c value='\n' length=1\n  pp state before call: 5 xbuf_pos=0 have=0\nMHD_destroy_post_processor: after post_process_urlencoded call\n  pp=0x7fc61faf8010\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nDecision computed: ret=1 (0==MHD_YES?) pp->xbuf_pos=0 pp->state=1\nMHD_destroy_post_processor: before cleanup and free_unmarked\n  pp=0x7fc61faf8010\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nMHD_destroy_post_processor exit: returning ret=1\n========================================\nMHD_destroy_post_processor: entry\n  pp=0x561fc18dc670\n  state=5 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nAbout to call post_process_urlencoded: literal=0x561f951a8e3c value='\n' length=1\n  pp state before call: 5 xbuf_pos=0 have=0\nMHD_destroy_post_processor: after post_process_urlencoded call\n  pp=0x561fc18dc670\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nDecision computed: ret=1 (0==MHD_YES?) pp->xbuf_pos=0 pp->state=1\nMHD_destroy_post_processor: before cleanup and free_unmarked\n  pp=0x561fc18dc670\n  state=1 xbuf_pos=0 have=0 nested_boundary=(nil)\n---\nMHD_destroy_post_processor exit: returning ret=1\n========================================\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s report is plausible but not provably correct given the information provided. MISRA C:2023 Rule 8.13 says pointers should be to const-qualified types whenever possible. If post_process_urlencoded is declared to take a non-const pointer (e.g. char *), and the function does not need to modify the buffer, then passing the string literal \"\\n\" (which has static storage and should not be modified) to a non-const parameter would be a MISRA 8.13 concern and also risk undefined behavior if the function attempted to modify it. However, the posted MHD_destroy_post_processor code does not show the prototype of post_process_urlencoded, so you cannot conclude a rule violation from this call alone. If post_process_urlencoded\u2019s parameter is declared as const char * (or otherwise const-qualified), there is no MISRA 8.13 violation here. To determine correctness you must inspect the declaration of post_process_urlencoded; if it is currently non-const and the function does not modify the data, change its signature to accept const char * (or otherwise ensure the pointer is const-qualified)."
}