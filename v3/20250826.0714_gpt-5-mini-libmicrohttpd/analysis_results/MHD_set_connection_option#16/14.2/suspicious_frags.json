{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_option:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_option (struct MHD_Connection *connection,\n                           enum MHD_CONNECTION_OPTION option,\n                           ...)\n{\n  va_list ap;\n  struct MHD_Daemon *daemon;\n  unsigned int ui_val;\n\n  daemon = connection->daemon;\n  switch (option)\n  {\n  case MHD_CONNECTION_OPTION_TIMEOUT:\n    if (0 == connection->connection_timeout_ms)\n      connection->last_activity = MHD_monotonic_msec_counter ();\n    va_start (ap, option);\n    ui_val = va_arg (ap, unsigned int);\n    va_end (ap);\n#if (SIZEOF_UINT64_T - 2) <= SIZEOF_UNSIGNED_INT\n    if ((UINT64_MAX / 4000 - 1) < ui_val)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"The specified connection timeout (%u) is too \" \\\n                   \"large. Maximum allowed value (%\" PRIu64 \") will be used \" \\\n                   \"instead.\\n\"),\n                ui_val,\n                (UINT64_MAX / 4000 - 1));\n#endif\n      ui_val = UINT64_MAX / 4000 - 1;\n    }\n#endif /* (SIZEOF_UINT64_T - 2) <= SIZEOF_UNSIGNED_INT */\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n#if defined(MHD_USE_THREADS)\n      MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n      if (! connection->suspended)\n      {\n        if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n          XDLL_remove (daemon->normal_timeout_head,\n                       daemon->normal_timeout_tail,\n                       connection);\n        else\n          XDLL_remove (daemon->manual_timeout_head,\n                       daemon->manual_timeout_tail,\n                       connection);\n        connection->connection_timeout_ms = ((uint64_t) ui_val) * 1000;\n        if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n          XDLL_insert (daemon->normal_timeout_head,\n                       daemon->normal_timeout_tail,\n                       connection);\n        else\n          XDLL_insert (daemon->manual_timeout_head,\n                       daemon->manual_timeout_tail,\n                       connection);\n      }\n#if defined(MHD_USE_THREADS)\n      MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n    }\n    return MHD_YES;\n  default:\n    return MHD_NO;\n  }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No for-loop constructs are present in the provided function. A text search shows no occurrences of the token \u2018for\u2019 (neither 'for(' nor 'for ('). Therefore MISRA C:2023 Rule 14.2 (well\u2011formed for loops) has no direct applicability to this translation-unit fragment and there are no in-scope code fragments to flag for investigation under that rule.\n\nNotes on other items that do NOT need to be investigated here (and why):\n- Switch, va_list usage, function calls and macro invocations (e.g. XDLL_remove, XDLL_insert, MHD_monotonic_msec_counter, MHD_D_IS_USING_THREAD_PER_CONN_, MHD_mutex_lock_chk_, MHD_mutex_unlock_chk_) are not for statements themselves. Any for loops inside their definitions are outside the shown code and would need inspection in their own definitions; they are not present in this fragment and therefore are not flagged here.\n- There are no loop counters or loop control flags in this function because there are no loops.\n\nIf you want rule 14.2 checked comprehensively, provide the definitions/expansions of the macros/functions called (XDLL_remove/insert and any other included macros) so any for statements inside them can be inspected."
}