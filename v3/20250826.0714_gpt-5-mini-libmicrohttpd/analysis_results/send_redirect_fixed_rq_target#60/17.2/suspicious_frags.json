{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of send_redirect_fixed_rq_target:\n```c\nstatic void\nsend_redirect_fixed_rq_target (struct MHD_Connection *c)\n{\n  char *b;\n  size_t fixed_uri_len;\n  size_t i;\n  size_t o;\n  char *hdr_name;\n  size_t hdr_name_len;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (0 != c->rq.hdrs.rq_line.num_ws_in_uri);\n  mhd_assert (c->rq.hdrs.rq_line.num_ws_in_uri <= \\\n              c->rq.req_target_len);\n  fixed_uri_len = c->rq.req_target_len\n                  + 2 * c->rq.hdrs.rq_line.num_ws_in_uri;\n  if ( (fixed_uri_len + 200 > c->daemon->pool_size) ||\n       (fixed_uri_len > MHD_MAX_FIXED_URI_LEN) ||\n       (NULL == (b = malloc (fixed_uri_len + 1))) )\n  {\n    connection_close_error (c,\n                            _ (\"The request has whitespace character is \" \\\n                               \"in the URI and the URI is too large to \" \\\n                               \"send automatic redirect to fixed URI.\\n\"));\n    return;\n  }\n  i = 0;\n  o = 0;\n\n  do\n  {\n    const char chr = c->rq.hdrs.rq_line.rq_tgt[i++];\n\n    mhd_assert ('\\r' != chr); /* Replaced during request line parsing */\n    mhd_assert ('\\n' != chr); /* Rejected during request line parsing */\n    mhd_assert (0 != chr); /* Rejected during request line parsing */\n    switch (chr)\n    {\n    case ' ':\n      b[o++] = '%';\n      b[o++] = '2';\n      b[o++] = '0';\n      break;\n    case '\\t':\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = '9';\n      break;\n    case 0x0B:   /* VT (vertical tab) */\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = 'B';\n      break;\n    case 0x0C:   /* FF (form feed) */\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = 'C';\n      break;\n    default:\n      b[o++] = chr;\n      break;\n    }\n  } while (i < c->rq.req_target_len);\n  mhd_assert (fixed_uri_len == o);\n  b[o] = 0; /* Zero-terminate the result */\n\n  hdr_name_len = MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_LOCATION);\n  hdr_name = malloc (hdr_name_len + 1);\n  if (NULL != hdr_name)\n  {\n    memcpy (hdr_name,\n            MHD_HTTP_HEADER_LOCATION,\n            hdr_name_len + 1);\n    /* hdr_name and b are free()d within this call */\n    transmit_error_response_header (c,\n                                    MHD_HTTP_MOVED_PERMANENTLY,\n                                    RQ_TARGET_INVALID_CHAR,\n                                    hdr_name,\n                                    hdr_name_len,\n                                    b,\n                                    o);\n    return;\n  }\n  free (b);\n  connection_close_error (c,\n                          _ (\"The request has whitespace character is in the \" \\\n                             \"URI.\\n\"));\n  return;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);",
    "transmit_error_response_header (c,\\n                                    MHD_HTTP_MOVED_PERMANENTLY,\\n                                    RQ_TARGET_INVALID_CHAR,\\n                                    hdr_name,\\n                                    hdr_name_len,\\n                                    b,\\n                                    o);",
    "const char chr = c->rq.hdrs.rq_line.rq_tgt[i++];",
    "connection_close_error (c,\\n                          _ (\"The request has whitespace character is in the \" \\n                             \"URI.\\n\"));",
    "hdr_name = malloc (hdr_name_len + 1);",
    "mhd_assert ('\\n' != chr); /* Rejected during request line parsing */",
    "mhd_assert (c->rq.hdrs.rq_line.num_ws_in_uri <= \\n              c->rq.req_target_len);",
    "mhd_assert (0 != chr); /* Rejected during request line parsing */",
    "mhd_assert (0 != c->rq.hdrs.rq_line.num_ws_in_uri);",
    "if ( (fixed_uri_len + 200 > c->daemon->pool_size) ||\\n       (fixed_uri_len > MHD_MAX_FIXED_URI_LEN) ||\\n       (NULL == (b = malloc (fixed_uri_len + 1))) )",
    "mhd_assert ('\\r' != chr); /* Replaced during request line parsing */",
    "connection_close_error (c,\\n                            _ (\"The request has whitespace character is \" \\n                               \"in the URI and the URI is too large to \" \\n                               \"send automatic redirect to fixed URI.\\n\"));",
    "hdr_name_len = MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_LOCATION);",
    "free (b);",
    "memcpy (hdr_name,\\n            MHD_HTTP_HEADER_LOCATION,\\n            hdr_name_len + 1);"
  ],
  "explanation": "I reported all locations in this function that invoke other functions or macros which could potentially lead to indirect recursion and therefore require investigation (assertions, allocations, memcpy, response-transmission and connection-close paths, and the gettext-like _() macro usage). Other code fragments in the function do not need investigation for indirect recursion because they are local, non-call operations: variable declarations and initializations, arithmetic (fixed_uri_len calculation), buffer indexing and assignments (b[o++] = ... and b[o] = 0), the switch/case that encodes characters, the loop control (do/while and index increments), and return statements. These constructs do not perform function calls and thus cannot by themselves cause direct or indirect self-calls of send_redirect_fixed_rq_target; they only manipulate local data. Therefore they are not suspicious for MISRA C Rule 17.2 and do not need further investigation."
}