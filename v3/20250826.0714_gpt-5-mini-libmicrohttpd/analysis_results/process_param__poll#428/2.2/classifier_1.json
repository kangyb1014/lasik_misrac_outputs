{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of process_param__poll:\n```c\nstatic enum PerfRepl_param_result\nprocess_param__poll (const char *param_name)\n{\n  if (tool_params.epoll)\n  {\n    fprintf (stderr, \"Parameter '%s' cannot be used together \"\n             \"with '-e' or '--epoll'.\\n\", param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  if (tool_params.select)\n  {\n    fprintf (stderr, \"Parameter '%s' cannot be used together \"\n             \"with '-s' or '--select'.\\n\", param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  tool_params.poll = ! 0;\n  return '-' == param_name[1] ?\n         PERF_RPL_PARAM_FULL_STR :PERF_RPL_PARAM_ONE_CHAR;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic enum PerfRepl_param_result\nprocess_param__poll (const char *param_name)\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No \u2014 the function body contains no obvious dead operations: the two fprintf/return branches and the assignment tool_params.poll = !0; and the final return all affect program behaviour if the function is executed. Removal of any of those statements would change behaviour (different output/return value or not setting the poll flag). Note: if the function is never called it is simply unreachable (per MISRA note 2 this is not classed as dead code). A hypothetical violation would occur if the assignment were executed but the poll flag is never subsequently read (or is already guaranteed to have the same value); in that case the assignment would be dead code and rule 2.2 would be violated."
}