{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcpy(mhd_copy, buffer, size) can read beyond the bounds of the object referenced by 'buffer' because the function only checks buffer != NULL and does not ensure that the object pointed to by 'buffer' is at least 'size' bytes long. For example, if the caller passes a source array char src[4] = \"abc\\0\" but passes size == 10, memcpy will read past src and invoke undefined behavior. The destination is allocated with malloc(size) (so the destination is OK), but the source side is not checked, so Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_buffer_copy code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1999.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_from_buffer_copy as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_buffer_copy:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n\n  if (0 == size)\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  if (NULL == buffer)\n    return NULL;\n\n  mhd_copy = malloc (size);\n  if (NULL == mhd_copy)\n    return NULL;\n  memcpy (mhd_copy, buffer, size);\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n  if (NULL == r)\n    free (mhd_copy);\n  else\n  {\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n  }\n\n  return r;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_from_buffer_copy code.\n",
  "test_code": "_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n  FILE *log = fopen(\"/tmp/logs/1999.txt\", \"a\");\n\n  if (log) {\n    fprintf(log, \"MHD_create_response_from_buffer_copy: enter size=%zu buffer=%p\\n\", size, buffer);\n    fflush(log);\n  }\n\n  if (0 == size)\n  {\n    if (log)\n    {\n      fprintf(log, \"size == 0 -> delegating to MHD_create_response_from_buffer_with_free_callback_cls\\n\");\n      fclose(log);\n    }\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  }\n  if (NULL == buffer)\n  {\n    if (log)\n    {\n      fprintf(log, \"buffer == NULL -> returning NULL\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n\n  mhd_copy = malloc (size);\n  if (log)\n  {\n    fprintf(log, \"malloc(%zu) -> %p\\n\", size, mhd_copy);\n    fflush(log);\n  }\n  if (NULL == mhd_copy)\n  {\n    if (log)\n    {\n      fprintf(log, \"malloc failed -> returning NULL\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"about to memcpy(mhd_copy=%p, buffer=%p, size=%zu)\\n\", mhd_copy, buffer, size);\n    fflush(log);\n  }\n\n  memcpy (mhd_copy, buffer, size);\n\n  if (log)\n  {\n    fprintf(log, \"memcpy completed\\n\");\n    /* Dump up to the first 64 bytes of the allocated copy to help reproduce the source contents\n       (reading mhd_copy is safe because it was allocated with malloc(size)). */\n    size_t dump = size > 64 ? 64 : size;\n    fprintf(log, \"dump first %zu bytes of mhd_copy @%p:\", dump, mhd_copy);\n    {\n      unsigned char *p = (unsigned char *)mhd_copy;\n      for (size_t i = 0; i < dump; ++i)\n        fprintf(log, \" %02x\", p[i]);\n    }\n    fprintf(log, \"\\n\");\n    fflush(log);\n  }\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n  if (NULL == r)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_create_response_from_buffer_with_free_callback_cls returned NULL; freeing mhd_copy=%p\\n\", mhd_copy);\n      fclose(log);\n    }\n    free (mhd_copy);\n  }\n  else\n  {\n    if (log)\n    {\n      fprintf(log, \"response created %p, setting data_buffer_size = %zu\\n\", r, size);\n      fflush(log);\n    }\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n    if (log)\n    {\n      fprintf(log, \"finished MHD_create_response_from_buffer_copy -> returning response %p\\n\", r);\n      fclose(log);\n    }\n  }\n\n  return r;\n}\n"
}