{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes a string literal (the result of the _() translation macro) to MHD_DLOG. If either the _() macro/gettext returns a plain char * or MHD_DLOG's corresponding parameter is declared as char * (non-const), then a pointer to a non-const-qualified type is being used when a const-qualified pointer is appropriate (string literals and translation literals should be treated as const char *). In that situation Rule 8.13 is violated. If, however, MHD_DLOG's prototype accepts a const char * (and _() yields const char *), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_check_timedout code that contains useful probe functions that print useful logs to a file \"/tmp/logs/313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_check_timedout as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_check_timedout:\n```c\nstatic bool\nconnection_check_timedout (struct MHD_Connection *c)\n{\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t now;\n  uint64_t since_actv;\n\n  if (c->suspended)\n    return false;\n  if (0 == timeout)\n    return false;\n  now = MHD_monotonic_msec_counter ();\n  since_actv = now - c->last_activity;\n  /* Keep the next lines in sync with #connection_get_wait() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (c->daemon,\n                  _ (\"Detected system clock %u milliseconds jump back.\\n\"),\n                  (unsigned int) jump_back);\n#endif\n        return false;\n      }\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (c->daemon,\n                _ (\"Detected too large system clock %\" PRIu64 \" milliseconds \"\n                   \"jump back.\\n\"),\n                jump_back);\n#endif\n    }\n    return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified connection_check_timedout code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdbool.h>\n\n/* Probe logging helper. Uses only const-qualified pointers for string\n * literals to avoid introducing new const-related violations. */\nstatic void\nmhd_probe_log (const char *event, const struct MHD_Connection *c,\n               uint64_t now, uint64_t since_actv, uint64_t jump_back,\n               const char *lit, const char *trans)\n{\n  FILE *f = fopen(\"/tmp/logs/313.txt\", \"a\");\n  if (!f)\n    return;\n\n  /* Log basic connection/state info. Cast pointers to (void*) for %p. */\n  fprintf (f, \"%s: conn=%p daemon=%p suspended=%d timeout=%\" PRIu64\n                \" last_activity=%\" PRIu64 \" now=%\" PRIu64\n                \" since_actv=%\" PRIu64,\n           event,\n           (void *) c,\n           (void *) (c ? c->daemon : NULL),\n           (int) (c ? c->suspended : -1),\n           (uint64_t) (c ? c->connection_timeout_ms : 0ULL),\n           (uint64_t) (c ? c->last_activity : 0ULL),\n           now,\n           since_actv);\n\n  if (jump_back != UINT64_MAX)\n    fprintf (f, \" jump_back=%\" PRIu64, jump_back);\n\n  if (lit)\n    fprintf (f, \" literal_addr=%p literal=\\\"%s\\\"\", (const void *) lit, lit);\n  if (trans)\n    fprintf (f, \" trans_addr=%p trans=\\\"%s\\\"\", (const void *) trans, trans);\n\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic bool\nconnection_check_timedout (struct MHD_Connection *c)\n{\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t now;\n  uint64_t since_actv;\n\n  /* Log entry and suspended/timeout-zero short-circuits. */\n  mhd_probe_log (\"enter\", c, 0ULL, 0ULL, UINT64_MAX, NULL, NULL);\n\n  if (c->suspended)\n  {\n    mhd_probe_log (\"suspended\", c, 0ULL, 0ULL, UINT64_MAX, NULL, NULL);\n    return false;\n  }\n  if (0 == timeout)\n  {\n    mhd_probe_log (\"timeout_zero\", c, 0ULL, 0ULL, UINT64_MAX, NULL, NULL);\n    return false;\n  }\n\n  now = MHD_monotonic_msec_counter ();\n  since_actv = now - c->last_activity;\n\n  /* Log time computations. */\n  mhd_probe_log (\"time_computed\", c, now, since_actv, UINT64_MAX, NULL, NULL);\n\n  /* Keep the next lines in sync with #connection_get_wait() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    mhd_probe_log (\"timeout_exceeded\", c, now, since_actv, UINT64_MAX, NULL, NULL);\n\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      {\n#ifdef HAVE_MESSAGES\n        /* Prepare literals separately so we can log both the literal\n         * and the translation pointer/address used when calling\n         * MHD_DLOG. We deliberately keep these as const char * to\n         * avoid introducing non-const pointer uses. */\n        const char *lit = \"Detected system clock %u milliseconds jump back.\\n\";\n        const char *trans = _(lit);\n\n        /* Log the exact message literal and the translated pointer to\n         * provide evidence that a string literal (addressable const data)\n         * is being passed to MHD_DLOG. This helps to reproduce the\n         * scenario where a non-const parameter could be used. */\n        mhd_probe_log (\"about_to_mhd_dlog_small\", c, now, since_actv, jump_back, lit, trans);\n\n        MHD_DLOG (c->daemon,\n                  trans,\n                  (unsigned int) jump_back);\n\n        /* Log after the DLOG call for additional control-flow tracing. */\n        mhd_probe_log (\"after_mhd_dlog_small\", c, now, since_actv, jump_back, lit, trans);\n#endif\n        return false;\n      }\n#ifdef HAVE_MESSAGES\n      const char *lit2 = \"Detected too large system clock %\" PRIu64 \" milliseconds jump back.\\n\";\n      const char *trans2 = _(lit2);\n\n      mhd_probe_log (\"about_to_mhd_dlog_large\", c, now, since_actv, jump_back, lit2, trans2);\n\n      MHD_DLOG (c->daemon,\n                trans2,\n                jump_back);\n\n      mhd_probe_log (\"after_mhd_dlog_large\", c, now, since_actv, jump_back, lit2, trans2);\n#endif\n    }\n    mhd_probe_log (\"will_return_true\", c, now, since_actv, UINT64_MAX, NULL, NULL);\n    return true;\n  }\n\n  mhd_probe_log (\"will_return_false\", c, now, since_actv, UINT64_MAX, NULL, NULL);\n  return false;\n}"
}