{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_apply_params:\n```c\nstatic int\ncheck_apply_params (void)\n{\n  if (tool_params.help)\n  {\n    show_help ();\n    return -1;\n  }\n  else if (tool_params.version)\n  {\n    print_version ();\n    return -1;\n  }\n  check_param_port ();\n  check_apply_param__all_cpus ();\n  check_apply_param__threads ();\n  if (! check_apply_param__thread_per_conn ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__epoll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__poll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  check_param__empty_tiny_medium_large ();\n  check_param__shared_single_unique ();\n  if (! check_param__connections ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  return 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic int\ncheck_apply_params (void)\n{\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation can be determined from the fragment alone. The fragment only shows the static function definition; nothing in this snippet proves the function is executed unnecessarily. If the function is never called, it is unreachable (note 2) rather than dead code. A concrete violation scenario would be: check_apply_params is called at runtime but every operation it performs has no observable side effect (for example, all called check_* helpers have no side effects and their results are ignored by the rest of the program, and the caller also ignores check_apply_params\u2019s return value). In that case the function is executed but its removal would not affect program behaviour, which would violate MISRA C 2023 Rule 2.2."
}