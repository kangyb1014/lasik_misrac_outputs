{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'response' is declared as 'struct MHD_Response *response' but the function body only reads from response (iterates response->first_header) and does not modify the object pointed to. According to Rule 8.13 the pointer should be const-qualified whenever possible, so it should be 'const struct MHD_Response *response'. Additionally, if callers are not expected to modify the returned header, the return type could be 'const struct MHD_HTTP_Res_Header *' instead of a non-const pointer. As written, the non-const 'response' parameter (and possibly the non-const return) violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_element_n_ code.\n",
  "test_code": "#include <stdio.h>\n\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  /* Open log file for appending probe information. Keep logging best-effort; do\n     not fail the function if logging is not available. */\n  FILE *logf = fopen(\"/tmp/logs/2103.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"MHD_get_response_element_n_: entry response=%p kind=%d key=%p key_len=%zu\\n\",\n            (void *) response, (int) kind, (const void *) key, key_len);\n    if (NULL != key)\n      fprintf(logf, \"  key (as string)='%s'\\n\", key);\n    fflush(logf);\n  }\n\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log each header node visited: pointer, header_size, kind and a\n       safe representation of the header contents (use precision to avoid\n       over-reads if header is not NUL-terminated). */\n    if (NULL != logf)\n    {\n      const char *hdr = pos->header ? pos->header : \"(null)\";\n      int hdr_len = (int) (pos->header ? pos->header_size : 0);\n      fprintf(logf, \"  iter pos=%p header_size=%zu kind=%d header='%.*s'\\n\",\n              (void *) pos, pos->header_size, (int) pos->kind, hdr_len, hdr);\n      fflush(logf);\n    }\n\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n    {\n      if (NULL != logf)\n      {\n        fprintf(logf, \"  match at pos=%p (returning this node)\\n\", (void *) pos);\n        fclose(logf);\n      }\n      return pos;\n    }\n  }\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"  no matching header found; returning NULL\\n\");\n    fclose(logf);\n  }\n\n  return NULL;\n}\n"
}