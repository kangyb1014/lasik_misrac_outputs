{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local iterator pointer 'pos' is declared as 'struct MHD_HTTP_Res_Header *pos;' but it is only used to read header fields (no writes through pos). Therefore the pointed-to type could be const-qualified (e.g. 'const struct MHD_HTTP_Res_Header *pos'), so the current declaration violates MISRA C 2023 Rule 8.13. (If the API must return a non-const pointer, either the function signature should be changed to return a pointer-to-const or an explicit decision/cast should be documented.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_element_n_ code.\n",
  "test_code": "#include <stdio.h>\n\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *logf = fopen(\"/tmp/logs/2103.txt\", \"a\");\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"MHD_get_response_element_n_: enter response=%p kind=%d key=%s key_len=%zu\\n\",\n            (void *) response,\n            (int) kind,\n            (key != NULL) ? key : \"(null)\",\n            key_len);\n  }\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    int size_match = (pos->header_size == key_len) ? 1 : 0;\n    int kind_match = (kind == pos->kind) ? 1 : 0;\n    int cmp = 0;\n\n    /* Only perform the (potentially expensive) comparison if the simple\n       checks pass, preserving original control flow and behavior. */\n    if (size_match && kind_match)\n    {\n      cmp = MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size) ? 1 : 0;\n    }\n\n    if (logf != NULL)\n    {\n      fprintf(logf, \"iter: pos=%p header=%p header_size=%zu pos_kind=%d size_match=%d kind_match=%d cmp=%d\\n\",\n              (void *) pos,\n              (void *) pos->header,\n              pos->header_size,\n              (int) pos->kind,\n              size_match,\n              kind_match,\n              cmp);\n\n      /* Log a prefix of the header content (up to 128 bytes) to help\n         reproduce/issues with binary or non-terminated headers. This is a\n         read-only operation and does not modify the header. */\n      if (pos->header != NULL && pos->header_size > 0)\n      {\n        size_t to_print = pos->header_size;\n        if (to_print > 128U) to_print = 128U;\n        fprintf(logf, \"header_prefix: \");\n        fwrite(pos->header, 1, to_print, logf);\n        if (pos->header_size > to_print) fprintf(logf, \"...\");\n        fprintf(logf, \"\\n\");\n      }\n    }\n\n    if (size_match && kind_match && cmp)\n    {\n      if (logf != NULL)\n      {\n        fprintf(logf, \"match found at pos=%p\\n\", (void *) pos);\n        fclose(logf);\n      }\n      return pos;\n    }\n  }\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"no match found, returning NULL\\n\");\n    fclose(logf);\n  }\n\n  return NULL;\n}\n"
}