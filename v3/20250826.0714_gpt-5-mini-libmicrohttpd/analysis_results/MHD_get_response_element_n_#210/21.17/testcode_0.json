{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call itself invokes a custom comparator MHD_str_equal_caseless_bin_n_. If that function internally uses <string.h> functions that expect NUL-terminated C-strings (for example strlen(), strcmp(), strcasecmp(), strcpy(), strcat() or any implementation that calls those), and pos->header is a length-delimited buffer without a terminating '\\0' (or the implementation calls strlen(pos->header) or otherwise reads past header_size), then those library calls can read beyond the bounds of pos->header (or key) and thus violate MISRA C 2023 Rule 21.17. For example, an implementation that does if (strlen(pos->header) == strlen(key) && strncasecmp(pos->header, key, pos->header_size) == 0) would read bytes past the header_size when pos->header is not NUL-terminated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2109.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_element_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *f = NULL;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Probe: log header pointer, sizes, kinds and a safe dump of header bytes. */\n    f = fopen(\"/tmp/logs/2109.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_get_response_element_n_: pos=%p header=%p header_size=%zu key=%p key_len=%zu kind=%d pos->kind=%d\\n\",\n              (void *)pos, (void *)pos->header, pos->header_size, (const void *)key, key_len,\n              (int)kind, (int)pos->kind);\n\n      if ((NULL != pos->header) && (pos->header_size > 0U))\n      {\n        /* Dump up to 64 bytes (or header_size if smaller) in hex for inspection. This reads only within bounds. */\n        size_t i;\n        size_t dump = pos->header_size;\n        if (dump > 64U)\n          dump = 64U;\n\n        fprintf(f, \"header bytes (up to %zu):\", dump);\n        for (i = 0U; i < dump; ++i)\n          fprintf(f, \" %02x\", (unsigned char) pos->header[i]);\n        if (pos->header_size > dump)\n          fprintf(f, \" ...\");\n        fprintf(f, \"\\n\");\n\n        /* Safely check whether a NUL exists within header_size (this does not read past the declared size). */\n        size_t nulpos = (size_t)(-1);\n        for (i = 0U; i < pos->header_size; ++i)\n        {\n          if (pos->header[i] == '\\0')\n          {\n            nulpos = i;\n            break;\n          }\n        }\n        if ((size_t)(-1) != nulpos)\n          fprintf(f, \"NUL found at offset %zu within header_size %zu\\n\", nulpos, pos->header_size);\n        else\n          fprintf(f, \"No NUL within header_size %zu\\n\", pos->header_size);\n      }\n      else\n      {\n        fprintf(f, \"header is NULL or header_size==0\\n\");\n      }\n\n      fclose(f);\n      f = NULL;\n    }\n\n    /* Preserve original logic: only call comparator when sizes and kinds match. */\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind))\n    {\n      int cmp = MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size);\n\n      f = fopen(\"/tmp/logs/2109.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"Comparator called for pos=%p result=%d\\n\", (void *)pos, cmp);\n        if (cmp)\n          fprintf(f, \"Match found: returning pos=%p\\n\", (void *)pos);\n        fclose(f);\n        f = NULL;\n      }\n\n      if (cmp)\n        return pos;\n    }\n  }\n\n  f = fopen(\"/tmp/logs/2109.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"No match found, returning NULL\\n\");\n    fclose(f);\n  }\n\n  return NULL;\n}\n"
}