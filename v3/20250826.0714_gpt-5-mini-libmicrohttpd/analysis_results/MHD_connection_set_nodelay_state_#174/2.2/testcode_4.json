{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the #else branch for !TCP_NODELAY the statements \u201c(void) connection; (void) nodelay_state;\u201d are no\u2011op expression statements used only to suppress unused\u2011parameter warnings. They have no side effects and removing them would not change the program behaviour, so they constitute dead code in the sense of MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_set_nodelay_state_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1742.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_set_nodelay_state_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_set_nodelay_state_:\n```c\nbool\nMHD_connection_set_nodelay_state_ (struct MHD_Connection *connection,\n                                   bool nodelay_state)\n{\n#ifdef TCP_NODELAY\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n\n  if (_MHD_YES == connection->is_nonip)\n    return false;\n\n  if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) (nodelay_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n  {\n    connection->sk_nodelay = nodelay_state;\n    return true;\n  }\n\n  err_code = MHD_socket_get_error_ ();\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n  {\n    if (_MHD_UNKNOWN == connection->is_nonip)\n      connection->is_nonip = _MHD_YES;\n#ifdef HAVE_MESSAGES\n    else\n    {\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\"),\n                \"TCP_NODELAY\",\n                nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                (int) connection->socket_fd,\n                MHD_socket_strerr_ (err_code));\n    }\n#endif /* HAVE_MESSAGES */\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"Setting %s option to %s state failed: %s\\n\"),\n              \"TCP_NODELAY\",\n              nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n              MHD_socket_strerr_ (err_code));\n  }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! TCP_NODELAY */\n  (void) connection; (void) nodelay_state; /* Mute compiler warnings */\n#endif /* ! TCP_NODELAY */\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_set_nodelay_state_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append a log line describing control flow and key state. */\nstatic void\nmhd_probe_log (const char *where, struct MHD_Connection *connection,\n               bool nodelay_state, int err_code)\n{\n  FILE *f = fopen(\"/tmp/logs/1742.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"MHD_connection_set_nodelay_state_: %s\\n\", where);\n  fprintf (f, \"  connection=%p, nodelay_state=%d, err_code=%d\\n\",\n           (void *) connection, nodelay_state ? 1 : 0, err_code);\n  if (NULL != connection)\n  {\n    /* Print a few selected fields that exist in the original code. */\n    fprintf (f,\n             \"  connection->is_nonip=%d, connection->socket_fd=%d, connection->sk_nodelay=%d\\n\",\n             (int) connection->is_nonip,\n             (int) connection->socket_fd,\n             (int) connection->sk_nodelay);\n  }\n  fclose (f);\n}\n\nbool\nMHD_connection_set_nodelay_state_ (struct MHD_Connection *connection,\n                                   bool nodelay_state)\n{\n#ifdef TCP_NODELAY\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n\n  /* Log entry and parameters */\n  mhd_probe_log (\"ENTRY\", connection, nodelay_state, -1);\n\n  if (_MHD_YES == connection->is_nonip)\n  {\n    mhd_probe_log (\"EARLY_RETURN_is_nonip\", connection, nodelay_state, -1);\n    return false;\n  }\n\n  if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) (nodelay_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n  {\n    connection->sk_nodelay = nodelay_state;\n    mhd_probe_log (\"setsockopt_success\", connection, nodelay_state, 0);\n    return true;\n  }\n\n  err_code = MHD_socket_get_error_ ();\n  mhd_probe_log (\"setsockopt_failed_before_err_handling\", connection, nodelay_state, err_code);\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n  {\n    if (_MHD_UNKNOWN == connection->is_nonip)\n    {\n      connection->is_nonip = _MHD_YES;\n      mhd_probe_log (\"marked_is_nonip_yes\", connection, nodelay_state, err_code);\n    }\n#ifdef HAVE_MESSAGES\n    else\n    {\n      /* Preserve original logging behaviour but also record probe. */\n      mhd_probe_log (\"HAVE_MESSAGES_specific_err_case\", connection, nodelay_state, err_code);\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\"),\n                \"TCP_NODELAY\",\n                nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                (int) connection->socket_fd,\n                MHD_socket_strerr_ (err_code));\n    }\n#endif /* HAVE_MESSAGES */\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    mhd_probe_log (\"HAVE_MESSAGES_other_err_case\", connection, nodelay_state, err_code);\n    MHD_DLOG (connection->daemon,\n              _ (\"Setting %s option to %s state failed: %s\\n\"),\n              \"TCP_NODELAY\",\n              nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n              MHD_socket_strerr_ (err_code));\n  }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! TCP_NODELAY */\n  /* In the branch where TCP_NODELAY is not available the original code used\n     no-op casts to mute compiler warnings:\n       (void) connection; (void) nodelay_state;\n     Those are effectively dead statements. To provide evidence for the\n     reported violation, record that this branch was taken and the values of\n     the parameters into the probe log. This keeps the original behaviour\n     (function returns false) while providing an observable side-effect for\n     test instrumentation. */\n  mhd_probe_log (\"NO_TCP_NODELAY_BRANCH\", connection, nodelay_state, 0);\n#endif /* ! TCP_NODELAY */\n  return false;\n}\n"
}