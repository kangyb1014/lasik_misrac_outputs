{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_connection_set_nodelay_state_:\n```c\nbool\nMHD_connection_set_nodelay_state_ (struct MHD_Connection *connection,\n                                   bool nodelay_state)\n{\n#ifdef TCP_NODELAY\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n\n  if (_MHD_YES == connection->is_nonip)\n    return false;\n\n  if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) (nodelay_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n  {\n    connection->sk_nodelay = nodelay_state;\n    return true;\n  }\n\n  err_code = MHD_socket_get_error_ ();\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n  {\n    if (_MHD_UNKNOWN == connection->is_nonip)\n      connection->is_nonip = _MHD_YES;\n#ifdef HAVE_MESSAGES\n    else\n    {\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\"),\n                \"TCP_NODELAY\",\n                nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                (int) connection->socket_fd,\n                MHD_socket_strerr_ (err_code));\n    }\n#endif /* HAVE_MESSAGES */\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"Setting %s option to %s state failed: %s\\n\"),\n              \"TCP_NODELAY\",\n              nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n              MHD_socket_strerr_ (err_code));\n  }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! TCP_NODELAY */\n  (void) connection; (void) nodelay_state; /* Mute compiler warnings */\n#endif /* ! TCP_NODELAY */\n  return false;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n    MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n    MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n{",
    "err_code = MHD_socket_get_error_ ();",
    "MHD_DLOG (connection->daemon,\n          _ (\"Setting %s option to %s state failed \"\n             \"for TCP/IP socket %d: %s\\n\"),\n          \"TCP_NODELAY\",\n          nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n          (int) connection->socket_fd,\n          MHD_socket_strerr_ (err_code));",
    "MHD_DLOG (connection->daemon,\n          _ (\"Setting %s option to %s state failed: %s\\n\"),\n          \"TCP_NODELAY\",\n          nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n          MHD_socket_strerr_ (err_code));",
    "MHD_socket_strerr_ (err_code)",
    "if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) (nodelay_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n{\n    connection->sk_nodelay = nodelay_state;\n    return true;\n}"
  ],
  "explanation": "Other fragments in the function do not need investigation for Rule 17.2 because they are not function calls (or not callable code paths that could introduce recursion). Examples: variable declarations and initialisations (const MHD_SCKT_OPT_BOOL_ off_val = 0; const MHD_SCKT_OPT_BOOL_ on_val = 1; int err_code;), simple member checks and assignments (if (_MHD_YES == connection->is_nonip) return false;, connection->sk_nodelay = nodelay_state;), casts and sizeof usage ((const void *) (nodelay_state ? &on_val : &off_val), sizeof (off_val)), preprocessor conditionals and inert casts to silence warnings ((void) connection; (void) nodelay_state;), and return statements. These do not invoke other functions and therefore cannot constitute direct or indirect self-calls. The listed suspicious fragments include every function- or macro-like invocation present in the code that could possibly participate in a recursive call chain and thus warrant further investigation."
}