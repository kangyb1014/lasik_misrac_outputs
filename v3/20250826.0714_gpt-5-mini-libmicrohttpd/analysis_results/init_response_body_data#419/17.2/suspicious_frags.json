{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of init_response_body_data:\n```c\nstatic int\ninit_response_body_data (void)\n{\n  if (0 != body_dyn_size)\n  {\n    body_dyn = (char *) malloc (body_dyn_size);\n    if (NULL == body_dyn)\n    {\n      fprintf (stderr, \"Failed to allocate memory.\\n\");\n      return 0;\n    }\n    if (tool_params.medium)\n    {\n      /* Fill the body with HTML-like content */\n      size_t pos;\n      size_t filler_pos;\n      static const char body_header[] =\n        \"<html>\\n\"\n        \"<head>\\n<title>Sample page title</title>\\n<head>\\n\"\n        \"<body>\\n\";\n      static const char body_filler[] =\n        \"The quick brown fox jumps over the lazy dog.<br>\\n\";\n      static const char body_footer[] =\n        \"</body>\\n\"\n        \"</html>\\n\";\n      pos = 0;\n      memcpy (body_dyn + pos, body_header, MHD_STATICSTR_LEN_ (body_header));\n      pos += MHD_STATICSTR_LEN_ (body_header);\n      for (filler_pos = 0;\n           filler_pos < (body_dyn_size - (MHD_STATICSTR_LEN_ (body_header)\n                                          + MHD_STATICSTR_LEN_ (body_footer)));\n           ++filler_pos)\n      {\n        body_dyn[pos + filler_pos] =\n          body_filler[filler_pos % MHD_STATICSTR_LEN_ (body_filler)];\n      }\n      pos += filler_pos;\n      memcpy (body_dyn + pos, body_footer, MHD_STATICSTR_LEN_ (body_footer));\n    }\n    else\n    {\n      /* Fill the body with binary-like content */\n      size_t pos;\n      for (pos = 0; pos < body_dyn_size; ++pos)\n      {\n        body_dyn[pos] = (char) (unsigned char) (255U - pos % 256U);\n      }\n    }\n  }\n  return ! 0;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "body_dyn = (char *) malloc (body_dyn_size);",
    "memcpy (body_dyn + pos, body_header, MHD_STATICSTR_LEN_ (body_header));",
    "fprintf (stderr, \"Failed to allocate memory.\\n\");",
    "memcpy (body_dyn + pos, body_footer, MHD_STATICSTR_LEN_ (body_footer));",
    "pos += MHD_STATICSTR_LEN_ (body_header);",
    "for (filler_pos = 0; filler_pos < (body_dyn_size - (MHD_STATICSTR_LEN_ (body_header) + MHD_STATICSTR_LEN_ (body_footer))); ++filler_pos)",
    "body_dyn[pos + filler_pos] = body_filler[filler_pos % MHD_STATICSTR_LEN_ (body_filler)];"
  ],
  "explanation": "Rule 17.2 concerns functions calling themselves directly or indirectly. The fragments selected are every location in this function source that invokes other functions or function-like entities (malloc, fprintf, memcpy and the uses of MHD_STATICSTR_LEN_). Each of these call sites must be investigated to ensure none of those callees can (directly or indirectly) call init_response_body_data. All other parts of the function contain only local declarations, constant/static data definitions, condition checks, simple assignments, arithmetic, loops that perform element-wise assignment, type casts, and return statements. Those non-call fragments cannot introduce a function-call path back to init_response_body_data, so they do not need investigation for recursion under MISRA C 2023 Rule 17.2."
}