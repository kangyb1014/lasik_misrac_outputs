{
  "user_message": "An agent A claimed that the following init_response_body_data code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of init_response_body_data.\n```c\nstatic int\ninit_response_body_data (void)\n{\n  if (0 != body_dyn_size)\n  {\n    body_dyn = (char *) malloc (body_dyn_size);\n    if (NULL == body_dyn)\n    {\n      fprintf (stderr, \"Failed to allocate memory.\\n\");\n      return 0;\n    }\n    if (tool_params.medium)\n    {\n      /* Fill the body with HTML-like content */\n      size_t pos;\n      size_t filler_pos;\n      static const char body_header[] =\n        \"<html>\\n\"\n        \"<head>\\n<title>Sample page title</title>\\n<head>\\n\"\n        \"<body>\\n\";\n      static const char body_filler[] =\n        \"The quick brown fox jumps over the lazy dog.<br>\\n\";\n      static const char body_footer[] =\n        \"</body>\\n\"\n        \"</html>\\n\";\n      pos = 0;\n      memcpy (body_dyn + pos, body_header, MHD_STATICSTR_LEN_ (body_header));\n      pos += MHD_STATICSTR_LEN_ (body_header);\n      for (filler_pos = 0;\n           filler_pos < (body_dyn_size - (MHD_STATICSTR_LEN_ (body_header)\n                                          + MHD_STATICSTR_LEN_ (body_footer)));\n           ++filler_pos)\n      {\n        body_dyn[pos + filler_pos] =\n          body_filler[filler_pos % MHD_STATICSTR_LEN_ (body_filler)];\n      }\n      pos += filler_pos;\n      memcpy (body_dyn + pos, body_footer, MHD_STATICSTR_LEN_ (body_footer));\n    }\n    else\n    {\n      /* Fill the body with binary-like content */\n      size_t pos;\n      for (pos = 0; pos < body_dyn_size; ++pos)\n      {\n        body_dyn[pos] = (char) (unsigned char) (255U - pos % 256U);\n      }\n    }\n  }\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code performs memcpy(body_dyn + pos, body_header, MHD_STATICSTR_LEN_(body_header)) without verifying that the allocated buffer body_dyn (of size body_dyn_size) is large enough to receive MHD_STATICSTR_LEN_(body_header) bytes. If body_dyn_size < MHD_STATICSTR_LEN_(body_header) (or if body_dyn_size is not checked to be at least the header length + any following footer/filler), this memcpy will write beyond the bounds of the destination object, violating Rule 21.17. No prior bounds check is present before this call.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code only checks that body_dyn_size != 0 before allocating, but it does not verify that body_dyn_size is large enough to hold body_header (and subsequently header+filler+footer). The initial memcpy(body_dyn + pos, body_header, MHD_STATICSTR_LEN_(body_header)) is therefore unguarded and can write past the allocated buffer when body_dyn_size < MHD_STATICSTR_LEN_(body_header). Additionally, the later loop uses body_dyn_size - (header_len + footer_len) without ensuring that subtraction does not underflow; if body_dyn_size is smaller than that sum the loop bound becomes a very large size_t and the loop will write out of bounds. Both situations lead to potential out-of-bounds accesses via string/memory functions, violating MISRA C 2023 Rule 21.17."
}