{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <limits.h>\n#include <stdlib.h>\n\n/* Probe helper: append state information to /tmp/logs/2062.txt */\nstatic void mhd_log_probe(const char *event, int i_cp, uint64_t total_size,\n                          const void *last_valid_buffer, unsigned int iovcnt,\n                          unsigned int loop_index)\n{\n  FILE *f = fopen(\"/tmp/logs/2062.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"EVENT: %s\\n\", event);\n  fprintf(f, \"  i_cp=%d, total_size=%\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nFailed to parse the test code.\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_create_response_from_iovec as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <stdlib.h>\n#include <sys/uio.h>\n#include <string.h>\n\n/* Probe helper: append state information to /tmp/logs/2062.txt */\nstatic void mhd_log_probe(const char *event, int i_cp, uint64_t total_size,\n                          const void *last_valid_buffer, unsigned int iovcnt,\n                          unsigned int loop_index)\n{\n    FILE *f = fopen(\"/tmp/logs/2062.txt\", \"a\");\n    if (NULL == f)\n        return;\n    fprintf(f, \"EVENT: %s\\n\", event);\n    fprintf(f, \"  i_cp=%d, total_size=%\" PRIu64 \"\\n\", i_cp, total_size);\n    fprintf(f, \"  last_valid_buffer=%p\\n\", last_valid_buffer);\n    fprintf(f, \"  iovcnt=%u, loop_index=%u\\n\", iovcnt, loop_index);\n    fclose(f);\n}\n\n/* Minimal representation of an MHD response that holds an iovec array */\nstruct MHD_Response {\n    struct iovec *iov;         /* copied iovec array */\n    unsigned int iovcnt;       /* number of iov entries */\n    uint64_t total_size;       /* total payload size */\n};\n\n/*\n * Create a response from an iovec array.  This preserves the original\n * high-level logic: compute total size, check for overflow, copy iovecs,\n * and return a heap-allocated response structure (or NULL on error).\n *\n * Note: flags parameter is unused here, present to match original API shape.\n */\nstruct MHD_Response *\nMHD_create_response_from_iovec(unsigned int iovcnt,\n                               const struct iovec *iov,\n                               unsigned int flags)\n{\n    (void) flags; /* unused in this minimal implementation */\n\n    if (iovcnt > 0 && iov == NULL)\n        return NULL;\n\n    uint64_t total_size = 0;\n    for (unsigned int i = 0; i < iovcnt; ++i) {\n        uint64_t len = (uint64_t) iov[i].iov_len;\n        if (len > UINT64_MAX - total_size) {\n            /* overflow detected */\n            mhd_log_probe(\"size_overflow\", (int)i, total_size,\n                          iov[i].iov_base, iovcnt, i);\n            return NULL;\n        }\n        total_size += len;\n    }\n\n    struct MHD_Response *resp = malloc(sizeof(*resp));\n    if (resp == NULL)\n        return NULL;\n\n    if (iovcnt > 0) {\n        resp->iov = malloc(iovcnt * sizeof(struct iovec));\n        if (resp->iov == NULL) {\n            free(resp);\n            return NULL;\n        }\n        /* Copy the iovec array (shallow copy of pointers/buffers) */\n        memcpy(resp->iov, iov, iovcnt * sizeof(struct iovec));\n    } else {\n        resp->iov = NULL;\n    }\n\n    resp->iovcnt = iovcnt;\n    resp->total_size = total_size;\n\n    return resp;\n}\n",
  "explanation": "I completed the truncated mhd_log_probe function (fixed format strings, added fclose) and implemented a minimal, compilable version of MHD_create_response_from_iovec. The function computes the total payload size with overflow checking, logs an overflow via mhd_log_probe, allocates and copies the iovec array, and returns a pointer to an MHD_Response struct. I included necessary headers (inttypes.h for PRIu64 and sys/uio.h for struct iovec) and avoided defining main or any macros, preserving the original logic as closely as possible."
}