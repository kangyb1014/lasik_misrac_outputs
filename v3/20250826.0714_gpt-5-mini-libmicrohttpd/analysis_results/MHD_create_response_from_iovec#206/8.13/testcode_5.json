{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code casts away const and assigns a const-qualified pointer to a non-const destination: 'const uint8_t *buf = (const uint8_t *) iov[i].iov_base;' then 'iov_copy[i_cp].iov_base = _MHD_DROP_CONST (buf);'. This uses _MHD_DROP_CONST to remove const and store into iov_base (a non-const pointer), which violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_iovec code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2063.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_from_iovec as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_iovec:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_iovec (const struct MHD_IoVec *iov,\n                                unsigned int iovcnt,\n                                MHD_ContentReaderFreeCallback free_cb,\n                                void *cls)\n{\n  struct MHD_Response *response;\n  unsigned int i;\n  int i_cp = 0;   /**< Index in the copy of iov */\n  uint64_t total_size = 0;\n  const void *last_valid_buffer = NULL;\n\n  if ((NULL == iov) && (0 < iovcnt))\n    return NULL;\n\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n    return NULL;\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n  /* Calculate final size, number of valid elements, and check 'iov' */\n  for (i = 0; i < iovcnt; ++i)\n  {\n    if (0 == iov[i].iov_len)\n      continue;     /* skip zero-sized elements */\n    if (NULL == iov[i].iov_base)\n    {\n      i_cp = -1;     /* error */\n      break;\n    }\n    if ( (total_size > (total_size + iov[i].iov_len)) ||\n         (INT_MAX == i_cp) ||\n         (SSIZE_MAX < (total_size + iov[i].iov_len)) )\n    {\n      i_cp = -1;     /* overflow */\n      break;\n    }\n    last_valid_buffer = iov[i].iov_base;\n    total_size += iov[i].iov_len;\n#if defined(MHD_POSIX_SOCKETS) || ! defined(_WIN64)\n    i_cp++;\n#else  /* ! MHD_POSIX_SOCKETS && _WIN64 */\n    {\n      int64_t i_add;\n\n      i_add = (int64_t) (iov[i].iov_len / ULONG_MAX);\n      if (0 != iov[i].iov_len % ULONG_MAX)\n        i_add++;\n      if (INT_MAX < (i_add + i_cp))\n      {\n        i_cp = -1;   /* overflow */\n        break;\n      }\n      i_cp += (int) i_add;\n    }\n#endif /* ! MHD_POSIX_SOCKETS && _WIN64 */\n  }\n  if (-1 == i_cp)\n  {\n    /* Some error condition */\n    MHD_mutex_destroy_chk_ (&response->mutex);\n    free (response);\n    return NULL;\n  }\n  response->fd = -1;\n  response->reference_count = 1;\n  response->total_size = total_size;\n  response->crc_cls = cls;\n  response->crfc = free_cb;\n  if (0 == i_cp)\n  {\n    mhd_assert (0 == total_size);\n    return response;\n  }\n  if (1 == i_cp)\n  {\n    mhd_assert (NULL != last_valid_buffer);\n    response->data = last_valid_buffer;\n    response->data_size = (size_t) total_size;\n    return response;\n  }\n  mhd_assert (1 < i_cp);\n  if (1)\n  { /* for local variables local scope only */\n    MHD_iovec_ *iov_copy;\n    int num_copy_elements = i_cp;\n\n    iov_copy = MHD_calloc_ ((size_t) num_copy_elements, \\\n                            sizeof(MHD_iovec_));\n    if (NULL == iov_copy)\n    {\n      MHD_mutex_destroy_chk_ (&response->mutex);\n      free (response);\n      return NULL;\n    }\n    i_cp = 0;\n    for (i = 0; i < iovcnt; ++i)\n    {\n      size_t element_size = iov[i].iov_len;\n      const uint8_t *buf = (const uint8_t *) iov[i].iov_base;\n\n      if (0 == element_size)\n        continue;         /* skip zero-sized elements */\n#if defined(MHD_WINSOCK_SOCKETS) && defined(_WIN64)\n      while (MHD_IOV_ELMN_MAX_SIZE < element_size)\n      {\n        iov_copy[i_cp].iov_base = (char *) _MHD_DROP_CONST (buf);\n        iov_copy[i_cp].iov_len = ULONG_MAX;\n        buf += ULONG_MAX;\n        element_size -= ULONG_MAX;\n        i_cp++;\n      }\n#endif /* MHD_WINSOCK_SOCKETS && _WIN64 */\n      iov_copy[i_cp].iov_base = _MHD_DROP_CONST (buf);\n      iov_copy[i_cp].iov_len = (MHD_iov_size_) element_size;\n      i_cp++;\n    }\n    mhd_assert (num_copy_elements == i_cp);\n    mhd_assert (0 <= i_cp);\n    response->data_iov = iov_copy;\n    response->data_iovcnt = (unsigned int) i_cp;\n  }\n  return response;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_from_iovec code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: append logs to /tmp/logs/2063.txt */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2063.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fflush(f);\n  fclose(f);\n}\n\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_iovec (const struct MHD_IoVec *iov,\n                                unsigned int iovcnt,\n                                MHD_ContentReaderFreeCallback free_cb,\n                                void *cls)\n{\n  struct MHD_Response *response;\n  unsigned int i;\n  int i_cp = 0;   /**< Index in the copy of iov */\n  uint64_t total_size = 0;\n  const void *last_valid_buffer = NULL;\n\n  mhd_log_probe(\"MHD_create_response_from_iovec ENTRY: iov=%\" PRIxPTR \", iovcnt=%u, free_cb=%\" PRIxPTR \", cls=%\" PRIxPTR,\n                (uintptr_t) iov, iovcnt, (uintptr_t) free_cb, (uintptr_t) cls);\n\n  if ((NULL == iov) && (0 < iovcnt))\n  {\n    mhd_log_probe(\"Early return: iov is NULL but iovcnt > 0 (%u).\", iovcnt);\n    return NULL;\n  }\n\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n  {\n    mhd_log_probe(\"Allocation failure: response == NULL\");\n    return NULL;\n  }\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    mhd_log_probe(\"Mutex init failed for response=%\" PRIxPTR \". Freeing and returning NULL.\", (uintptr_t) response);\n    free (response);\n    return NULL;\n  }\n  /* Calculate final size, number of valid elements, and check 'iov' */\n  for (i = 0; i < iovcnt; ++i)\n  {\n    mhd_log_probe(\"Processing iov[%u]: iov_base=%\" PRIxPTR \", iov_len=%\" PRIu64,\n                  i, (uintptr_t) iov[i].iov_base, (uint64_t) iov[i].iov_len);\n    if (0 == iov[i].iov_len)\n    {\n      mhd_log_probe(\"Skipping zero-sized element at index %u.\", i);\n      continue;     /* skip zero-sized elements */\n    }\n    if (NULL == iov[i].iov_base)\n    {\n      mhd_log_probe(\"Error: iov[%u].iov_base is NULL. Marking i_cp=-1 and breaking.\", i);\n      i_cp = -1;     /* error */\n      break;\n    }\n    if ( (total_size > (total_size + iov[i].iov_len)) ||\n         (INT_MAX == i_cp) ||\n         (SSIZE_MAX < (total_size + iov[i].iov_len)) )\n    {\n      mhd_log_probe(\"Overflow detected at index %u: total_size=%\" PRIu64 \", element_len=%\" PRIu64 \", i_cp=%d\",\n                    i, total_size, (uint64_t) iov[i].iov_len, i_cp);\n      i_cp = -1;     /* overflow */\n      break;\n    }\n    last_valid_buffer = iov[i].iov_base;\n    mhd_log_probe(\"Updated last_valid_buffer to %\" PRIxPTR \" from iov[%u]\",\n                  (uintptr_t) last_valid_buffer, i);\n    total_size += iov[i].iov_len;\n#if defined(MHD_POSIX_SOCKETS) || ! defined(_WIN64)\n    i_cp++;\n#else  /* ! MHD_POSIX_SOCKETS && _WIN64 */\n    {\n      int64_t i_add;\n\n      i_add = (int64_t) (iov[i].iov_len / ULONG_MAX);\n      if (0 != iov[i].iov_len % ULONG_MAX)\n        i_add++;\n      if (INT_MAX < (i_add + i_cp))\n      {\n        i_cp = -1;   /* overflow */\n        break;\n      }\n      i_cp += (int) i_add;\n    }\n#endif /* ! MHD_POSIX_SOCKETS && _WIN64 */\n  }\n  if (-1 == i_cp)\n  {\n    /* Some error condition */\n    mhd_log_probe(\"Detected error condition during iov scan. Cleaning up and returning NULL.\");\n    MHD_mutex_destroy_chk_ (&response->mutex);\n    free (response);\n    return NULL;\n  }\n  response->fd = -1;\n  response->reference_count = 1;\n  response->total_size = total_size;\n  response->crc_cls = cls;\n  response->crfc = free_cb;\n  mhd_log_probe(\"After scan: i_cp=%d, total_size=%\" PRIu64, i_cp, total_size);\n  if (0 == i_cp)\n  {\n    mhd_assert (0 == total_size);\n    mhd_log_probe(\"No valid iov elements (i_cp == 0). Returning empty response=%\" PRIxPTR \".\", (uintptr_t) response);\n    return response;\n  }\n  if (1 == i_cp)\n  {\n    mhd_assert (NULL != last_valid_buffer);\n    response->data = last_valid_buffer;\n    response->data_size = (size_t) total_size;\n    mhd_log_probe(\"Single contiguous buffer case: data=%\" PRIxPTR \", data_size=%zu. Returning response=%\" PRIxPTR \".\",\n                  (uintptr_t) response->data, response->data_size, (uintptr_t) response);\n    return response;\n  }\n  mhd_assert (1 < i_cp);\n  if (1)\n  { /* for local variables local scope only */\n    MHD_iovec_ *iov_copy;\n    int num_copy_elements = i_cp;\n\n    mhd_log_probe(\"Multiple iov elements: preparing to copy %d elements.\", num_copy_elements);\n\n    iov_copy = MHD_calloc_ ((size_t) num_copy_elements, \\\n                            sizeof(MHD_iovec_));\n    if (NULL == iov_copy)\n    {\n      mhd_log_probe(\"Allocation failure: iov_copy == NULL for num_copy_elements=%d. Cleaning up.\", num_copy_elements);\n      MHD_mutex_destroy_chk_ (&response->mutex);\n      free (response);\n      return NULL;\n    }\n    i_cp = 0;\n    for (i = 0; i < iovcnt; ++i)\n    {\n      size_t element_size = iov[i].iov_len;\n      const uint8_t *buf = (const uint8_t *) iov[i].iov_base;\n\n      mhd_log_probe(\"Copy loop: i=%u, element_size=%zu, original_iov_base=%\" PRIxPTR \", buf(casted)=%\" PRIxPTR,\n                    i, element_size, (uintptr_t) iov[i].iov_base, (uintptr_t) buf);\n\n      if (0 == element_size)\n      {\n        mhd_log_probe(\"Skipping zero-sized element at copy loop index %u.\", i);\n        continue;         /* skip zero-sized elements */\n      }\n#if defined(MHD_WINSOCK_SOCKETS) && defined(_WIN64)\n      while (MHD_IOV_ELMN_MAX_SIZE < element_size)\n      {\n        mhd_log_probe(\"Splitting element: assigning up to ULONG_MAX for i_cp=%d from buf=%\" PRIxPTR,\n                      i_cp, (uintptr_t) buf);\n        iov_copy[i_cp].iov_base = (char *) _MHD_DROP_CONST (buf);\n        mhd_log_probe(\"Assigned iov_copy[%d].iov_base=%\" PRIxPTR \" (via _MHD_DROP_CONST), iov_base prior=%\" PRIxPTR,\n                      i_cp, (uintptr_t) iov_copy[i_cp].iov_base, (uintptr_t) buf);\n        iov_copy[i_cp].iov_len = ULONG_MAX;\n        buf += ULONG_MAX;\n        element_size -= ULONG_MAX;\n        i_cp++;\n      }\n#endif /* MHD_WINSOCK_SOCKETS && _WIN64 */\n      mhd_log_probe(\"About to assign iov_copy[%d].iov_base using _MHD_DROP_CONST on buf=%\" PRIxPTR \" (element_size=%zu)\",\n                    i_cp, (uintptr_t) buf, element_size);\n      iov_copy[i_cp].iov_base = _MHD_DROP_CONST (buf);\n      mhd_log_probe(\"Assigned iov_copy[%d]: iov_base=%\" PRIxPTR \", iov_len=%zu\",\n                    i_cp, (uintptr_t) iov_copy[i_cp].iov_base, element_size);\n      iov_copy[i_cp].iov_len = (MHD_iov_size_) element_size;\n      i_cp++;\n    }\n    mhd_assert (num_copy_elements == i_cp);\n    mhd_assert (0 <= i_cp);\n    response->data_iov = iov_copy;\n    response->data_iovcnt = (unsigned int) i_cp;\n    mhd_log_probe(\"Completed building iov_copy: data_iov=%\" PRIxPTR \", data_iovcnt=%u for response=%\" PRIxPTR,\n                  (uintptr_t) response->data_iov, response->data_iovcnt, (uintptr_t) response);\n  }\n  mhd_log_probe(\"MHD_create_response_from_iovec EXIT: response=%\" PRIxPTR \", total_size=%\" PRIu64 \", data_iovcnt=%u\",\n                (uintptr_t) response, total_size, response->data_iovcnt);\n  return response;\n}\n"
}