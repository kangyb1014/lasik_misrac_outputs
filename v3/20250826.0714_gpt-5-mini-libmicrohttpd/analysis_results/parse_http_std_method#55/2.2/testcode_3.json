{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 if mhd_assert is a diagnostic-only macro that expands to nothing in release builds (e.g. when NDEBUG is defined) then the call mhd_assert(0 != len); is executed in some builds (debug) but can be removed without affecting normal program behaviour in release builds, which meets the definition of dead code. For example, with mhd_assert implemented like the standard assert (abort on failure in debug, no code emitted in release) the check has no effect on correct runs and its removal would not change behaviour \u2014 therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/552.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_http_std_method as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\nPlease provide the modified parse_http_std_method code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logger that appends to /tmp/logs/552.txt. Keeps I/O localized so\n   it does not change the logic of parse_http_std_method. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/552.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Helper to dump a small prefix of the method bytes (safe if m == NULL). */\nstatic void probe_dump_method(const char *m, size_t len)\n{\n    size_t i, lim = (len < 32u) ? len : 32u;\n    if (NULL == m) {\n        probe_log(\"method pointer: NULL, len=%zu\", len);\n        return;\n    }\n    /* Print printable characters or hex for non-printable. */\n    char buf[128];\n    size_t pos = 0;\n    for (i = 0; i < lim && pos + 4 < sizeof(buf); ++i) {\n        unsigned char c = (unsigned char)m[i];\n        if (c >= 0x20u && c <= 0x7Eu)\n            pos += snprintf(buf + pos, sizeof(buf) - pos, \"%c\", c);\n        else\n            pos += snprintf(buf + pos, sizeof(buf) - pos, \"\\\\x%02X\", c);\n    }\n    if (len > lim && pos + 4 < sizeof(buf))\n        pos += snprintf(buf + pos, sizeof(buf) - pos, \"...\");\n    buf[pos < sizeof(buf) ? pos : sizeof(buf) - 1] = '\\0';\n    probe_log(\"method[%zu]: %s\", len, buf);\n}\n\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n\n  /* Log entry and input state */\n  probe_log(\"ENTER parse_http_std_method: connection=%p, method=%p, len=%zu\", (void *)connection, (void *)method, len);\n  probe_dump_method(m, len);\n\n  probe_log(\"about to evaluate mhd_assert(NULL != m)\");\n  mhd_assert (NULL != m);\n  probe_log(\"returned from mhd_assert(NULL != m)\");\n\n  probe_log(\"about to evaluate mhd_assert(0 != len)\");\n  mhd_assert (0 != len);\n  probe_log(\"returned from mhd_assert(0 != len)\");\n\n  /* For each branch we compute the same condition as the original code\n     and log the compare result. We then use that computed condition to\n     preserve original behavior exactly while emitting logs. */\n  {\n    size_t expected_len;\n    int cmp;\n\n    expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET);\n    cmp = (expected_len == len) ? memcmp (m, MHD_HTTP_METHOD_GET, len) : -1;\n    probe_log(\"check GET: expected_len=%zu, len=%zu, memcmp=%d\", expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n      probe_log(\"matched: GET -> http_mthd=%d\", connection->rq.http_mthd);\n      return;\n    }\n\n    expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD);\n    cmp = (expected_len == len) ? memcmp (m, MHD_HTTP_METHOD_HEAD, len) : -1;\n    probe_log(\"check HEAD: expected_len=%zu, len=%zu, memcmp=%d\", expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n      probe_log(\"matched: HEAD -> http_mthd=%d\", connection->rq.http_mthd);\n      return;\n    }\n\n    expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST);\n    cmp = (expected_len == len) ? memcmp (m, MHD_HTTP_METHOD_POST, len) : -1;\n    probe_log(\"check POST: expected_len=%zu, len=%zu, memcmp=%d\", expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n      probe_log(\"matched: POST -> http_mthd=%d\", connection->rq.http_mthd);\n      return;\n    }\n\n    expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT);\n    cmp = (expected_len == len) ? memcmp (m, MHD_HTTP_METHOD_PUT, len) : -1;\n    probe_log(\"check PUT: expected_len=%zu, len=%zu, memcmp=%d\", expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n      probe_log(\"matched: PUT -> http_mthd=%d\", connection->rq.http_mthd);\n      return;\n    }\n\n    expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE);\n    cmp = (expected_len == len) ? memcmp (m, MHD_HTTP_METHOD_DELETE, len) : -1;\n    probe_log(\"check DELETE: expected_len=%zu, len=%zu, memcmp=%d\", expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n      probe_log(\"matched: DELETE -> http_mthd=%d\", connection->rq.http_mthd);\n      return;\n    }\n\n    expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT);\n    cmp = (expected_len == len) ? memcmp (m, MHD_HTTP_METHOD_CONNECT, len) : -1;\n    probe_log(\"check CONNECT: expected_len=%zu, len=%zu, memcmp=%d\", expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n      probe_log(\"matched: CONNECT -> http_mthd=%d\", connection->rq.http_mthd);\n      return;\n    }\n\n    expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS);\n    cmp = (expected_len == len) ? memcmp (m, MHD_HTTP_METHOD_OPTIONS, len) : -1;\n    probe_log(\"check OPTIONS: expected_len=%zu, len=%zu, memcmp=%d\", expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n      probe_log(\"matched: OPTIONS -> http_mthd=%d\", connection->rq.http_mthd);\n      return;\n    }\n\n    expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE);\n    cmp = (expected_len == len) ? memcmp (m, MHD_HTTP_METHOD_TRACE, len) : -1;\n    probe_log(\"check TRACE: expected_len=%zu, len=%zu, memcmp=%d\", expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n      probe_log(\"matched: TRACE -> http_mthd=%d\", connection->rq.http_mthd);\n      return;\n    }\n\n    /* default branch */\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n    probe_log(\"matched: OTHER -> http_mthd=%d\", connection->rq.http_mthd);\n  }\n}\n"
}