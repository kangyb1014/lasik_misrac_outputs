{
  "user_message": "An agent A claimed that the following parse_http_std_method code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of parse_http_std_method.\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls memcmp(m, MHD_HTTP_METHOD_OPTIONS, len) where MHD_HTTP_METHOD_OPTIONS is a null\u2011terminated string literal. Even though len is checked to equal the literal\u2019s length, memcmp is still being used to compare a null\u2011terminated string, which is forbidden by MISRA C 2023 Rule 21.14.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTRY parse_http_std_method: method_ptr=0x55ba47637b80 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\nENTRY parse_http_std_method: method_ptr=0x55ba4763fd70 len=3\nCHECK GET: expected_len=3 len=3 memcmp=9\nCHECK HEAD: expected_len=4 len=3 memcmp=1\nCHECK POST: expected_len=4 len=3 memcmp=1\nCHECK PUT: expected_len=3 len=3 memcmp=0\nSELECTED: PUT\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.14 prohibits using memcmp to compare null\u2011terminated strings. In parse_http_std_method the code calls memcmp(m, MHD_HTTP_METHOD_..., len) where MHD_HTTP_METHOD_* are null\u2011terminated string literals. Even though the code first checks that len equals the literal\u2019s length and only compares that many bytes, memcmp is nonetheless being used with a null\u2011terminated string operand, which is exactly what the rule disallows. (To conform, use the appropriate string comparison function or otherwise avoid using memcmp with null\u2011terminated strings.)"
}