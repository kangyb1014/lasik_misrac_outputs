{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nWhen len equals MHD_STATICSTR_LEN_(MHD_HTTP_METHOD_DELETE) the code calls memcmp(m, MHD_HTTP_METHOD_DELETE, len). MHD_HTTP_METHOD_DELETE is a null-terminated string literal, so memcmp is being used to compare a null-terminated string (the literal) against m \u2014 this use violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/558.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_http_std_method as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\nPlease provide the modified parse_http_std_method code.\n",
  "test_code": "static void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  /* Initial entry probe: record pointer, length and a small hexdump. */\n  {\n    FILE *fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n    if (NULL != fp)\n    {\n      size_t i;\n      fprintf(fp, \"ENTRY: parse_http_std_method m=%p len=%zu\\n\", (const void *) m, len);\n      fprintf(fp, \"HEXDUMP (up to 32 bytes):\");\n      for (i = 0U; i < len && i < 32U; ++i)\n      {\n        unsigned char uc = (unsigned char) m[i];\n        fprintf(fp, \" %02X\", uc);\n      }\n      fprintf(fp, \"\\n\\n\");\n      fclose(fp);\n    }\n  }\n\n  /* For each candidate method: compute length match, run memcmp only when length matches\n     and log the comparison result. The original control flow and assignments are preserved. */\n  {\n    size_t exp_len;\n    int cmpres;\n    FILE *fp;\n\n    /* GET */\n    exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET);\n    cmpres = 1; /* non-zero means not equal */\n    if (exp_len == len)\n    {\n      cmpres = memcmp (m, MHD_HTTP_METHOD_GET, len);\n    }\n    fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n    if (NULL != fp)\n    {\n      fprintf(fp, \"CHECK GET: expected_len=%zu len=%zu len_match=%d cmpres=%d\\n\",\n              exp_len, len, (int) (exp_len == len), cmpres);\n      fclose(fp);\n    }\n    if ((exp_len == len) && (0 == cmpres))\n      connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n    else\n    {\n      /* HEAD */\n      exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD);\n      cmpres = 1;\n      if (exp_len == len)\n      {\n        cmpres = memcmp (m, MHD_HTTP_METHOD_HEAD, len);\n      }\n      fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n      if (NULL != fp)\n      {\n        fprintf(fp, \"CHECK HEAD: expected_len=%zu len=%zu len_match=%d cmpres=%d\\n\",\n                exp_len, len, (int) (exp_len == len), cmpres);\n        fclose(fp);\n      }\n      if ((exp_len == len) && (0 == cmpres))\n        connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n      else\n      {\n        /* POST */\n        exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST);\n        cmpres = 1;\n        if (exp_len == len)\n        {\n          cmpres = memcmp (m, MHD_HTTP_METHOD_POST, len);\n        }\n        fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n        if (NULL != fp)\n        {\n          fprintf(fp, \"CHECK POST: expected_len=%zu len=%zu len_match=%d cmpres=%d\\n\",\n                  exp_len, len, (int) (exp_len == len), cmpres);\n          fclose(fp);\n        }\n        if ((exp_len == len) && (0 == cmpres))\n          connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n        else\n        {\n          /* PUT */\n          exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT);\n          cmpres = 1;\n          if (exp_len == len)\n          {\n            cmpres = memcmp (m, MHD_HTTP_METHOD_PUT, len);\n          }\n          fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n          if (NULL != fp)\n          {\n            fprintf(fp, \"CHECK PUT: expected_len=%zu len=%zu len_match=%d cmpres=%d\\n\",\n                    exp_len, len, (int) (exp_len == len), cmpres);\n            fclose(fp);\n          }\n          if ((exp_len == len) && (0 == cmpres))\n            connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n          else\n          {\n            /* DELETE */\n            exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE);\n            cmpres = 1;\n            if (exp_len == len)\n            {\n              /* This is the scenario reported: comparing against a null-terminated string literal */\n              cmpres = memcmp (m, MHD_HTTP_METHOD_DELETE, len);\n            }\n            fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n            if (NULL != fp)\n            {\n              fprintf(fp, \"CHECK DELETE: expected_len=%zu len=%zu len_match=%d cmpres=%d\\n\",\n                      exp_len, len, (int) (exp_len == len), cmpres);\n\n              /* Additionally log a small preview of the compared bytes for evidence */\n              fprintf(fp, \"DELETE compare: literal=\\\"%s\\\" preview_m=\", MHD_HTTP_METHOD_DELETE);\n              {\n                size_t j;\n                for (j = 0U; j < len && j < 32U; ++j)\n                {\n                  unsigned char uc = (unsigned char) m[j];\n                  fprintf(fp, \" %02X\", uc);\n                }\n              }\n              fprintf(fp, \"\\n\\n\");\n              fclose(fp);\n            }\n            if ((exp_len == len) && (0 == cmpres))\n              connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n            else\n            {\n              /* CONNECT */\n              exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT);\n              cmpres = 1;\n              if (exp_len == len)\n              {\n                cmpres = memcmp (m, MHD_HTTP_METHOD_CONNECT, len);\n              }\n              fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n              if (NULL != fp)\n              {\n                fprintf(fp, \"CHECK CONNECT: expected_len=%zu len=%zu len_match=%d cmpres=%d\\n\",\n                        exp_len, len, (int) (exp_len == len), cmpres);\n                fclose(fp);\n              }\n              if ((exp_len == len) && (0 == cmpres))\n                connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n              else\n              {\n                /* OPTIONS */\n                exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS);\n                cmpres = 1;\n                if (exp_len == len)\n                {\n                  cmpres = memcmp (m, MHD_HTTP_METHOD_OPTIONS, len);\n                }\n                fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n                if (NULL != fp)\n                {\n                  fprintf(fp, \"CHECK OPTIONS: expected_len=%zu len=%zu len_match=%d cmpres=%d\\n\",\n                          exp_len, len, (int) (exp_len == len), cmpres);\n                  fclose(fp);\n                }\n                if ((exp_len == len) && (0 == cmpres))\n                  connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n                else\n                {\n                  /* TRACE */\n                  exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE);\n                  cmpres = 1;\n                  if (exp_len == len)\n                  {\n                    cmpres = memcmp (m, MHD_HTTP_METHOD_TRACE, len);\n                  }\n                  fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n                  if (NULL != fp)\n                  {\n                    fprintf(fp, \"CHECK TRACE: expected_len=%zu len=%zu len_match=%d cmpres=%d\\n\",\n                            exp_len, len, (int) (exp_len == len), cmpres);\n                    fclose(fp);\n                  }\n                  if ((exp_len == len) && (0 == cmpres))\n                    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n                  else\n                  {\n                    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n                    fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n                    if (NULL != fp)\n                    {\n                      fprintf(fp, \"FALLTHROUGH: set http_mthd = OTHER\\n\\n\");\n                      fclose(fp);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
}