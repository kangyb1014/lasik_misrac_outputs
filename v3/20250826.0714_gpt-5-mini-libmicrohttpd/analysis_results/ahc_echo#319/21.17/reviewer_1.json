{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf param->response_page is NULL or points to a char buffer that is not NUL-terminated (for example a fixed-size buffer filled with data but not terminated, or a pointer to a region whose valid length is known but not guaranteed to contain '\\0'), the call to strlen(param->response_page) will read past the object bounds (or dereference NULL), causing out\u2011of\u2011bounds access. Therefore the use of strlen here can violate Rule 21.17 unless the code elsewhere guarantees param->response_page is a valid, NUL-terminated string.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. strlen(param->response_page) assumes param->response_page points to a valid, NUL-terminated object and is non-NULL; nothing in this function enforces those invariants. If param->response_page is NULL or points to a non\u2011NUL\u2011terminated buffer, strlen will read past the object bounds (or dereference NULL), which is exactly the kind of out\u2011of\u2011bounds access Rule 21.17 prohibits. The call is only compliant if there is a guaranteed invariant elsewhere that param->response_page is non\u2011NULL and NUL\u2011terminated; absent such a guarantee the code violates MISRA C 2023 Rule 21.17. Recommended fixes: check for NULL and/or use an explicit length stored with the buffer (or use bounded operations that take a length), or otherwise ensure and document the invariant that response_page is always a valid NUL-terminated string."
}