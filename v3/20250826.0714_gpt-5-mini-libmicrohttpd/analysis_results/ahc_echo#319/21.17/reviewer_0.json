{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf 'method' is NULL or not a valid NUL-terminated string, the call strcmp(method, \"GET\") will dereference/read past the bounds of the object referenced by 'method' (or dereference a NULL pointer). The code performs no check that 'method' is non-NULL and points to a NUL-terminated buffer, so this can violate MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct in the absence of any external guarantee about the 'method' parameter. strcmp requires both pointer arguments to be non-NULL and to refer to NUL-terminated character arrays; if 'method' is NULL or not NUL-terminated, the call strcmp(method, \"GET\") can dereference a NULL pointer or read beyond the bounds of the object, which is exactly what MISRA C 2023 Rule 21.17 forbids. The shown code contains no check that 'method' is non-NULL or that it is NUL-terminated, so as written it can violate Rule 21.17.\n\nNote: if the surrounding API (the caller of ahc_echo) formally guarantees that 'method' is always a valid, non-NULL, NUL-terminated string, then the call would be compliant; but that is an external contract not visible in this function. To be robust and MISRA-compliant without relying on outside guarantees, the code should validate 'method' (e.g. check for NULL before calling strcmp or otherwise ensure a bounded comparison)."
}