{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_connection_mark_closed_:\n```c\nvoid\nMHD_connection_mark_closed_ (struct MHD_Connection *connection)\n{\n  const struct MHD_Daemon *daemon = connection->daemon;\n\n  if (0 == (daemon->options & MHD_USE_TURBO))\n  {\n#ifdef HTTPS_SUPPORT\n    /* For TLS connection use shutdown of TLS layer\n     * and do not shutdown TCP socket. This give more\n     * chances to send TLS closure data to remote side.\n     * Closure of TLS layer will be interpreted by\n     * remote side as end of transmission. */\n    if (0 != (daemon->options & MHD_USE_TLS))\n    {\n      if (! MHD_tls_connection_shutdown (connection))\n        shutdown (connection->socket_fd,\n                  SHUT_WR);\n    }\n    else   /* Combined with next 'shutdown()'. */\n#endif /* HTTPS_SUPPORT */\n    shutdown (connection->socket_fd,\n              SHUT_WR);\n  }\n  connection->state = MHD_CONNECTION_CLOSED;\n  connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are present in the provided code fragment. Specifically:\n\n- No compiler-specific keywords or tokens are used (e.g. __attribute__, __builtin_*, typeof, __extension__, asm, nested functions, statement-expressions, zero-length arrays, or Microsoft-specific __cdecl/__stdcall annotations).\n- Preprocessor conditionals (#ifdef HTTPS_SUPPORT / #endif) and macros (SHUT_WR) are standard preprocessing features and not language extensions; conditional compilation is permitted and common practice.\n- The use of the POSIX API function shutdown() and the macro SHUT_WR are library/OS interfaces (POSIX), not compiler language extensions. Their presence does not violate Rule 1.2 (which targets language/compiler extensions explicitly declared by compiler vendors).\n- Standard C constructs are used: struct access, pointer assignment, if/else, function calls and comments in C-style (/* ... */), all of which are part of standard C.\n\nTherefore there are no code fragments in this function that should be flagged under MISRA C 2023 Rule 1.2 (use of language extensions). If you want, I can re-check for platform-specific nonportable APIs (POSIX) vs strictly-standard-C usage, but that falls outside Rule 1.2\u2019s focus on compiler language extensions."
}