{
  "user_message": "An agent A claimed that the following is_param_equal_caseless code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of is_param_equal_caseless.\n```c\n_MHD_static_inline bool\nis_param_equal_caseless (const struct MHD_RqDAuthParam *param,\n                         const char *const str,\n                         const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf param->quoted is true and MHD_str_equal_quoted_bin_n inspects/copies/compares str and param->value.str up to str_len/param->value.len, an out\u2011of\u2011bounds access can occur when the caller passes e.g. str == NULL and str_len > 0 (or str points to fewer than str_len bytes). The code only asserts param->value.str and param->value.len but does not validate str/str_len (and mhd_assert may be compiled out), so the call can lead to reads beyond the bounds of the object referenced by str (or likewise if MHD_str_equal_quoted_bin_n assumes different length ordering).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code calls memcmp (a <string.h> function) with length str_len when the unquoted branch is taken; memcmp with a non\u2011zero size requires both pointer arguments to reference objects at least str_len bytes long. The function does not check that str is non\u2011NULL or that the caller provided at least str_len bytes for str (it only uses mhd_assert for param->value.* which may be compiled out). Likewise, in the quoted branch the called helper MHD_str_equal_quoted_bin_n is unchecked and could itself use string.h functions that read up to the supplied lengths. Absent documented, enforced preconditions that guarantee str points to a valid buffer of length >= str_len (and that param->value.str has at least param->value.len bytes) this use can lead to out\u2011of\u2011bounds accesses and therefore violates MISRA C 2023 Rule 21.17. If there are external, enforced caller preconditions guaranteeing those pointer/length invariants, then the code would be acceptable; no such guarantees are present in the snippet, so the reported violation stands."
}