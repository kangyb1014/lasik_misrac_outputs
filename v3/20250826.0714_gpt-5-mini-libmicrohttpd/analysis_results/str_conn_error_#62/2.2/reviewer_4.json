{
  "user_message": "An agent A claimed that the following str_conn_error_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of str_conn_error_.\n```c\nstatic const char *\nstr_conn_error_ (ssize_t mhd_err_code)\n{\n  switch (mhd_err_code)\n  {\n  case MHD_ERR_AGAIN_:\n    return _ (\"The operation would block, retry later\");\n  case MHD_ERR_CONNRESET_:\n    return _ (\"The connection was forcibly closed by remote peer\");\n  case MHD_ERR_NOTCONN_:\n    return _ (\"The socket is not connected\");\n  case MHD_ERR_NOMEM_:\n    return _ (\"Not enough system resources to serve the request\");\n  case MHD_ERR_BADF_:\n    return _ (\"Bad FD value\");\n  case MHD_ERR_INVAL_:\n    return _ (\"Argument value is invalid\");\n  case MHD_ERR_OPNOTSUPP_:\n    return _ (\"Argument value is not supported\");\n  case MHD_ERR_PIPE_:\n    return _ (\"The socket is no longer available for sending\");\n  case MHD_ERR_TLS_:\n    return _ (\"TLS encryption or decryption error\");\n  default:\n    break;   /* Mute compiler warning */\n  }\n  if (0 <= mhd_err_code)\n    return _ (\"Not an error code\");\n\n  mhd_assert (0); /* Should never be reachable */\n  return _ (\"Wrong error code value\");\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the mhd_assert macro expands to a no-op in the project build (for example when assertions are disabled via NDEBUG or a similar configuration), the statement `mhd_assert (0);` is executed but has no effect; removing it would not change program behaviour \u2014 this constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. If, however, mhd_assert has an observable effect at runtime (e.g. it triggers a diagnostic, logs or aborts), then it is not dead code and does not violate Rule 2.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent\u2019s report is correct in its reasoning. The mhd_assert(0); call is executed for negative mhd_err_code values not handled by the switch (i.e. it is reachable at run time). If the mhd_assert macro expands to a no-op (for example when assertions are disabled), the statement is executed but has no observable effect; removing it would therefore not change program behaviour and it qualifies as dead code under MISRA C:2023 Rule 2.2. Conversely, if mhd_assert produces an observable effect (logging, diagnostics, abort, etc.), then it is not dead code and there is no violation. To avoid a Rule 2.2 violation in builds where assertions are disabled, provide either an implementation of mhd_assert that has an observable effect in all builds or remove/conditionally compile the assertion so that no executed no-op statement remains."
}