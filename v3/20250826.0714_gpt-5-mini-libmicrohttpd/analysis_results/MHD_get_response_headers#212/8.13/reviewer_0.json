{
  "user_message": "An agent A claimed that the following MHD_get_response_headers code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_response_headers.\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes pos->header and pos->value to the iterator. If the callback type MHD_KeyValueIterator and/or the struct fields pos->header and pos->value are declared as plain char * (i.e. non-const), then the code violates MISRA C 2023 Rule 8.13 because pointers that are not intended to be modified should be const-qualified. Example violating declaration: typedef int (*MHD_KeyValueIterator)(void *, enum ..., char *, char *); struct MHD_HTTP_Res_Header { char *header; char *value; ... }; Remedy: change the callback signature and/or struct fields to use const char * (e.g. typedef int (*MHD_KeyValueIterator)(void *, enum ..., const char *, const char *); and struct MHD_HTTP_Res_Header { const char *header; const char *value; ... };).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not provably correct from the snippet alone. MISRA C:2023 Rule 8.13 concerns declarations: a pointer type should be const-qualified when it does not need to modify the pointed-to object. The shown function passes pos->header and pos->value to a callback, but the code shown does not include the declarations of struct MHD_HTTP_Res_Header or the MHD_KeyValueIterator typedef. If those fields and the callback parameters are declared as non-const char * while the pointed-to strings are intended to be read-only, then that would be a violation of Rule 8.13 and the suggested remedy (use const char * in the struct and in the callback prototype) is appropriate. If, however, the fields and callback are already declared with const (or the strings are legitimately mutable and may be modified), then there is no violation. Therefore Agent A\u2019s report is only correct under the additional assumption that the API/fields are non-const and the data is meant to be read-only; it is not provably correct from the provided code alone."
}