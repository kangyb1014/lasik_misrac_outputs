{
  "user_message": "An agent A claimed that the following MHD_get_response_headers code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_response_headers.\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe loop declares and uses a non-const pointer: 'struct MHD_HTTP_Res_Header *pos' and only reads pos->kind, pos->header and pos->value. Since the pointed-to object is not modified in this loop, pos could and should be declared as 'const struct MHD_HTTP_Res_Header *pos' (assigning response->first_header to a pointer-to-const is allowed). Not qualifying pos as pointing to a const type violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the loop 'pos' is only used to read fields (pos->kind, pos->header, pos->value) and to follow the next pointer; the pointed-to object is not modified. MISRA C 2023 Rule 8.13 requires a pointer to be const-qualified when it can be. Declaring 'pos' as\n\n  const struct MHD_HTTP_Res_Header *pos;\n\nis permitted (assigning the non-const response->first_header to a pointer-to-const is allowed), and 'pos = pos->next' remains valid because converting from 'struct MHD_HTTP_Res_Header *' to 'const struct MHD_HTTP_Res_Header *' is allowed. Therefore the current code violates Rule 8.13 and should be changed as above (unless other code not shown requires modification through 'pos')."
}