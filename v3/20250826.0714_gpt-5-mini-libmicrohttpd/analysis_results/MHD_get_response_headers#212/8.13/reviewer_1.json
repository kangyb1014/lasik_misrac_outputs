{
  "user_message": "An agent A claimed that the following MHD_get_response_headers code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_response_headers.\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'pos' is used only to read fields (pos->kind, pos->header, pos->value, and pos->next) and never to modify the pointed-to structure. According to MISRA C 2023 Rule 8.13, it should be declared to point to a const-qualified type (e.g. 'const struct MHD_HTTP_Res_Header *pos;'). Declaring it as a non-const pointer therefore violates Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the shown function the local pointer 'pos' is only used to read fields (pos->kind, pos->header, pos->value, pos->next) and is never used to modify the pointed-to structure. MISRA C 2023 Rule 8.13 states a pointer should point to a const-qualified type whenever possible, so 'pos' should be declared as a pointer to a const-qualified structure (for example: const struct MHD_HTTP_Res_Header *pos;). Converting response->first_header (a non-const pointer) to a pointer-to-const is allowed, and the iterator is called with read-only members, so changing 'pos' to point to const is safe. The only reasons to keep it non-const would be if the function or called APIs needed to modify the structure via that pointer (which they do not here)."
}