{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop declares and uses a non-const pointer: 'struct MHD_HTTP_Res_Header *pos' and only reads pos->kind, pos->header and pos->value. Since the pointed-to object is not modified in this loop, pos could and should be declared as 'const struct MHD_HTTP_Res_Header *pos' (assigning response->first_header to a pointer-to-const is allowed). Not qualifying pos as pointing to a const type violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Minimal type definitions to allow this test stub to compile and run.\n   These mirror the fields used by MHD_get_response_headers.\n*/\nstruct MHD_HTTP_Res_Header\n{\n    unsigned int kind;\n    const char *header;\n    const char *value;\n    struct MHD_HTTP_Res_Header *next;\n};\n\nstruct MHD_Response\n{\n    struct MHD_HTTP_Res_Header *first_header;\n};\n\n/* Iterator type used by the function under test. The second parameter\n   is the header \"kind\" as observed in the original code. */\ntypedef int (*MHD_KeyValueIterator)(void *cls, unsigned int kind,\n                                    const char *header, const char *value);\n\n/* Represent the MHD_NO value used in the original code. */\nstatic const int MHD_NO = 0;\n\n/* Simple logging helper that appends messages to /tmp/logs/2123.txt.\n   This captures control flow and state so other agents can reproduce\n   the reported violation scenario.\n*/\nstatic void mhd_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * MHD_get_response_headers: original logic preserved. Logging probes added\n * to record the pointer addresses, the fields read (kind/header/value),\n * when the iterator is invoked and its return value, and when the loop\n * breaks. These logs provide evidence that the loop only reads the\n * pointed-to object and does not modify it (supporting the reported\n * MISRA Rule 8.13 violation that the pointer could be pointer-to-const).\n */\nint\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n    int numHeaders = 0;\n    struct MHD_HTTP_Res_Header *pos;\n\n    mhd_log(\"MHD_get_response_headers called: response=%p, iterator=%p, iterator_cls=%p\",\n            (void *)response, (void *)iterator, iterator_cls);\n\n    for (pos = response ? response->first_header : NULL;\n         NULL != pos;\n         pos = pos->next)\n    {\n        /* Log the pointer and the fields that are read in this loop. */\n        mhd_log(\"iter start: pos=%p, pos->kind=%u, pos->header=%p, pos->value=%p\",\n                (void *)pos, (unsigned int)pos->kind,\n                (void *)pos->header, (void *)pos->value);\n\n        /* Also attempt to print header/value strings if non-NULL but\n           avoid dereferencing NULL pointers. */\n        if (pos->header != NULL)\n            mhd_log(\" header string: %s\", pos->header);\n        else\n            mhd_log(\" header string: (null)\");\n\n        if (pos->value != NULL)\n            mhd_log(\" value string: %s\", pos->value);\n        else\n            mhd_log(\" value string: (null)\");\n\n        numHeaders++;\n        mhd_log(\" incremented numHeaders -> %d\", numHeaders);\n\n        if ((NULL != iterator))\n        {\n            int iter_ret = iterator (iterator_cls,\n                                     pos->kind,\n                                     pos->header,\n                                     pos->value);\n            mhd_log(\" iterator called: iterator_ret=%d\", iter_ret);\n            if (MHD_NO == iter_ret)\n            {\n                mhd_log(\" iterator returned MHD_NO -> breaking loop at pos=%p\", (void *)pos);\n                break;\n            }\n        }\n    }\n\n    mhd_log(\"MHD_get_response_headers returning numHeaders=%d\", numHeaders);\n    return numHeaders;\n}\n"
}