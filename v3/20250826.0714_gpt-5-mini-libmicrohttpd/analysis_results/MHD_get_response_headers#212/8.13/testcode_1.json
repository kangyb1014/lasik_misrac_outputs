{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'pos' is used only to read fields (pos->kind, pos->header, pos->value, and pos->next) and never to modify the pointed-to structure. According to MISRA C 2023 Rule 8.13, it should be declared to point to a const-qualified type (e.g. 'const struct MHD_HTTP_Res_Header *pos;'). Declaring it as a non-const pointer therefore violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_headers code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: log header details if possible. Keeps original logic intact. */\nstatic void MHD_log_response_header(FILE *log,\n                                    struct MHD_HTTP_Res_Header *pos,\n                                    int index)\n{\n  if (NULL == log || NULL == pos)\n    return;\n\n  fprintf(log, \"  header[%d]: pos=%p\\n\", index, (void *)pos);\n  fprintf(log, \"    kind: %d\\n\", (int)pos->kind);\n  fprintf(log, \"    header ptr: %p\\n\", (void *)pos->header);\n  fprintf(log, \"    value  ptr: %p\\n\", (void *)pos->value);\n  fprintf(log, \"    next   ptr: %p\\n\", (void *)pos->next);\n  fprintf(log, \"    header str: %s\\n\", (pos->header != NULL) ? pos->header : \"(null)\");\n  fprintf(log, \"    value  str: %s\\n\", (pos->value  != NULL) ? pos->value  : \"(null)\");\n}\n\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/2123.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"MHD_get_response_headers ENTER: response=%p iterator=%p iterator_cls=%p\\n\",\n            (void *)response, (void *)iterator, iterator_cls);\n    fprintf(log, \"response->first_header=%p\\n\",\n            (void *)(response ? response->first_header : NULL));\n  }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log the current header state before processing */\n    if (log)\n      MHD_log_response_header(log, pos, numHeaders);\n\n    numHeaders++;\n\n    if (NULL != iterator)\n    {\n      /* Call iterator and capture result so we can log it without changing behavior */\n      int iter_res = iterator (iterator_cls,\n                               pos->kind,\n                               pos->header,\n                               pos->value);\n      if (log)\n        fprintf(log, \"  iterator returned: %d\\n\", iter_res);\n\n      if (MHD_NO == iter_res)\n      {\n        if (log)\n          fprintf(log, \"  iterator requested break at header index %d\\n\", numHeaders - 1);\n        break;\n      }\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"  iterator is NULL, continuing\\n\");\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"MHD_get_response_headers EXIT: numHeaders=%d\\n\", numHeaders);\n    fclose(log);\n  }\n\n  return numHeaders;\n}\n"
}