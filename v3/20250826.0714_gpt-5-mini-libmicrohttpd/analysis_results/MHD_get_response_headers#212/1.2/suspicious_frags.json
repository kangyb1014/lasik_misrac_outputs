{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{"
  ],
  "explanation": "I flagged only the function declaration that uses the _MHD_EXTERN macro because such macros commonly expand to compiler-specific storage-class or visibility extensions (for example __declspec or __attribute__ forms) which are explicitly compiler extensions. No other tokens in the function body indicate use of compiler-specific language extensions: the for loop, struct pointer usage, NULL, macro/enum identifiers like MHD_NO, and the function-pointer call syntax (iterator(...)) are all standard C constructs. There are no occurrences of known compiler extension syntax (for example __attribute__, __declspec, asm, typeof, statement expressions, nested functions, or other vendor-specific keywords) elsewhere in the shown code, so no other fragments need investigation for Rule 1.2."
}