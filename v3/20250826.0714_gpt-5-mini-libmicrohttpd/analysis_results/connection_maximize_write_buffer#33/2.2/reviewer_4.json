{
  "user_message": "An agent A claimed that the following connection_maximize_write_buffer code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of connection_maximize_write_buffer.\n```c\nstatic size_t\nconnection_maximize_write_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MemoryPool *const pool = connection->pool;\n  void *new_buf;\n  size_t new_size;\n  size_t free_size;\n\n  mhd_assert ((NULL != c->write_buffer) || (0 == c->write_buffer_size));\n  mhd_assert (c->write_buffer_append_offset >= c->write_buffer_send_offset);\n  mhd_assert (c->write_buffer_size >= c->write_buffer_append_offset);\n\n  free_size = MHD_pool_get_free (pool);\n  if (0 != free_size)\n  {\n    new_size = c->write_buffer_size + free_size;\n    /* This function must not move the buffer position.\n     * MHD_pool_reallocate () may return the new position only if buffer was\n     * allocated 'from_end' or is not the last allocation,\n     * which should not happen. */\n    mhd_assert ((NULL == c->write_buffer) || \\\n                MHD_pool_is_resizable_inplace (pool, c->write_buffer, \\\n                                               c->write_buffer_size));\n    new_buf = MHD_pool_reallocate (pool,\n                                   c->write_buffer,\n                                   c->write_buffer_size,\n                                   new_size);\n    mhd_assert ((c->write_buffer == new_buf) || (NULL == c->write_buffer));\n    c->write_buffer = new_buf;\n    c->write_buffer_size = new_size;\n    if (c->write_buffer_send_offset == c->write_buffer_append_offset)\n    {\n      /* All data have been sent, reset offsets to zero. */\n      c->write_buffer_send_offset = 0;\n      c->write_buffer_append_offset = 0;\n    }\n  }\n\n  return c->write_buffer_size - c->write_buffer_append_offset;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is a diagnostic macro that expands to nothing in production (e.g. when NDEBUG is defined), then the call to MHD_pool_is_resizable_inplace and the whole assertion expression are removed from the compiled program. If that function and the expression have no side effects, removing the assertion does not change program behaviour, so the assertion constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1756194555] event=entry conn=0x55edf4337df0 pool=0x55edf4338060 free_size=0 new_size=0 new_buf=(nil) resizable=-1 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=after_get_free conn=0x55edf4337df0 pool=0x55edf4338060 free_size=32576 new_size=0 new_buf=(nil) resizable=-1 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=before_assert_resizability_probe conn=0x55edf4337df0 pool=0x55edf4338060 free_size=32576 new_size=32576 new_buf=(nil) resizable=0 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=after_reallocate conn=0x55edf4337df0 pool=0x55edf4338060 free_size=32576 new_size=32576 new_buf=0x55edf43380d0 resizable=0 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=offsets_reset conn=0x55edf4337df0 pool=0x55edf4338060 free_size=32576 new_size=32576 new_buf=0x55edf43380d0 resizable=0 write_buffer=0x55edf43380d0 write_size=32576 append_off=0 send_off=0\n[1756194555] event=exit conn=0x55edf4337df0 pool=0x55edf4338060 free_size=32576 new_size=0 new_buf=(nil) resizable=-1 write_buffer=0x55edf43380d0 write_size=32576 append_off=0 send_off=0\n[1756194555] event=entry conn=0x55edf4340a80 pool=0x55edf4338060 free_size=0 new_size=0 new_buf=(nil) resizable=-1 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=after_get_free conn=0x55edf4340a80 pool=0x55edf4338060 free_size=32576 new_size=0 new_buf=(nil) resizable=-1 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=before_assert_resizability_probe conn=0x55edf4340a80 pool=0x55edf4338060 free_size=32576 new_size=32576 new_buf=(nil) resizable=0 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=after_reallocate conn=0x55edf4340a80 pool=0x55edf4338060 free_size=32576 new_size=32576 new_buf=0x55edf43380d0 resizable=0 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=offsets_reset conn=0x55edf4340a80 pool=0x55edf4338060 free_size=32576 new_size=32576 new_buf=0x55edf43380d0 resizable=0 write_buffer=0x55edf43380d0 write_size=32576 append_off=0 send_off=0\n[1756194555] event=exit conn=0x55edf4340a80 pool=0x55edf4338060 free_size=32576 new_size=0 new_buf=(nil) resizable=-1 write_buffer=0x55edf43380d0 write_size=32576 append_off=0 send_off=0\n[1756194555] event=entry conn=0x55edf4338090 pool=0x55edf4338060 free_size=0 new_size=0 new_buf=(nil) resizable=-1 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=after_get_free conn=0x55edf4338090 pool=0x55edf4338060 free_size=32576 new_size=0 new_buf=(nil) resizable=-1 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=before_assert_resizability_probe conn=0x55edf4338090 pool=0x55edf4338060 free_size=32576 new_size=32576 new_buf=(nil) resizable=0 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=after_reallocate conn=0x55edf4338090 pool=0x55edf4338060 free_size=32576 new_size=32576 new_buf=0x55edf43414f0 resizable=0 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=offsets_reset conn=0x55edf4338090 pool=0x55edf4338060 free_size=32576 new_size=32576 new_buf=0x55edf43414f0 resizable=0 write_buffer=0x55edf43414f0 write_size=32576 append_off=0 send_off=0\n[1756194555] event=exit conn=0x55edf4338090 pool=0x55edf4338060 free_size=32576 new_size=0 new_buf=(nil) resizable=-1 write_buffer=0x55edf43414f0 write_size=32576 append_off=0 send_off=0\n[1756194555] event=entry conn=0x7f0350000b90 pool=0x7f0350000de0 free_size=0 new_size=0 new_buf=(nil) resizable=-1 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=after_get_free conn=0x7f0350000b90 pool=0x7f0350000de0 free_size=32576 new_size=0 new_buf=(nil) resizable=-1 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=before_assert_resizability_probe conn=0x7f0350000b90 pool=0x7f0350000de0 free_size=32576 new_size=32576 new_buf=(nil) resizable=0 write_buffer=(nil) write_size=0 append_off=0 send_off=0\n[1756194555] event=after_reallocate conn=0x7f0350000b90 pool=0x7f0350000de0 f\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA 2.2 forbids code that is executed but whose removal would not affect program behaviour. The mhd_assert invocation in this function is diagnostic code that (by design) may be compiled out in release builds. Code that is not compiled/ executed in the delivered build is not the kind of \"executed but removable\" code that Rule 2.2 targets. In builds where assertions are enabled the expression will be executed and its removal could change behaviour (e.g. by suppressing a diagnostic or an abort), so it is not necessarily \"dead\". Conversely, if the particular assert expression were provably free of side effects and provably could be removed in all builds without any behavioural change, then that specific expression would indeed be dead code \u2014 but Agent A has not established those proofs. Also, MISRA guidance already requires that assertions must not have side effects; if MHD_pool_is_resizable_inplace had side effects that are relied upon, that would be a separate compliance problem. Given the information provided, the claim of a Rule 2.2 violation is not justified."
}