{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a diagnostic macro that expands to nothing in production (e.g. when NDEBUG is defined), then the call to MHD_pool_is_resizable_inplace and the whole assertion expression are removed from the compiled program. If that function and the expression have no side effects, removing the assertion does not change program behaviour, so the assertion constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_maximize_write_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/332.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_maximize_write_buffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_maximize_write_buffer:\n```c\nstatic size_t\nconnection_maximize_write_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MemoryPool *const pool = connection->pool;\n  void *new_buf;\n  size_t new_size;\n  size_t free_size;\n\n  mhd_assert ((NULL != c->write_buffer) || (0 == c->write_buffer_size));\n  mhd_assert (c->write_buffer_append_offset >= c->write_buffer_send_offset);\n  mhd_assert (c->write_buffer_size >= c->write_buffer_append_offset);\n\n  free_size = MHD_pool_get_free (pool);\n  if (0 != free_size)\n  {\n    new_size = c->write_buffer_size + free_size;\n    /* This function must not move the buffer position.\n     * MHD_pool_reallocate () may return the new position only if buffer was\n     * allocated 'from_end' or is not the last allocation,\n     * which should not happen. */\n    mhd_assert ((NULL == c->write_buffer) || \\\n                MHD_pool_is_resizable_inplace (pool, c->write_buffer, \\\n                                               c->write_buffer_size));\n    new_buf = MHD_pool_reallocate (pool,\n                                   c->write_buffer,\n                                   c->write_buffer_size,\n                                   new_size);\n    mhd_assert ((c->write_buffer == new_buf) || (NULL == c->write_buffer));\n    c->write_buffer = new_buf;\n    c->write_buffer_size = new_size;\n    if (c->write_buffer_send_offset == c->write_buffer_append_offset)\n    {\n      /* All data have been sent, reset offsets to zero. */\n      c->write_buffer_send_offset = 0;\n      c->write_buffer_append_offset = 0;\n    }\n  }\n\n  return c->write_buffer_size - c->write_buffer_append_offset;\n}\n```\n</target_code>\nPlease provide the modified connection_maximize_write_buffer code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe helper: write logs to /tmp/logs/332.txt. */\nstatic void\nconnection_probe_log(const char *event, struct MHD_Connection *c, struct MemoryPool *pool,\n                     size_t free_size, size_t new_size, void *new_buf, int resizable_flag)\n{\n  FILE *f = fopen(\"/tmp/logs/332.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] event=%s conn=%p pool=%p free_size=%zu new_size=%zu new_buf=%p resizable=%d write_buffer=%p write_size=%zu append_off=%zu send_off=%zu\\n\",\n          (long)t,\n          event,\n          (void *)c,\n          (void *)pool,\n          free_size,\n          new_size,\n          new_buf,\n          resizable_flag,\n          (void *)(c ? c->write_buffer : NULL),\n          (size_t)(c ? c->write_buffer_size : 0),\n          (size_t)(c ? c->write_buffer_append_offset : 0),\n          (size_t)(c ? c->write_buffer_send_offset : 0));\n  fclose(f);\n}\n\nstatic size_t\nconnection_maximize_write_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MemoryPool *const pool = connection->pool;\n  void *new_buf;\n  size_t new_size;\n  size_t free_size;\n\n  /* Log entry state */\n  connection_probe_log(\"entry\", c, pool, 0, 0, NULL, -1);\n\n  mhd_assert ((NULL != c->write_buffer) || (0 == c->write_buffer_size));\n  mhd_assert (c->write_buffer_append_offset >= c->write_buffer_send_offset);\n  mhd_assert (c->write_buffer_size >= c->write_buffer_append_offset);\n\n  free_size = MHD_pool_get_free (pool);\n  connection_probe_log(\"after_get_free\", c, pool, free_size, 0, NULL, -1);\n\n  if (0 != free_size)\n  {\n    new_size = c->write_buffer_size + free_size;\n\n    /* Probe the resizability check and log the result. This extra call\n     * allows capturing whether the resizability check is executed in\n     * production builds (where mhd_assert might expand to nothing). */\n    int probe_resizable = 0;\n    if (NULL != c->write_buffer)\n    {\n      probe_resizable = MHD_pool_is_resizable_inplace (pool, c->write_buffer, c->write_buffer_size);\n    }\n    connection_probe_log(\"before_assert_resizability_probe\", c, pool, free_size, new_size, NULL, probe_resizable);\n\n    /* Original assertion preserved. */\n    mhd_assert ((NULL == c->write_buffer) || \\\n                MHD_pool_is_resizable_inplace (pool, c->write_buffer, \\\n                                               c->write_buffer_size));\n\n    new_buf = MHD_pool_reallocate (pool,\n                                   c->write_buffer,\n                                   c->write_buffer_size,\n                                   new_size);\n\n    connection_probe_log(\"after_reallocate\", c, pool, free_size, new_size, new_buf, probe_resizable);\n\n    mhd_assert ((c->write_buffer == new_buf) || (NULL == c->write_buffer));\n    c->write_buffer = new_buf;\n    c->write_buffer_size = new_size;\n    if (c->write_buffer_send_offset == c->write_buffer_append_offset)\n    {\n      /* All data have been sent, reset offsets to zero. */\n      c->write_buffer_send_offset = 0;\n      c->write_buffer_append_offset = 0;\n      connection_probe_log(\"offsets_reset\", c, pool, free_size, new_size, new_buf, probe_resizable);\n    }\n  }\n\n  connection_probe_log(\"exit\", c, pool, free_size, 0, NULL, -1);\n  return c->write_buffer_size - c->write_buffer_append_offset;\n}\n"
}