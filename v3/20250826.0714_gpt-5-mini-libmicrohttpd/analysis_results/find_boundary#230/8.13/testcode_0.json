{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable buf is declared as char * but is only used for read-only operations (passed to memcmp() and memchr()). According to Rule 8.13 it should be declared as const char * (e.g. const char *buf = (const char *)&pp[1];). Therefore the code violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_boundary code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2303.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of find_boundary as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of find_boundary:\n```c\nstatic int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  const char *dash;\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    if (pp->buffer_pos == pp->buffer_size)\n      pp->state = PP_Error;     /* out of memory */\n    /* ++(*ioffptr); */\n    return MHD_NO;              /* not enough data */\n  }\n  if ( (0 != memcmp (\"--\",\n                     buf,\n                     2)) ||\n       (0 != memcmp (&buf[2],\n                     boundary,\n                     blen)))\n  {\n    if (pp->state != PP_Init)\n    {\n      /* garbage not allowed */\n      pp->state = PP_Error;\n    }\n    else\n    {\n      /* skip over garbage (RFC 2046, 5.1.1) */\n      dash = memchr (buf,\n                     '-',\n                     pp->buffer_pos);\n      if (NULL == dash)\n        (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n      else if (dash == buf)\n        (*ioffptr)++;                         /* at least skip one byte */\n      else\n        (*ioffptr) += (size_t) (dash - buf);  /* skip to first possible boundary */\n    }\n    return MHD_NO;                            /* expected boundary */\n  }\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified find_boundary code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2303.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void log_dump_buf(const char *label, const char *buf, size_t len)\n{\n    FILE *f = fopen(\"/tmp/logs/2303.txt\", \"a\");\n    size_t i;\n    if (NULL == f)\n        return;\n    fprintf(f, \"%s: ptr=%p len=%zu bytes=\", label, (const void *)buf, len);\n    for (i = 0U; i < len; ++i)\n    {\n        unsigned char c = (unsigned char)buf[i];\n        fprintf(f, \"%02X\", c);\n        if (i + 1U < len)\n            fputc(' ', f);\n    }\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Original function with logging probes inserted. */\nstatic int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  /* NOTE: left intentionally as char * to reproduce the reported violation scenario */\n  char *buf = (char *) &pp[1];\n  const char *dash;\n\n  /* entry log */\n  log_append(\"find_boundary: enter\");\n  log_append(\"  pp=%p boundary=%p blen=%zu ioff=%zu next_state=%d next_dash_state=%d\",\n             (const void *)pp, (const void *)boundary, blen, (ioffptr != NULL) ? *ioffptr : (size_t)0U,\n             (int)next_state, (int)next_dash_state);\n\n  /* attempt to dump a small prefix of the buffer for visibility (safe size) */\n  if (pp->buffer_pos > 0U)\n  {\n    size_t dump_len = pp->buffer_pos;\n    if (dump_len > 64U)\n      dump_len = 64U;\n    log_dump_buf(\"  buffer prefix (hex)\", buf, dump_len);\n    log_append(\"  buffer_pos=%zu buffer_size=%zu\", pp->buffer_pos, pp->buffer_size);\n  }\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    log_append(\"  not enough data: buffer_pos=%zu need=%zu\", pp->buffer_pos, 2 + blen);\n    if (pp->buffer_pos == pp->buffer_size)\n    {\n      pp->state = PP_Error;     /* out of memory */\n      log_append(\"  -> set state = PP_Error (out of memory)\");\n    }\n    /* ++(*ioffptr); */\n    log_append(\"  return MHD_NO (not enough data)\");\n    return MHD_NO;              /* not enough data */\n  }\n\n  /* Log the two memcmp operands (as hex) before comparison */\n  log_dump_buf(\"  cmp1 (expected '--')\", buf, (size_t)2U);\n  if (pp->buffer_pos >= 2U + blen)\n    log_dump_buf(\"  cmp2 (boundary)\", &buf[2], blen);\n\n  if ( (0 != memcmp (\"--\",\n                     buf,\n                     2)) ||\n       (0 != memcmp (&buf[2],\n                     boundary,\n                     blen)))\n  {\n    log_append(\"  boundary comparison failed\");\n    if (pp->state != PP_Init)\n    {\n      /* garbage not allowed */\n      pp->state = PP_Error;\n      log_append(\"  pp->state != PP_Init -> set PP_Error\");\n    }\n    else\n    {\n      /* skip over garbage (RFC 2046, 5.1.1) */\n      dash = memchr (buf,\n                     '-',\n                     pp->buffer_pos);\n      log_append(\"  memchr('-') returned %p\", (const void *)dash);\n      if (NULL == dash)\n      {\n        (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n        log_append(\"  no dash found -> ioff += %zu (now %zu)\", pp->buffer_pos, *ioffptr);\n      }\n      else if (dash == buf)\n      {\n        (*ioffptr)++;                         /* at least skip one byte */\n        log_append(\"  dash at buf start -> ioff++ (now %zu)\", *ioffptr);\n      }\n      else\n      {\n        (*ioffptr) += (size_t) (dash - buf);  /* skip to first possible boundary */\n        log_append(\"  dash inside buffer -> ioff += %zu (now %zu)\", (size_t)(dash - buf), *ioffptr);\n      }\n    }\n    log_append(\"  return MHD_NO (expected boundary)\");\n    return MHD_NO;                            /* expected boundary */\n  }\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  log_append(\"  boundary found -> ioff += %zu (now %zu)\", 2 + blen, *ioffptr);\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n  log_append(\"  set pp->skip_rn=RN_Dash state=%d dash_state=%d\", (int)pp->state, (int)pp->dash_state);\n  log_append(\"  return MHD_YES\");\n  return MHD_YES;\n}\n"
}