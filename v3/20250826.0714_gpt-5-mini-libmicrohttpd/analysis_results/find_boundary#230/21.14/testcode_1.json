{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(\"--\", buf, 2) where the left operand is a null\u2011terminated string literal. Using memcmp to compare the contents of a (null\u2011terminated) string literal against a buffer constitutes using memcmp to compare null\u2011terminated strings and thus violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_boundary code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2308.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of find_boundary as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of find_boundary:\n```c\nstatic int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  const char *dash;\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    if (pp->buffer_pos == pp->buffer_size)\n      pp->state = PP_Error;     /* out of memory */\n    /* ++(*ioffptr); */\n    return MHD_NO;              /* not enough data */\n  }\n  if ( (0 != memcmp (\"--\",\n                     buf,\n                     2)) ||\n       (0 != memcmp (&buf[2],\n                     boundary,\n                     blen)))\n  {\n    if (pp->state != PP_Init)\n    {\n      /* garbage not allowed */\n      pp->state = PP_Error;\n    }\n    else\n    {\n      /* skip over garbage (RFC 2046, 5.1.1) */\n      dash = memchr (buf,\n                     '-',\n                     pp->buffer_pos);\n      if (NULL == dash)\n        (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n      else if (dash == buf)\n        (*ioffptr)++;                         /* at least skip one byte */\n      else\n        (*ioffptr) += (size_t) (dash - buf);  /* skip to first possible boundary */\n    }\n    return MHD_NO;                            /* expected boundary */\n  }\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified find_boundary code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append logging information to /tmp/logs/2308.txt. */\nstatic void\nprobe_log(const char *label,\n          struct MHD_PostProcessor *pp,\n          const char *boundary,\n          size_t blen,\n          size_t ioff)\n{\n  FILE *f = fopen(\"/tmp/logs/2308.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[%s] pp=%p buffer_pos=%zu buffer_size=%zu ioff=%zu blen=%zu\\n\",\n          label,\n          (void *) pp,\n          (size_t) pp->buffer_pos,\n          (size_t) pp->buffer_size,\n          (size_t) ioff,\n          (size_t) blen);\n\n  /* If there is at least some data, dump up to the first 64 bytes in hex and ASCII. */\n  if (pp->buffer_pos > 0)\n  {\n    const unsigned char *buf = (const unsigned char *) (&pp[1]);\n    size_t dump = pp->buffer_pos;\n    if (dump > 64u)\n      dump = 64u;\n    fprintf(f, \"[%s] buffer (first %zu bytes):\", label, dump);\n    for (size_t i = 0; i < dump; ++i)\n      fprintf(f, \" %02X\", (unsigned) buf[i]);\n    fprintf(f, \"\\n[%s] buffer ASCII (printable->char, others->.) :\", label);\n    for (size_t i = 0; i < dump; ++i)\n    {\n      unsigned char c = buf[i];\n      if ((c >= 0x20u) && (c <= 0x7Eu))\n        fprintf(f, \"%c\", c);\n      else\n        fprintf(f, \".\");\n    }\n    fprintf(f, \"\\n\");\n  }\n\n  /* If we have enough data to compare boundary, log the comparison bytes. */\n  if (pp->buffer_pos >= 2 + blen)\n  {\n    const unsigned char *buf = (const unsigned char *) (&pp[1]);\n    /* Log first two bytes (positions 0 and 1) */\n    fprintf(f, \"[%s] buf[0]=0x%02X buf[1]=0x%02X\\n\",\n            label,\n            (unsigned) buf[0],\n            (unsigned) buf[1]);\n\n    /* Log the boundary bytes and the corresponding buffer bytes at offset 2 */\n    fprintf(f, \"[%s] boundary vs buf@2 (up to %zu bytes):\", label, blen);\n    for (size_t i = 0; i < blen; ++i)\n    {\n      unsigned char b = (unsigned char) boundary[i];\n      unsigned char q = (unsigned char) buf[2 + i];\n      fprintf(f, \" (%02X/%02X)\", b, q);\n    }\n    fprintf(f, \"\\n\");\n  }\n\n  fclose(f);\n}\n\n/* Modified find_boundary with probe logging. Logic preserved. */\nstatic int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  const char *dash;\n\n  /* Log entry state */\n  probe_log(\"enter\", pp, boundary, blen, *ioffptr);\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    if (pp->buffer_pos == pp->buffer_size)\n      pp->state = PP_Error;     /* out of memory */\n\n    probe_log(\"not_enough_data\", pp, boundary, blen, *ioffptr);\n    /* ++(*ioffptr); */\n    return MHD_NO;              /* not enough data */\n  }\n\n  /* We have at least 2 + blen bytes in the buffer here, safe to inspect */\n  /* For logging purposes, compute whether the first two bytes are '-' '-' and\n     whether the next blen bytes match the boundary. We do this manually for\n     logging to avoid introducing additional memcmp usages beyond the original\n     control-flow memcmp calls. */\n  int dash_equal = 0;\n  int boundary_equal = 0;\n  {\n    const unsigned char *ubuf = (const unsigned char *) buf;\n    dash_equal = ((ubuf[0] == (unsigned char) '-') && (ubuf[1] == (unsigned char) '-')) ? 1 : 0;\n    boundary_equal = 1; /* assume equal until mismatch */\n    for (size_t i = 0; i < blen; ++i)\n    {\n      if (ubuf[2 + i] != (unsigned char) boundary[i])\n      {\n        boundary_equal = 0;\n        break;\n      }\n    }\n  }\n  {\n    FILE *f = fopen(\"/tmp/logs/2308.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[cmp_preview] memcmp('--', buf, 2) would be %s\\n\", dash_equal ? \"EQUAL\" : \"DIFFERENT\");\n      fprintf(f, \"[cmp_preview] memcmp(buf+2, boundary, blen) would be %s\\n\", boundary_equal ? \"EQUAL\" : \"DIFFERENT\");\n      fclose(f);\n    }\n  }\n\n  if ( (0 != memcmp (\"--\",\n                     buf,\n                     2)) ||\n       (0 != memcmp (&buf[2],\n                     boundary,\n                     blen)))\n  {\n    probe_log(\"boundary_mismatch\", pp, boundary, blen, *ioffptr);\n\n    if (pp->state != PP_Init)\n    {\n      /* garbage not allowed */\n      pp->state = PP_Error;\n      probe_log(\"set_error\", pp, boundary, blen, *ioffptr);\n    }\n    else\n    {\n      /* skip over garbage (RFC 2046, 5.1.1) */\n      dash = memchr (buf,\n                     '-',\n                     pp->buffer_pos);\n      if (NULL == dash)\n      {\n        (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n        probe_log(\"skip_entire_buffer\", pp, boundary, blen, *ioffptr);\n      }\n      else if (dash == buf)\n      {\n        (*ioffptr)++;                         /* at least skip one byte */\n        probe_log(\"skip_one_byte\", pp, boundary, blen, *ioffptr);\n      }\n      else\n      {\n        (*ioffptr) += (size_t) (dash - buf);  /* skip to first possible boundary */\n        probe_log(\"skip_to_dash\", pp, boundary, blen, *ioffptr);\n      }\n    }\n    return MHD_NO;                            /* expected boundary */\n  }\n\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  probe_log(\"found_boundary_remove\", pp, boundary, blen, *ioffptr);\n\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n\n  probe_log(\"exit_found\", pp, boundary, blen, *ioffptr);\n  return MHD_YES;\n}\n"
}