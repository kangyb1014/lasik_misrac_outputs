{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(header) without validating that header points to a valid, null-terminated object. content is checked for NULL, but header is not \u2014 if header is NULL (or points to a buffer lacking a terminating '\\0' within its bounds), strlen(header) can read out-of-bounds. For example, a caller passing header == NULL will cause strlen(header) to dereference a null pointer, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified add_response_entry code.\n",
  "test_code": "static void\nadd_response_entry_probe(const char *phase, const char *header, const char *content)\n{\n  FILE *f = fopen(\"/tmp/logs/2179.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log pointer values and content-null status. Do NOT dereference header or content here. */\n  fprintf(f, \"add_response_entry: phase=%s, header=%p, content=%p, content_is_null=%d\\n\",\n          phase, (const void *) header, (const void *) content, (int) (content == NULL));\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry with raw pointer values. This helps reproduce cases where header is NULL. */\n  add_response_entry_probe(\"entry\", header, content);\n\n  if (NULL == content)\n  {\n    /* Log that we are returning due to NULL content (behavior preserved). */\n    add_response_entry_probe(\"content_is_null_return\", header, content);\n    return MHD_NO;\n  }\n\n  /* Log just prior to calling strlen(header). If header is NULL, the subsequent strlen(header)\n     will reproduce the dereference/crash evidence; the log above shows header was NULL. */\n  add_response_entry_probe(\"before_strlen_header\", header, content);\n\n  header_len = strlen (header);\n\n  /* Log after successful header strlen to capture the computed length (only reached if header was valid). */\n  add_response_entry_probe(\"after_strlen_header\", header, content);\n\n  content_len = strlen (content);\n\n  /* Log the lengths computed (safe to log as integers). */\n  {\n    FILE *f = fopen(\"/tmp/logs/2179.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"add_response_entry: header_len=%zu, content_len=%zu\\n\", header_len, content_len);\n      fflush(f);\n      fclose(f);\n    }\n  }\n\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n"
}