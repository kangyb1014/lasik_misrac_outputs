{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code only checks for NULL but does not ensure that 'content' points to a valid, null-terminated character array. If 'content' refers to a non-terminated buffer (e.g. a fixed-size receive buffer filled by recv()/read() without appending '\\0', or a pointer into an object where no '\\0' exists before the object's end), then strlen(content) may read past the object's bounds causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified add_response_entry code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Probe logger to capture control flow and state for debugging\n * Writes human-readable logs to /tmp/logs/2179.txt\n * This function attempts to limit how much it reads from the\n * provided strings (strnlen with a small cap) to avoid excessive\n * reads while still providing useful previews.\n */\nstatic void probe_log_state(const char *stage,\n                            const char *header,\n                            const char *content)\n{\n    FILE *f = fopen(\"/tmp/logs/2179.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[add_response_entry] stage=%s\\n\", stage);\n    fprintf(f, \"  header_ptr=%p, content_ptr=%p\\n\", (void *)header, (void *)content);\n\n    if (header) {\n        size_t preview_len = strnlen(header, 256);\n        fprintf(f, \"  header_strnlen_preview=%zu\\n\", preview_len);\n        if (preview_len > 0) {\n            fwrite(header, 1, preview_len, f);\n            fprintf(f, \"\\n\");\n        }\n    } else {\n        fprintf(f, \"  header=NULL\\n\");\n    }\n\n    if (content) {\n        size_t preview_len = strnlen(content, 256);\n        fprintf(f, \"  content_strnlen_preview=%zu\\n\", preview_len);\n        if (preview_len > 0) {\n            fwrite(content, 1, preview_len, f);\n            fprintf(f, \"\\n\");\n        }\n    } else {\n        fprintf(f, \"  content=NULL\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry and pointers before any strlen() calls */\n  probe_log_state(\"entry\", header, content);\n\n  if (NULL == content) {\n    probe_log_state(\"content-is-NULL\", header, content);\n    return MHD_NO;\n  }\n\n  /* Log just before computing lengths (the point of potential OOB read)\n   * We purposely do not change the original logic; we only add logging\n   * so that an investigator can see the pointers and small previews.\n   */\n  probe_log_state(\"before-strlen\", header, content);\n\n  header_len = strlen (header);\n  /* Log header length after computation */\n  {\n    FILE *f = fopen(\"/tmp/logs/2179.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"  computed header_len=%zu\\n\", header_len);\n      fclose(f);\n    }\n  }\n\n  content_len = strlen (content);\n  /* Log content length after computation (may expose OOB behavior if it crashed/was large) */\n  {\n    FILE *f = fopen(\"/tmp/logs/2179.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"  computed content_len=%zu\\n\", content_len);\n      fclose(f);\n    }\n  }\n\n  /* Call original continuation and log result */\n  {\n    int ok = add_response_entry_n (response, kind, header,\n                                   header_len, content,\n                                   content_len) ? 1 : 0;\n    FILE *f = fopen(\"/tmp/logs/2179.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"  add_response_entry_n returned=%d\\n\", ok);\n      fprintf(f, \"[add_response_entry] exit\\n\\n\");\n      fclose(f);\n    }\n    return ok ? MHD_YES : MHD_NO;\n  }\n}\n"
}