{
  "user_message": "An agent A claimed that the following callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of callback.\n```c\nstatic ssize_t\ncallback (void *cls,\n          uint64_t pos,\n          char *buf,\n          size_t buf_size)\n{\n  size_t size_to_copy;\n  struct ResponseContentCallbackParam *const param =\n    (struct ResponseContentCallbackParam *) cls;\n\n  /* Note: 'pos' will never exceed size of transmitted data. */\n  /* You can use 'pos == param->response_size' in next check. */\n  if (pos >= param->response_size)\n  {   /* Whole response was sent. Signal end of response. */\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n\n  /* Pseudo code.        *\n  if (data_not_ready)\n    {\n      // Callback will be called again on next loop.\n      // Consider suspending connection until data will be ready.\n      return 0;\n    }\n   * End of pseudo code. */\n  if (buf_size < (param->response_size - pos))\n    size_to_copy = buf_size;\n  else\n    size_to_copy = (size_t) (param->response_size - pos);\n\n  memcpy (buf, param->response_data + pos, size_to_copy);\n\n  /* Pseudo code.        *\n  if (error_preparing_response)\n    {\n      // Close connection with error.\n      return MHD_CONTENT_READER_END_WITH_ERROR;\n    }\n   * End of pseudo code. */\n  /* Return amount of data copied to buffer. */\n  /* The 'buf_size' is always smaller than SSIZE_MAX therefore it's safe\n   * to cast 'size_to_copy' to 'ssize_t'. */\n  /* assert (size_to_copy <= buf_size); */\n  return (ssize_t) size_to_copy;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function treats the pointed-to ResponseContentCallbackParam only as read-only (only reads param->response_size and param->response_data and never modifies the object), but the declaration creates a pointer to a non-const type: 'struct ResponseContentCallbackParam *const param = (struct ResponseContentCallbackParam *) cls;'. According to MISRA C 2023 R8.13 the pointer should point to a const-qualified type when possible. Here the pointee should be const (for example: 'const struct ResponseContentCallbackParam * const param = (const struct ResponseContentCallbackParam *) cls;').\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the code param is declared as \"struct ResponseContentCallbackParam *const param\" \u2014 the pointer itself is const but the pointed-to type is not. The function only reads members of *param, so the pointee can and should be const-qualified to satisfy MISRA C 2023 R8.13. A compliant declaration would be, for example:\n\nconst struct ResponseContentCallbackParam * const param = (const struct ResponseContentCallbackParam *) cls;\n\n(Adding the const on the pointee when casting from void * is allowed and prevents accidental modification. The only time the existing declaration would be acceptable is if the API requires the pointee to be modifiable; that is not the case in the provided code.)"
}