{
  "user_message": "An agent A claimed that the following callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of callback.\n```c\nstatic ssize_t\ncallback (void *cls,\n          uint64_t pos,\n          char *buf,\n          size_t buf_size)\n{\n  size_t size_to_copy;\n  struct ResponseContentCallbackParam *const param =\n    (struct ResponseContentCallbackParam *) cls;\n\n  /* Note: 'pos' will never exceed size of transmitted data. */\n  /* You can use 'pos == param->response_size' in next check. */\n  if (pos >= param->response_size)\n  {   /* Whole response was sent. Signal end of response. */\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n\n  /* Pseudo code.        *\n  if (data_not_ready)\n    {\n      // Callback will be called again on next loop.\n      // Consider suspending connection until data will be ready.\n      return 0;\n    }\n   * End of pseudo code. */\n  if (buf_size < (param->response_size - pos))\n    size_to_copy = buf_size;\n  else\n    size_to_copy = (size_t) (param->response_size - pos);\n\n  memcpy (buf, param->response_data + pos, size_to_copy);\n\n  /* Pseudo code.        *\n  if (error_preparing_response)\n    {\n      // Close connection with error.\n      return MHD_CONTENT_READER_END_WITH_ERROR;\n    }\n   * End of pseudo code. */\n  /* Return amount of data copied to buffer. */\n  /* The 'buf_size' is always smaller than SSIZE_MAX therefore it's safe\n   * to cast 'size_to_copy' to 'ssize_t'. */\n  /* assert (size_to_copy <= buf_size); */\n  return (ssize_t) size_to_copy;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe 'cls' parameter is declared as void * and then cast to a non-const pointer ('struct ResponseContentCallbackParam *const param') even though the function only reads from the pointed structure. This casts away constness / fails to qualify the pointee as const; per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible (e.g. use 'const void *cls' and 'const struct ResponseContentCallbackParam *const param'). The 'buf' parameter is non-const appropriately because it is written to.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. Rule 8.13 advises that pointers should point to a const-qualified type whenever that is possible. In the callback the function only reads from the data in the object referenced by cls, yet cls is declared as void * and is cast to 'struct ResponseContentCallbackParam *const param' \u2014 that declaration makes the pointer itself const but not the pointed-to type. That discards constness and fails to qualify the pointee as const even though the function does not modify it, so it violates the intent of MISRA C 2023 Rule 8.13. \n\nNote: if the callback signature is fixed by an external API (e.g. it must be void *cls), you cannot change the prototype; however you should still avoid casting to a non-const pointee. The correct local cast is:\n  const struct ResponseContentCallbackParam *const param = (const struct ResponseContentCallbackParam *)cls;\nor, if you can change the API, change the parameter to 'const void *cls' and use a const pointee. The 'buf' parameter must remain non-const because the callback writes into it."
}