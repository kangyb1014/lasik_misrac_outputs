{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_set_panic_func:\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n_MHD_EXTERN\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The token _MHD_EXTERN by itself is just an identifier (likely a macro) and does not by itself prove use of a language extension. Based on the fragment alone, Rule 1.2 is not violated. A violation would occur if the macro expands to a compiler-specific extension that the compiler documents explicitly list as an extension, e.g. __declspec(dllexport) (MSVC) or __attribute__((visibility(\"default\"))) or other non\u2011standard storage\u2011class/attribute tokens. If _MHD_EXTERN is defined as one of those compiler\u2011specific keywords or attributes, then Rule 1.2 would be violated."
}