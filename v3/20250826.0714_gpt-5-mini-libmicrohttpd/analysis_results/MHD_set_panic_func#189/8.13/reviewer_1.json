{
  "user_message": "An agent A claimed that the following MHD_set_panic_func code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_panic_func.\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'void *cls' is an unqualified pointer to caller data. In the shown code the value is simply stored in mhd_panic_cls (mhd_panic_cls = cls) and not modified here; if the intent is to treat the pointed-to object as read-only (typical for user-supplied context pointers passed to callbacks), the parameter should be declared 'const void *cls' (and mhd_panic_cls likewise 'const void *'). As written the pointer is not const-qualified, so Rule 8.13 is violated unless there is a documented need to modify the pointee through this pointer.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=0, cls=0x55f413081220\nMHD_set_panic_func exit: cb_is_null=0, cls=0x55f413081220\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\nMHD_set_panic_func entry: cb_is_null=1, cls=(nil)\nMHD_set_panic_func exit: cb_is_null=1, cls=(nil)\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent\u2019s observation is plausible but not provably correct from the snippet alone. MISRA C 2023 R8.13 indeed recommends that pointers should be to const-qualified types when the pointee is not modified. In the shown function, the parameter void *cls is only stored (mhd_panic_cls = cls) and not modified here, so if the stored pointer is never used to modify the pointee anywhere in the library, then using const void *cls (and a matching const-qualified declaration of mhd_panic_cls and the callback parameter) would be the stricter, MISRA-preferred form and leaving it unqualified would be a violation of R8.13.\n\nHowever, whether a violation actually exists depends on the broader API and usage: if the panic callback type (MHD_PanicCallback) or other users of mhd_panic_cls expect to receive a mutable void * (i.e. they may modify the pointee), or if the public API intentionally uses void * for backwards compatibility, then the non-const qualifier is justified and R8.13 would not be violated. The provided code and execution log do not show the callback type definition or all uses of mhd_panic_cls, so we cannot conclusively declare a violation.\n\nTherefore the agent\u2019s report is not provably correct given the information shown. To confirm a true MISRA R8.13 violation you would need to inspect:\n- the declaration of MHD_PanicCallback and its parameter types,\n- the declaration of mhd_panic_cls,\n- all uses of mhd_panic_cls (whether any code modifies the pointee via that pointer),\n- any API compatibility/intent rationale.\n\nIf those show the pointee is never modified and the API can safely be changed, then the report would be correct and the parameter (and stored variable and callback prototype) should be const-qualified. Otherwise the non-const pointer may be intentional and no violation occurs."
}