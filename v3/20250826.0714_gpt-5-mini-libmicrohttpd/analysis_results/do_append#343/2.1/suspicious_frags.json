{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of do_append:\n```c\nstatic enum MHD_Result\ndo_append (char **ret,\n           const char *data,\n           size_t size)\n{\n  char *buf;\n  size_t old_len;\n\n  if (NULL == *ret)\n    old_len = 0;\n  else\n    old_len = strlen (*ret);\n  if (NULL == (buf = malloc (old_len + size + 1)))\n    return MHD_NO;\n  if (NULL != *ret)\n  {\n    memcpy (buf,\n            *ret,\n            old_len);\n    free (*ret);\n  }\n  memcpy (&buf[old_len],\n          data,\n          size);\n  buf[old_len + size] = '\\0';\n  *ret = buf;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No unreachable code fragments were identified in the provided function. Reasoning by control flow:\n\n- The first conditional (if (NULL == *ret) ... else ...) simply computes old_len and both branches are reachable depending on the runtime value of *ret (NULL vs non-NULL).\n- The malloc call is performed and its result is tested; the failure branch returns immediately (return MHD_NO) and the success path continues \u2014 this is an ordinary early-return pattern, not unreachable code.\n- The subsequent conditional (if (NULL != *ret) { memcpy(...); free(*ret); }) is reachable when *ret was non-NULL; otherwise it is skipped. Both possibilities are reachable at runtime.\n- The remaining statements (second memcpy, null terminator assignment, *ret = buf, return MHD_YES) are executed on the successful-allocation path and are therefore reachable.\n\nThere are no constant conditions, dead labels, or code placed after an unconditional return that would make any part of this function unreachable. (Concerns such as integer overflow in the malloc size expression or potential buffer-overflow risks are safety/ correctness issues but do not, by themselves, create unreachable code and thus are outside the scope of MISRA C Rule 2.1 analysis.)"
}