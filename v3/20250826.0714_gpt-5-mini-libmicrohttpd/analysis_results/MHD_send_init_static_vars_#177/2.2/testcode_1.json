{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the code is built with none of the feature macros defined (HAVE_FREEBSD_SENDFILE not defined, or SF_FLAGS not defined, and either HAVE_SYSCONF or _SC_IOV_MAX not defined so the second block is inactive), MHD_send_init_static_vars_ has no executable statements. Any calls to this function would execute but perform no action, so removing those calls would not change program behaviour (aside from timing). In that configuration the calls are dead code and thus Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_init_static_vars_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1772.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_send_init_static_vars_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_send_init_static_vars_:\n```c\nvoid\nMHD_send_init_static_vars_ (void)\n{\n#ifdef HAVE_FREEBSD_SENDFILE\n  /* FreeBSD 11 and later allow to specify read-ahead size\n   * and handles SF_NODISKIO differently.\n   * SF_FLAGS defined only on FreeBSD 11 and later. */\n#ifdef SF_FLAGS\n  freebsd_sendfile_init_ ();\n#endif /* SF_FLAGS */\n#endif /* HAVE_FREEBSD_SENDFILE */\n#if defined(HAVE_SYSCONF) && defined(_SC_IOV_MAX)\n  iov_max_init_ ();\n#endif /* HAVE_SYSCONF && _SC_IOV_MAX */\n}\n```\n</target_code>\nPlease provide the modified MHD_send_init_static_vars_ code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Helper: append a timestamped message to the log file */\nstatic void mhd_probe_log_impl(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1772.txt\", \"a\");\n    if (NULL == f)\n        return;\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_C_SOURCE) || defined(_XOPEN_SOURCE) || defined(__unix__)\n    localtime_r(&t, &tm_buf);\n    char timestr[64];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n#else\n    /* Fallback: use time_t numeric value if localtime_r not available */\n    char timestr[64];\n    snprintf(timestr, sizeof(timestr), \"%ld\", (long)t);\n#endif\n    fprintf(f, \"%s: %s\\n\", timestr, msg);\n    fclose(f);\n}\n\nstatic void mhd_probe_logf(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    mhd_probe_log_impl(buf);\n}\n\n/* The original function with logging probes inserted.  The original\n   conditional calls are preserved exactly; logging is added around\n   them and unconditionally at entry/exit so callers can observe when\n   the function was invoked and which branches (if any) executed. */\nvoid\nMHD_send_init_static_vars_ (void)\n{\n    /* Log entry and compile-time macro statuses so test harness can\n       determine whether the function contains no executable calls in a\n       particular build configuration. */\n    mhd_probe_logf(\"MHD_send_init_static_vars_: entry\");\n\n#if defined(HAVE_FREEBSD_SENDFILE)\n    mhd_probe_logf(\"compile-time: HAVE_FREEBSD_SENDFILE defined\");\n#else\n    mhd_probe_logf(\"compile-time: HAVE_FREEBSD_SENDFILE NOT defined\");\n#endif\n\n#ifdef SF_FLAGS\n    mhd_probe_logf(\"compile-time: SF_FLAGS defined\");\n#else\n    mhd_probe_logf(\"compile-time: SF_FLAGS NOT defined\");\n#endif\n\n#if defined(HAVE_SYSCONF)\n    mhd_probe_logf(\"compile-time: HAVE_SYSCONF defined\");\n#else\n    mhd_probe_logf(\"compile-time: HAVE_SYSCONF NOT defined\");\n#endif\n\n#if defined(_SC_IOV_MAX)\n    mhd_probe_logf(\"compile-time: _SC_IOV_MAX defined\");\n#else\n    mhd_probe_logf(\"compile-time: _SC_IOV_MAX NOT defined\");\n#endif\n\n#ifdef HAVE_FREEBSD_SENDFILE\n  /* FreeBSD 11 and later allow to specify read-ahead size\n   * and handles SF_NODISKIO differently.\n   * SF_FLAGS defined only on FreeBSD 11 and later. */\n#ifdef SF_FLAGS\n  mhd_probe_logf(\"branch: entering FreeBSD SF_FLAGS block -> calling freebsd_sendfile_init_\");\n  freebsd_sendfile_init_ ();\n  mhd_probe_logf(\"branch: returned from freebsd_sendfile_init_\");\n#else /* SF_FLAGS */\n  mhd_probe_logf(\"branch: HAVE_FREEBSD_SENDFILE defined but SF_FLAGS not defined -> no freebsd_sendfile_init_ call\");\n#endif /* SF_FLAGS */\n#else /* HAVE_FREEBSD_SENDFILE */\n  /* No action for FreeBSD sendfile in this build */\n#endif /* HAVE_FREEBSD_SENDFILE */\n\n#if defined(HAVE_SYSCONF) && defined(_SC_IOV_MAX)\n  mhd_probe_logf(\"branch: HAVE_SYSCONF && _SC_IOV_MAX -> calling iov_max_init_\");\n  iov_max_init_ ();\n  mhd_probe_logf(\"branch: returned from iov_max_init_\");\n#else /* HAVE_SYSCONF && _SC_IOV_MAX */\n  mhd_probe_logf(\"branch: HAVE_SYSCONF && _SC_IOV_MAX not both defined -> no iov_max_init_ call\");\n#endif /* HAVE_SYSCONF && _SC_IOV_MAX */\n\n    mhd_probe_logf(\"MHD_send_init_static_vars_: exit\");\n}\n"
}