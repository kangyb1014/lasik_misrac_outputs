{
  "user_message": "An agent A claimed that the following find_entry_by_userinfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of find_entry_by_userinfo.\n```c\nstatic struct UserEntry *\nfind_entry_by_userinfo (const struct MHD_DigestAuthUsernameInfo *username_info)\n{\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD <= username_info->uname_type)\n    return find_entry_by_username (username_info->username);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == username_info->uname_type)\n    return find_entry_by_userhash (username_info->algo3,\n                                   username_info->userhash_bin,\n                                   username_info->userhash_hex_len / 2);\n\n  return NULL; /* Should be unreachable as all cases are covered before */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes username_info->userhash_bin where username_info is a const-qualified struct pointer. If the member userhash_bin is declared as a pointer to a non-const type (e.g. unsigned char *), the expression has type 'unsigned char * const' (the pointer is const but the pointee is not). This means the pointer points to mutable data and therefore violates MISRA C 2023 Rule 8.13 \u2014 the member should instead point to a const-qualified type (e.g. const unsigned char *) or the callee should accept a pointer-to-const.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent\u2019s reasoning is technically correct in principle but cannot be concluded from the snippet alone. Because username_info is a pointer to a const struct, the expression username_info->userhash_bin will be an lvalue with top-level const \u2014 e.g. if the member is declared unsigned char * userhash_bin;, the expression has type unsigned char * const (the pointer is const but the pointee is not). MISRA C 2023 Rule 8.13 concerns the pointee qualification (a pointer should point to a const-qualified type whenever possible). If userhash_bin is declared as unsigned char * and the code (and callees such as find_entry_by_userhash) do not need to modify the pointed data, then this is a violation: the member should be declared const unsigned char * (or the callee should accept a pointer-to-const). However, the provided code does not show the declaration of userhash_bin nor the prototype of find_entry_by_userhash, so you cannot definitively say a violation exists from this excerpt alone. In summary: the agent\u2019s scenario is plausible and would indicate a Rule 8.13 violation if the member is non-const and the pointee is not modified, but the report as stated is not provably correct from the given code snippet."
}