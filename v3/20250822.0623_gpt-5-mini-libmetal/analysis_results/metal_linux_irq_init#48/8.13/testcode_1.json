{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_irq_allocate the pointer 'cntr' is declared as 'struct metal_irq_controller *cntr' but is only used to read fields (cntr->irq_base, cntr->irq_num). According to MISRA C 2023 Rule 8.13 this should be a pointer to a const-qualified type (e.g. 'const struct metal_irq_controller *cntr') when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "static void irq_probe_log(const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/483.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* record stage and some global state useful for reproducing the scenario */\n    fprintf(f, \"[irq_probe] stage=%s\\n\", stage);\n    /* these globals are present in the original compilation unit */\n    fprintf(f, \"irq_notify_fd=%d\\n\", irq_notify_fd);\n    fprintf(f, \"irq_handling_stop=%d\\n\", irq_handling_stop ? 1 : 0);\n    /* irqs is a global structure; record its size as a quick checksum */\n    fprintf(f, \"sizeof(irqs)=%zu\\n\", sizeof(irqs));\n    fclose(f);\n}\n\nstatic void irq_probe_log_controller(const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/483.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[irq_probe_controller] stage=%s\\n\", stage);\n    /* Log known controller fields relevant to the reported violation.\n       These fields are read-only in the reported scenario and help\n       reproduce the issue where a pointer should be const-qualified. */\n    fprintf(f, \"linux_irq_cntr.irq_base=%d\\n\", linux_irq_cntr.irq_base);\n    fprintf(f, \"linux_irq_cntr.irq_num=%d\\n\", linux_irq_cntr.irq_num);\n    fclose(f);\n}\n\nint metal_linux_irq_init(void)\n{\n    int ret;\n\n    irq_probe_log(\"entry\");\n\n    memset(&irqs, 0, sizeof(irqs));\n\n    irq_probe_log(\"after_memset\");\n\n    irq_notify_fd = eventfd(0, EFD_CLOEXEC);\n    if (irq_notify_fd < 0) {\n        metal_log(METAL_LOG_ERROR,\n              \"Failed to create eventfd for IRQ handling.\\n\");\n        /* log failure to the probe file for reproducibility */\n        irq_probe_log(\"eventfd_failed\");\n        return  -EAGAIN;\n    }\n\n    /* successful eventfd creation: record descriptor */\n    irq_probe_log(\"eventfd_created\");\n\n    metal_mutex_init(&irq_lock);\n    irq_handling_stop = false;\n\n    irq_probe_log(\"after_mutex_init_and_flag_clear\");\n\n    ret = metal_irq_register_controller(&linux_irq_cntr);\n    /* record result and controller state to help reproduce pointer-read scenario */\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR,\n              \"Linux IRQ controller failed to register.\\n\");\n        irq_probe_log(\"controller_register_failed\");\n        return -EINVAL;\n    }\n\n    irq_probe_log_controller(\"controller_registered\");\n\n    ret = pthread_create(&irq_pthread, NULL,\n                 metal_linux_irq_handling, NULL);\n    if (ret != 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n              ret);\n        irq_probe_log(\"pthread_create_failed\");\n        return -EAGAIN;\n    }\n\n    irq_probe_log(\"exit_success\");\n\n    return 0;\n}\n"
}