{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local iterator 'node' is declared as a non-const pointer: 'struct metal_list *node;'. In the shown uses (metal_irq_register_controller and metal_irq_allocate) 'node' is only used for iteration/reading (comparison and obtaining the containing controller) and is never used to modify the list node. Therefore it could/should be declared 'const struct metal_list *node' (and related derived pointers adjusted to const) to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "int metal_linux_irq_init(void)\n{\n\tint ret;\n\tFILE *probe_fp = NULL;\n\n\t/* Probe: open log file to capture control flow/state for analysis */\n\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"ENTER: %s\\n\", \"metal_linux_irq_init\");\n\t\tfflush(probe_fp);\n\t\tfclose(probe_fp);\n\t\tprobe_fp = NULL;\n\t}\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\t/* Log after memset */\n\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"STATE: irqs zeroed (sizeof=%zu)\\n\", sizeof(irqs));\n\t\tfflush(probe_fp);\n\t\tfclose(probe_fp);\n\t\tprobe_fp = NULL;\n\t}\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\t/* Log eventfd result */\n\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"CALL: eventfd -> irq_notify_fd=%d\\n\", irq_notify_fd);\n\t\tfflush(probe_fp);\n\t\tfclose(probe_fp);\n\t\tprobe_fp = NULL;\n\t}\n\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\n\t\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\t\tif (probe_fp) {\n\t\t\tfprintf(probe_fp, \"ERROR: eventfd failed (irq_notify_fd=%d) - returning -EAGAIN\\n\", irq_notify_fd);\n\t\t\tfflush(probe_fp);\n\t\t\tfclose(probe_fp);\n\t\t\tprobe_fp = NULL;\n\t\t}\n\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\t/* Log mutex init */\n\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"CALL: metal_mutex_init(&irq_lock)\\n\");\n\t\tfflush(probe_fp);\n\t\tfclose(probe_fp);\n\t\tprobe_fp = NULL;\n\t}\n\n\tirq_handling_stop = false;\n\t/* Log irq_handling_stop value */\n\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"STATE: irq_handling_stop=%d\\n\", (int)irq_handling_stop);\n\t\tfflush(probe_fp);\n\t\tfclose(probe_fp);\n\t\tprobe_fp = NULL;\n\t}\n\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\t/* Log register controller result */\n\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"CALL: metal_irq_register_controller(&linux_irq_cntr) -> ret=%d\\n\", ret);\n\t\tfflush(probe_fp);\n\t\tfclose(probe_fp);\n\t\tprobe_fp = NULL;\n\t}\n\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\n\t\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\t\tif (probe_fp) {\n\t\t\tfprintf(probe_fp, \"ERROR: metal_irq_register_controller returned %d - returning -EINVAL\\n\", ret);\n\t\t\tfflush(probe_fp);\n\t\t\tfclose(probe_fp);\n\t\t\tprobe_fp = NULL;\n\t\t}\n\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t\t     metal_linux_irq_handling, NULL);\n\t/* Log pthread_create result */\n\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"CALL: pthread_create(&irq_pthread, NULL, metal_linux_irq_handling, NULL) -> ret=%d\\n\", ret);\n\t\tfflush(probe_fp);\n\t\tfclose(probe_fp);\n\t\tprobe_fp = NULL;\n\t}\n\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\n\t\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\t\tif (probe_fp) {\n\t\t\tfprintf(probe_fp, \"ERROR: pthread_create failed with %d - returning -EAGAIN\\n\", ret);\n\t\t\tfflush(probe_fp);\n\t\t\tfclose(probe_fp);\n\t\t\tprobe_fp = NULL;\n\t\t}\n\n\t\treturn -EAGAIN;\n\t}\n\n\tprobe_fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"EXIT: %s -> success (0)\\n\", \"metal_linux_irq_init\");\n\t\tfflush(probe_fp);\n\t\tfclose(probe_fp);\n\t\tprobe_fp = NULL;\n\t}\n\n\treturn 0;\n}\n"
}