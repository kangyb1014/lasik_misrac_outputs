{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_log uses GCC/Clang-specific extensions: the statement-expression construct '({ ... })' and the GNU comma-swallowing token paste '##__VA_ARGS__'. Both are compiler extensions (statement expressions and the '##__VA_ARGS__' GCC extension) and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/480.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdbool.h>\n\n/* Probe helper: append control-flow/state logs to /tmp/logs/480.txt. */\nstatic void probe_log(const char *stage, const char *message, int ret, int fd, int stop)\n{\n    FILE *f = fopen(\"/tmp/logs/480.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    fprintf(f, \"%ld %s: %s ret=%d fd=%d stop=%d\\n\",\n            (long)t, stage, message ? message : \"\", ret, fd, stop);\n    fclose(f);\n}\n\nint metal_linux_irq_init(void)\n{\n    int ret;\n\n    probe_log(\"entry\", \"metal_linux_irq_init entered\", 0, -1, 0);\n\n    memset(&irqs, 0, sizeof(irqs));\n    probe_log(\"state\", \"irqs zeroed\", 0, -1, 0);\n\n    irq_notify_fd = eventfd(0, EFD_CLOEXEC);\n    probe_log(\"after_eventfd\", \"eventfd() returned\", 0, irq_notify_fd, 0);\n    if (irq_notify_fd < 0) {\n        /* Keep original logging call so behavior is unchanged. */\n        metal_log(METAL_LOG_ERROR,\n                  \"Failed to create eventfd for IRQ handling.\\n\");\n        /* Additional probe to capture the failure and errno-like state. */\n        probe_log(\"error\", \"Failed to create eventfd for IRQ handling\", irq_notify_fd, irq_notify_fd, irq_handling_stop);\n        return  -EAGAIN;\n    }\n\n    metal_mutex_init(&irq_lock);\n    probe_log(\"state\", \"mutex initialized\", 0, irq_notify_fd, 0);\n\n    irq_handling_stop = false;\n    probe_log(\"state\", \"irq_handling_stop set to false\", 0, irq_notify_fd, irq_handling_stop);\n\n    ret = metal_irq_register_controller(&linux_irq_cntr);\n    probe_log(\"after_register\", \"metal_irq_register_controller returned\", ret, irq_notify_fd, irq_handling_stop);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR,\n                  \"Linux IRQ controller failed to register.\\n\");\n        probe_log(\"error\", \"Linux IRQ controller failed to register\", ret, irq_notify_fd, irq_handling_stop);\n        return -EINVAL;\n    }\n\n    ret = pthread_create(&irq_pthread, NULL,\n                         metal_linux_irq_handling, NULL);\n    probe_log(\"after_pthread_create\", \"pthread_create returned\", ret, irq_notify_fd, irq_handling_stop);\n    if (ret != 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n                  ret);\n        probe_log(\"error\", \"Failed to create IRQ thread\", ret, irq_notify_fd, irq_handling_stop);\n        return -EAGAIN;\n    }\n\n    probe_log(\"exit\", \"metal_linux_irq_init succeeded\", 0, irq_notify_fd, irq_handling_stop);\n    return 0;\n}\n"
}