{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment \"irq_handling_stop = false;\" is redundant dead code: irq_handling_stop is a file\u2011scope static bool (zero\u2011initialized by the C runtime), and metal_linux_irq_init is only called during initial system init path (metal_init/metal_sys_init). Removing this single assignment does not change program behaviour because irq_handling_stop will already be false at this point, so the operation is executed but its removal would have no effect.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/482.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "int metal_linux_irq_init(void)\n{\n\tint ret;\n\tFILE *logf = NULL;\n\n\t/* preserve original behaviour: zero-out IRQ state */\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\t/* Open probe log. Use append mode to preserve prior runs. */\n\tlogf = fopen(\"/tmp/logs/482.txt\", \"a\");\n\tif (logf) {\n\t\t/* Log entry and the initial value (should be zero/false for file-scope static bool).\n\t\t   Print the address so multiple instances/runs can be correlated. */\n\t\tfprintf(logf, \"metal_linux_irq_init: entry\\n\");\n\t\tfprintf(logf, \"  &irq_handling_stop=%p initial_value=%d\\n\",\n\t\t\t(void *)&irq_handling_stop, (int)irq_handling_stop);\n\t\tfclose(logf);\n\t\tlogf = NULL;\n\t}\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\t/* Log the failure path to probe file before returning. */\n\t\tlogf = fopen(\"/tmp/logs/482.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_linux_irq_init: eventfd failed: irq_notify_fd=%d\\n\", irq_notify_fd);\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\n\t/* Probe: log value immediately before the assignment that was reported as dead code. */\n\tlogf = fopen(\"/tmp/logs/482.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_irq_init: before assignment irq_handling_stop=%d\\n\", (int)irq_handling_stop);\n\t\tfclose(logf);\n\t\tlogf = NULL;\n\t}\n\n\t/* Original assignment preserved to avoid changing behaviour. */\n\tirq_handling_stop = false;\n\n\t/* Probe: log value immediately after the assignment to show whether it changed state. */\n\tlogf = fopen(\"/tmp/logs/482.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_irq_init: after assignment irq_handling_stop=%d\\n\", (int)irq_handling_stop);\n\t\tfclose(logf);\n\t\tlogf = NULL;\n\t}\n\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tlogf = fopen(\"/tmp/logs/482.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_linux_irq_init: register controller failed ret=%d\\n\", ret);\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tlogf = fopen(\"/tmp/logs/482.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_linux_irq_init: pthread_create failed ret=%d\\n\", ret);\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\t/* Final success probe */\n\tlogf = fopen(\"/tmp/logs/482.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_irq_init: success irq_notify_fd=%d irq_handling_stop=%d\\n\",\n\t\t\tirq_notify_fd, (int)irq_handling_stop);\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}\n"
}