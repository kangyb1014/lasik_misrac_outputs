{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang language extensions: the statement-expression construct '({ ... })' and the GNU token-pasting comma-swallowing '##__VA_ARGS__' in the variadic macro. Both are documented compiler extensions and thus violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_notify code that contains useful probe functions that print useful logs to a file \"/tmp/logs/490.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_notify as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_notify:\n```c\nstatic int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t}\n\treturn ret;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_notify code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n#include <stdarg.h>\n#include <sys/types.h>\n\n/* External symbols expected to be provided by the larger build. */\nextern int irq_notify_fd;\nextern void metal_log(int level, const char *fmt, ...);\nextern const int METAL_LOG_ERROR;\n\n/* Helper probe: append a structured log entry to /tmp/logs/490.txt.\n   Keeps file I/O local so original logic is preserved. */\nstatic void probe_log(const char *stage, uint64_t val, int ret, int err)\n{\n    FILE *fp = fopen(\"/tmp/logs/490.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    pid_t pid = getpid();\n\n    if (err != 0) {\n        fprintf(fp, \"%ld pid=%d stage=%s val=%\" PRIu64 \" ret=%d err=%d msg=%s\\n\",\n                (long)t, (int)pid, stage, val, ret, err, strerror(err));\n    } else {\n        fprintf(fp, \"%ld pid=%d stage=%s val=%\" PRIu64 \" ret=%d\\n\",\n                (long)t, (int)pid, stage, val, ret);\n    }\n    fflush(fp);\n    fclose(fp);\n}\n\nstatic int metal_linux_irq_notify(void)\n{\n    uint64_t val = 1;\n    int ret;\n\n    /* Log before performing the write to capture the intent and value. */\n    probe_log(\"before_write\", val, -1, 0);\n\n    ret = write(irq_notify_fd, &val, sizeof(val));\n\n    /* Capture errno immediately after the write for accurate diagnostics. */\n    int saved_errno = (ret < 0) ? errno : 0;\n\n    /* Log after the write with the result and errno (if any). */\n    probe_log(\"after_write\", val, ret, saved_errno);\n\n    if (ret < 0) {\n        /* Preserve original behavior: call metal_log on error. */\n        metal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\n        /* Also log that we invoked metal_log for additional evidence. */\n        probe_log(\"metal_log_invoked\", val, ret, saved_errno);\n    }\n    return ret;\n}\n"
}