{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the metal_log macro expands to a GNU statement-expression ({ ... }) and uses the GCC comma-elision token-pasting idiom (##__VA_ARGS__), both are compiler extensions. Thus the call metal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__) invokes code that relies on language extensions (GCC/Clang), violating MISRA C 2023 Rule 1.2. Note: __func__ itself is standard C and is not a problem.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_notify code that contains useful probe functions that print useful logs to a file \"/tmp/logs/490.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_notify as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_notify:\n```c\nstatic int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t}\n\treturn ret;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_notify code.\n",
  "test_code": "static int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\n\t/* Probe: log entry with input state */\n\t{\n\t\tFILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n\t\tif (f) {\n\t\t\tfprintf(f, \"ENTER %s: irq_notify_fd=%d val=%llu\\n\",\n\t\t\t\t__func__, irq_notify_fd, (unsigned long long)val);\n\t\t\tfflush(f);\n\t\t\tfclose(f);\n\t\t}\n\t}\n\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\t/* Probe: log failure details (errno and string) */\n\t\tFILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n\t\tif (f) {\n\t\t\tint err = errno;\n\t\t\tfprintf(f, \"ERROR %s: write returned %d errno=%d (%s)\\n\",\n\t\t\t\t__func__, ret, err, strerror(err));\n\t\t\tfflush(f);\n\t\t\tfclose(f);\n\t\t}\n\n\t\t/* Preserve original behavior */\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t} else {\n\t\t/* Probe: log success */\n\t\tFILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n\t\tif (f) {\n\t\t\tfprintf(f, \"OK %s: write returned %d\\n\", __func__, ret);\n\t\t\tfflush(f);\n\t\t\tfclose(f);\n\t\t}\n\t}\n\treturn ret;\n}"
}