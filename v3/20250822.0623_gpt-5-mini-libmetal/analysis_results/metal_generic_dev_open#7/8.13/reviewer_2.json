{
  "user_message": "An agent A claimed that the following metal_generic_dev_open code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_open.\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe 'bus' parameter is declared as 'struct metal_bus *bus' but is not modified (it is cast to void), so it could be declared as 'const struct metal_bus *bus'. 'dev_name' is already 'const char *' and must remain const; 'struct metal_device **device' is an output parameter returning a modifiable device pointer and therefore should not be const-qualified. Because 'bus' can be const-qualified, the function as written violates Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function metal_generic_dev_open:\nstruct metal_device {\n\tconst char             *name;       /**< Device name */\n\tstruct metal_bus       *bus;        /**< Bus that contains device */\n\tunsigned int           num_regions; /**< Number of I/O regions in\n\t\t\t\t\t\t device */\n\tstruct metal_io_region regions[METAL_MAX_DEVICE_REGIONS]; /**< Array of\n\t\t\t\t\t\t\tI/O regions in device*/\n\tstruct metal_list      node;       /**< Node on bus' list of devices */\n\tint                    irq_num;    /**< Number of IRQs per device */\n\tvoid                   *irq_info;  /**< IRQ ID */\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 recommends that pointers point to const-qualified types when possible. In metal_generic_dev_open the parameter bus is not used or modified ((void)bus;) so it could and should be declared as const struct metal_bus *bus. dev_name is already const and must remain so; device is an output parameter returning a modifiable struct metal_device * and therefore must not be const-qualified. One caveat: if the function signature must match an existing non-const API or a function-pointer prototype (i.e. for compatibility), keeping bus non-const may be intentional and acceptable. Absent such a compatibility requirement, the current code violates Rule 8.13."
}