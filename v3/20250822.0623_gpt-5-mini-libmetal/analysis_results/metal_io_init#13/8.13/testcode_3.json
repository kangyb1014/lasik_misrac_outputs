{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function metal_virt2phys is declared as int metal_virt2phys(void *addr, unsigned long *phys) but its implementation only reads the address (casts to uintptr_t and inspects it) and does not modify the memory pointed to by addr. According to MISRA C 2023 Rule 8.13, the pointer parameter should be const-qualified when possible. Therefore the parameter should be const void *addr (and the prototype updated accordingly). The call error = metal_virt2phys(virt + offset, &phys[page]); itself would still be valid if the function were changed to take const void *; as written, the code violates Rule 8.13 because the pointer-to-data is not const-qualified where it could be.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\nPlease provide the modified metal_io_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <limits.h>\n#include <stddef.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/133.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n          const metal_phys_addr_t *physmap, size_t size,\n          unsigned int page_shift, unsigned int mem_flags,\n          const struct metal_io_ops *ops)\n{\n    const struct metal_io_ops nops = {\n        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n    };\n\n    /* Log entry with the important parameters relevant to the violation scenario. */\n    probe_log(\"metal_io_init ENTRY: io=%p virt=%p physmap=%p size=%zu page_shift=%u mem_flags=%u ops=%p\\n\",\n              (void *)io, virt, (const void *)physmap, size, page_shift, mem_flags, (const void *)ops);\n\n    io->virt = virt;\n    probe_log(\"stored io->virt = %p\\n\", io->virt);\n\n    io->physmap = physmap;\n    probe_log(\"stored io->physmap = %p\\n\", (const void *)io->physmap);\n\n    io->size = size;\n    probe_log(\"stored io->size = %zu\\n\", io->size);\n\n    io->page_shift = page_shift;\n    probe_log(\"stored io->page_shift = %u\\n\", io->page_shift);\n\n    if (page_shift >= sizeof(io->page_mask) * CHAR_BIT) {\n        /* avoid overflow */\n        io->page_mask = -1UL;\n        probe_log(\"page_shift >= bits, set io->page_mask = -1UL (all bits)\\n\");\n    } else {\n        io->page_mask = (1UL << page_shift) - 1UL;\n        probe_log(\"computed io->page_mask = %#lx (1UL << %u) - 1\\n\", io->page_mask, page_shift);\n    }\n\n    io->mem_flags = mem_flags;\n    probe_log(\"stored io->mem_flags = %u\\n\", io->mem_flags);\n\n    io->ops = ops ? *ops : nops;\n    probe_log(\"stored io->ops = %p (resolved ops pointer or nops)\\n\", (const void *)&io->ops);\n\n    /* Before calling the system mapping function, record the final io state. This helps\n       trace calls that may subsequently call metal_virt2phys(virt + offset, &phys[..])\n       so that other agents can correlate the virt pointer values and mappings. */\n    probe_log(\"metal_io_init BEFORE metal_sys_io_mem_map: io=%p virt=%p physmap=%p size=%zu page_shift=%u page_mask=%#lx mem_flags=%u\\n\",\n              (void *)io, io->virt, (const void *)io->physmap, io->size, io->page_shift, io->page_mask, io->mem_flags);\n\n    metal_sys_io_mem_map(io);\n\n    probe_log(\"metal_io_init EXIT: completed metal_sys_io_mem_map for io=%p\\n\", (void *)io);\n}\n"
}