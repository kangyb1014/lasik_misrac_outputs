{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn function metal_virt2phys the parameter 'void *addr' is used only for reading (it's not modified), so it should be declared as 'const void *addr'. Keeping it as a non-const pointer violates MISRA C 2023 Rule 8.13. The 'unsigned long *phys' parameter is an output and should remain non-const. Suggested fix: change the signature to 'static int metal_virt2phys(const void *addr, unsigned long *phys)'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\nPlease provide the modified metal_io_init code.\n",
  "test_code": "#include <stdio.h>\n#include <limits.h>\n#include <stddef.h>\n\n/* Probe function: logs inputs and key derived state to /tmp/logs/133.txt. */\nstatic void metal_io_log_state_before(const struct metal_io_region *io,\n                                     const void *virt,\n                                     const void *physmap,\n                                     size_t size,\n                                     unsigned int page_shift,\n                                     unsigned int mem_flags,\n                                     const void *ops,\n                                     unsigned long page_mask)\n{\n    FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_io_init] ENTRY\\n\");\n    fprintf(f, \"  io=%p\\n\", (const void *)io);\n    fprintf(f, \"  virt=%p\\n\", virt);\n    fprintf(f, \"  physmap=%p\\n\", physmap);\n    fprintf(f, \"  size=%zu\\n\", size);\n    fprintf(f, \"  page_shift=%u\\n\", page_shift);\n    fprintf(f, \"  page_mask=0x%lx\\n\", page_mask);\n    fprintf(f, \"  mem_flags=%u\\n\", mem_flags);\n    fprintf(f, \"  ops=%p\\n\", ops);\n    fprintf(f, \"  Note: 'virt' is observed only for reads in this path.\\n\");\n    fclose(f);\n}\n\nstatic void metal_io_log_state_after(const struct metal_io_region *io)\n{\n    FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Log a few fields from io after mapping to capture any changes */\n    fprintf(f, \"[metal_io_init] AFTER metal_sys_io_mem_map\\n\");\n    fprintf(f, \"  io=%p\\n\", (const void *)io);\n    fprintf(f, \"  io->virt=%p\\n\", (const void *)io->virt);\n    fprintf(f, \"  io->physmap=%p\\n\", (const void *)io->physmap);\n    fprintf(f, \"  io->size=%zu\\n\", io->size);\n    fprintf(f, \"  io->page_shift=%u\\n\", io->page_shift);\n    fprintf(f, \"  io->page_mask=0x%lx\\n\", io->page_mask);\n    fprintf(f, \"  io->mem_flags=%u\\n\", io->mem_flags);\n    fclose(f);\n}\n\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n          const metal_phys_addr_t *physmap, size_t size,\n          unsigned int page_shift, unsigned int mem_flags,\n          const struct metal_io_ops *ops)\n{\n    const struct metal_io_ops nops = {\n        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n    };\n\n    /* Preserve original logic: assign fields first */\n    io->virt = virt;\n    io->physmap = physmap;\n    io->size = size;\n    io->page_shift = page_shift;\n\n    if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n        /* avoid overflow */\n        io->page_mask = -1UL;\n    else\n        io->page_mask = (1UL << page_shift) - 1UL;\n\n    io->mem_flags = mem_flags;\n    io->ops = ops ? *ops : nops;\n\n    /* Log state before calling metal_sys_io_mem_map. Cast virt to const void*\n       because the probe only reads the pointer value; this documents that\n       'virt' is observed but not modified here. */\n    metal_io_log_state_before(io, (const void *)virt, (const void *)physmap,\n                              size, page_shift, mem_flags,\n                              (const void *)ops, io->page_mask);\n\n    metal_sys_io_mem_map(io);\n\n    /* Log state after mapping to capture any modifications performed by\n       metal_sys_io_mem_map. */\n    metal_io_log_state_after(io);\n}\n"
}