{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses compiler-specific language extensions: the GNU statement-expression extension '({ ... })' and the GCC/Clang variadic-macro comma swallowing '##__VA_ARGS__'. Both are non\u2011standard extensions and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_run_noblock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/680.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_run_noblock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_run_noblock:\n```c\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_run_noblock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <pthread.h>\n\n/* Probe helpers: write formatted probe logs to /tmp/logs/680.txt */\nstatic void ensure_log_dir(void)\n{\n    struct stat st;\n    if (stat(\"/tmp/logs\", &st) != 0) {\n        /* Try to create the directory; ignore errors if it already exists concurrently. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n    }\n}\n\nstatic void probe_write(const char *msg)\n{\n    FILE *f;\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/680.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s\", msg);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_printf(const char *fmt, ...)\n{\n    char buf[1024];\n    va_list ap;\n    va_start(ap, fmt);\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    probe_write(buf);\n}\n\n/* Original function with inserted probes. Must not define main or macros. */\nint metal_run_noblock(int threads, metal_thread_t child,\n             void *arg, void *tids, int *threads_out)\n{\n    int error, i;\n    pthread_t *tid_p = (pthread_t *)tids;\n\n    probe_printf(\"metal_run_noblock ENTRY: threads=%d, child=%p, arg=%p, tids=%p, threads_out=%p\\n\",\n                 threads, (void *)child, arg, tids, (void *)threads_out);\n\n    if (!tids) {\n        probe_printf(\"metal_run_noblock ERROR: tids is NULL, returning -EINVAL\\n\");\n        metal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n        return -EINVAL;\n    }\n\n    error = 0;\n    for (i = 0; i < threads; i++) {\n        /* Preserve original logic: error = -pthread_create(...) */\n        error = -pthread_create(&tid_p[i], NULL, child, arg);\n        /* rc is the direct return from pthread_create (non-negative error code or 0) */\n        int rc = -error;\n\n        probe_printf(\"metal_run_noblock: creating thread index=%d -> pthread_create_ret=%d, error_var=%d\\n\",\n                     i, rc, error);\n\n        if (error) {\n            /* Log both the original behavior and a correct strerror(rc) for evidence */\n            probe_printf(\"metal_run_noblock: pthread_create failed at index=%d, pthread_ret=%d, strerror_rc=%s\\n\",\n                         i, rc, strerror(rc));\n\n            metal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n                  strerror(error));\n            break;\n        }\n    }\n\n    probe_printf(\"metal_run_noblock EXIT: created_count=%d, return_error=%d\\n\", i, error);\n\n    *threads_out = i;\n    return error;\n}\n"
}