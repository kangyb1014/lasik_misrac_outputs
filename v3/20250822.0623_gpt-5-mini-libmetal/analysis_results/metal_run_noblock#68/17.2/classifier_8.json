{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_run_noblock:\n```c\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_run_noblock:\nstatic int condition(void)\n{\n\tint ret;\n\tint ts_created;\n\tpthread_t tids[THREADS];\n\n\t/** TC1 consumer threads go first */\n\t/** create 10 consumer threads first */\n\tret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 producer threads next */\n\tret = metal_run(THREADS, producer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** wait for consumer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\n\t/** TC2 producer threads go first */\n\t/** create 10 producer threads first */\n\tret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 consumer threads next */\n\tret = metal_run(THREADS, consumer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\nout:\n\t/** wait for producer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\treturn ret;\n}\n...\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n...\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n...\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n...\nmetal_mutex_t *mutex\n...\nstruct metal_generic_shmem *shmem\n...\nstatic int spinlock(void)\n{\n\tstruct metal_spinlock lock = METAL_SPINLOCK_INIT;\n\tconst int threads = 10;\n\tint value, error;\n\n\terror = metal_run(threads, spinlock_thread, &lock);\n\tif (!error) {\n\t\tvalue = total;\n\t\tvalue -= spinlock_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. metal_run_noblock does not call itself directly; metal_run calls metal_run_noblock but metal_run_noblock does not call metal_run. The pthread-created thread functions (producer_thread/consumer_thread) are not shown to call metal_run_noblock, so there is no evidence of indirect recursion in the provided code fragment."
}