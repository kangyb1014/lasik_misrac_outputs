{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code passes 'error' to strerror after assigning error = -pthread_create(...). On failure pthread_create returns a positive errno; negating it yields a negative value. Passing a negative errnum to strerror is implementation-defined and in some implementations may cause out-of-bounds accesses inside the library (e.g. array indexing of error messages). Therefore this can result in accesses beyond object bounds and violates Rule 21.17. A safe fix is to pass the positive error number (e.g. strerror(-error) or store the pthread_create return in a separate variable and pass that), or use a bounds-checked strerror_r.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_run_noblock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_run_noblock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_run_noblock:\n```c\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_run_noblock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <pthread.h>\n#include <errno.h>\n\n/* Probe logging helper: append formatted logs to /tmp/logs/689.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/689.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_run_noblock(int threads, metal_thread_t child,\n             void *arg, void *tids, int *threads_out)\n{\n    int error, i;\n    pthread_t *tid_p = (pthread_t *)tids;\n\n    probe_log(\"metal_run_noblock ENTRY: threads=%d, child=%p, arg=%p, tids=%p, threads_out=%p\",\n              threads, (void *)child, arg, tids, (void *)threads_out);\n\n    if (!tids) {\n        probe_log(\"invalid argument: tids is NULL\");\n        metal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n        return -EINVAL;\n    }\n\n    error = 0;\n    for (i = 0; i < threads; i++) {\n        probe_log(\"creating thread: index=%d\", i);\n\n        /* Call pthread_create and capture its raw return for logging */\n        int rc = pthread_create(&tid_p[i], NULL, child, arg);\n        probe_log(\"pthread_create returned rc=%d for index=%d\", rc, i);\n\n        /* Preserve original logic: negate rc into error as before */\n        error = -rc;\n        probe_log(\"after negation: error=%d (rc=%d)\", error, rc);\n\n        if (error) {\n            /* Log that we are about to call strerror with the (possibly negative) error value. */\n            probe_log(\"about to call strerror with error=%d (index=%d)\", error, i);\n\n            /* Capture the strerror result (this mirrors the original behavior and produces evidence) */\n            const char *s = strerror(error);\n            probe_log(\"strerror returned pointer=%p message=\\\"%s\\\" for error=%d\", (void *)s, s ? s : \"(null)\", error);\n\n            metal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n                  strerror(error));\n            probe_log(\"breaking out of loop at index=%d with error=%d\", i, error);\n            break;\n        }\n    }\n\n    if (threads_out) {\n        *threads_out = i;\n        probe_log(\"threads_out set to %d\", i);\n    } else {\n        probe_log(\"threads_out pointer is NULL, not set\");\n    }\n\n    probe_log(\"metal_run_noblock EXIT: returning error=%d\", error);\n    return error;\n}\n"
}