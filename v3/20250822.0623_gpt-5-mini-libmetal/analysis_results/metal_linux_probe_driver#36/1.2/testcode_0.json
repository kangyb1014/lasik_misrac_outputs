{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang language extensions: a statement expression '({ ... })' and the GNU variadic comma-swallowing token paste '##__VA_ARGS__'. Both are documented compiler extensions and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_driver code that contains useful probe functions that print useful logs to a file \"/tmp/logs/360.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_driver as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_driver:\n```c\nstatic int metal_linux_probe_driver(struct linux_bus *lbus,\n\t\t\t\t    struct linux_driver *ldrv)\n{\n\tchar command[256];\n\tint ret;\n\n\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\n\t/* Try probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* Try sudo probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* If all else fails... */\n\treturn ldrv->sdrv ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_driver code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <errno.h>\n\n/*\n * Probe logging helper to capture control flow and state for analysis.\n * Appends human-readable diagnostic entries to /tmp/logs/360.txt.\n */\nstatic void metal_probe_log(const char *stage,\n                            const struct linux_bus *lbus,\n                            const struct linux_driver *ldrv,\n                            int ret)\n{\n    FILE *f = fopen(\"/tmp/logs/360.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    char timestr[32] = \"\";\n    if (t != (time_t)-1) {\n        struct tm tm;\n        if (localtime_r(&t, &tm))\n            strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm);\n    }\n\n    fprintf(f, \"[%s] stage=%s lbus=%p bus_name=%s ldrv=%p drv_name=%s mod_name=%s sdrv=%p ret=%d\\n\",\n            timestr[0] ? timestr : \"unknown\",\n            stage,\n            (const void *)lbus,\n            lbus ? lbus->bus_name : \"(null)\",\n            (const void *)ldrv,\n            ldrv ? ldrv->drv_name : \"(null)\",\n            ldrv ? ldrv->mod_name : \"(null)\",\n            ldrv ? (void *)ldrv->sdrv : (void *)0,\n            ret);\n    fclose(f);\n}\n\nstatic int metal_linux_probe_driver(struct linux_bus *lbus,\n                                    struct linux_driver *ldrv)\n{\n    char command[256];\n    int ret;\n\n    /* Log entry to show function start and initial state. */\n    metal_probe_log(\"entry\", lbus, ldrv, 0);\n\n    ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\n    /* Log result of first sysfs_open_driver attempt */\n    metal_probe_log(\"after_sysfs_open_first\", lbus, ldrv, (ldrv->sdrv != NULL) ? 0 : -ENODEV);\n\n    /* Try probing the module and then open the driver. */\n    if (!ldrv->sdrv) {\n        ret = snprintf(command, sizeof(command),\n                       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n        /* Log snprintf result and produced command (truncated if necessary) */\n        metal_probe_log(\"snprintf_modprobe\", lbus, ldrv, ret);\n\n        if (ret >= (int)sizeof(command))\n        {\n            metal_probe_log(\"return_overflow_first\", lbus, ldrv, -EOVERFLOW);\n            return -EOVERFLOW;\n        }\n\n        ret = system(command);\n        /* Log system() return value */\n        metal_probe_log(\"system_modprobe\", lbus, ldrv, ret);\n\n        if (ret < 0) {\n            metal_log(METAL_LOG_WARNING,\n                      \"%s: executing system command '%s' failed.\\n\",\n                      __func__, command);\n            metal_probe_log(\"system_modprobe_failed\", lbus, ldrv, ret);\n        }\n\n        ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n        metal_probe_log(\"after_sysfs_open_second\", lbus, ldrv, (ldrv->sdrv != NULL) ? 0 : -ENODEV);\n    }\n\n    /* Try sudo probing the module and then open the driver. */\n    if (!ldrv->sdrv) {\n        ret = snprintf(command, sizeof(command),\n                       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n        /* Log snprintf result and produced command (truncated if necessary) */\n        metal_probe_log(\"snprintf_sudo_modprobe\", lbus, ldrv, ret);\n\n        if (ret >= (int)sizeof(command))\n        {\n            metal_probe_log(\"return_overflow_sudo\", lbus, ldrv, -EOVERFLOW);\n            return -EOVERFLOW;\n        }\n\n        ret = system(command);\n        /* Log system() return value */\n        metal_probe_log(\"system_sudo_modprobe\", lbus, ldrv, ret);\n\n        if (ret < 0) {\n            metal_log(METAL_LOG_WARNING,\n                      \"%s: executing system command '%s' failed.\\n\",\n                      __func__, command);\n            metal_probe_log(\"system_sudo_modprobe_failed\", lbus, ldrv, ret);\n        }\n\n        ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n        metal_probe_log(\"after_sysfs_open_third\", lbus, ldrv, (ldrv->sdrv != NULL) ? 0 : -ENODEV);\n    }\n\n    /* If all else fails... */\n    metal_probe_log(\"exit\", lbus, ldrv, ldrv->sdrv ? 0 : -ENODEV);\n    return ldrv->sdrv ? 0 : -ENODEV;\n}\n"
}