{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function takes an out-parameter 'struct metal_bus **result' but only assigns a pointer to an existing bus and does not (and need not) modify the bus object itself. Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible; the API could be changed to 'const struct metal_bus **result' (returning a pointer to const) to express that the function does not permit modification of the bus through this returned pointer. As written, the lack of const on the pointed-to type violates Rule 8.13 (unless the API intentionally intends to allow callers to modify the bus contents, in which case no violation would occur)."
}