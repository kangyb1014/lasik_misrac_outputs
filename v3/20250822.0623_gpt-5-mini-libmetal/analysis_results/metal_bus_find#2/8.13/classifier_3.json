{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nbus = metal_container_of(node, struct metal_bus, node);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No. The local pointer 'bus' cannot sensibly be const in this function because it is assigned to *result, where result is of type 'struct metal_bus **' (a pointer-to-modifiable object). The function returns a non-const pointer to the caller, so qualifying 'bus' as 'const struct metal_bus *' would be incompatible with the API. If the API instead returned a pointer-to-const (e.g. 'const struct metal_bus **' or a 'const struct metal_bus *' result), then 'bus' should be const. Given the current signature, Rule 8.13 is not violated."
}