{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nstrcmp(bus->name, name) reads both operands until a terminating '\\0'. The code does not validate that 'name' is non-NULL and null-terminated nor that 'bus->name' is null-terminated (definition of struct metal_bus not shown). If either operand is not a pointer to a NUL-terminated buffer (for example bus->name is a fixed-size char array not guaranteed to contain a '\\0', or caller passes a non-terminated buffer or NULL), strcmp can read beyond object bounds. Therefore Rule 21.17 is violated unless callers/struct invariants guarantee both strings are valid NUL-terminated, non-NULL strings.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_bus_find ENTER: name=0x7fe727805850\nmetal_bus_find EXIT: not found, returning -ENOENT\nmetal_bus_find ENTER: name=0x7fe72780587d\niter: node=0x7fe72780bbe8, bus=0x7fe72780bba0, bus->name=0x7fe727805850, name=0x7fe72780587d, result_ptr=(nil)\nno match on this iteration: strcmp(bus->name=0x7fe727805850, name=0x7fe72780587d)\nmetal_bus_find EXIT: not found, returning -ENOENT\nmetal_bus_find ENTER: name=0x7fe727805850\niter: node=0x7fe72780bbe8, bus=0x7fe72780bba0, bus->name=0x7fe727805850, name=0x7fe727805850, result_ptr=0x7ffe9d8ccf78\nmatch found: bus=0x7fe72780bba0, setting *result=0x7fe72780bba0 and returning 0\nmetal_bus_find ENTER: name=0x7fe72780587d\niter: node=0x7fe72780ce50, bus=0x7fe72780ce08, bus->name=0x7fe72780587d, name=0x7fe72780587d, result_ptr=0x7ffe9d8ccf78\nmatch found: bus=0x7fe72780ce08, setting *result=0x7fe72780ce08 and returning 0\nmetal_bus_find ENTER: name=0x555a513dd220\nmetal_bus_find EXIT: not found, returning -ENOENT\nmetal_bus_find ENTER: name=0x555a513dd24d\niter: node=0x555a513e52a8, bus=0x555a513e5260, bus->name=0x555a513dd220, name=0x555a513dd24d, result_ptr=(nil)\nno match on this iteration: strcmp(bus->name=0x555a513dd220, name=0x555a513dd24d)\nmetal_bus_find EXIT: not found, returning -ENOENT\nmetal_bus_find ENTER: name=0x555a513dd220\niter: node=0x555a513e52a8, bus=0x555a513e5260, bus->name=0x555a513dd220, name=0x555a513dd220, result_ptr=0x7ffe33673948\nmatch found: bus=0x555a513e5260, setting *result=0x555a513e5260 and returning 0\nmetal_bus_find ENTER: name=0x555a513dd24d\niter: node=0x555a513e6510, bus=0x555a513e64c8, bus->name=0x555a513dd24d, name=0x555a513dd24d, result_ptr=0x7ffe33673948\nmatch found: bus=0x555a513e64c8, setting *result=0x555a513e64c8 and returning 0\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The code calls strcmp(bus->name, name) without checking that either pointer is non-NULL or that the pointed-to objects are NUL-terminated. MISRA C 2023 Rule 21.17 requires that uses of <string.h> functions must not allow accesses beyond the bounds of the referenced objects. As written, and given only the snippet, there is no evidence of invariants guaranteeing that bus->name and name are valid, NUL-terminated, and non-NULL for all call paths. Therefore the use of strcmp here is potentially out-of-bounds and the report is correct. Note: if there are documented and verifiable module-level or API-level guarantees (or initialization code) that both pointers are always non-NULL and point to NUL-terminated buffers of sufficient size, the call can be compliant; absent such guarantees the code should be changed (e.g. validate pointers, use length-limited comparisons with known buffer sizes, or otherwise enforce/verify the invariants)."
}