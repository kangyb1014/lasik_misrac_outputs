{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_condition_wait:\n```c\nint metal_condition_wait(struct metal_condition *cv,\n\t\t\t\t       metal_mutex_t *m)\n{\n\tuintptr_t tmpmptr = 0, mptr = (uintptr_t)m;\n\tint v = 0;\n\n\t/* Check if the mutex has been acquired */\n\tif (!cv || !m || !metal_mutex_is_acquired(m))\n\t\treturn -EINVAL;\n\n\tif (!atomic_compare_exchange_strong(&cv->mptr, &tmpmptr, mptr)) {\n\t\tif (tmpmptr != mptr)\n\t\t\treturn -EINVAL;\n\t}\n\n\tv = atomic_load(&cv->wakeups);\n\tatomic_fetch_add(&cv->waiters, 1);\n\n\t/* Release the mutex before sleeping. */\n\tmetal_mutex_release(m);\n\tsyscall(SYS_futex, &cv->wakeups, FUTEX_WAIT, v, NULL, NULL, 0);\n\tatomic_fetch_sub(&cv->waiters, 1);\n\t/* Acquire the mutex after it's waken up. */\n\tmetal_mutex_acquire(m);\n\n\treturn 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_condition_wait:\nstruct metal_condition {\n\tatomic_uintptr_t mptr; /**< mutex pointer.\n\t\t\t\t * The condition variable is attached to\n\t\t\t\t * this mutex when it is waiting.\n\t\t\t\t * It is also used to check correctness\n\t\t\t\t * in case there are multiple waiters.\n\t\t\t\t */\n\tatomic_int waiters;    /**< number of waiters. */\n\tatomic_int wakeups;    /**< number of wakeups. */\n}\n...\ntypedef struct {\n\tatomic_int v;\n} metal_mutex_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nsyscall(SYS_futex, &cv->wakeups, FUTEX_WAIT, v, NULL, NULL, 0);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The expression &cv->wakeups has type atomic_int * (pointer to a modifiable atomic_int). The futex syscall expects a pointer to user memory that may be modified by user threads/kernel APIs, so the pointee cannot/should not be const-qualified. Rule 8.13 requires using const for pointer targets only when the object is not intended to be modified; here wakeups is a mutable atomic object, so making it const is not appropriate."
}