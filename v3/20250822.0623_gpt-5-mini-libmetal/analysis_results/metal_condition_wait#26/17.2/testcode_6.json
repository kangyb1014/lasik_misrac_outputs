{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion: metal_irq_save_disable() calls metal_mutex_acquire(&irq_lock). If metal_mutex_acquire() (directly or indirectly) calls metal_irq_save_disable() to disable IRQs when acquiring a mutex, this produces an indirect recursive cycle: metal_irq_save_disable -> metal_mutex_acquire -> metal_irq_save_disable, violating Rule 17.2 (would lead to infinite recursion/stack overflow).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_condition_wait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/266.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_condition_wait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_condition_wait:\n```c\nint metal_condition_wait(struct metal_condition *cv,\n\t\t\t\t       metal_mutex_t *m)\n{\n\tuintptr_t tmpmptr = 0, mptr = (uintptr_t)m;\n\tint v = 0;\n\n\t/* Check if the mutex has been acquired */\n\tif (!cv || !m || !metal_mutex_is_acquired(m))\n\t\treturn -EINVAL;\n\n\tif (!atomic_compare_exchange_strong(&cv->mptr, &tmpmptr, mptr)) {\n\t\tif (tmpmptr != mptr)\n\t\t\treturn -EINVAL;\n\t}\n\n\tv = atomic_load(&cv->wakeups);\n\tatomic_fetch_add(&cv->waiters, 1);\n\n\t/* Release the mutex before sleeping. */\n\tmetal_mutex_release(m);\n\tsyscall(SYS_futex, &cv->wakeups, FUTEX_WAIT, v, NULL, NULL, 0);\n\tatomic_fetch_sub(&cv->waiters, 1);\n\t/* Acquire the mutex after it's waken up. */\n\tmetal_mutex_acquire(m);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_condition_wait code.\n",
  "test_code": "#include <stdint.h>\n#include <unistd.h>\n#include <sys/syscall.h>\n#include <sys/types.h>\n#include <stdatomic.h>\n#include <errno.h>\n\n/* Probe helpers: lightweight manual formatting and syscalls to avoid stdio locks\n * These helpers intentionally avoid calling any library functions that may\n * themselves acquire mutexes in order to not introduce additional recursion\n * or side effects.\n */\nstatic void probe_append_str(char *buf, int *pos, const char *s)\n{\n    while (*s) buf[(*pos)++] = *s++;\n}\n\nstatic void probe_append_uint(char *buf, int *pos, unsigned long x)\n{\n    char tmp[32];\n    int t = 0;\n    if (x == 0) {\n        tmp[t++] = '0';\n    } else {\n        while (x) {\n            tmp[t++] = (char)('0' + (x % 10));\n            x /= 10;\n        }\n    }\n    for (int i = t - 1; i >= 0; --i) buf[(*pos)++] = tmp[i];\n}\n\nstatic void probe_append_hex(char *buf, int *pos, unsigned long x)\n{\n    const char *hex = \"0123456789abcdef\";\n    char tmp[32];\n    int t = 0;\n    if (x == 0) {\n        tmp[t++] = '0';\n    } else {\n        while (x) {\n            tmp[t++] = hex[x & 0xF];\n            x >>= 4;\n        }\n    }\n    buf[(*pos)++] = '0';\n    buf[(*pos)++] = 'x';\n    for (int i = t - 1; i >= 0; --i) buf[(*pos)++] = tmp[i];\n}\n\nstatic void probe_write(const char *msg, size_t len)\n{\n    /* Open, write, close to append message to the log file. Use syscalls to\n     * avoid stdio locking which could interfere with mutex-related investigations.\n     */\n#ifdef SYS_openat\n    long fd = syscall(SYS_openat, AT_FDCWD, \"/tmp/logs/266.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n#else\n    long fd = syscall(SYS_open, \"/tmp/logs/266.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n#endif\n    if (fd >= 0) {\n        syscall(SYS_write, fd, msg, len);\n        syscall(SYS_close, fd);\n    }\n}\n\nstatic void probe_log_state(const char *stage,\n                            struct metal_condition *cv,\n                            metal_mutex_t *m,\n                            uintptr_t tmpmptr,\n                            uintptr_t mptr,\n                            int v,\n                            long futex_ret)\n{\n    char buf[512];\n    int pos = 0;\n    probe_append_str(buf, &pos, \"[metal_condition_wait] \");\n    probe_append_str(buf, &pos, stage);\n    probe_append_str(buf, &pos, \": cv=\");\n    probe_append_hex(buf, &pos, (unsigned long)cv);\n    probe_append_str(buf, &pos, \" m=\");\n    probe_append_hex(buf, &pos, (unsigned long)m);\n    probe_append_str(buf, &pos, \" mptr=\");\n    probe_append_uint(buf, &pos, (unsigned long)mptr);\n    probe_append_str(buf, &pos, \" tmpmptr=\");\n    probe_append_uint(buf, &pos, (unsigned long)tmpmptr);\n    probe_append_str(buf, &pos, \" wakeups=\");\n    probe_append_uint(buf, &pos, (unsigned long)v);\n    if (futex_ret != 0) {\n        probe_append_str(buf, &pos, \" futex_ret=\");\n        /* futex_ret can be negative, print sign then magnitude */\n        if (futex_ret < 0) {\n            buf[pos++] = '-';\n            probe_append_uint(buf, &pos, (unsigned long)(-futex_ret));\n        } else {\n            probe_append_uint(buf, &pos, (unsigned long)futex_ret);\n        }\n    }\n    buf[pos++] = '\\n';\n    probe_write(buf, (size_t)pos);\n}\n\nint metal_condition_wait(struct metal_condition *cv,\n                       metal_mutex_t *m)\n{\n    uintptr_t tmpmptr = 0, mptr = (uintptr_t)m;\n    int v = 0;\n\n    /* Log entry */\n    probe_log_state(\"ENTER\", cv, m, tmpmptr, mptr, -1, 0);\n\n    /* Check if the mutex has been acquired */\n    if (!cv || !m || !metal_mutex_is_acquired(m)) {\n        probe_log_state(\"EARLY_RETURN_INVALID_ARGS_OR_NOT_ACQUIRED\", cv, m, tmpmptr, mptr, -1, 0);\n        return -EINVAL;\n    }\n\n    if (!atomic_compare_exchange_strong(&cv->mptr, &tmpmptr, mptr)) {\n        /* Log state after failed compare-exchange (tmpmptr has been updated) */\n        probe_log_state(\"CMPXCHG_FAILED\", cv, m, tmpmptr, mptr, -1, 0);\n        if (tmpmptr != mptr) {\n            probe_log_state(\"EARLY_RETURN_MPTR_MISMATCH\", cv, m, tmpmptr, mptr, -1, 0);\n            return -EINVAL;\n        }\n    }\n\n    v = atomic_load(&cv->wakeups);\n    probe_log_state(\"BEFORE_INCREMENT_WAITERS\", cv, m, tmpmptr, mptr, v, 0);\n    atomic_fetch_add(&cv->waiters, 1);\n\n    /* Release the mutex before sleeping. */\n    probe_log_state(\"BEFORE_MUTEX_RELEASE\", cv, m, tmpmptr, mptr, v, 0);\n    metal_mutex_release(m);\n\n    /* Sleep on the futex. Capture return value for logging. */\n    long futex_ret = syscall(SYS_futex, &cv->wakeups, FUTEX_WAIT, v, NULL, NULL, 0);\n    probe_log_state(\"AFTER_FUTEX_WAIT\", cv, m, tmpmptr, mptr, v, futex_ret);\n\n    atomic_fetch_sub(&cv->waiters, 1);\n    /* Acquire the mutex after it's waken up. */\n    probe_log_state(\"BEFORE_MUTEX_ACQUIRE\", cv, m, tmpmptr, mptr, v, futex_ret);\n    metal_mutex_acquire(m);\n    probe_log_state(\"AFTER_MUTEX_ACQUIRE\", cv, m, tmpmptr, mptr, v, futex_ret);\n\n    probe_log_state(\"RETURN_OK\", cv, m, tmpmptr, mptr, v, futex_ret);\n    return 0;\n}\n"
}