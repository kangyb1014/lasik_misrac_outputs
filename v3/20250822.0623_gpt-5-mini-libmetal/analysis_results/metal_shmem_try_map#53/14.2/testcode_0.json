{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop initialization contains two side-effects: \"virt = mem, page = 0\". Rule 14.2 clause 1 requires the first clause to be empty or an expression that sets or defines/initializes the loop counter only. Initializing a non-loop object (virt) in the first clause violates this requirement. (Clauses 2\u20134 are satisfied: the condition uses the loop counter only and has no persistent side effects, the iteration expression only increments the loop counter, and the loop counter is not modified in the body.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/534.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/534.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/534.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                   struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    probe_log(\"metal_shmem_try_map: enter fd=%d requested_size=%zu aligned_size=%zu page_size=%zu pages=%zu\",\n              fd, size, size, (size_t)ps->page_size, pages);\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        metal_log(METAL_LOG_WARNING,\n              \"failed to mmap shmem %ld,0x%x - %s\\n\",\n              size, ps->mmap_flags, strerror(-error));\n        probe_log(\"metal_shmem_try_map: metal_map failed error=%d (%s)\", error, strerror(-error));\n        return error;\n    }\n\n    probe_log(\"metal_shmem_try_map: metal_map succeeded mem=%p size=%zu mmap_flags=0x%x\",\n              mem, size, ps->mmap_flags);\n\n    error = mlock(mem, size);\n    if (error) {\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n              strerror(errno));\n        probe_log(\"metal_shmem_try_map: mlock failed errno=%d (%s)\", errno, strerror(errno));\n    } else {\n        probe_log(\"metal_shmem_try_map: mlock succeeded mem=%p size=%zu\", mem, size);\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    if (!phys) {\n        metal_unmap(mem, size);\n        probe_log(\"metal_shmem_try_map: malloc(phys) failed size=%zu, cleaned up and returning -ENOMEM\", phys_size);\n        return -ENOMEM;\n    }\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        free(phys);\n        metal_unmap(mem, size);\n        probe_log(\"metal_shmem_try_map: malloc(io) failed, cleaned up and returning -ENOMEM\");\n        return -ENOMEM;\n    }\n\n    probe_log(\"metal_shmem_try_map: prepared phys=%p io=%p phys_size=%zu\", phys, io, phys_size);\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        metal_log(METAL_LOG_WARNING,\n        \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        probe_log(\"metal_shmem_try_map: no pagemap fd, using offset as pa, phys[0]=%llu\", (unsigned long long)phys[0]);\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n    } else {\n        probe_log(\"metal_shmem_try_map: pagemap fd=%d present, entering for-loop to populate phys entries\", _metal.pagemap_fd);\n        /* Note: the for loop initialization intentionally assigns both virt and page.\n         * We log the first observed values inside the loop body to capture the effect\n         * of that initialization (evidence of dual side-effects in the first clause).\n         */\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            /* Log the state at the start of each iteration. This captures the values\n             * assigned by the for-loop initialization (virt and page) on the first iteration\n             * and the progression on subsequent iterations. */\n            probe_log(\"metal_shmem_try_map: loop iteration start: page=%zu virt=%p offset=%zu (addr=%p)\",\n                      page, (void *)virt, offset, (void *)(virt + offset));\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            if (error < 0) {\n                phys[page] = METAL_BAD_OFFSET;\n                probe_log(\"metal_shmem_try_map: metal_virt2phys failed for page=%zu addr=%p error=%d -> phys[%zu]=METAL_BAD_OFFSET\",\n                          page, (void *)(virt + offset), error, page);\n            } else {\n                probe_log(\"metal_shmem_try_map: metal_virt2phys success page=%zu phys[%zu]=%llu\",\n                          page, page, (unsigned long long)phys[page]);\n            }\n        }\n        probe_log(\"metal_shmem_try_map: completed for-loop pages=%zu\", pages);\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n            &metal_shmem_io_ops);\n    }\n    *result = io;\n\n    probe_log(\"metal_shmem_try_map: exit success io=%p mem=%p pages=%zu\", io, mem, pages);\n\n    return 0;\n}\n"
}