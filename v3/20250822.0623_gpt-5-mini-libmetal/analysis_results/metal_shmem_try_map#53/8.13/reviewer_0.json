{
  "user_message": "An agent A claimed that the following metal_shmem_try_map code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_try_map.\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer parameter 'ps' is only read (ps->page_size, ps->mmap_flags, ps->page_shift) and is not modified by metal_shmem_try_map; it should be declared as const struct metal_page_size *ps. Therefore the function signature as given violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter metal_shmem_try_map: ps=0x55cb27ab5800 fd=6 in_size=1048576\nps->page_size=4096 ps->mmap_flags=0x0 ps->page_shift=12\nenter metal_shmem_try_map: ps=0x55cb27ab5800 fd=7 in_size=1048576\nps->page_size=4096 ps->mmap_flags=0x0 ps->page_shift=12\naligned size=1048576 pages=256 (page_size=4096)\naligned size=1048576 pages=256 (page_size=4096)\nenter metal_shmem_try_map: ps=0x55cb27ab5800 fd=8 in_size=1048576\nps->page_size=4096 ps->mmap_flags=0x0 ps->page_shift=12\nenter metal_shmem_try_map: ps=0x55cb27ab5800 fd=11 in_size=1048576\nps->page_size=4096 ps->mmap_flags=0x0 ps->page_shift=12\nmetal_map succeeded: mem=0x7f372c483000 size=1048576\nmetal_map succeeded: mem=0x7f372c383000 size=1048576\nenter metal_shmem_try_map: ps=0x55cb27ab5800 fd=9 in_size=1048576\nps->page_size=4096 ps->mmap_flags=0x0 ps->page_shift=12\naligned size=1048576 pages=256 (page_size=4096)\naligned size=1048576 pages=256 (page_size=4096)\naligned size=1048576 pages=256 (page_size=4096)\nenter metal_shmem_try_map: ps=0x55cb27ab5800 fd=12 in_size=1048576\nps->page_size=4096 ps->mmap_flags=0x0 ps->page_shift=12\naligned size=1048576 pages=256 (page_size=4096)\nmetal_map succeeded: mem=0x7f372c283000 size=1048576\npage=0 virt=0x7f372c283000 offset=0 phys[0]=0 error=0\nmetal_map succeeded: mem=0x7f372c183000 size=1048576\nmetal_map succeeded: mem=0x7f372c083000 size=1048576\npage=1 virt=0x7f372c284000 offset=4096 phys[1]=0 error=0\npage=0 virt=0x7f372c483000 offset=0 phys[0]=0 error=0\nmetal_map succeeded: mem=0x7f3716efe000 size=1048576\npage=0 virt=0x7f372c183000 offset=0 phys[0]=0 error=0\npage=2 virt=0x7f372c285000 offset=8192 phys[2]=0 error=0\npage=0 virt=0x7f372c383000 offset=0 phys[0]=0 error=0\nenter metal_shmem_try_map: ps=0x55cb27ab5800 fd=13 in_size=1048576\nps->page_size=4096 ps->mmap_flags=0x0 ps->page_shift=12\npage=1 virt=0x7f372c184000 offset=4096 phys[1]=0 error=0\npage=1 virt=0x7f372c484000 offset=4096 phys[1]=0 error=0\npage=3 virt=0x7f372c286000 offset=12288 phys[3]=0 error=0\naligned size=1048576 pages=256 (page_size=4096)\npage=0 virt=0x7f3716efe000 offset=0 phys[0]=0 error=0\npage=1 virt=0x7f372c384000 offset=4096 phys[1]=0 error=0\npage=2 virt=0x7f372c185000 offset=8192 phys[2]=0 error=0\npage=2 virt=0x7f372c485000 offset=8192 phys[2]=0 error=0\npage=4 virt=0x7f372c287000 offset=16384 phys[4]=0 error=0\nmetal_map succeeded: mem=0x7f37165fd000 size=1048576\npage=3 virt=0x7f372c186000 offset=12288 phys[3]=0 error=0\npage=2 virt=0x7f372c385000 offset=8192 phys[2]=0 error=0\npage=1 virt=0x7f3716eff000 offset=4096 phys[1]=0 error=0\npage=3 virt=0x7f372c486000 offset=12288 phys[3]=0 error=0\npage=5 virt=0x7f372c288000 offset=20480 phys[5]=0 error=0\npage=2 virt=0x7f3716f00000 offset=8192 phys[2]=0 error=0\npage=0 virt=0x7f372c083000 offset=0 phys[0]=0 error=0\npage=4 virt=0x7f372c187000 offset=16384 phys[4]=0 error=0\npage=3 virt=0x7f372c386000 offset=12288 phys[3]=0 error=0\npage=3 virt=0x7f3716f01000 offset=12288 phys[3]=0 error=0\npage=4 virt=0x7f372c487000 offset=16384 phys[4]=0 error=0\npage=6 virt=0x7f372c289000 offset=24576 phys[6]=0 error=0\nenter metal_shmem_try_map: ps=0x55cb27ab5800 fd=10 in_size=1048576\nps->page_size=4096 ps->mmap_flags=0x0 ps->page_shift=12\npage=5 virt=0x7f372c188000 offset=20480 phys[5]=0 error=0\npage=4 virt=0x7f372c387000 offset=16384 phys[4]=0 error=0\npage=1 virt=0x7f372c084000 offset=4096 phys[1]=0 error=0\npage=4 virt=0x7f3716f02000 offset=16384 phys[4]=0 error=0\naligned size=1048576 pages=256 (page_size=4096)\npage=5 virt=0x7f372c488000 offset=20480 phys[5]=0 error=0\npage=7 virt=0x7f372c28a000 offset=28672 phys[7]=0 error=0\npage=6 virt=0x7f372c189000 offset=24576 phys[6]=0 error=0\npage=5 virt=0x7f372c388000 offset=20480 phys[5]=0 error=0\npage=5 virt=0x7f3716f03000 offset=20480 phys[5]=0 error=0\npage=7 virt=0x7f372c18a000 offset=28672 phys[7]=0 error=0\npage=6 virt=0x7f372c489000 offset=24576 phys[6]=0 error=0\npage=6 virt=0x7f372c389000 offset=24576 phys[6]=0 error=0\npage=2 virt=0x7f372c085000 offset=8192 phys[2]=0 error=0\npage=8 virt=0x7f372c28b000 offset=32768 phys[8]=0 error=0\nenter metal_shmem_try_map: ps=0x55cb27ab5800 fd=15 in_size=1048576\nps->page_s\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_shmem_try_map:\nstruct metal_io_region {\n\tvoid\t\t\t*virt;      /**< base virtual address */\n\tconst metal_phys_addr_t\t*physmap;   /**< table of base physical address\n\t\t\t\t\t\t of each of the pages in the I/O\n\t\t\t\t\t\t region */\n\tsize_t\t\t\tsize;       /**< size of the I/O region */\n\tunsigned long\t\tpage_shift; /**< page shift of I/O region */\n\tmetal_phys_addr_t\tpage_mask;  /**< page mask of I/O region */\n\tunsigned int\t\tmem_flags;  /**< memory attribute of the\n\t\t\t\t\t\t I/O region */\n\tstruct metal_io_ops\tops;        /**< I/O region operations */\n}\n...\ntypedef unsigned long metal_phys_addr_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In metal_shmem_try_map the parameter ps is only read (ps->page_size, ps->mmap_flags, ps->page_shift) and never modified. Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so ps should be declared as const struct metal_page_size *ps. Changing the signature to use a pointer-to-const is compatible with calls (a non-const pointer may be passed to a const parameter) and enforces the read-only intent. No code in the function requires ps to be mutable, so the current declaration violates the rule."
}