{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang statement-expression extension ({ ... }) and the GNU variadic-macro comma-swallowing token pasting (##__VA_ARGS__) \u2014 both are documented compiler extensions (GCC/Clang). This therefore violates MISRA C 2023 Rule 1.2 (language extensions must not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/530.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "/* Probe helper functions to log control flow and state to /tmp/logs/530.txt */\nstatic void metal_probe_compiler_info(FILE *log)\n{\n    if (!log)\n        return;\n#ifdef __clang__\n    fprintf(log, \"Compiler: clang __clang_major__=%d __clang_minor__=%d __clang_patchlevel__=%d\\n\",\n            __clang_major__, __clang_minor__, __clang_patchlevel__);\n#endif\n#ifdef __GNUC__\n    fprintf(log, \"Compiler: gcc __GNUC__=%d __GNUC_MINOR__=%d __GNUC_PATCHLEVEL__=%d\\n\",\n            __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);\n#endif\n#ifdef __GNUG__\n    fprintf(log, \"__GNUG__ defined\\n\");\n#endif\n}\n\nstatic void metal_probe_log_entry(const char *stage, int fd, size_t req_size,\n                                  struct metal_page_size *ps, size_t pages,\n                                  void *mem, int error)\n{\n    FILE *log = fopen(\"/tmp/logs/530.txt\", \"a\");\n    if (!log)\n        return;\n\n    fprintf(log, \"[metal_shmem_try_map] stage=%s fd=%d req_size=%zu page_size=%zu pages=%zu mem=%p error=%d\\n\",\n            stage, fd, req_size, (ps ? ps->page_size : 0), pages, mem, error);\n    metal_probe_compiler_info(log);\n    fclose(log);\n}\n\nstatic void metal_probe_log_page(size_t page, size_t offset, uint8_t *virt_addr, metal_phys_addr_t phys)\n{\n    FILE *log = fopen(\"/tmp/logs/530.txt\", \"a\");\n    if (!log)\n        return;\n\n    fprintf(log, \"[metal_shmem_try_map] page=%zu offset=%zu virt=%p phys=0x%lx\\n\",\n            page, offset, (void *)virt_addr, (unsigned long)phys);\n    fclose(log);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                   struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    /* Log entry with initial parameters */\n    metal_probe_log_entry(\"entry\", fd, size, ps, 0, NULL, 0);\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    /* Log after alignment */\n    metal_probe_log_entry(\"after_align\", fd, size, ps, pages, NULL, 0);\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        metal_log(METAL_LOG_WARNING,\n              \"failed to mmap shmem %ld,0x%x - %s\\n\",\n              size, ps->mmap_flags, strerror(-error));\n\n        /* Log mmap failure */\n        metal_probe_log_entry(\"mmap_failed\", fd, size, ps, pages, NULL, error);\n        return error;\n    }\n\n    /* Log successful mmap */\n    metal_probe_log_entry(\"mmap_success\", fd, size, ps, pages, mem, 0);\n\n    error = mlock(mem, size);\n    if (error) {\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n              strerror(errno));\n        /* Log mlock failure (non-fatal) */\n        metal_probe_log_entry(\"mlock_failed\", fd, size, ps, pages, mem, errno);\n    } else {\n        metal_probe_log_entry(\"mlock_success\", fd, size, ps, pages, mem, 0);\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    if (!phys) {\n        metal_unmap(mem, size);\n        /* Log malloc phys failure */\n        metal_probe_log_entry(\"malloc_phys_failed\", fd, size, ps, pages, mem, -ENOMEM);\n        return -ENOMEM;\n    }\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        free(phys);\n        metal_unmap(mem, size);\n        /* Log malloc io failure */\n        metal_probe_log_entry(\"malloc_io_failed\", fd, size, ps, pages, mem, -ENOMEM);\n        return -ENOMEM;\n    }\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        metal_log(METAL_LOG_WARNING,\n        \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\n        /* Log pagemap unavailable path */\n        metal_probe_log_entry(\"pagemap_unavailable\", fd, size, ps, pages, mem, _metal.pagemap_fd);\n\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n    } else {\n        /* Log pagemap available path */\n        metal_probe_log_entry(\"pagemap_available\", fd, size, ps, pages, mem, _metal.pagemap_fd);\n\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            if (error < 0)\n                phys[page] = METAL_BAD_OFFSET;\n\n            /* Log each page translation result */\n            metal_probe_log_page(page, offset, virt + offset, phys[page]);\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n            &metal_shmem_io_ops);\n    }\n    *result = io;\n\n    /* Log final success and returned io pointer */\n    metal_probe_log_entry(\"exit_success\", fd, size, ps, pages, (void *)io, 0);\n\n    return 0;\n}\n"
}