{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC language extensions: it employs the GCC 'statement expression' extension \"({ ... })\" and the GNU token-pasting trick '##__VA_ARGS__' to swallow a comma for empty variadic args. Both are compiler-specific extensions (not standard C) and thus violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/530.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdlib.h>\n\n/* Probe logging helper: appends diagnostic messages to /tmp/logs/530.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/530.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                   struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    probe_log(\"ENTER: metal_shmem_try_map ps=%p fd=%d requested_size=%zu ps->page_size=%zu ps->mmap_flags=0x%x ps->page_shift=%d\",\n              (void *)ps, fd, size, (ps ? ps->page_size : 0), (ps ? ps->mmap_flags : 0), (ps ? ps->page_shift : 0));\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    probe_log(\"aligned size=%zu pages=%zu\", size, pages);\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    probe_log(\"metal_map returned error=%d mem=%p\", error, mem);\n    if (error) {\n        probe_log(\"failed to mmap shmem %zu,0x%x - %s\", size, ps->mmap_flags, strerror(-error));\n        metal_log(METAL_LOG_WARNING,\n              \"failed to mmap shmem %ld,0x%x - %s\\n\",\n              size, ps->mmap_flags, strerror(-error));\n        probe_log(\"EXIT: metal_shmem_try_map returning error=%d (map failed)\", error);\n        return error;\n    }\n\n    error = mlock(mem, size);\n    probe_log(\"mlock returned error=%d errno=%d (%s)\", error, errno, strerror(errno));\n    if (error) {\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n              strerror(errno));\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    probe_log(\"allocating phys array size=%zu (pages=%zu sizeof=*phys=%zu)\", phys_size, pages, sizeof(*phys));\n    phys = malloc(phys_size);\n    if (!phys) {\n        probe_log(\"malloc phys failed\");\n        metal_unmap(mem, size);\n        probe_log(\"EXIT: metal_shmem_try_map returning -ENOMEM (phys malloc)\");\n        return -ENOMEM;\n    }\n\n    io = malloc(sizeof(*io));\n    probe_log(\"allocated io=%p\", io);\n    if (!io) {\n        probe_log(\"malloc io failed, freeing phys and unmapping mem\");\n        free(phys);\n        metal_unmap(mem, size);\n        probe_log(\"EXIT: metal_shmem_try_map returning -ENOMEM (io malloc)\");\n        return -ENOMEM;\n    }\n\n    probe_log(\"_metal.pagemap_fd=%d\", _metal.pagemap_fd);\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        probe_log(\"pagemap not available, set phys[0]=0 and using offset as pa\");\n        metal_log(METAL_LOG_WARNING,\n        \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n        probe_log(\"metal_io_init called (pagemap unavailable) io=%p mem=%p phys=%p size=%zu page_shift=%d\",\n                  io, mem, (void *)phys, size, -1);\n    } else {\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            probe_log(\"virt2phys: page=%zu offset=%zu virt_addr=%p\", page, offset, (void *)(virt + offset));\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            probe_log(\"metal_virt2phys returned error=%d phys[%zu]=%llu\", error, page, (unsigned long long)phys[page]);\n\n            if (error < 0) {\n                phys[page] = METAL_BAD_OFFSET;\n                probe_log(\"virt2phys failed for page=%zu, set phys[%zu]=METAL_BAD_OFFSET\", page, page);\n            }\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n            &metal_shmem_io_ops);\n        probe_log(\"metal_io_init called (pagemap available) io=%p mem=%p phys=%p size=%zu page_shift=%d\",\n                  io, mem, (void *)phys, size, ps->page_shift);\n    }\n    *result = io;\n\n    probe_log(\"EXIT: metal_shmem_try_map success io=%p result_ptr=%p returning 0\", io, (void *)result);\n\n    return 0;\n}\n"
}