{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *arg' is not const-qualified. If the object pointed to by arg is intended to be read-only (i.e. metal_run and the child thread function do not modify *arg and any callees accept a const pointer), then this declaration violates MISRA C 2023 Rule 8.13. The correct form would be 'const void *arg' (and the const should be propagated to metal_run_noblock and the thread-entry prototype). If, however, the pointed-to object is legitimately modified by metal_run, the child thread, or other callees, then the non-const declaration is acceptable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_run:\n```c\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_run code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <pthread.h>\n#include <time.h>\n\n/* Minimal declarations so this snippet is independently compilable for testing. */\ntypedef void *(*metal_thread_t)(void *);\nint metal_run_noblock(int threads, metal_thread_t child, void *arg, pthread_t *tids, int *ts_created);\nvoid metal_finish_threads(int ts_created, void *tids);\n\n/* Probe: append logs describing control flow and key state to /tmp/logs/673.txt */\nstatic void metal_run_log_start(int threads, metal_thread_t child, void *arg)\n{\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    time_t t = time(NULL);\n    fprintf(f, \"\\n--- metal_run ENTRY (time=%ld) ---\\n\", (long)t);\n    fprintf(f, \"threads=%d\\n\", threads);\n    fprintf(f, \"child (fn ptr)=%p\\n\", (void *)(uintptr_t)child);\n    fprintf(f, \"arg (ptr)=%p\\n\", arg);\n    fclose(f);\n}\n\nstatic void metal_run_log_after_noblock(int threads, pthread_t *tids, int ts_created, int error)\n{\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    fprintf(f, \"metal_run_noblock returned error=%d, ts_created=%d\\n\", error, ts_created);\n    if (ts_created > 0) {\n        int i;\n        for (i = 0; i < ts_created && i < threads; ++i) {\n            /* Print pthread_t in a best-effort portable way via uintptr_t */\n            fprintf(f, \"  tids[%d]=%p\\n\", i, (void *)(uintptr_t)tids[i]);\n        }\n    }\n    fclose(f);\n}\n\nstatic void metal_run_log_before_finish(int ts_created, pthread_t *tids)\n{\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    fprintf(f, \"Calling metal_finish_threads with ts_created=%d, tids=%p\\n\", ts_created, (void *)tids);\n    fclose(f);\n}\n\nstatic void metal_run_log_exit(int error)\n{\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    fprintf(f, \"metal_run EXIT -> error=%d\\n\", error);\n    fprintf(f, \"--- end metal_run ---\\n\");\n    fclose(f);\n}\n\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n    pthread_t tids[threads];\n    int error, ts_created;\n\n    /* Log entry state */\n    metal_run_log_start(threads, child, arg);\n\n    error = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n    /* Log results from metal_run_noblock */\n    metal_run_log_after_noblock(threads, tids, ts_created, error);\n\n    /* Log just before joining/finishing threads */\n    metal_run_log_before_finish(ts_created, (void *)tids);\n\n    metal_finish_threads(ts_created, (void *)tids);\n\n    /* Final exit log */\n    metal_run_log_exit(error);\n\n    return error;\n}\n"
}