{
  "user_message": "An agent A claimed that the following metal_irq_allocate code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_irq_allocate.\n```c\nstatic int metal_irq_allocate(int irq_base, int irq_num)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\tint irq_tocheck = irq_base, irq_end_tocheck;\n\n\tif (irq_num == 0) {\n\t\treturn METAL_IRQ_ANY;\n\t}\n\tif (irq_tocheck == METAL_IRQ_ANY) {\n\t\tirq_tocheck = 0;\n\t}\n\tirq_end_tocheck = irq_tocheck + irq_num;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint cntr_irq_base, cntr_irq_end;\n\n\t\tcntr = metal_container_of(node,\n\t\t\t\t\t  struct metal_irq_controller, node);\n\t\tcntr_irq_base = cntr->irq_base;\n\t\tcntr_irq_end = cntr_irq_base + cntr->irq_num;\n\t\tif (irq_tocheck < cntr_irq_end &&\n\t\t    irq_end_tocheck > cntr_irq_base) {\n\t\t\tif (irq_base != METAL_IRQ_ANY) {\n\t\t\t\t/* IRQ has been allocated */\n\t\t\t\treturn METAL_IRQ_ANY;\n\t\t\t}\n\t\t\tirq_tocheck = cntr_irq_end;\n\t\t\tirq_end_tocheck = irq_tocheck + irq_num;\n\t\t}\n\t}\n\treturn irq_tocheck;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer variable 'cntr' is declared as 'struct metal_irq_controller *cntr' but in this function it is only used to read members (irq_base, irq_num). According to Rule 8.13, the pointer should be declared to point to a const-qualified type whenever possible (e.g. 'const struct metal_irq_controller *cntr'). The metal_container_of macro returns a non-const pointer, but assigning that to a pointer-to-const is allowed, so the current non-const declaration is a violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_irq_allocate CALL: irq_base=0, irq_num=1023\n  initial range: irq_tocheck=0, irq_end_tocheck=1023\nmetal_irq_allocate RETURN: 0\nmetal_irq_allocate CALL: irq_base=0, irq_num=1023\n  initial range: irq_tocheck=0, irq_end_tocheck=1023\nmetal_irq_allocate RETURN: 0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_irq_allocate:\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n...\nstruct metal_irq_controller {\n\tint irq_base; /**< Start of IRQ number of the range managed by\n\t\t \t* the IRQ controller\n\t\t \t*/\n\tint irq_num; /**< Number of IRQs managed by the IRQ controller */\n\tvoid *arg; /**< Argument to pass to interrupt controller function */\n\tmetal_irq_set_enable irq_set_enable; /**< function to set IRQ enable */\n\tmetal_cntr_irq_register irq_register; /**< function to register IRQ\n\t\t\t\t\t\t* handler\n\t\t\t\t\t\t*/\n\tstruct metal_list node; /**< list node */\n\tstruct metal_irq *irqs; /**< Array of IRQs managed by the controller */\n}\n...\nstatic METAL_DECLARE_LIST(irq_cntrs)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In metal_irq_allocate the local pointer cntr is only used to read members (cntr->irq_base, cntr->irq_num) and is never used to modify the pointed object or passed to functions that require a non-const pointer. According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so cntr should be declared as const struct metal_irq_controller *cntr. Assigning the result of metal_container_of (a non-const pointer) to a pointer-to-const is allowed, so changing the declaration to const would resolve the violation without additional casts. Thus agent A\u2019s claim is correct for the shown code."
}