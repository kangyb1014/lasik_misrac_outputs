{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of _metal_irq_set_enable:\n```c\nstatic void _metal_irq_set_enable(int irq, unsigned int state)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn;\n\t}\n\tcntr->irq_set_enable(cntr, irq, state);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code fragment. The constructs present are all standard C: 'static' storage-class specifier, standard return type 'void', built-in integer types 'int' and 'unsigned int', a pointer to a struct, the NULL macro, assignment, a null check, and calling a function pointer through a struct member (cntr->irq_set_enable(...)). There are no GCC/Clang-specific or other vendor-specific extensions such as __attribute__, __asm__, typeof, statement expressions ({ ... }), nested functions, anonymous structs/unions (if not supported by standard), or other compiler-documented extensions. Any undeclared functions or type definitions (e.g. metal_irq_get_controller, struct metal_irq_controller, or the prototype of irq_set_enable) are header/namespace issues, not language extensions, so they do not trigger Rule 1.2. Therefore no fragments need investigation for use of language extensions."
}