{
  "user_message": "An agent A claimed that the following metal_linux_irq_set_enable code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of metal_linux_irq_set_enable.\n```c\nstatic void metal_linux_irq_set_enable(struct metal_irq_controller *irq_cntr,\n\t\t\t\t       int irq, unsigned int state)\n{\n\tint offset, ret;\n\n\tif (irq < irq_cntr->irq_base ||\n\t    irq >= irq_cntr->irq_base + irq_cntr->irq_num) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s: invalid irq %d\\n\",\n\t\t\t  __func__, irq);\n\t\treturn;\n\t}\n\toffset = irq - linux_irq_cntr.irq_base;\n\tmetal_mutex_acquire(&irq_lock);\n\tif (state == METAL_IRQ_ENABLE)\n\t\tmetal_bitmap_set_bit(irqs_enabled, offset);\n\telse\n\t\tmetal_bitmap_clear_bit(irqs_enabled, offset);\n\tmetal_mutex_release(&irq_lock);\n\t/* Notify IRQ thread that IRQ state has changed */\n\tret = metal_linux_irq_notify();\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to notify set %d enable\\n\",\n\t\t\t  __func__, irq);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro uses GCC/Clang language extensions: the statement-expression construct ({ ... }) and the GNU token-pasting idiom '##__VA_ARGS__' to elide the comma for empty variadic arguments. Both are compiler-specific extensions (documented as GCC extensions) and therefore violate MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function metal_linux_irq_set_enable:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n...\nstatic unsigned long\nirqs_enabled[metal_div_round_up(MAX_IRQS, METAL_BITS_PER_ULONG)]\n...\nstatic METAL_IRQ_CONTROLLER_DECLARE(linux_irq_cntr,\n\t\t\t\t    0, MAX_IRQS,\n\t\t\t\t    NULL,\n\t\t\t\t    metal_linux_irq_set_enable, NULL,\n\t\t\t\t    irqs)\n...\nstruct metal_irq_controller {\n\tint irq_base; /**< Start of IRQ number of the range managed by\n\t\t \t* the IRQ controller\n\t\t \t*/\n\tint irq_num; /**< Number of IRQs managed by the IRQ controller */\n\tvoid *arg; /**< Argument to pass to interrupt controller function */\n\tmetal_irq_set_enable irq_set_enable; /**< function to set IRQ enable */\n\tmetal_cntr_irq_register irq_register; /**< function to register IRQ\n\t\t\t\t\t\t* handler\n\t\t\t\t\t\t*/\n\tstruct metal_list node; /**< list node */\n\tstruct metal_irq *irqs; /**< Array of IRQs managed by the controller */\n}\n...\nstatic metal_mutex_t irq_lock\n...\n#define METAL_IRQ_ENABLE 1U\n...\nstatic int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t}\n\treturn ret;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The violation is not in the body of metal_linux_irq_set_enable itself but in the metal_log macro it calls. The provided macro definition uses two compiler-specific GNU extensions: the statement-expression construct ({ ... }) and the GNU token-pasting form '##__VA_ARGS__' to swallow the comma for empty variadic arguments. Both are documented GCC/Clang extensions (not standard C) and therefore fall under MISRA C:2023 Rule 1.2 (language extensions should not be used) unless an explicit deviation/justification is recorded. Consequently the report of a Rule 1.2 violation is correct."
}