{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf _metal.tmp_path is declared as a non-const pointer (e.g. 'char *tmp_path'), then assigning the local 'const char *tmp_path' to it discards the const qualifier. This allows a pointer to potentially const data (such as the literal \"/tmp\") to be stored in a non-const pointer, violating MISRA C 2023 Rule 8.13; the fix is to declare _metal.tmp_path as 'const char *'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/93.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init:\n```c\nint metal_init(const struct metal_init_params *params)\n{\n\tint error = 0;\n\n\tif (_metal.common.ref_count++ != 0)\n\t\treturn 0;\n\n\tmemset(&_metal, 0, sizeof(_metal));\n\n\t_metal.common.log_handler   = params->log_handler;\n\t_metal.common.log_level     = params->log_level;\n\n\tmetal_list_init(&_metal.common.bus_list);\n\tmetal_list_init(&_metal.common.generic_shmem_list);\n\tmetal_list_init(&_metal.common.generic_device_list);\n\n\terror = metal_sys_init(params);\n\tif (error)\n\t\treturn error;\n\n\t++_metal.common.ref_count;\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/93.txt */\nstatic void metal_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/93.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\nint metal_init(const struct metal_init_params *params)\n{\n    int error = 0;\n\n    /* Log entry and key state before any modification. Capture the original\n       ref_count and the current value of _metal.tmp_path (if present). */\n    metal_log_probe(\"ENTER metal_init: params=%p, _metal.common.ref_count(before)=%d, _metal.tmp_path=%p\",\n                    (const void *)params,\n                    _metal.common.ref_count,\n                    (const void *)_metal.tmp_path);\n\n    if (_metal.common.ref_count++ != 0) {\n        metal_log_probe(\"Early exit: ref_count was non-zero. ref_count(after increment)=%d\",\n                        _metal.common.ref_count);\n        return 0;\n    }\n\n    metal_log_probe(\"Clearing _metal with memset. _metal.common.ref_count(before_memset)=%d\",\n                    _metal.common.ref_count);\n\n    memset(&_metal, 0, sizeof(_metal));\n\n    /* After memset, fields (including tmp_path) should be zeroed. Log this state. */\n    metal_log_probe(\"After memset: _metal.common.ref_count=%d, _metal.tmp_path=%p\",\n                    _metal.common.ref_count,\n                    (const void *)_metal.tmp_path);\n\n    /* Preserve original logic: assign handlers and levels from params. Log the assignment. */\n    _metal.common.log_handler   = params->log_handler;\n    _metal.common.log_level     = params->log_level;\n\n    metal_log_probe(\"Assigned _metal.common.log_handler=%p, _metal.common.log_level=%d\",\n                    (const void *)_metal.common.log_handler,\n                    _metal.common.log_level);\n\n    /* Log list initialization calls so control flow is visible. */\n    metal_log_probe(\"Calling metal_list_init(&_metal.common.bus_list)\");\n    metal_list_init(&_metal.common.bus_list);\n    metal_log_probe(\"Calling metal_list_init(&_metal.common.generic_shmem_list)\");\n    metal_list_init(&_metal.common.generic_shmem_list);\n    metal_log_probe(\"Calling metal_list_init(&_metal.common.generic_device_list)\");\n    metal_list_init(&_metal.common.generic_device_list);\n\n    /* Log just before calling metal_sys_init and capture its return for tracing. */\n    metal_log_probe(\"Calling metal_sys_init(params=%p)\", (const void *)params);\n    error = metal_sys_init(params);\n    metal_log_probe(\"metal_sys_init returned %d\", error);\n    if (error) {\n        metal_log_probe(\"Returning error %d from metal_init\", error);\n        return error;\n    }\n\n    ++_metal.common.ref_count;\n\n    /* Final state: log the ref_count and tmp_path. If a const-qualified pointer\n       (e.g. pointing to a literal like \"/tmp\") was assigned to a non-const\n       destination, logs here will show the pointer value and the pointed-to\n       string which can be used as evidence for the scenario. */\n    metal_log_probe(\"EXIT metal_init: ref_count=%d, _metal.tmp_path=%p, _metal.tmp_path_str=%s\",\n                    _metal.common.ref_count,\n                    (const void *)_metal.tmp_path,\n                    (_metal.tmp_path != NULL) ? _metal.tmp_path : \"(null)\");\n\n    return error;\n}\n"
}