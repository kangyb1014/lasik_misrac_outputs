{
  "user_message": "An agent A claimed that the following metal_uio_read_map_attr code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_uio_read_map_attr.\n```c\nstatic int metal_uio_read_map_attr(struct linux_device *ldev,\n\t\t\t\t   unsigned int index,\n\t\t\t\t   const char *name,\n\t\t\t\t   unsigned long *value)\n{\n\tconst char *cls = ldev->cls_path;\n\tstruct sysfs_attribute *attr;\n\tchar path[SYSFS_PATH_MAX];\n\tint result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/maps/map%u/%s\", cls, index, name);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tattr = sysfs_open_attribute(path);\n\tif (!attr || sysfs_read_attribute(attr) != 0) {\n\t\tsysfs_close_attribute(attr);\n\t\treturn -errno;\n\t}\n\n\t*value = strtoul(attr->value, NULL, 0);\n\n\tsysfs_close_attribute(attr);\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'ldev' is not const-qualified but only read inside the function (its cls_path is read to build the path). According to MISRA C 2023 Rule 8.13 it should be declared as 'const struct linux_device *ldev'. Note: 'name' is already const and 'value' must remain non-const because it is an output parameter.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In the shown function ldev is only read (its cls_path member is read into a const char * and never modified), so the pointer parameter could and should be declared as pointing to a const-qualified type (e.g. const struct linux_device *ldev). That is exactly what MISRA C 2023 Rule 8.13 requires: pointers should point to const-qualified types whenever possible. The only possible justification for keeping it non-const would be an external API/ABI requirement or other unavoidable compatibility constraint; absent such a justification the report is valid."
}