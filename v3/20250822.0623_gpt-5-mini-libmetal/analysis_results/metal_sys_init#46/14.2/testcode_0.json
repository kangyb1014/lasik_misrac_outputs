{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for_each_linux_bus(lbus) macro likely expands to a for loop that iterates a global linked list (e.g. using a list head/next pointers) and thus its condition/increment clauses depend on list pointers or the list head. The body calls metal_linux_probe_bus(lbus), which can call metal_linux_bus_close(&lbus->bus) and remove/modify entries in that list. Therefore the second/third clauses of the expanded for loop would be using objects (the list head/next pointers) that are modified by the loop body (including via called functions), violating MISRA C 2023 Rule 14.2 (clauses 2 and/or 3).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/464.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "int metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n    /* Logging probe file. Open once and reuse. */\n    FILE *probe_log = fopen(\"/tmp/logs/464.txt\", \"a\");\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] entry: pid=%d time=%ld\\n\", (int)getpid(), (long)time(NULL));\n        fflush(probe_log);\n    }\n\n    /* Find the temporary directory location. */\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path)\n        tmp_path = \"/tmp\";\n    _metal.tmp_path = tmp_path;\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] tmp_path=%s\\n\", tmp_path);\n        fflush(probe_log);\n    }\n\n    /* Initialize the pseudo-random number generator. */\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    if (!urandom) {\n        if (probe_log) {\n            fprintf(probe_log, \"[metal_sys_init] fopen(/dev/urandom) failed: errno=%d (%s)\\n\", errno, strerror(errno));\n            fflush(probe_log);\n        }\n        metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\", strerror(errno));\n        result = -errno;\n        if (probe_log) {\n            fprintf(probe_log, \"[metal_sys_init] exit (urandom open failed) result=%d\\n\", result);\n            fclose(probe_log);\n        }\n        return result;\n    }\n    if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n        if (probe_log) {\n            fprintf(probe_log, \"[metal_sys_init] fread(/dev/urandom) failed or returned 0\\n\");\n            fflush(probe_log);\n        }\n    }\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] seed read=%u\\n\", seed);\n        fflush(probe_log);\n    }\n    fclose(urandom);\n    srand(seed);\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] srand called with seed=%u\\n\", seed);\n        fflush(probe_log);\n    }\n\n    result = metal_init_page_sizes();\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] metal_init_page_sizes() returned %d\\n\", result);\n        fflush(probe_log);\n    }\n    if (result < 0) {\n        if (probe_log) {\n            fprintf(probe_log, \"[metal_sys_init] exit (page sizes init failed) result=%d\\n\", result);\n            fclose(probe_log);\n        }\n        return result;\n    }\n\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] calling metal_linux_bus_init()\\n\");\n        fflush(probe_log);\n    }\n    result = metal_linux_bus_init();\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] metal_linux_bus_init() returned %d\\n\", result);\n        fflush(probe_log);\n    }\n    if (result < 0) {\n        if (probe_log) {\n            fprintf(probe_log, \"[metal_sys_init] exit (linux bus init failed) result=%d\\n\", result);\n            fclose(probe_log);\n        }\n        return result;\n    }\n\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] opening /proc/self/pagemap\\n\");\n        fflush(probe_log);\n    }\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    if (result < 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\", strerror(errno));\n        if (probe_log) {\n            fprintf(probe_log, \"[metal_sys_init] open(/proc/self/pagemap) failed: errno=%d (%s)\\n\", errno, strerror(errno));\n            fflush(probe_log);\n        }\n    }\n    _metal.pagemap_fd = result;\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] pagemap_fd=%d\\n\", _metal.pagemap_fd);\n        fflush(probe_log);\n    }\n\n    metal_unused(params);\n\n    /* Initialize IRQ handling */\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] calling metal_linux_irq_init()\\n\");\n        fflush(probe_log);\n    }\n    metal_linux_irq_init();\n    if (probe_log) {\n        fprintf(probe_log, \"[metal_sys_init] returned from metal_linux_irq_init()\\n\");\n        fprintf(probe_log, \"[metal_sys_init] exit (success) result=0\\n\");\n        fclose(probe_log);\n    }\n    return 0;\n}\n"
}