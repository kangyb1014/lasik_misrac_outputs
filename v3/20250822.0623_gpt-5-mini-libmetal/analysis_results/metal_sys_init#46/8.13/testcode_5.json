{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment stores a const-qualified pointer (tmp_path has type 'const char *') into _metal.tmp_path. If _metal.tmp_path is declared as 'char *' (non-const), this discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. Correct action: declare _metal.tmp_path as 'const char *' (or ensure the source is non-const), so pointers to string data are const-qualified where possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/463.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "int metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\tFILE *logf = NULL;\n\n\t/* Open probe log early so we can record control flow and state. */\n\tlogf = fopen(\"/tmp/logs/463.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: entered\\n\");\n\t\tfflush(logf);\n\t}\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"TMPDIR not set, using default '/tmp'\\n\");\n\t\t\tfflush(logf);\n\t\t}\n\t\ttmp_path = \"/tmp\";\n\t} else {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"TMPDIR from getenv: '%s' (ptr=%p)\\n\", tmp_path, (void *)tmp_path);\n\t\t\tfflush(logf);\n\t\t}\n\t}\n\n\t/* Log _metal.tmp_path address and current stored value before assignment. */\n\tif (logf) {\n\t\t/* Print the address of _metal.tmp_path and its current value (if any). */\n\t\tfprintf(logf, \"_metal.tmp_path address: %p, current value: %p\\n\",\n\t\t\t(void *)&_metal.tmp_path,\n\t\t\t(void *)_metal.tmp_path);\n\t\tfprintf(logf, \"About to assign tmp_path (ptr=%p, val='%s') to _metal.tmp_path\\n\",\n\t\t\t(void *)tmp_path, tmp_path);\n\t\tfflush(logf);\n\t}\n\n\t/* Assignment that may discard const qualifier depending on _metal.tmp_path declaration. */\n\t_metal.tmp_path = tmp_path;\n\n\tif (logf) {\n\t\tfprintf(logf, \"Assigned _metal.tmp_path = %p (string='%s')\\n\",\n\t\t\t(void *)_metal.tmp_path, _metal.tmp_path ? _metal.tmp_path : \"(null)\");\n\t\tfflush(logf);\n\t}\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"failed to open /dev/urandom: errno=%d (%s)\\n\", errno, strerror(errno));\n\t\t\tfflush(logf);\n\t\t}\n\t\t/* Keep existing behavior: log via metal_log and return. */\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\tif (logf) fclose(logf);\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"fread from /dev/urandom failed or returned 0\\n\");\n\t\t\tfflush(logf);\n\t\t}\n\t} else {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"seed read from /dev/urandom: 0x%08x\\n\", seed);\n\t\t\tfflush(logf);\n\t\t}\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (logf) {\n\t\tfprintf(logf, \"metal_init_page_sizes returned %d\\n\", result);\n\t\tfflush(logf);\n\t}\n\tif (result < 0) {\n\t\tif (logf) fclose(logf);\n\t\treturn result;\n\t}\n\n\tresult = metal_linux_bus_init();\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_bus_init returned %d\\n\", result);\n\t\tfflush(logf);\n\t}\n\tif (result < 0) {\n\t\tif (logf) fclose(logf);\n\t\treturn result;\n\t}\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"Failed to open /proc/self/pagemap: errno=%d (%s)\\n\", errno, strerror(errno));\n\t\t\tfflush(logf);\n\t\t}\n\t}\n\t_metal.pagemap_fd = result;\n\tif (logf) {\n\t\tfprintf(logf, \"_metal.pagemap_fd = %d\\n\", _metal.pagemap_fd);\n\t\tfflush(logf);\n\t}\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: completed successfully\\n\");\n\t\tfflush(logf);\n\t\tfclose(logf);\n\t}\n\treturn 0;\n}\n"
}