{
  "user_message": "An agent A claimed that the following metal_sys_init code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_sys_init.\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro metal_unused(x) expands to (x) = (x);. In metal_sys_init the call metal_unused(params) expands to params = params; which performs an assignment to the function parameter 'params' (a pointer parameter). This writes to the parameter (the pointer itself), which is forbidden by MISRA C 2023 Rule 17.8 (pointer parameters shall not be modified).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[metal_sys_init] entry\n[metal_sys_init] params (pointer value) = 0x7ffce9e64db0\n[metal_sys_init] &params (address of param variable) = 0x7ffce9e64ce8\n[metal_sys_init] BEFORE metal_unused(params) - params=0x7ffce9e64db0, &params=0x7ffce9e64ce8\n[metal_sys_init] Note: macro metal_unused(x) may expand to an assignment (x) = (x);\n[metal_sys_init] AFTER metal_unused(params) - params=0x7ffce9e64db0, &params=0x7ffce9e64ce8\n[metal_sys_init] Exiting metal_sys_init (continuing IRQ init)\n[metal_sys_init] entry\n[metal_sys_init] params (pointer value) = 0x7ffff492ca60\n[metal_sys_init] &params (address of param variable) = 0x7ffff492c998\n[metal_sys_init] BEFORE metal_unused(params) - params=0x7ffff492ca60, &params=0x7ffff492c998\n[metal_sys_init] Note: macro metal_unused(x) may expand to an assignment (x) = (x);\n[metal_sys_init] AFTER metal_unused(params) - params=0x7ffff492ca60, &params=0x7ffff492c998\n[metal_sys_init] Exiting metal_sys_init (continuing IRQ init)\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_sys_init:\n#define metal_unused(x) do{(x)=(x);}while(0)\n...\nstruct metal_init_params {\n\n\t/** log message handler (defaults to stderr). */\n\tmetal_log_handler\t\tlog_handler;\n\n\t/** default log message level (defaults to emergency). */\n\tenum metal_log_level\t\tlog_level;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. metal_unused(params) expands to (params) = (params); which performs an assignment to the parameter variable params. Even though the value written equals the original value, this is still an assignment (a write) to the function parameter. MISRA C 2023 Rule 17.8 forbids modifying a function parameter; for pointer parameters the pointer itself shall not be modified (only the object it points to may be). Because params is a pointer parameter and the macro assigns to params, the code violates Rule 17.8. (Use (void)(params) or a similar no-op cast to silence unused-parameter warnings without assigning to the parameter.)"
}