{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_unused(x) expands to (x) = (x);. In metal_sys_init the call metal_unused(params) expands to params = params; which performs an assignment to the function parameter 'params' (a pointer parameter). This writes to the parameter (the pointer itself), which is forbidden by MISRA C 2023 Rule 17.8 (pointer parameters shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/467.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "int metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\tFILE *probe = NULL;\n\n\t/* Probe: try to open the log file for append. If the logs directory\n\t * doesn't exist, fall back to /tmp/467.txt so we still get evidence.\n\t */\n\tprobe = fopen(\"/tmp/logs/467.txt\", \"a\");\n\tif (!probe)\n\t\tprobe = fopen(\"/tmp/467.txt\", \"a\");\n\tif (probe) {\n\t\t/* Log entry and initial parameter state */\n\t\tfprintf(probe, \"[metal_sys_init] entry\\n\");\n\t\tfprintf(probe, \"[metal_sys_init] params (pointer value) = %p\\n\", (void *)params);\n\t\tfprintf(probe, \"[metal_sys_init] &params (address of param variable) = %p\\n\", (void *)&params);\n\t\tfflush(probe);\n\t}\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\tif (probe) {\n\t\t\tfprintf(probe, \"[metal_sys_init] failed to open /dev/urandom: %s\\n\", strerror(errno));\n\t\t\tfflush(probe);\n\t\t}\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t\tif (probe) {\n\t\t\tfprintf(probe, \"[metal_sys_init] fread /dev/urandom failed or returned 0 bytes\\n\");\n\t\t\tfflush(probe);\n\t\t}\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t\tif (probe) {\n\t\t\tfprintf(probe, \"[metal_sys_init] Failed to open /proc/self/pagemap: %s\\n\", strerror(errno));\n\t\t\tfflush(probe);\n\t\t}\n\t}\n\t_metal.pagemap_fd = result;\n\n\t/*\n\t * Probe: record state immediately before calling metal_unused.\n\t * The reported violation is that metal_unused(params) expands to\n\t * an assignment of the form (params) = (params); which writes to\n\t * the function parameter 'params' (the pointer itself). We log\n\t * the pointer value and the address of the parameter variable so\n\t * that the control path and state around the assignment can be\n\t * inspected.\n\t */\n\tif (probe) {\n\t\tfprintf(probe, \"[metal_sys_init] BEFORE metal_unused(params) - params=%p, &params=%p\\n\",\n\t\t\t(void *)params, (void *)&params);\n\t\tfprintf(probe, \"[metal_sys_init] Note: macro metal_unused(x) may expand to an assignment (x) = (x);\\n\");\n\t\tfflush(probe);\n\t}\n\n\tmetal_unused(params);\n\n\tif (probe) {\n\t\t/* Log after the macro invocation so tools/agents can compare\n\t\t * the recorded states. We don't mutate 'params' here; we only\n\t\t * read it to produce evidence for the reported assignment. */\n\t\tfprintf(probe, \"[metal_sys_init] AFTER metal_unused(params) - params=%p, &params=%p\\n\",\n\t\t\t(void *)params, (void *)&params);\n\t\tfprintf(probe, \"[metal_sys_init] Exiting metal_sys_init (continuing IRQ init)\\n\");\n\t\tfflush(probe);\n\t\tfclose(probe);\n\t}\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n"
}