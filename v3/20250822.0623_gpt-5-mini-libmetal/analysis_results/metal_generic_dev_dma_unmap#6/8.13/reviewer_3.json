{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_unmap code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_unmap.\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function takes a modifiable pointer parameter 'struct metal_sg *sg' (and also 'struct metal_bus *bus' and 'struct metal_device *device') but does not modify the pointed-to objects: it only reads sg[i].virt and sg[i].len and the bus/device parameters are unused. According to MISRA C 2023 Rule 8.13, these should be const-qualified (e.g. 'const struct metal_sg *sg', and possibly 'const struct metal_bus *bus' / 'const struct metal_device *device') when mutation is not required.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct in the general case. In metal_generic_dev_dma_unmap the pointer parameter sg is only read (sg[i].virt and sg[i].len) and bus/device are unused; none of these parameters are modified. MISRA C:2023 Rule 8.13 states that a pointer should point to a const-qualified type whenever possible, so sg should be declared as const struct metal_sg *sg (and bus/device could be const pointers or removed if not needed) unless there is an external constraint preventing that change (for example the function must match a non-const API or callback prototype). If no such external constraint exists, the code as written does violate Rule 8.13. If the signature must match an externally mandated prototype, that is a justified exception and the violation would be acceptable with documented rationale."
}