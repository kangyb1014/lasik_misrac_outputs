{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_unmap code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_unmap.\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct metal_bus *bus' is not const-qualified even though it is not modified (it is cast to void in the function body). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (e.g. 'const struct metal_bus *bus'). The same applies to the unused 'device' parameter and the 'sg' parameter which is only read \u2014 they could be 'const' as well.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 R8.13 says pointers should be to const-qualified types when possible. In the snippet, bus and device are unused (cast to void) and sg is only read, so\u2014if this were a freestanding function whose signature you control\u2014they could logically be declared as pointers to const. However, in practice metal_generic_dev_dma_unmap almost certainly implements a predefined callback/interface whose prototype requires non-const pointer parameters. MISRA rule 8.13 is not intended to force changes that would break required API compatibility; having non-const parameters to match an external interface is an acceptable justification. Therefore, Agent A\u2019s report is not necessarily correct as presented: without evidence that the function signature can be changed, this is not a definite MISRA 8.13 violation. If you do control the prototype and there is no external constraint, then converting these parameters to point-to-const would satisfy R8.13."
}