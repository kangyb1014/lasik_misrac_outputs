{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: strlen(bus->name) is called after only a null-pointer check. If bus->name points to a non\u2011terminated character array (for example: char name_buf[3] = {'a','b','c'}; bus.name = name_buf; metal_bus_register(&bus);), strlen will read past the end of the object searching for a '\\0', causing accesses beyond the bounds of the object and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/39.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    FILE *logf = NULL;\n    int preserve_errno = errno;\n\n    /* Try to ensure the directory exists for logging. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    logf = fopen(\"/tmp/logs/39.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"metal_bus_register: entry\\n\");\n        fprintf(logf, \"  bus ptr=%p\\n\", (const void *)bus);\n        fprintf(logf, \"  bus->name ptr=%p\\n\", (const void *)(bus ? (const void *)bus->name : (const void *)NULL));\n        fflush(logf);\n    }\n\n    /* Preserve original checks and order; expand to allow logging at each exit. */\n    if (!bus) {\n        if (logf) {\n            fprintf(logf, \"  check: bus is NULL -> return -EINVAL\\n\");\n            fclose(logf);\n        }\n        errno = preserve_errno;\n        return -EINVAL;\n    }\n\n    if (!bus->name) {\n        if (logf) {\n            fprintf(logf, \"  check: bus->name is NULL -> return -EINVAL\\n\");\n            fclose(logf);\n        }\n        errno = preserve_errno;\n        return -EINVAL;\n    }\n\n    /* Log that strlen is about to be called. This mirrors the original behavior\n       (calling strlen here is the point of the reported violation scenario). */\n    if (logf) {\n        fprintf(logf, \"  check: calling strlen(bus->name) (name ptr=%p)\\n\", (const void *)bus->name);\n        fflush(logf);\n    }\n\n    if (!strlen(bus->name)) {\n        if (logf) {\n            fprintf(logf, \"  check: strlen(bus->name) == 0 -> return -EINVAL\\n\");\n            fclose(logf);\n        }\n        errno = preserve_errno;\n        return -EINVAL;\n    }\n\n    if (logf) {\n        fprintf(logf, \"  passed null/empty checks, calling metal_bus_find(...)\\n\");\n        fflush(logf);\n    }\n\n    if (metal_bus_find(bus->name, NULL) == 0) {\n        if (logf) {\n            fprintf(logf, \"  metal_bus_find: bus exists -> return -EEXIST\\n\");\n            fclose(logf);\n        }\n        errno = preserve_errno;\n        return -EEXIST;\n    }\n\n    /* Continue original registration logic. */\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    if (logf) {\n        fprintf(logf, \"  registration complete for name ptr=%p\\n\", (const void *)bus->name);\n        fclose(logf);\n    }\n\n    errno = preserve_errno;\n    return 0;\n}\n"
}