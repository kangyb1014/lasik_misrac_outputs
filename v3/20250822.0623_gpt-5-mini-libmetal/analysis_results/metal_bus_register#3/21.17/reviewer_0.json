{
  "user_message": "An agent A claimed that the following metal_bus_register code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_register.\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to strcmp(bus->name, name) is evaluated unconditionally before the && result check. If name (the search key) or an existing list entry bus->name is NULL or not a NUL-terminated string, strcmp will dereference beyond the bounds of the object (e.g. caller calls metal_bus_find(NULL, &res) or a list node has bus->name == NULL). This can cause out-of-bounds accesses, so the code violates Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_bus_register: entry bus=0x7fcad3fa8b60\nmetal_bus_register: bus->name=0x7fcad3fa2990\nmetal_bus_register: strlen(bus->name) = 8\nmetal_bus_register: name (prefix 8): platform\nmetal_bus_register: calling metal_bus_find(name) with name='platform'\nmetal_bus_register: metal_bus_find returned -2\nmetal_bus_register: registration succeeded for name='platform' -> return 0\nmetal_bus_register: entry bus=0x7fcad3fa9dc8\nmetal_bus_register: bus->name=0x7fcad3fa29bd\nmetal_bus_register: strlen(bus->name) = 3\nmetal_bus_register: name (prefix 3): pci\nmetal_bus_register: calling metal_bus_find(name) with name='pci'\nmetal_bus_register: metal_bus_find returned -2\nmetal_bus_register: registration succeeded for name='pci' -> return 0\nmetal_bus_register: entry bus=0x55b8e18a8260\nmetal_bus_register: bus->name=0x55b8e18a0220\nmetal_bus_register: strlen(bus->name) = 8\nmetal_bus_register: name (prefix 8): platform\nmetal_bus_register: calling metal_bus_find(name) with name='platform'\nmetal_bus_register: metal_bus_find returned -2\nmetal_bus_register: registration succeeded for name='platform' -> return 0\nmetal_bus_register: entry bus=0x55b8e18a94c8\nmetal_bus_register: bus->name=0x55b8e18a024d\nmetal_bus_register: strlen(bus->name) = 3\nmetal_bus_register: name (prefix 3): pci\nmetal_bus_register: calling metal_bus_find(name) with name='pci'\nmetal_bus_register: metal_bus_find returned -2\nmetal_bus_register: registration succeeded for name='pci' -> return 0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_register:\nstatic int metal_linux_register_bus(struct linux_bus *lbus)\n{\n\tlbus->bus.name = lbus->bus_name;\n\tlbus->bus.ops  = metal_linux_bus_ops;\n\treturn metal_bus_register(&lbus->bus);\n}\n...\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n...\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as applied to metal_bus_register. metal_bus_register checks !bus, !bus->name and !strlen(bus->name) before calling metal_bus_find(bus->name, NULL), so it passes a non-NULL, NUL-terminated name to metal_bus_find. The strlen call itself is guarded by a previous !bus->name check, so it does not invoke a string function on a NULL pointer or non-terminated object. Therefore metal_bus_register does not violate MISRA C 2023 Rule 21.17.\n\nThat said, the implementation of metal_bus_find does call strcmp(bus->name, name) without validating either operand. If metal_bus_find were called by other callers with name == NULL or if there were list entries whose bus->name == NULL or not NUL-terminated, that use of strcmp could indeed lead to out-of-bounds accesses and would violate Rule 21.17. To be fully MISRA-compliant, metal_bus_find should validate its inputs (e.g. ensure both pointers are non-NULL and strings are NUL-terminated, or otherwise establish and document preconditions), or avoid calling strcmp unless those preconditions are guaranteed by all callers."
}