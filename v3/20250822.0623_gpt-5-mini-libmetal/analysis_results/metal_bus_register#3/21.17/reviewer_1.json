{
  "user_message": "An agent A claimed that the following metal_bus_register code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_register.\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation: strlen(bus->name) is called after only a null-pointer check. If bus->name points to a non\u2011terminated character array (for example: char name_buf[3] = {'a','b','c'}; bus.name = name_buf; metal_bus_register(&bus);), strlen will read past the end of the object searching for a '\\0', causing accesses beyond the bounds of the object and thus violating MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_bus_register: entry\n  bus ptr=0x7f146935cb60\n  bus->name ptr=0x7f14693568f0\n  check: calling strlen(bus->name) (name ptr=0x7f14693568f0)\n  passed null/empty checks, calling metal_bus_find(...)\n  registration complete for name ptr=0x7f14693568f0\nmetal_bus_register: entry\n  bus ptr=0x7f146935ddc8\n  bus->name ptr=0x7f146935691d\n  check: calling strlen(bus->name) (name ptr=0x7f146935691d)\n  passed null/empty checks, calling metal_bus_find(...)\n  registration complete for name ptr=0x7f146935691d\nmetal_bus_register: entry\n  bus ptr=0x5631eb414260\n  bus->name ptr=0x5631eb40c220\n  check: calling strlen(bus->name) (name ptr=0x5631eb40c220)\n  passed null/empty checks, calling metal_bus_find(...)\n  registration complete for name ptr=0x5631eb40c220\nmetal_bus_register: entry\n  bus ptr=0x5631eb4154c8\n  bus->name ptr=0x5631eb40c24d\n  check: calling strlen(bus->name) (name ptr=0x5631eb40c24d)\n  passed null/empty checks, calling metal_bus_find(...)\n  registration complete for name ptr=0x5631eb40c24d\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_register:\nstatic int metal_linux_register_bus(struct linux_bus *lbus)\n{\n\tlbus->bus.name = lbus->bus_name;\n\tlbus->bus.ops  = metal_linux_bus_ops;\n\treturn metal_bus_register(&lbus->bus);\n}\n...\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n...\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. Calling strlen(bus->name) after only a NULL check does not guarantee that the object pointed to by bus->name contains a terminating '\\0' within its bounds. If bus->name points at a non\u2011terminated character array (e.g. char name_buf[3] = {'a','b','c'}; bus.name = name_buf;), strlen will scan past the object\u2019s bounds searching for a '\\0', which is exactly what MISRA C 2023 Rule 21.17 prohibits. The same concern applies to the subsequent call to metal_bus_find(bus->name, NULL) which internally uses strcmp \u2014 strcmp also requires both operands to be NUL\u2011terminated and would similarly risk out\u2011of\u2011bounds access if the caller supplies a non\u2011terminated buffer. Unless there is a documented and enforceable precondition that bus->name always points to a valid NUL\u2011terminated string, this code can violate Rule 21.17."
}