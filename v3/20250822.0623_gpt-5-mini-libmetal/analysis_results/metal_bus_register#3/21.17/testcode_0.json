{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(bus->name, name) is evaluated unconditionally before the && result check. If name (the search key) or an existing list entry bus->name is NULL or not a NUL-terminated string, strcmp will dereference beyond the bounds of the object (e.g. caller calls metal_bus_find(NULL, &res) or a list node has bus->name == NULL). This can cause out-of-bounds accesses, so the code violates Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/39.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    FILE *log = fopen(\"/tmp/logs/39.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_bus_register: entry bus=%p\\n\", (void *)bus);\n    }\n\n    if (!bus) {\n        if (log) {\n            fprintf(log, \"metal_bus_register: bus is NULL -> return -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    if (log) {\n        fprintf(log, \"metal_bus_register: bus->name=%p\\n\", (void *)bus->name);\n    }\n\n    if (!bus->name) {\n        if (log) {\n            fprintf(log, \"metal_bus_register: name is NULL -> return -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    /* Compute length only after verifying bus->name is not NULL to preserve original logic. */\n    size_t name_len = strlen(bus->name);\n    if (log) {\n        /* Log the observed length. Avoid additional string ops before this point. */\n        fprintf(log, \"metal_bus_register: strlen(bus->name) = %zu\\n\", name_len);\n        /* For diagnostic purposes, log up to a reasonable prefix of the name if present. */\n        if (name_len > 0) {\n            size_t prefix = name_len < 64 ? name_len : 64;\n            /* Use fwrite to avoid relying on any extra formatting that could alter control flow. */\n            fprintf(log, \"metal_bus_register: name (prefix %zu): \", prefix);\n            fwrite(bus->name, 1, prefix, log);\n            fprintf(log, \"\\n\");\n        }\n        fflush(log);\n    }\n\n    if (!name_len) {\n        if (log) {\n            fprintf(log, \"metal_bus_register: name is empty -> return -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    if (log) {\n        fprintf(log, \"metal_bus_register: calling metal_bus_find(name) with name='%s'\\n\", bus->name);\n        fflush(log);\n    }\n\n    int find_ret = metal_bus_find(bus->name, NULL);\n\n    if (log) {\n        fprintf(log, \"metal_bus_register: metal_bus_find returned %d\\n\", find_ret);\n    }\n\n    if (find_ret == 0) {\n        if (log) {\n            fprintf(log, \"metal_bus_register: bus already exists -> return -EEXIST\\n\");\n            fclose(log);\n        }\n        return -EEXIST;\n    }\n\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    if (log) {\n        fprintf(log, \"metal_bus_register: registration succeeded for name='%s' -> return 0\\n\", bus->name);\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}