{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if metal_bus_find is declared to take a non-const pointer (for example: int metal_bus_find(char *name, ...)) while it does not need to modify the string. Passing bus->name (a pointer to the bus name) to a non-const parameter thereby fails MISRA C 2023 Rule 8.13 \u2014 the parameter should be declared as const char * (and bus->name preferably as const char * when appropriate). If, however, metal_bus_find already declares the parameter as const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/33.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Minimal forward declarations / stubs so this translation unit can compile\n * when built standalone for testing. In a real project these would be\n * the actual definitions. We keep signatures compatible with safer (const)\n * declarations where appropriate.\n */\n\nstruct metal_list_node {\n    struct metal_list_node *next;\n    struct metal_list_node *prev;\n};\n\nstruct metal_bus {\n    const char *name; /* prefer const to help satisfy Rule 8.13 */\n    void *devices;\n    struct metal_list_node node;\n};\n\n/* External functions: provide weak stubs for standalone compilation. */\nint metal_bus_find(const char *name, void *arg);\nvoid metal_list_init(void *list);\nvoid metal_list_add_tail(void *list, void *node);\nvoid metal_log(int level, const char *fmt, ...);\n\n/* Logging probe: append diagnostic lines to /tmp/logs/33.txt. */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/33.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Helper to safely print a string (avoid NULL deref) */\nstatic const char *safe_str(const char *s)\n{\n    return (s != NULL) ? s : \"(null)\";\n}\n\n/* Preserve original logic, but add probes to capture control flow and state. */\nint metal_bus_register(struct metal_bus *bus)\n{\n    /* Log entry and initial bus state. */\n    probe_logf(\"ENTER metal_bus_register: bus=%p\", (void *)bus);\n    if (bus) {\n        probe_logf(\"bus->name=%p '%s' len=%zu\",\n                   (const void *)bus->name,\n                   safe_str(bus->name),\n                   (size_t)(bus->name ? strlen(bus->name) : 0));\n    }\n\n    if (!bus || !bus->name || !strlen(bus->name)) {\n        probe_logf(\"EXIT metal_bus_register: returning -EINVAL (invalid argument)\");\n        return -EINVAL;\n    }\n\n    /* Log just before calling metal_bus_find so callers can see what was passed. */\n    probe_logf(\"Calling metal_bus_find with name=%p '%s'\",\n               (const void *)bus->name, safe_str(bus->name));\n\n    int find_ret = metal_bus_find(bus->name, NULL);\n\n    /* Log return value and confirm that the bus name was not modified. */\n    probe_logf(\"metal_bus_find returned %d\", find_ret);\n    probe_logf(\"After metal_bus_find: bus->name=%p '%s' len=%zu\",\n               (const void *)bus->name,\n               safe_str(bus->name),\n               (size_t)strlen(bus->name));\n\n    if (find_ret == 0) {\n        probe_logf(\"EXIT metal_bus_register: returning -EEXIST (already exists)\");\n        return -EEXIST;\n    }\n\n    /* Original initialization and registration steps. */\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    probe_logf(\"EXIT metal_bus_register: success (0)\");\n    return 0;\n}\n\n/*\n * The following are minimal stubs to allow standalone compilation.\n * In a real build these symbols would be provided by the rest of the\n * system. The stubs simply log calls so the test can be used standalone.\n */\n\nint metal_bus_find(const char *name, void *arg)\n{\n    probe_logf(\"[stub] metal_bus_find called with name=%p '%s'\",\n               (const void *)name, safe_str(name));\n    /* For demonstration, return non-zero to indicate \"not found\" by default. */\n    return -1;\n}\n\nvoid metal_list_init(void *list)\n{\n    probe_logf(\"[stub] metal_list_init list=%p\", list);\n}\n\n/* A placeholder for the global _metal structure used in the original code. */\nstruct {\n    struct {\n        void *bus_list;\n    } common;\n} _metal = { { NULL } };\n\nvoid metal_list_add_tail(void *list, void *node)\n{\n    probe_logf(\"[stub] metal_list_add_tail list=%p node=%p\", list, node);\n}\n\nvoid metal_log(int level, const char *fmt, ...)\n{\n    /* Simple stub that writes to the probe log as well. */\n    va_list ap;\n    va_start(ap, fmt);\n    char buf[256];\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    probe_logf(\"[stub] metal_log level=%d msg=%s\", level, buf);\n}\n\n/* Definitions for debug level used above; keep as small integers. */\nenum { METAL_LOG_DEBUG = 1 };\n"
}