{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member bus->name is used only as a read-only C string (passed to metal_log as the %s argument) but is apparently declared as a non-const char * in struct metal_bus. Since the pointer is not modified, it should be declared as const char *name; leaving it as a non-const pointer violates MISRA C 2023 Rule 8.13. (If, however, bus->name must be mutable elsewhere, then this specific use would not require const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/33.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "int metal_bus_register(struct metal_bus *bus)\n{\n    /* Probe log file. Open in append mode so multiple invocations accumulate evidence. */\n    FILE *probe_fp = fopen(\"/tmp/logs/33.txt\", \"a\");\n    if (probe_fp)\n    {\n        fprintf(probe_fp, \"metal_bus_register: entry bus=%p\\n\", (void *)bus);\n    }\n\n    if (!bus)\n    {\n        if (probe_fp)\n        {\n            fprintf(probe_fp, \"metal_bus_register: bus is NULL -> return -EINVAL\\n\");\n            fclose(probe_fp);\n        }\n        return -EINVAL;\n    }\n\n    if (probe_fp)\n    {\n        fprintf(probe_fp, \"metal_bus_register: bus->name ptr=%p\\n\", (void *)bus->name);\n    }\n\n    if (!bus->name || !strlen(bus->name))\n    {\n        if (probe_fp)\n        {\n            fprintf(probe_fp, \"metal_bus_register: name is %s, name_ptr=%p\\n\",\n                    bus->name ? \"non-NULL-empty\" : \"NULL\", (void *)bus->name);\n            if (bus->name)\n            {\n                fprintf(probe_fp, \"metal_bus_register: name content=\\\"%s\\\", len=%lu\\n\",\n                        bus->name, (unsigned long)strlen(bus->name));\n            }\n            fprintf(probe_fp, \"metal_bus_register: returning -EINVAL\\n\");\n            fclose(probe_fp);\n        }\n        return -EINVAL;\n    }\n\n    /* Check if a bus with this name already exists and log the result. */\n    int find_res = metal_bus_find(bus->name, NULL);\n    if (probe_fp)\n    {\n        fprintf(probe_fp, \"metal_bus_register: metal_bus_find returned %d for name=\\\"%s\\\"\\n\",\n                find_res, bus->name);\n    }\n\n    if (find_res == 0)\n    {\n        if (probe_fp)\n        {\n            fprintf(probe_fp, \"metal_bus_register: bus exists -> return -EEXIST\\n\");\n            fclose(probe_fp);\n        }\n        return -EEXIST;\n    }\n\n    /* Preserve original behavior: initialize and add to list. */\n    metal_list_init(&bus->devices);\n    if (probe_fp)\n    {\n        fprintf(probe_fp, \"metal_bus_register: initialized devices list\\n\");\n    }\n\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    if (probe_fp)\n    {\n        fprintf(probe_fp, \"metal_bus_register: added to bus_list\\n\");\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n    if (probe_fp)\n    {\n        fprintf(probe_fp, \"metal_bus_register: logged registration for name=\\\"%s\\\"; returning 0\\n\",\n                bus->name);\n        fclose(probe_fp);\n    }\n\n    return 0;\n}\n"
}