{
  "user_message": "An agent A claimed that the following atomic code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of atomic.\n```c\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code negates the return value of pthread_create: error = -pthread_create(&tid_p[i], NULL, child, arg); If pthread_create fails it returns a positive errno; negating it makes 'error' negative. Later the code calls strerror(error) in the error path (metal_log(..., strerror(error))). strerror() expects a non\u2011negative error number and may index into an internal array; passing a negative value can lead to an out\u2011of\u2011bounds access of the error message table and thus violate MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[2025-08-22 06:31:41][pid:2348816] atomic: entry threads=10 counter_addr=0x7ffcab819f14 initial_counter=0\n[2025-08-22 06:31:41][pid:2348816] atomic: metal_run returned error=0 (0 means success)\n[2025-08-22 06:31:41][pid:2348816] atomic: after run raw_counter=10000\n[2025-08-22 06:31:41][pid:2348816] atomic: computed delta value=0 (after subtracting test_count * threads)\n[2025-08-22 06:31:41][pid:2348816] atomic: exit returning error=0\n[2025-08-22 06:31:42][pid:2349006] atomic: entry threads=10 counter_addr=0x7ffc4f1e6394 initial_counter=0\n[2025-08-22 06:31:42][pid:2349006] atomic: metal_run returned error=0 (0 means success)\n[2025-08-22 06:31:42][pid:2349006] atomic: after run raw_counter=10000\n[2025-08-22 06:31:42][pid:2349006] atomic: computed delta value=0 (after subtracting test_count * threads)\n[2025-08-22 06:31:42][pid:2349006] atomic: exit returning error=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function atomic:\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n...\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n...\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n...\nstatic void *atomic_thread(void *arg)\n{\n\tatomic_int *c = arg;\n\tint i;\n\n\tfor (i = 0; i < atomic_test_count; i++)\n\t\tatomic_fetch_add(c, 1);\n\n\treturn NULL;\n}\n...\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n...\nstatic const int atomic_test_count = 1000\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In metal_run_noblock the code does error = -pthread_create(...); pthread_create() returns 0 on success and a positive error number (an errno value) on failure. Negating that value makes error negative, and the code then calls strerror(error). strerror expects a non\u2011negative errno value (it typically indexes an internal array of message strings using the error number); passing a negative value can cause out\u2011of\u2011bounds access or otherwise undefined behavior. That use of a string.h function with an out\u2011of\u2011range error number is exactly the kind of unsafe use covered by MISRA C:2023 Rule 21.17. Note that the provided execution log shows no failure path was exercised, but the code path exists and is a violation. Recommended fixes: do not negate the pthread_create return (use error = pthread_create(...)), or pass the positive errno to strerror (e.g. strerror(-error) if you insist on storing a negated error), or use strerror_r with proper range checking."
}