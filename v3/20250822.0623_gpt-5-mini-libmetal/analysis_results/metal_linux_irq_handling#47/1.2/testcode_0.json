{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang language extensions: the statement-expression construct '({ ... })' and the GNU variadic comma-swallowing idiom '##__VA_ARGS__'. Both are documented compiler extensions, so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_handling code that contains useful probe functions that print useful logs to a file \"/tmp/logs/470.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_handling as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_handling:\n```c\nstatic void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\n\t(void)args;\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\treturn NULL;\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t      linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\t\t\tj++;\n\t\t}\n\t\tmetal_mutex_release(&irq_lock);\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tif (read(pfds[i].fd,\n\t\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0)\n\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\t\tdev->bus, dev, fd);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t}\n\t\t}\n\t}\n\tfree(pfds);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_handling code.\n",
  "test_code": "static void probe_log_msg(const char *msg)\n{\n    FILE *fp = fopen(\"/tmp/logs/470.txt\", \"a\");\n    if (!fp)\n        return;\n    fprintf(fp, \"%s\\n\", msg);\n    fclose(fp);\n}\n\nstatic void *metal_linux_irq_handling(void *args)\n{\n    struct sched_param param;\n    uint64_t val;\n    int ret;\n    int i, j, pfds_total;\n    struct pollfd *pfds;\n    char buf[512];\n\n    (void)args;\n\n    pfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n    if (!pfds) {\n        metal_log(METAL_LOG_ERROR,\n                  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n        snprintf(buf, sizeof(buf), \"%s: failed to allocate pfds (malloc returned NULL)\", __func__);\n        probe_log_msg(buf);\n        return NULL;\n    }\n\n    snprintf(buf, sizeof(buf), \"%s: allocated pfds=%p (FD_SETSIZE=%d)\", __func__, (void *)pfds, FD_SETSIZE);\n    probe_log_msg(buf);\n\n    param.sched_priority = sched_get_priority_max(SCHED_FIFO);\n    /* Ignore the set scheduler error */\n    ret = sched_setscheduler(0, SCHED_FIFO, &param);\n    if (ret) {\n        metal_log(METAL_LOG_WARNING,\n                  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n                  strerror(ret));\n        snprintf(buf, sizeof(buf), \"%s: sched_setscheduler returned %d, sched_priority=%d\", __func__, ret, param.sched_priority);\n        probe_log_msg(buf);\n    } else {\n        snprintf(buf, sizeof(buf), \"%s: sched_setscheduler succeeded, sched_priority=%d\", __func__, param.sched_priority);\n        probe_log_msg(buf);\n    }\n\n    while (1) {\n        metal_mutex_acquire(&irq_lock);\n        snprintf(buf, sizeof(buf), \"%s: acquired irq_lock\", __func__);\n        probe_log_msg(buf);\n\n        if (irq_handling_stop) {\n            /* Killing this IRQ handling thread */\n            snprintf(buf, sizeof(buf), \"%s: irq_handling_stop is set (value=%d), exiting loop\", __func__, irq_handling_stop);\n            probe_log_msg(buf);\n            metal_mutex_release(&irq_lock);\n            snprintf(buf, sizeof(buf), \"%s: released irq_lock before break\", __func__);\n            probe_log_msg(buf);\n            break;\n        }\n\n        /* Get the fdset */\n        memset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n        pfds[0].fd = irq_notify_fd;\n        pfds[0].events = POLLIN;\n        snprintf(buf, sizeof(buf), \"%s: added notify fd index=0 fd=%d events=POLLIN\", __func__, irq_notify_fd);\n        probe_log_msg(buf);\n        j = 1;\n        metal_bitmap_for_each_set_bit(irqs_enabled, i,\n                                      linux_irq_cntr.irq_num) {\n            pfds[j].fd = i;\n            pfds[j].events = POLLIN;\n            snprintf(buf, sizeof(buf), \"%s: added irq fd at pfds[%d]=%d\", __func__, j, i);\n            probe_log_msg(buf);\n            j++;\n        }\n        metal_mutex_release(&irq_lock);\n        snprintf(buf, sizeof(buf), \"%s: released irq_lock, built pfds count j=%d\", __func__, j);\n        probe_log_msg(buf);\n        /* Wait for interrupt */\n        snprintf(buf, sizeof(buf), \"%s: calling poll(pfds, %d, -1)\", __func__, j);\n        probe_log_msg(buf);\n        ret = poll(pfds, j, -1);\n        if (ret < 0) {\n            metal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n                      __func__, strerror(errno));\n            snprintf(buf, sizeof(buf), \"%s: poll failed ret=%d errno=%d (%s)\", __func__, ret, errno, strerror(errno));\n            probe_log_msg(buf);\n            break;\n        }\n        /* Waken up from interrupt */\n        snprintf(buf, sizeof(buf), \"%s: poll returned ret=%d\", __func__, ret);\n        probe_log_msg(buf);\n        pfds_total = j;\n        for (i = 0; i < pfds_total; i++) {\n            snprintf(buf, sizeof(buf), \"%s: inspecting pfds[%d] fd=%d revents=0x%x\", __func__, i, pfds[i].fd, pfds[i].revents);\n            probe_log_msg(buf);\n            if ((pfds[i].fd == irq_notify_fd) &&\n                (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n                /* IRQ registration change notification */\n                if (read(pfds[i].fd,\n                         (void *)&val, sizeof(uint64_t)) < 0) {\n                    metal_log(METAL_LOG_ERROR,\n                              \"%s, read irq fd %d failed\\n\",\n                              __func__, pfds[i].fd);\n                    snprintf(buf, sizeof(buf), \"%s: read from notify fd %d failed: errno=%d (%s)\", __func__, pfds[i].fd, errno, strerror(errno));\n                    probe_log_msg(buf);\n                } else {\n                    snprintf(buf, sizeof(buf), \"%s: read notify fd %d success val=%"
}