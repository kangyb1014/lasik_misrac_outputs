{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nWhen the function is called with params == NULL, the statement 'params = &dparams;' assigns a new value to the parameter variable 'params' (i.e. modifies the pointer parameter). MISRA C 2023 Rule 17.8 forbids modifying a function parameter itself (the object referred to by a pointer may be modified, but not the pointer). Therefore this fragment violates Rule 17.8. Suggested fix: use a separate local pointer (e.g. 'struct metal_init_params *p = params ? params : &dparams;') and use p thereafter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/747.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper: append control flow and state to /tmp/logs/747.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/747.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint metal_tests_run(struct metal_init_params *params)\n{\n    struct metal_init_params dparams = METAL_INIT_DEFAULTS;\n    struct metal_test_case *test_case;\n    struct metal_list *node;\n    int error, errors = 0;\n    const char *dots = \"..................................\";\n    const char *pad;\n\n    /* Log entry and initial state of params and dparams */\n    probe_log(\"ENTER metal_tests_run: params=%p, &dparams=%p, sizeof(dparams)=%zu\",\n              (void *)params, (void *)&dparams, (size_t)sizeof(dparams));\n\n    if (!params) {\n        probe_log(\"params is NULL before assignment; assigning params = &dparams\");\n        params = &dparams; /* original logic preserved; this is the modification of parameter */\n        probe_log(\"params after assignment: params=%p (should equal &dparams=%p)\",\n                  (void *)params, (void *)&dparams);\n    } else {\n        probe_log(\"params is non-NULL, no assignment performed: params=%p\", (void *)params);\n    }\n\n    /* Log intent to set log_level and then set it (preserve original logic) */\n    probe_log(\"Setting params->log_level to METAL_LOG_DEBUG (params=%p)\", (void *)params);\n    params->log_level = METAL_LOG_DEBUG;\n\n    error = metal_init(params);\n    probe_log(\"metal_init(params=%p) returned %d\", (void *)params, error);\n    if (error) {\n        probe_log(\"metal_init failed with error=%d; returning immediately\", error);\n        return error;\n    }\n\n    /* Iterate test cases and log each step and result to provide detailed trace */\n    metal_list_for_each(&test_cases, node) {\n        test_case = metal_container_of(node, struct metal_test_case,\n                                       node);\n        probe_log(\"About to run test_case at %p with name='%s'\", (void *)test_case,\n                  test_case ? test_case->name : \"(null)\");\n\n        pad = dots + strlen(test_case->name);\n        metal_log(METAL_LOG_INFO, \"running [%s]\\n\", test_case->name);\n\n        error = test_case->test();\n        probe_log(\"test_case '%s' returned %d\", test_case->name, error);\n\n        metal_log(METAL_LOG_INFO, \"result [%s]%s %s%s%s\\n\",\n                  test_case->name, pad,\n                  error ? \"fail\" : \"pass\",\n                  error ? \" - error: \" : \"\",\n                  error ? strerror(-error) : \"\");\n        if (error)\n            errors++;\n\n        probe_log(\"Accumulated errors so far: %d\", errors);\n    }\n\n    metal_finish();\n    probe_log(\"metal_finish called; returning errors=%d\", errors);\n\n    return errors;\n}\n"
}