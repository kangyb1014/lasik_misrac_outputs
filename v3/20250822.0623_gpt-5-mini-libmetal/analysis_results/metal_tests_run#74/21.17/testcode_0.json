{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer arithmetic pad = dots + strlen(test_case->name) can produce a pointer beyond the end of the string literal. If strlen(test_case->name) is greater than the length of the dots literal, pad will point past the terminating NUL and the subsequent metal_log call with \"%s\" will attempt to read from memory beyond the bounds of the dots object, causing undefined behavior. This is a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/749.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append logs to /tmp/logs/749.txt */\nstatic void probe_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/749.txt\", \"a\");\n    if (!f) {\n        /* try to create the directory if it does not exist, then retry */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/749.txt\", \"a\");\n        if (!f) {\n            /* If still failing, give up silently to avoid changing program behavior */\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint metal_tests_run(struct metal_init_params *params)\n{\n    struct metal_init_params dparams = METAL_INIT_DEFAULTS;\n    struct metal_test_case *test_case;\n    struct metal_list *node;\n    int error, errors = 0;\n    const char *dots = \"..................................\";\n    const char *pad;\n\n    if (!params)\n        params = &dparams;\n\n    params->log_level = METAL_LOG_DEBUG;\n    error = metal_init(params);\n    if (error)\n        return error;\n\n    metal_list_for_each(&test_cases, node) {\n        test_case = metal_container_of(node, struct metal_test_case,\n                                       node);\n        /* compute pad exactly as original code does */\n        pad = dots + strlen(test_case->name);\n\n        /* Probe logging: capture state that can demonstrate the violation scenario */\n        {\n            size_t name_len = strlen(test_case->name);\n            size_t dots_len = strlen(dots);\n            ptrdiff_t offset = (ptrdiff_t)(pad - dots);\n            int out_of_bounds = (name_len > dots_len) ? 1 : 0;\n            uintptr_t addr_dots = (uintptr_t)dots;\n            uintptr_t addr_pad = (uintptr_t)pad;\n\n            probe_printf(\"[probe] running test_case name='%s' name_len=%zu dots_len=%zu offset=%td out_of_bounds=%d dots_addr=0x%lx pad_addr=0x%lx\",\n                         test_case->name ? test_case->name : \"(null)\",\n                         name_len,\n                         dots_len,\n                         offset,\n                         out_of_bounds,\n                         (unsigned long)addr_dots,\n                         (unsigned long)addr_pad);\n        }\n\n        metal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n        error = test_case->test();\n\n        /* Log result and also record that we're about to pass 'pad' into metal_log */\n        probe_printf(\"[probe] about to call metal_log with pad for test='%s' (pad points to offset=%td)\",\n                     test_case->name ? test_case->name : \"(null)\",\n                     (ptrdiff_t)(pad - dots));\n\n        metal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n               test_case->name, pad,\n               error ? \"fail\" : \"pass\",\n               error ? \" - error: \" : \"\",\n               error ? strerror(-error) : \"\");\n\n        /* After printing result, record the outcome */\n        probe_printf(\"[probe] result for test='%s' error=%d errors_so_far=%d\",\n                     test_case->name ? test_case->name : \"(null)\",\n                     error, errors + (error ? 1 : 0));\n\n        if (error)\n            errors++;\n    }\n\n    metal_finish();\n\n    return errors;\n}\n"
}