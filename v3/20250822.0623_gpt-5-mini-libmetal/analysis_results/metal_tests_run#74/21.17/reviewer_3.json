{
  "user_message": "An agent A claimed that the following metal_tests_run code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_tests_run.\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. The code can cause out-of-bounds accesses of objects used by string functions. strlen(test_case->name) will scan test_case->name until a NUL; if test_case->name is not NUL-terminated (or its allocated length is less than the scanned characters) strlen reads beyond its object. Also pad = dots + strlen(test_case->name) can point past the end of the dots literal when strlen(test_case->name) > strlen(dots); later passing pad to %s causes reading beyond the bounds of the dots object. Example: if dots is 34 chars and test_case->name is 50 chars, pad = dots + 50 points 16 bytes past dots and the %s format will read out-of-bounds.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_tests_run: start params=0x7fff589a6900, test_cases_list=0x563ef47205e0\n-- test_case=0x563ef471f0e0 name_ptr=0x563ef471b082 name_len=6 dots_ptr=0x563ef471b5d0 dots_len=34 pad_ptr=0x563ef471b5d6 pad_offset=6\nname_preview(0..6): atomic\ndots_preview: ..................................\ntest_case result: name=0x563ef471b082 error=0\n-- test_case=0x563ef471f260 name_ptr=0x563ef471b0ec name_len=5 dots_ptr=0x563ef471b5d0 dots_len=34 pad_ptr=0x563ef471b5d5 pad_offset=5\nname_preview(0..5): mutex\ndots_preview: ..................................\ntest_case result: name=0x563ef471b0ec error=0\n-- test_case=0x563ef471f620 name_ptr=0x563ef471b19d name_len=5 dots_ptr=0x563ef471b5d0 dots_len=34 pad_ptr=0x563ef471b5d5 pad_offset=5\nname_preview(0..5): shmem\ndots_preview: ..................................\ntest_case result: name=0x563ef471b19d error=0\n-- test_case=0x563ef471f9a0 name_ptr=0x563ef471b24f name_len=9 dots_ptr=0x563ef471b5d0 dots_len=34 pad_ptr=0x563ef471b5d9 pad_offset=9\nname_preview(0..9): condition\ndots_preview: ..................................\ntest_case result: name=0x563ef471b24f error=0\n-- test_case=0x563ef471fe40 name_ptr=0x563ef471b382 name_len=8 dots_ptr=0x563ef471b5d0 dots_len=34 pad_ptr=0x563ef471b5d8 pad_offset=8\nname_preview(0..8): spinlock\ndots_preview: ..................................\ntest_case result: name=0x563ef471b382 error=0\n-- test_case=0x563ef47200a0 name_ptr=0x563ef471b40b name_len=5 dots_ptr=0x563ef471b5d0 dots_len=34 pad_ptr=0x563ef471b5d5 pad_offset=5\nname_preview(0..5): alloc\ndots_preview: ..................................\ntest_case result: name=0x563ef471b40b error=0\n-- test_case=0x563ef4720300 name_ptr=0x563ef471b50a name_len=3 dots_ptr=0x563ef471b5d0 dots_len=34 pad_ptr=0x563ef471b5d3 pad_offset=3\nname_preview(0..3): irq\ndots_preview: ..................................\ntest_case result: name=0x563ef471b50a error=0\n-- test_case=0x563ef47204c0 name_ptr=0x563ef471b577 name_len=7 dots_ptr=0x563ef471b5d0 dots_len=34 pad_ptr=0x563ef471b5d7 pad_offset=7\nname_preview(0..7): version\ndots_preview: ..................................\ntest_case result: name=0x563ef471b577 error=0\nmetal_tests_run: finished, total_errors=0\nmetal_tests_run: start params=0x7ffc379bb2c0, test_cases_list=0x55db8ea0e5e0\n-- test_case=0x55db8ea0d0e0 name_ptr=0x55db8ea07082 name_len=6 dots_ptr=0x55db8ea075d0 dots_len=34 pad_ptr=0x55db8ea075d6 pad_offset=6\nname_preview(0..6): atomic\ndots_preview: ..................................\ntest_case result: name=0x55db8ea07082 error=0\n-- test_case=0x55db8ea0d260 name_ptr=0x55db8ea070ec name_len=5 dots_ptr=0x55db8ea075d0 dots_len=34 pad_ptr=0x55db8ea075d5 pad_offset=5\nname_preview(0..5): mutex\ndots_preview: ..................................\ntest_case result: name=0x55db8ea070ec error=0\n-- test_case=0x55db8ea0d620 name_ptr=0x55db8ea0719d name_len=5 dots_ptr=0x55db8ea075d0 dots_len=34 pad_ptr=0x55db8ea075d5 pad_offset=5\nname_preview(0..5): shmem\ndots_preview: ..................................\ntest_case result: name=0x55db8ea0719d error=0\n-- test_case=0x55db8ea0d9a0 name_ptr=0x55db8ea0724f name_len=9 dots_ptr=0x55db8ea075d0 dots_len=34 pad_ptr=0x55db8ea075d9 pad_offset=9\nname_preview(0..9): condition\ndots_preview: ..................................\ntest_case result: name=0x55db8ea0724f error=0\n-- test_case=0x55db8ea0de40 name_ptr=0x55db8ea07382 name_len=8 dots_ptr=0x55db8ea075d0 dots_len=34 pad_ptr=0x55db8ea075d8 pad_offset=8\nname_preview(0..8): spinlock\ndots_preview: ..................................\ntest_case result: name=0x55db8ea07382 error=0\n-- test_case=0x55db8ea0e0a0 name_ptr=0x55db8ea0740b name_len=5 dots_ptr=0x55db8ea075d0 dots_len=34 pad_ptr=0x55db8ea075d5 pad_offset=5\nname_preview(0..5): alloc\ndots_preview: ..................................\ntest_case result: name=0x55db8ea0740b error=0\n-- test_case=0x55db8ea0e300 name_ptr=0x55db8ea0750a name_len=3 dots_ptr=0x55db8ea075d0 dots_len=34 pad_ptr=0x55db8ea075d3 pad_offset=3\nname_preview(0..3): irq\ndots_preview: ..................................\ntest_case result: name=0x55db8ea0750a error=0\n-- test_case=0x55db8ea0e4c0 name_ptr=0x55db8ea\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code invokes strlen(test_case->name) without any check that test_case->name points to a NUL-terminated object of sufficient length, so strlen could scan past the bounds of that object. In addition pad is computed as dots + strlen(test_case->name); if strlen(test_case->name) > strlen(dots) this yields a pointer beyond the end of the dots literal and the subsequent %s consumption of pad in the printf will read out-of-bounds. Both situations can result in string-handling operations accessing beyond object bounds, which is exactly what MISRA C 2023 Rule 21.17 prohibits. "
}