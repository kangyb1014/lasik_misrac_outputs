{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator 'node' is declared as a non-const pointer: 'struct metal_list *node'. It is only used to traverse/read the list (not to modify the list nodes), so it should be a pointer to a const-qualified type (e.g. 'const struct metal_list *node') and the iteration macro/signature adjusted accordingly.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\tFILE *log = fopen(\"/tmp/logs/743.txt\", \"w\");\n\tint iter = 0;\n\n\tif (log) {\n\t\tfprintf(log, \"metal_tests_run: entry\\n\");\n\t\tfprintf(log, \"params pointer=%p\\n\", (void *)params);\n\t\tfflush(log);\n\t}\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\t/* Record chosen params pointer after defaulting */\n\tif (log) {\n\t\tfprintf(log, \"using params pointer=%p\\n\", (void *)params);\n\t\tfflush(log);\n\t}\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (log) {\n\t\tfprintf(log, \"metal_init returned=%d\\n\", error);\n\t\tfflush(log);\n\t}\n\tif (error) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_tests_run: early exit due to metal_init error=%d\\n\", error);\n\t\t\tfclose(log);\n\t\t}\n\t\treturn error;\n\t}\n\n\t/* Iterate the global test_cases list. We intentionally keep the loop iterator as\n\t   a non-const pointer here (struct metal_list *node) to reproduce the scenario\n\t   reported: the iterator is used only to read/traverse the list and could be\n\t   a pointer to a const-qualified type. Log information about each iteration\n\t   so other agents can observe the control flow and state. */\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\n\t\t/* Capture state before invoking the test */\n\t\tif (log) {\n\t\t\tfprintf(log, \"iteration=%d node_ptr=%p test_case_ptr=%p test_name_ptr=%p\\n\",\n\t\t\t\titer, (void *)node, (void *)test_case,\n\t\t\t\t(void *)test_case->name);\n\t\t\tif (test_case->name) {\n\t\t\t\tfprintf(log, \"iteration=%d test_name=\\\"%s\\\" name_len=%zu\\n\",\n\t\t\t\t\titer, test_case->name, strlen(test_case->name));\n\t\t\t} else {\n\t\t\t\tfprintf(log, \"iteration=%d test_name=<NULL>\\n\", iter);\n\t\t\t}\n\t\t\tfflush(log);\n\t\t}\n\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\n\t\t/* Log that we are about to call the test function and record its return */\n\t\tif (log) {\n\t\t\tfprintf(log, \"iteration=%d calling test function at %p\\n\",\n\t\t\t\titer, (void *)test_case->test);\n\t\t\tfflush(log);\n\t\t}\n\t\terror = test_case->test();\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"iteration=%d test returned=%d\\n\", iter, error);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\n\t\t/* Note: we do not modify 'node' here; it is only used for traversal/reading.\n\t\t   The logs above (node_ptr and test_case_ptr) allow an external reviewer to\n\t\t   see that node is not altered by this function. */\n\n\t\titer++;\n\t}\n\n\tmetal_finish();\n\n\tif (log) {\n\t\tfprintf(log, \"metal_tests_run: exit errors=%d\\n\", errors);\n\t\tfclose(log);\n\t}\n\n\treturn errors;\n}\n"
}