{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable test_case is declared as 'struct metal_test_case *test_case' but is only used for reading (accessing name and calling test()). It could be declared as 'const struct metal_test_case *test_case'. Assigning the non-const result of metal_container_of to a non-const pointer when no modification is performed violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "/* Probe helpers for logging control flow and state to /tmp/logs/743.txt */\nstatic void probe_log_enter_test_case(const struct metal_test_case *tc, const struct metal_list *node)\n{\n    FILE *f = fopen(\"/tmp/logs/743.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Log pointer values and read-only fields observed */\n    fprintf(f, \"ENTER: test_case=%p node=%p name=\\\"%s\\\"\\n\",\n            (const void *)tc, (const void *)node, (tc && tc->name) ? tc->name : \"(null)\");\n    fclose(f);\n}\n\nstatic void probe_log_after_test_case(const struct metal_test_case *tc, const struct metal_list *node, int error)\n{\n    FILE *f = fopen(\"/tmp/logs/743.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"EXIT : test_case=%p node=%p name=\\\"%s\\\" result=%d\\n\",\n            (const void *)tc, (const void *)node, (tc && tc->name) ? tc->name : \"(null)\", error);\n    fclose(f);\n}\n\nint metal_tests_run(struct metal_init_params *params)\n{\n    struct metal_init_params dparams = METAL_INIT_DEFAULTS;\n    struct metal_test_case *test_case;\n    struct metal_list *node;\n    int error, errors = 0;\n    const char *dots = \"..................................\";\n    const char *pad;\n\n    if (!params)\n        params = &dparams;\n\n    params->log_level = METAL_LOG_DEBUG;\n    error = metal_init(params);\n    if (error)\n        return error;\n\n    metal_list_for_each(&test_cases, node) {\n        /* Original retrieval of non-const pointer from container macro */\n        test_case = metal_container_of(node, struct metal_test_case,\n                                       node);\n\n        /* Probe: log that we entered this test case and capture pointer, node and name\n         * Note: pass test_case as const to probe to emphasize read-only usage in probe\n         */\n        probe_log_enter_test_case((const struct metal_test_case *)test_case, node);\n\n        pad = dots + strlen(test_case->name);\n        metal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n        error = test_case->test();\n\n        metal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n               test_case->name, pad,\n               error ? \"fail\" : \"pass\",\n               error ? \" - error: \" : \"\",\n               error ? strerror(-error) : \"\");\n\n        /* Probe after running test to capture result and reaffirm no writes were made */\n        probe_log_after_test_case((const struct metal_test_case *)test_case, node, error);\n\n        if (error)\n            errors++;\n    }\n\n    metal_finish();\n\n    return errors;\n}\n"
}