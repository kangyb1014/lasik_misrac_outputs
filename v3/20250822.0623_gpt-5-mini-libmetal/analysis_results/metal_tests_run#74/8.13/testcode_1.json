{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator variable 'node' is declared as a pointer to a non-const structure: 'struct metal_list *node;'. In the function it is only used to traverse/read the list (passed to metal_list_for_each and used with metal_container_of) and not to modify the pointed-to list nodes, so it could and should be declared as 'const struct metal_list *node;'. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\tFILE *probe_fp = NULL;\n\tint iter = 0;\n\n\t/* Open probe log file to capture control flow and state for analysis */\n\tprobe_fp = fopen(\"/tmp/logs/743.txt\", \"a\");\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"-- metal_tests_run entry --\\n\");\n\t\tfprintf(probe_fp, \"params ptr = %p\\n\", (void *)params);\n\t}\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"effective params ptr = %p, log_level before init = %d\\n\",\n\t\t\t(void *)params, params->log_level);\n\t}\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"metal_init returned %d\\n\", error);\n\t}\n\tif (error) {\n\t\tif (probe_fp)\n\t\t\tfclose(probe_fp);\n\t\treturn error;\n\t}\n\n\t/* Iterate test cases: log node pointer, resulting test_case and important fields */\n\tmetal_list_for_each(&test_cases, node) {\n\t\titer++;\n\t\tif (probe_fp) {\n\t\t\tfprintf(probe_fp, \"iteration %d: node ptr = %p\\n\", iter, (void *)node);\n\t\t}\n\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\t\tif (probe_fp) {\n\t\t\tfprintf(probe_fp, \"  test_case ptr = %p\\n\", (void *)test_case);\n\t\t\tif (test_case)\n\t\t\t\tfprintf(probe_fp, \"  test_case->name ptr = %p, name = '%s'\\n\",\n\t\t\t\t\t(void *)test_case->name,\n\t\t\t\t\ttest_case->name ? test_case->name : \"(null)\");\n\t\t\tfprintf(probe_fp, \"  test_case->test fn ptr = %p\\n\",\n\t\t\t\t(void *)(uintptr_t)(test_case ? test_case->test : NULL));\n\t\t}\n\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\n\t\t/* Log before executing the test */\n\t\tif (probe_fp) {\n\t\t\tfprintf(probe_fp, \"  pad ptr = %p (dots + %zu)\\n\",\n\t\t\t\t(void *)pad, strlen(test_case->name));\n\t\t\tfflush(probe_fp);\n\t\t}\n\n\t\terror = test_case->test();\n\n\t\tif (probe_fp) {\n\t\t\tfprintf(probe_fp, \"  test returned %d (%s)\\n\", error,\n\t\t\t\t(error ? strerror(-error) : \"no error\"));\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tif (probe_fp) {\n\t\tfprintf(probe_fp, \"-- iteration summary: total iterations = %d, errors = %d --\\n\",\n\t\t\titer, errors);\n\t\tfflush(probe_fp);\n\t\tfclose(probe_fp);\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n"
}