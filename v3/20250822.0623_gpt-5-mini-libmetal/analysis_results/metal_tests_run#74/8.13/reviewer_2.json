{
  "user_message": "An agent A claimed that the following metal_tests_run code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_tests_run.\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'test_case' is declared as 'struct metal_test_case *test_case;' but within metal_tests_run it is only used for read-only access (reading test_case->name and invoking the test function via test_case->test()). There are no writes through this pointer. Per MISRA C 2023 Rule 8.13 it should therefore be declared as a pointer to a const-qualified type, e.g. 'const struct metal_test_case *test_case;'. Assigning the result of metal_container_of (which yields a non-const pointer) to a const-qualified pointer is allowed, and making this change prevents accidental modification of the pointed-to object.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n--- metal_tests_run start ---\nparams pointer: (nil)\neffective params pointer: 0x7ffe481a2ac0\nparams->log_level (before): 6\nmetal_init returned: 0\nloop node pointer: 0x56498c88e0e0\nobtained test_case pointer: 0x56498c88e0e0\ntest_case->name: 'atomic'\nstrlen(name): 6\ndots base pointer: 0x56498c88a5d0\npad pointer: 0x56498c88a5d6 (offset 6)\ninvoking test_case->test() for 'atomic'\ntest 'atomic' returned error code: 0\nloop node pointer: 0x56498c88e260\nobtained test_case pointer: 0x56498c88e260\ntest_case->name: 'mutex'\nstrlen(name): 5\ndots base pointer: 0x56498c88a5d0\npad pointer: 0x56498c88a5d5 (offset 5)\ninvoking test_case->test() for 'mutex'\ntest 'mutex' returned error code: 0\nloop node pointer: 0x56498c88e620\nobtained test_case pointer: 0x56498c88e620\ntest_case->name: 'shmem'\nstrlen(name): 5\ndots base pointer: 0x56498c88a5d0\npad pointer: 0x56498c88a5d5 (offset 5)\ninvoking test_case->test() for 'shmem'\ntest 'shmem' returned error code: 0\nloop node pointer: 0x56498c88e9a0\nobtained test_case pointer: 0x56498c88e9a0\ntest_case->name: 'condition'\nstrlen(name): 9\ndots base pointer: 0x56498c88a5d0\npad pointer: 0x56498c88a5d9 (offset 9)\ninvoking test_case->test() for 'condition'\ntest 'condition' returned error code: 0\nloop node pointer: 0x56498c88ee40\nobtained test_case pointer: 0x56498c88ee40\ntest_case->name: 'spinlock'\nstrlen(name): 8\ndots base pointer: 0x56498c88a5d0\npad pointer: 0x56498c88a5d8 (offset 8)\ninvoking test_case->test() for 'spinlock'\ntest 'spinlock' returned error code: 0\nloop node pointer: 0x56498c88f0a0\nobtained test_case pointer: 0x56498c88f0a0\ntest_case->name: 'alloc'\nstrlen(name): 5\ndots base pointer: 0x56498c88a5d0\npad pointer: 0x56498c88a5d5 (offset 5)\ninvoking test_case->test() for 'alloc'\ntest 'alloc' returned error code: 0\nloop node pointer: 0x56498c88f300\nobtained test_case pointer: 0x56498c88f300\ntest_case->name: 'irq'\nstrlen(name): 3\ndots base pointer: 0x56498c88a5d0\npad pointer: 0x56498c88a5d3 (offset 3)\ninvoking test_case->test() for 'irq'\ntest 'irq' returned error code: 0\nloop node pointer: 0x56498c88f4c0\nobtained test_case pointer: 0x56498c88f4c0\ntest_case->name: 'version'\nstrlen(name): 7\ndots base pointer: 0x56498c88a5d0\npad pointer: 0x56498c88a5d7 (offset 7)\ninvoking test_case->test() for 'version'\ntest 'version' returned error code: 0\nmetal_finish called\nfinal errors: 0\n--- metal_tests_run end ---\n\n--- metal_tests_run start ---\nparams pointer: (nil)\neffective params pointer: 0x7ffd965a55f0\nparams->log_level (before): 6\nmetal_init returned: 0\nloop node pointer: 0x55e598b410e0\nobtained test_case pointer: 0x55e598b410e0\ntest_case->name: 'atomic'\nstrlen(name): 6\ndots base pointer: 0x55e598b3b5d0\npad pointer: 0x55e598b3b5d6 (offset 6)\ninvoking test_case->test() for 'atomic'\ntest 'atomic' returned error code: 0\nloop node pointer: 0x55e598b41260\nobtained test_case pointer: 0x55e598b41260\ntest_case->name: 'mutex'\nstrlen(name): 5\ndots base pointer: 0x55e598b3b5d0\npad pointer: 0x55e598b3b5d5 (offset 5)\ninvoking test_case->test() for 'mutex'\ntest 'mutex' returned error code: 0\nloop node pointer: 0x55e598b41620\nobtained test_case pointer: 0x55e598b41620\ntest_case->name: 'shmem'\nstrlen(name): 5\ndots base pointer: 0x55e598b3b5d0\npad pointer: 0x55e598b3b5d5 (offset 5)\ninvoking test_case->test() for 'shmem'\ntest 'shmem' returned error code: 0\nloop node pointer: 0x55e598b419a0\nobtained test_case pointer: 0x55e598b419a0\ntest_case->name: 'condition'\nstrlen(name): 9\ndots base pointer: 0x55e598b3b5d0\npad pointer: 0x55e598b3b5d9 (offset 9)\ninvoking test_case->test() for 'condition'\ntest 'condition' returned error code: 0\nloop node pointer: 0x55e598b41e40\nobtained test_case pointer: 0x55e598b41e40\ntest_case->name: 'spinlock'\nstrlen(name): 8\ndots base pointer: 0x55e598b3b5d0\npad pointer: 0x55e598b3b5d8 (offset 8)\ninvoking test_case->test() for 'spinlock'\ntest 'spinlock' returned error code: 0\nloop node pointer: 0x55e598b420a0\nobtained test_case pointer: 0x55e598b420a0\ntest_case->name: 'alloc'\nstrlen(name): 5\ndots base pointer: 0x55e598b3b5d0\npad pointer: 0x55e598b3b5d5 (offset 5)\ninvoking test_case->test() for 'alloc'\ntes\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_tests_run:\nstruct metal_init_params {\n\n\t/** log message handler (defaults to stderr). */\n\tmetal_log_handler\t\tlog_handler;\n\n\t/** default log message level (defaults to emergency). */\n\tenum metal_log_level\t\tlog_level;\n}\n...\n#define METAL_INIT_DEFAULTS \\\n{.log_handler=metal_default_log_handler,.log_level=METAL_LOG_INFO,\\\n}\n...\nstruct metal_test_case {\n\tstruct metal_list node;\n\tconst char *name;\n\ttest_func_t test;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In metal_tests_run the variable test_case is only used for read-only accesses (reading test_case->name and calling test_case->test() which takes no pointer to the containing object). There are no writes through test_case, so it can and should be declared as a pointer to a const-qualified type (e.g. const struct metal_test_case *test_case). Converting the non-const result of metal_container_of to a const-qualified pointer is permitted, so changing the declaration does not introduce incompatibility. Therefore the agent A report that this violates MISRA C 2023 Rule 8.13 is valid."
}