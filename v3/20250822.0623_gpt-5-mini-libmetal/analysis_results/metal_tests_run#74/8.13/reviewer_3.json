{
  "user_message": "An agent A claimed that the following metal_tests_run code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_tests_run.\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe variable test_case is declared as 'struct metal_test_case *test_case' but is only used for reading (accessing name and calling test()). It could be declared as 'const struct metal_test_case *test_case'. Assigning the non-const result of metal_container_of to a non-const pointer when no modification is performed violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: test_case=0x5620e20410e0 node=0x5620e20410e0 name=\"atomic\"\nEXIT : test_case=0x5620e20410e0 node=0x5620e20410e0 name=\"atomic\" result=0\nENTER: test_case=0x5620e2041260 node=0x5620e2041260 name=\"mutex\"\nEXIT : test_case=0x5620e2041260 node=0x5620e2041260 name=\"mutex\" result=0\nENTER: test_case=0x5620e2041620 node=0x5620e2041620 name=\"shmem\"\nEXIT : test_case=0x5620e2041620 node=0x5620e2041620 name=\"shmem\" result=0\nENTER: test_case=0x5620e20419a0 node=0x5620e20419a0 name=\"condition\"\nEXIT : test_case=0x5620e20419a0 node=0x5620e20419a0 name=\"condition\" result=0\nENTER: test_case=0x5620e2041e40 node=0x5620e2041e40 name=\"spinlock\"\nEXIT : test_case=0x5620e2041e40 node=0x5620e2041e40 name=\"spinlock\" result=0\nENTER: test_case=0x5620e20420a0 node=0x5620e20420a0 name=\"alloc\"\nEXIT : test_case=0x5620e20420a0 node=0x5620e20420a0 name=\"alloc\" result=0\nENTER: test_case=0x5620e2042300 node=0x5620e2042300 name=\"irq\"\nEXIT : test_case=0x5620e2042300 node=0x5620e2042300 name=\"irq\" result=0\nENTER: test_case=0x5620e20424c0 node=0x5620e20424c0 name=\"version\"\nEXIT : test_case=0x5620e20424c0 node=0x5620e20424c0 name=\"version\" result=0\nENTER: test_case=0x5651e75bc0e0 node=0x5651e75bc0e0 name=\"atomic\"\nEXIT : test_case=0x5651e75bc0e0 node=0x5651e75bc0e0 name=\"atomic\" result=0\nENTER: test_case=0x5651e75bc260 node=0x5651e75bc260 name=\"mutex\"\nEXIT : test_case=0x5651e75bc260 node=0x5651e75bc260 name=\"mutex\" result=0\nENTER: test_case=0x5651e75bc620 node=0x5651e75bc620 name=\"shmem\"\nEXIT : test_case=0x5651e75bc620 node=0x5651e75bc620 name=\"shmem\" result=0\nENTER: test_case=0x5651e75bc9a0 node=0x5651e75bc9a0 name=\"condition\"\nEXIT : test_case=0x5651e75bc9a0 node=0x5651e75bc9a0 name=\"condition\" result=0\nENTER: test_case=0x5651e75bce40 node=0x5651e75bce40 name=\"spinlock\"\nEXIT : test_case=0x5651e75bce40 node=0x5651e75bce40 name=\"spinlock\" result=0\nENTER: test_case=0x5651e75bd0a0 node=0x5651e75bd0a0 name=\"alloc\"\nEXIT : test_case=0x5651e75bd0a0 node=0x5651e75bd0a0 name=\"alloc\" result=0\nENTER: test_case=0x5651e75bd300 node=0x5651e75bd300 name=\"irq\"\nEXIT : test_case=0x5651e75bd300 node=0x5651e75bd300 name=\"irq\" result=0\nENTER: test_case=0x5651e75bd4c0 node=0x5651e75bd4c0 name=\"version\"\nEXIT : test_case=0x5651e75bd4c0 node=0x5651e75bd4c0 name=\"version\" result=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_tests_run:\nstruct metal_init_params {\n\n\t/** log message handler (defaults to stderr). */\n\tmetal_log_handler\t\tlog_handler;\n\n\t/** default log message level (defaults to emergency). */\n\tenum metal_log_level\t\tlog_level;\n}\n...\n#define METAL_INIT_DEFAULTS \\\n{.log_handler=metal_default_log_handler,.log_level=METAL_LOG_INFO,\\\n}\n...\nstruct metal_test_case {\n\tstruct metal_list node;\n\tconst char *name;\n\ttest_func_t test;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In metal_tests_run the variable test_case is only used for read-only accesses (reading test_case->name and calling the test function pointer stored in the structure). Per MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when mutation through that pointer is not required. Changing the declaration to 'const struct metal_test_case *test_case' is valid: the result of metal_container_of (a struct metal_test_case *) can be assigned to a const-qualified pointer, and the rest of the code (reading name and calling the stored function pointer) does not require a non-const target. The iteration variable node must remain non-const for the list traversal, but that does not excuse test_case being non-const. Therefore A's claim of a Rule 8.13 violation is justified."
}