{
  "user_message": "An agent A claimed that the following metal_tests_run code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_tests_run.\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe loop iterator 'node' is declared as a non-const pointer: 'struct metal_list *node'. It is only used to traverse/read the list (not to modify the list nodes), so it should be a pointer to a const-qualified type (e.g. 'const struct metal_list *node') and the iteration macro/signature adjusted accordingly.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_tests_run: entry\nparams pointer=(nil)\nusing params pointer=0x7ffc4743eef0\nmetal_init returned=0\niteration=0 node_ptr=0x5636e2fb40e0 test_case_ptr=0x5636e2fb40e0 test_name_ptr=0x5636e2fae082\niteration=0 test_name=\"atomic\" name_len=6\niteration=0 calling test function at 0x5636e2f9fc41\niteration=0 test returned=0\niteration=1 node_ptr=0x5636e2fb4260 test_case_ptr=0x5636e2fb4260 test_name_ptr=0x5636e2fae0ec\niteration=1 test_name=\"mutex\" name_len=5\niteration=1 calling test function at 0x5636e2fa024e\niteration=1 test returned=0\niteration=2 node_ptr=0x5636e2fb4620 test_case_ptr=0x5636e2fb4620 test_name_ptr=0x5636e2fae19d\niteration=2 test_name=\"shmem\" name_len=5\niteration=2 calling test function at 0x5636e2fa0b05\niteration=2 test returned=0\niteration=3 node_ptr=0x5636e2fb49a0 test_case_ptr=0x5636e2fb49a0 test_name_ptr=0x5636e2fae24f\niteration=3 test_name=\"condition\" name_len=9\niteration=3 calling test function at 0x5636e2fa119f\niteration=3 test returned=0\niteration=4 node_ptr=0x5636e2fb4e40 test_case_ptr=0x5636e2fb4e40 test_name_ptr=0x5636e2fae382\niteration=4 test_name=\"spinlock\" name_len=8\niteration=4 calling test function at 0x5636e2fa1b92\niteration=4 test returned=0\niteration=5 node_ptr=0x5636e2fb50a0 test_case_ptr=0x5636e2fb50a0 test_name_ptr=0x5636e2fae40b\niteration=5 test_name=\"alloc\" name_len=5\niteration=5 calling test function at 0x5636e2fa1e09\niteration=5 test returned=0\niteration=6 node_ptr=0x5636e2fb5300 test_case_ptr=0x5636e2fb5300 test_name_ptr=0x5636e2fae50a\niteration=6 test_name=\"irq\" name_len=3\niteration=6 calling test function at 0x5636e2fa1fcf\niteration=6 test returned=0\niteration=7 node_ptr=0x5636e2fb54c0 test_case_ptr=0x5636e2fb54c0 test_name_ptr=0x5636e2fae577\niteration=7 test_name=\"version\" name_len=7\niteration=7 calling test function at 0x5636e2fa241a\niteration=7 test returned=0\nmetal_tests_run: exit errors=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_tests_run:\nstruct metal_init_params {\n\n\t/** log message handler (defaults to stderr). */\n\tmetal_log_handler\t\tlog_handler;\n\n\t/** default log message level (defaults to emergency). */\n\tenum metal_log_level\t\tlog_level;\n}\n...\n#define METAL_INIT_DEFAULTS \\\n{.log_handler=metal_default_log_handler,.log_level=METAL_LOG_INFO,\\\n}\n...\nstruct metal_test_case {\n\tstruct metal_list node;\n\tconst char *name;\n\ttest_func_t test;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In metal_tests_run the loop iterator is declared as 'struct metal_list *node' but the code only uses it to traverse/read the list (node = node->next, passing it to metal_container_of, etc.) and never modifies the pointed-to list nodes via that pointer. Per MISRA C:2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible. Declaring 'node' as 'const struct metal_list *node' would satisfy the rule. Making node const would propagate constness to the container_of result (so test_case should become 'const struct metal_test_case *test_case') \u2014 calling the test function via a const-qualified container is valid (the function pointer is read-only and may still be called). The only reason this would not be a violation is if the iteration macro or other code relies on modifying the nodes via that pointer or performs casts that discard const; there is no evidence of such behavior in the provided code and execution log. Therefore the agent A report is correct: this code violates MISRA C 2023 Rule 8.13 as written."
}