{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_softirq_dispatch:\n```c\nvoid metal_softirq_dispatch(void)\n{\n\tint i;\n\n\tfor (i = 0; i < metal_softirq_num; i++) {\n\t\tstruct metal_irq *irq;\n\t\tchar is_pending = 1;\n\n\t\tif (atomic_load(&metal_softirq_enabled[i]) != 0 &&\n\t\t    atomic_compare_exchange_strong(&metal_softirq_pending[i],\n\t\t\t\t\t\t   &is_pending, 0)) {\n\t\t\tirq = &metal_softirqs[i];\n\t\t\t(void)metal_irq_handle(irq,\n\t\t\t\t\t       i + metal_softirq_cntr.irq_base);\n\t\t}\n\t}\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_softirq_dispatch:\n\n...\n\n...\n\n...\n\n...\nstatic METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr,\n\t\t\t\t    METAL_IRQ_ANY, METAL_SOFTIRQ_NUM,\n\t\t\t\t    NULL,\n\t\t\t\t    metal_softirq_set_enable, NULL,\n\t\t\t\t    metal_softirqs)\n...\nstruct metal_irq {\n\tmetal_irq_handler hd; /**< Interrupt handler */\n\tvoid *arg; /**< Argument to pass to the interrupt handler */\n}\n...\nint irq_base\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "atomic_load(&metal_softirq_enabled[i]) != 0",
    "static METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr, METAL_IRQ_ANY, METAL_SOFTIRQ_NUM, NULL, metal_softirq_set_enable, NULL, metal_softirqs)",
    "(void)metal_irq_handle(irq, i + metal_softirq_cntr.irq_base);",
    "atomic_compare_exchange_strong(&metal_softirq_pending[i], &is_pending, 0)"
  ],
  "explanation": "Most statements in metal_softirq_dispatch are local-variable operations (loop index i, local pointer irq, local char is_pending) and do not modify function parameters. The assignment irq = &metal_softirqs[i] and the local writes to is_pending are modifications of local variables, not of any function parameter. The for-loop control and integer arithmetic (i + metal_softirq_cntr.irq_base) likewise do not alter function parameters. The struct definition and simple data declarations in the additional code do not contain parameter modifications. The items listed above are function calls or macro declarations that take pointer or parameter-like arguments; their implementations should be inspected to ensure they do not modify their formal pointer parameters (i.e. reassign the pointer parameter itself), per MISRA C 2023 Rule 17.8. No other fragments in the provided code modify function parameters and therefore do not need investigation for this rule."
}