{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_softirq_dispatch:\n```c\nvoid metal_softirq_dispatch(void)\n{\n\tint i;\n\n\tfor (i = 0; i < metal_softirq_num; i++) {\n\t\tstruct metal_irq *irq;\n\t\tchar is_pending = 1;\n\n\t\tif (atomic_load(&metal_softirq_enabled[i]) != 0 &&\n\t\t    atomic_compare_exchange_strong(&metal_softirq_pending[i],\n\t\t\t\t\t\t   &is_pending, 0)) {\n\t\t\tirq = &metal_softirqs[i];\n\t\t\t(void)metal_irq_handle(irq,\n\t\t\t\t\t       i + metal_softirq_cntr.irq_base);\n\t\t}\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(void)metal_irq_handle(irq,\n                       i + metal_softirq_cntr.irq_base);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Cannot determine from this fragment alone. The call passes a non-const pointer (irq of type 'struct metal_irq *') to metal_irq_handle. This is not itself a guaranteed violation of MISRA C 2023 Rule 8.13. If the prototype of metal_irq_handle is 'void metal_irq_handle(struct metal_irq *..., ...)' but the function does not modify the pointed-to object, then Rule 8.13 is violated (the parameter should be 'const struct metal_irq *'). If, however, metal_irq_handle legitimately modifies the pointed-to struct or its prototype already takes 'const struct metal_irq *', there is no violation."
}