{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_get_timestamp:\n```c\nunsigned long long metal_get_timestamp(void)\n{\n\tunsigned long long t = 0;\n\tstruct timespec tp;\n\tint r;\n\n\tr = clock_gettime(CLOCK_MONOTONIC, &tp);\n\tif (r == -1) {\n\t\tmetal_log(METAL_LOG_ERROR, \"clock_gettime failed!\\n\");\n\t\treturn t;\n\t}\n\tt = tp.tv_sec * (NS_PER_S);\n\tt += tp.tv_nsec;\n\n\treturn t;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nr = clock_gettime(CLOCK_MONOTONIC, &tp);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. clock_gettime has prototype int clock_gettime(clockid_t, struct timespec *), and it writes into the struct timespec pointed to by tp. The pointer must be non-const so the callee can modify the object, so making it a pointer-to-const is not possible here."
}