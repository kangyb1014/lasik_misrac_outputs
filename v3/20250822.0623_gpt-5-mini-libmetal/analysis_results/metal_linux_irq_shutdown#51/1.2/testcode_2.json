{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses compiler-specific language extensions: it employs the GCC statement-expression construct '({ ... })' and also uses the ',##__VA_ARGS__' comma-swallowing GCC extension in the variadic macro. Both are explicitly documented compiler extensions (GCC) and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_shutdown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/510.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_shutdown as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_shutdown:\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_shutdown code.\n",
  "test_code": "void metal_linux_irq_shutdown(void)\n{\n    int ret;\n    int close_ret;\n    FILE *logf = NULL;\n\n    /* Probe: entry */\n    logf = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER: %s\\n\", __func__);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\n    /* Probe: record intent to set irq_handling_stop */\n    logf = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ACTION: setting irq_handling_stop = true\\n\");\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    irq_handling_stop = true;\n\n    /* Probe: after setting flag */\n    logf = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"STATE: irq_handling_stop=%d\\n\", (irq_handling_stop ? 1 : 0));\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    /* Notify the IRQ thread */\n    metal_linux_irq_notify();\n\n    /* Probe: after notify */\n    logf = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"EVENT: called metal_linux_irq_notify()\\n\");\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    /* Join the IRQ pthread and record return value */\n    ret = pthread_join(irq_pthread, NULL);\n\n    logf = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"CALL: pthread_join(irq_pthread) returned %d\\n\", ret);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    if (ret) {\n        metal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n                  ret);\n\n        /* Probe: record join failure */\n        logf = fopen(\"/tmp/logs/510.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"ERROR: Failed to join IRQ thread: %d\\n\", ret);\n            fflush(logf);\n            fclose(logf);\n            logf = NULL;\n        }\n    }\n\n    /* Probe: record irq_notify_fd before close */\n    logf = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"INFO: about to close irq_notify_fd=%d\\n\", irq_notify_fd);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    close_ret = close(irq_notify_fd);\n\n    /* Probe: record result of close */\n    logf = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"RESULT: close(irq_notify_fd=%d) returned %d\\n\",\n                irq_notify_fd, close_ret);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    metal_mutex_deinit(&irq_lock);\n\n    /* Probe: after mutex deinit */\n    logf = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"EXIT: %s\\n\", __func__);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n}\n"
}