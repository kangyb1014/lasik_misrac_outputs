{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call metal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__) invokes the macro metal_log which is defined using a GCC/Clang statement-expression extension ({ ... }) and uses the GNU token-pasting form '##__VA_ARGS__'. These constructs are compiler extensions; therefore the use of the macro in this fragment constitutes a violation of MISRA C 2023 Rule 1.2. (Note: __func__ itself is a standard identifier and is not an extension.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_shutdown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/510.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_shutdown as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_shutdown:\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_shutdown code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <pthread.h>\n#include <unistd.h>\n\n/*\n * Probe helpers to capture control flow and state information to a file\n * for reproducing the reported violation scenario. These helpers do not\n * change the logic of metal_linux_irq_shutdown and only append logs.\n */\nstatic void probe_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\n/* Log key state: phase label and an integer return code. Cast pthread_t\n * to an unsigned long long for portability in logging. Do not assume\n * any particular internal representation of pthread_t beyond what\n * printing as bits provides.\n */\nextern volatile bool irq_handling_stop;\nextern pthread_t irq_pthread;\nextern int irq_notify_fd;\n\nstatic void probe_log_state(const char *phase, int ret)\n{\n    FILE *f = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (!f)\n        return;\n    /* log phase, ret, boolean flag, pthread id (as number), notify fd */\n    fprintf(f, \"phase=%s ret=%d irq_handling_stop=%d irq_pthread=%llu irq_notify_fd=%d\\n\",\n            phase, ret, (int)irq_handling_stop, (unsigned long long)irq_pthread, irq_notify_fd);\n    fclose(f);\n}\n\nvoid metal_linux_irq_shutdown(void)\n{\n    int ret;\n\n    /* Log entry into the function */\n    probe_log(\"enter: metal_linux_irq_shutdown\");\n    probe_log_state(\"before_metal_log\", 0);\n\n    /* Original logging call (may use compiler extensions inside metal_log) */\n    metal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\n    /* Capture state immediately after the metal_log invocation */\n    probe_log_state(\"after_metal_log\", 0);\n\n    irq_handling_stop = true;\n    probe_log_state(\"after_set_irq_handling_stop\", 0);\n\n    metal_linux_irq_notify();\n    probe_log_state(\"after_notify\", 0);\n\n    ret = pthread_join(irq_pthread, NULL);\n    if (ret) {\n        metal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n                  ret);\n        /* Log the error and return code to the probe file as well */\n        probe_log_state(\"pthread_join_failed\", ret);\n    } else {\n        probe_log_state(\"pthread_join_success\", ret);\n    }\n\n    close(irq_notify_fd);\n    probe_log_state(\"after_close\", 0);\n\n    metal_mutex_deinit(&irq_lock);\n    probe_log_state(\"after_mutex_deinit\", 0);\n\n    probe_log(\"exit: metal_linux_irq_shutdown\");\n}\n"
}