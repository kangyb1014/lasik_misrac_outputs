{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call metal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__); expands to a macro that uses GCC extensions: the macro definition contains a statement-expression ({ ... }) and uses the GCC extension '##__VA_ARGS__' to swallow a comma. __func__ itself is standard C, but the macro expansion relies on compiler-specific extensions, so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_shutdown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/510.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_shutdown as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_shutdown:\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_shutdown code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <stdbool.h>\n#include <time.h>\n#include <stdint.h>\n\n/* External symbols from the original compilation unit.  These are declared\n * so this test file compiles; their definitions come from the rest of the\n * project and are not repeated here. */\nextern void metal_log(int level, const char *fmt, ...);\nextern void metal_linux_irq_notify(void);\nextern pthread_t irq_pthread;\nextern int irq_notify_fd;\nextern volatile bool irq_handling_stop;\nextern void *irq_lock;\nextern void metal_mutex_deinit(void *lock);\n\n/* Avoid defining macros as requested; use const ints for log levels so\n * the original metal_log calls remain as similar as possible. */\nstatic const int METAL_LOG_DEBUG = 0;\nstatic const int METAL_LOG_ERROR = 1;\n\n/* Probe helper: append structured state and control-flow events to a log\n * file so other agents can reproduce and observe the sequence that leads\n * to the reported macro expansion behavior. This function uses only\n * standard C library calls and does not introduce language extensions. */\nstatic void probe_log_state(const char *stage, int ret)\n{\n    FILE *f = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    /* Print key runtime state. Cast pthread_t to an integer type via\n     * uintptr_t for portability (pthread_t may be an integer or pointer). */\n    fprintf(f, \"[%ld] probe: stage=%s, irq_handling_stop=%d, irq_pthread=%#lx, ret=%d, irq_notify_fd=%d\\n\",\n            (long)t,\n            stage,\n            (unsigned long)(uintptr_t)irq_pthread,\n            ret,\n            irq_notify_fd);\n    fflush(f);\n    fclose(f);\n}\n\nvoid metal_linux_irq_shutdown(void)\n{\n    int ret;\n\n    /* Log entry to the external metal_log (preserve original call). */\n    probe_log_state(\"entry_before_metal_log_debug\", -1);\n    metal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n    probe_log_state(\"after_metal_log_debug\", -1);\n\n    /* Original logic preserved: signal stop and notify. */\n    irq_handling_stop = true;\n    probe_log_state(\"after_set_irq_handling_stop\", -1);\n\n    metal_linux_irq_notify();\n    probe_log_state(\"after_notify\", -1);\n\n    /* Join the IRQ thread and record the return code. */\n    ret = pthread_join(irq_pthread, NULL);\n    probe_log_state(\"after_pthread_join\", ret);\n\n    if (ret) {\n        /* Preserve original error logging call. */\n        metal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n                  ret);\n        probe_log_state(\"after_metal_log_error_on_join_failure\", ret);\n    }\n\n    close(irq_notify_fd);\n    probe_log_state(\"after_close\", -1);\n\n    metal_mutex_deinit(&irq_lock);\n    probe_log_state(\"after_mutex_deinit\", -1);\n}\n"
}