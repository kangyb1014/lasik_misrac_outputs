{
  "user_message": "An agent A claimed that the following metal_linux_irq_shutdown code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of metal_linux_irq_shutdown.\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call metal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__); expands to a macro that uses GCC extensions: the macro definition contains a statement-expression ({ ... }) and uses the GCC extension '##__VA_ARGS__' to swallow a comma. __func__ itself is standard C, but the macro expansion relies on compiler-specific extensions, so Rule 1.2 is violated.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1755844257] probe: stage=entry_before_metal_log_debug, irq_handling_stop=-1495505344, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-1492910922\n[1755844257] probe: stage=after_metal_log_debug, irq_handling_stop=-1495505344, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-1492910922\n[1755844257] probe: stage=after_set_irq_handling_stop, irq_handling_stop=-1495505344, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-1492910922\n[1755844257] probe: stage=after_notify, irq_handling_stop=-1495505344, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-1492910922\n[1755844257] probe: stage=after_pthread_join, irq_handling_stop=-1495505344, irq_pthread=0, ret=5, irq_notify_fd=-1492910922\n[1755844257] probe: stage=after_close, irq_handling_stop=-1495505344, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-1492910922\n[1755844257] probe: stage=after_mutex_deinit, irq_handling_stop=-1495505344, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-1492910922\n[1755844258] probe: stage=entry_before_metal_log_debug, irq_handling_stop=427644480, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-128357407\n[1755844258] probe: stage=after_metal_log_debug, irq_handling_stop=427644480, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-128357407\n[1755844258] probe: stage=after_set_irq_handling_stop, irq_handling_stop=427644480, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-128357407\n[1755844258] probe: stage=after_notify, irq_handling_stop=427644480, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-128357407\n[1755844258] probe: stage=after_pthread_join, irq_handling_stop=427644480, irq_pthread=0, ret=5, irq_notify_fd=-128357407\n[1755844258] probe: stage=after_close, irq_handling_stop=427644480, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-128357407\n[1755844258] probe: stage=after_mutex_deinit, irq_handling_stop=427644480, irq_pthread=0xffffffff, ret=5, irq_notify_fd=-128357407\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_linux_irq_shutdown:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n...\nstatic bool irq_handling_stop\n...\nstatic int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t}\n\treturn ret;\n}\n...\nstatic int irq_notify_fd\n...\nstatic metal_mutex_t irq_lock\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The call to metal_log in metal_linux_irq_shutdown expands to the macro shown in the additional code, which uses two non\u2011standard GCC extensions: the statement\u2011expression construct ({ ... }) and the use of '##__VA_ARGS__' to swallow a comma. Both are documented compiler extensions (GCC) and therefore constitute use of language extensions. MISRA C 2023 Rule 1.2 prohibits use of language extensions, so this macro expansion causes a Rule 1.2 violation. (Note: __func__ itself is standard C, but that does not negate the macro's use of extensions.)"
}