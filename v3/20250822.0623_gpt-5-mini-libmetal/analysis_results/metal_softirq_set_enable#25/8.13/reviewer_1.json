{
  "user_message": "An agent A claimed that the following metal_softirq_set_enable code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_softirq_set_enable.\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'cntr' is declared as 'struct metal_irq_controller *cntr' but is only read (cntr->irq_base and cntr->irq_num) and never modified in the function; per MISRA C 2023 Rule 8.13 it should be declared as a pointer to const, e.g. 'const struct metal_irq_controller *cntr'.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the shown function the parameter cntr is only used for reading its members (cntr->irq_base and cntr->irq_num) and the function does not modify the pointee. MISRA C 2023 Rule 8.13 requires that pointers should point to const-qualified types whenever possible; therefore cntr should be declared as const struct metal_irq_controller *cntr (unless there is some external API/compatibility reason preventing that). No evidence is present in the snippet of any such exception, so this is a violation."
}