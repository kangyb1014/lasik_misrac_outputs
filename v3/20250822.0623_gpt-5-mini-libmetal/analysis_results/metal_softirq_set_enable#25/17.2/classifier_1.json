{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set_enable:\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_softirq_set_enable:\n\n...\n#define METAL_IRQ_ENABLE 1U\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\natomic_store(&metal_softirq_enabled[irq], 1);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown code: atomic_store(&metal_softirq_enabled[irq], 1) calls the atomic_store operation, not metal_softirq_set_enable, so there is no direct or indirect recursive call. A concrete violation scenario would be if atomic_store were implemented (or macro-expanded) to call metal_softirq_set_enable (directly) or to call a function/path that eventually calls metal_softirq_set_enable (indirect recursion), e.g., if atomic_store invoked a callback function pointer that pointed to metal_softirq_set_enable."
}