{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmetal_linux_register_bus assigns lbus->bus.name = lbus->bus_name and then calls metal_bus_register(&lbus->bus). metal_bus_register calls strlen(bus->name). If lbus->bus_name does not point to a valid NUL-terminated string (for example it points to a non-terminated char buffer, a truncated slice, or a dangling/invalid pointer), the call to strlen can read beyond the bounds of the object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_bus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_bus as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_bus:\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_bus code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/359.txt.\n * This helper intentionally only logs pointer values and integer results to\n * avoid dereferencing or reading user-provided string buffers (which could\n * itself create out-of-bounds accesses). */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n    struct linux_driver *ldrv;\n    int ret, error = -ENODEV;\n\n    /* Log entry and key pointers (do not dereference bus_name) */\n    probe_log(\"ENTER: metal_linux_probe_bus: lbus=%p, lbus->bus_name=%p, &lbus->bus=%p\",\n              (void *)lbus, (void *)lbus->bus_name, (void *)&lbus->bus);\n\n    lbus->sbus = sysfs_open_bus(lbus->bus_name);\n    probe_log(\"sysfs_open_bus returned sbus=%p for bus_name=%p\",\n              (void *)lbus->sbus, (void *)lbus->bus_name);\n    if (!lbus->sbus) {\n        probe_log(\"EXIT: sysfs_open_bus failed, returning -ENODEV\");\n        return -ENODEV;\n    }\n\n    for_each_linux_driver(lbus, ldrv) {\n        probe_log(\"PROBE START: ldrv=%p for lbus=%p\", (void *)ldrv, (void *)lbus);\n        ret = metal_linux_probe_driver(lbus, ldrv);\n        probe_log(\"PROBE RESULT: ldrv=%p returned %d\", (void *)ldrv, ret);\n        /* Clear the error if any driver is available */\n        if (!ret)\n            error = ret;\n    }\n\n    if (error) {\n        probe_log(\"ERROR AFTER PROBES: error=%d, closing bus %p\", error, (void *)&lbus->bus);\n        metal_linux_bus_close(&lbus->bus);\n        probe_log(\"Bus closed due to error, returning %d\", error);\n        return error;\n    }\n\n    probe_log(\"No probe errors, about to call metal_linux_register_bus: lbus=%p, bus_name=%p, &lbus->bus=%p\",\n              (void *)lbus, (void *)lbus->bus_name, (void *)&lbus->bus);\n    error = metal_linux_register_bus(lbus);\n    probe_log(\"AFTER REGISTER: metal_linux_register_bus returned %d for lbus=%p\", error, (void *)lbus);\n\n    if (error) {\n        probe_log(\"Registration failed (error=%d), closing bus %p\", error, (void *)&lbus->bus);\n        metal_linux_bus_close(&lbus->bus);\n    } else {\n        probe_log(\"Registration succeeded for lbus=%p\", (void *)lbus);\n    }\n\n    probe_log(\"EXIT: metal_linux_probe_bus returning %d\", error);\n    return error;\n}\n"
}