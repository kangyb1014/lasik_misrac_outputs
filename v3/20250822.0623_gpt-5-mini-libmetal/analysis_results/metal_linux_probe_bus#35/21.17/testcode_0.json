{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmetal_bus_register calls strlen(bus->name) after only checking bus and bus->name for NULL. There is no guarantee in this function that the object pointed to by bus->name is a null-terminated string of appropriate bounds. If bus->name points to a non-terminated char array (for example from a prior non-terminating strncpy or corrupted/uninitialized memory), strlen will read past the object bounds, causing an out-of-bounds access and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_bus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_bus as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_bus:\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_bus code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Helper probe function: append diagnostics to /tmp/logs/359.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n    struct linux_driver *ldrv;\n    int ret, error = -ENODEV;\n\n    /* Log entry and key pointer/state values (do not dereference strings). */\n    probe_log(\"enter: metal_linux_probe_bus: lbus=%p, bus_name_ptr=%p, bus_struct_ptr=%p\",\n              (void *)lbus, (void *)(lbus ? lbus->bus_name : NULL), (void *)(lbus ? &lbus->bus : NULL));\n\n    lbus->sbus = sysfs_open_bus(lbus->bus_name);\n    if (!lbus->sbus) {\n        probe_log(\"sysfs_open_bus failed: sbus=NULL, bus_name_ptr=%p\", (void *)lbus->bus_name);\n        return -ENODEV;\n    }\n\n    probe_log(\"sysfs_open_bus succeeded: sbus=%p\", (void *)lbus->sbus);\n\n    for_each_linux_driver(lbus, ldrv) {\n        probe_log(\"probing driver: ldrv=%p\", (void *)ldrv);\n        ret = metal_linux_probe_driver(lbus, ldrv);\n        probe_log(\"metal_linux_probe_driver returned %d for driver %p\", ret, (void *)ldrv);\n        /* Clear the error if any driver is available */\n        if (!ret)\n            error = ret;\n    }\n\n    if (error) {\n        probe_log(\"no driver probed successfully, error=%d: closing bus %p\", error, (void *)&lbus->bus);\n        metal_linux_bus_close(&lbus->bus);\n        return error;\n    }\n\n    /* Before registering the bus, log the bus.name pointer state.\n     * Important: do NOT dereference bus.name here (to avoid creating new undefined behavior).\n     * We record that bus.name is non-NULL and the fact we're about to call metal_linux_register_bus,\n     * which is where the reported violation (unsafe strlen) may occur. */\n    probe_log(\"about to register bus: bus_struct=%p, bus_name_ptr=%p\",\n              (void *)&lbus->bus, (void *)lbus->bus.name);\n\n    error = metal_linux_register_bus(lbus);\n    probe_log(\"metal_linux_register_bus returned %d for bus %p\", error, (void *)&lbus->bus);\n\n    if (error) {\n        probe_log(\"registration failed (error=%d), closing bus %p\", error, (void *)&lbus->bus);\n        metal_linux_bus_close(&lbus->bus);\n    } else {\n        probe_log(\"registration succeeded for bus %p\", (void *)&lbus->bus);\n    }\n\n    probe_log(\"exit: metal_linux_probe_bus returning %d for lbus=%p\", error, (void *)lbus);\n    return error;\n}\n"
}