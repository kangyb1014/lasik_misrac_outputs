{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_io_block_read:\nstruct metal_io_region {\n\tvoid\t\t\t*virt;      /**< base virtual address */\n\tconst metal_phys_addr_t\t*physmap;   /**< table of base physical address\n\t\t\t\t\t\t of each of the pages in the I/O\n\t\t\t\t\t\t region */\n\tsize_t\t\t\tsize;       /**< size of the I/O region */\n\tunsigned long\t\tpage_shift; /**< page shift of I/O region */\n\tmetal_phys_addr_t\tpage_mask;  /**< page mask of I/O region */\n\tunsigned int\t\tmem_flags;  /**< memory attribute of the\n\t\t\t\t\t\t I/O region */\n\tstruct metal_io_ops\tops;        /**< I/O region operations */\n}\n...\nstruct metal_io_ops {\n\tuint64_t\t(*read)(struct metal_io_region *io,\n\t\t\t\tunsigned long offset,\n\t\t\t\tmemory_order order,\n\t\t\t\tint width);\n\tvoid\t\t(*write)(struct metal_io_region *io,\n\t\t\t\t unsigned long offset,\n\t\t\t\t uint64_t value,\n\t\t\t\t memory_order order,\n\t\t\t\t int width);\n\tint\t\t(*block_read)(struct metal_io_region *io,\n\t\t\t\t      unsigned long offset,\n\t\t\t\t      void *restrict dst,\n\t\t\t\t      memory_order order,\n\t\t\t\t      int len);\n\tint\t\t(*block_write)(struct metal_io_region *io,\n\t\t\t\t       unsigned long offset,\n\t\t\t\t       const void *restrict src,\n\t\t\t\t       memory_order order,\n\t\t\t\t       int len);\n\tvoid\t\t(*block_set)(struct metal_io_region *io,\n\t\t\t\t     unsigned long offset,\n\t\t\t\t     unsigned char value,\n\t\t\t\t     memory_order order,\n\t\t\t\t     int len);\n\tvoid\t\t(*close)(struct metal_io_region *io);\n\tmetal_phys_addr_t (*offset_to_phys)(struct metal_io_region *io,\n\t\t\t\t\t    unsigned long offset);\n\tunsigned long\t(*phys_to_offset)(struct metal_io_region *io,\n\t\t\t\t\t  metal_phys_addr_t phys);\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment itself does not call any functions from <string.h>, so it does not directly violate MISRA C 2023 Rule 21.17. However, the check (offset + len) > io->size is vulnerable to unsigned wrap/conversion issues: e.g. if offset and io->size are very large (offset < io->size so metal_io_virt returned non-NULL) and len is a positive int such that offset + (unsigned long)len overflows and wraps to a small value, the condition can be false and len will not be clamped. That can lead to subsequent reads/writes beyond the I/O region (and would therefore cause a Rule 21.17 violation if those later copies use string.h routines like memcpy/memmove). Example concrete scenario: offset = 0xFFFFFFFFFFFFFFF0UL, io->size = 0xFFFFFFFFFFFFFFFFUL (ptr valid), len = 32 -> offset + len wraps to a small value < io->size, so len remains 32 although offset+32 > io->size; later copying 32 bytes will access beyond the region."
}