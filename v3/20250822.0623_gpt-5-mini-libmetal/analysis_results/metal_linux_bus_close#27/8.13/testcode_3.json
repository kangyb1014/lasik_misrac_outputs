{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function-pointer field int (*dev_dma_map)(... struct metal_sg *sg_in, ...) declares sg_in as a non-const pointer even though it is an input scatter\u2011gather list and should be a pointer to a const-qualified type (e.g. const struct metal_sg *sg_in). That violates MISRA C 2023 Rule 8.13. (Note: drv_name/mod_name/cls_name are already const and sdrv is intentionally mutable \u2014 metal_linux_bus_close sets it to NULL \u2014 so those do not violate the rule.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_close:\n```c\nstatic void metal_linux_bus_close(struct metal_bus *bus)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_driver *ldrv;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tif (ldrv->sdrv)\n\t\t\tsysfs_close_driver(ldrv->sdrv);\n\t\tldrv->sdrv = NULL;\n\t}\n\n\tsysfs_close_bus(lbus->sbus);\n\tlbus->sbus = NULL;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append logs about bus/driver state to /tmp/logs/273.txt.\n   Kept minimal and does not alter program logic. */\nstatic void metal_probe_bus_driver(const struct linux_bus *lbus,\n                                  const struct linux_driver *ldrv,\n                                  const char *event)\n{\n    FILE *f = fopen(\"/tmp/logs/273.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* Log pointers and known string fields if available. Guard against NULL ldrv. */\n    if (ldrv != NULL) {\n        fprintf(f, \"EVENT=%s lbus=%p ldrv=%p drv_name=%s mod_name=%s cls_name=%s sdrv=%p\\n\",\n                event,\n                (const void *)lbus,\n                (const void *)ldrv,\n                ldrv->drv_name ? ldrv->drv_name : \"(null)\",\n                ldrv->mod_name ? ldrv->mod_name : \"(null)\",\n                ldrv->cls_name ? ldrv->cls_name : \"(null)\",\n                (void *)ldrv->sdrv);\n    } else {\n        fprintf(f, \"EVENT=%s lbus=%p ldrv=(null)\\n\", event, (const void *)lbus);\n    }\n\n    fclose(f);\n}\n\nstatic void metal_probe_bus(const struct linux_bus *lbus, const char *event)\n{\n    FILE *f = fopen(\"/tmp/logs/273.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    fprintf(f, \"EVENT=%s lbus=%p sbus=%p\\n\", event, (const void *)lbus, (void *)lbus->sbus);\n    fclose(f);\n}\n\nstatic void metal_linux_bus_close(struct metal_bus *bus)\n{\n    struct linux_bus *lbus = to_linux_bus(bus);\n    struct linux_driver *ldrv;\n\n    /* Log entry to bus-close: initial state */\n    metal_probe_bus(lbus, \"bus_close_enter\");\n\n    for_each_linux_driver(lbus, ldrv) {\n        /* Log driver state before any action */\n        metal_probe_bus_driver(lbus, ldrv, \"driver_loop_before\");\n\n        if (ldrv->sdrv) {\n            /* Log that we are about to close sysfs driver */\n            metal_probe_bus_driver(lbus, ldrv, \"driver_sysfs_close_call\");\n            sysfs_close_driver(ldrv->sdrv);\n        } else {\n            metal_probe_bus_driver(lbus, ldrv, \"driver_no_sdrv_skip\");\n        }\n\n        ldrv->sdrv = NULL;\n\n        /* Log driver state after nulling sdrv */\n        metal_probe_bus_driver(lbus, ldrv, \"driver_after_set_null\");\n    }\n\n    /* Log before closing bus sysfs */\n    metal_probe_bus(lbus, \"bus_sysfs_close_call\");\n    sysfs_close_bus(lbus->sbus);\n\n    lbus->sbus = NULL;\n\n    /* Log after bus sysfs closed and cleared */\n    metal_probe_bus(lbus, \"bus_close_exit\");\n}\n"
}