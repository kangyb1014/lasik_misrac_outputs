{
  "user_message": "An agent A claimed that the following metal_linux_bus_close code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_linux_bus_close.\n```c\nstatic void metal_linux_bus_close(struct metal_bus *bus)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_driver *ldrv;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tif (ldrv->sdrv)\n\t\t\tsysfs_close_driver(ldrv->sdrv);\n\t\tldrv->sdrv = NULL;\n\t}\n\n\tsysfs_close_bus(lbus->sbus);\n\tlbus->sbus = NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function-pointer field int (*dev_dma_map)(... struct metal_sg *sg_in, ...) declares sg_in as a non-const pointer even though it is an input scatter\u2011gather list and should be a pointer to a const-qualified type (e.g. const struct metal_sg *sg_in). That violates MISRA C 2023 Rule 8.13. (Note: drv_name/mod_name/cls_name are already const and sdrv is intentionally mutable \u2014 metal_linux_bus_close sets it to NULL \u2014 so those do not violate the rule.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nEVENT=bus_close_enter lbus=0x7f366677fb60 sbus=0x558a951f38c0\nEVENT=driver_loop_before lbus=0x7f366677fb60 ldrv=0x7f366677fbc0 drv_name=uio_pdrv_genirq mod_name=uio_pdrv_genirq cls_name=uio sdrv=0x558a951f3a20\nEVENT=driver_sysfs_close_call lbus=0x7f366677fb60 ldrv=0x7f366677fbc0 drv_name=uio_pdrv_genirq mod_name=uio_pdrv_genirq cls_name=uio sdrv=0x558a951f3a20\nEVENT=driver_after_set_null lbus=0x7f366677fb60 ldrv=0x7f366677fbc0 drv_name=uio_pdrv_genirq mod_name=uio_pdrv_genirq cls_name=uio sdrv=(nil)\nEVENT=driver_loop_before lbus=0x7f366677fb60 ldrv=0x7f366677fc08 drv_name=uio_dmem_genirq mod_name=uio_dmem_genirq cls_name=uio sdrv=0x558a951f3bc0\nEVENT=driver_sysfs_close_call lbus=0x7f366677fb60 ldrv=0x7f366677fc08 drv_name=uio_dmem_genirq mod_name=uio_dmem_genirq cls_name=uio sdrv=0x558a951f3bc0\nEVENT=driver_after_set_null lbus=0x7f366677fb60 ldrv=0x7f366677fc08 drv_name=uio_dmem_genirq mod_name=uio_dmem_genirq cls_name=uio sdrv=(nil)\nEVENT=bus_sysfs_close_call lbus=0x7f366677fb60 sbus=0x558a951f38c0\nEVENT=bus_close_exit lbus=0x7f366677fb60 sbus=(nil)\nEVENT=bus_close_enter lbus=0x7f3666780dc8 sbus=0x558a951f3d60\nEVENT=driver_loop_before lbus=0x7f3666780dc8 ldrv=0x7f3666780e28 drv_name=vfio-pci mod_name=vfio-pci cls_name=(null) sdrv=0x558a951f3ec0\nEVENT=driver_sysfs_close_call lbus=0x7f3666780dc8 ldrv=0x7f3666780e28 drv_name=vfio-pci mod_name=vfio-pci cls_name=(null) sdrv=0x558a951f3ec0\nEVENT=driver_after_set_null lbus=0x7f3666780dc8 ldrv=0x7f3666780e28 drv_name=vfio-pci mod_name=vfio-pci cls_name=(null) sdrv=(nil)\nEVENT=driver_loop_before lbus=0x7f3666780dc8 ldrv=0x7f3666780e70 drv_name=uio_pci_generic mod_name=uio_pci_generic cls_name=uio sdrv=0x558a951f4060\nEVENT=driver_sysfs_close_call lbus=0x7f3666780dc8 ldrv=0x7f3666780e70 drv_name=uio_pci_generic mod_name=uio_pci_generic cls_name=uio sdrv=0x558a951f4060\nEVENT=driver_after_set_null lbus=0x7f3666780dc8 ldrv=0x7f3666780e70 drv_name=uio_pci_generic mod_name=uio_pci_generic cls_name=uio sdrv=(nil)\nEVENT=bus_sysfs_close_call lbus=0x7f3666780dc8 sbus=0x558a951f3d60\nEVENT=bus_close_exit lbus=0x7f3666780dc8 sbus=(nil)\nEVENT=bus_close_enter lbus=0x56212d977260 sbus=0x56214911d8c0\nEVENT=driver_loop_before lbus=0x56212d977260 ldrv=0x56212d9772c0 drv_name=uio_pdrv_genirq mod_name=uio_pdrv_genirq cls_name=uio sdrv=0x56214911da20\nEVENT=driver_sysfs_close_call lbus=0x56212d977260 ldrv=0x56212d9772c0 drv_name=uio_pdrv_genirq mod_name=uio_pdrv_genirq cls_name=uio sdrv=0x56214911da20\nEVENT=driver_after_set_null lbus=0x56212d977260 ldrv=0x56212d9772c0 drv_name=uio_pdrv_genirq mod_name=uio_pdrv_genirq cls_name=uio sdrv=(nil)\nEVENT=driver_loop_before lbus=0x56212d977260 ldrv=0x56212d977308 drv_name=uio_dmem_genirq mod_name=uio_dmem_genirq cls_name=uio sdrv=0x56214911dbc0\nEVENT=driver_sysfs_close_call lbus=0x56212d977260 ldrv=0x56212d977308 drv_name=uio_dmem_genirq mod_name=uio_dmem_genirq cls_name=uio sdrv=0x56214911dbc0\nEVENT=driver_after_set_null lbus=0x56212d977260 ldrv=0x56212d977308 drv_name=uio_dmem_genirq mod_name=uio_dmem_genirq cls_name=uio sdrv=(nil)\nEVENT=bus_sysfs_close_call lbus=0x56212d977260 sbus=0x56214911d8c0\nEVENT=bus_close_exit lbus=0x56212d977260 sbus=(nil)\nEVENT=bus_close_enter lbus=0x56212d9784c8 sbus=0x56214911dd60\nEVENT=driver_loop_before lbus=0x56212d9784c8 ldrv=0x56212d978528 drv_name=vfio-pci mod_name=vfio-pci cls_name=(null) sdrv=0x56214911dec0\nEVENT=driver_sysfs_close_call lbus=0x56212d9784c8 ldrv=0x56212d978528 drv_name=vfio-pci mod_name=vfio-pci cls_name=(null) sdrv=0x56214911dec0\nEVENT=driver_after_set_null lbus=0x56212d9784c8 ldrv=0x56212d978528 drv_name=vfio-pci mod_name=vfio-pci cls_name=(null) sdrv=(nil)\nEVENT=driver_loop_before lbus=0x56212d9784c8 ldrv=0x56212d978570 drv_name=uio_pci_generic mod_name=uio_pci_generic cls_name=uio sdrv=0x56214911e060\nEVENT=driver_sysfs_close_call lbus=0x56212d9784c8 ldrv=0x56212d978570 drv_name=uio_pci_generic mod_name=uio_pci_generic cls_name=uio sdrv=0x56214911e060\nEVENT=driver_after_set_null lbus=0x56212d9784c8 ldrv=0x56212d978570 drv_name=uio_pci_generic mod_name=uio_pci_generic cls_name=uio sdrv=(nil)\nEVENT=bus_sys\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_linux_bus_close:\nstruct linux_bus {\n\tstruct metal_bus\tbus;\n\tconst char\t\t*bus_name;\n\tstruct linux_driver\tdrivers[MAX_DRIVERS];\n\tstruct sysfs_bus\t*sbus;\n}\n...\nstruct linux_driver {\n\tconst char\t\t*drv_name;\n\tconst char\t\t*mod_name;\n\tconst char\t\t*cls_name;\n\tstruct sysfs_driver\t*sdrv;\n\tint\t\t\t(*dev_open)(struct linux_bus *lbus,\n\t\t\t\t\t    struct linux_device *ldev);\n\tvoid\t\t\t(*dev_close)(struct linux_bus *lbus,\n\t\t\t\t\t     struct linux_device *ldev);\n\tvoid\t\t\t(*dev_irq_ack)(struct linux_bus *lbus,\n\t\t\t\t\t     struct linux_device *ldev,\n\t\t\t\t\t     int irq);\n\tint\t\t\t(*dev_dma_map)(struct linux_bus *lbus,\n\t\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\t\tuint32_t dir,\n\t\t\t\t\t\tstruct metal_sg *sg_in,\n\t\t\t\t\t\tint nents_in,\n\t\t\t\t\t\tstruct metal_sg *sg_out);\n\tvoid\t\t\t(*dev_dma_unmap)(struct linux_bus *lbus,\n\t\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\t\tuint32_t dir,\n\t\t\t\t\t\tstruct metal_sg *sg,\n\t\t\t\t\t\tint nents);\n}\n...\nstruct metal_bus {\n\tconst char\t\t*name;\n\tstruct metal_bus_ops\tops;\n\tstruct metal_list\tdevices;\n\tstruct metal_list\tnode;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is incorrect for metal_linux_bus_close. The function legitimately modifies ldrv->sdrv and lbus->sbus (setting them to NULL) and therefore those pointer members must be non-const; drv_name/mod_name/cls_name are already const as shown. Rule 8.13 would only be relevant if a pointer could be declared to point to a const-qualified type but is not. The only candidate mentioned by agent A is the dev_dma_map signature (struct metal_sg *sg_in). That is a separate declaration in struct linux_driver and not used by metal_linux_bus_close. Whether dev_dma_map should use const struct metal_sg *sg_in depends on whether implementations modify the pointed-to data; you cannot conclude a Rule 8.13 violation for dev_dma_map from the provided information. In short: metal_linux_bus_close does not violate MISRA C 2023 Rule 8.13; the agent's scenario points to a different declaration and is not demonstrated to be a violation either."
}