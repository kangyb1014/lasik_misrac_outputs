{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of mutex:\n```c\nstatic int mutex(void)\n{\n\tmetal_mutex_t lock;\n\tconst int threads = 10;\n\tint rc;\n\n\tmetal_mutex_init(&lock);\n\n\trc = metal_run(threads, mutex_thread, &lock);\n\n\tmetal_mutex_deinit(&lock);\n\n\treturn rc;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nrc = metal_run(threads, mutex_thread, &lock);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: &lock is a pointer to a mutable mutex object that is initialized, used and deinitialized (the code calls metal_mutex_init/metal_mutex_deinit and passes the address to a thread routine). The pointee is intentionally mutable and must be modifiable by metal_run/mutex_thread, so qualifying the pointer as const would be inappropriate. Therefore Rule 8.13 is not violated here."
}