{
  "result": "success",
  "message": "consumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: acquired lock; counter=0\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: acquired lock; counter=0\nconsumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: acquired lock; counter=0\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: acquired lock; counter=0\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: acquired lock; counter=0\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: acquired lock; counter=0\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: executed (void)arg (unused parameter); counter=-1\nconsumer_thread: acquired lock; counter=0\nconsumer_thread: thread entry (before acquiring lock); counter=-1\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: acquired lock; counter=0\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: acquired lock; counter=0\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: woke from nempty_condv; counter=1\nconsumer_thread: decremented counter; counter=0\nconsumer_thread: signalled nfull_condv; counter=0\nconsumer_thread: released lock; exiting thread; counter=0\nconsumer_thread: woke from nempty_condv; counter=1\nconsumer_thread: decremented counter; counter=0\nconsumer_thread: signalled nfull_condv; counter=0\nconsumer_thread: released lock; exiting thread; counter=0\nconsumer_thread: woke from nempty_condv; counter=1\nconsumer_thread: decremented counter; counter=0\nconsumer_thread: signalled nfull_condv; counter=0\nconsumer_thread: released lock; exiting thread; counter=1\nconsumer_thread: woke from nempty_condv; counter=2\nconsumer_thread: decremented counter; counter=1\nconsumer_thread: signalled nfull_condv; counter=1\nconsumer_thread: released lock; exiting thread; counter=1\nconsumer_thread: woke from nempty_condv; counter=2\nconsumer_thread: decremented counter; counter=1\nconsumer_thread: signalled nfull_condv; counter=1\nconsumer_thread: released lock; exiting thread; counter=1\nconsumer_thread: acquired lock; counter=1\nconsumer_thread: decremented counter; counter=0\nconsumer_thread: signalled nfull_condv; counter=0\nconsumer_thread: released lock; exiting thread; counter=0\nconsumer_thread: woke from nempty_condv; counter=0\nconsumer_thread: counter is zero; about to wait on nempty_condv; counter=0\nconsumer_thread: woke from nempty_condv; counter=1\nconsumer_thread: decremented counter; counter=0\nconsumer_thread: signalled nfull_condv; counter=0\nconsumer_thread: released lock; exiting thread; counter=0\nconsumer_thread: woke from nempty_condv; counter=1\nconsumer_thread: decremented counter; counter=0\nconsumer_thread: signalled nfull_condv; counter="
}