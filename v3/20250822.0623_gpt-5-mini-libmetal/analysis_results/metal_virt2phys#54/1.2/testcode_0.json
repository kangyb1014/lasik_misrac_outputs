{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC language extensions: it employs the statement-expression construct '({ ... })' and the GCC variadic-macro comma-swallowing extension '##__VA_ARGS__'. Both are documented compiler extensions (GCC) and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/540.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stdint.h>\n#include <unistd.h>\n\n/* Probe helper: append a log line to /tmp/logs/540.txt. */\nstatic void probe_append_log(const char *line)\n{\n    FILE *f = fopen(\"/tmp/logs/540.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"%s\\n\", line);\n        fclose(f);\n    }\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n    off_t offset;\n    uint64_t entry;\n    int error;\n    /* Preserve errno across this function to avoid side effects from logging. */\n    int errno_saved = errno;\n\n    /* Log function entry and key inputs. */\n    {\n        char buf[256];\n        /* _metal symbol members are referenced later; log basic inputs now. */\n        /* Use pointer and placeholders only; avoid evaluating _metal here. */\n        snprintf(buf, sizeof(buf), \"ENTER metal_virt2phys: addr=%p, phys_ptr=%p\", addr, (void *)phys);\n        probe_append_log(buf);\n    }\n\n    if (_metal.pagemap_fd < 0) {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"EXIT metal_virt2phys: pagemap_fd=%d < 0 -> return -EINVAL\", _metal.pagemap_fd);\n        probe_append_log(buf);\n        errno = errno_saved;\n        return -EINVAL;\n    }\n\n    offset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\n    /* Log before pread */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"pread: fd=%d, offset=0x%llx, size=%zu, page_shift=%d\",\n                 _metal.pagemap_fd, (unsigned long long)offset, sizeof(entry), _metal.page_shift);\n        probe_append_log(buf);\n    }\n\n    error = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n    if (error < 0) {\n        /* Capture errno early for return and message stability. */\n        int saved_err = errno;\n        char errbuf[128];\n        (void)snprintf(errbuf, sizeof(errbuf), \"%s\", strerror(saved_err));\n\n        /* Preserve what the original code logged, but avoid altering errno before return. */\n        metal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n                  (unsigned long long)offset, errbuf);\n\n        /* Additional probe log with state for reproduction. */\n        {\n            char buf[512];\n            snprintf(buf, sizeof(buf), \"ERROR pread failed: fd=%d, offset=0x%llx, errno=%d (%s)\",\n                     _metal.pagemap_fd, (unsigned long long)offset, saved_err, errbuf);\n            probe_append_log(buf);\n        }\n\n        errno = errno_saved;\n        return -saved_err;\n    }\n\n    /* Log the raw pagemap entry read. */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"pread OK: offset=0x%llx, entry=0x%llx\",\n                 (unsigned long long)offset, (unsigned long long)entry);\n        probe_append_log(buf);\n    }\n\n    /* Check page present and not swapped. */\n    if ((entry >> 62) != 2) {\n        metal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n                  (unsigned long long)offset, (unsigned long long)entry);\n\n        /* Probe log for the non-present case. */\n        {\n            char buf[256];\n            snprintf(buf, sizeof(buf), \"PAGE NOT PRESENT: offset=0x%llx, entry=0x%llx\",\n                     (unsigned long long)offset, (unsigned long long)entry);\n            probe_append_log(buf);\n        }\n\n        errno = errno_saved;\n        return -ENOENT;\n    }\n\n    *phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\n    /* Log final physical address computed. */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"SUCCESS: phys=0x%lx computed from entry=0x%llx\",\n                 *phys, (unsigned long long)entry);\n        probe_append_log(buf);\n    }\n\n    errno = errno_saved;\n    return 0;\n}\n"
}