{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'addr' is declared as void * but is only read (cast to uintptr_t and used); it should be declared as const void *addr. 'phys' is an output parameter and should remain non-const. Because 'addr' can be const-qualified, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n\n/* Probe helper: append textual logs to /tmp/logs/543.txt. */\nstatic void metal_v2p_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/543.txt\", \"a\");\n    if (f == NULL) {\n        /* If we cannot open the log file, do not alter original behaviour. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified metal_virt2phys with probes inserted. The original logic is\n * preserved; probes only record inputs, intermediate state and outcomes\n * to /tmp/logs/543.txt to demonstrate the reported pointer-const issue.\n */\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n    off_t offset;\n    uint64_t entry;\n    int error;\n\n    /* Log entry into function and initial state. */\n    metal_v2p_probe(\"metal_virt2phys ENTER: addr=%p, phys_ptr=%p, pagemap_fd=%d, page_shift=%d\",\n                    addr, (void *)phys, _metal.pagemap_fd, _metal.page_shift);\n\n    if (_metal.pagemap_fd < 0)\n        return -EINVAL;\n\n    /* Compute offset from the virtual address. */\n    offset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n    metal_v2p_probe(\"computed offset: addr=%p -> offset=0x%llx (page_shift=%d)\",\n                    addr, (unsigned long long)offset, _metal.page_shift);\n\n    error = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n    metal_v2p_probe(\"pread returned: error=%d, expected_bytes=%zu, entry=0x%llx\",\n                    error, sizeof(entry), (unsigned long long)entry);\n\n    if (error < 0) {\n        metal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n                  (unsigned long long)offset, strerror(errno));\n        metal_v2p_probe(\"pread failed: offset=0x%llx, errno=%d (%s)\",\n                        (unsigned long long)offset, errno, strerror(errno));\n        return -errno;\n    }\n\n    /* Check page present and not swapped. */\n    {\n        unsigned int present = (unsigned int)(entry >> 62);\n        metal_v2p_probe(\"entry flags: entry=0x%llx, top_bits=%u\", (unsigned long long)entry, present);\n        if (present != 2U) {\n            metal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n                      (unsigned long long)offset, (unsigned long long)entry);\n            metal_v2p_probe(\"page not present: offset=0x%llx, entry=0x%llx, present=%u\",\n                            (unsigned long long)offset, (unsigned long long)entry, present);\n            return -ENOENT;\n        }\n    }\n\n    /* Compute physical address and log result before assigning. */\n    {\n        unsigned long phys_val = (unsigned long)((entry & ((1ULL << 54) - 1)) << _metal.page_shift);\n        metal_v2p_probe(\"computed phys: entry=0x%llx -> phys=0x%lx\", (unsigned long long)entry, phys_val);\n        *phys = phys_val;\n    }\n\n    metal_v2p_probe(\"metal_virt2phys EXIT: success, phys_ptr=%p, phys_value=0x%lx\",\n                    (void *)phys, *phys);\n    return 0;\n}\n"
}