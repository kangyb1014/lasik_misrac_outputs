{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (metal_bus_find(lbus->bus_name, &bus) == 0)\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation can be determined from this single call alone. The fragment merely passes lbus->bus_name to metal_bus_find; it does not itself call any <string.h> functions. A violation would occur only if metal_bus_find (or other code it calls) uses string.h routines unsafely. Example violation scenario: metal_bus_find calls strlen/strcmp/strcpy/strncpy/etc. on lbus->bus_name when lbus->bus_name is not NUL-terminated or its buffer length is shorter than the number of bytes read/copied (or if metal_bus_find copies the name into a fixed-size destination without bounds checking). In that case the string handling function could access memory beyond the bounds and thus violate MISRA C 2023 Rule 21.17."
}