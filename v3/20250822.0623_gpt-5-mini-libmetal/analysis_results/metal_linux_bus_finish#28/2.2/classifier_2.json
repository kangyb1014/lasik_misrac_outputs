{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_linux_bus_finish:\n#define for_each_linux_bus(lbus) for((lbus)=linux_bus;(lbus)->bus_name;(lbus)++)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_bus_unregister(bus);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. metal_bus_unregister(bus) is a runtime operation that unregisters a bus found by metal_bus_find; removing it would change program behaviour (registered buses would remain). It would only be dead if the call never executes in any run (metal_bus_find never returns 0 for any lbus) or if metal_bus_unregister is a true no-op with no observable effects."
}