{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(_metal.page_sizes[index].path, path, PATH_MAX) can violate Rule 21.17 if the source 'path' is not guaranteed to be a NUL-terminated C string within PATH_MAX bytes. strncpy may read up to PATH_MAX bytes from the source; if the source buffer is shorter and not NUL-terminated within that range, the call can read beyond the bounds of the source object (undefined behavior). Additionally, if the source length is >= PATH_MAX the destination will not be NUL-terminated, which can cause subsequent string accesses to go out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/459.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "#include <stdio.h>\n#include <limits.h>\n#include <stddef.h>\n\n/* Probe helper: append a single-line log entry about an imminent call to metal_add_page_size\n * We intentionally avoid reading the contents of the 'path' pointer to prevent introducing\n * new out-of-bounds reads. We only log the pointer value, current index (expected insertion\n * index), and PATH_MAX so that agents can correlate this with any strncpy usage inside\n * metal_add_page_size.\n */\nstatic void metal_probe_log_add(const char *label, const void *path_ptr, int index)\n{\n    FILE *f = fopen(\"/tmp/logs/459.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"ADD_PAGE_SIZE_CALL: label=%s path_ptr=%p expected_index=%d PATH_MAX=%d\\n\",\n            label ? label : \"(null)\", path_ptr, index, PATH_MAX);\n    fclose(f);\n}\n\n/* Probe helper for huge page sizes: log the size, computed shift and flags, and the\n * path pointer that will be passed to metal_add_page_size. Again, we do not inspect\n * the contents of the path string to avoid additional reads.\n */\nstatic void metal_probe_log_huge(long size, int shift, unsigned long flags, const void *path_ptr, int index)\n{\n    FILE *f = fopen(\"/tmp/logs/459.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"ADD_HUGE_PAGE_SIZE: size=%ld shift=%d flags=0x%lx path_ptr=%p expected_index=%d PATH_MAX=%d\\n\",\n            size, shift, flags, path_ptr, index, PATH_MAX);\n    fclose(f);\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    if (sizes[0] <= 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        return -EINVAL;\n    }\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n\n    /* Probe: before adding the tmp path page size, record pointer and expected index.\n     * We use _metal.num_page_sizes as the expected insertion index because metal_add_page_size\n     * appends a new entry.\n     */\n    metal_probe_log_add(\"_metal.tmp_path\", (const void *)_metal.tmp_path, _metal.num_page_sizes);\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    if (sizes[0] > 0) {\n        /* Capture the path pointer so we can log it before the call. */\n        const char *p = hugetlbfs_find_path();\n        metal_probe_log_huge(sizes[0], metal_log2(sizes[0]), MAP_HUGETLB, (const void *)p, _metal.num_page_sizes);\n        metal_add_page_size(p,\n                    metal_log2(sizes[0]),\n                    MAP_HUGETLB);\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            if ((shift & MAP_HUGE_MASK) != shift)\n                continue;\n\n            /* Get path for this specific huge page size once so we can log it safely */\n            const char *p = hugetlbfs_find_path_for_size(sizes[i]);\n            unsigned long flags = (MAP_HUGETLB | (shift << MAP_HUGE_SHIFT));\n\n            metal_probe_log_huge(sizes[i], shift, flags, (const void *)p, _metal.num_page_sizes);\n            metal_add_page_size(\n                p,\n                shift, flags);\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. Log the number of entries before sorting\n     * so testers can correlate the probes with the final array size.\n     */\n    {\n        FILE *f = fopen(\"/tmp/logs/459.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"QSORT_CALL: num_page_sizes=%d\\n\", _metal.num_page_sizes);\n            fclose(f);\n        }\n    }\n\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n\n    return 0;\n}\n"
}