{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf only a single page size was added (for example only the system page size was added via metal_add_page_size and no huge pages were detected), then _metal.num_page_sizes will be 1 and qsort(..., _metal.num_page_sizes, ...) is a no-op. In that runtime case the qsort call is executed but its removal would not affect program behaviour (no change in _metal.page_sizes), so it constitutes dead code under MISRA C 2023 Rule 2.2. A simple fix is to guard the call: if (_metal.num_page_sizes > 1) qsort(...);\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/452.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "static int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\tFILE *logf = NULL;\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n\t/* Open log for probe information. If opening fails, fall back to metal_log. */\n\tlogf = fopen(\"/tmp/logs/452.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_init_page_sizes: after system page add: system_page=%ld, page_shift=%d, num_page_sizes=%d\\n\",\n\t\t\t sizes[0], (int)_metal.page_shift, (int)_metal.num_page_sizes);\n\t\tfclose(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_DEBUG, \"metal_init_page_sizes: could not open /tmp/logs/452.txt for writing\\n\");\n\t}\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Log state before sorting so we can reproduce the reported scenario. */\n\tlogf = fopen(\"/tmp/logs/452.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_init_page_sizes: before qsort: num_page_sizes=%d\\n\", (int)_metal.num_page_sizes);\n\t\tif ((int)_metal.num_page_sizes == 1) {\n\t\t\tfprintf(logf, \"metal_init_page_sizes: single page size detected \u2014 qsort will be invoked but is a no-op (potential dead code)\\n\");\n\t\t}\n\t\tfclose(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_DEBUG, \"metal_init_page_sizes: could not open /tmp/logs/452.txt for writing before qsort\\n\");\n\t}\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\t/* Log state after sorting to show any change (or lack thereof). */\n\tlogf = fopen(\"/tmp/logs/452.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_init_page_sizes: after qsort: num_page_sizes=%d\\n\", (int)_metal.num_page_sizes);\n\t\tfclose(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_DEBUG, \"metal_init_page_sizes: could not open /tmp/logs/452.txt for writing after qsort\\n\");\n\t}\n\n\treturn 0;\n}\n"
}