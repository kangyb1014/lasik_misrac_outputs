{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro expands to a call to _metal.common.log_handler(...). If that log handler (or any function it calls) invokes metal_log (directly or indirectly), an indirect recursive call chain is created. Example: setting _metal.common.log_handler = my_log_handler where my_log_handler(...) calls metal_log(...) -> log_handler -> my_log_handler ... leads to infinite recursion and thus violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/456.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: write formatted logs to a stable file so other agents can\n * inspect call sequence and state. This intentionally does not call metal_log\n * to avoid triggering the logging handler recursion described in the bug\n * scenario. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/456.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    probe_log(\"ENTER: metal_init_page_sizes\");\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    probe_log(\"getpagesize() -> %ld\", sizes[0]);\n    if (sizes[0] <= 0) {\n        probe_log(\"ERROR: invalid page size (%ld), about to call metal_log and return -EINVAL\", sizes[0]);\n        /* Preserve original behavior: still call metal_log as in original code. */\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        probe_log(\"RETURN: metal_init_page_sizes -> -EINVAL\");\n        return -EINVAL;\n    }\n\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n    probe_log(\"_metal.page_size = %ld, _metal.page_shift = %d\", _metal.page_size, _metal.page_shift);\n    probe_log(\"calling metal_add_page_size(tmp_path=%p, shift=%d, flags=0)\", (void *)_metal.tmp_path, _metal.page_shift);\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    probe_log(\"gethugepagesize() -> %ld\", sizes[0]);\n    if (sizes[0] > 0) {\n        probe_log(\"adding single hugepage size: %ld\", sizes[0]);\n        metal_add_page_size(hugetlbfs_find_path(),\n                    metal_log2(sizes[0]),\n                    MAP_HUGETLB);\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        probe_log(\"gethugepagesizes() -> count = %d\", count);\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            probe_log(\"huge size[%d] = %ld, shift = %d\", i, sizes[i], shift);\n\n            if ((shift & MAP_HUGE_MASK) != shift) {\n                probe_log(\"skipping size[%d] = %ld due to MAP_HUGE_MASK check\", i, sizes[i]);\n                continue;\n            }\n            probe_log(\"calling metal_add_page_size(hugetlbfs_find_path_for_size(%ld), %d, flags=MAP_HUGETLB|(%d<<MAP_HUGE_SHIFT))\",\n                      sizes[i], shift, shift);\n            metal_add_page_size(\n                hugetlbfs_find_path_for_size(sizes[i]),\n                shift, (MAP_HUGETLB |\n                (shift << MAP_HUGE_SHIFT)));\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    probe_log(\"about to qsort: _metal.num_page_sizes = %d\", _metal.num_page_sizes);\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n    probe_log(\"qsort completed\");\n\n    probe_log(\"EXIT: metal_init_page_sizes -> 0\");\n    return 0;\n}\n"
}