{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf metal_add_page_size is declared to take a non-const pointer (e.g. metal_add_page_size(char *path, ...)) and the function does not modify the string pointed to by path, this call violates MISRA C 2023 Rule 8.13. The pointer argument _metal.tmp_path (an array/char pointer) should be passed to a parameter of type const char * to reflect that the callee does not modify the pointed-to characters. (If, conversely, metal_add_page_size actually modifies the path buffer, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "static int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\tFILE *logf = NULL;\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\t/* Log failure to retrieve page size. */\n\t\tlogf = fopen(\"/tmp/logs/453.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_init_page_sizes: getpagesize() failed -> %ld\\n\", sizes[0]);\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\n\t/* Log the state right before calling metal_add_page_size with _metal.tmp_path. */\n\tlogf = fopen(\"/tmp/logs/453.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_init_page_sizes: base page_size=%ld, page_shift=%d\\n\",\n\t\t\tsizes[0], _metal.page_shift);\n\t\tfprintf(logf, \"metal_init_page_sizes: calling metal_add_page_size with path pointer=%p, path_str=%s, shift=%d, flags=0\\n\",\n\t\t\t(void *)_metal.tmp_path,\n\t\t\t(_metal.tmp_path ? _metal.tmp_path : \"(null)\"),\n\t\t\t_metal.page_shift);\n\t\tfclose(logf);\n\t}\n\n\t/* Original call retained; logging above captures pointer and content. */\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tchar *huge_path = hugetlbfs_find_path();\n\n\t\t/* Log the hugetlbfs single-size path and values. */\n\t\tlogf = fopen(\"/tmp/logs/453.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_init_page_sizes: gethugepagesize()=%ld, hugetlbfs_path=%p, path_str=%s, shift=%d, flags=MAP_HUGETLB\\n\",\n\t\t\t\tsizes[0], (void *)huge_path, (huge_path ? huge_path : \"(null)\"),\n\t\t\t\tmetal_log2(sizes[0]));\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\n\t\t/* Log the number of huge page sizes obtained. */\n\t\tlogf = fopen(\"/tmp/logs/453.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_init_page_sizes: gethugepagesizes returned count=%d\\n\", count);\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tfprintf(logf, \"  sizes[%d]=%ld\\n\", i, sizes[i]);\n\t\t\t}\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\t/* Log decision about this size before potentially skipping it. */\n\t\t\tlogf = fopen(\"/tmp/logs/453.txt\", \"a\");\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"metal_init_page_sizes: evaluating sizes[%d]=%ld, shift=%d, (shift & MAP_HUGE_MASK)=%d\\n\",\n\t\t\t\t\ti, sizes[i], shift, (shift & MAP_HUGE_MASK));\n\t\t\t\tfclose(logf);\n\t\t\t}\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\n\t\t\t/* Obtain path for this specific hugepage size once to avoid side effects from multiple calls. */\n\t\t\tchar *huge_path_for_size = hugetlbfs_find_path_for_size(sizes[i]);\n\n\t\t\t/* Log the exact parameters used for the metal_add_page_size call. */\n\t\t\tlogf = fopen(\"/tmp/logs/453.txt\", \"a\");\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"metal_init_page_sizes: calling metal_add_page_size with hugetlbfs_path=%p, path_str=%s, shift=%d, flags=%#x\\n\",\n\t\t\t\t\t(void *)huge_path_for_size,\n\t\t\t\t\t(huge_path_for_size ? huge_path_for_size : \"(null)\"),\n\t\t\t\t\tshift, (MAP_HUGETLB | (shift << MAP_HUGE_SHIFT)));\n\t\t\t\tfclose(logf);\n\t\t\t}\n\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tlogf = fopen(\"/tmp/logs/453.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_init_page_sizes: before qsort, num_page_sizes=%d\\n\", _metal.num_page_sizes);\n\t\tfclose(logf);\n\t}\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\tlogf = fopen(\"/tmp/logs/453.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_init_page_sizes: exit, num_page_sizes=%d\\n\", _metal.num_page_sizes);\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}\n"
}