{
  "user_message": "An agent A claimed that the following metal_irq_register_controller code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_irq_register_controller.\n```c\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n\tint irq_base;\n\tstruct metal_list *node;\n\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tif (node == &cntr->node) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/*\n\t * Allocate IRQ numbers which are not yet used by any IRQ\n\t * controllers.\n\t */\n\tirq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n\tif (irq_base == METAL_IRQ_ANY) {\n\t\treturn -EINVAL;\n\t}\n\tcntr->irq_base = irq_base;\n\n\tmetal_list_add_tail(&irq_cntrs, &cntr->node);\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local iterator variable 'node' is declared as 'struct metal_list *node' but is only used for read/compare (metal_list_for_each iterates and the code only tests 'if (node == &cntr->node)'). Per Rule 8.13 it should be const-qualified when possible, e.g. 'const struct metal_list *node'. The comparison with '&cntr->node' is valid because a non-const pointer can be converted to a pointer-to-const; therefore the current non-const declaration violates the rule unless the iteration macro requires a mutable pointer.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_irq_register_controller: entry cntr=0x7f3ba8a73c80\nmetal_irq_register_controller: starting iteration over irq_cntrs\nmetal_irq_register_controller: allocating irq numbers, requested base=0 num=1023\nmetal_irq_register_controller: allocated irq_base=0, adding controller to list\nmetal_irq_register_controller: added controller, returning 0\nmetal_irq_register_controller: entry cntr=0x561d2aeb64a0\nmetal_irq_register_controller: starting iteration over irq_cntrs\nmetal_irq_register_controller: allocating irq numbers, requested base=0 num=1023\nmetal_irq_register_controller: allocated irq_base=0, adding controller to list\nmetal_irq_register_controller: added controller, returning 0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_irq_register_controller:\nstruct metal_irq_controller {\n\tint irq_base; /**< Start of IRQ number of the range managed by\n\t\t \t* the IRQ controller\n\t\t \t*/\n\tint irq_num; /**< Number of IRQs managed by the IRQ controller */\n\tvoid *arg; /**< Argument to pass to interrupt controller function */\n\tmetal_irq_set_enable irq_set_enable; /**< function to set IRQ enable */\n\tmetal_cntr_irq_register irq_register; /**< function to register IRQ\n\t\t\t\t\t\t* handler\n\t\t\t\t\t\t*/\n\tstruct metal_list node; /**< list node */\n\tstruct metal_irq *irqs; /**< Array of IRQs managed by the controller */\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The local iterator 'node' is only used for read/compare in the iteration and is never used to modify the list or to write through the pointed object. Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible, so declaring it as 'const struct metal_list *node' would be appropriate. The typical list-for-each macro just assigns the next pointer to the iterator (reads rvalues), which is compatible with a 'const struct metal_list *' iterator; only macros that attempt to modify the pointed-at object would prevent making it const. Given the supplied code and the usual expansion of metal_list_for_each, the current non-const declaration violates Rule 8.13."
}