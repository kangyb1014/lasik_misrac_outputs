{
  "result": "success",
  "message": "producer_thread: entry, arg=(nil)\nproducer_thread: entry, arg=(nil)\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: acquired lock, counter=0\nproducer_thread: entry, arg=(nil)\nproducer_thread: incremented counter -> 1, signaling nempty_condv\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=1\nproducer_thread: entry, arg=(nil)\nproducer_thread: incremented counter -> 2, signaling nempty_condv\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: entry, arg=(nil)\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=1\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: incremented counter -> 2, signaling nempty_condv\nproducer_thread: released lock, exiting\nproducer_thread: entry, arg=(nil)\nproducer_thread: acquired lock, counter=0\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: incremented counter -> 1, signaling nempty_condv\nproducer_thread: entry, arg=(nil)\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=0\nproducer_thread: entry, arg=(nil)\nproducer_thread: entry, arg=(nil)\nproducer_thread: entry, arg=(nil)\nproducer_thread: incremented counter -> 1, signaling nempty_condv\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=1\nproducer_thread: incremented counter -> 2, signaling nempty_condv\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=1\nproducer_thread: incremented counter -> 2, signaling nempty_condv\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=0\nproducer_thread: incremented counter -> 1, signaling nempty_condv\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=1\nproducer_thread: incremented counter -> 2, signaling nempty_condv\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=1\nproducer_thread: incremented counter -> 2, signaling nempty_condv\nproducer_thread: released lock, exiting\nproducer_thread: entry, arg=(nil)\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: entry, arg=(nil)\nproducer_thread: acquired lock, counter=0\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: incremented counter -> 1, signaling nempty_condv\nproducer_thread: entry, arg=(nil)\nproducer_thread: released lock, exiting\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: acquired lock, counter=1\nproducer_thread: entry, arg=(nil)\nproducer_thread: incremented counter -> 2, signaling nempty_condv\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=2\nproducer_thread: entry, arg=(nil)\nproducer_thread: incremented counter -> 3, signaling nempty_condv\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: acquired lock, counter=3\nproducer_thread: released lock, exiting\nproducer_thread: incremented counter -> 4, signaling nempty_condv\nproducer_thread: released lock, exiting\nproducer_thread: entry, arg=(nil)\nproducer_thread: acquired lock, counter=4\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: incremented counter -> 5, signaling nempty_condv\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=5\nproducer_thread: entry, arg=(nil)\nproducer_thread: incremented counter -> 6, signaling nempty_condv\nproducer_thread: entry, arg=(nil)\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: released lock, exiting\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: acquired lock, counter=6\nproducer_thread: incremented counter -> 7, signaling nempty_condv\nproducer_thread: entry, arg=(nil)\nproducer_thread: released lock, exiting\nproducer_thread: acquired lock, counter=7\nproducer_thread: after (void)arg; arg=(nil)\nproducer_thread: incremented counter -> 8, signaling nem"
}