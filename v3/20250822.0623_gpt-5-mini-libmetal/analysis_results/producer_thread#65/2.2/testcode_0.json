{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)arg;' in producer_thread is an executed no-op whose removal would not affect program behaviour (it only suppresses an unused-parameter warning). Because it has no side-effects and does not change observable behaviour, it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified producer_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/652.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of producer_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of producer_thread:\n```c\nstatic void *producer_thread(void *arg)\n{\n\t(void)arg;\n\tmetal_mutex_acquire(&lock);\n\twhile (counter == COUNTER_MAX)\n\t\tmetal_condition_wait(&nfull_condv, &lock);\n\tcounter++;\n\tmetal_condition_signal(&nempty_condv);\n\tmetal_mutex_release(&lock);\n\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified producer_thread code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/652.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/652.txt\", \"a\");\n    if (f != NULL) {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nstatic void *producer_thread(void *arg)\n{\n\t/* Log entry and the incoming argument value to demonstrate that\n\t   the cast-to-void statement is an executed no-op (its presence\n\t   doesn't change the observed state). */\n\tprobe_log(\"producer_thread: entry, arg=%p\\n\", arg);\n\n\t/* original suppression of unused-parameter warning (no-op) */\n\t(void)arg;\n\n\t/* Log immediately after the no-op to show there was no change in arg */\n\tprobe_log(\"producer_thread: after (void)arg; arg=%p\\n\", arg);\n\n\tmetal_mutex_acquire(&lock);\n\tprobe_log(\"producer_thread: acquired lock, counter=%d\\n\", counter);\n\n\twhile (counter == COUNTER_MAX) {\n\t\tprobe_log(\"producer_thread: counter==COUNTER_MAX (%d), waiting on nfull_condv\\n\", counter);\n\t\tmetal_condition_wait(&nfull_condv, &lock);\n\t\tprobe_log(\"producer_thread: woke from nfull_condv wait, counter=%d\\n\", counter);\n\t}\n\n\tcounter++;\n\tprobe_log(\"producer_thread: incremented counter -> %d, signaling nempty_condv\\n\", counter);\n\tmetal_condition_signal(&nempty_condv);\n\tmetal_mutex_release(&lock);\n\n\tprobe_log(\"producer_thread: released lock, exiting\\n\");\n\n\treturn NULL;\n}\n"
}