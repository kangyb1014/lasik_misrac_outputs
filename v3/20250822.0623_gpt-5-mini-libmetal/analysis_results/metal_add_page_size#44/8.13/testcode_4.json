{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nA violation occurs if the string literal is passed to a non-const pointer parameter. For example, if metal_fmt is declared as\n    char *metal_fmt(char *fmt)\nor if the log handler is declared as\n    int (*log_handler)(int, char *, ...)\nthen the literal \"skipped page size %ld - overflow\\n\" is passed (directly or via metal_fmt) to a char * parameter. That makes a pointer to a non-const-qualified type point at a string literal, which contravenes MISRA C 2023 Rule 8.13. If, however, metal_fmt and the log_handler take/return const char * (e.g. const char *metal_fmt(const char *fmt) and int (*log_handler)(int, const char *, ...)), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_add_page_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_add_page_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_add_page_size:\n```c\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_add_page_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe function to log control flow and state to /tmp/logs/443.txt */\nstatic void metal_probe_log(const char *location,\n                            const char *fmt,\n                            const char *path,\n                            int index,\n                            unsigned long size,\n                            int shift,\n                            int mmap_flags)\n{\n    FILE *f = fopen(\"/tmp/logs/443.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f,\n                \"probe:%s fmt_ptr=%p fmt=\\\"%s\\\" path_ptr=%p path=\\\"%s\\\" index=%d size=%lu shift=%d mmap_flags=%d\\n\",\n                location,\n                (const void *)fmt,\n                (fmt != NULL) ? fmt : \"(null)\",\n                (const void *)path,\n                (path != NULL) ? path : \"(null)\",\n                index,\n                size,\n                shift,\n                mmap_flags);\n        fclose(f);\n    }\n}\n\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n    int index = _metal.num_page_sizes;\n    unsigned long size = 1UL << shift;\n\n    /* Log entry state */\n    metal_probe_log(\"entry\", NULL, path, index, size, shift, mmap_flags);\n\n    if (index >= MAX_PAGE_SIZES) {\n        /* Probe right before calling metal_log with a string literal format */\n        metal_probe_log(\"overflow_before_metal_log\", \"skipped page size %ld - overflow\\n\",\n                        NULL, index, size, shift, mmap_flags);\n\n        metal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n                  size);\n        return -EOVERFLOW;\n    }\n\n    if (!path || shift <= 0) {\n        /* Probe right before calling metal_log with a string literal format */\n        metal_probe_log(\"invalid_args_before_metal_log\", \"skipped page size %ld - invalid args\\n\",\n                        path, index, size, shift, mmap_flags);\n\n        metal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n                  size);\n        return -EINVAL;\n    }\n\n    _metal.page_sizes[index].page_shift = shift;\n    _metal.page_sizes[index].page_size = size;\n    _metal.page_sizes[index].mmap_flags = mmap_flags;\n    strncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n    _metal.num_page_sizes++;\n\n    /* Probe after successful addition (log the path contents and pointer) */\n    metal_probe_log(\"after_add\", \"added page size %ld @%s\\n\",\n                    path, index, size, shift, mmap_flags);\n\n    metal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n    return 0;\n}\n"
}