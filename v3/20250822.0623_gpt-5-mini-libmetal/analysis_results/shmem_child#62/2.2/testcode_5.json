{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call atomic_fetch_add(&nb_err, 1); is a violation if the file\u2011scope variable nb_err is never read/observed elsewhere (no other code checks or synchronizes on nb_err). In that case the increment is executed but has no observable effect on program behaviour (no value is consumed and it is not used for synchronization), so removal would not change program behaviour \u2014 i.e. it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/622.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Helper probe function that appends diagnostic logs to /tmp/logs/622.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/622.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void *shmem_child(void *arg)\n{\n    const char *name = arg;\n    struct {\n        metal_mutex_t\tmutex;\n        int\t\t\tcounter;\n    } *virt;\n    struct metal_io_region *io;\n    unsigned long phys;\n    size_t size = 1 * 1024 * 1024;\n    int error;\n\n    /* Log entry and parameters */\n    probe_log(\"shmem_child: enter name=%s size=%zu\", name ? name : \"(null)\", size);\n\n    error = metal_shmem_open(name, size, &io);\n    if (error) {\n        metal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n        /* Log that we are about to increment nb_err due to shmem_open failure. */\n        probe_log(\"shmem_child: metal_shmem_open failed (error=%d). About to atomic_fetch_add(&nb_err,1). nb_err_addr=%p\",\n                  error, (void *)&nb_err);\n        atomic_fetch_add(&nb_err, 1);\n        probe_log(\"shmem_child: atomic_fetch_add(&nb_err,1) done (shmem_open failure path)\");\n        return NULL;\n    }\n\n    virt = metal_io_virt(io, 0);\n    phys = metal_io_phys(io, 0);\n    probe_log(\"shmem_child: opened shmem io=%p virt=%p phys=%lu\", (void *)io, (void *)virt, phys);\n    if (phys != METAL_BAD_OFFSET) {\n        if (virt != metal_io_phys_to_virt(io, phys)) {\n            /* Log mismatch and that we will increment nb_err. Do not read nb_err's value. */\n            probe_log(\"shmem_child: virt != metal_io_phys_to_virt(io, phys). virt=%p phys=%lu. About to atomic_fetch_add(&nb_err,1). nb_err_addr=%p\",\n                      (void *)virt, phys, (void *)&nb_err);\n            atomic_fetch_add(&nb_err, 1);\n            probe_log(\"shmem_child: atomic_fetch_add(&nb_err,1) done (virt mismatch path)\");\n\n            metal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n        }\n        if (phys != metal_io_virt_to_phys(io, virt)) {\n            /* Log mismatch and that we will increment nb_err. */\n            probe_log(\"shmem_child: phys != metal_io_virt_to_phys(io, virt). virt=%p phys=%lu. About to atomic_fetch_add(&nb_err,1). nb_err_addr=%p\",\n                      (void *)virt, phys, (void *)&nb_err);\n            atomic_fetch_add(&nb_err, 1);\n            probe_log(\"shmem_child: atomic_fetch_add(&nb_err,1) done (phys mismatch path)\");\n\n            metal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n        }\n    }\n\n    metal_io_finish(io);\n    probe_log(\"shmem_child: exit\");\n    return NULL;\n}\n"
}