{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(shmem->name, name) occurs without validating that 'name' is non-NULL and NUL\u2011terminated. If metal_shmem_open_generic() is invoked with name == NULL (or with a non\u2011terminated buffer), strcmp will dereference/read past the bounds of the object referenced by its pointer parameter, violating Rule 21.17. Note: the expression '!path || !strlen(path)' in metal_open is safe for a NULL path due to short\u2011circuit evaluation, but strlen(path) will still read out of bounds if a non\u2011NULL path is not NUL\u2011terminated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/629.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "static void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\tFILE *logf = NULL;\n\n\t/* Probe/logging: record entry and pointer state without dereferencing 'name' */\n\tlogf = fopen(\"/tmp/logs/629.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"shmem_child: entering, name_ptr=%p\\n\", (void *)name);\n\t\tif (name == NULL) {\n\t\t\tfprintf(logf, \"shmem_child: name is NULL\\n\");\n\t\t} else {\n\t\t\t/* Do NOT print name as a string to avoid reading beyond bounds. */\n\t\t\tfprintf(logf, \"shmem_child: name is non-NULL (not dereferenced)\\n\");\n\t\t}\n\t\tfprintf(logf, \"shmem_child: about to call metal_shmem_open(name_ptr=%p, size=%zu)\\n\",\n\t\t\t(void *)name, size);\n\t\tfflush(logf);\n\t} else {\n\t\t/* If probe file cannot be opened, also emit to the system log to aid diagnosis. */\n\t\tmetal_log(METAL_LOG_ERROR, \"shmem_child: could not open probe log file /tmp/logs/629.txt\\n\");\n\t}\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (logf) {\n\t\tfprintf(logf, \"shmem_child: metal_shmem_open returned %d, io=%p\\n\", error, (void *)io);\n\t\tfflush(logf);\n\t}\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"shmem_child: aborting due to shmem_open error=%d\\n\", error);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (logf) {\n\t\tfprintf(logf, \"shmem_child: virt=%p phys=%lu\\n\", (void *)virt, phys);\n\t\tfflush(logf);\n\t}\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"shmem_child: virt != metal_io_phys_to_virt(io, phys) check failed\\n\");\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"shmem_child: phys != metal_io_virt_to_phys(io, virt) check failed\\n\");\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\tif (logf) {\n\t\tfprintf(logf, \"shmem_child: finished, returning NULL\\n\");\n\t\tfclose(logf);\n\t}\n\treturn NULL;\n}\n"
}