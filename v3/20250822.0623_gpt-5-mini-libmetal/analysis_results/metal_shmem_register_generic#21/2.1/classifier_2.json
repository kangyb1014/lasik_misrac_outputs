{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_shmem_register_generic:\n```c\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n\t/* Make sure that we can be found. */\n\tmetal_assert(shmem->name && strlen(shmem->name) != 0);\n\n\t/* Statically registered shmem regions cannot have a destructor. */\n\tmetal_assert(!shmem->io.ops.close);\n\n\tmetal_list_add_tail(&_metal.common.generic_shmem_list,\n\t\t\t    &shmem->node);\n\treturn 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_assert(!shmem->io.ops.close);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "In the normal/typical case where metal_assert behaves like the standard assert (it evaluates the condition and only aborts/terminates when the condition is false), this fragment does not make the subsequent code unreachable, so Rule 2.1 is not violated. A violation scenario would occur if metal_assert is defined as a non\u2011returning construct that always halts execution (for example an unconditional infinite loop, a macro that always calls exit/abort regardless of the condition, or is implemented so the call does not return even when the condition is true). Another violation scenario would be if the asserted expression is a compile\u2011time constant that causes the assertion to always fail and the compiler or build configuration treats the subsequent code as unreachable; in that case the following statements would be unreachable and would breach Rule 2.1."
}