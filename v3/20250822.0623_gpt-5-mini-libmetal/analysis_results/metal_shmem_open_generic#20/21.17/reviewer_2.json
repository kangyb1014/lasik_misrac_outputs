{
  "user_message": "An agent A claimed that the following metal_shmem_open_generic code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_open_generic.\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf either pointer is NULL or points to a char object that is not NUL-terminated (for example, shmem->name is NULL or shmem->name/name points to a fixed-size buffer lacking a terminating '\\0'), strcmp(shmem->name, name) will read past the object bounds searching for a terminator and thus violate MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfcc8c2e20\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfcd0c3e20\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfcd8c4e20\nEXIT: no matching shared memory found -> -ENOENT\nEXIT: no matching shared memory found -> -ENOENT\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfce0c5e20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfcf0c7e20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfce8c6e20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfb7efee20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfb73fde20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfb69fce20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x559705d51198 size=1048576 result=0x7fdfb61fbe20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb55ffae20\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb567fbe20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb56ffce20\nEXIT: no matching shared memory found -> -ENOENT\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb577fde20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb57ffee20\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb5cd5ee20\nEXIT: no matching shared memory found -> -ENOENT\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb557f9e20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb54ff8e20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb3fffee20\nEXIT: no matching shared memory found -> -ENOENT\nENTER: metal_shmem_open_generic name=0x55f6928df198 size=1048576 result=0x7fbb3f7fde20\nEXIT: no matching shared memory found -> -ENOENT\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_shmem_open_generic:\nstruct metal_generic_shmem {\n\tconst char\t\t*name;\n\tstruct metal_io_region\tio;\n\tstruct metal_list\tnode;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The call to strcmp(shmem->name, name) can read beyond the bounds of the objects referenced by those pointers if either pointer is NULL or if either character sequence is not terminated by a NUL within the object's bounds. The function does not validate that shmem->name or the incoming name are non-NULL or NUL-terminated, nor does the provided code or type definitions establish an invariant guaranteeing termination. Under MISRA C 2023 Rule 21.17 this use is therefore potentially unsafe and the reported violation is correct unless there is an external, documented and enforced guarantee (not shown here) that both pointers are valid and refer to NUL-terminated char arrays."
}