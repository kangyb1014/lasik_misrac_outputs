{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to metal_log(...) expands a macro that uses compiler extensions: the macro is defined with a GCC statement-expression '({ ... })' and also uses the token-pasting '##__VA_ARGS__' (GNU extension to allow swallowing the comma for empty variadic arguments). Because the macro expansion relies on these documented compiler extensions, Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_finish_threads code that contains useful probe functions that print useful logs to a file \"/tmp/logs/660.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_finish_threads as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_finish_threads:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n```\n</target_code>\nPlease provide the modified metal_finish_threads code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helpers. These write runtime control-flow and state\n * information to /tmp/logs/660.txt so other tools/agents can observe\n * which branches were taken and what the thread IDs and join results were.\n *\n * No macros or compiler extensions are used here.\n */\nstatic void probe_ensure_dir(void)\n{\n    /* Ensure /tmp/logs exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    probe_ensure_dir();\n\n    FILE *f = fopen(\"/tmp/logs/660.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    struct tm tmv;\n    if (localtime_r(&t, &tmv) != NULL) {\n        char ts[64];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tmv) > 0)\n            fprintf(f, \"%s \", ts);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/*\n * Modified metal_finish_threads with probe instrumentation.\n * Original logic is preserved as much as possible. If tids is NULL,\n * the original code invoked metal_log(METAL_LOG_ERROR, ...). To avoid\n * depending on that macro/function (which may be a compiler-extension-based\n * macro in the real codebase), we log an equivalent message to the probe\n * file and return.\n */\nvoid metal_finish_threads(int threads, void *tids)\n{\n    int i;\n    pthread_t *tid_p = (pthread_t *)tids;\n\n    probe_log(\"metal_finish_threads: entry threads=%d tids=%p pid=%d\", threads, tids, (int)getpid());\n\n    if (!tids) {\n        /* Record the exact control path and the fact that the code would\n         * invoke metal_log in the original source. This provides evidence\n         * that the macro-based logging path was taken without requiring the\n         * macro itself to be expanded here. */\n        probe_log(\"metal_finish_threads: invalid argument, tids is NULL. (original code called: metal_log(METAL_LOG_ERROR, \\\"invalid argument, tids is NULL.\\\\n\\\"))\");\n        return;\n    }\n\n    probe_log(\"metal_finish_threads: about to join %d threads; tid array at %p\", threads, (void *)tid_p);\n\n    for (i = 0; i < threads; i++) {\n        /* Log the thread identifier value before join. We cast through\n         * uintptr_t for a printable integer representation. */\n        uintptr_t tid_val = (uintptr_t)tid_p[i];\n        probe_log(\"metal_finish_threads: joining index=%d tid=%\" PRIuPTR, i, tid_val);\n\n        int rc = pthread_join(tid_p[i], NULL);\n        if (rc != 0) {\n            /* Capture errno-like information: pthread_join returns an\n             * error number on failure. Record the error code and message. */\n            probe_log(\"metal_finish_threads: pthread_join index=%d returned rc=%d (%s)\", i, rc, strerror(rc));\n        } else {\n            probe_log(\"metal_finish_threads: pthread_join index=%d succeeded\", i);\n        }\n\n        /* The original code cast the call to void; we preserve the\n         * observable effect (joining the thread) while logging results. */\n    }\n\n    probe_log(\"metal_finish_threads: exit\");\n}\n"
}