{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen pthread_create fails it returns a positive error number (errnum). The code sets error = -pthread_create(...), so on failure error is negative. The call strerror(error) therefore passes a negative error number to strerror. Implementations of strerror typically index into an internal error-message array or otherwise expect non-negative errno values; passing a negative index can cause out-of-bounds access inside strerror, which violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_finish_threads code that contains useful probe functions that print useful logs to a file \"/tmp/logs/669.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_finish_threads as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_finish_threads:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n```\n</target_code>\nPlease provide the modified metal_finish_threads code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <pthread.h>\n#include <stdint.h>\n\n/*\n * Probe logging utilities. Logs appended to /tmp/logs/669.txt.\n * These functions are intended to be non-intrusive and preserve the\n * original behavior of metal_finish_threads.\n */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/669.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid metal_finish_threads(int threads, void *tids)\n{\n    int i;\n    pthread_t *tid_p = (pthread_t *)tids;\n\n    probe_logf(\"metal_finish_threads: entry threads=%d, tids=%p\", threads, tids);\n\n    if (!tids) {\n        metal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n        probe_logf(\"metal_finish_threads: invalid argument, tids is NULL -> return\");\n        return;\n    }\n\n    for (i = 0; i < threads; i++) {\n        /* Log the intention to join and the pthread_t value. */\n        probe_logf(\"metal_finish_threads: about to join index=%d, tid=%llu\",\n                   i, (unsigned long long)tid_p[i]);\n\n        /*\n         * Preserve original behavior: join threads, but capture the\n         * return code so we can log it for diagnostics. The original\n         * code cast the call to void; we keep the effective behavior\n         * by not altering control flow based on the return value.\n         */\n        int rc = pthread_join(tid_p[i], NULL);\n\n        probe_logf(\"metal_finish_threads: pthread_join returned rc=%d for index=%d, tid=%llu\",\n                   rc, i, (unsigned long long)tid_p[i]);\n\n        /* keep original discard of return value semantics */\n        (void)rc;\n    }\n\n    probe_logf(\"metal_finish_threads: exit\");\n}\n"
}