{
  "user_message": "An agent A claimed that the following metal_finish_threads code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_finish_threads.\n```c\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWhen pthread_create fails it returns a positive error number (errnum). The code sets error = -pthread_create(...), so on failure error is negative. The call strerror(error) therefore passes a negative error number to strerror. Implementations of strerror typically index into an internal error-message array or otherwise expect non-negative errno values; passing a negative index can cause out-of-bounds access inside strerror, which violates MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_finish_threads: entry threads=10, tids=0x7fff1332c940\nmetal_finish_threads: about to join index=0, tid=140615648638528\nmetal_finish_threads: pthread_join returned rc=0 for index=0, tid=140615648638528\nmetal_finish_threads: about to join index=1, tid=140615640245824\nmetal_finish_threads: pthread_join returned rc=0 for index=1, tid=140615640245824\nmetal_finish_threads: about to join index=2, tid=140615631853120\nmetal_finish_threads: pthread_join returned rc=0 for index=2, tid=140615631853120\nmetal_finish_threads: about to join index=3, tid=140615551546944\nmetal_finish_threads: pthread_join returned rc=0 for index=3, tid=140615551546944\nmetal_finish_threads: about to join index=4, tid=140615543154240\nmetal_finish_threads: pthread_join returned rc=0 for index=4, tid=140615543154240\nmetal_finish_threads: about to join index=5, tid=140615534761536\nmetal_finish_threads: pthread_join returned rc=0 for index=5, tid=140615534761536\nmetal_finish_threads: about to join index=6, tid=140615526368832\nmetal_finish_threads: pthread_join returned rc=0 for index=6, tid=140615526368832\nmetal_finish_threads: about to join index=7, tid=140615517976128\nmetal_finish_threads: pthread_join returned rc=0 for index=7, tid=140615517976128\nmetal_finish_threads: about to join index=8, tid=140615509583424\nmetal_finish_threads: pthread_join returned rc=0 for index=8, tid=140615509583424\nmetal_finish_threads: about to join index=9, tid=140615501190720\nmetal_finish_threads: pthread_join returned rc=0 for index=9, tid=140615501190720\nmetal_finish_threads: exit\nmetal_finish_threads: entry threads=10, tids=0x7fff1332c950\nmetal_finish_threads: about to join index=0, tid=140615501190720\nmetal_finish_threads: pthread_join returned rc=0 for index=0, tid=140615501190720\nmetal_finish_threads: about to join index=1, tid=140615509583424\nmetal_finish_threads: pthread_join returned rc=0 for index=1, tid=140615509583424\nmetal_finish_threads: about to join index=2, tid=140615517976128\nmetal_finish_threads: pthread_join returned rc=0 for index=2, tid=140615517976128\nmetal_finish_threads: about to join index=3, tid=140615526368832\nmetal_finish_threads: pthread_join returned rc=0 for index=3, tid=140615526368832\nmetal_finish_threads: about to join index=4, tid=140615648638528\nmetal_finish_threads: pthread_join returned rc=0 for index=4, tid=140615648638528\nmetal_finish_threads: about to join index=5, tid=140615640245824\nmetal_finish_threads: pthread_join returned rc=0 for index=5, tid=140615640245824\nmetal_finish_threads: about to join index=6, tid=140615631853120\nmetal_finish_threads: pthread_join returned rc=0 for index=6, tid=140615631853120\nmetal_finish_threads: about to join index=7, tid=140615551546944\nmetal_finish_threads: pthread_join returned rc=0 for index=7, tid=140615551546944\nmetal_finish_threads: about to join index=8, tid=140615543154240\nmetal_finish_threads: pthread_join returned rc=0 for index=8, tid=140615543154240\nmetal_finish_threads: about to join index=9, tid=140615534761536\nmetal_finish_threads: pthread_join returned rc=0 for index=9, tid=140615534761536\nmetal_finish_threads: exit\nmetal_finish_threads: entry threads=10, tids=0x7fff1332c950\nmetal_finish_threads: about to join index=0, tid=140615534761536\nmetal_finish_threads: pthread_join returned rc=0 for index=0, tid=140615534761536\nmetal_finish_threads: about to join index=1, tid=140615543154240\nmetal_finish_threads: pthread_join returned rc=0 for index=1, tid=140615543154240\nmetal_finish_threads: about to join index=2, tid=140615551546944\nmetal_finish_threads: pthread_join returned rc=0 for index=2, tid=140615551546944\nmetal_finish_threads: about to join index=3, tid=140615631853120\nmetal_finish_threads: pthread_join returned rc=0 for index=3, tid=140615631853120\nmetal_finish_threads: about to join index=4, tid=140615647589952\nmetal_finish_threads: pthread_join returned rc=0 for index=4, tid=140615647589952\nmetal_finish_threads: about to join index=5, tid=140615526368832\nmetal_finish_threads: pthread_join returned rc=0 for index=5, tid=140615526368832\nmetal_finish_threads: about to join inde\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_finish_threads:\nstatic int condition(void)\n{\n\tint ret;\n\tint ts_created;\n\tpthread_t tids[THREADS];\n\n\t/** TC1 consumer threads go first */\n\t/** create 10 consumer threads first */\n\tret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 producer threads next */\n\tret = metal_run(THREADS, producer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** wait for consumer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\n\t/** TC2 producer threads go first */\n\t/** create 10 producer threads first */\n\tret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 consumer threads next */\n\tret = metal_run(THREADS, consumer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\nout:\n\t/** wait for producer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\treturn ret;\n}\n...\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n...\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n...\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n...\nmetal_mutex_t *mutex\n...\nstruct metal_generic_shmem *shmem\n...\nstatic int spinlock(void)\n{\n\tstruct metal_spinlock lock = METAL_SPINLOCK_INIT;\n\tconst int threads = 10;\n\tint value, error;\n\n\terror = metal_run(threads, spinlock_thread, &lock);\n\tif (!error) {\n\t\tvalue = total;\n\t\tvalue -= spinlock_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n...\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as written. The function metal_finish_threads itself contains no calls to any <string.h> functions (no strcpy/strncpy/memcpy/strerror/etc.), so metal_finish_threads does not violate MISRA C 2023 Rule 21.17.\n\nHowever, the scenario that Agent A describes is valid \u2014 the actual problematic code is in metal_run_noblock, not metal_finish_threads. In metal_run_noblock the code does: error = -pthread_create(...); and then calls strerror(error). pthread_create returns a positive error number on failure; negating it produces a negative value. Passing a negative value to strerror can lead implementations to index internal message arrays with a negative index (or otherwise behave unexpectedly), which can result in out-of-bounds access inside strerror and therefore would violate MISRA C 2023 Rule 21.17. \n\nRecommended fixes: do not pass a negative errno to strerror. For example, store the pthread_create return in a separate variable and pass its (non\u2011negated) value to strerror, or call strerror(-error) if you keep the negated convention. Even better, use a reentrant variant (strerror_r) or log the numeric error code explicitly. Example change:\n  int rc = pthread_create(...);\n  if (rc) {\n    metal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\", strerror(rc));\n    error = -rc;\n    break;\n  }\n\nConclusion: Agent A correctly identified a potential Rule 21.17 violation, but misattributed it to metal_finish_threads. The claim that metal_finish_threads violates Rule 21.17 is false."
}