{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment rc = -EINVAL; is unreachable. err_msg is initialized to the empty string and is only set to a non-empty literal in paths where rc is non-zero immediately before jumping to the out label. At the out label rc still holds that non-zero value, so the condition (err_msg[0] != '\\0') && (!rc) can never be true. Thus the branch that sets rc to -EINVAL cannot be executed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/721.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\nstatic void probe_log_raw(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists, ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/721.txt\", \"a\");\n    if (!f)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_state(const char *where, int rc, const char *err_msg, int i, int fd0, int fd1, int mll)\n{\n    /* Log important state information for reproducing the scenario */\n    probe_log_raw(\"[%s] rc=%d, err_msg_ptr=%p, err_msg_firstchar='%c' (0x%02x), i=%d, fd0=%d, fd1=%d, mll=%d\\n\",\n                  where,\n                  rc,\n                  (const void *)err_msg,\n                  (err_msg && err_msg[0]) ? err_msg[0] : '\\0',\n                  (unsigned char)((err_msg && err_msg[0]) ? err_msg[0] : '\\0'),\n                  i,\n                  fd0,\n                  fd1,\n                  mll);\n}\n\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg = \"\";\n    enum metal_log_level mll = metal_get_log_level();\n    int i, tst_irq[2];\n\n    /* Initial probe */\n    probe_state(\"entry\", rc, err_msg, -1, -1, -1, (int)mll);\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0,0);\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n                  __func__, i, tst_irq[i]);\n        /* probe after creating each fd */\n        probe_state(\"after_eventfd\", rc, err_msg, i, tst_irq[0], tst_irq[1], (int)mll);\n    }\n\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_state(\"after_register_0\", rc, err_msg, i, tst_irq[0], tst_irq[1], (int)mll);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        probe_log_raw(\"goto out from register_0: rc=%d, err_msg=\\\"%s\\\"\\n\", rc, err_msg);\n        goto out;\n    }\n    rc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n    probe_state(\"after_register_1\", rc, err_msg, i, tst_irq[0], tst_irq[1], (int)mll);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        probe_log_raw(\"goto out from register_1: rc=%d, err_msg=\\\"%s\\\"\\n\", rc, err_msg);\n        goto out;\n    }\n\n    metal_irq_unregister(tst_irq[0]);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_state(\"after_re_register_0\", rc, err_msg, i, tst_irq[0], tst_irq[1], (int)mll);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        probe_log_raw(\"goto out from re_register_0: rc=%d, err_msg=\\\"%s\\\"\\n\", rc, err_msg);\n        goto out;\n    }\n    metal_irq_unregister(tst_irq[0]);\n    metal_irq_unregister(tst_irq[1]);\n\nout:\n    for (i = 0; i < 2; i++) {\n        close(tst_irq[i]);\n    }\n    metal_set_log_level(mll);\n\n    /* Probe at out label before the final conditional */\n    probe_state(\"at_out_before_conditional\", rc, err_msg, i, tst_irq[0], tst_irq[1], (int)mll);\n    probe_log_raw(\"evaluating condition: (err_msg[0] != '\\\\0') = %d, (!rc) = %d\\n\",\n                  (err_msg && err_msg[0]) ? 1 : 0,\n                  (!rc) ? 1 : 0);\n\n    if ((err_msg[0] != '\\0') && (!rc)) {\n        probe_log_raw(\"condition true: setting rc = -EINVAL (previous rc=%d)\\n\", rc);\n        rc = -EINVAL;\n    } else {\n        probe_log_raw(\"condition false: not setting rc; rc remains %d, err_msg_firstchar='%c'\\n\",\n                      rc,\n                      (err_msg && err_msg[0]) ? err_msg[0] : '\\0');\n    }\n\n    if (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\n    probe_state(\"exit\", rc, err_msg, i, tst_irq[0], tst_irq[1], (int)mll);\n    return rc;\n}\n"
}