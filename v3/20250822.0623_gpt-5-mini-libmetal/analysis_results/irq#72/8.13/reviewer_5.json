{
  "user_message": "An agent A claimed that the following irq code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of irq.\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'arg' is only stored (irq_data->arg = arg) and never used to modify pointee inside metal_irq_register, so it can be declared as pointing to a const-qualified type (e.g. const void *arg and irq_data->arg of type const void *). As written it is a non-const void * which violates the guidance of MISRA C 2023 Rule 8.13. (If the irq handler or other users are expected to modify the pointee, then const cannot be applied \u2014 in that case the current prototype is acceptable.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[irq] enter: original_log_level=7\n[irq] created tst_irq[0] = 6\n[irq] created tst_irq[1] = 7\n[irq] about to register irq 0: fd=6, arg=0x1\n[irq] metal_irq_register(irq0) returned rc=0\n[irq] about to register irq 1: fd=7, arg=0x1\n[irq] metal_irq_register(irq1) returned rc=0\n[irq] unregistering irq 0 (first unregister) fd=6\n[irq] re-registering irq 0 with same arg=0x1\n[irq] metal_irq_register(irq0 after unregister) returned rc=0\n[irq] final unregisters: irq0=6, irq1=7\n[irq] closing tst_irq[0] = 6\n[irq] closing tst_irq[1] = 7\n[irq] restored_log_level=7\n[irq] returning rc=0\n[irq] enter: original_log_level=7\n[irq] created tst_irq[0] = 6\n[irq] created tst_irq[1] = 7\n[irq] about to register irq 0: fd=6, arg=0x1\n[irq] metal_irq_register(irq0) returned rc=0\n[irq] about to register irq 1: fd=7, arg=0x1\n[irq] metal_irq_register(irq1) returned rc=0\n[irq] unregistering irq 0 (first unregister) fd=6\n[irq] re-registering irq 0 with same arg=0x1\n[irq] metal_irq_register(irq0 after unregister) returned rc=0\n[irq] final unregisters: irq0=6, irq1=7\n[irq] closing tst_irq[0] = 6\n[irq] closing tst_irq[1] = 7\n[irq] restored_log_level=7\n[irq] returning rc=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function irq:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n...\nint metal_irq_register(int irq,\n\t\t       metal_irq_handler irq_handler,\n\t\t       void *arg)\n{\n\tstruct metal_irq_controller *cntr;\n\tstruct metal_irq *irq_data;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tif (cntr->irq_register != NULL) {\n\t\treturn cntr->irq_register(cntr, irq, irq_handler, arg);\n\t}\n\tif (cntr->irqs == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tirq_data = &cntr->irqs[irq - cntr->irq_base];\n\tirq_data->hd = irq_handler;\n\tirq_data->arg = arg;\n\treturn 0;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not supported by the evidence. Agent A assumes that because metal_irq_register only stores the arg pointer into irq_data->arg it therefore could/should be declared as const void *. However: (1) there is no evidence in the provided code that the pointee is never modified elsewhere \u2014 the stored arg is likely passed to IRQ handlers (metal_irq_handler) and to other users of irq_data->arg, and we do not have their prototypes/implementations. (2) The public API (metal_irq_register) currently takes void *arg; changing it to const void * would be an API change and could break callers and handlers that expect a modifiable pointer. (3) The test/usage in the log casts an integer to (void *) which is inconsistent with treating it as a const-qualified object pointer. MISRA Rule 8.13 recommends adding const when possible, but you must demonstrate that the pointee is never modified and that the wider API/usage permits const. That proof is not provided here. Therefore the report that this code violates MISRA C:2023 Rule 8.13 is not correct."
}