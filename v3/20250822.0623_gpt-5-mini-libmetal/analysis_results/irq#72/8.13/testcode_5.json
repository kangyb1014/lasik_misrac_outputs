{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'arg' is only stored (irq_data->arg = arg) and never used to modify pointee inside metal_irq_register, so it can be declared as pointing to a const-qualified type (e.g. const void *arg and irq_data->arg of type const void *). As written it is a non-const void * which violates the guidance of MISRA C 2023 Rule 8.13. (If the irq handler or other users are expected to modify the pointee, then const cannot be applied \u2014 in that case the current prototype is acceptable.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <unistd.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/723.txt */\nstatic void probe_write(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *fp;\n    int rc;\n\n    /* Ensure directory exists; ignore if it already exists */\n    rc = mkdir(\"/tmp/logs\", 0700);\n    if ((rc < 0) && (errno != EEXIST)) {\n        /* Could not create logging directory; fail silently to avoid affecting logic */\n        return;\n    }\n\n    fp = fopen(\"/tmp/logs/723.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg = \"\";\n    enum metal_log_level mll = metal_get_log_level();\n    int i, tst_irq[2];\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n\n    probe_write(\"[irq] enter: original_log_level=%d\\n\", (int)mll);\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0, 0);\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n                  __func__, i, tst_irq[i]);\n        probe_write(\"[irq] created tst_irq[%d] = %d\\n\", i, tst_irq[i]);\n    }\n\n    /* Capture the argument passed to metal_irq_register to provide evidence\n     * that a non-const void * is being used only as a stored pointer. */\n    void *drv_id = (void *)1;\n\n    probe_write(\"[irq] about to register irq 0: fd=%d, arg=%p\\n\", tst_irq[0], drv_id);\n    rc = metal_irq_register(tst_irq[0], irq_handler, drv_id);\n    probe_write(\"[irq] metal_irq_register(irq0) returned rc=%d\\n\", rc);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        probe_write(\"[irq] error: %s\", err_msg);\n        goto out;\n    }\n\n    probe_write(\"[irq] about to register irq 1: fd=%d, arg=%p\\n\", tst_irq[1], drv_id);\n    rc = metal_irq_register(tst_irq[1], irq_handler, drv_id);\n    probe_write(\"[irq] metal_irq_register(irq1) returned rc=%d\\n\", rc);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        probe_write(\"[irq] error: %s\", err_msg);\n        goto out;\n    }\n\n    probe_write(\"[irq] unregistering irq 0 (first unregister) fd=%d\\n\", tst_irq[0]);\n    metal_irq_unregister(tst_irq[0]);\n\n    probe_write(\"[irq] re-registering irq 0 with same arg=%p\\n\", drv_id);\n    rc = metal_irq_register(tst_irq[0], irq_handler, drv_id);\n    probe_write(\"[irq] metal_irq_register(irq0 after unregister) returned rc=%d\\n\", rc);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        probe_write(\"[irq] error: %s\", err_msg);\n        goto out;\n    }\n\n    probe_write(\"[irq] final unregisters: irq0=%d, irq1=%d\\n\", tst_irq[0], tst_irq[1]);\n    metal_irq_unregister(tst_irq[0]);\n    metal_irq_unregister(tst_irq[1]);\n\nout:\n    for (i = 0; i < 2; i++) {\n        probe_write(\"[irq] closing tst_irq[%d] = %d\\n\", i, tst_irq[i]);\n        close(tst_irq[i]);\n    }\n    metal_set_log_level(mll);\n    probe_write(\"[irq] restored_log_level=%d\\n\", (int)mll);\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) {\n        metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n        probe_write(\"[irq] returning error rc=%d, msg=%s\", rc, err_msg);\n    } else {\n        probe_write(\"[irq] returning rc=%d\\n\", rc);\n    }\n    return rc;\n}\n"
}