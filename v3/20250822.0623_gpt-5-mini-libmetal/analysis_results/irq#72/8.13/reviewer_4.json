{
  "user_message": "An agent A claimed that the following irq code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of irq.\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nVariable 'err_msg' is declared as 'char *err_msg = \"\";' but it points to string literals and is only read; it should be a pointer to const (e.g. 'const char *err_msg'). Therefore Rule 8.13 is violated. (If the logging API requires a non-const char *, prefer changing the API or use an explicit cast at the call site, but the local pointer should be const-qualified.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[ENTRY] irq(): initial err_msg=0x557b94001484 (\"\"), initial_log_level=7\n[STATE] log level set to METAL_LOG_CRITICAL\n[LOOP] created eventfd: i=0, fd=6\n[LOOP] created eventfd: i=1, fd=7\n[ACTION] registering irq 0\n[RESULT] register irq 0 -> rc=0\n[ACTION] registering irq 1\n[RESULT] register irq 1 -> rc=0\n[ACTION] unregistering irq 0\n[ACTION] re-registering irq 0\n[RESULT] register irq 0 after unregister -> rc=0\n[ACTION] final unregs for irq 0 and irq 1\n[CLEANUP] closing fd: i=0, fd=6\n[CLEANUP] closing fd: i=1, fd=7\n[STATE] restored log level to 7\n[CHECK] err_msg=0x557b94001484 (\"\"), rc=0\n[FINAL_OK] rc=0\n[EXIT] irq() returning rc=0\n[ENTRY] irq(): initial err_msg=0x55f7ca57e484 (\"\"), initial_log_level=7\n[STATE] log level set to METAL_LOG_CRITICAL\n[LOOP] created eventfd: i=0, fd=6\n[LOOP] created eventfd: i=1, fd=7\n[ACTION] registering irq 0\n[RESULT] register irq 0 -> rc=0\n[ACTION] registering irq 1\n[RESULT] register irq 1 -> rc=0\n[ACTION] unregistering irq 0\n[ACTION] re-registering irq 0\n[RESULT] register irq 0 after unregister -> rc=0\n[ACTION] final unregs for irq 0 and irq 1\n[CLEANUP] closing fd: i=0, fd=6\n[CLEANUP] closing fd: i=1, fd=7\n[STATE] restored log level to 7\n[CHECK] err_msg=0x55f7ca57e484 (\"\"), rc=0\n[FINAL_OK] rc=0\n[EXIT] irq() returning rc=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function irq:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n...\nint metal_irq_register(int irq,\n\t\t       metal_irq_handler irq_handler,\n\t\t       void *arg)\n{\n\tstruct metal_irq_controller *cntr;\n\tstruct metal_irq *irq_data;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tif (cntr->irq_register != NULL) {\n\t\treturn cntr->irq_register(cntr, irq, irq_handler, arg);\n\t}\n\tif (cntr->irqs == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tirq_data = &cntr->irqs[irq - cntr->irq_base];\n\tirq_data->hd = irq_handler;\n\tirq_data->arg = arg;\n\treturn 0;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. err_msg is declared as char * but is initialized from string literals (\"\" and other literal messages) and is only ever read (checked and passed to metal_log). Per MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so this should be declared as const char *err_msg = \"\";. If some called API genuinely requires a non-const char * parameter, prefer fixing the API; otherwise an explicit cast at the call site can be used. The current code therefore violates Rule 8.13."
}