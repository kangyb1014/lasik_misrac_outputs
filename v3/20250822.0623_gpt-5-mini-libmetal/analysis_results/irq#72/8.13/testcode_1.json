{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable err_msg is declared as a non-const pointer to a string literal: char *err_msg = \"\";. String literals have static storage and must not be modified; per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type. The correct form is: const char *err_msg = \"\";. Even though the code only reads err_msg (checks err_msg[0] and passes it to metal_log), the pointer type should still be const to reflect immutability and satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/723.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\tprobe_log(\"irq(): entry: err_msg addr=%p, err_msg_content='%s', initial_mll=%d\", (void *)err_msg, err_msg, (int)mll);\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\tprobe_log(\"irq(): set log level to METAL_LOG_CRITICAL\");\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tprobe_log(\"irq(): eventfd created: index=%d, fd=%d\", i, tst_irq[i]);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tprobe_log(\"irq(): metal_irq_register called for index 0, fd=%d, returned rc=%d\", tst_irq[0], rc);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tprobe_log(\"irq(): error path: err_msg set to '%s' addr=%p, rc=%d\", err_msg, (void *)err_msg, rc);\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tprobe_log(\"irq(): metal_irq_register called for index 1, fd=%d, returned rc=%d\", tst_irq[1], rc);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tprobe_log(\"irq(): error path: err_msg set to '%s' addr=%p, rc=%d\", err_msg, (void *)err_msg, rc);\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\tprobe_log(\"irq(): metal_irq_unregister called for index 0, fd=%d\", tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tprobe_log(\"irq(): metal_irq_register called for index 0 (after unregister), fd=%d, returned rc=%d\", tst_irq[0], rc);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tprobe_log(\"irq(): error path: err_msg set to '%s' addr=%p, rc=%d\", err_msg, (void *)err_msg, rc);\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tprobe_log(\"irq(): metal_irq_unregister called for index 0 (final)\");\n\tmetal_irq_unregister(tst_irq[1]);\n\tprobe_log(\"irq(): metal_irq_unregister called for index 1 (final)\");\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tprobe_log(\"irq(): closing fd: index=%d, fd=%d\", i, tst_irq[i]);\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tprobe_log(\"irq(): restored original log level to %d\", (int)mll);\n\tprobe_log(\"irq(): before final check: err_msg addr=%p, content='%s', first_char=0x%02x, rc=%d\",\n\t\t\t (void *)err_msg, err_msg, (unsigned char)err_msg[0], rc);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) {\n\t\tprobe_log(\"irq(): final rc indicates error rc=%d, err_msg='%s'\", rc, err_msg);\n\t\tmetal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\t} else {\n\t\tprobe_log(\"irq(): final rc=%d, no error logged to metal_log\", rc);\n\t}\n\tprobe_log(\"irq(): exit with rc=%d\", rc);\n\treturn rc;\n}\n"
}