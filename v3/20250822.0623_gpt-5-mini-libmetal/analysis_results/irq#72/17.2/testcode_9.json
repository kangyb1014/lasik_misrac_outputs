{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call uses a function pointer (cntr->irq_register). If that pointer is set to metal_irq_register itself or to any function that (directly or indirectly) calls metal_irq_register, an indirect recursion occurs: metal_irq_register -> cntr->irq_register -> metal_irq_register -> ... , violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/726.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <execinfo.h>\n#include <stdint.h>\n#include <pthread.h>\n\n/* Probe helpers: write logs to /tmp/logs/726.txt capturing control flow and state */\nstatic void ensure_log_dir(void)\n{\n    /* best-effort create the directory */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void log_probe(const char *fmt, ...)\n{\n    ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/726.txt\", \"a\");\n    if (!f) return;\n\n    time_t t = time(NULL);\n    struct tm tm;\n    localtime_r(&t, &tm);\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d pid=%d tid=%lu: \",\n            tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n            tm.tm_hour, tm.tm_min, tm.tm_sec,\n            (int)getpid(), (unsigned long)pthread_self());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void log_backtrace(void)\n{\n    void *buffer[32];\n    int nptrs = backtrace(buffer, sizeof(buffer) / sizeof(void*));\n    char **strings = backtrace_symbols(buffer, nptrs);\n    if (strings == NULL) {\n        log_probe(\"backtrace: failed to get symbols (nptrs=%d)\", nptrs);\n        return;\n    }\n    for (int i = 0; i < nptrs; ++i) {\n        log_probe(\"bt[%d] %p %s\", i, buffer[i], strings[i]);\n    }\n    free(strings);\n}\n\n/* Forward declarations for symbols used by the original code.\n   These are declared extern to allow taking their addresses for logging\n   without changing behavior. They must match the real declarations\n   in the rest of the project. */\nextern int metal_set_log_level(int level);\nextern int metal_get_log_level(void);\nextern void metal_log(int level, const char *fmt, ...);\nextern int metal_irq_register(int fd, void (*handler)(int, void*), void *arg);\nextern void metal_irq_unregister(int fd);\nextern void irq_handler(int, void*);\n\n/* The original irq function with inserted probes. */\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg=\"\";\n    enum metal_log_level mll= metal_get_log_level();\n    int i, tst_irq[2];\n\n    log_probe(\"ENTER %s: saved log level=%d, addr(metal_irq_register)=%p, addr(irq_handler)=%p\",\n              __func__, mll, (void *)(uintptr_t) &metal_irq_register, (void *)(uintptr_t) &irq_handler);\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0,0);\n        log_probe(\"%s: created eventfd index=%d fd=%d\", __func__, i, tst_irq[i]);\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n              __func__, i, tst_irq[i]);\n    }\n\n    /* First register */\n    log_probe(\"about to call metal_irq_register(fd=%d, handler=%p, arg=%p)\",\n              tst_irq[0], (void *)(uintptr_t)irq_handler, (void *)1);\n    log_backtrace();\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    log_probe(\"returned from metal_irq_register(fd=%d) => rc=%d\", tst_irq[0], rc);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        goto out;\n    }\n\n    /* Second register */\n    log_probe(\"about to call metal_irq_register(fd=%d, handler=%p, arg=%p)\",\n              tst_irq[1], (void *)(uintptr_t)irq_handler, (void *)1);\n    log_backtrace();\n    rc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n    log_probe(\"returned from metal_irq_register(fd=%d) => rc=%d\", tst_irq[1], rc);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        goto out;\n    }\n\n    /* Unregister and re-register to exercise potential indirect recursion */\n    log_probe(\"about to call metal_irq_unregister(fd=%d)\", tst_irq[0]);\n    metal_irq_unregister(tst_irq[0]);\n    log_probe(\"returned from metal_irq_unregister(fd=%d)\", tst_irq[0]);\n\n    log_probe(\"about to call metal_irq_register(fd=%d, handler=%p, arg=%p) after unregister\",\n              tst_irq[0], (void *)(uintptr_t)irq_handler, (void *)1);\n    log_backtrace();\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    log_probe(\"returned from metal_irq_register(fd=%d) after unregister => rc=%d\", tst_irq[0], rc);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        goto out;\n    }\n    log_probe(\"about to call metal_irq_unregister(fd=%d)\", tst_irq[0]);\n    metal_irq_unregister(tst_irq[0]);\n    log_probe(\"returned from metal_irq_unregister(fd=%d)\", tst_irq[0]);\n\n    log_probe(\"about to call metal_irq_unregister(fd=%d)\", tst_irq[1]);\n    metal_irq_unregister(tst_irq[1]);\n    log_probe(\"returned from metal_irq_unregister(fd=%d)\", tst_irq[1]);\n\nout:\n    for (i = 0; i < 2; i++) {\n        log_probe(\"closing fd index=%d fd=%d\", i, tst_irq[i]);\n        close(tst_irq[i]);\n    }\n    metal_set_log_level(mll);\n    log_probe(\"restored log level=%d, err_msg='%s', rc=%d\", mll, err_msg, rc);\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\n    log_probe(\"EXIT %s => rc=%d\", __func__, rc);\n    return rc;\n}\n"
}