{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ps' is declared as 'struct metal_page_size *ps' but the function only reads from it (accesses ps->page_size, ps->mmap_flags, ps->page_shift) and never modifies the pointed-to object. According to MISRA C 2023 Rule 8.13 it should be declared as 'const struct metal_page_size *ps'. The out-parameter 'struct metal_io_region **result' is modified intentionally and therefore may remain non-const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe logging helpers: append human-readable diagnostics to\n * /tmp/logs/523.txt. These helpers do not change program logic,\n * only record control flow and key state so the reported violation\n * scenario can be reproduced and inspected.\n */\nstatic void write_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    time_t t;\n    char timebuf[64];\n\n    /* Ensure log directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    t = time(NULL);\n    if (t != (time_t)-1) {\n        struct tm tm;\n        if (localtime_r(&t, &tm) != NULL) {\n            if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm) == 0) {\n                timebuf[0] = '\\0';\n            }\n        } else {\n            timebuf[0] = '\\0';\n        }\n    } else {\n        timebuf[0] = '\\0';\n    }\n\n    fprintf(f, \"%s pid=%d: \", timebuf, (int)getpid());\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void log_entry(const char *name, size_t size, struct metal_io_region **result)\n{\n    write_log(\"enter metal_shmem_open: name='%s' size=%zu result=%p\",\n              name ? name : \"(null)\", size, (void *)result);\n}\n\nstatic void log_after_generic(int error)\n{\n    write_log(\"metal_shmem_open_generic returned %d\", error);\n}\n\nstatic void log_after_open(int error)\n{\n    write_log(\"metal_open returned %d\", error);\n}\n\nstatic void log_fd(int fd)\n{\n    write_log(\"shmem fd = %d\", fd);\n}\n\nstatic void log_page_size_info(const struct metal_page_size *ps)\n{\n    if (ps == NULL) {\n        write_log(\"page_size: ps is NULL\");\n        return;\n    }\n    /* Log fields accessed in the function to demonstrate read-only use. */\n    write_log(\"page_size probe: page_size=%zu mmap_flags=0x%lx page_shift=%d\",\n              (size_t)ps->page_size,\n              (unsigned long)ps->mmap_flags,\n              (int)ps->page_shift);\n}\n\nstatic void log_try_map_attempt(const struct metal_page_size *ps, size_t size)\n{\n    write_log(\"attempting metal_shmem_try_map with page_size=%zu target_size=%zu\",\n              (size_t)ps->page_size, size);\n}\n\nstatic void log_try_map_result(int error)\n{\n    write_log(\"metal_shmem_try_map returned %d\", error);\n}\n\nstatic void log_final(int fd, int error)\n{\n    write_log(\"closing fd=%d returning error=%d\", fd, error);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    /* Probe: entry */\n    log_entry(name, size, result);\n\n    error = metal_shmem_open_generic(name, size, result);\n    /* Probe: after generic */\n    log_after_generic(error);\n    if (!error)\n        return error;\n\n    error = metal_open(name, 1);\n    /* Probe: after open */\n    log_after_open(error);\n    if (error < 0) {\n        write_log(\"Failed to open shmem file '%s' : error=%d\", name ? name : \"(null)\", error);\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        return error;\n    }\n    fd = error;\n    /* Probe: fd */\n    log_fd(fd);\n\n    /* Iterate through page sizes in decreasing order. */\n    write_log(\"starting page size iteration\");\n    metal_for_each_page_size_down(ps) {\n        /* Probe: inspect ps fields (read-only). */\n        log_page_size_info(ps);\n\n        if (ps->page_size > 2 * size) {\n            write_log(\"skipping page size %zu because > 2*size (%zu)\", (size_t)ps->page_size, (size_t)2 * size);\n            continue;\n        }\n        /* Probe: about to try mapping */\n        log_try_map_attempt(ps, size);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        /* Probe: result of try_map */\n        log_try_map_result(error);\n        if (!error) {\n            write_log(\"mapping succeeded with page_size=%zu\", (size_t)ps->page_size);\n            break;\n        }\n    }\n\n    close(fd);\n    log_final(fd, error);\n    return error;\n}\n"
}