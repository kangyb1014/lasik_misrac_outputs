{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(shmem->name, name) is performed with no prior validation that either pointer is non-NULL and that both strings are NUL-terminated. For example, if metal_shmem_open is called with name == NULL (or with a non NUL-terminated buffer), metal_shmem_open_generic will call strcmp which will read through the invalid/unterminated memory and thus access beyond the bounds of the referenced object(s). This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/529.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "static void probe_log(const char *stage, const char *name, size_t size,\n                           struct metal_io_region **result, int error,\n                           int fd, struct metal_page_size *ps)\n{\n    /* Declare prototypes locally to avoid requiring specific headers here. */\n    extern int snprintf(char *, size_t, const char *, ...);\n    extern int system(const char *);\n\n    char cmd[512];\n    int n = snprintf(cmd, sizeof(cmd),\n        \"/bin/echo '%s name=%p size=%zu result=%p error=%d fd=%d page_size=%zu' >> /tmp/logs/529.txt\",\n        stage, (const void *)name, size, (void *)result, error, fd,\n        (ps != NULL) ? ps->page_size : (size_t)0);\n    if (n > 0 && (size_t)n < sizeof(cmd)) {\n        /* Best-effort logging; ignore return value. */\n        (void)system(cmd);\n    } else {\n        (void)system(\"/bin/echo 'probe_log: truncated message' >> /tmp/logs/529.txt\");\n    }\n}\n\nint metal_shmem_open(const char *name, size_t size,\n             struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    /* Log entry and parameters (do NOT dereference 'name' to avoid UB). */\n    probe_log(\"enter\", name, size, result, 0, -1, NULL);\n\n    error = metal_shmem_open_generic(name, size, result);\n\n    /* Log result of generic open. */\n    probe_log(\"after_metal_shmem_open_generic\", name, size, result, error, -1, NULL);\n\n    if (!error)\n        return error;\n\n    probe_log(\"before_metal_open\", name, size, result, error, -1, NULL);\n    error = metal_open(name, 1);\n    probe_log(\"after_metal_open\", name, size, result, error, -1, NULL);\n\n    if (error < 0) {\n        /* Preserve original logging behavior. */\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        return error;\n    }\n    fd = error;\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        /* Log page size being considered. */\n        probe_log(\"page_size_check\", name, size, result, error, fd, ps);\n\n        if (ps->page_size > 2 * size)\n            continue;\n        error = metal_shmem_try_map(ps, fd, size, result);\n\n        /* Log result of try_map for this page size. */\n        probe_log(\"after_metal_shmem_try_map\", name, size, result, error, fd, ps);\n\n        if (!error)\n            break;\n    }\n\n    close(fd);\n    probe_log(\"exit\", name, size, result, error, -1, NULL);\n    return error;\n}"
}