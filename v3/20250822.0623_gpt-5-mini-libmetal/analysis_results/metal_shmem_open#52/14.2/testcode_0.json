{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_for_each_page_size_down(ps) hides the actual for(;;) clauses. If that macro expands to a well-formed for loop that uses only the loop counter identifier ps in the second clause and only modifies ps in the third clause (for example: for (ps = last_page_size; ps >= first_page_size; --ps)) then Rule 14.2 is satisfied. However, a violation occurs if the macro expansion places function calls or uses other objects in the second or third clauses that have persistent side effects or that reference objects modified in the loop body. Concrete violation example: the macro expands to\n  for (ps = page_size_list_last(); page_size_available(ps); ps = page_size_list_prev(ps))\nwhere page_size_available() has side effects (or reads/writes an object that metal_shmem_try_map() modifies). In that case the second clause has persistent side effects and/or uses objects modified in the body, violating MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/524.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/524.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/524.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    probe_log(\"ENTER: metal_shmem_open(name=%s, size=%zu, result=%p)\\n\",\n              (name ? name : \"(null)\"), size, (void *)result);\n\n    error = metal_shmem_open_generic(name, size, result);\n    probe_log(\"after metal_shmem_open_generic: error=%d\\n\", error);\n    if (!error) {\n        probe_log(\"early return: already opened (error==0)\\n\");\n        return error;\n    }\n\n    error = metal_open(name, 1);\n    probe_log(\"after metal_open: return=%d\\n\", error);\n    if (error < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        probe_log(\"metal_open failed, returning %d\\n\", error);\n        return error;\n    }\n    fd = error;\n    probe_log(\"shmem fd=%d\\n\", fd);\n\n    /* Iterate through page sizes in decreasing order. */\n    probe_log(\"BEGIN: iterate page sizes (fd=%d, size=%zu)\\n\", fd, size);\n\n    /* Iteration counter to help debugging the macro-expanded loop. */\n    int __probe_iter = 0;\n\n    metal_for_each_page_size_down(ps) {\n        __probe_iter++;\n        probe_log(\"iter %d: ps=%p page_size=%zu\\n\", __probe_iter, (void *)ps,\n                  (ps ? ps->page_size : (size_t)0));\n\n        if (ps->page_size > 2 * size) {\n            probe_log(\"iter %d: page_size (%zu) > 2*size (%zu) -> continue\\n\",\n                      __probe_iter, ps->page_size, 2 * size);\n            continue;\n        }\n\n        probe_log(\"iter %d: calling metal_shmem_try_map(ps=%p, fd=%d, size=%zu, result=%p)\\n\",\n                  __probe_iter, (void *)ps, fd, size, (void *)result);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        probe_log(\"iter %d: metal_shmem_try_map returned %d\\n\", __probe_iter, error);\n\n        if (!error) {\n            probe_log(\"iter %d: mapping succeeded, breaking out of loop\\n\", __probe_iter);\n            break;\n        }\n    }\n\n    probe_log(\"END: finished iteration, closing fd=%d, final error=%d\\n\", fd, error);\n\n    close(fd);\n    probe_log(\"RETURN: %d\\n\", error);\n    return error;\n}\n"
}