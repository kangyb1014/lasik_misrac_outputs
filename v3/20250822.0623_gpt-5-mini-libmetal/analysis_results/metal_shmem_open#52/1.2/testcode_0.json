{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_log uses GCC/clang statement-expressions (the '({ ... })' construct) and also uses the GNU variadic-macro comma-swallowing extension ('##__VA_ARGS__'). Both constructs are documented compiler-specific extensions and therefore violate MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/520.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <unistd.h>\n\n/* Helper logging function that appends probe information to the\n * specified log file. Uses only standard C library calls. */\nstatic void metal_shmem_probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/520.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[%s] \", tag);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n             struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    metal_shmem_probe_log(\"enter\", \"metal_shmem_open name='%s' size=%zu result_ptr=%p\",\n                         name ? name : \"(null)\", size, (void *)result);\n\n    error = metal_shmem_open_generic(name, size, result);\n    metal_shmem_probe_log(\"after_generic\", \"metal_shmem_open_generic returned %d\",\n                         error);\n    if (!error) {\n        metal_shmem_probe_log(\"early_return\", \"generic open succeeded, returning %d\",\n                             error);\n        return error;\n    }\n\n    error = metal_open(name, 1);\n    metal_shmem_probe_log(\"after_metal_open\", \"metal_open('%s',1) returned %d\",\n                         name ? name : \"(null)\", error);\n    if (error < 0) {\n        metal_shmem_probe_log(\"metal_open_failed\", \"metal_open failed, preparing to call metal_log with message: Failed to open shmem file :%s\",\n                             name ? name : \"(null)\");\n        /* Preserve original logging call */\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        metal_shmem_probe_log(\"return_error\", \"returning error %d after metal_log\", error);\n        return error;\n    }\n    fd = error;\n    metal_shmem_probe_log(\"fd_obtained\", \"opened fd=%d\", fd);\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        metal_shmem_probe_log(\"page_iter\", \"considering page_size=%zu for requested size=%zu\",\n                             (size_t)ps->page_size, size);\n        if (ps->page_size > 2 * size) {\n            metal_shmem_probe_log(\"page_skip\", \"skipping page_size=%zu (> 2*size=%zu)\",\n                                 (size_t)ps->page_size, (size_t)(2 * size));\n            continue;\n        }\n        metal_shmem_probe_log(\"try_map\", \"attempting metal_shmem_try_map with page_size=%zu fd=%d size=%zu\",\n                             (size_t)ps->page_size, fd, size);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        metal_shmem_probe_log(\"try_map_result\", \"metal_shmem_try_map returned %d result_region_ptr=%p\",\n                             error, (void *)(result ? *result : NULL));\n        if (!error) {\n            metal_shmem_probe_log(\"map_success\", \"mapping succeeded with page_size=%zu, breaking loop\",\n                                 (size_t)ps->page_size);\n            break;\n        }\n    }\n\n    close(fd);\n    metal_shmem_probe_log(\"done\", \"closed fd=%d final_error=%d\", fd, error);\n    return error;\n}\n"
}