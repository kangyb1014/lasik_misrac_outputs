{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen _metal.common.ref_count == 0 the expression (_metal.common.ref_count++ != 0) executes the post-increment side\u2011effect (ref_count becomes 1) but the very next statement is memset(&_metal, 0, sizeof(_metal)), which clears ref_count back to 0. The increment is therefore executed yet has no observable effect \u2014 removing that increment would not change program behaviour in this path. This constitutes dead code, so Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/292.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n/*\n * Minimal external declaration to access the ref_count for logging.\n * This mirrors the symbol name used in the violation report: `_metal.common.ref_count`.\n * The goal is to read the ref_count value before and after probing a bus.\n */\nextern struct {\n    struct { int ref_count; } common;\n} _metal;\n\nstatic void __metal_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/292.txt\", \"a\");\n    if (!f)\n        return;\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] %s\\n\", (long)t, msg);\n    fclose(f);\n}\n\nstatic void __metal_log_fmt(const char *prefix, const void *addr, size_t len)\n{\n    FILE *f = fopen(\"/tmp/logs/292.txt\", \"a\");\n    if (!f)\n        return;\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] %s addr=%p len=%zu\\n\", (long)t, prefix, addr, len);\n    /* Dump up to 64 bytes to keep logs concise */\n    const unsigned char *p = (const unsigned char *)addr;\n    size_t max = len > 64 ? 64 : len;\n    fprintf(f, \"[%ld] \", (long)t);\n    for (size_t i = 0; i < max; ++i)\n        fprintf(f, \"%02x\", p[i]);\n    if (len > max)\n        fprintf(f, \"..(truncated)\");\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_linux_bus_init(void)\n{\n    struct linux_bus *lbus;\n    int valid = 0;\n\n    __metal_log(\"metal_linux_bus_init: start\");\n\n    for_each_linux_bus(lbus) {\n        /* Capture ref_count and a small memory snapshot of _metal before probing */\n        int pre_ref = _metal.common.ref_count;\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"Probing bus %p: pre_ref=%d, valid_so_far=%d\", (void *)lbus, pre_ref, valid);\n        __metal_log(buf);\n        __metal_log_fmt(\"_metal snapshot before probe:\", &_metal, sizeof(_metal));\n\n        int ret = metal_linux_probe_bus(lbus);\n\n        /* Capture ref_count and snapshot after probing */\n        int post_ref = _metal.common.ref_count;\n        snprintf(buf, sizeof(buf), \"Probed bus %p: ret=%d, pre_ref=%d, post_ref=%d\", (void *)lbus, ret, pre_ref, post_ref);\n        __metal_log(buf);\n        __metal_log_fmt(\"_metal snapshot after probe:\", &_metal, sizeof(_metal));\n\n        /* Preserve original accumulation logic */\n        valid += ret ? 0 : 1;\n    }\n\n    snprintf((char[]){0}, 1, \"\"); /* keep consistent style; no-op to avoid warnings */\n    __metal_log(\"metal_linux_bus_init: end\");\n\n    return valid ? 0 : -ENODEV;\n}\n"
}