{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'metal_unused(params);' is typically a no-op used to suppress \"unused parameter\" warnings (commonly defined as '#define metal_unused(x) ((void)(x))'). That cast-to-void evaluates the parameter but produces no side effects; removing the call does not change program behaviour. Since the operation is executed yet can be removed without effect, it constitutes dead code and therefore violates MISRA C 2023 Rule 2.2 (unless the macro actually has observable side effects, which would be unusual).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/292.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n\nint metal_linux_bus_init(void)\n{\n    struct linux_bus *lbus;\n    int valid = 0;\n    FILE *log = fopen(\"/tmp/logs/292.txt\", \"a\");\n\n    if (log) {\n        fprintf(log, \"metal_linux_bus_init: enter\\n\");\n    }\n\n    for_each_linux_bus(lbus) {\n        if (log) {\n            fprintf(log, \"iter: lbus=%p before_probe valid=%d\\n\", (void *)lbus, valid);\n        }\n\n        int probe_ret = metal_linux_probe_bus(lbus);\n\n        if (log) {\n            fprintf(log, \"iter: lbus=%p probe_ret=%d\\n\", (void *)lbus, probe_ret);\n        }\n\n        valid += probe_ret ? 0 : 1;\n\n        if (log) {\n            fprintf(log, \"iter: lbus=%p after_update valid=%d\\n\", (void *)lbus, valid);\n        }\n    }\n\n    int ret = valid ? 0 : -ENODEV;\n\n    if (log) {\n        fprintf(log, \"metal_linux_bus_init: exit valid=%d ret=%d\\n\", valid, ret);\n        fclose(log);\n    }\n\n    return ret;\n}\n"
}