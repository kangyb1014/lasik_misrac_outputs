{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator lbus is declared as 'struct linux_bus *lbus' and is only used to read fields (e.g. (lbus)->bus_name) in the for_each_linux_bus(lbus) iteration. The pointer is not const-qualified even though it could be: declare 'const struct linux_bus *lbus' (and make metal_linux_probe_bus accept a pointer to const if it does not modify the structure) so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "#include <stdio.h>\n\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\tFILE *fp = fopen(\"/tmp/logs/293.txt\", \"a\");\n\n\tif (fp) {\n\t\tfprintf(fp, \"metal_linux_bus_init: enter\\n\");\n\t\tfflush(fp);\n\t}\n\n\tfor_each_linux_bus(lbus) {\n\t\t/* Log iterator pointer and readable fields to capture the scenario */\n\t\tif (fp) {\n\t\t\tfprintf(fp, \"iter: lbus=%p\", (void *)lbus);\n\t\t\tif (lbus) {\n\t\t\t\t/* Probe the commonly-read field bus_name (if present). This mirrors the original read-only use. */\n\t\t\t\tconst char *name = \"(unknown)\";\n\t\t\t\t/* Attempt to access the field as the original code does; guard against NULL */\n\t\t\t\tif (lbus->bus_name)\n\t\t\t\t\tname = lbus->bus_name;\n\t\t\t\tfprintf(fp, \" bus_name=%s\", name);\n\t\t\t}\n\t\t\tfprintf(fp, \"\\n\");\n\t\t\tfflush(fp);\n\t\t}\n\n\t\t/* Call probe once and record its result */\n\t\tint probe_result = metal_linux_probe_bus(lbus);\n\t\t/* Preserve original logic: increment valid only when probe indicates success (probe_result == 0) */\n\t\tvalid += probe_result ? 0 : 1;\n\n\t\tif (fp) {\n\t\t\tfprintf(fp, \"metal_linux_probe_bus(%p) returned %d; valid now=%d\\n\",\n\t\t\t\t(void *)lbus, probe_result, valid);\n\t\t\tfflush(fp);\n\t\t}\n\t}\n\n\tif (fp) {\n\t\tint ret = valid ? 0 : -ENODEV;\n\t\tfprintf(fp, \"metal_linux_bus_init: exit valid=%d return=%d\\n\", valid, ret);\n\t\tfflush(fp);\n\t\tfclose(fp);\n\t}\n\n\treturn valid ? 0 : -ENODEV;\n}\n"
}