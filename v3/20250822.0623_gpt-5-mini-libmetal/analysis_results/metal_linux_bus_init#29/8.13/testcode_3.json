{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iteration pointer is declared as 'struct linux_bus *lbus' and the macro assigns it from the (presumed) static array 'linux_bus' and only reads fields ((lbus)->bus_name) and passes lbus to metal_linux_probe_bus. Because the pointer does not point to a const-qualified type even though the code only appears to read the pointee, this fails the guidance of MISRA C 2023 Rule 8.13. The loop should use a 'const struct linux_bus *lbus' (and adjust metal_linux_probe_bus if it does not modify the bus) so the pointer is const-qualified when modification is not required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n\nint metal_linux_probe_bus(struct linux_bus *lbus); /* external probe, keep signature */\n\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\tFILE *log = fopen(\"/tmp/logs/293.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"metal_linux_bus_init: start\\n\");\n\t}\n\n\tint iter = 0;\n\n\tfor_each_linux_bus(lbus) {\n\t\t/* Log iteration and pointer value to provide evidence that a non-const pointer\n\t\t   is used to iterate over the (presumed) static linux_bus array. */\n\t\tif (log) {\n\t\t\tfprintf(log, \"iter=%d lbus_ptr=%p\\n\", iter, (void *)lbus);\n\t\t}\n\n\t\t/* Call the original probe and capture its return for logging. */\n\t\tint probe_ret = metal_linux_probe_bus(lbus);\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"iter=%d probe_ret=%d\\n\", iter, probe_ret);\n\t\t}\n\n\t\t/* Preserve original logic: increment valid when probe returns 0 (success). */\n\t\tvalid += probe_ret ? 0 : 1;\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"iter=%d valid=%d\\n\", iter, valid);\n\t\t}\n\n\t\t++iter;\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"metal_linux_bus_init: end valid=%d return=%d\\n\", valid, valid ? 0 : -ENODEV);\n\t\tfclose(log);\n\t}\n\n\treturn valid ? 0 : -ENODEV;\n}\n"
}