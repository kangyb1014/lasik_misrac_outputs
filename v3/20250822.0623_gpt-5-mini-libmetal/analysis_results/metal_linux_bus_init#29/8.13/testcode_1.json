{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer lbus is declared as struct linux_bus *lbus but in metal_linux_bus_init it is only used to iterate and read the bus entries (for_each_linux_bus tests (lbus)->bus_name and passes lbus to metal_linux_probe_bus). If the pointed-to linux_bus objects are not modified by this function, lbus should be declared as pointer to const: const struct linux_bus *lbus. Leaving it non-const when it could be const is a violation of MISRA C 2023 Rule 8.13. (If metal_linux_probe_bus requires a non-const pointer, the proper fix is to update that API to take a pointer-to-const or to justify the non-const use.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n\n/* Forward declaration of the real structure and probe function (provided elsewhere) */\nstruct linux_bus;\nint metal_linux_probe_bus(struct linux_bus *bus);\n\nint metal_linux_bus_init(void)\n{\n    struct linux_bus *lbus;\n    int valid = 0;\n\n    /* Open log file to record control flow and state for the violation scenario. */\n    FILE *log = fopen(\"/tmp/logs/293.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_linux_bus_init: enter\\n\");\n    }\n\n    /* A small helper struct to attempt to read the common bus_name member for logging.\n     * We do not redefine the real struct linux_bus here; this local type is only used\n     * to read the likely first-member bus_name for debugging output. */\n    struct linux_bus_ref { const char *bus_name; };\n\n    int idx = 0;\n\n    /* Preserve original iteration logic. The for_each_linux_bus macro is expected\n     * to be defined in the build environment where this code is compiled. */\n    for_each_linux_bus(lbus) {\n        const char *name = NULL;\n\n        /* Try to obtain a readable bus name for the log. This uses a lightweight\n         * reinterpretation; it is only for debugging evidence and does not modify\n         * the pointed-to object. */\n        if (lbus != NULL) {\n            name = ((const struct linux_bus_ref *)lbus)->bus_name;\n        }\n\n        if (log) {\n            fprintf(log, \"iter %d: lbus=%p bus_name=%s\\n\",\n                    idx, (void *)lbus, (name != NULL) ? name : \"(null)\");\n        }\n\n        /* Call the original probe function and log its result. Keep the original\n         * logic for accumulating 'valid' unchanged. */\n        int probe_res = metal_linux_probe_bus(lbus);\n\n        if (log) {\n            fprintf(log, \"iter %d: metal_linux_probe_bus returned %d\\n\", idx, probe_res);\n            fflush(log);\n        }\n\n        valid += probe_res ? 0 : 1;\n        idx++;\n    }\n\n    if (log) {\n        fprintf(log, \"metal_linux_bus_init: exit valid=%d ret=%d\\n\",\n                valid, valid ? 0 : -ENODEV);\n        fclose(log);\n    }\n\n    return valid ? 0 : -ENODEV;\n}\n"
}