{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer variable lbus is declared as struct linux_bus * but is only used for read-only access in the loop and passed to metal_linux_probe_bus. If metal_linux_probe_bus does not modify the linux_bus object, then lbus should be declared as const struct linux_bus * (and the probe function should take a const pointer). In that situation the code violates MISRA C 2023 Rule 8.13 because a pointer is not const-qualified even though it can be. If, however, metal_linux_probe_bus or other uses modify the pointed-to linux_bus, then the non-const declaration is required and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n\nint metal_linux_probe_bus(struct linux_bus *); /* external probe function */\n\nint metal_linux_bus_init(void)\n{\n    struct linux_bus *lbus;\n    int valid = 0;\n    FILE *log = fopen(\"/tmp/logs/293.txt\", \"a\");\n\n    if (log) {\n        fprintf(log, \"metal_linux_bus_init: start\\n\");\n    }\n\n    int iter = 0;\n    for_each_linux_bus(lbus) {\n        if (log) {\n            fprintf(log, \"iter=%d: lbus=%p\\n\", iter, (void *)lbus);\n        }\n\n        /* Call probe once and record its result so we preserve original logic */\n        int probe_res = metal_linux_probe_bus(lbus);\n\n        if (log) {\n            fprintf(log, \"iter=%d: metal_linux_probe_bus returned %d\\n\", iter, probe_res);\n        }\n\n        /* original update: valid += metal_linux_probe_bus(lbus) ? 0 : 1; */\n        valid += probe_res ? 0 : 1;\n\n        if (log) {\n            fprintf(log, \"iter=%d: valid=%d\\n\", iter, valid);\n        }\n\n        iter++;\n    }\n\n    int ret = valid ? 0 : -ENODEV;\n\n    if (log) {\n        fprintf(log, \"metal_linux_bus_init: end, valid=%d, return=%d\\n\", valid, ret);\n        fclose(log);\n    }\n\n    return ret;\n}\n"
}