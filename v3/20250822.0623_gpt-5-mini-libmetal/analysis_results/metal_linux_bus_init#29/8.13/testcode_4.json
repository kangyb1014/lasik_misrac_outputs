{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer is declared as 'struct sysfs_bus *sbus;'. If sbus is only used to read from the pointed sysfs_bus objects (e.g. iterating/inspecting fields) and never used to modify them, it should be declared as 'const struct sysfs_bus *sbus;'. In that (likely) usage the current non-const declaration violates MISRA C 2023 Rule 8.13. If, however, the code does intentionally modify the pointed sysfs_bus objects through sbus, then the non-const declaration is justified and no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/293.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/293.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_linux_bus_init(void)\n{\n    struct linux_bus *lbus;\n    int valid = 0;\n\n    probe_log(\"metal_linux_bus_init: enter\");\n\n    for_each_linux_bus(lbus) {\n        /* Log the pointer value for the current linux_bus instance */\n        probe_log(\"iter: lbus=%p (about to probe)\", (void *)lbus);\n\n        /* Call the original probe function once and record its raw return */\n        int probe_ret = metal_linux_probe_bus(lbus);\n        probe_log(\"metal_linux_probe_bus returned: %d\", probe_ret);\n\n        /* Preserve original accumulation logic: metal_linux_probe_bus(lbus) ? 0 : 1 */\n        valid += probe_ret ? 0 : 1;\n        probe_log(\"updated valid=%d after processing lbus=%p\", valid, (void *)lbus);\n    }\n\n    probe_log(\"metal_linux_bus_init: exit valid=%d returning %d\", valid, (valid ? 0 : -ENODEV));\n    return valid ? 0 : -ENODEV;\n}\n"
}