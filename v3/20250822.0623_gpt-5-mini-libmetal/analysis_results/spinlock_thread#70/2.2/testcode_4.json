{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe increment total++ is dead code if the global 'total' is never read (and is not volatile or used for synchronization/side-effects). In that scenario removing total++ would not change any observable program behaviour, so Rule 2.2 is violated. If, however, 'total' is inspected elsewhere (or declared volatile, or its updates affect timing-critical behaviour or synchronization), then the increment is not dead and Rule 2.2 is not violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified spinlock_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/702.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of spinlock_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of spinlock_thread:\n```c\nstatic void *spinlock_thread(void *arg)\n{\n\tstruct metal_spinlock *l = arg;\n\tint i;\n\n\tfor (i = 0; i < spinlock_test_count; i++) {\n\t\tmetal_spinlock_acquire(l);\n\t\ttotal++;\n\t\tmetal_spinlock_release(l);\n\t}\n\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified spinlock_thread code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe helper: append a formatted message to /tmp/logs/702.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    int saved_errno = errno;\n\n    /* Ensure log directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/702.txt\", \"a\");\n    if (f == NULL) {\n        /* If opening the designated log file fails, attempt a fallback in /tmp. */\n        f = fopen(\"/tmp/702.txt\", \"a\");\n        if (f == NULL) {\n            /* Give up silently to avoid changing program behaviour. */\n            errno = saved_errno;\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n    errno = saved_errno;\n}\n\nstatic void *spinlock_thread(void *arg)\n{\n    struct metal_spinlock *l = arg;\n    int i;\n\n    /* Log thread start */\n    probe_log(\"spinlock_thread: thread=%lu start\", (unsigned long)pthread_self());\n\n    for (i = 0; i < spinlock_test_count; i++) {\n        probe_log(\"thread=%lu iter=%d acquiring\", (unsigned long)pthread_self(), i);\n\n        metal_spinlock_acquire(l);\n\n        /* Capture state inside critical section for an accurate trace. */\n        probe_log(\"thread=%lu iter=%d acquired before_inc total=%d\", (unsigned long)pthread_self(), i, total);\n\n        total++;\n\n        probe_log(\"thread=%lu iter=%d released after_inc total=%d\", (unsigned long)pthread_self(), i, total);\n\n        metal_spinlock_release(l);\n\n        probe_log(\"thread=%lu iter=%d post_release\", (unsigned long)pthread_self(), i);\n    }\n\n    probe_log(\"spinlock_thread: thread=%lu end\", (unsigned long)pthread_self());\n\n    return NULL;\n}\n"
}