{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe integer function parameter 'fd' is reassigned inside metal_map by the statement 'fd = -1;'. This modifies a function parameter (not a pointer target) and therefore violates MISRA C 2023 Rule 17.8. Use a local copy (e.g. int local_fd = fd; and modify local_fd) to avoid changing the parameter.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_map entry: fd=6, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cbcf26d58\nmetal_map entry: fd=7, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cbd727d58\nmetal_map entry: fd=10, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cbdf28d58\nflags after MAP_SHARED applied: 0x1\nflags after MAP_SHARED applied: 0x1\nflags after MAP_SHARED applied: 0x1\nbranch: expand path taken; reqsize=1048576\nbranch: expand path taken; reqsize=1048576\nbranch: expand path taken; reqsize=1048576\nmetal_map entry: fd=11, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cbe729d58\nafter flock(LOCK_EX): error=0, errno=0\nflags after MAP_SHARED applied: 0x1\nafter fstat: error=0, st_size=1048576\nbranch: expand path taken; reqsize=1048576\nafter ftruncate (if performed): error=0, errno=0\nafter flock(LOCK_UN): error=0\nafter flock(LOCK_EX): error=0, errno=0\nmetal_map entry: fd=12, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cbf72bd58\nmmap succeeded: mem=0x7f0cbc627000, written to *result=0x7f0cbc627000, returning 0\nafter fstat: error=0, st_size=1048576\nflags after MAP_SHARED applied: 0x1\nafter ftruncate (if performed): error=0, errno=0\nbranch: expand path taken; reqsize=1048576\nafter flock(LOCK_UN): error=0\nafter flock(LOCK_EX): error=0, errno=0\nafter fstat: error=0, st_size=1048576\nafter ftruncate (if performed): error=0, errno=0\nafter flock(LOCK_UN): error=0\nafter flock(LOCK_EX): error=0, errno=0\nafter fstat: error=0, st_size=1048576\nafter ftruncate (if performed): error=0, errno=0\nafter flock(LOCK_UN): error=0\nafter flock(LOCK_EX): error=0, errno=0\nafter fstat: error=0, st_size=1048576\nafter ftruncate (if performed): error=0, errno=0\nafter flock(LOCK_UN): error=0\nmetal_map entry: fd=13, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cb7ffed58\nmmap succeeded: mem=0x7f0cbc527000, written to *result=0x7f0cbc527000, returning 0\nflags after MAP_SHARED applied: 0x1\nbranch: expand path taken; reqsize=1048576\nafter flock(LOCK_EX): error=0, errno=0\nmetal_map entry: fd=14, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cbef2ad58\nmmap succeeded: mem=0x7f0cbc427000, written to *result=0x7f0cbc427000, returning 0\nafter fstat: error=0, st_size=1048576\nmmap succeeded: mem=0x7f0cbc327000, written to *result=0x7f0cbc327000, returning 0\nflags after MAP_SHARED applied: 0x1\nafter ftruncate (if performed): error=0, errno=0\nmmap succeeded: mem=0x7f0cbc227000, written to *result=0x7f0cbc227000, returning 0\nbranch: expand path taken; reqsize=1048576\nafter flock(LOCK_UN): error=0\nafter flock(LOCK_EX): error=0, errno=0\nafter fstat: error=0, st_size=1048576\nafter ftruncate (if performed): error=0, errno=0\nafter flock(LOCK_UN): error=0\nmmap succeeded: mem=0x7f0cbc127000, written to *result=0x7f0cbc127000, returning 0\nmmap succeeded: mem=0x7f0cbc027000, written to *result=0x7f0cbc027000, returning 0\nmetal_map entry: fd=9, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cb77fdd58\nmetal_map entry: fd=10, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cb67fbd58\nflags after MAP_SHARED applied: 0x1\nflags after MAP_SHARED applied: 0x1\nbranch: expand path taken; reqsize=1048576\nbranch: expand path taken; reqsize=1048576\nafter flock(LOCK_EX): error=0, errno=0\nafter fstat: error=0, st_size=1048576\nafter ftruncate (if performed): error=0, errno=0\nafter flock(LOCK_UN): error=0\nafter flock(LOCK_EX): error=0, errno=0\nafter fstat: error=0, st_size=1048576\nafter ftruncate (if performed): error=0, errno=0\nafter flock(LOCK_UN): error=0\nmmap succeeded: mem=0x7f0cbc427000, written to *result=0x7f0cbc427000, returning 0\nmetal_map entry: fd=8, offset=0, size=1048576, expand=1, flags=0x0, result_ptr=0x7f0cb6ffcd58\nmmap succeeded: mem=0x7f0cbc227000, written to *result=0x7f0cbc227000, returning 0\nflags after MAP_SHARED applied: 0x1\nbranch: expand path taken; reqsize=1048576\nafter flock(LOCK_EX): error=0, errno=0\nafter fstat: error=0, st_size=1048576\nafter ftruncate (if performed): error=0, errno=0\nafter flock(LOCK_UN): error=0\nmmap succeeded: mem=0x7f0cbc427000, written to *resul\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that function parameters shall not be modified (the object referred to by a pointer parameter may be modified, but the pointer itself shall not be). In metal_map the integer parameter fd is reassigned (fd = -1;), which directly violates Rule 17.8. Additionally, the parameter flags is modified via flags |= MAP_SHARED; and later flags = MAP_PRIVATE | MAP_ANONYMOUS;, which also violates the rule. Note that the assignment *result = mem modifies the object pointed to by the pointer parameter result, which is permitted, but that does not justify modifying fd or flags. The recommended fix is to use local copies (e.g. int local_fd = fd; int local_flags = flags;) and modify those instead of the parameters."
}