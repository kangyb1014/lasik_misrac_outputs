{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"flags = MAP_PRIVATE | MAP_ANONYMOUS;\" assigns to the function parameter 'flags', modifying a parameter inside the function. This violates MISRA C 2023 Rule 17.8 (a function parameter shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/file.h>\n\n/*\n * Probe logging helper. Appends logs to /tmp/logs/567.txt\n * Note: logging may change errno, so callers that rely on errno\n * must capture errno into a local variable before calling this.\n */\nstatic void metal_map_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/567.txt\", \"a\");\n    if (f == NULL) {\n        return; /* best-effort logging */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry and initial parameter values */\n    metal_map_log(\"ENTER metal_map: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%x, result=%p\",\n                  fd, (long long)offset, size, expand, flags, (void *)result);\n\n    flags |= MAP_SHARED;\n    metal_map_log(\"After flags |= MAP_SHARED: flags=0x%x\", flags);\n\n    if (fd < 0) {\n        metal_map_log(\"Branch: fd < 0 (fd=%d). Preparing anonymous mapping.\", fd);\n\n        fd = -1;\n        /* Log original flags value before the parameter-modifying assignment */\n        metal_map_log(\"Before modifying parameter 'flags': flags=0x%x\", flags);\n\n        /* The assignment below modifies the function parameter 'flags' (evidence of Rule 17.8 violation).\n         * We keep the original logic but log the change for reproduction and evidence. */\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n        metal_map_log(\"After modifying parameter 'flags' (violation): flags=0x%x\", flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        metal_map_log(\"Branch: fd >= 0 and expand requested. reqsize=%lld\", (long long)reqsize);\n\n        /* Capture errno sensitive results into error immediately as original code did. */\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        if (!error)\n            error = fstat(fd, &stat);\n        if (!error && stat.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        if (!error)\n            flock(fd, LOCK_UN);\n        if (error) {\n            /* Log the error condition. Because logging may change errno, compute a saved errno\n             * value to reflect the cause as seen at the time of the failing call. */\n            int saved_errno = (error < 0) ? -error : errno;\n            metal_map_log(\"Error during expand operations: intermediate error=%d, saved_errno=%d\", error, saved_errno);\n            return -saved_errno;\n        }\n    }\n\n    metal_map_log(\"Mapping memory: fd=%d, offset=%lld, size=%zu, prot=0x%x, flags=0x%x\",\n                  fd, (long long)offset, size, prot, flags);\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        int saved_errno = errno; /* preserve errno before logging */\n        metal_map_log(\"mmap failed: errno=%d\", saved_errno);\n        return -saved_errno;\n    }\n\n    *result = mem;\n    metal_map_log(\"mmap succeeded: result=%p\", mem);\n    metal_map_log(\"EXIT metal_map: returning 0\");\n    return 0;\n}\n"
}