{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement 'flags |= MAP_SHARED;' modifies the function parameter 'flags' (an int parameter passed by value). MISRA C 2023 Rule 17.8 forbids modifying function parameters; therefore this is a violation. (The code also later assigns to 'flags' in the 'if (fd < 0)' branch, further demonstrating modification of the parameter.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x0 | error=0 | start of metal_map\nafter_flags_or | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flags |= MAP_SHARED executed\nbranch_expand_enter | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | begin expand handling\nenter | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x0 | error=0 | start of metal_map\nafter_flock | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flock LOCK_EX attempted\nafter_flags_or | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flags |= MAP_SHARED executed\nafter_fstat | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | fstat attempted\nbranch_expand_enter | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | begin expand handling\nafter_ftruncate | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | ftruncate attempted if needed\nafter_flock_unlock | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flock LOCK_UN attempted\nafter_flock | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flock LOCK_EX attempted\nbefore_mmap | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | about to call mmap\nafter_fstat | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | fstat attempted\nafter_ftruncate | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | ftruncate attempted if needed\nafter_flock_unlock | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flock LOCK_UN attempted\nbefore_mmap | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | about to call mmap\nenter | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x0 | error=0 | start of metal_map\nafter_flags_or | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flags |= MAP_SHARED executed\nbranch_expand_enter | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | begin expand handling\nafter_flock | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flock LOCK_EX attempted\nmmap_success | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | mmap succeeded\nenter | fd=11 | offset=0 | size=1048576 | expand=1 | flags=0x0 | error=0 | start of metal_map\nafter_fstat | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | fstat attempted\nexit | fd=7 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | returning success\nmmap_success | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | mmap succeeded\nafter_ftruncate | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | ftruncate attempted if needed\nafter_flags_or | fd=11 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flags |= MAP_SHARED executed\nexit | fd=6 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | returning success\nafter_flock_unlock | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flock LOCK_UN attempted\nbranch_expand_enter | fd=11 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | begin expand handling\nbefore_mmap | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | about to call mmap\nafter_flock | fd=11 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flock LOCK_EX attempted\nafter_fstat | fd=11 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | fstat attempted\nafter_ftruncate | fd=11 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | ftruncate attempted if needed\nafter_flock_unlock | fd=11 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | flock LOCK_UN attempted\nbefore_mmap | fd=11 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | about to call mmap\nmmap_success | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | mmap succeeded\nexit | fd=9 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=0 | returning success\nenter | fd=8 | offset=0 | size=1048576 | expand=1 | flags=0x0 | error=0 | start of metal_map\nmmap_success | fd=11 | offset=0 | size=1048576 | expand=1 | flags=0x1 | error=\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified (the only allowed modification is of the object pointed to by a pointer parameter, not the pointer itself). In metal_map the parameter flags (an int passed by value) is modified twice (flags |= MAP_SHARED; and flags = MAP_PRIVATE | MAP_ANONYMOUS;), which violates Rule 17.8. Remediation is to use a local copy (e.g. int mapflags = flags;) and modify mapflags instead, or change the API so the modified value is passed/returned explicitly."
}