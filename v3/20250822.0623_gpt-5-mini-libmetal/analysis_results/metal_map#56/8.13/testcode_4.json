{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe field device.irq_info is a void * and the code stores an integer file-descriptor into it via (void *)(intptr_t)ldev->fd. irq_info is used as an opaque, read-only token (it is set to (void *)-1 or to the fd cast), so the pointer does not point to a mutable object and therefore could/should be const-qualified (for example const void *), or better be stored as an integer type (intptr_t) to avoid treating an integer as a pointer. Because the pointer type is not const-qualified although it could be, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/file.h>\n#include <time.h>\n\n/* Probe logging helper: append structured log lines to /tmp/logs/563.txt */\nstatic void metal_map_log(const char *tag, int fd, off_t offset, size_t size,\n                          int expand, int flags, void *mem, int error)\n{\n    FILE *f = fopen(\"/tmp/logs/563.txt\", \"a\");\n    if (f == NULL) {\n        /* Try to create the directory then retry once. */\n        (void)mkdir(\"/tmp/logs\", 0700);\n        f = fopen(\"/tmp/logs/563.txt\", \"a\");\n        if (f == NULL) {\n            /* If still failing, nothing more we can do without changing behaviour. */\n            return;\n        }\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"%lld %s: fd=%d offset=%lld size=%zu expand=%d flags=0x%x mem=%p error=%d errno=%d\\n\",\n            (long long)t, tag, fd, (long long)offset, size, expand, flags, mem, error, errno);\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    flags |= MAP_SHARED;\n    metal_map_log(\"enter_after_flags_or\", fd, offset, size, expand, flags, NULL, 0);\n\n    if (fd < 0) {\n        /* preserve original behaviour */\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        metal_map_log(\"branch_fd_lt_0\", fd, offset, size, expand, flags, NULL, 0);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat statbuf;\n\n        metal_map_log(\"expand_start\", fd, offset, size, expand, flags, NULL, 0);\n\n        /* replicate the original semantics but capture intermediate results */\n        int flock_ret = flock(fd, LOCK_EX);\n        error = flock_ret < 0 ? -errno : 0;\n        metal_map_log(\"after_flock_lock_ex\", fd, offset, size, expand, flags, NULL, error);\n\n        if (!error)\n            error = fstat(fd, &statbuf);\n        metal_map_log(\"after_fstat\", fd, offset, size, expand, flags,\n                      NULL, error == 0 ? 0 : -errno);\n\n        if (!error && statbuf.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        metal_map_log(\"after_maybe_ftruncate\", fd, offset, size, expand, flags,\n                      NULL, error == 0 ? 0 : -errno);\n\n        if (!error)\n            (void)flock(fd, LOCK_UN);\n        metal_map_log(\"after_flock_unlock\", fd, offset, size, expand, flags, NULL, error);\n\n        if (error) {\n            metal_map_log(\"expand_error_return\", fd, offset, size, expand, flags, NULL, -errno);\n            return -errno;\n        }\n    }\n\n    metal_map_log(\"before_mmap\", fd, offset, size, expand, flags, NULL, 0);\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        metal_map_log(\"mmap_failed\", fd, offset, size, expand, flags, mem, -errno);\n        return -errno;\n    }\n    metal_map_log(\"mmap_success\", fd, offset, size, expand, flags, mem, 0);\n\n    *result = mem;\n    metal_map_log(\"exit_success\", fd, offset, size, expand, flags, mem, 0);\n    return 0;\n}\n"
}