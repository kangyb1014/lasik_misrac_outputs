{
  "user_message": "An agent A claimed that the following MHD_uint16_to_str code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_uint16_to_str.\n```c\nsize_t\nMHD_uint16_to_str (uint16_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 65535 */\n  uint16_t divisor = UINT16_C (10000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val = (uint16_t) (val % divisor);\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement 'buf_size--;' directly modifies the function parameter 'buf_size' (type size_t). Rule 17.8 forbids modifying function parameters; a local copy should be used instead (e.g. 'size_t remaining = buf_size;' and decrement 'remaining').\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[MHD_uint16_to_str] stage=entry iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=0 divisor=10000 digit=-1 chr=(nil)\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=0 divisor=1000 digit=0 chr=0x7ffe3b394fe0\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=0 divisor=100 digit=0 chr=0x7ffe3b394fe0\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=0 divisor=10 digit=0 chr=0x7ffe3b394fe0\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=0 divisor=1 digit=1 chr=0x7ffe3b394fe0\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=before_output_loop iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=0 divisor=1 digit=1 chr=0x7ffe3b394fe0\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=return_buffer_too_small iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=0 divisor=1 digit=1 chr=0x7ffe3b394fe0\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=entry iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=1 divisor=10000 digit=-1 chr=(nil)\n  buf[0..1]: '-'\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=1 divisor=1000 digit=0 chr=0x7ffe3b394fe0\n  buf[0..1]: '-'\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=1 divisor=100 digit=0 chr=0x7ffe3b394fe0\n  buf[0..1]: '-'\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=1 divisor=10 digit=0 chr=0x7ffe3b394fe0\n  buf[0..1]: '-'\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=1 divisor=1 digit=1 chr=0x7ffe3b394fe0\n  buf[0..1]: '-'\n[MHD_uint16_to_str] stage=before_output_loop iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=1 divisor=1 digit=1 chr=0x7ffe3b394fe0\n  buf[0..1]: '-'\n[MHD_uint16_to_str] stage=loop_start iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=1 divisor=1 digit=1 chr=0x7ffe3b394fe0\n  buf[0..1]: '-'\n[MHD_uint16_to_str] stage=after_buf_size_decrement iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=0 divisor=1 digit=1 chr=0x7ffe3b394fe1\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=return_success iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=0 divisor=1 digit=1 chr=0x7ffe3b394fe1\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=entry iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=2 divisor=10000 digit=-1 chr=(nil)\n  buf[0..2]: '-@'\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=2 divisor=1000 digit=0 chr=0x7ffe3b394fe0\n  buf[0..2]: '-@'\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=2 divisor=100 digit=0 chr=0x7ffe3b394fe0\n  buf[0..2]: '-@'\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=2 divisor=10 digit=0 chr=0x7ffe3b394fe0\n  buf[0..2]: '-@'\n[MHD_uint16_to_str] stage=skip_leading_zero iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=2 divisor=1 digit=1 chr=0x7ffe3b394fe0\n  buf[0..2]: '-@'\n[MHD_uint16_to_str] stage=before_output_loop iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=2 divisor=1 digit=1 chr=0x7ffe3b394fe0\n  buf[0..2]: '-@'\n[MHD_uint16_to_str] stage=loop_start iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=2 divisor=1 digit=1 chr=0x7ffe3b394fe0\n  buf[0..2]: '-@'\n[MHD_uint16_to_str] stage=after_buf_size_decrement iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=1 divisor=1 digit=1 chr=0x7ffe3b394fe1\n  buf[0..1]: '1'\n[MHD_uint16_to_str] stage=return_success iter=0 val=1 buf=0x7ffe3b394fe0 buf_size=1 divisor=1 digit=1 chr=0x7ffe3b394fe1\n  buf[0..1]: '1'\n[MHD_uint16_to_str] stage=entry iter=0 val=10000 buf=0x7ffe3b394fe0 buf_size=0 divisor=10000 digit=-1 chr=(nil)\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=before_output_loop iter=0 val=10000 buf=0x7ffe3b394fe0 buf_size=0 divisor=10000 digit=1 chr=0x7ffe3b394fe0\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=return_buffer_too_small iter=0 val=10000 buf=0x7ffe3b394fe0 buf_size=0 divisor=10000 digit=1 chr=0x7ffe3b394fe0\n  buf[0..0]: ''\n[MHD_uint16_to_str] stage=entry iter=0 val=10000 buf=0x7ffe3b394fe0 buf_size=1 divisor=10000 digit=-1 chr=(nil)\n  buf[0..1]: '-'\n[MHD_uint16_to_str] stage=before_output_\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 forbids modifying function parameters. In this function both buf_size (via buf_size--) and val (via val = (uint16_t)(val % divisor)) are modified \u2014 both are parameters passed by value and therefore must not be changed according to the rule. (The rule\u2019s allowance about modifying the object referred to by a pointer does not apply to these scalar parameters; buf itself is not modified.) Fix by using local copies, e.g. size_t remaining = buf_size; uint16_t v = val; and decrement/modify those locals instead."
}