{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_uint16_to_str:\n```c\nsize_t\nMHD_uint16_to_str (uint16_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 65535 */\n  uint16_t divisor = UINT16_C (10000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val = (uint16_t) (val % divisor);\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "*chr = (char) ((char) digit + '0');",
    "chr++;",
    "chr = buf;",
    "while (0 != buf_size)",
    "buf_size--;",
    "if (1 == divisor)\n      return (size_t) (chr - buf);",
    "return 0; /* The buffer is too small */"
  ],
  "explanation": "Rule 21.17 concerns accesses beyond the bounds of objects referenced by pointer parameters for string-handling operations. This function contains no calls to the <string.h> functions named in the rule, so there are no direct violations involving standard string.h functions to investigate. However, the function does perform raw writes into the caller-provided buffer (buf) via the pointer chr and computes/returns lengths using (chr - buf). Those specific fragments are listed above because they must be checked to ensure that the provided buf pointer and buf_size correctly prevent out-of-bounds writes (e.g. buf != NULL, buf_size accurately reflects available space, and the loop logic always prevents writing past buf + buf_size - 1). Other parts of the function (initialization of divisor, digit calculations, the leading-zero skipping loop guarded by (1 < divisor), and the mhd_assert calls) do not themselves perform pointer-based writes or call <string.h> functions and, given the existing checks, do not need to be investigated for Rule 21.17. In particular, the code path prevents division by zero (divisor is only divided when greater than 1 and the function returns when divisor == 1), and there are no uses of memcpy/strcpy/strncpy/strcat/strncat/strlen/strspn/mem* functions that would invoke Rule 21.17 directly."
}