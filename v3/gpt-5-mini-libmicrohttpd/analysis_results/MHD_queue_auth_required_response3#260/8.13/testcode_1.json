{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'connection' is declared as 'struct MHD_Connection *connection' but in the shown function it is not modified (it's only passed through to queue_auth_required_response3_inner). If neither this function nor the callee modify the object pointed to by connection, the pointer should be declared to point to a const-qualified type: 'const struct MHD_Connection *connection'. As written, and given the visible code, this is a violation of MISRA C 2023 Rule 8.13. (If the callee or this function does modify the pointed-to object, then the non-const declaration is justified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_queue_auth_required_response3 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_queue_auth_required_response3 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_queue_auth_required_response3:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_required_response3 (struct MHD_Connection *connection,\n                                   const char *realm,\n                                   const char *opaque,\n                                   const char *domain,\n                                   struct MHD_Response *response,\n                                   int signal_stale,\n                                   enum MHD_DigestAuthMultiQOP mqop,\n                                   enum MHD_DigestAuthMultiAlgo3 malgo3,\n                                   int userhash_support,\n                                   int prefer_utf8)\n{\n  struct DigestAlgorithm da;\n  char *buf_ptr;\n  enum MHD_Result ret;\n\n  buf_ptr = NULL;\n  digest_setup_zero (&da);\n  ret = queue_auth_required_response3_inner (connection,\n                                             realm,\n                                             opaque,\n                                             domain,\n                                             response,\n                                             signal_stale,\n                                             mqop,\n                                             malgo3,\n                                             userhash_support,\n                                             prefer_utf8,\n                                             &buf_ptr,\n                                             &da);\n  digest_deinit (&da);\n  if (NULL != buf_ptr)\n    free (buf_ptr);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_queue_auth_required_response3 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n\n/* Probe helper: append a textual log entry to /tmp/logs/2603.txt. */\nstatic void MHD_probe_log(const char *msg)\n{\n  FILE *fp = fopen(\"/tmp/logs/2603.txt\", \"a\");\n  if (NULL == fp)\n  {\n    return;\n  }\n  (void)fprintf(fp, \"%s\\n\", msg);\n  (void)fflush(fp);\n  (void)fclose(fp);\n}\n\n/* More structured logging to capture parameter and state values. */\nstatic void MHD_probe_log_params(const char *phase,\n                                 struct MHD_Connection *connection,\n                                 const char *realm,\n                                 const char *opaque,\n                                 const char *domain,\n                                 struct MHD_Response *response,\n                                 int signal_stale,\n                                 enum MHD_DigestAuthMultiQOP mqop,\n                                 enum MHD_DigestAuthMultiAlgo3 malgo3,\n                                 int userhash_support,\n                                 int prefer_utf8,\n                                 char *buf_ptr,\n                                 const void *da_addr,\n                                 enum MHD_Result ret)\n{\n  FILE *fp = fopen(\"/tmp/logs/2603.txt\", \"a\");\n  if (NULL == fp)\n  {\n    return;\n  }\n\n  (void)fprintf(fp, \"--- MHD_queue_auth_required_response3 %s ---\\n\", phase);\n  (void)fprintf(fp, \"connection=%p realm=%p opaque=%p domain=%p response=%p\\n\",\n                (void *)connection, (void *)realm, (void *)opaque, (void *)domain, (void *)response);\n  (void)fprintf(fp, \"signal_stale=%d mqop=%d malgo3=%d userhash_support=%d prefer_utf8=%d\\n\",\n                signal_stale, (int)mqop, (int)malgo3, userhash_support, prefer_utf8);\n  (void)fprintf(fp, \"buf_ptr=%p da_addr=%p ret=%d\\n\", (void *)buf_ptr, da_addr, (int)ret);\n  (void)fprintf(fp, \"----------------------------------------------\\n\");\n  (void)fflush(fp);\n  (void)fclose(fp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_required_response3 (struct MHD_Connection *connection,\n                                   const char *realm,\n                                   const char *opaque,\n                                   const char *domain,\n                                   struct MHD_Response *response,\n                                   int signal_stale,\n                                   enum MHD_DigestAuthMultiQOP mqop,\n                                   enum MHD_DigestAuthMultiAlgo3 malgo3,\n                                   int userhash_support,\n                                   int prefer_utf8)\n{\n  struct DigestAlgorithm da;\n  char *buf_ptr;\n  enum MHD_Result ret;\n\n  /* Log entry and parameter snapshot. */\n  MHD_probe_log_params(\"enter\",\n                       connection,\n                       realm,\n                       opaque,\n                       domain,\n                       response,\n                       signal_stale,\n                       mqop,\n                       malgo3,\n                       userhash_support,\n                       prefer_utf8,\n                       NULL,\n                       (const void *)&da,\n                       (enum MHD_Result)0);\n\n  buf_ptr = NULL;\n  digest_setup_zero (&da);\n\n  /* Log just before calling the inner function to show the pointer values passed through. */\n  MHD_probe_log(\"Calling queue_auth_required_response3_inner with current parameters\");\n  MHD_probe_log_params(\"before_inner\",\n                       connection,\n                       realm,\n                       opaque,\n                       domain,\n                       response,\n                       signal_stale,\n                       mqop,\n                       malgo3,\n                       userhash_support,\n                       prefer_utf8,\n                       buf_ptr,\n                       (const void *)&da,\n                       (enum MHD_Result)0);\n\n  ret = queue_auth_required_response3_inner (connection,\n                                             realm,\n                                             opaque,\n                                             domain,\n                                             response,\n                                             signal_stale,\n                                             mqop,\n                                             malgo3,\n                                             userhash_support,\n                                             prefer_utf8,\n                                             &buf_ptr,\n                                             &da);\n\n  /* Log immediately after the inner call to capture returned state. */\n  MHD_probe_log_params(\"after_inner\",\n                       connection,\n                       realm,\n                       opaque,\n                       domain,\n                       response,\n                       signal_stale,\n                       mqop,\n                       malgo3,\n                       userhash_support,\n                       prefer_utf8,\n                       buf_ptr,\n                       (const void *)&da,\n                       ret);\n\n  digest_deinit (&da);\n\n  if (NULL != buf_ptr)\n  {\n    /* Log that we will free the buffer and include its pointer value. */\n    char msg[256];\n    (void)snprintf(msg, sizeof(msg), \"Freeing buf_ptr=%p\", (void *)buf_ptr);\n    MHD_probe_log(msg);\n    free (buf_ptr);\n  }\n\n  /* Final return value log. */\n  MHD_probe_log_params(\"exit\",\n                       connection,\n                       realm,\n                       opaque,\n                       domain,\n                       response,\n                       signal_stale,\n                       mqop,\n                       malgo3,\n                       userhash_support,\n                       prefer_utf8,\n                       NULL,\n                       (const void *)&da,\n                       ret);\n\n  return ret;\n}\n"
}