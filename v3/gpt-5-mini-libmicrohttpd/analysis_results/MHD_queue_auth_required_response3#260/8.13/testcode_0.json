{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf neither MHD_queue_auth_required_response3 nor the called function queue_auth_required_response3_inner (and any other callees) modify the object pointed to by response, then declaring the parameter as 'struct MHD_Response *response' fails to qualify the pointee as const and thus violates MISRA C 2023 Rule 8.13. In that case the parameter should be 'const struct MHD_Response *response'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_queue_auth_required_response3 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_queue_auth_required_response3 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_queue_auth_required_response3:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_required_response3 (struct MHD_Connection *connection,\n                                   const char *realm,\n                                   const char *opaque,\n                                   const char *domain,\n                                   struct MHD_Response *response,\n                                   int signal_stale,\n                                   enum MHD_DigestAuthMultiQOP mqop,\n                                   enum MHD_DigestAuthMultiAlgo3 malgo3,\n                                   int userhash_support,\n                                   int prefer_utf8)\n{\n  struct DigestAlgorithm da;\n  char *buf_ptr;\n  enum MHD_Result ret;\n\n  buf_ptr = NULL;\n  digest_setup_zero (&da);\n  ret = queue_auth_required_response3_inner (connection,\n                                             realm,\n                                             opaque,\n                                             domain,\n                                             response,\n                                             signal_stale,\n                                             mqop,\n                                             malgo3,\n                                             userhash_support,\n                                             prefer_utf8,\n                                             &buf_ptr,\n                                             &da);\n  digest_deinit (&da);\n  if (NULL != buf_ptr)\n    free (buf_ptr);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_queue_auth_required_response3 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdlib.h>\n\n/* Probe helpers: write structured logs to /tmp/logs/2603.txt */\nstatic void\nmhd_probe_vlog (const char *fmt, va_list ap)\n{\n  FILE *f = fopen(\"/tmp/logs/2603.txt\", \"a\");\n  if (f == NULL)\n    return;\n  time_t t = time (NULL);\n  struct tm *tm = localtime (&t);\n  if (tm != NULL)\n    fprintf (f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n             tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n             tm->tm_hour, tm->tm_min, tm->tm_sec);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  va_list ap;\n  va_start (ap, fmt);\n  mhd_probe_vlog (fmt, ap);\n  va_end (ap);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_required_response3 (struct MHD_Connection *connection,\n                                   const char *realm,\n                                   const char *opaque,\n                                   const char *domain,\n                                   struct MHD_Response *response,\n                                   int signal_stale,\n                                   enum MHD_DigestAuthMultiQOP mqop,\n                                   enum MHD_DigestAuthMultiAlgo3 malgo3,\n                                   int userhash_support,\n                                   int prefer_utf8)\n{\n  struct DigestAlgorithm da;\n  char *buf_ptr;\n  enum MHD_Result ret;\n\n  /* Initial state */\n  buf_ptr = NULL;\n  mhd_probe_log (\"enter: connection=%p realm=%s opaque=%s domain=%s response=%p signal_stale=%d mqop=%d malgo3=%d userhash_support=%d prefer_utf8=%d\",\n                 (void *) connection,\n                 (realm != NULL) ? realm : \"(null)\",\n                 (opaque != NULL) ? opaque : \"(null)\",\n                 (domain != NULL) ? domain : \"(null)\",\n                 (void *) response,\n                 signal_stale,\n                 (int) mqop,\n                 (int) malgo3,\n                 userhash_support,\n                 prefer_utf8);\n\n  digest_setup_zero (&da);\n  mhd_probe_log (\"after digest_setup_zero: da=%p\", (void *) &da);\n\n  ret = queue_auth_required_response3_inner (connection,\n                                             realm,\n                                             opaque,\n                                             domain,\n                                             response,\n                                             signal_stale,\n                                             mqop,\n                                             malgo3,\n                                             userhash_support,\n                                             prefer_utf8,\n                                             &buf_ptr,\n                                             &da);\n\n  mhd_probe_log (\"after inner call: ret=%d buf_ptr=%p response=%p\",\n                 (int) ret,\n                 (void *) buf_ptr,\n                 (void *) response);\n\n  digest_deinit (&da);\n  mhd_probe_log (\"after digest_deinit: da=%p\", (void *) &da);\n\n  if (NULL != buf_ptr)\n    {\n      mhd_probe_log (\"freeing buf_ptr=%p\", (void *) buf_ptr);\n      free (buf_ptr);\n      buf_ptr = NULL;\n      mhd_probe_log (\"buf_ptr freed and nulled\");\n    }\n\n  mhd_probe_log (\"exit: ret=%d\", (int) ret);\n  return ret;\n}\n"
}