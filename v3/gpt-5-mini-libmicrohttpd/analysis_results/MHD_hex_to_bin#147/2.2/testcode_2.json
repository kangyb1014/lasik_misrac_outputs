{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is implemented as a run\u2011time diagnostic check (for example a function or macro that evaluates the expression and maybe logs or returns void) and it is executed in production builds but has no effect on program state or outputs, then those two calls are dead code: removing them would not affect program behaviour. In that situation Rule 2.2 is violated because the assertions are executed yet can be removed without changing program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_hex_to_bin code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1472.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_hex_to_bin as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_hex_to_bin:\n```c\nsize_t\nMHD_hex_to_bin (const char *hex,\n                size_t len,\n                void *bin)\n{\n  uint8_t *const out = (uint8_t *) bin;\n  size_t r;\n  size_t w;\n\n  if (0 == len)\n    return 0;\n  r = 0;\n  w = 0;\n  if (0 != len % 2)\n  {\n    /* Assume the first byte is encoded with single digit */\n    const int l = toxdigitvalue (hex[r++]);\n    if (0 > l)\n      return 0;\n    out[w++] = (uint8_t) ((unsigned int) l);\n  }\n  while (r < len)\n  {\n    const int h = toxdigitvalue (hex[r++]);\n    const int l = toxdigitvalue (hex[r++]);\n    if ((0 > h) || (0 > l))\n      return 0;\n    out[w++] = (uint8_t) ( ((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                           | ((uint8_t) ((unsigned int) l)) );\n  }\n  mhd_assert (len == r);\n  mhd_assert ((len + 1) / 2 == w);\n  return w;\n}\n```\n</target_code>\nPlease provide the modified MHD_hex_to_bin code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1472.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic void probe_log_hex(const char *hex, size_t len)\n{\n  FILE *f = fopen(\"/tmp/logs/1472.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf(f, \"hex[%zu] = \\\"\", len);\n  /* limit output to avoid huge logs */\n  size_t limit = (len > 128u) ? 128u : len;\n  for (size_t i = 0; i < limit; ++i)\n  {\n    unsigned char c = (unsigned char) hex[i];\n    /* print printable ASCII as char, otherwise as hex */\n    if ((c >= 0x20u) && (c < 0x7Fu))\n      fputc((int) c, f);\n    else\n      fprintf(f, \"\\\\x%02x\", c);\n  }\n  if (limit < len)\n    fprintf(f, \"... (truncated)\");\n  fprintf(f, \"\\\"\");\n  fputc('\\n', f);\n  fclose(f);\n}\n\nsize_t\nMHD_hex_to_bin (const char *hex,\n                size_t len,\n                void *bin)\n{\n  uint8_t *const out = (uint8_t *) bin;\n  size_t r;\n  size_t w;\n\n  probe_log(\"MHD_hex_to_bin: enter len=%zu, bin=%p, hex=%p\", len, bin, (const void *) hex);\n  if (hex != NULL)\n    probe_log_hex(hex, len);\n\n  if (0 == len)\n  {\n    probe_log(\"MHD_hex_to_bin: early return (len == 0)\");\n    return 0;\n  }\n  r = 0;\n  w = 0;\n  if (0 != len % 2)\n  {\n    /* Assume the first byte is encoded with single digit */\n    const int l = toxdigitvalue (hex[r++]);\n    probe_log(\"MHD_hex_to_bin: odd length, first digit at pos 0 -> l=%d\", l);\n    if (0 > l)\n    {\n      probe_log(\"MHD_hex_to_bin: invalid single digit (l=%d) -> return 0\", l);\n      return 0;\n    }\n    out[w++] = (uint8_t) ((unsigned int) l);\n    probe_log(\"MHD_hex_to_bin: wrote out[0]=0x%02x, r=%zu, w=%zu\", out[0], r, w);\n  }\n  while (r < len)\n  {\n    const int h = toxdigitvalue (hex[r++]);\n    const int l = toxdigitvalue (hex[r++]);\n    probe_log(\"MHD_hex_to_bin: pair at positions (%zu,%zu) -> h=%d, l=%d\", r - 2, r - 1, h, l);\n    if ((0 > h) || (0 > l))\n    {\n      probe_log(\"MHD_hex_to_bin: invalid hex pair (h=%d,l=%d) -> return 0\", h, l);\n      return 0;\n    }\n    out[w++] = (uint8_t) ( ((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                           | ((uint8_t) ((unsigned int) l)) );\n    probe_log(\"MHD_hex_to_bin: wrote out[%zu]=0x%02x, r=%zu, w=%zu\", w - 1, out[w - 1], r, w);\n  }\n  /* Log the state immediately before the assertions to capture that they are executed */\n  probe_log(\"MHD_hex_to_bin: before mhd_assert checks: len=%zu, r=%zu, expected_w=%zu, actual_w=%zu\", len, r, (len + 1) / 2, w);\n  probe_log(\"MHD_hex_to_bin: mhd_assert expr1: (len == r) evaluated to %d\", (len == r) ? 1 : 0);\n  mhd_assert (len == r);\n  probe_log(\"MHD_hex_to_bin: mhd_assert expr2: ((len + 1) / 2 == w) evaluated to %d\", (((len + 1) / 2) == w) ? 1 : 0);\n  mhd_assert ((len + 1) / 2 == w);\n  probe_log(\"MHD_hex_to_bin: exit returning w=%zu\", w);\n  return w;\n}\n"
}