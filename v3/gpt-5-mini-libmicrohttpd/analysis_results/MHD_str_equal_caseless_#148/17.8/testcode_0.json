{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe expression 'str2++' increments the pointer parameter 'str2', i.e. it modifies the function parameter itself. MISRA C 2023 Rule 17.8 forbids modifying pointer parameters (you may modify the object pointed to, but not the pointer variable). To comply, make a local copy (e.g. 'const char *p2 = str2;') and increment that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1487.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_:\n```c\nint\nMHD_str_equal_caseless_ (const char *str1,\n                         const char *str2)\n{\n  while (0 != (*str1))\n  {\n    const char c1 = *str1;\n    const char c2 = *str2;\n    if (charsequalcaseless (c1, c2))\n    {\n      str1++;\n      str2++;\n    }\n    else\n      return 0;\n  }\n  return 0 == (*str2);\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_ code.\n",
  "test_code": "int\nMHD_str_equal_caseless_ (const char *str1,\n                         const char *str2)\n{\n  /* Logging probe: append control-flow and state info to /tmp/logs/1487.txt */\n  FILE *log = fopen(\"/tmp/logs/1487.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"MHD_str_equal_caseless_: enter: str1=%p str2=%p *str1=0x%02X *str2=0x%02X\\n\",\n            (void *)str1,\n            (void *)str2,\n            (unsigned char)(*str1),\n            (unsigned char)(*str2));\n  }\n\n  while (0 != (*str1))\n  {\n    const char c1 = *str1;\n    const char c2 = *str2;\n\n    if (log)\n    {\n      /* log pointer addresses and character values (hex) to show increments of parameters */\n      fprintf(log, \"  loop: str1=%p c1=0x%02X str2=%p c2=0x%02X\\n\",\n              (void *)str1,\n              (unsigned char)c1,\n              (void *)str2,\n              (unsigned char)c2);\n    }\n\n    if (charsequalcaseless (c1, c2))\n    {\n      str1++;\n      str2++;\n\n      if (log)\n      {\n        /* Evidence of the violation scenario: pointer parameters are incremented here */\n        fprintf(log, \"    matched -> incremented pointers: new str1=%p new str2=%p\\n\",\n                (void *)str1,\n                (void *)str2);\n      }\n    }\n    else\n    {\n      if (log)\n      {\n        fprintf(log, \"    mismatch -> returning 0 (str1=%p str2=%p)\\n\",\n                (void *)str1,\n                (void *)str2);\n        fclose(log);\n      }\n      return 0;\n    }\n  }\n\n  int result = 0 == (*str2);\n  if (log)\n  {\n    fprintf(log, \"exit: str1=%p str2=%p result=%d\\n\",\n            (void *)str1,\n            (void *)str2,\n            result);\n    fclose(log);\n  }\n  return result;\n}\n"
}