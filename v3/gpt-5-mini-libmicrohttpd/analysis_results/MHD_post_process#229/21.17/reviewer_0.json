{
  "user_message": "An agent A claimed that the following MHD_post_process code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_post_process.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes pp->encoding and a fixed length (MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)) into MHD_str_equal_caseless_n_ without validating pp->encoding. If pp->encoding is NULL or points to a buffer shorter than the supplied length (e.g. pp->encoding == \"x\" or truncated), the underlying implementation of MHD_str_equal_caseless_n_ may call string.h functions (e.g. memcmp/strncasecmp) that read 'n' bytes from pp->encoding, causing an out-of-bounds access. For example, comparing against \"multipart/form-data\" (length 19) when pp->encoding has fewer than 19 bytes would trigger the violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct as written unless the helper routine MHD_str_equal_caseless_n_ (or invariants on pp->encoding) already guarantees safety. In the shown code pp->encoding is used directly as the second pointer argument together with a fixed length (MHD_STATICSTR_LEN_(...)) without any NULL check or verification that the buffer reachable from pp->encoding contains at least that many bytes. If MHD_str_equal_caseless_n_ is implemented in terms of standard string functions that read up to the supplied length (e.g. memcmp/strncasecmp/strncmp), and it does not first check for NULL or ensure the pointed object is at least the supplied length, then those calls can read past the end of pp->encoding (or dereference NULL) and thus violate MISRA C 2023 Rule 21.17.\n\nTherefore the agent\u2019s scenario (pp->encoding == NULL or shorter than the supplied length) describes a realistic out\u2011of\u2011bounds/invalid read unless the helper function or other program invariants prevent it. To be certain whether there is an actual violation in the project, you must inspect the implementation of MHD_str_equal_caseless_n_ and any invariants guaranteeing pp->encoding points to a buffer of the required size. Absent such guarantees, the code should validate pp->encoding (non-NULL and of sufficient length) before calling the helper, or the helper should perform those checks internally to comply with Rule 21.17."
}