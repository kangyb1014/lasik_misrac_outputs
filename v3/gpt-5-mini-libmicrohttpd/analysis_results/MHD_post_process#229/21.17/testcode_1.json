{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 MHD_str_equal_caseless_n_ is called with a fixed length derived from the literal (MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_FORM_URLENCODED)) and pp->encoding as the other pointer. If pp->encoding is NULL or if it points to a buffer/string shorter than that fixed length (for example an empty string or a shorter/unterminated buffer), an implementation of MHD_str_equal_caseless_n_ that uses string.h functions that read N bytes (e.g. memcmp, strncasecmp or similar) will access bytes beyond the bounds of pp->encoding. This constitutes a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_post_process code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2299.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_post_process as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_post_process:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_post_process code.\n",
  "test_code": "static void mhd_log_probe(const char *phase,\n                                  struct MHD_PostProcessor *pp,\n                                  const char *literal,\n                                  const char *encoding,\n                                  size_t len,\n                                  int cmp_result,\n                                  size_t post_data_len)\n{\n  /* Append a single-line record describing the current control point and\n     arguments that may trigger the reported out-of-bounds access. We do\n     not dereference 'encoding' here to avoid introducing further reads of\n     possibly short/unterminated buffers. */\n  FILE *f = fopen(\"/tmp/logs/2299.txt\", \"a\");\n  if (f != NULL)\n    {\n      fprintf(f,\n              \"phase=%s post_data_len=%zu pp=%p encoding_ptr=%p literal=\\\"%s\\\" len=%zu cmp=%d\\n\",\n              phase,\n              post_data_len,\n              (void *) pp,\n              (void *) encoding,\n              literal ? literal : \"(null)\",\n              len,\n              cmp_result);\n      fclose(f);\n    }\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n\n  /* Log entry just after basic checks so pp is known non-NULL. We log the\n     pointer value of pp->encoding and the fixed length that will be used\n     in the caseless comparison. We intentionally do not read the memory\n     pointed to by pp->encoding here to avoid further potential OOB reads. */\n  mhd_log_probe(\"entry\",\n                pp,\n                MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                pp->encoding,\n                MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_FORM_URLENCODED),\n                -1,\n                post_data_len);\n\n  /* First compare: form-urlencoded */\n  mhd_log_probe(\"before_cmp_urlencoded\",\n                pp,\n                MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                pp->encoding,\n                MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_FORM_URLENCODED),\n                -1,\n                post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    {\n      mhd_log_probe(\"after_cmp_urlencoded\",\n                    pp,\n                    MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                    pp->encoding,\n                    MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_FORM_URLENCODED),\n                    1,\n                    post_data_len);\n      return post_process_urlencoded (pp,\n                                      post_data,\n                                      post_data_len);\n    }\n  else\n    {\n      mhd_log_probe(\"after_cmp_urlencoded\",\n                    pp,\n                    MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                    pp->encoding,\n                    MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_FORM_URLENCODED),\n                    0,\n                    post_data_len);\n    }\n\n  /* Second compare: multipart/form-data */\n  mhd_log_probe(\"before_cmp_multipart\",\n                pp,\n                MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                pp->encoding,\n                MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA),\n                -1,\n                post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    {\n      mhd_log_probe(\"after_cmp_multipart\",\n                    pp,\n                    MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                    pp->encoding,\n                    MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA),\n                    1,\n                    post_data_len);\n      return post_process_multipart (pp,\n                                     post_data,\n                                     post_data_len);\n    }\n  else\n    {\n      mhd_log_probe(\"after_cmp_multipart\",\n                    pp,\n                    MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                    pp->encoding,\n                    MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA),\n                    0,\n                    post_data_len);\n    }\n\n  /* this should never be reached */\n  mhd_log_probe(\"exit_no_match\",\n                pp,\n                \"(no-match)\",\n                pp->encoding,\n                0,\n                0,\n                post_data_len);\n  return MHD_NO;\n}\n"
}