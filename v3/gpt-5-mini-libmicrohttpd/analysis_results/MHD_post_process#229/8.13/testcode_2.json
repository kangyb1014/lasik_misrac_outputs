{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if pp->encoding (or the function parameter type used by MHD_str_equal_caseless_n_) is declared as a non-const pointer (e.g. char *encoding). The code is comparing what is effectively immutable text (a string literal macro MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA) but uses a non-const pointer type; per MISRA C 2023 Rule 8.13 the pointer should be const-qualified (e.g. const char *encoding).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_post_process code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_post_process as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_post_process:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_post_process code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Lightweight probe logger that appends runtime information to /tmp/logs/2293.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2293.txt\", \"a\");\n    if (fp == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  /* Log entry and key parameters */\n  mhd_probe_log(\"MHD_post_process entry: pp=%p, post_data=%p, post_data_len=%zu\",\n                (void *)pp,\n                (const void *)post_data,\n                post_data_len);\n\n  if (0 == post_data_len) {\n    mhd_probe_log(\"post_data_len is 0 -> returning MHD_YES\");\n    return MHD_YES;\n  }\n\n  if (NULL == pp) {\n    mhd_probe_log(\"pp is NULL -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  /* Log pp->encoding pointer and a safe preview of its contents (if any) */\n  if (pp->encoding != NULL)\n  {\n    size_t preview_len = strnlen(pp->encoding, (size_t)256);\n    char preview[257];\n    if (preview_len > 256)\n      preview_len = 256;\n    memcpy(preview, pp->encoding, preview_len);\n    preview[preview_len] = '\\0';\n    mhd_probe_log(\"pp->encoding ptr=%p, preview(len=%zu)='%s'\",\n                  (const void *)pp->encoding,\n                  preview_len,\n                  preview);\n  }\n  else\n  {\n    mhd_probe_log(\"pp->encoding is NULL\");\n  }\n\n  /* Evaluate first comparison once, log result and preserve original control flow */\n  int eq_form = MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                           pp->encoding,\n                                           MHD_STATICSTR_LEN_ (\n                                             MHD_HTTP_POST_ENCODING_FORM_URLENCODED));\n  mhd_probe_log(\"compare with FORM_URLENCODED -> result=%d\",\n                eq_form);\n  if (eq_form)\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n\n  /* Evaluate second comparison once, log result and preserve original control flow */\n  int eq_multipart = MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                                 pp->encoding,\n                                                 MHD_STATICSTR_LEN_ (\n                                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA));\n  mhd_probe_log(\"compare with MULTIPART_FORMDATA -> result=%d\",\n                eq_multipart);\n  if (eq_multipart)\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n\n  /* this should never be reached */\n  mhd_probe_log(\"Reached fallback -> returning MHD_NO\");\n  return MHD_NO;\n}\n"
}