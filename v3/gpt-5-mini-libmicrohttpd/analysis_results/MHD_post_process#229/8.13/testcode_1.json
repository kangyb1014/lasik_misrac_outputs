{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\npp->encoding is a non-const char * (e.g. declared as \"char *encoding\" in struct MHD_PostProcessor) even though it is used only for read-only string comparisons (it is compared against string literals). According to MISRA C:2023 Rule 8.13, the pointer should be declared to point to a const-qualified type (const char *) wherever possible; here pp->encoding should be const char * to express immutability and avoid potential modification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_post_process code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_post_process as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_post_process:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_post_process code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  /* Probe: log entry and basic state. Avoid dereferencing pp if NULL. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2293.txt\", \"a\");\n    if (log != NULL) {\n      fprintf(log, \"MHD_post_process ENTER\\n\");\n      fprintf(log, \"  post_data=%p, post_data_len=%zu\\n\", (const void *)post_data, post_data_len);\n      fprintf(log, \"  pp=%p\\n\", (void *)pp);\n      if (pp != NULL) {\n        /* pp->encoding is intentionally non-const in the codebase under test; log its pointer and content. */\n        fprintf(log, \"  pp->encoding pointer=%p\\n\", (void *)pp->encoding);\n        if (pp->encoding != NULL) {\n          /* Limit printed encoding length to avoid huge logs; print as string for clarity. */\n          fprintf(log, \"  pp->encoding string='%s'\\n\", pp->encoding);\n        } else {\n          fprintf(log, \"  pp->encoding is NULL\\n\");\n        }\n      }\n      fclose(log);\n    }\n  }\n\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n  {\n    FILE *log = fopen(\"/tmp/logs/2293.txt\", \"a\");\n    if (log != NULL) {\n      fprintf(log, \"MHD_post_process: pp is NULL -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* Compute comparisons once so we can both log the results and preserve behavior. */\n  int is_form_urlencoded = MHD_str_equal_caseless_n_(\n    MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n    pp->encoding,\n    MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_FORM_URLENCODED));\n\n  int is_multipart = MHD_str_equal_caseless_n_(\n    MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n    pp->encoding,\n    MHD_STATICSTR_LEN_(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA));\n\n  /* Probe: log comparison results and control decision. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2293.txt\", \"a\");\n    if (log != NULL) {\n      fprintf(log, \"MHD_post_process: comparisons -> form=%d, multipart=%d\\n\",\n              is_form_urlencoded, is_multipart);\n      if (is_form_urlencoded)\n        fprintf(log, \"MHD_post_process: taking URL-encoded branch\\n\");\n      else if (is_multipart)\n        fprintf(log, \"MHD_post_process: taking multipart branch\\n\");\n      else\n        fprintf(log, \"MHD_post_process: no known encoding matched -> will return MHD_NO\\n\");\n      fclose(log);\n    }\n  }\n\n  if (is_form_urlencoded)\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (is_multipart)\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n"
}