{
  "user_message": "An agent A claimed that the following MHD_post_process code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_post_process.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs if pp->encoding (or the function parameter type used by MHD_str_equal_caseless_n_) is declared as a non-const pointer (e.g. char *encoding). The code is comparing what is effectively immutable text (a string literal macro MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA) but uses a non-const pointer type; per MISRA C 2023 Rule 8.13 the pointer should be const-qualified (e.g. const char *encoding).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_post_process entry: pp=0x564b449b13e0, post_data=0x564b2e2ca026, post_data_len=9\npp->encoding ptr=0x564b2e2ca004, preview(len=33)='application/x-www-form-urlencoded'\ncompare with FORM_URLENCODED -> result=1\nMHD_post_process entry: pp=0x564b449b13e0, post_data=0x564b2e2ca030, post_data_len=22\npp->encoding ptr=0x564b2e2ca004, preview(len=33)='application/x-www-form-urlencoded'\ncompare with FORM_URLENCODED -> result=1\nMHD_post_process entry: pp=0x564b449b13e0, post_data=0x564b2e2d1d7d, post_data_len=0\npost_data_len is 0 -> returning MHD_YES\nMHD_post_process entry: pp=0x564b449b13e0, post_data=0x564b2e2ca047, post_data_len=11\npp->encoding ptr=0x564b2e2ca004, preview(len=33)='application/x-www-form-urlencoded'\ncompare with FORM_URLENCODED -> result=1\nMHD_post_process entry: pp=0x564b449b13e0, post_data=0x564b2e2ca053, post_data_len=6\npp->encoding ptr=0x564b2e2ca004, preview(len=33)='application/x-www-form-urlencoded'\ncompare with FORM_URLENCODED -> result=1\nMHD_post_process entry: pp=0x564b449b13e0, post_data=0x564b2e2d1d7d, post_data_len=0\npost_data_len is 0 -> returning MHD_YES\nMHD_post_process entry: pp=0x564b449b13e0, post_data=0x564b2e2ca05a, post_data_len=13531\npp->encoding ptr=0x564b2e2ca004, preview(len=33)='application/x-www-form-urlencoded'\ncompare with FORM_URLENCODED -> result=1\nMHD_post_process entry: pp=0x564b449b13e0, post_data=0x564b2e2d1d7d, post_data_len=0\npost_data_len is 0 -> returning MHD_YES\nMHD_post_process entry: pp=0x7f94f2b82010, post_data=0x564b2e2cd536, post_data_len=5013\npp->encoding ptr=0x564b2e2ca004, preview(len=33)='application/x-www-form-urlencoded'\ncompare with FORM_URLENCODED -> result=1\nMHD_post_process entry: pp=0x7f94f2b82010, post_data=0x564b2e2ce8cc, post_data_len=5120\npp->encoding ptr=0x564b2e2ca004, preview(len=33)='application/x-www-form-urlencoded'\ncompare with FORM_URLENCODED -> result=1\nMHD_post_process entry: pp=0x7f94f2b82010, post_data=0x564b2e2d1d7d, post_data_len=0\npost_data_len is 0 -> returning MHD_YES\nMHD_post_process entry: pp=0x564b449b2670, post_data=0x564b2e2cfccd, post_data_len=430\npp->encoding ptr=0x564b2e2ca004, preview(len=33)='application/x-www-form-urlencoded'\ncompare with FORM_URLENCODED -> result=1\nMHD_post_process entry: pp=0x564b449b2670, post_data=0x564b2e2cfe7c, post_data_len=14\npp->encoding ptr=0x564b2e2ca004, preview(len=33)='application/x-www-form-urlencoded'\ncompare with FORM_URLENCODED -> result=1\nMHD_post_process entry: pp=0x564b449b2670, post_data=0x564b2e2d1d7d, post_data_len=0\npost_data_len is 0 -> returning MHD_YES\nMHD_post_process entry: pp=0x5638825fc820, post_data=0x56387ab6e073, post_data_len=1\npp->encoding ptr=0x56387ab6e023, preview(len=36)='multipart/form-data, boundary=AaB03x'\ncompare with FORM_URLENCODED -> result=0\ncompare with MULTIPART_FORMDATA -> result=1\nMHD_post_process entry: pp=0x5638825fc820, post_data=0x56387ab6e074, post_data_len=230\npp->encoding ptr=0x56387ab6e023, preview(len=36)='multipart/form-data, boundary=AaB03x'\ncompare with FORM_URLENCODED -> result=0\ncompare with MULTIPART_FORMDATA -> result=1\nMHD_post_process entry: pp=0x5638825fc820, post_data=0x56387ab6e073, post_data_len=2\npp->encoding ptr=0x56387ab6e023, preview(len=36)='multipart/form-data, boundary=AaB03x'\ncompare with FORM_URLENCODED -> result=0\ncompare with MULTIPART_FORMDATA -> result=1\nMHD_post_process entry: pp=0x5638825fc820, post_data=0x56387ab6e075, post_data_len=229\npp->encoding ptr=0x56387ab6e023, preview(len=36)='multipart/form-data, boundary=AaB03x'\ncompare with FORM_URLENCODED -> result=0\ncompare with MULTIPART_FORMDATA -> result=1\nMHD_post_process entry: pp=0x5638825fc820, post_data=0x56387ab6e073, post_data_len=3\npp->encoding ptr=0x56387ab6e023, preview(len=36)='multipart/form-data, boundary=AaB03x'\ncompare with FORM_URLENCODED -> result=0\ncompare with MULTIPART_FORMDATA -> result=1\nMHD_post_process entry: pp=0x5638825fc820, post_data=0x56387ab6e076, post_data_len=228\npp->encoding ptr=0x56387ab6e023, preview(len=36)='multipart/form-data, boundary=AaB03x'\ncompare with FORM_URLENCODED -> result=0\ncompare with MULTIPART_FORMDATA -> result=1\nMHD\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent\u2019s concern is plausible but cannot be confirmed from the snippet alone. MISRA C:2023 Rule 8.13 says pointer types should be const-qualified when possible \u2014 i.e. if the pointed-to object is not modified via that pointer, the declaration should carry const. In MHD_post_process the code only reads pp->encoding (passes it to comparison functions) and does not modify it; therefore the function parameter could be declared to point to a const-qualified object (for example: const struct MHD_PostProcessor *pp) and the encoding member itself could be declared const char * if it is never modified anywhere. However, the rule applies to the declarations (the struct member and the parameter type), and those declarations are not shown here. The mere use of pp->encoding in a read-only way does not by itself prove a MISRA violation. If the definition of struct MHD_PostProcessor declares encoding as char * (non-const) and there is no need to modify the pointed data anywhere, then that would be a violation of Rule 8.13 and should be changed to const char *. If, on the other hand, the field is intentionally mutable elsewhere, then the non-const declaration may be justified. Conclusion: the agent\u2019s report is not deterministically correct based on the provided code \u2014 it is only correct if the struct member (or other relevant declarations) are indeed non-const and could safely be const-qualified."
}