{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf post_process_urlencoded is declared to take a non-const pointer for the post data (for example: enum MHD_Result post_process_urlencoded(struct MHD_PostProcessor *pp, char *post_data, size_t post_data_len);), then passing the const char *post_data from MHD_post_process discards the const qualifier. That constitutes a violation of MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible). If, instead, post_process_urlencoded is declared to accept a const char * for the data, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_post_process code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_post_process as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_post_process:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_post_process code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging function: append a line to /tmp/logs/2293.txt with control\n   flow and state information. Kept simple to avoid changing program logic. */\nstatic void log_probe(const char *stage,\n                      const void *pp,\n                      const void *post_data,\n                      size_t post_data_len,\n                      const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/2293.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log the stage, pointer values and data length. Include optional note. */\n    if (note != NULL)\n    {\n      fprintf(f, \"stage=%s; pp=%p; post_data=%p; post_data_len=%zu; note=%s\\n\",\n              stage, pp, post_data, post_data_len, note);\n    }\n    else\n    {\n      fprintf(f, \"stage=%s; pp=%p; post_data=%p; post_data_len=%zu\\n\",\n              stage, pp, post_data, post_data_len);\n    }\n    (void)fclose(f);\n  }\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  /* Entry probe */\n  log_probe(\"entry\", (const void *)pp, (const void *)post_data, post_data_len, NULL);\n\n  if (0 == post_data_len)\n  {\n    log_probe(\"empty_post_data\", (const void *)pp, (const void *)post_data, post_data_len, \"return MHD_YES\");\n    return MHD_YES;\n  }\n  if (NULL == pp)\n  {\n    log_probe(\"null_pp\", (const void *)pp, (const void *)post_data, post_data_len, \"return MHD_NO\");\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    /* Log right before calling post_process_urlencoded. This is the critical\n       point for the Rule 8.13 scenario: we have a const char *post_data and\n       we are about to pass it to post_process_urlencoded. If that function is\n       declared to accept a non-const char *, the const qualifier is discarded. */\n    log_probe(\"calling_post_process_urlencoded\",\n              (const void *)pp,\n              (const void *)post_data,\n              post_data_len,\n              \"About to call post_process_urlencoded with const char *post_data (potential const discard)\");\n\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  }\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n  {\n    /* Log right before calling post_process_multipart. */\n    log_probe(\"calling_post_process_multipart\",\n              (const void *)pp,\n              (const void *)post_data,\n              post_data_len,\n              \"About to call post_process_multipart\");\n\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  }\n  /* this should never be reached */\n  log_probe(\"unhandled_encoding\",\n            (const void *)pp,\n            (const void *)post_data,\n            post_data_len,\n            \"return MHD_NO (unhandled encoding)\");\n  return MHD_NO;\n}\n"
}