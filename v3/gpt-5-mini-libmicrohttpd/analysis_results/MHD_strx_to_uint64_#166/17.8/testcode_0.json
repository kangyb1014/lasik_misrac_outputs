{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'str' (declared as const char *str) is incremented with 'str++' inside the loop, which modifies the pointer parameter. MISRA C 2023 Rule 17.8 forbids modifying function parameters; a local pointer copy (e.g. const char *p = str) should be used instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint64_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1667.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint64_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint64_:\n```c\nsize_t\nMHD_strx_to_uint64_ (const char *str,\n                     uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    if ( (res < (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit <= (UINT64_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n    }\n    else\n      return 0;\n    str++;\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint64_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n\n/* External helper: best to have a matching prototype so this file compiles. */\nextern int toxdigitvalue (int ch);\n\n/*\n * Instrumented version of MHD_strx_to_uint64_.\n * Logs control flow and state to /tmp/logs/1667.txt so other agents can\n * reproduce and gather evidence of the pointer-parameter modification.\n *\n * NOTE: The original logic and the pointer increment (str++) are preserved\n * so the violation scenario (modifying the function parameter 'str') is\n * observable in the logs.\n */\nsize_t\nMHD_strx_to_uint64_ (const char *str,\n                     uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n  int digit;\n  FILE *log = fopen(\"/tmp/logs/1667.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_strx_to_uint64_: start=%p out_val=%p\\n\", (void *) str, (void *) out_val);\n  }\n\n  if (! str || ! out_val)\n  {\n    if (log)\n    {\n      fprintf(log, \"NULL parameter detected: str=%p out_val=%p -> returning 0\\n\", (void *) str, (void *) out_val);\n      fclose(log);\n    }\n    return 0;\n  }\n\n  res = 0;\n  digit = toxdigitvalue ((unsigned char) *str);\n\n  while (digit >= 0)\n  {\n    if (log)\n    {\n      /* Log index, pointer, current character byte value, current result and digit */\n      fprintf(log, \"loop idx=%td ptr=%p ch=0x%02X res=%llu digit=%d\\n\",\n              (ptrdiff_t) (str - start), (void *) str, (unsigned int) (unsigned char) *str,\n              (unsigned long long) res, digit);\n    }\n\n    if ( (res < (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit <= (UINT64_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n      if (log)\n      {\n        fprintf(log, \"res updated to %llu\\n\", (unsigned long long) res);\n      }\n    }\n    else\n    {\n      if (log)\n      {\n        fprintf(log, \"overflow detected at idx=%td ptr=%p res=%llu digit=%d -> returning 0\\n\",\n                (ptrdiff_t) (str - start), (void *) str, (unsigned long long) res, digit);\n        fclose(log);\n      }\n      return 0;\n    }\n\n    /* This is the code of interest: the pointer parameter 'str' is incremented. */\n    str++;\n\n    if (log)\n    {\n      fprintf(log, \"str incremented -> new ptr=%p\\n\", (void *) str);\n    }\n\n    digit = toxdigitvalue ((unsigned char) *str);\n  }\n\n  if (str - start > 0)\n  {\n    *out_val = res;\n    if (log)\n    {\n      fprintf(log, \"consumed=%td final_value=%llu -> out_val set\\n\",\n              (ptrdiff_t) (str - start), (unsigned long long) res);\n    }\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"no hex digits consumed -> consumed=0\\n\");\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT MHD_strx_to_uint64_: consumed=%td\\n\\n\", (ptrdiff_t) (str - start));\n    fclose(log);\n  }\n\n  return (size_t) (str - start);\n}\n"
}