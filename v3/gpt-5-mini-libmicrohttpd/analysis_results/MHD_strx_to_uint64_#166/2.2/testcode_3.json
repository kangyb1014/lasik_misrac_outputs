{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe sub-expression ((uint64_t) digit <= (UINT64_MAX % 16)) is always true in the given context. toxdigitvalue() yields 0..15 for valid hex digits and the loop condition while (digit >= 0) guarantees digit is in that range when evaluated. UINT64_MAX % 16 equals 15, so the comparison is tautologically true; evaluating it has no effect on behaviour and could be removed without changing the program. Thus the comparison is dead (redundant) code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint64_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1662.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint64_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint64_:\n```c\nsize_t\nMHD_strx_to_uint64_ (const char *str,\n                     uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    if ( (res < (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit <= (UINT64_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n    }\n    else\n      return 0;\n    str++;\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint64_ code.\n",
  "test_code": "typedef struct FILE FILE;\nFILE *fopen(const char *, const char *);\nint fprintf(FILE *, const char *, ...);\nint fclose(FILE *);\n\nstatic void mhd_log_probe(const char *label, const char *s, uint64_t res, int digit, const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/1662.txt\", \"a\");\n  if (! f)\n    return;\n\n  /* Print a compact snapshot of the current state. */\n  (void) fprintf(f, \"%s: str_ptr=%p char='\" \"%c\" \"' res=%llu digit=%d extra=%s\\n\",\n                 label,\n                 (const void *) s,\n                 (s && *s) ? *s : ' ',\n                 (unsigned long long) res,\n                 digit,\n                 extra ? extra : \"\");\n\n  /* Print the individual components used in the overflow test so other\n     agents can reproduce the (always true) sub-expression evaluation. */\n  (void) fprintf(f, \"%s:     res < (UINT64_MAX/16) = %d\\n\",\n                 label,\n                 (int) (res < (UINT64_MAX / 16)));\n  (void) fprintf(f, \"%s:     res == (UINT64_MAX/16) = %d\\n\",\n                 label,\n                 (int) (res == (UINT64_MAX / 16)));\n  (void) fprintf(f, \"%s:     (uint64_t)digit = %llu\\n\",\n                 label,\n                 (unsigned long long) ((uint64_t) digit));\n  (void) fprintf(f, \"%s:     UINT64_MAX %% 16 = %llu\\n\",\n                 label,\n                 (unsigned long long) (UINT64_MAX % 16));\n\n  (void) fclose(f);\n}\n\nsize_t\nMHD_strx_to_uint64_ (const char *str,\n                     uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n\n  /* Log initial state */\n  mhd_log_probe(\"init\", str, res, digit, \"start parsing\");\n\n  while (digit >= 0)\n  {\n    /* Evaluate the three parts of the overflow test into temporaries so we can\n       log them explicitly without changing the original control flow. */\n    int cond1 = (res < (UINT64_MAX / 16));\n    int cond2 = (res == (UINT64_MAX / 16));\n    int cond3 = ((uint64_t) digit <= (UINT64_MAX % 16));\n\n    /* Log the condition components before performing the original test. */\n    {\n      char extra[64];\n      (void) snprintf(extra, (unsigned long) sizeof(extra), \"cond1=%d cond2=%d cond3=%d\",\n                     cond1, cond2, cond3);\n      mhd_log_probe(\"loop_eval\", str, res, digit, extra);\n    }\n\n    if (cond1 || (cond2 && cond3))\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n\n      /* Log successful accumulation. */\n      mhd_log_probe(\"accumulate\", str, res, digit, \"digit appended\");\n    }\n    else\n    {\n      /* Log overflow/failure path before returning 0 so the evidence is\n         captured that the inner comparison was evaluated and its operands. */\n      mhd_log_probe(\"overflow\", str, res, digit, \"overflow detected, returning 0\");\n      return 0;\n    }\n\n    str++;\n    digit = toxdigitvalue (*str);\n\n    /* Log next-character / next-digit state. */\n    mhd_log_probe(\"next\", str, res, digit, \"advance to next char\");\n  }\n\n  /* Log final state before writing out the value. */\n  mhd_log_probe(\"final\", str, res, digit, \"parsing finished\");\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n"
}