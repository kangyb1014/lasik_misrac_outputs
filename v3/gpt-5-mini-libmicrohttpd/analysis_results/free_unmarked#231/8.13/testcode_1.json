{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the struct member pp->content_transfer_encoding is declared as a non-const pointer (e.g. char *content_transfer_encoding) but the object it points to is only read (not modified) throughout the program, then the pointer should be const-qualified (e.g. const char *). In that situation Rule 8.13 is violated because the pointer could and should point to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified free_unmarked code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of free_unmarked as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of free_unmarked:\n```c\nstatic void\nfree_unmarked (struct MHD_PostProcessor *pp)\n{\n  if ( (NULL != pp->content_name) &&\n       (0 == (pp->have & NE_content_name)) )\n  {\n    free (pp->content_name);\n    pp->content_name = NULL;\n  }\n  if ( (NULL != pp->content_type) &&\n       (0 == (pp->have & NE_content_type)) )\n  {\n    free (pp->content_type);\n    pp->content_type = NULL;\n  }\n  if ( (NULL != pp->content_filename) &&\n       (0 == (pp->have & NE_content_filename)) )\n  {\n    free (pp->content_filename);\n    pp->content_filename = NULL;\n  }\n  if ( (NULL != pp->content_transfer_encoding) &&\n       (0 == (pp->have & NE_content_transfer_encoding)) )\n  {\n    free (pp->content_transfer_encoding);\n    pp->content_transfer_encoding = NULL;\n  }\n}\n```\n</target_code>\nPlease provide the modified free_unmarked code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append state & control-flow information to /tmp/logs/2313.txt */\nstatic void\nlog_state(const struct MHD_PostProcessor *pp, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/2313.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log basic stage and the have-mask value */\n  fprintf(f, \"stage=%s, pp=%p, have=0x%08x\\n\", stage, (const void *)pp, (unsigned)pp->have);\n\n  /* Log each relevant member pointer and (if non-NULL) its string contents */\n  fprintf(f, \"  content_name: ptr=%p\", (const void *)pp->content_name);\n  if (pp->content_name)\n    fprintf(f, \", value='%s'\", pp->content_name);\n  fprintf(f, \"\\n\");\n\n  fprintf(f, \"  content_type: ptr=%p\", (const void *)pp->content_type);\n  if (pp->content_type)\n    fprintf(f, \", value='%s'\", pp->content_type);\n  fprintf(f, \"\\n\");\n\n  fprintf(f, \"  content_filename: ptr=%p\", (const void *)pp->content_filename);\n  if (pp->content_filename)\n    fprintf(f, \", value='%s'\", pp->content_filename);\n  fprintf(f, \"\\n\");\n\n  fprintf(f, \"  content_transfer_encoding: ptr=%p\", (const void *)pp->content_transfer_encoding);\n  if (pp->content_transfer_encoding)\n    fprintf(f, \", value='%s'\", pp->content_transfer_encoding);\n  fprintf(f, \"\\n\\n\");\n\n  fclose(f);\n}\n\nstatic void\nfree_unmarked (struct MHD_PostProcessor *pp)\n{\n  /* Log entry state */\n  log_state(pp, \"entry\");\n\n  if ( (NULL != pp->content_name) &&\n       (0 == (pp->have & NE_content_name)) )\n  {\n    /* Log just before freeing content_name */\n    log_state(pp, \"freeing content_name - before free\");\n    free (pp->content_name);\n    pp->content_name = NULL;\n    /* Log after free */\n    log_state(pp, \"freeing content_name - after free\");\n  }\n  else\n  {\n    log_state(pp, \"skipped content_name\");\n  }\n\n  if ( (NULL != pp->content_type) &&\n       (0 == (pp->have & NE_content_type)) )\n  {\n    log_state(pp, \"freeing content_type - before free\");\n    free (pp->content_type);\n    pp->content_type = NULL;\n    log_state(pp, \"freeing content_type - after free\");\n  }\n  else\n  {\n    log_state(pp, \"skipped content_type\");\n  }\n\n  if ( (NULL != pp->content_filename) &&\n       (0 == (pp->have & NE_content_filename)) )\n  {\n    log_state(pp, \"freeing content_filename - before free\");\n    free (pp->content_filename);\n    pp->content_filename = NULL;\n    log_state(pp, \"freeing content_filename - after free\");\n  }\n  else\n  {\n    log_state(pp, \"skipped content_filename\");\n  }\n\n  if ( (NULL != pp->content_transfer_encoding) &&\n       (0 == (pp->have & NE_content_transfer_encoding)) )\n  {\n    /* This is the member relevant to the Rule 8.13 report: log its state clearly */\n    log_state(pp, \"freeing content_transfer_encoding - before free\");\n    free (pp->content_transfer_encoding);\n    pp->content_transfer_encoding = NULL;\n    log_state(pp, \"freeing content_transfer_encoding - after free\");\n  }\n  else\n  {\n    log_state(pp, \"skipped content_transfer_encoding\");\n  }\n\n  /* Final state on exit */\n  log_state(pp, \"exit\");\n}\n"
}