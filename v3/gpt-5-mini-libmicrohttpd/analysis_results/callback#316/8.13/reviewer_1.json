{
  "user_message": "An agent A claimed that the following callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of callback.\n```c\nstatic ssize_t\ncallback (void *cls,\n          uint64_t pos,\n          char *buf,\n          size_t buf_size)\n{\n  size_t size_to_copy;\n  struct ResponseContentCallbackParam *const param =\n    (struct ResponseContentCallbackParam *) cls;\n\n  /* Note: 'pos' will never exceed size of transmitted data. */\n  /* You can use 'pos == param->response_size' in next check. */\n  if (pos >= param->response_size)\n  {   /* Whole response was sent. Signal end of response. */\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n\n  /* Pseudo code.        *\n  if (data_not_ready)\n    {\n      // Callback will be called again on next loop.\n      // Consider suspending connection until data will be ready.\n      return 0;\n    }\n   * End of pseudo code. */\n  if (buf_size < (param->response_size - pos))\n    size_to_copy = buf_size;\n  else\n    size_to_copy = (size_t) (param->response_size - pos);\n\n  memcpy (buf, param->response_data + pos, size_to_copy);\n\n  /* Pseudo code.        *\n  if (error_preparing_response)\n    {\n      // Close connection with error.\n      return MHD_CONTENT_READER_END_WITH_ERROR;\n    }\n   * End of pseudo code. */\n  /* Return amount of data copied to buffer. */\n  /* The 'buf_size' is always smaller than SSIZE_MAX therefore it's safe\n   * to cast 'size_to_copy' to 'ssize_t'. */\n  /* assert (size_to_copy <= buf_size); */\n  return (ssize_t) size_to_copy;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes param->response_data + pos (a pointer to non-const data) as the source to memcpy while the data is treated read-only. The struct member (response_data) and the cls parameter are not declared const-qualified even though they could be. MISRA C 2023 Rule 8.13 is violated: the pointer should point to a const-qualified type (e.g. const char *response_data and use const void *cls / const struct ResponseContentCallbackParam *param).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is essentially correct. MISRA C 2023 Rule 8.13 advises that pointers which are used only to read object state should point to const-qualified types. In the snippet the callback only reads param->response_size and reads bytes from param->response_data (via memcpy). Yet param is declared as a pointer to a non-const struct (struct ResponseContentCallbackParam *const) and the response_data member is used as a non-const char * source. Those pointers could and should be const-qualified if the data is immutable, so a MISRA tool would flag this as a violation.\n\nPractical notes and fixes:\n- You cannot change the external callback prototype if it is defined by a library (it takes void *cls). However you can, and should, cast the incoming void * to a pointer-to-const inside the function: e.g. const struct ResponseContentCallbackParam *const param = (const struct ResponseContentCallbackParam *)cls;\n- If the response buffer is inherently immutable, declare it in the struct as const char *response_data. That will make the intent explicit and satisfy Rule 8.13.\n- If the data is actually mutable elsewhere, then const is not appropriate and no violation exists in that case.\n\nGiven the code shown and the typical usage (reading response_data only), the report that Rule 8.13 is violated is correct, unless there is a reason the data must be mutable elsewhere."
}