{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If args does not point to a NUL-terminated character array (or points to an interior of an object where no '\\0' occurs before the object end), then calling strchr(args, '=') / strchr(args, '&') will scan past the bounds searching for the terminator. Example: caller provides a 1-byte buffer char buf[1] = {'A'} and passes args = buf; the function tests args[0] != '\\0' (true) and then strchr(args, '=') will read beyond buf searching for '=' or '\\0', causing an out-of-bounds access. The code does not prove or ensure that the entire string is NUL-terminated, so the use of strchr can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_parse_arguments_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1299.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_parse_arguments_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_parse_arguments_:\n```c\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n        return MHD_NO;\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n      return MHD_NO;\n    args = amper;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_parse_arguments_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nstatic void MHD_log_state(const char *stage,\n                          struct MHD_Connection *connection,\n                          char *args,\n                          char *equals,\n                          char *amper,\n                          size_t key_len,\n                          size_t value_len,\n                          int cb_ret)\n{\n  FILE *f = fopen(\"/tmp/logs/1299.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s: conn=%p args=%p \", stage, (void *)connection, (void *)args);\n  if (NULL == args)\n    fprintf(f, \"args=NULL \");\n  else\n    fprintf(f, \"args[0]=0x%02x \", (unsigned char) args[0]);\n  fprintf(f, \"equals=%p amper=%p key_len=%zu value_len=%zu cb_ret=%d\\n\",\n          (void *)equals, (void *)amper, key_len, value_len, cb_ret);\n  fclose(f);\n}\n\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  MHD_log_state(\"entry\", connection, args, NULL, NULL, 0U, 0U, -1);\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n\n    MHD_log_state(\"loop_start\", connection, args, NULL, NULL, 0U, 0U, -1);\n\n    /* probe before calling strchr */\n    MHD_log_state(\"before_strchr\", connection, args, NULL, NULL, 0U, 0U, -1);\n\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n\n    /* probe after calling strchr */\n    MHD_log_state(\"after_strchr\", connection, args, equals, amper, 0U, 0U, -1);\n\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_log_state(\"branch:last_no_equals_before_unescape\", connection, args, equals, amper, 0U, 0U, -1);\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        MHD_log_state(\"after_unescape_key\", connection, args, equals, amper, key_len, 0U, -1);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n        {\n          MHD_log_state(\"cb_returned_no\", connection, args, equals, amper, key_len, 0U, (int)MHD_NO);\n          return MHD_NO;\n        }\n        MHD_log_state(\"branch:last_no_equals_after_cb\", connection, args, equals, amper, key_len, 0U, (int)MHD_YES);\n        break;\n      }\n      /* got 'foo=bar' */\n      MHD_log_state(\"branch:last_with_equals_before_split\", connection, args, equals, amper, 0U, 0U, -1);\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      MHD_log_state(\"branch:last_with_equals_after_unescape\", connection, args, equals, amper, key_len, value_len, -1);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n      {\n        MHD_log_state(\"cb_returned_no\", connection, args, equals, amper, key_len, value_len, (int)MHD_NO);\n        return MHD_NO;\n      }\n      MHD_log_state(\"branch:last_with_equals_after_cb\", connection, args, equals, amper, key_len, value_len, (int)MHD_YES);\n      break;\n    }\n    /* amper is non-NULL here */\n    MHD_log_state(\"amper_non_null_before_split\", connection, args, equals, amper, 0U, 0U, -1);\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_log_state(\"branch:no_equals_or_equals_after_amper_before_unescape\", connection, args, equals, amper, 0U, 0U, -1);\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_log_state(\"branch:no_equals_or_equals_after_amper_after_unescape\", connection, args, equals, amper, key_len, 0U, -1);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n      {\n        MHD_log_state(\"cb_returned_no\", connection, args, equals, amper, key_len, 0U, (int)MHD_NO);\n        return MHD_NO;\n      }\n      /* continue with 'bar' */\n      MHD_log_state(\"continue_with_next_arg\", connection, amper, NULL, NULL, 0U, 0U, -1);\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n       so we got regular 'foo=value&bar...'-kind of argument */\n    MHD_log_state(\"branch:equals_and_amper_regular_before_split\", connection, args, equals, amper, 0U, 0U, -1);\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    MHD_log_state(\"branch:equals_and_amper_regular_after_unescape\", connection, args, equals, amper, key_len, value_len, -1);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n    {\n      MHD_log_state(\"cb_returned_no\", connection, args, equals, amper, key_len, value_len, (int)MHD_NO);\n      return MHD_NO;\n    }\n    MHD_log_state(\"branch:equals_and_amper_regular_after_cb\", connection, args, equals, amper, key_len, value_len, (int)MHD_YES);\n    args = amper;\n  }\n\n  MHD_log_state(\"exit\", connection, args, NULL, NULL, 0U, 0U, (int)MHD_YES);\n  return MHD_YES;\n}\n"
}