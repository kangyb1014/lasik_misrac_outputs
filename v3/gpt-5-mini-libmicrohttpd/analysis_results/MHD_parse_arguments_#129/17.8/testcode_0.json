{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'args' (type 'char *') is reassigned with 'args = amper;', i.e. the pointer parameter itself is modified. MISRA C 2023 Rule 17.8 prohibits modifying pointer parameters (the pointed-to object may be modified, but not the pointer), so this assignment constitutes a violation. Note: modifications like 'equals[0] = '\\0'' or 'amper[0] = '\\0'' (modifying the pointed-to characters) are allowed, but the 'args' pointer must not be changed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_parse_arguments_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1297.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_parse_arguments_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_parse_arguments_:\n```c\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n        return MHD_NO;\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n      return MHD_NO;\n    args = amper;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_parse_arguments_ code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/1297.txt */\nstatic void log_probe(const char *stage,\n                      struct MHD_Connection *connection,\n                      char *args,\n                      char *equals,\n                      char *amper)\n{\n  FILE *f = fopen(\"/tmp/logs/1297.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"[MHD_parse_arguments_] %s: conn=%p, args=%p\", stage, (void *)connection, (void *)args);\n  if (args)\n  {\n    size_t n = strnlen(args, 200);\n    fprintf(f, \", args_str=(%zu) '\", n);\n    fwrite(args, 1, n, f);\n    fprintf(f, \"'\");\n  }\n  fprintf(f, \", equals=%p\", (void *)equals);\n  if (equals)\n  {\n    size_t n = strnlen(equals, 200);\n    fprintf(f, \", equals_str=(%zu) '\", n);\n    fwrite(equals, 1, n, f);\n    fprintf(f, \"'\");\n  }\n  fprintf(f, \", amper=%p\", (void *)amper);\n  if (amper)\n  {\n    size_t n = strnlen(amper, 200);\n    fprintf(f, \", amper_str=(%zu) '\", n);\n    fwrite(amper, 1, n, f);\n    fprintf(f, \"'\");\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  log_probe(\"entry\", connection, args, NULL, NULL);\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n\n    log_probe(\"loop_start_found_separators\", connection, args, equals, amper);\n\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        log_probe(\"last_arg_no_equals_before_unescape\", connection, args, equals, amper);\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        {\n          int cb_res = cb (cls,\n                            args,\n                            key_len,\n                            NULL,\n                            0,\n                            kind);\n          log_probe(\"cb_return_last_no_equals\", connection, args, equals, amper);\n          if (MHD_NO == cb_res)\n            return MHD_NO;\n        }\n        break;\n      }\n      /* got 'foo=bar' */\n      log_probe(\"before_modify_equals_for_value_only\", connection, args, equals, amper);\n      equals[0] = '\\0';\n      equals++;\n      log_probe(\"after_modify_equals_increment\", connection, args, equals, amper);\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      {\n        int cb_res = cb (cls,\n                          args,\n                          key_len,\n                          equals,\n                          value_len,\n                          kind);\n        log_probe(\"cb_return_value_pair\", connection, args, equals, amper);\n        if (MHD_NO == cb_res)\n          return MHD_NO;\n      }\n      break;\n    }\n    /* amper is non-NULL here */\n    log_probe(\"before_modify_amper\", connection, args, equals, amper);\n    amper[0] = '\\0';\n    amper++;\n    log_probe(\"after_modify_amper_increment\", connection, args, equals, amper);\n\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      log_probe(\"case_key_only_before_unescape\", connection, args, equals, amper);\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      {\n        int cb_res = cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind);\n        log_probe(\"cb_return_key_only\", connection, args, equals, amper);\n        if (MHD_NO == cb_res)\n          return MHD_NO;\n      }\n      /* continue with 'bar' */\n      log_probe(\"before_args_reassign\", connection, args, equals, amper);\n      args = amper; /* pointer parameter is reassigned here (evidence of the violation) */\n      log_probe(\"after_args_reassign\", connection, args, equals, amper);\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    log_probe(\"before_modify_equals_regular_pair\", connection, args, equals, amper);\n    equals[0] = '\\0';\n    equals++;\n    log_probe(\"after_modify_equals_increment_regular_pair\", connection, args, equals, amper);\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    {\n      int cb_res = cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind);\n      log_probe(\"cb_return_regular_pair\", connection, args, equals, amper);\n      if (MHD_NO == cb_res)\n        return MHD_NO;\n    }\n    log_probe(\"before_args_reassign_end_of_loop\", connection, args, equals, amper);\n    args = amper;\n    log_probe(\"after_args_reassign_end_of_loop\", connection, args, equals, amper);\n  }\n  log_probe(\"exit\", connection, args, NULL, NULL);\n  return MHD_YES;\n}\n"
}