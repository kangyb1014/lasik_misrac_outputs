{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct MHD_Connection *connection' is not const-qualified even though the function only reads from the connection object (connection->daemon) and does not modify *connection. Therefore it could and should be declared as 'const struct MHD_Connection *connection' to satisfy MISRA C 2023 Rule 8.13. (Note: 'char *args' must remain non-const because the function modifies the buffer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_parse_arguments_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_parse_arguments_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_parse_arguments_:\n```c\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n        return MHD_NO;\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n      return MHD_NO;\n    args = amper;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_parse_arguments_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: append textual logs to /tmp/logs/1293.txt */\nstatic void mhd_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1293.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\n\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  mhd_log(\"ENTER MHD_parse_arguments_: connection=%p daemon=%p kind=%d args=%p\\n\",\n          (void *)connection, (void *)daemon, (int)kind, (void *)args);\n  mhd_log(\"  initial args content: %s\\n\", (args != NULL) ? args : \"(null)\");\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n\n    mhd_log(\"LOOP: args=%p '%s' equals=%p amper=%p\\n\",\n            (void *)args, args, (void *)equals, (void *)amper);\n\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        mhd_log(\"BRANCH: last argument without '='; will call MHD_unescape_plus on args=%p '%s'\\n\",\n                (void *)args, args);\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        mhd_log(\"  after unescape: args='%s' key_len=%zu\\n\", args, key_len);\n\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n        {\n          mhd_log(\"CALLBACK returned MHD_NO for key '%s'\\n\", args);\n          return MHD_NO;\n        }\n        mhd_log(\"Processed last argument without '=' -> continuing to break out\\n\");\n        break;\n      }\n      /* got 'foo=bar' */\n      mhd_log(\"BRANCH: last argument with '='; equals at %p -> splitting\\n\", (void *)equals);\n      equals[0] = '\\0';\n      equals++;\n      mhd_log(\"  after split: key='%s' value='%s'\\n\", args, equals);\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      mhd_log(\"  after unescape key: '%s' key_len=%zu\\n\", args, key_len);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      mhd_log(\"  after unescape value: '%s' value_len=%zu\\n\", equals, value_len);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n      {\n        mhd_log(\"CALLBACK returned MHD_NO for key '%s' value '%s'\\n\", args, equals);\n        return MHD_NO;\n      }\n      mhd_log(\"Processed last 'foo=bar' argument -> break\\n\");\n      break;\n    }\n    /* amper is non-NULL here */\n    mhd_log(\"BRANCH: ampersand found at %p -> terminator for current arg\\n\", (void *)amper);\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      mhd_log(\"SUB-BRANCH: no '=' before '&' -> key only: '%s'\\n\", args);\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      mhd_log(\"  after unescape key-only: '%s' key_len=%zu\\n\", args, key_len);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n      {\n        mhd_log(\"CALLBACK returned MHD_NO for key-only '%s'\\n\", args);\n        return MHD_NO;\n      }\n      /* continue with 'bar' */\n      mhd_log(\"Continuing with next arg at %p -> '%s'\\n\", (void *)amper, amper);\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    mhd_log(\"SUB-BRANCH: regular 'foo=value&...' with equals at %p and amper at %p\\n\",\n            (void *)equals, (void *)(amper - 1));\n    equals[0] = '\\0';\n    equals++;\n    mhd_log(\"  split into key='%s' value='%s'\\n\", args, equals);\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    mhd_log(\"  after unescape key: '%s' key_len=%zu\\n\", args, key_len);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    mhd_log(\"  after unescape value: '%s' value_len=%zu\\n\", equals, value_len);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n    {\n      mhd_log(\"CALLBACK returned MHD_NO for key '%s' value '%s'\\n\", args, equals);\n      return MHD_NO;\n    }\n    mhd_log(\"Processed 'foo=value' pair -> moving to next arg at %p\\n\", (void *)amper);\n    args = amper;\n  }\n  mhd_log(\"EXIT MHD_parse_arguments_: returning MHD_YES\\n\");\n  return MHD_YES;\n}\n"
}