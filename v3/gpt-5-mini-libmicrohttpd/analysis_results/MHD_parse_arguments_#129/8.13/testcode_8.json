{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'daemon' is declared as a mutable pointer (struct MHD_Daemon *daemon = connection->daemon;) but in the function it is only used for read-only access (daemon->unescape_callback and daemon->unescape_callback_cls are read and invoked). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Declaring it as 'const struct MHD_Daemon *daemon = connection->daemon;' would satisfy the rule. Therefore this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_parse_arguments_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_parse_arguments_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_parse_arguments_:\n```c\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n        return MHD_NO;\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n      return MHD_NO;\n    args = amper;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_parse_arguments_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a line to the log file with printf-like formatting. */\nstatic void log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1293.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic const char *safe_str(const char *s)\n{\n  return (s != NULL) ? s : \"(null)\";\n}\n\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  log_probe(\"MHD_parse_arguments_: entry: connection=%p, daemon=%p, args=%s, kind=%d, cb=%p, cls=%p\",\n            (void *)connection,\n            (void *)daemon,\n            safe_str(args),\n            (int)kind,\n            (void *)cb,\n            (void *)cls);\n\n  if (daemon != NULL)\n  {\n    log_probe(\"daemon fields: unescape_callback is %s, unescape_callback_cls=%p\",\n              (daemon->unescape_callback != NULL) ? \"set\" : \"NULL\",\n              (void *)daemon->unescape_callback_cls);\n  }\n  else\n  {\n    log_probe(\"daemon is NULL\");\n  }\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n\n    log_probe(\"loop: args='%s', equals=%p, amper=%p\", safe_str(args), (void *)equals, (void *)amper);\n\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        log_probe(\"branch: last argument without '='; args before unescape='%s'\", safe_str(args));\n        MHD_unescape_plus (args);\n        log_probe(\"after MHD_unescape_plus: args='%s'\", safe_str(args));\n\n        log_probe(\"calling daemon->unescape_callback with cls=%p, connection=%p, args='%s'\",\n                  (daemon != NULL) ? daemon->unescape_callback_cls : NULL,\n                  (void *)connection,\n                  safe_str(args));\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        log_probe(\"unescape_callback returned key_len=%zu\", key_len);\n\n        log_probe(\"invoking cb for key only: cls=%p, args='%s', key_len=%zu, value=NULL, value_len=0, kind=%d\",\n                  cls,\n                  safe_str(args),\n                  key_len,\n                  (int)kind);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n        {\n          log_probe(\"cb returned MHD_NO -> returning MHD_NO\");\n          return MHD_NO;\n        }\n        log_probe(\"cb returned MHD_YES (or not MHD_NO) -> breaking\");\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      log_probe(\"branch: last argument with '='; key part before unescape='%s', value part before unescape='%s'\", safe_str(args), safe_str(equals));\n\n      MHD_unescape_plus (args);\n      log_probe(\"after MHD_unescape_plus key: '%s'\", safe_str(args));\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      log_probe(\"unescape_callback returned key_len=%zu\", key_len);\n\n      MHD_unescape_plus (equals);\n      log_probe(\"after MHD_unescape_plus value: '%s'\", safe_str(equals));\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      log_probe(\"unescape_callback returned value_len=%zu\", value_len);\n\n      log_probe(\"invoking cb for key/value: cls=%p, key='%s', key_len=%zu, value='%s', value_len=%zu, kind=%d\",\n                cls,\n                safe_str(args),\n                key_len,\n                safe_str(equals),\n                value_len,\n                (int)kind);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n      {\n        log_probe(\"cb returned MHD_NO -> returning MHD_NO\");\n        return MHD_NO;\n      }\n      log_probe(\"cb returned MHD_YES (or not MHD_NO) -> breaking\");\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      log_probe(\"branch: amper non-NULL and no '=' before amper -> key part before unescape='%s'\", safe_str(args));\n      MHD_unescape_plus (args);\n      log_probe(\"after MHD_unescape_plus key: '%s'\", safe_str(args));\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      log_probe(\"unescape_callback returned key_len=%zu\", key_len);\n\n      log_probe(\"invoking cb for key only (ampersand case): cls=%p, key='%s', key_len=%zu, value=NULL, value_len=0, kind=%d\",\n                cls,\n                safe_str(args),\n                key_len,\n                (int)kind);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n      {\n        log_probe(\"cb returned MHD_NO -> returning MHD_NO\");\n        return MHD_NO;\n      }\n      /* continue with 'bar' */\n      args = amper;\n      log_probe(\"continuing loop with args now='%s'\", safe_str(args));\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    log_probe(\"branch: regular 'foo=value&...' case; key before unescape='%s', value before unescape='%s'\", safe_str(args), safe_str(equals));\n\n    MHD_unescape_plus (args);\n    log_probe(\"after MHD_unescape_plus key: '%s'\", safe_str(args));\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    log_probe(\"unescape_callback returned key_len=%zu\", key_len);\n\n    MHD_unescape_plus (equals);\n    log_probe(\"after MHD_unescape_plus value: '%s'\", safe_str(equals));\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    log_probe(\"unescape_callback returned value_len=%zu\", value_len);\n\n    log_probe(\"invoking cb for regular pair: cls=%p, key='%s', key_len=%zu, value='%s', value_len=%zu, kind=%d\",\n              cls,\n              safe_str(args),\n              key_len,\n              safe_str(equals),\n              value_len,\n              (int)kind);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n    {\n      log_probe(\"cb returned MHD_NO -> returning MHD_NO\");\n      return MHD_NO;\n    }\n    args = amper;\n    log_probe(\"end of iteration, next args='%s'\", safe_str(args));\n  }\n  log_probe(\"MHD_parse_arguments_: exiting with MHD_YES\");\n  return MHD_YES;\n}\n"
}