{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_unames_size:\n```c\n_MHD_static_inline size_t\nget_rq_unames_size (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type)\n{\n  size_t s;\n\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  s = 0;\n  if ((MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type) ||\n      (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type) )\n  {\n    s += params->username.value.len + 1; /* Add one byte for zero-termination */\n    if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n      s += (params->username.value.len + 1) / 2;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n    s += params->username_ext.value.len\n         - MHD_DAUTH_EXT_PARAM_MIN_LEN + 1; /* Add one byte for zero-termination */\n  return s;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  s += params->username_ext.value.len\n       - MHD_DAUTH_EXT_PARAM_MIN_LEN + 1; /* Add one byte for zero-termination */",
    "mhd_assert (get_rq_uname_type (params) == uname_type);",
    "if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  s += (params->username.value.len + 1) / 2;",
    "if ((MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type) ||\n    (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type) )\n{\n  s += params->username.value.len + 1; /* Add one byte for zero-termination */\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n    s += (params->username.value.len + 1) / 2;\n}"
  ],
  "explanation": "Other fragments (declaration of 's', the initialization 's = 0;', the simple additions to 's' within the conditional blocks, and the final 'return s;') are straightforward statements that are syntactically reachable depending on which conditional branch is taken, and do not by themselves indicate unreachable code. The only parts that can cause unreachable-code concerns in this function are the assertion that constrains the relationship between params and the uname_type parameter and the conditional branches that depend on uname_type; these are listed above for investigation. There are no loops, constant false/true conditions, or code after unconditional exits (e.g. infinite loops, goto to a later point, or returns preceding code) elsewhere in this function that would create additional unreachable statements, so other lines do not need investigation for Rule 2.1."
}