{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a debug-only assertion (e.g. like the standard assert macro which is a no-op when assertions are disabled), then the call get_rq_uname_type(params) inside the macro is executed only in builds with assertions enabled. Removing the mhd_assert (or compiling it out in production) does not affect the program\u2019s functional behaviour (only its diagnostics), so that operation is dead code according to MISRA C 2023 Rule 2.2. (If, however, the assertion expression has side effects that are relied upon, or mhd_assert is not compiled out, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_unames_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2862.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_unames_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_unames_size:\n```c\n_MHD_static_inline size_t\nget_rq_unames_size (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type)\n{\n  size_t s;\n\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  s = 0;\n  if ((MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type) ||\n      (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type) )\n  {\n    s += params->username.value.len + 1; /* Add one byte for zero-termination */\n    if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n      s += (params->username.value.len + 1) / 2;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n    s += params->username_ext.value.len\n         - MHD_DAUTH_EXT_PARAM_MIN_LEN + 1; /* Add one byte for zero-termination */\n  return s;\n}\n```\n</target_code>\nPlease provide the modified get_rq_unames_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: call get_rq_uname_type, log the call and result, and return whether it matches expected.\n   This helper is intended to be used inside the mhd_assert call so that it is executed only when the\n   assertion macro evaluates its argument (preserving the original conditional execution).\n*/\nstatic int\nmhd_probe_get_rq_uname_type (const struct MHD_RqDAuth *params,\n                             enum MHD_DigestAuthUsernameType expected)\n{\n  enum MHD_DigestAuthUsernameType got;\n  FILE *f;\n\n  /* Call the real function (as the original assertion did) */\n  got = get_rq_uname_type (params);\n\n  /* Log the call and values to the file for repro / evidence of the assertion-path execution */\n  f = fopen(\"/tmp/logs/2862.txt\", \"a\");\n  if (f)\n  {\n    fprintf (f, \"[probe] get_rq_uname_type called: params=%p, expected=%d, got=%d\\n\",\n             (void *) params, (int) expected, (int) got);\n    fclose (f);\n  }\n\n  return (got == expected);\n}\n\n_MHD_static_inline size_t\nget_rq_unames_size (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type)\n{\n  size_t s;\n\n  /* Preserve original assertion but evaluate via the probe helper so we can detect\n     whether the call to get_rq_uname_type actually happens (i.e. only when assertions are enabled). */\n  mhd_assert (mhd_probe_get_rq_uname_type (params, uname_type));\n\n  s = 0;\n  if ((MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type) ||\n      (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type) )\n  {\n    s += params->username.value.len + 1; /* Add one byte for zero-termination */\n    if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n      s += (params->username.value.len + 1) / 2;\n\n    /* Log control path and state for this branch */\n    {\n      FILE *f = fopen(\"/tmp/logs/2862.txt\", \"a\");\n      if (f)\n      {\n        fprintf (f, \"[probe] branch=STANDARD/USERHASH, uname_type=%d, username_len=%zu, computed_s=%zu\\n\",\n                 (int) uname_type, (size_t) params->username.value.len, s);\n        fclose (f);\n      }\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    s += params->username_ext.value.len\n         - MHD_DAUTH_EXT_PARAM_MIN_LEN + 1; /* Add one byte for zero-termination */\n\n    /* Log control path and state for extended branch */\n    {\n      FILE *f = fopen(\"/tmp/logs/2862.txt\", \"a\");\n      if (f)\n      {\n        fprintf (f, \"[probe] branch=EXTENDED, uname_type=%d, username_ext_len=%zu, computed_s=%zu\\n\",\n                 (int) uname_type, (size_t) params->username_ext.value.len, s);\n        fclose (f);\n      }\n    }\n  }\n  else\n  {\n    /* Log control path for unexpected uname_type */\n    FILE *f = fopen(\"/tmp/logs/2862.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"[probe] branch=OTHER, uname_type=%d, computed_s=%zu\\n\",\n               (int) uname_type, s);\n      fclose (f);\n    }\n  }\n\n  return s;\n}\n"
}