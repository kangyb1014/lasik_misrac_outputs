{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'block' is declared as void *block but is only used for pointer comparisons and not modified. In the call mp_ptr_le_(pool->memory, block) the pointer 'block' should be const-qualified (e.g. const void *block) and mp_ptr_le_ should accept const pointers where appropriate. Therefore the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_is_resizable_inplace code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_is_resizable_inplace as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_is_resizable_inplace:\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_is_resizable_inplace code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  /* Log entry with basic state */\n  {\n    FILE *log = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log,\n              \"ENTER: MHD_pool_is_resizable_inplace pool=%p memory=%p pos=%zu end=%zu size=%zu block=%p block_size=%zu\\n\",\n              (void *)pool, (void *)pool->memory,\n              (size_t)pool->pos, (size_t)pool->end, (size_t)pool->size,\n              block, block_size);\n      fclose(log);\n    }\n  }\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    /* Compute offset and capture pointer comparison result once for logging */\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    bool memory_le_block = mp_ptr_le_ (pool->memory, block);\n\n    /* Preserve original assertions (use the computed value to avoid double evaluation) */\n    mhd_assert (memory_le_block);\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n\n    /* Compute result as original logic did */\n    const size_t expected_pos =\n      ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n    const bool result = (pool->pos == expected_pos);\n\n    /* Log detailed internal state to help reproduce the violation scenario */\n    {\n      FILE *log = fopen(\"/tmp/logs/1363.txt\", \"a\");\n      if (log != NULL)\n      {\n        fprintf(log,\n                \"BRANCH: block != NULL; block=%p block_offset=%zu memory_le_block=%d expected_pos=%zu pool->pos=%zu result=%d\\n\",\n                block, block_offset, (int)memory_le_block,\n                expected_pos, (size_t)pool->pos, (int)result);\n        fclose(log);\n      }\n    }\n\n    return result;\n  }\n\n  /* Log the early-return case for unallocated blocks */\n  {\n    FILE *log = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"RETURN: block == NULL -> false (unallocated blocks cannot be resized in-place)\\n\");\n      fclose(log);\n    }\n  }\n\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n"
}