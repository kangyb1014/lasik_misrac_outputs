{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'block' is declared as void * but is only inspected (not modified) when calling mp_ptr_diff_(block, pool->memory). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 here 'block' should be declared 'const void *block'. (Likewise, if pool->memory is not modified elsewhere it should be a const-qualified pointer too.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_is_resizable_inplace code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_is_resizable_inplace as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_is_resizable_inplace:\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_is_resizable_inplace code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe/logging helper that appends messages to /tmp/logs/1363.txt. */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  /* Try to open the file; if directory doesn't exist, attempt to create it. */\n  f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* best-effort: create parent dir and retry */\n    (void) mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n  }\n\n  if (f == NULL)\n  {\n    /* If still failing, silently return to avoid changing program behavior. */\n    return;\n  }\n\n  va_start (ap, fmt);\n  (void) vfprintf (f, fmt, ap);\n  va_end (ap);\n  (void) fflush (f);\n  (void) fclose (f);\n}\n\n/* The original function preserved with added logging probes. */\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  /* Log entry with pointer values only to avoid dereferencing invalid pool pointers. */\n  mhd_log_probe (\"ENTER: MHD_pool_is_resizable_inplace(pool=%p, block=%p, block_size=%zu)\\n\",\n                 (void *) pool, block, block_size);\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n\n  /* After basic assertions, it is safer to inspect pool members for logging. */\n  mhd_log_probe (\"pool state: memory=%p, pos=%zu, end=%zu, size=%zu\\n\",\n                 (void *) pool->memory, pool->pos, pool->end, pool->size);\n\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    bool le = mp_ptr_le_ (pool->memory, block);\n    bool size_ge_offset = (pool->size >= block_offset);\n    bool size_ge_offset_plus = (pool->size >= block_offset + block_size);\n    size_t expected_pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n    bool result = (pool->pos == expected_pos);\n\n    mhd_log_probe (\"block non-NULL: block=%p, block_offset=%zu\\n\", block, block_offset);\n    mhd_log_probe (\"mp_ptr_le_(pool->memory, block)=%d\\n\", (int) le);\n    mhd_log_probe (\"pool->size >= block_offset: %d\\n\", (int) size_ge_offset);\n    mhd_log_probe (\"pool->size >= block_offset + block_size: %d\\n\", (int) size_ge_offset_plus);\n    mhd_log_probe (\"block_size=%zu, block_offset+block_size=%zu, expected_pos=%zu, actual_pos=%zu\\n\",\n                   block_size, block_offset + block_size, expected_pos, pool->pos);\n    mhd_log_probe (\"RESIZABLE_INPLACE_RESULT=%d\\n\", (int) result);\n\n    mhd_assert (le);\n    mhd_assert (size_ge_offset);\n    mhd_assert (size_ge_offset_plus);\n\n    return result;\n  }\n\n  mhd_log_probe (\"block is NULL: cannot resize in-place -> returning false\\n\");\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n"
}