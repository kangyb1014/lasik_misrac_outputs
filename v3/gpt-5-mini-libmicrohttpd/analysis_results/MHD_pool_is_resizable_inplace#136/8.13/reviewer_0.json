{
  "user_message": "An agent A claimed that the following MHD_pool_is_resizable_inplace code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_is_resizable_inplace.\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'block' is declared as void *block but is only used for pointer comparisons and not modified. In the call mp_ptr_le_(pool->memory, block) the pointer 'block' should be const-qualified (e.g. const void *block) and mp_ptr_le_ should accept const pointers where appropriate. Therefore the code violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The parameter block is never used to modify the pointee \u2014 it is only tested against NULL and used for pointer arithmetic/ comparisons (mp_ptr_diff_, mp_ptr_le_). Per MISRA C:2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible, so block should be declared as const void *block (and the called helpers should accept const pointers where appropriate). The only circumstances that would negate this conclusion are external constraints (for example, an API compatibility requirement or helper functions that cannot be changed and legally require a non-const pointer). Given the shown code alone, this is a violation and should be fixed by introducing const on the pointer and updating related helper prototypes as needed."
}