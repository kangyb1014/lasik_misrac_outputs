{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_is_resizable_inplace:\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert (pool->size >= block_offset);",
    "const size_t block_offset = mp_ptr_diff_ (block, pool->memory);",
    "return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));",
    "mhd_assert (pool->size >= pool->end - pool->pos);",
    "mhd_assert (pool->size >= block_size);",
    "mhd_assert (mp_ptr_le_ (pool->memory, block));",
    "mhd_assert (block != NULL || block_size == 0);",
    "mhd_assert (pool->end >= pool->pos);",
    "mhd_assert (pool->size >= block_offset + block_size);"
  ],
  "explanation": "MISRA C Rule 17.2 prohibits direct or indirect recursion. The only code locations in this function that could introduce indirect recursion are those that invoke other functions or macros which might, in their implementation, call back to MHD_pool_is_resizable_inplace (or into a cycle). The listed fragments cover every function/macro invocation in the function body: all mhd_assert usages, the call to mp_ptr_diff_, the call to mp_ptr_le_, and the use of ROUND_TO_ALIGN_PLUS_RED_ZONE. Other parts of the function (function signature, local variable declarations, plain comparisons/arithmetics, the final 'return false;') do not perform function calls and therefore cannot introduce indirect recursion; they do not need to be investigated for Rule 17.2. Note: if any of the listed macros expand to inline code with no function calls, they are harmless, but their implementations must be inspected to rule out indirect recursion \u2014 which is why those call sites are flagged."
}