{
  "user_message": "An agent A claimed that the following MHD_queue_response code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_queue_response.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_response (struct MHD_Connection *connection,\n                    unsigned int status_code,\n                    struct MHD_Response *response)\n{\n  struct MHD_Daemon *daemon;\n  bool reply_icy;\n\n  if ((NULL == connection) || (NULL == response))\n    return MHD_NO;\n\n  daemon = connection->daemon;\n  if ((! connection->in_access_handler) && (! connection->suspended) &&\n      MHD_D_IS_USING_THREADS_ (daemon))\n    return MHD_NO;\n\n  reply_icy = (0 != (status_code & MHD_ICY_FLAG));\n  status_code &= ~MHD_ICY_FLAG;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if ( (! connection->suspended) &&\n       MHD_D_IS_USING_THREADS_ (daemon) &&\n       (! MHD_thread_handle_ID_is_current_thread_ (connection->tid)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Attempted to queue response on wrong thread!\\n\"));\n#endif\n    return MHD_NO;\n  }\n#endif\n\n  if (NULL != connection->rp.response)\n    return MHD_NO; /* The response was already set */\n\n  if ( (MHD_CONNECTION_HEADERS_PROCESSED != connection->state) &&\n       (MHD_CONNECTION_FULL_REQ_RECEIVED != connection->state) )\n    return MHD_NO; /* Wrong connection state */\n\n  if (daemon->shutdown)\n    return MHD_NO;\n\n#ifdef UPGRADE_SUPPORT\n  if (NULL != response->upgrade_handler)\n  {\n    struct MHD_HTTP_Res_Header *conn_header;\n    if (0 == (daemon->options & MHD_ALLOW_UPGRADE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Attempted 'upgrade' connection on daemon without\" \\\n                   \" MHD_ALLOW_UPGRADE option!\\n\"));\n#endif\n      return MHD_NO;\n    }\n    if (MHD_HTTP_SWITCHING_PROTOCOLS != status_code)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Application used invalid status code for\" \\\n                   \" 'upgrade' response!\\n\"));\n#endif\n      return MHD_NO;\n    }\n    if (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Application used invalid response\" \\\n                   \" without \\\"Connection\\\" header!\\n\"));\n#endif\n      return MHD_NO;\n    }\n    conn_header = response->first_header;\n    mhd_assert (NULL != conn_header);\n    mhd_assert (MHD_str_equal_caseless_ (conn_header->header,\n                                         MHD_HTTP_HEADER_CONNECTION));\n    if (! MHD_str_has_s_token_caseless_ (conn_header->value,\n                                         \"upgrade\"))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Application used invalid response\" \\\n                   \" without \\\"upgrade\\\" token in\" \\\n                   \" \\\"Connection\\\" header!\\n\"));\n#endif\n      return MHD_NO;\n    }\n    if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Connection \\\"Upgrade\\\" can be used only \" \\\n                   \"with HTTP/1.1 connections!\\n\"));\n#endif\n      return MHD_NO;\n    }\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (MHD_HTTP_SWITCHING_PROTOCOLS == status_code)\n  {\n#ifdef UPGRADE_SUPPORT\n    if (NULL == response->upgrade_handler)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Application used status code 101 \\\"Switching Protocols\\\" \" \\\n                   \"with non-'upgrade' response!\\n\"));\n#endif /* HAVE_MESSAGES */\n      return MHD_NO;\n    }\n#else  /* ! UPGRADE_SUPPORT */\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Application used status code 101 \\\"Switching Protocols\\\", \" \\\n                 \"but this MHD was built without \\\"Upgrade\\\" support!\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n#endif /* ! UPGRADE_SUPPORT */\n  }\n  if ( (100 > status_code) ||\n       (999 < status_code) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Refused wrong status code (%u). \" \\\n                 \"HTTP requires three digits status code!\\n\"),\n              status_code);\n#endif\n    return MHD_NO;\n  }\n  if (200 > status_code)\n  {\n    if (MHD_HTTP_VER_1_0 == connection->rq.http_ver)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Wrong status code (%u) refused. \" \\\n                   \"HTTP/1.0 clients do not support 1xx status codes!\\n\"),\n                (status_code));\n#endif\n      return MHD_NO;\n    }\n    if (0 != (response->flags & (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT\n                                 | MHD_RF_HTTP_1_0_SERVER)))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Wrong status code (%u) refused. \" \\\n                   \"HTTP/1.0 reply mode does not support 1xx status codes!\\n\"),\n                (status_code));\n#endif\n      return MHD_NO;\n    }\n  }\n  if ( (MHD_HTTP_MTHD_CONNECT == connection->rq.http_mthd) &&\n       (2 == status_code / 100) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Successful (%u) response code cannot be used to answer \" \\\n                 \"\\\"CONNECT\\\" request!\\n\"),\n              (status_code));\n#endif\n    return MHD_NO;\n  }\n\n  if ( (0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n       (RP_BODY_HEADERS_ONLY < is_reply_body_needed (connection, status_code)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"HEAD-only response cannot be used when the request requires \"\n                 \"reply body to be sent!\\n\"));\n#endif\n    return MHD_NO;\n  }\n\n#ifdef HAVE_MESSAGES\n  if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) &&\n       (0 != (MHD_RAF_HAS_CONTENT_LENGTH & response->flags_auto)) )\n  {\n    MHD_DLOG (daemon,\n              _ (\"The response has application-defined \\\"Content-Length\\\" \" \\\n                 \"header. The reply to the request will be not \" \\\n                 \"HTTP-compliant and may result in hung connection or \" \\\n                 \"other problems!\\n\"));\n  }\n#endif\n\n  MHD_increment_response_rc (response);\n  connection->rp.response = response;\n  connection->rp.responseCode = status_code;\n  connection->rp.responseIcy = reply_icy;\n#if defined(_MHD_HAVE_SENDFILE)\n  if ( (response->fd == -1) ||\n       (response->is_pipe) ||\n       (0 != (connection->daemon->options & MHD_USE_TLS))\n#if defined(MHD_SEND_SPIPE_SUPPRESS_NEEDED) && \\\n       defined(MHD_SEND_SPIPE_SUPPRESS_POSSIBLE)\n       || (! daemon->sigpipe_blocked && ! connection->sk_spipe_suppress)\n#endif /* MHD_SEND_SPIPE_SUPPRESS_NEEDED &&\n          MHD_SEND_SPIPE_SUPPRESS_POSSIBLE */\n       )\n    connection->rp.resp_sender = MHD_resp_sender_std;\n  else\n    connection->rp.resp_sender = MHD_resp_sender_sendfile;\n#endif /* _MHD_HAVE_SENDFILE */\n  /* FIXME: if 'is_pipe' is set, TLS is off, and we have *splice*, we could use splice()\n     to avoid two user-space copies... */\n\n  if ( (MHD_HTTP_MTHD_HEAD == connection->rq.http_mthd) ||\n       (MHD_HTTP_OK > status_code) ||\n       (MHD_HTTP_NO_CONTENT == status_code) ||\n       (MHD_HTTP_NOT_MODIFIED == status_code) )\n  {\n    /* if this is a \"HEAD\" request, or a status code for\n       which a body is not allowed, pretend that we\n       have already sent the full message body. */\n    /* TODO: remove the next assignment, use 'rp_props.send_reply_body' in\n     * checks */\n    connection->rp.rsp_write_position = response->total_size;\n  }\n  if (MHD_CONNECTION_HEADERS_PROCESSED == connection->state)\n  {\n    /* response was queued \"early\", refuse to read body / footers or\n       further requests! */\n    connection->discard_request = true;\n    connection->state = MHD_CONNECTION_START_REPLY;\n    connection->rq.remaining_upload_size = 0;\n  }\n  if (! connection->in_idle)\n    (void) MHD_connection_handle_idle (connection);\n  MHD_update_last_activity_ (connection);\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe non-pointer parameter 'status_code' is modified inside the function (status_code &= ~MHD_ICY_FLAG;). This violates MISRA C 2023 Rule 17.8 because a function parameter (the integer status_code) is altered. Pointer parameters themselves are not reassigned in this function (only the objects they point to are modified), but the modification of the integer parameter is a rule violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-26 07:40:06 - ENTRY: connection=0x556b7a374df0 response=0x556b7a37d0c0 status_code=101\n2025-08-26 07:40:06 - daemon=0x556b7a374830 in_access_handler=1 suspended=0\n2025-08-26 07:40:06 - before_modify: status_code=101 reply_icy=0\n2025-08-26 07:40:06 - after_modify: status_code=101\n2025-08-26 07:40:06 - SET: connection->rp.response=0x556b7a37d0c0 responseCode=101 responseIcy=0\n2025-08-26 07:40:06 - INFO: set rsp_write_position=0 for status_code=101\n2025-08-26 07:40:06 - INFO: queued early response, state set to START_REPLY\n2025-08-26 07:40:06 - EXIT: success -> MHD_YES connection=0x556b7a374df0 status_code=101\n2025-08-26 07:40:06 - ENTRY: connection=0x556b7a37dc60 response=0x556b7a37deb0 status_code=101\n2025-08-26 07:40:06 - daemon=0x556b7a37d7e0 in_access_handler=1 suspended=0\n2025-08-26 07:40:06 - before_modify: status_code=101 reply_icy=0\n2025-08-26 07:40:06 - after_modify: status_code=101\n2025-08-26 07:40:06 - SET: connection->rp.response=0x556b7a37deb0 responseCode=101 responseIcy=0\n2025-08-26 07:40:06 - INFO: set rsp_write_position=0 for status_code=101\n2025-08-26 07:40:06 - INFO: queued early response, state set to START_REPLY\n2025-08-26 07:40:06 - EXIT: success -> MHD_YES connection=0x556b7a37dc60 status_code=101\n2025-08-26 07:40:07 - ENTRY: connection=0x556b7a375090 response=0x556b7a37e470 status_code=101\n2025-08-26 07:40:07 - daemon=0x556b7a37dff0 in_access_handler=1 suspended=0\n2025-08-26 07:40:07 - before_modify: status_code=101 reply_icy=0\n2025-08-26 07:40:07 - after_modify: status_code=101\n2025-08-26 07:40:07 - SET: connection->rp.response=0x556b7a37e470 responseCode=101 responseIcy=0\n2025-08-26 07:40:07 - INFO: set rsp_write_position=0 for status_code=101\n2025-08-26 07:40:07 - INFO: queued early response, state set to START_REPLY\n2025-08-26 07:40:07 - EXIT: success -> MHD_YES connection=0x556b7a375090 status_code=101\n2025-08-26 07:40:07 - ENTRY: connection=0x7f3ef0000b90 response=0x7f3ee8000b90 status_code=101\n2025-08-26 07:40:07 - daemon=0x556b7a3752e0 in_access_handler=1 suspended=0\n2025-08-26 07:40:07 - before_modify: status_code=101 reply_icy=0\n2025-08-26 07:40:07 - after_modify: status_code=101\n2025-08-26 07:40:07 - SET: connection->rp.response=0x7f3ee8000b90 responseCode=101 responseIcy=0\n2025-08-26 07:40:07 - INFO: set rsp_write_position=0 for status_code=101\n2025-08-26 07:40:07 - INFO: queued early response, state set to START_REPLY\n2025-08-26 07:40:07 - EXIT: success -> MHD_YES connection=0x7f3ef0000b90 status_code=101\n2025-08-26 07:40:07 - ENTRY: connection=0x7f3ef0000b90 response=0x7f3eec000b90 status_code=101\n2025-08-26 07:40:07 - daemon=0x556b7a375760 in_access_handler=1 suspended=0\n2025-08-26 07:40:07 - before_modify: status_code=101 reply_icy=0\n2025-08-26 07:40:07 - after_modify: status_code=101\n2025-08-26 07:40:07 - SET: connection->rp.response=0x7f3eec000b90 responseCode=101 responseIcy=0\n2025-08-26 07:40:07 - INFO: set rsp_write_position=0 for status_code=101\n2025-08-26 07:40:07 - INFO: queued early response, state set to START_REPLY\n2025-08-26 07:40:07 - EXIT: success -> MHD_YES connection=0x7f3ef0000b90 status_code=101\n2025-08-26 07:40:07 - ENTRY: connection=0x7f3ef0000b90 response=0x7f3ee8000b90 status_code=101\n2025-08-26 07:40:07 - daemon=0x556b7a375ba0 in_access_handler=1 suspended=0\n2025-08-26 07:40:07 - before_modify: status_code=101 reply_icy=0\n2025-08-26 07:40:07 - after_modify: status_code=101\n2025-08-26 07:40:07 - SET: connection->rp.response=0x7f3ee8000b90 responseCode=101 responseIcy=0\n2025-08-26 07:40:07 - INFO: set rsp_write_position=0 for status_code=101\n2025-08-26 07:40:07 - INFO: queued early response, state set to START_REPLY\n2025-08-26 07:40:07 - EXIT: success -> MHD_YES connection=0x7f3ef0000b90 status_code=101\n2025-08-26 07:40:07 - ENTRY: connection=0x7f3ef0000b90 response=0x7f3ef0008f40 status_code=101\n2025-08-26 07:40:07 - daemon=0x556b7a375fe0 in_access_handler=1 suspended=0\n2025-08-26 07:40:07 - before_modify: status_code=101 reply_icy=0\n2025-08-26 07:40:07 - after_modify: status_code=101\n2025-08-26 07:40:07 - SET: connection->rp.response=0x7f3ef0008f40 resp\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. MISRA C 2023 Rule 17.8 forbids modifying function parameters. In the function MHD_queue_response the non\u2011pointer parameter status_code is modified by the statement\n\n  status_code &= ~MHD_ICY_FLAG;\n\nregardless of whether the bit is set at runtime. The execution log showing identical before/after values does not change the fact that the formal parameter is being written to. To comply with MISRA, make a local copy (for example: unsigned int sc = status_code; sc &= ~MHD_ICY_FLAG;) and use that local variable in the rest of the function (or otherwise avoid writing to the formal parameter)."
}