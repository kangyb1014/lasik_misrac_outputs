{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return MHD_NO;\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n        break;\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n        break;\n    }\n  }\n\n  if (NULL == pos)\n    return MHD_NO;\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No controlling expression in this function is an invariant constant expression. Checked control statements:\n\n- if (NULL == connection) return MHD_NO; \u2014 depends on the connection parameter (not invariant).\n- if (NULL == key) { for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next) { if ((0 != (kind & pos->kind)) && (NULL == pos->header)) break; } } \u2014 the for-loop condition (NULL != pos) and the inner if depend on the runtime value of pos and its fields; pos is updated each iteration, so the controlling expressions are not invariant.\n- else { for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next) { if ((0 != (kind & pos->kind)) && (key_size == pos->header_size) && ((key == pos->header) || (MHD_str_equal_caseless_bin_n_(key, pos->header, key_size)))) break; } } \u2014 same reasoning: loop condition and inner if depend on pos and function parameters; not invariant.\n- if (NULL == pos) return MHD_NO; \u2014 depends on loop outcome (pos runtime value).\n- if (NULL != value_ptr) *value_ptr = pos->value; and if (NULL != value_size_ptr) *value_size_ptr = pos->value_size; \u2014 these are runtime pointer checks, not compile-time invariants.\n\nNo do-while or intentionally infinite-loop patterns are present. Therefore there are no fragments that require investigation for MISRA C 2023 Rule 14.3 (controlling expressions shall not be invariant)."
}