{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop only reads the header pointer (compares it to NULL and later compares its contents to a const key) and does not modify it. If the struct member is declared as a non-const pointer (e.g. char *header) or pos is a non-const pointer to the header structure, that is a violation: the pointer should be const-qualified (either pos should be declared as const struct MHD_HTTP_Req_Header *pos or the member as const char *header) because the data is only accessed read-only.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return MHD_NO;\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n        break;\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n        break;\n    }\n  }\n\n  if (NULL == pos)\n    return MHD_NO;\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_connection_value_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append text to /tmp/logs/133.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  unsigned int iter = 0u;\n\n  probe_log(\"ENTER MHD_lookup_connection_value_n: connection=%p, kind=%u, key=%p, key_size=%zu, value_ptr=%p, value_size_ptr=%p\",\n            (void *)connection, (unsigned)kind, (const void *)key, key_size, (void *)value_ptr, (void *)value_size_ptr);\n\n  if (NULL == connection)\n  {\n    probe_log(\"EXIT early: connection is NULL\");\n    return MHD_NO;\n  }\n\n  if (NULL == key)\n  {\n    probe_log(\"Searching for header with NULL key (looking for header==NULL). Starting at headers_received=%p\",\n              (void *)connection->rq.headers_received);\n\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      /* Log current node state */\n      probe_log(\"iter=%u: pos=%p, pos->kind=0x%08x, pos->header=%p, pos->header_size=%zu, pos->value=%p, pos->value_size=%zu\",\n                iter, (void *)pos, (unsigned)pos->kind, (const void *)pos->header, (size_t)pos->header_size,\n                (const void *)pos->value, (size_t)pos->value_size);\n\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n      {\n        probe_log(\"MATCH at iter=%u: kind_mask_match=1, header_is_NULL=1 -> breaking. pos=%p\", iter, (void *)pos);\n        break;\n      }\n\n      iter++;\n    }\n  }\n  else\n  {\n    probe_log(\"Searching for specific key (key ptr=%p, key_size=%zu). Starting at headers_received=%p\",\n              (const void *)key, key_size, (void *)connection->rq.headers_received);\n\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      int cond_kind = (0 != (kind & pos->kind));\n      int cond_size = (key_size == pos->header_size);\n      int cond_eq = 0;\n\n      /* Safe to check pos->header pointer before dereferencing in equality check */\n      if (pos->header == key)\n      {\n        cond_eq = 1;\n      }\n      else if (NULL != pos->header)\n      {\n        /* call the original equality helper as in original code */\n        cond_eq = (MHD_str_equal_caseless_bin_n_ (key,\n                                                 pos->header,\n                                                 key_size) ) ? 1 : 0;\n      }\n\n      /* Log current node state and evaluated conditions */\n      probe_log(\"iter=%u: pos=%p, pos->kind=0x%08x, pos->header=%p, pos->header_size=%zu, cond_kind=%d, cond_size=%d, cond_eq=%d\",\n                iter, (void *)pos, (unsigned)pos->kind, (const void *)pos->header, (size_t)pos->header_size,\n                cond_kind, cond_size, cond_eq);\n\n      if ( cond_kind && cond_size && cond_eq )\n      {\n        probe_log(\"MATCH at iter=%u: cond_kind=1, cond_size=1, cond_eq=1 -> breaking. pos=%p\", iter, (void *)pos);\n        break;\n      }\n\n      iter++;\n    }\n  }\n\n  if (NULL == pos)\n  {\n    probe_log(\"EXIT not found: pos == NULL\");\n    return MHD_NO;\n  }\n\n  probe_log(\"FOUND: pos=%p, pos->header=%p, pos->header_size=%zu, pos->value=%p, pos->value_size=%zu\",\n            (void *)pos, (const void *)pos->header, (size_t)pos->header_size,\n            (const void *)pos->value, (size_t)pos->value_size);\n\n  if (NULL != value_ptr)\n  {\n    *value_ptr = pos->value;\n    probe_log(\"Assigned value_ptr -> %p (pos->value)\", (const void *)pos->value);\n  }\n\n  if (NULL != value_size_ptr)\n  {\n    *value_size_ptr = pos->value_size;\n    probe_log(\"Assigned value_size_ptr -> %zu (pos->value_size)\", (size_t)pos->value_size);\n  }\n\n  probe_log(\"EXIT return MHD_YES\");\n  return MHD_YES;\n}\n"
}