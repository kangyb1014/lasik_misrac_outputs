{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos' but is only used to read members of the headers list (e.g. pos->kind, pos->header, pos->header_size, pos->value, pos->value_size). No writes through 'pos' occur in this function, so according to MISRA C 2023 Rule 8.13 it should be const-qualified: 'const struct MHD_HTTP_Req_Header *pos;'. Therefore the rule is violated in this code fragment.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return MHD_NO;\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n        break;\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n        break;\n    }\n  }\n\n  if (NULL == pos)\n    return MHD_NO;\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_connection_value_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe helpers: write logs to /tmp/logs/133.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic void probe_log_header(const char *tag, const struct MHD_HTTP_Req_Header *h)\n{\n  if (NULL == h)\n  {\n    probe_log(\"%s: header = NULL\\n\", tag);\n    return;\n  }\n  /* Print pointer, kind, header pointer and size, value pointer and size. */\n  probe_log(\"%s: pos=%p kind=0x%08x header=%p header_size=%zu value=%p value_size=%zu\\n\",\n            tag,\n            (void *)h,\n            (unsigned int)h->kind,\n            (void *)h->header,\n            h->header_size,\n            (void *)h->value,\n            h->value_size);\n  if (NULL != h->header)\n  {\n    /* Print header bytes as a bounded string (may not be NUL-terminated). */\n    probe_log(\"%s: header-content=\\\"%.*s\\\"\\n\", tag, (int)h->header_size, h->header);\n  }\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  probe_log(\"MHD_lookup_connection_value_n: enter connection=%p kind=0x%08x key=%p key_size=%zu value_ptr=%p value_size_ptr=%p\\n\",\n            (void *)connection,\n            (unsigned int)kind,\n            (void *)key,\n            key_size,\n            (void *)value_ptr,\n            (void *)value_size_ptr);\n\n  if (NULL == connection)\n  {\n    probe_log(\"MHD_lookup_connection_value_n: connection is NULL -> returning MHD_NO\\n\");\n    return MHD_NO;\n  }\n\n  if (NULL == key)\n  {\n    probe_log(\"MHD_lookup_connection_value_n: key is NULL -> searching for header entries with header==NULL\\n\");\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      /* Log iteration state */\n      probe_log_header(\"iter\", (const struct MHD_HTTP_Req_Header *)pos);\n\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n      {\n        probe_log(\"MHD_lookup_connection_value_n: matching entry found (header==NULL) at pos=%p\\n\", (void *)pos);\n        break;\n      }\n    }\n  }\n  else\n  {\n    probe_log(\"MHD_lookup_connection_value_n: key provided -> searching for matching header name\\n\");\n    probe_log(\"MHD_lookup_connection_value_n: key-content=\\\"%.*s\\\"\\n\", (int)key_size, key);\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      /* Log iteration state */\n      probe_log_header(\"iter\", (const struct MHD_HTTP_Req_Header *)pos);\n\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n      {\n        probe_log(\"MHD_lookup_connection_value_n: matching entry found (name match) at pos=%p\\n\", (void *)pos);\n        break;\n      }\n    }\n  }\n\n  if (NULL == pos)\n  {\n    probe_log(\"MHD_lookup_connection_value_n: no matching header found -> returning MHD_NO\\n\");\n    return MHD_NO;\n  }\n\n  probe_log(\"MHD_lookup_connection_value_n: selected pos=%p\\n\", (void *)pos);\n  probe_log_header(\"selected\", (const struct MHD_HTTP_Req_Header *)pos);\n\n  if (NULL != value_ptr)\n  {\n    *value_ptr = pos->value;\n    probe_log(\"MHD_lookup_connection_value_n: stored *value_ptr=%p\\n\", (void *)(*value_ptr));\n  }\n\n  if (NULL != value_size_ptr)\n  {\n    *value_size_ptr = pos->value_size;\n    probe_log(\"MHD_lookup_connection_value_n: stored *value_size_ptr=%zu\\n\", *value_size_ptr);\n  }\n\n  probe_log(\"MHD_lookup_connection_value_n: returning MHD_YES\\n\");\n  return MHD_YES;\n}\n"
}