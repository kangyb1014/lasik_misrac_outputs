{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment reads and compares pos->header but does not modify it. If the struct member pos->header is declared as a non-const pointer (e.g. char *header), then Rule 8.13 is violated: a pointer that is only used for reading (compared to the const char *key and passed to MHD_str_equal_caseless_bin_n_) should be declared const (const char *header). The exact locations are the pointer-equality test (key == pos->header) and the call MHD_str_equal_caseless_bin_n_(key, pos->header, key_size).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return MHD_NO;\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n        break;\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n        break;\n    }\n  }\n\n  if (NULL == pos)\n    return MHD_NO;\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_connection_value_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append logs to /tmp/logs/133.txt */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  mhd_log_probe(\"ENTRY: MHD_lookup_connection_value_n(connection=%p, kind=0x%X, key=%p, key_size=%zu, value_ptr=%p, value_size_ptr=%p)\\n\",\n                (void *)connection, (unsigned)kind, (const void *)key, key_size,\n                (void *)value_ptr, (void *)value_size_ptr);\n\n  if (NULL == connection)\n  {\n    mhd_log_probe(\"EXIT: connection == NULL -> MHD_NO\\n\");\n    return MHD_NO;\n  }\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      mhd_log_probe(\"LOOP(NULL key): pos=%p, pos->header=%p, pos->header_size=%zu, pos->kind=0x%X\\n\",\n                    (void *)pos, (void *)pos->header, pos->header_size, (unsigned)pos->kind);\n\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n      {\n        mhd_log_probe(\"MATCH(NULL key): kind & pos->kind true and pos->header == NULL -> breaking at pos=%p\\n\",\n                      (void *)pos);\n        break;\n      }\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      mhd_log_probe(\"LOOP(key): pos=%p, pos->header=%p, pos->header_size=%zu, pos->kind=0x%X\\n\",\n                    (void *)pos, (void *)pos->header, pos->header_size, (unsigned)pos->kind);\n\n      if (0 == (kind & pos->kind))\n      {\n        /* kind mismatch */\n        mhd_log_probe(\"SKIP: kind mismatch (pos=%p)\\n\", (void *)pos);\n        continue;\n      }\n\n      if (key_size != pos->header_size)\n      {\n        mhd_log_probe(\"SKIP: header_size mismatch (key_size=%zu != pos->header_size=%zu) (pos=%p)\\n\",\n                      key_size, pos->header_size, (void *)pos);\n        continue;\n      }\n\n      /* Preserve the original short-circuit logic while adding logs. */\n      if (key == pos->header)\n      {\n        mhd_log_probe(\"POINTER EQUALITY: key (%p) == pos->header (%p) -> match at pos=%p\\n\",\n                      (const void *)key, (const void *)pos->header, (void *)pos);\n        break;\n      }\n      else\n      {\n        int eq = MHD_str_equal_caseless_bin_n_ (key,\n                                               pos->header,\n                                               key_size);\n        mhd_log_probe(\"STRING COMPARE: key=%p pos->header=%p key_size=%zu -> MHD_str_equal_caseless_bin_n_ result=%d (pos=%p)\\n\",\n                      (const void *)key, (const void *)pos->header, key_size, eq, (void *)pos);\n        if (eq)\n          break;\n      }\n    }\n  }\n\n  if (NULL == pos)\n  {\n    mhd_log_probe(\"EXIT: no matching header found -> MHD_NO\\n\");\n    return MHD_NO;\n  }\n\n  mhd_log_probe(\"FOUND: pos=%p, pos->header=%p, pos->value=%p, pos->value_size=%zu\\n\",\n                (void *)pos, (void *)pos->header, (void *)pos->value, pos->value_size);\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  mhd_log_probe(\"EXIT: returning MHD_YES\\n\");\n  return MHD_YES;\n}\n"
}