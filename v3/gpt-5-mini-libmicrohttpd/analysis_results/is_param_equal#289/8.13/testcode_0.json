{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression param->value.str is passed as a read-only string to an equality routine. If the struct member value.str is declared as a plain char * (not const char *), then the code is violating MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when it is only used for read access. Note: having the parameter declared as const struct MHD_RqDAuthParam * does not make the pointee type of the member const; the correct fix is to declare the member as const char * (or otherwise const-qualify the pointed-to type). If value.str is already declared const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_param_equal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_param_equal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\nPlease provide the modified is_param_equal code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdbool.h>\n\nstatic void\nmhd_log_is_param_equal(const struct MHD_RqDAuthParam *param,\n                       const char *const str,\n                       const size_t str_len,\n                       const char *stage,\n                       bool result_known, bool result)\n{\n  FILE *f = fopen(\"/tmp/logs/2893.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"--- is_param_equal: %s ---\\n\", stage ? stage : \"(null)\");\n  fprintf(f, \"param=%p, param->value.str=%p, param->value.len=%zu, param->quoted=%d\\n\",\n          (const void *)param,\n          (const void *)(param ? param->value.str : NULL),\n          (param ? (size_t)param->value.len : (size_t)0),\n          (param ? (int)param->quoted : 0));\n  fprintf(f, \"str=%p, str_len=%zu\\n\", (const void *)str, str_len);\n\n  if (param && param->value.str)\n  {\n    size_t dump = param->value.len < 64 ? param->value.len : 64;\n    fprintf(f, \"param->value.str (hex, first %zu bytes):\", dump);\n    for (size_t i = 0; i < dump; ++i)\n      fprintf(f, \" %02x\", (unsigned char)param->value.str[i]);\n    fprintf(f, \"\\n\");\n  }\n\n  if (str)\n  {\n    size_t dump2 = str_len < 64 ? str_len : 64;\n    fprintf(f, \"str (hex, first %zu bytes):\", dump2);\n    for (size_t i = 0; i < dump2; ++i)\n      fprintf(f, \" %02x\", (unsigned char)str[i]);\n    fprintf(f, \"\\n\");\n  }\n\n  if (result_known)\n    fprintf(f, \"result=%d\\n\", result ? 1 : 0);\n\n  fprintf(f, \"-----------------------------\\n\");\n  fclose(f);\n}\n\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* Log entry state */\n  mhd_log_is_param_equal(param, str, str_len, \"entry\", false, false);\n\n  bool ret;\n  if (param->quoted)\n  {\n    ret = MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                      str, str_len);\n    /* Log path and result for quoted case */\n    mhd_log_is_param_equal(param, str, str_len, \"quoted_path\", true, ret);\n    return ret;\n  }\n\n  ret = (str_len == param->value.len) &&\n        (0 == memcmp (str, param->value.str, str_len));\n\n  /* Log path and result for non-quoted case */\n  mhd_log_is_param_equal(param, str, str_len, \"non_quoted_path\", true, ret);\n\n  return ret;\n}\n"
}