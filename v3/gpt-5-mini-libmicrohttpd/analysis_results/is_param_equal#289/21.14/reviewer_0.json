{
  "user_message": "An agent A claimed that the following is_param_equal code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_param_equal.\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs if the compared objects are C-style null-terminated strings. For example, if 'str' is a null-terminated string and 'str_len' was obtained via strlen(str) (or includes the terminating '\\0'), and param->value.str is also a null-terminated string, then using memcmp to compare them constitutes comparing null-terminated strings with memcmp and thus violates MISRA C 2023 Rule 21.14.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 21.14 prohibits using memcmp to compare null-terminated strings. In the code memcmp(str, param->value.str, str_len) is used on two char buffers for a length supplied by the caller. Nothing in this function guarantees that either buffer is not a C-style null-terminated string: callers could pass str_len = strlen(str) (or include the terminating '\\0') and param->value.str could also be null-terminated. In those cases memcmp would be being used to compare null-terminated strings, which violates Rule 21.14. It is therefore a valid report unless the wider codebase provides a provable guarantee that both operands are never null-terminated strings (in which case the use would be acceptable)."
}