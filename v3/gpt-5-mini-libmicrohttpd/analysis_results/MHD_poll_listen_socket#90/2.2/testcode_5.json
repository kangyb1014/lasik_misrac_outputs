{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&p, 0, sizeof(p)) is redundant: every pollfd element that can be read later is explicitly assigned (fd, events, revents) before use, and only the first poll_count entries are passed to poll(). Removing this memset would not change program behaviour (the function returns early if poll_count==0 and any accessed entries are initialized). Therefore the memset is an executed operation whose removal would not affect program behaviour \u2014 it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_poll_listen_socket code that contains useful probe functions that print useful logs to a file \"/tmp/logs/902.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_poll_listen_socket as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_poll_listen_socket:\n```c\nstatic enum MHD_Result\nMHD_poll_listen_socket (struct MHD_Daemon *daemon,\n                        int may_block)\n{\n  struct pollfd p[2];\n  int timeout;\n  unsigned int poll_count;\n  int poll_listen;\n  int poll_itc_idx;\n  MHD_socket ls;\n\n  mhd_assert (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid));\n  mhd_assert (MHD_thread_handle_ID_is_current_thread_ (daemon->tid));\n\n  memset (&p,\n          0,\n          sizeof (p));\n  poll_count = 0;\n  poll_listen = -1;\n  poll_itc_idx = -1;\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n\n  {\n    p[poll_count].fd = ls;\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_listen = (int) poll_count;\n    poll_count++;\n  }\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    p[poll_count].fd = MHD_itc_r_fd_ (daemon->itc);\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_itc_idx = (int) poll_count;\n    poll_count++;\n  }\n\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    (void) resume_suspended_connections (daemon);\n\n  if (MHD_NO == may_block)\n    timeout = 0;\n  else\n    timeout = -1;\n  if (0 == poll_count)\n    return MHD_YES;\n  if (MHD_sys_poll_ (p,\n                     poll_count,\n                     timeout) < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_YES;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"poll failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if ( (0 <= poll_itc_idx) &&\n       (0 != (p[poll_itc_idx].revents & POLLIN)) )\n    MHD_itc_clear_ (daemon->itc);\n\n  /* handle shutdown */\n  if (daemon->shutdown)\n    return MHD_NO;\n\n  /* Process externally added connection if any */\n  if (daemon->have_new)\n    new_connections_list_process_ (daemon);\n\n  if ( (0 <= poll_listen) &&\n       (0 != (p[poll_listen].revents & POLLIN)) )\n    (void) MHD_accept_connection (daemon);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_poll_listen_socket code.\n",
  "test_code": "#include <stdio.h>\\n#include <stdarg.h>\\n#include <stddef.h>\\n\\n/* Probe logging utility used to capture control flow and state. */\\nstatic void mhd_logf(const char *fmt, ...)\\n{\\n    va_list ap;\\n    FILE *f = fopen(\\\"/tmp/logs/902.txt\\\", \\\"a\\\");\\n    if (NULL == f)\\n        return;\\n    va_start(ap, fmt);\\n    vfprintf(f, fmt, ap);\\n    va_end(ap);\\n    fputc('\\\\n', f);\\n    fclose(f);\\n}\\n\\nstatic void mhd_log_pollfds(const struct pollfd *p, unsigned int count)\\n{\\n    unsigned int i;\\n    for (i = 0; i < count; ++i)\\n    {\\n        /* Print fields we expect to be set by the function. */\\n        mhd_logf(\\\"p[%u]: fd=%d events=0x%x revents=0x%x\\\", i, p[i].fd, (unsigned int)p[i].events, (unsigned int)p[i].revents);\\n    }\\n}\\n\\nstatic enum MHD_Result\\nMHD_poll_listen_socket (struct MHD_Daemon *daemon,\\n                        int may_block)\\n{\\n  struct pollfd p[2];\\n  int timeout;\\n  unsigned int poll_count;\\n  int poll_listen;\\n  int poll_itc_idx;\\n  MHD_socket ls;\\n\\n  mhd_assert (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid));\\n  mhd_assert (MHD_thread_handle_ID_is_current_thread_ (daemon->tid));\\n\\n  /* Log entry and relevant daemon fields */\\n  mhd_logf(\\\"ENTER MHD_poll_listen_socket: daemon=%p may_block=%d listen_fd=%d was_quiesced=%d itc=%p options=0x%x\\\",\\n            (void *)daemon, may_block, (int)daemon->listen_fd, (int)daemon->was_quiesced, (void *)daemon->itc, (int)daemon->options);\\n\\n  mhd_logf(\\\"About to memset p; sizeof(p)=%zu\\\", sizeof (p));\\n  memset (&p,\\n          0,\\n          sizeof (p));\\n  mhd_logf(\\\"memset(&p) done\\\");\\n\\n  poll_count = 0;\\n  poll_listen = -1;\\n  poll_itc_idx = -1;\\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\\n       (! daemon->was_quiesced) )\\n\\n  {\\n    p[poll_count].fd = ls;\\n    p[poll_count].events = POLLIN;\\n    p[poll_count].revents = 0;\\n    poll_listen = (int) poll_count;\\n    mhd_logf(\\\"Added listen fd at index %u: fd=%d events=0x%x\\\", poll_count, (int)p[poll_count].fd, (unsigned int)p[poll_count].events);\\n    poll_count++;\\n  }\\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\\n  {\\n    p[poll_count].fd = MHD_itc_r_fd_ (daemon->itc);\\n    p[poll_count].events = POLLIN;\\n    p[poll_count].revents = 0;\\n    poll_itc_idx = (int) poll_count;\\n    mhd_logf(\\\"Added itc fd at index %u: fd=%d events=0x%x\\\", poll_count, (int)p[poll_count].fd, (unsigned int)p[poll_count].events);\\n    poll_count++;\\n  }\\n\\n  /* Log state after building poll list */\\n  mhd_logf(\\\"After setup: poll_count=%u poll_listen=%d poll_itc_idx=%d\\\", poll_count, poll_listen, poll_itc_idx);\\n  if (poll_count > 0)\\n    mhd_log_pollfds(p, poll_count);\\n\\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\\n    (void) resume_suspended_connections (daemon);\\n\\n  if (MHD_NO == may_block)\\n    timeout = 0;\\n  else\\n    timeout = -1;\\n  if (0 == poll_count)\\n  {\\n    mhd_logf(\\\"poll_count == 0: returning MHD_YES (no fds to poll). Note: memset(&p) was executed earlier and would be redundant in this path.\\\");\\n    return MHD_YES;\\n  }\\n\\n  mhd_logf(\\\"Calling MHD_sys_poll_ with poll_count=%u timeout=%d\\\", poll_count, timeout);\\n  if (MHD_sys_poll_ (p,\\n                     poll_count,\\n                     timeout) < 0)\\n  {\\n    const int err = MHD_socket_get_error_ ();\\n\\n    mhd_logf(\\\"MHD_sys_poll_ returned error: %d\\\", err);\\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\\n    {\\n      mhd_logf(\\\"poll interrupted by signal (EINTR): returning MHD_YES\\\");\\n      return MHD_YES;\\n    }\\n#ifdef HAVE_MESSAGES\\n    MHD_DLOG (daemon,\\n              _ (\\\"poll failed: %s\\\\n\\\"),\\n              MHD_socket_strerr_ (err));\\n#endif\\n    mhd_logf(\\\"poll failed and not EINTR: returning MHD_NO\\\");\\n    return MHD_NO;\\n  }\\n\\n  /* Log poll results for the indices we care about */\\n  mhd_logf(\\\"poll succeeded; logging revents for configured indices\\\");\\n  if (poll_count > 0)\\n    mhd_log_pollfds(p, poll_count);\\n\\n  if ( (0 <= poll_itc_idx) &&\\n       (0 != (p[poll_itc_idx].revents & POLLIN)) )\\n  {\\n    mhd_logf(\\\"itc index %d has POLLIN set in revents (revents=0x%x)\\\", poll_itc_idx, (unsigned int)p[poll_itc_idx].revents);\\n    MHD_itc_clear_ (daemon->itc);\\n  }\\n\\n  /* handle shutdown */\\n  if (daemon->shutdown)\\n  {\\n    mhd_logf(\\\"daemon->shutdown is set: returning MHD_NO\\\");\\n    return MHD_NO;\\n  }\\n\\n  /* Process externally added connection if any */\\n  if (daemon->have_new)\\n  {\\n    mhd_logf(\\\"daemon->have_new set: calling new_connections_list_process_\\\");\\n    new_connections_list_process_ (daemon);\\n  }\\n\\n  if ( (0 <= poll_listen) &&\\n       (0 != (p[poll_listen].revents & POLLIN)) )\\n  {\\n    mhd_logf(\\\"listen fd at index %d has POLLIN in revents (revents=0x%x): calling MHD_accept_connection\\\", poll_listen, (unsigned int)p[poll_listen].revents);\\n    (void)"
}