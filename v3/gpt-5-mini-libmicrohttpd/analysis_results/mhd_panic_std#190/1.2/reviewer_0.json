{
  "user_message": "An agent A claimed that the following mhd_panic_std code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of mhd_panic_std.\n```c\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe identifier _MHD_NORETURN is a macro that is commonly defined to expand to a compiler-specific noreturn attribute (for example: __attribute__((noreturn)) on GCC/Clang). If _MHD_NORETURN expands to such an implementation-specific attribute (explicitly documented as a compiler extension), this is a violation of MISRA C 2023 Rule 1.2 because a language/compiler extension is being used. (If, instead, _MHD_NORETURN expands to the standard C11 keyword _Noreturn or no extension is used, then there is no Rule 1.2 violation.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s argument is plausible but cannot be confirmed from the snippet alone. MISRA C 2023 Rule 1.2 prohibits use of compiler-specific language extensions. If _MHD_NORETURN expands to a compiler-specific attribute such as __attribute__((noreturn)) (which GCC/Clang document as an extension), that would be a Rule 1.2 violation. However, if _MHD_NORETURN expands to the standard C11 keyword _Noreturn (or to nothing when not supported), then no Rule 1.2 violation occurs. The provided code does not show the definition of _MHD_NORETURN, so you cannot definitively conclude a violation. To settle this: inspect the header where _MHD_NORETURN is defined \u2014 if it expands to a documented compiler extension, report a Rule 1.2 violation; otherwise do not."
}