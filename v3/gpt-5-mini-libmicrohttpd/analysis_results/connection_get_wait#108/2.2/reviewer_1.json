{
  "user_message": "An agent A claimed that the following connection_get_wait code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of connection_get_wait.\n```c\nstatic uint64_t\nconnection_get_wait (struct MHD_Connection *c)\n{\n  const uint64_t now = MHD_monotonic_msec_counter ();\n  const uint64_t since_actv = now - c->last_activity;\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t mseconds_left;\n\n  mhd_assert (0 != timeout);\n  /* Keep the next lines in sync with #connection_check_timedout() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      { /* Jump back is less than 5 seconds, try to recover. */\n        return 100; /* Set wait time to 0.1 seconds */\n      }\n      /* Too large jump back */\n    }\n    return 0; /* Connection has timed out */\n  }\n  else if (since_actv == timeout)\n  {\n    /* Exact match for timeout and time from last activity.\n     * Maybe this is just a precise match or this happens because the timer\n     * resolution is too low.\n     * Set wait time to 0.1 seconds to avoid busy-waiting with low\n     * timer resolution as connection is not timed-out yet. */\n    return 100;\n  }\n  mseconds_left = timeout - since_actv;\n\n  return mseconds_left;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is enabled at runtime (i.e. it expands to code that performs the check) and the program logic guarantees c->connection_timeout_ms (timeout) is never zero (for example it is initialized to a non\u2011zero value and never modified to zero elsewhere), then the assertion will always evaluate true, will always execute, and its removal would not affect program behaviour. In that situation the statement is dead code and thus violates MISRA C 2023 Rule 2.2. Note: if mhd_assert is compiled out (expands to nothing) then it is not executed and does not constitute dead code.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[connection_get_wait] entry | path=before_assert\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n  timeout=1\n  mseconds_left=0\n---\n[connection_get_wait] exit | path=return_left\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=5000\n---\n[connection_get_wait] entry | path=before_assert\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n  timeout=1\n  mseconds_left=0\n---\n[connection_get_wait] exit | path=return_left\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=5000\n---\n[connection_get_wait] entry | path=before_assert\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n  timeout=1\n  mseconds_left=0\n---\n[connection_get_wait] exit | path=return_left\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=5000\n---\n[connection_get_wait] entry | path=before_assert\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n  timeout=1\n  mseconds_left=0\n---\n[connection_get_wait] exit | path=return_left\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=5000\n---\n[connection_get_wait] entry | path=before_assert\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n  timeout=1\n  mseconds_left=0\n---\n[connection_get_wait] exit | path=return_left\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=5000\n---\n[connection_get_wait] entry | path=before_assert\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n  timeout=1\n  mseconds_left=0\n---\n[connection_get_wait] exit | path=return_left\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=5000\n---\n[connection_get_wait] entry | path=before_assert\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n  timeout=1\n  mseconds_left=0\n---\n[connection_get_wait] exit | path=return_left\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=5000\n---\n[connection_get_wait] entry | path=before_assert\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n  timeout=1\n  mseconds_left=0\n---\n[connection_get_wait] exit | path=return_left\n  last_activity=707\n  connection_timeout_ms=5000\n  now=707\n  since_actv=0\n  timeout=5000\n  mseconds_left=5000\n---\n[connection_get_wait] entry | path=before_assert\n  last_activity=711\n  connection_timeout_ms=5000\n  now=711\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n  timeout=1\n  mseconds_left=0\n---\n[connection_get_wait] exit | path=return_left\n  last_activity=711\n  connection_timeout_ms=5000\n  now=711\n  since_actv=0\n  timeout=5000\n  mseconds_left=5000\n---\n[connection_get_wait] entry | path=before_assert\n  last_activity=711\n  connection_timeout_ms=5000\n  now=711\n  since_actv=0\n  timeout=5000\n  mseconds_left=0\n---\n[connection_get_wait] mhd_assert | path=assert_true\n  now=0\n  since_actv=0\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA Rule 2.2 forbids executed operations whose removal would not affect program behaviour. The mhd_assert call is a runtime diagnostic that (a) can change behaviour if the asserted condition ever becomes false (it typically invokes a failure handler/abort), and (b) even when the test always evaluates true it still executes and can affect timing\u2014note 1 to Rule 2.2 explicitly calls out timing as part of behaviour in embedded systems. Also, whether the condition \u201ctimeout is never zero\u201d is a provable, project\u2011wide invariant is a whole\u2011program analysis concern; you cannot assume it without verification. Finally, the assert macro itself may have side effects or expand differently in different build configurations. For these reasons the assertion cannot be classified as dead code just because in some runs the condition holds, so the claimed Rule 2.2 violation is not justified."
}