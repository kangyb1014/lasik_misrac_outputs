{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_str_pct_decode_lenient_n_:\n```c\nsize_t\nMHD_str_pct_decode_lenient_n_ (const char *pct_encoded,\n                               size_t pct_encoded_len,\n                               char *decoded,\n                               size_t buf_size,\n                               bool *broken_encoding)\n{\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n  if (NULL != broken_encoding)\n    *broken_encoding = false;\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (buf_size >= pct_encoded_len)\n  {\n    while (r < pct_encoded_len)\n    {\n      const char chr = pct_encoded[r];\n      if ('%' == chr)\n      {\n        if (2 > pct_encoded_len - r)\n        {\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          decoded[w] = chr; /* Copy \"as is\" */\n        }\n        else\n        {\n          const int h = toxdigitvalue (pct_encoded[++r]);\n          const int l = toxdigitvalue (pct_encoded[++r]);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n          {\n            r -= 2;\n            if (NULL != broken_encoding)\n              *broken_encoding = true;\n            decoded[w] = chr; /* Copy \"as is\" */\n          }\n          else\n          {\n            out =\n              (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                               | ((uint8_t) ((unsigned int) l)));\n            decoded[w] = (char) out;\n          }\n        }\n      }\n      else\n        decoded[w] = chr;\n      ++r;\n      ++w;\n    }\n    return w;\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n  while (r < pct_encoded_len)\n  {\n    const char chr = pct_encoded[r];\n    if (w >= buf_size)\n      return 0;\n    if ('%' == chr)\n    {\n      if (2 > pct_encoded_len - r)\n      {\n        if (NULL != broken_encoding)\n          *broken_encoding = true;\n        decoded[w] = chr; /* Copy \"as is\" */\n      }\n      else\n      {\n        const int h = toxdigitvalue (pct_encoded[++r]);\n        const int l = toxdigitvalue (pct_encoded[++r]);\n        if ((0 > h) || (0 > l))\n        {\n          r -= 2;\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          decoded[w] = chr; /* Copy \"as is\" */\n        }\n        else\n        {\n          unsigned char out;\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          decoded[w] = (char) out;\n        }\n      }\n    }\n    else\n      decoded[w] = chr;\n    ++r;\n    ++w;\n  }\n  return w;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "decoded[w] = chr;",
    "decoded[w] = (char) out;",
    "if (NULL != broken_encoding)\n            *broken_encoding = true;",
    "if (NULL != broken_encoding)\n          *broken_encoding = true;",
    "if (NULL != broken_encoding)\n    *broken_encoding = false;",
    "decoded[w] = chr; /* Copy \"as is\" */",
    "size_t\nMHD_str_pct_decode_lenient_n_ (const char *pct_encoded,\n                               size_t pct_encoded_len,\n                               char *decoded,\n                               size_t buf_size,\n                               bool *broken_encoding)\n{"
  ],
  "explanation": "I selected all locations involving pointer types that might reasonably be const-qualified: the function parameter list (shows the pointer types used) and every place where the non-const pointer parameters are written through (assignments to *broken_encoding and writes to decoded[]). These are the only sites that could be relevant to MISRA C Rule 8.13. Other code fragments do not need investigation for this rule because they either: (a) involve pct_encoded which is already const-qualified (const char *), (b) are not pointer usages (local scalars r, w, chr, out, h, l), (c) involve reading from a const pointer (pct_encoded[r]) rather than writing through a pointer, or (d) are casts and arithmetic that do not change pointer qualification. Therefore no other fragments are relevant to checking whether pointers could be const-qualified."
}