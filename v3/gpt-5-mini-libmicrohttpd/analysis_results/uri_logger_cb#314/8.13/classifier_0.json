{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of uri_logger_cb:\n```c\nstatic void *\nuri_logger_cb (void *cls,\n               const char *uri)\n{\n  struct timeval *tv = malloc (sizeof (struct timeval));\n  (void) cls; /* Unused. Silent compiler warning. */\n  (void) uri; /* Unused. Silent compiler warning. */\n\n  if (NULL != tv)\n    gettimeofday (tv, NULL);\n  return tv;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(void) cls; /* Unused. Silent compiler warning. */\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the statement '(void) cls;' merely suppresses an unused-parameter warning and does not change or declare the pointer's qualification. MISRA C 2023 Rule 8.13 concerns declaring pointers to point to const-qualified types where possible; this fragment does not perform a declaration or alter const qualification. If the intent were to require const-qualified data, the function parameter should be declared as 'const void *cls', but that is a change to the signature, not a violation caused by the cast-to-void idiom."
}