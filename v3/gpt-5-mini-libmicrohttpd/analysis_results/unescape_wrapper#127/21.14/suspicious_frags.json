{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of unescape_wrapper:\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);",
    "return MHD_str_pct_decode_in_place_strict_ (val);"
  ],
  "explanation": "No direct use of memcmp appears anywhere else in the provided code fragment. The only operations that could hide a memcmp comparison of null-terminated strings are calls to the two decoding functions (MHD_str_pct_decode_in_place_strict_ and MHD_str_pct_decode_in_place_lenient_), because they receive a char * (val) that is likely a null-terminated string; their implementations must be inspected to ensure they do not use memcmp to compare null-terminated strings. Other lines (parameter cast to void, numeric comparison of client_discipline, logging with a string literal, and the function signature) do not perform string comparisons via memcmp and therefore do not need investigation for Rule 21.14."
}