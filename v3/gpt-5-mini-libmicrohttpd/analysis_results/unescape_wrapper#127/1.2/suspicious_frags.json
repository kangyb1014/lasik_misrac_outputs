{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of unescape_wrapper:\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I inspected the entire function and found no uses of compiler-specific language extensions that are explicitly documented as extensions. Specifically:\n- No GCC/MSVC/Clang extension keywords are present (for example: __attribute__, __declspec, __builtin_*, __asm__, __extension__, __typeof__, typeof, statement expressions ({ ... }), nested functions, or inline assembler).\n- No nonstandard types or keywords are used: size_t is standard C, and bool refers to the standard C99 _Bool (no compiler-specific boolean keyword is used in the fragment itself).\n- Preprocessor usage (#ifdef HAVE_MESSAGES) and the use of the _() macro (gettext) are standard C preprocessor or library macros, not language extensions.\n- The (void) cls; unused-parameter cast is standard C to suppress warnings.\n- Function and identifier naming (including trailing underscores in function names and MHD_ prefixes) are identifiers, not language extensions.\n\nTherefore there are no code fragments in this snippet that should be investigated for MISRA C 2023 Rule 1.2 (use of language extensions). If additional surrounding code (headers, compiler-specific macros, or implementations of the called functions) is available, those should be checked for extensions, but this function alone contains none."
}