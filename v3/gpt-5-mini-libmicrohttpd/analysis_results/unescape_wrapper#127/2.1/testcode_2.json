{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf connection->daemon->client_discipline has an unsigned type (for example unsigned int, size_t, or an unsigned enum), the expression 0 <= connection->daemon->client_discipline is always true (the signed 0 is converted to the unsigned type), so the return statement is taken unconditionally and the subsequent lenient decode path becomes unreachable. This constitutes a violation of MISRA C 2023 Rule 2.1. (Fixes: use a signed type for client_discipline, compare against a meaningful constant, or change the logic to avoid a tautological condition.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified unescape_wrapper code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1271.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of unescape_wrapper as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of unescape_wrapper:\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n</target_code>\nPlease provide the modified unescape_wrapper code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n\n/* Probe logging helper: append messages to /tmp/logs/1271.txt */\nstatic void\nprobe_log_append (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1271.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  (void) vfprintf (f, fmt, ap);\n  va_end (ap);\n\n  fflush (f);\n  fclose (f);\n}\n\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* Probe: record entry and the value of client_discipline */\n  probe_log_append (\n    \"unescape_wrapper: entry: connection=%p daemon=%p client_discipline=(printed as unsigned long long)\\n\",\n    (void *) connection,\n    (connection != NULL) ? (void *) connection->daemon : NULL);\n\n  /* If daemon and field exist, try to log numeric value for client_discipline. */\n  if (connection != NULL && connection->daemon != NULL)\n  {\n    /* cast to unsigned long long to capture unsigned values uniformly */\n    unsigned long long cd_val = (unsigned long long) connection->daemon->client_discipline;\n    probe_log_append (\"unescape_wrapper: client_discipline value=%llu\\n\", cd_val);\n  }\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n  {\n    /* Strict path: call original function, log result, then return. */\n    size_t strict_res = MHD_str_pct_decode_in_place_strict_ (val);\n    probe_log_append (\"unescape_wrapper: strict path taken. result=%zu\\n\", strict_res);\n    return strict_res;\n  }\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n\n  /* Probe: log lenient path outcome */\n  probe_log_append (\"unescape_wrapper: lenient path taken. result=%zu broken=%d\\n\", res, broken ? 1 : 0);\n\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n    probe_log_append (\"unescape_wrapper: logged user message about broken encoding.\\n\");\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n"
}