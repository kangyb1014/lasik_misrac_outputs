{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) cls;' is an expression statement with no side effects: it is executed but removing it would not change program behaviour (it only suppresses a compiler warning). Therefore it constitutes dead code under the Rule 2.2 definition.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified unescape_wrapper code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1272.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of unescape_wrapper as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of unescape_wrapper:\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n</target_code>\nPlease provide the modified unescape_wrapper code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <limits.h>\n\n/* Forward declarations to allow this file to compile as a translation unit\n   (the real definitions are expected to be linked from the project). */\nstruct MHD_Daemon { int client_discipline; };\nstruct MHD_Connection { struct MHD_Daemon *daemon; };\n\nsize_t MHD_str_pct_decode_in_place_strict_ (char *val);\nsize_t MHD_str_pct_decode_in_place_lenient_ (char *val, bool *broken);\n\n/* Simple probe logger: append human-readable trace lines to\n   /tmp/logs/1272.txt. Kept minimal so it does not affect program logic\n   except for side-effecting diagnostics (file I/O). */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1272.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* Probe: record that the (void) cls; expression statement was reached.\n     Note: we intentionally do not use 'cls' in the probe so that the\n     cast-to-void remains the only usage of the parameter, demonstrating\n     the reported dead-code scenario. */\n  probe_log(\"unescape_wrapper: reached (void) cls; statement\");\n\n  /* Record incoming state relevant to control flow (without using cls). */\n  if (connection == NULL)\n  {\n    probe_log(\"unescape_wrapper: connection == NULL\");\n  }\n  else if (connection->daemon == NULL)\n  {\n    probe_log(\"unescape_wrapper: connection->daemon == NULL\");\n  }\n  else\n  {\n    probe_log(\"unescape_wrapper: daemon->client_discipline = %d\",\n               connection->daemon->client_discipline);\n  }\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n  {\n    /* Call the strict decoder as originally written, but capture and log\n       the result before returning to provide reproducible evidence of the\n       path taken. */\n    res = MHD_str_pct_decode_in_place_strict_ (val);\n    probe_log (\"unescape_wrapper: took strict branch, res = %zu\", res);\n    return res;\n  }\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n  probe_log (\"unescape_wrapper: took lenient branch, broken = %s, res = %zu\",\n             broken ? \"true\" : \"false\", res);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n"
}