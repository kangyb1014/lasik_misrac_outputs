{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'cls' is declared as 'void *cls' but is not used or modified in the function (it's only cast to void to suppress an unused-parameter warning). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible, so the parameter should be declared 'const void *cls' (or removed) rather than 'void *cls'. The '(void) cls;' cast only suppresses the warning and does not address the const-qualification requirement.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified unescape_wrapper code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of unescape_wrapper as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of unescape_wrapper:\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n</target_code>\nPlease provide the modified unescape_wrapper code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <sys/stat.h>\n\n/* Probe helpers: write logs to /tmp/logs/1273.txt. */\nstatic void\nprobe_ensure_log_dir (void)\n{\n  /* Try to create the directory; ignore errors (e.g. already exists). */\n  (void) mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void\nprobe_log (const char *stage,\n           struct MHD_Connection *connection,\n           char *val,\n           size_t res,\n           bool broken,\n           const char *note)\n{\n  FILE *f;\n\n  probe_ensure_log_dir ();\n  f = fopen (\"/tmp/logs/1273.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf (f, \"[unescape_wrapper] stage=%s note=%s\\n\", stage, note ? note : \"\");\n  fprintf (f, \"  connection=%p\\n\", (void *) connection);\n  if (connection)\n  {\n    fprintf (f, \"  daemon=%p\\n\", (void *) connection->daemon);\n    if (connection->daemon)\n      fprintf (f, \"  client_discipline=%d\\n\",\n               connection->daemon->client_discipline);\n  }\n  fprintf (f, \"  val=%p\\n\", (void *) val);\n  fprintf (f, \"  broken=%d res=%zu\\n\", broken ? 1 : 0, res);\n  fprintf (f, \"\\n\");\n\n  fclose (f);\n}\n\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n\n  /* Preserve original suppression of unused-parameter warning. */\n  (void) cls; /* Mute compiler warning. */\n\n  /* Log entry and explicitly note that 'cls' is not used (cast to void only).\n     Do not reference 'cls' here to keep the original unused-parameter scenario. */\n  probe_log (\"entry\", connection, val, 0u, false, \"cls is unused (cast to void)\");\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n  {\n    /* Call the strict decoder, capture result so we can log it, then return. */\n    res = MHD_str_pct_decode_in_place_strict_ (val);\n    probe_log (\"strict-path\", connection, val, res, false, \"took strict path\");\n    return res;\n  }\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n  probe_log (\"exit\", connection, val, res, broken, \"returning from unescape_wrapper\");\n  return res;\n}"
}