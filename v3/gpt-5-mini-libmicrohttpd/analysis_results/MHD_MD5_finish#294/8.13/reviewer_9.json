{
  "user_message": "An agent A claimed that the following MHD_MD5_finish code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_MD5_finish.\n```c\nvoid\nMHD_MD5_finish (struct Md5Ctx *ctx,\n                uint8_t digest[MD5_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  /* Memorise the number of processed bits.\n     The padding and other data added here during the postprocessing must\n     not change the amount of hashed data. */\n  num_bits = ctx->count << 3;\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n\n  /* Input data must be padded with a single bit \"1\", then with zeros and\n     the finally the length of data in bits must be added as the final bytes\n     of the last block.\n     See RFC 1321, Clauses 3.1 and 3.2 (steps 1 and 2). */\n  /* Data is always processed in form of bytes (not by individual bits),\n     therefore position of the first padding bit in byte is always\n     predefined (0x80). */\n  /* Buffer always have space for one byte at least (as full buffers are\n     processed immediately). */\n  ((uint8_t *) ctx->buffer)[bytes_have++] = 0x80;\n\n  if (MD5_BLOCK_SIZE - bytes_have < MD5_SIZE_OF_LEN_ADD)\n  {   /* No space in the current block to put the total length of message.\n         Pad the current block with zeros and process it. */\n    if (bytes_have < MD5_BLOCK_SIZE)\n      memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n              MD5_BLOCK_SIZE - bytes_have);\n    /* Process the full block. */\n    md5_transform (ctx->H, ctx->buffer);\n    /* Start the new block. */\n    bytes_have = 0;\n  }\n\n  /* Pad the rest of the buffer with zeros. */\n  memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n          MD5_BLOCK_SIZE - MD5_SIZE_OF_LEN_ADD - bytes_have);\n  /* Put the number of bits in processed data as little-endian value.\n     See RFC 1321, clauses 2 and 3.2 (step 2). */\n  _MHD_PUT_64BIT_LE_SAFE (ctx->buffer + MD5_BLOCK_SIZE_WORDS - 2,\n                          num_bits);\n  /* Process the full final block. */\n  md5_transform (ctx->H, ctx->buffer);\n\n  /* Put in LE mode the hash as the final digest.\n     See RFC 1321, clauses 2 and 3.5 (step 5). */\n#ifndef _MHD_PUT_32BIT_LE_UNALIGNED\n  if (1\n#ifndef MHD_FAVOR_SMALL_CODE\n      && (0 != ((uintptr_t) digest) % _MHD_UINT32_ALIGN)\n#endif /* MHD_FAVOR_SMALL_CODE */\n      )\n  {\n    /* If storing of the final result requires aligned address and\n       the destination address is not aligned or compact code is used,\n       store the final digest in aligned temporary buffer first, then\n       copy it to the destination. */\n    uint32_t alig_dgst[MD5_DIGEST_SIZE_WORDS];\n    _MHD_PUT_32BIT_LE (alig_dgst + 0, ctx->H[0]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 1, ctx->H[1]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 2, ctx->H[2]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 3, ctx->H[3]);\n    /* Copy result to the unaligned destination address. */\n    memcpy (digest, alig_dgst, MD5_DIGEST_SIZE);\n  }\n#ifndef MHD_FAVOR_SMALL_CODE\n  else /* Combined with the next 'if' */\n#endif /* MHD_FAVOR_SMALL_CODE */\n#endif /* ! _MHD_PUT_32BIT_LE_UNALIGNED */\n#if ! defined(MHD_FAVOR_SMALL_CODE) || defined(_MHD_PUT_32BIT_LE_UNALIGNED)\n  if (1)\n  {\n    /* Use cast to (void*) here to mute compiler alignment warnings.\n     * Compilers are not smart enough to see that alignment has been checked. */\n    _MHD_PUT_32BIT_LE ((void *) (digest + 0 * MD5_BYTES_IN_WORD), ctx->H[0]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 1 * MD5_BYTES_IN_WORD), ctx->H[1]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 2 * MD5_BYTES_IN_WORD), ctx->H[2]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 3 * MD5_BYTES_IN_WORD), ctx->H[3]);\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE || _MHD_PUT_32BIT_LE_UNALIGNED */\n\n  /* Erase potentially sensitive data. */\n  memset (ctx, 0, sizeof(struct Md5Ctx));\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nPotential violation: md5_transform is called with ctx->buffer via a non-const pointer. If the md5_transform prototype accepts a non-const pointer (e.g. void md5_transform(uint32_t H[], uint32_t block[])) but does not modify the buffer contents, this violates MISRA C 2023 Rule 8.13 because the pointer parameter should be const-qualified (e.g. const uint32_t block[]). If, however, md5_transform intentionally modifies the buffer (for example to perform in-place endian conversion), then a non-const parameter is appropriate and there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n------------------------------\n2025-08-26 09:55:42 - before md5_transform #2\nnum_bits=224, bytes_have=29\nH[0]=0x67452301 H[1]=0xefcdab89 H[2]=0x98badcfe H[3]=0x10325476\nbuffer (first 64 bytes):\n  0000: 31 32 33 34 35 36 37 38 39 30 21 40 7e 25 26 24 \n  0016: 40 23 7b 7d 5b 5d 5c 2f 21 3f 60 2e 80 00 00 00 \n  0032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0048: 00 00 00 00 00 00 00 00 e0 00 00 00 00 00 00 00 \n------------------------------\n2025-08-26 09:55:42 - after md5_transform #2\nnum_bits=224, bytes_have=29\nH[0]=0xe5c2681c H[1]=0x5fc9631f H[2]=0x201fab17 H[3]=0x5739868b\nbuffer (first 64 bytes):\n  0000: 31 32 33 34 35 36 37 38 39 30 21 40 7e 25 26 24 \n  0016: 40 23 7b 7d 5b 5d 5c 2f 21 3f 60 2e 80 00 00 00 \n  0032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0048: 00 00 00 00 00 00 00 00 e0 00 00 00 00 00 00 00 \n---- md5_transform #2: compare before/after md5_transform ----\nchanged=0 (0=no,1=yes)\n------------------------------\n2025-08-26 09:55:42 - before md5_transform #2\nnum_bits=112, bytes_have=15\nH[0]=0x67452301 H[1]=0xefcdab89 H[2]=0x98badcfe H[3]=0x10325476\nbuffer (first 64 bytes):\n  0000: 53 69 6d 70 6c 65 20 73 74 72 69 6e 67 2e 80 00 \n  0016: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0048: 00 00 00 00 00 00 00 00 70 00 00 00 00 00 00 00 \n------------------------------\n2025-08-26 09:55:42 - after md5_transform #2\nnum_bits=112, bytes_have=15\nH[0]=0xad7c2bf1 H[1]=0xdefe41a0 H[2]=0x6316684e H[3]=0x785d60b4\nbuffer (first 64 bytes):\n  0000: 53 69 6d 70 6c 65 20 73 74 72 69 6e 67 2e 80 00 \n  0016: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0048: 00 00 00 00 00 00 00 00 70 00 00 00 00 00 00 00 \n---- md5_transform #2: compare before/after md5_transform ----\nchanged=0 (0=no,1=yes)\n------------------------------\n2025-08-26 09:55:42 - before md5_transform #2\nnum_bits=208, bytes_have=27\nH[0]=0x67452301 H[1]=0xefcdab89 H[2]=0x98badcfe H[3]=0x10325476\nbuffer (first 64 bytes):\n  0000: 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70 \n  0016: 71 72 73 74 75 76 77 78 79 7a 80 00 00 00 00 00 \n  0032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0048: 00 00 00 00 00 00 00 00 d0 00 00 00 00 00 00 00 \n------------------------------\n2025-08-26 09:55:42 - after md5_transform #2\nnum_bits=208, bytes_have=27\nH[0]=0xd7d3fcc3 H[1]=0x00e49261 H[2]=0x6c49fb7d H[3]=0x3be167ca\nbuffer (first 64 bytes):\n  0000: 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70 \n  0016: 71 72 73 74 75 76 77 78 79 7a 80 00 00 00 00 00 \n  0032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0048: 00 00 00 00 00 00 00 00 d0 00 00 00 00 00 00 00 \n---- md5_transform #2: compare before/after md5_transform ----\nchanged=0 (0=no,1=yes)\n------------------------------\n2025-08-26 09:55:42 - before md5_transform #2\nnum_bits=208, bytes_have=27\nH[0]=0x67452301 H[1]=0xefcdab89 H[2]=0x98badcfe H[3]=0x10325476\nbuffer (first 64 bytes):\n  0000: 7a 79 78 77 76 75 74 73 72 71 70 6f 6e 4d 4c 4b \n  0016: 4a 49 48 47 46 45 44 43 42 41 80 00 00 00 00 00 \n  0032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0048: 00 00 00 00 00 00 00 00 d0 00 00 00 00 00 00 00 \n------------------------------\n2025-08-26 09:55:42 - after md5_transform #2\nnum_bits=208, bytes_have=27\nH[0]=0x6b3a6105 H[1]=0x453a75de H[2]=0xb081a891 H[3]=0x0ee2e2a7\nbuffer (first 64 bytes):\n  0000: 7a 79 78 77 76 75 74 73 72 71 70 6f 6e 4d 4c 4b \n  0016: 4a 49 48 47 46 45 44 43 42 41 80 00 00 00 00 00 \n  0032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n  0048: 00 00 00 00 00 00 00 00 d0 00 00 00 00 00 00 00 \n---- md5_transform #2: compare before/after md5_transform ----\nchanged=0 (0=no,1=yes)\n------------------------------\n2025-08-26 09:55:42 - before md5_transform #2\nnum_bits=832, bytes_have=41\nH[0]=0x41ceff71 H[1]=0xaca22408 H[2]=0x10ccbd64 H[3]=0x8bc52aa5\nbuffer (first 64 bytes):\n  0000: 6d 6e 6f 70 71 72 73 74 75 76 77 78 79 7a 7a 79 \n  0016: 78 77 76 75 74 73 72 71 70 6f 6e 4d 4c 4b 4a 49 \n  0032: 48 47 46 45 44 43 42 41 80 00 00 00 00 00 00 00 \n  0048: 00 00 0\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is essentially correct in the presented scenario. MISRA C 2023 Rule 8.13 requires pointers to be const-qualified wherever possible. In this code MHD_MD5_finish passes ctx->buffer to md5_transform. The execution log shows the buffer contents before and after md5_transform are identical (changed=0) in multiple runs, which indicates md5_transform only reads the block and does not modify it. If md5_transform is declared like\n  void md5_transform(uint32_t H[], uint32_t block[])\nand it does not (and is not intended to) modify the block, then that non-const parameter violates Rule 8.13 \u2014 the prototype should use a const-qualified parameter (for example const uint32_t block[]).\n\nHowever, whether there is an actual MISRA violation depends on md5_transform's intended behavior and declaration. If md5_transform legitimately modifies the block (e.g. performs in-place byte/endianness conversion) or relies on a non-const parameter for other reasons, then the current non-const parameter is appropriate and there is no violation. Also practical constraints (API compatibility, casts, alignment helpers) can affect the decision, but purely from the code and the provided logs, the agent's claim that a violation exists is correct unless a documented reason for a non-const parameter exists.\n\nRecommended fix: change the md5_transform prototype to take a const pointer for the block parameter (and adjust any callers) if the function only reads the buffer."
}