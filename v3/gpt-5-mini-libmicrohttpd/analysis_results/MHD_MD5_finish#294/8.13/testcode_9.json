{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: md5_transform is called with ctx->buffer via a non-const pointer. If the md5_transform prototype accepts a non-const pointer (e.g. void md5_transform(uint32_t H[], uint32_t block[])) but does not modify the buffer contents, this violates MISRA C 2023 Rule 8.13 because the pointer parameter should be const-qualified (e.g. const uint32_t block[]). If, however, md5_transform intentionally modifies the buffer (for example to perform in-place endian conversion), then a non-const parameter is appropriate and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_finish code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2943.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_MD5_finish as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_finish:\n```c\nvoid\nMHD_MD5_finish (struct Md5Ctx *ctx,\n                uint8_t digest[MD5_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  /* Memorise the number of processed bits.\n     The padding and other data added here during the postprocessing must\n     not change the amount of hashed data. */\n  num_bits = ctx->count << 3;\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n\n  /* Input data must be padded with a single bit \"1\", then with zeros and\n     the finally the length of data in bits must be added as the final bytes\n     of the last block.\n     See RFC 1321, Clauses 3.1 and 3.2 (steps 1 and 2). */\n  /* Data is always processed in form of bytes (not by individual bits),\n     therefore position of the first padding bit in byte is always\n     predefined (0x80). */\n  /* Buffer always have space for one byte at least (as full buffers are\n     processed immediately). */\n  ((uint8_t *) ctx->buffer)[bytes_have++] = 0x80;\n\n  if (MD5_BLOCK_SIZE - bytes_have < MD5_SIZE_OF_LEN_ADD)\n  {   /* No space in the current block to put the total length of message.\n         Pad the current block with zeros and process it. */\n    if (bytes_have < MD5_BLOCK_SIZE)\n      memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n              MD5_BLOCK_SIZE - bytes_have);\n    /* Process the full block. */\n    md5_transform (ctx->H, ctx->buffer);\n    /* Start the new block. */\n    bytes_have = 0;\n  }\n\n  /* Pad the rest of the buffer with zeros. */\n  memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n          MD5_BLOCK_SIZE - MD5_SIZE_OF_LEN_ADD - bytes_have);\n  /* Put the number of bits in processed data as little-endian value.\n     See RFC 1321, clauses 2 and 3.2 (step 2). */\n  _MHD_PUT_64BIT_LE_SAFE (ctx->buffer + MD5_BLOCK_SIZE_WORDS - 2,\n                          num_bits);\n  /* Process the full final block. */\n  md5_transform (ctx->H, ctx->buffer);\n\n  /* Put in LE mode the hash as the final digest.\n     See RFC 1321, clauses 2 and 3.5 (step 5). */\n#ifndef _MHD_PUT_32BIT_LE_UNALIGNED\n  if (1\n#ifndef MHD_FAVOR_SMALL_CODE\n      && (0 != ((uintptr_t) digest) % _MHD_UINT32_ALIGN)\n#endif /* MHD_FAVOR_SMALL_CODE */\n      )\n  {\n    /* If storing of the final result requires aligned address and\n       the destination address is not aligned or compact code is used,\n       store the final digest in aligned temporary buffer first, then\n       copy it to the destination. */\n    uint32_t alig_dgst[MD5_DIGEST_SIZE_WORDS];\n    _MHD_PUT_32BIT_LE (alig_dgst + 0, ctx->H[0]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 1, ctx->H[1]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 2, ctx->H[2]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 3, ctx->H[3]);\n    /* Copy result to the unaligned destination address. */\n    memcpy (digest, alig_dgst, MD5_DIGEST_SIZE);\n  }\n#ifndef MHD_FAVOR_SMALL_CODE\n  else /* Combined with the next 'if' */\n#endif /* MHD_FAVOR_SMALL_CODE */\n#endif /* ! _MHD_PUT_32BIT_LE_UNALIGNED */\n#if ! defined(MHD_FAVOR_SMALL_CODE) || defined(_MHD_PUT_32BIT_LE_UNALIGNED)\n  if (1)\n  {\n    /* Use cast to (void*) here to mute compiler alignment warnings.\n     * Compilers are not smart enough to see that alignment has been checked. */\n    _MHD_PUT_32BIT_LE ((void *) (digest + 0 * MD5_BYTES_IN_WORD), ctx->H[0]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 1 * MD5_BYTES_IN_WORD), ctx->H[1]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 2 * MD5_BYTES_IN_WORD), ctx->H[2]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 3 * MD5_BYTES_IN_WORD), ctx->H[3]);\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE || _MHD_PUT_32BIT_LE_UNALIGNED */\n\n  /* Erase potentially sensitive data. */\n  memset (ctx, 0, sizeof(struct Md5Ctx));\n}\n```\n</target_code>\nPlease provide the modified MHD_MD5_finish code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <inttypes.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper functions to log state and buffer snapshots for debugging\n * the potential MISRA Rule 8.13 violation related to md5_transform\n * (whether it modifies ctx->buffer). Logs are appended to\n * /tmp/logs/2943.txt. */\n\nstatic void ensure_log_dir(void)\n{\n  /* Try to create the directory if it does not exist. Ignore errors. */\n  (void) mkdir(\"/tmp/logs\", 0700);\n}\n\nstatic FILE *open_log_file(void)\n{\n  FILE *f;\n  ensure_log_dir();\n  f = fopen(\"/tmp/logs/2943.txt\", \"a\");\n  return f;\n}\n\nstatic void print_time(FILE *f)\n{\n  time_t t = time(NULL);\n  if (t == (time_t) -1)\n  {\n    fprintf(f, \"[time:unknown]\");\n  }\n  else\n  {\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n      char buf[64];\n      if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        fprintf(f, \"%s\", buf);\n      else\n        fprintf(f, \"[time:fmt_err]\");\n    }\n    else\n    {\n      fprintf(f, \"[time:localtime_err]\");\n    }\n  }\n}\n\nstatic void log_hex_bytes(FILE *f, const uint8_t *p, size_t len)\n{\n  size_t i;\n  for (i = 0; i < len; ++i)\n  {\n    if (i % 16 == 0)\n      fprintf(f, \"\\n  %04zu: \", i);\n    fprintf(f, \"%02x \", p[i]);\n  }\n  fprintf(f, \"\\n\");\n}\n\n/* Probe function that logs the context H values and a snapshot of ctx->buffer. */\nstatic void probe_log_snapshot(const char *tag, struct Md5Ctx *ctx,\n                               uint64_t num_bits, unsigned int bytes_have)\n{\n  FILE *f = open_log_file();\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"------------------------------\\n\");\n  print_time(f);\n  fprintf(f, \" - %s\\n\", tag);\n  fprintf(f, \"num_bits=%\" PRIu64 \", bytes_have=%u\\n\", num_bits, bytes_have);\n\n  /* Log H[] state if present (as used elsewhere in the function). */\n  /* Accessing ctx->H[0..3] as uint32_t - matches use in the original code. */\n  fprintf(f, \"H[0]=0x%08\" PRIx32 \" H[1]=0x%08\" PRIx32 \" H[2]=0x%08\" PRIx32 \" H[3]=0x%08\" PRIx32 \"\\n\",\n          ctx->H[0], ctx->H[1], ctx->H[2], ctx->H[3]);\n\n  /* Snapshot MD5_BLOCK_SIZE bytes of the buffer as seen by the original code. */\n  fprintf(f, \"buffer (first %d bytes):\", MD5_BLOCK_SIZE);\n  log_hex_bytes(f, (const uint8_t *) ctx->buffer, MD5_BLOCK_SIZE);\n  fclose(f);\n}\n\nstatic void probe_log_compare(const char *tag, const uint8_t *before,\n                              const uint8_t *after, size_t len)\n{\n  FILE *f = open_log_file();\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"---- %s: compare before/after md5_transform ----\\n\", tag);\n  size_t i;\n  int changed = 0;\n  for (i = 0; i < len; ++i)\n  {\n    if (before[i] != after[i])\n    {\n      changed = 1;\n      break;\n    }\n  }\n  fprintf(f, \"changed=%d (0=no,1=yes)\\n\", changed);\n  if (changed)\n  {\n    fprintf(f, \"first differing offset=%zu, before=0x%02x, after=0x%02x\\n\",\n            i, before[i], after[i]);\n    fprintf(f, \"buffer before:\");\n    log_hex_bytes(f, before, len);\n    fprintf(f, \"buffer after:\");\n    log_hex_bytes(f, after, len);\n  }\n  fclose(f);\n}\n\n/* Modified MHD_MD5_finish with inserted probes. Original logic preserved. */\nvoid\nMHD_MD5_finish (struct Md5Ctx *ctx,\n                uint8_t digest[MD5_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  /* Memorise the number of processed bits.\n     The padding and other data added here during the postprocessing must\n     not change the amount of hashed data. */\n  num_bits = ctx->count << 3;\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n\n  /* Input data must be padded with a single bit \"1\", then with zeros and\n     the finally the length of data in bits must be added as the final bytes\n     of the last block.\n     See RFC 1321, Clauses 3.1 and 3.2 (steps 1 and 2). */\n  /* Data is always processed in form of bytes (not by individual bits),\n     therefore position of the first padding bit in byte is always\n     predefined (0x80). */\n  /* Buffer always have space for one byte at least (as full buffers are\n     processed immediately). */\n  ((uint8_t *) ctx->buffer)[bytes_have++] = 0x80;\n\n  if (MD5_BLOCK_SIZE - bytes_have < MD5_SIZE_OF_LEN_ADD)\n  {   /* No space in the current block to put the total length of message.\n         Pad the current block with zeros and process it. */\n    if (bytes_have < MD5_BLOCK_SIZE)\n      memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n              MD5_BLOCK_SIZE - bytes_have);\n    /* Process the full block. */\n\n    /* Probe: snapshot buffer before first md5_transform */\n    {\n      uint8_t before_snapshot[MD5_BLOCK_SIZE];\n      uint8_t after_snapshot[MD5_BLOCK_SIZE];\n      memcpy(before_snapshot, (uint8_t *) ctx->buffer, MD5_BLOCK_SIZE);\n      probe_log_snapshot(\"before md5_transform #1\", ctx, num_bits, bytes_have);\n\n      md5_transform (ctx->H, ctx->buffer);\n\n      memcpy(after_snapshot, (uint8_t *) ctx->buffer, MD5_BLOCK_SIZE);\n      probe_log_snapshot(\"after md5_transform #1\", ctx, num_bits, bytes_have);\n      probe_log_compare(\"md5_transform #1\", before_snapshot, after_snapshot, MD5_BLOCK_SIZE);\n    }\n\n    /* Start the new block. */\n    bytes_have = 0;\n  }\n\n  /* Pad the rest of the buffer with zeros. */\n  memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n          MD5_BLOCK_SIZE - MD5_SIZE_OF_LEN_ADD - bytes_have);\n  /* Put the number of bits in processed data as little-endian value.\n     See RFC 1321, clauses 2 and 3.2 (step 2). */\n  _MHD_PUT_64BIT_LE_SAFE (ctx->buffer + MD5_BLOCK_SIZE_WORDS - 2,\n                          num_bits);\n  /* Process the full final block. */\n\n  /* Probe: snapshot buffer before second md5_transform */\n  {\n    uint8_t before_snapshot2[MD5_BLOCK_SIZE];\n    uint8_t after_snapshot2[MD5_BLOCK_SIZE];\n    memcpy(before_snapshot2, (uint8_t *) ctx->buffer, MD5_BLOCK_SIZE);\n    probe_log_snapshot(\"before md5_transform #2\", ctx, num_bits, bytes_have);\n\n    md5_transform (ctx->H, ctx->buffer);\n\n    memcpy(after_snapshot2, (uint8_t *) ctx->buffer, MD5_BLOCK_SIZE);\n    probe_log_snapshot(\"after md5_transform #2\", ctx, num_bits, bytes_have);\n    probe_log_compare(\"md5_transform #2\", before_snapshot2, after_snapshot2, MD5_BLOCK_SIZE);\n  }\n\n  /* Put in LE mode the hash as the final digest.\n     See RFC 1321, clauses 2 and 3.5 (step 5). */\n#ifndef _MHD_PUT_32BIT_LE_UNALIGNED\n  if (1\n#ifndef MHD_FAVOR_SMALL_CODE\n      && (0 != ((uintptr_t) digest) % _MHD_UINT32_ALIGN)\n#endif /* MHD_FAVOR_SMALL_CODE */\n      )\n  {\n    /* If storing of the final result requires aligned address and\n       the destination address is not aligned or compact code is used,\n       store the final digest in aligned temporary buffer first, then\n       copy it to the destination. */\n    uint32_t alig_dgst[MD5_DIGEST_SIZE_WORDS];\n    _MHD_PUT_32BIT_LE (alig_dgst + 0, ctx->H[0]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 1, ctx->H[1]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 2, ctx->H[2]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 3, ctx->H[3]);\n    /* Copy result to the unaligned destination address. */\n    memcpy (digest, alig_dgst, MD5_DIGEST_SIZE);\n  }\n#ifndef MHD_FAVOR_SMALL_CODE\n  else /* Combined with the next 'if' */\n#endif /* MHD_FAVOR_SMALL_CODE */\n#endif /* ! _MHD_PUT_32BIT_LE_UNALIGNED */\n#if ! defined(MHD_FAVOR_SMALL_CODE) || defined(_MHD_PUT_32BIT_LE_UNALIGNED)\n  if (1)\n  {\n    /* Use cast to (void*) here to mute compiler alignment warnings.\n     * Compilers are not smart enough to see that alignment has been checked. */\n    _MHD_PUT_32BIT_LE ((void *) (digest + 0 * MD5_BYTES_IN_WORD), ctx->H[0]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 1 * MD5_BYTES_IN_WORD), ctx->H[1]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 2 * MD5_BYTES_IN_WORD), ctx->H[2]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 3 * MD5_BYTES_IN_WORD), ctx->H[3]);\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE || _MHD_PUT_32BIT_LE_UNALIGNED */\n\n  /* Erase potentially sensitive data. */\n  memset (ctx, 0, sizeof(struct Md5Ctx));\n}\n"
}