{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcmp(nn->nonce, new_nonce, new_nonce_len) can read new_nonce_len bytes from both nn->nonce and new_nonce. The function only contains mhd_assert() checks that new_nonce_len <= NONCE_STD_LEN(MAX_DIGEST) and other compile-time/runtime asserts; there is no unconditional runtime check that new_nonce_len <= sizeof(nn->nonce) or that new_nonce actually points to an object at least new_nonce_len bytes long. If mhd_assert is disabled or new_nonce_len is maliciously large, memcmp may access beyond the bounds of nn->nonce or beyond the buffer pointed to by new_nonce (e.g. new_nonce_len > sizeof(nn->nonce) or new_nonce shorter than new_nonce_len), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_slot_available code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2919.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_slot_available as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_slot_available:\n```c\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n    return true; /* The slot is empty */\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n    return true; /* Wrong nonce format in the slot */\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n    return true;\n\n  return false;\n}\n```\n</target_code>\nPlease provide the modified is_slot_available code.\n",
  "test_code": "static void\nmhd_probe_log_state (const struct MHD_NonceNc *const nn,\n                     const char *const new_nonce,\n                     size_t new_nonce_len,\n                     const char *const event,\n                     int memcmp_result)\n{\n  /* Try to append a single-line record. If logging cannot be performed\n   * (e.g. fopen fails), do not change control flow. */\n  FILE *f = fopen(\"/tmp/logs/2919.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log pointer values and integer state only. Do not dereference new_nonce\n   * beyond what the original code does; only read nn->nonce[0] which is\n   * guaranteed to be part of the structure. */\n  unsigned int first_byte = (unsigned int) nn->nonce[0];\n  size_t nn_nonce_size = sizeof (nn->nonce);\n  unsigned long long nc_val = (unsigned long long) nn->nc;\n\n  fprintf (f,\n           \"[is_slot_available] event=%s nn=%p new_nonce=%p new_nonce_len=%zu \"\n           \"nn->nonce_size=%zu nn->nc=%llu nn->nonce[0]=%u memcmp_res=%d\\n\",\n           event,\n           (void *) nn,\n           (void *) new_nonce,\n           new_nonce_len,\n           nn_nonce_size,\n           nc_val,\n           first_byte,\n           memcmp_result);\n\n  fflush (f);\n  fclose (f);\n}\n\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n\n  /* Log entry state */\n  mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"entry\", -1);\n\n  if (0 == nn->nonce[0])\n  {\n    mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"slot_empty\", -1);\n    return true; /* The slot is empty */\n  }\n\n  /* Before memcmp: log potential size mismatch so that post-mortem can\n   * identify cases where memcmp might read beyond nn->nonce. Note: we do\n   * not change behavior based on this check; it is only for diagnostics. */\n  if (new_nonce_len > sizeof (nn->nonce))\n  {\n    mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"before_memcmp_len_exceeds_slot\", -1);\n  }\n  else\n  {\n    mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"before_memcmp_ok_len\", -1);\n  }\n\n  {\n    /* Preserve original logic: perform the same memcmp as in the target\n     * code. Capture the result immediately after for logging. Do not\n     * attempt to read from new_nonce here other than passing it to memcmp\n     * in the same way the original code did. */\n    int cmp_res = memcmp (nn->nonce, new_nonce, new_nonce_len);\n    mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"after_memcmp\", cmp_res);\n\n    if (0 == cmp_res)\n    {\n      /* The slot has the same nonce already. This nonce cannot be registered\n       * again as it would just clear 'nc' usage history. */\n      mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"same_nonce_return_false\", cmp_res);\n      return false;\n    }\n  }\n\n  if (0 != nn->nc)\n  {\n    mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"client_used_nonce_return_true\", -1);\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n  }\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof (nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof (nn->nonce) - 1])\n  {\n    mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"wrong_nonce_format_return_true\", -1);\n    return true; /* Wrong nonce format in the slot */\n  }\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n  {\n    mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"invalid_timestamp_return_true\", -1);\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n  }\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n  {\n    mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"reuse_timeout_return_true\", -1);\n    return true;\n  }\n\n  mhd_probe_log_state (nn, new_nonce, new_nonce_len, \"return_false\", -1);\n  return false;\n}\n"
}