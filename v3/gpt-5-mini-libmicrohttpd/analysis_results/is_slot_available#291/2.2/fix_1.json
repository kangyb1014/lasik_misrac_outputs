{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe helper: append a single log entry to the requested logfile. */\nstatic void\nprobe_log_append (const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/2912.txt\", \"a\");\n  if (f)\n  {\n    fprintf (f, \"%s\\n\", msg);\n    fclose (f);\n  }\n}\n\n/* Probe helper: log a formatted state snapshot. Keep it simple to avoid\n * introducing side-effects. */\nstatic void\nprobe_log_state (const char *event,\n                 const void *nn_ptr,\n                 int first_nonce_byte,\n                 unsigned long nc_value,\n                 size_t new_nonce_len,\n                 size_t nonce_std_len_val,\n                 size_t max_digest_nonce_len_val,\n                 int last_nonce_byte,\n                 int timestamp_valid,\n                 uint64_t timestamp,\n                 uint64_t now)\n{\n  FILE *f = fopen(\"/tmp/logs/2912.txt\", \"a\");\n  if (! f)\n    return;\n\n  fprintf (f, \"EVENT: %s\\n\", event);\n  fprintf (f, \"  nn pointer: %p\\n\", nn_ptr);\n  fprintf (f, \"  nn->nonce[0]: %d\\n\", first_nonce_byte);\n  fprintf (f, \"  nn->nc: %lu\\n\", (unsigned long) nc_value);\n  fprintf (f, \"  new_nonce_len: %zu\\n\", new_nonce_len);\n  fprintf (f, \"  NONCE_STD_LEN(MAX_DIGEST): %zu\\n\", nonce_std_len_val);\n  fprintf (f, \"  MAX_DIGEST_NONCE_LENGTH: %zu\\n\", max_digest_nonce_len_val);\n  fprintf (f, \"  nn->nonce[last]: %d\\n\", last_nonce_byte);\n  fprintf (f, \"  timestamp_valid: %d\\n\", timestamp_valid);\n  fprintf (f, \"  timestamp: %\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nFailed to parse the test code.\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of is_slot_available as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe helper: append a single log entry to the requested logfile. */\nstatic void\nprobe_log_append (const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/2912.txt\", \"a\");\n  if (f)\n  {\n    fprintf (f, \"%s\\n\", msg);\n    fclose (f);\n  }\n}\n\n/* Probe helper: log a formatted state snapshot. Keep it simple to avoid\n * introducing side-effects. */\nstatic void\nprobe_log_state (const char *event,\n                 const void *nn_ptr,\n                 int first_nonce_byte,\n                 unsigned long nc_value,\n                 size_t new_nonce_len,\n                 size_t nonce_std_len_val,\n                 size_t max_digest_nonce_len_val,\n                 int last_nonce_byte,\n                 int timestamp_valid,\n                 uint64_t timestamp,\n                 uint64_t now)\n{\n  FILE *f = fopen(\"/tmp/logs/2912.txt\", \"a\");\n  if (! f)\n    return;\n\n  fprintf (f, \"EVENT: %s\\n\", event);\n  fprintf (f, \"  nn pointer: %p\\n\", nn_ptr);\n  fprintf (f, \"  nn->nonce[0]: %d\\n\", first_nonce_byte);\n  fprintf (f, \"  nn->nc: %lu\\n\", (unsigned long) nc_value);\n  fprintf (f, \"  new_nonce_len: %zu\\n\", new_nonce_len);\n  fprintf (f, \"  NONCE_STD_LEN(MAX_DIGEST): %zu\\n\", nonce_std_len_val);\n  fprintf (f, \"  MAX_DIGEST_NONCE_LENGTH: %zu\\n\", max_digest_nonce_len_val);\n  fprintf (f, \"  nn->nonce[last]: %d\\n\", last_nonce_byte);\n  fprintf (f, \"  timestamp_valid: %d\\n\", timestamp_valid);\n  /* Use unsigned long long and %%llu to print 64-bit values portably */\n  fprintf (f, \"  timestamp: %llu\\n\", (unsigned long long) timestamp);\n  fprintf (f, \"  now: %llu\\n\", (unsigned long long) now);\n  fprintf (f, \"\\n\");\n\n  fclose (f);\n}\n",
  "explanation": "The original source was truncated in the middle of a fprintf, causing a syntax error. I completed the probe_log_state function by finishing the fprintf calls for the timestamp and now values (casting to unsigned long long and using %llu), added a blank line, and ensured the file is closed. No other logic was changed and no main or macros were added."
}