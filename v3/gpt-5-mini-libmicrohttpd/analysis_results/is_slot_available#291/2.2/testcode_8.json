{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert(timestamp_valid); call is likely dead code when assertions are compiled out (e.g. mhd_assert defined as ((void)0) or similar). The subsequent runtime check if (!timestamp_valid) return true; already enforces the required behaviour, so removing the assert does not change program behaviour in normal (release) builds. Therefore this statement constitutes dead code under Rule 2.2. (If, however, mhd_assert has observable side-effects in all builds\u2014e.g. it logs or aborts on failure\u2014then it would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_slot_available code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2912.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_slot_available as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_slot_available:\n```c\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n    return true; /* The slot is empty */\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n    return true; /* Wrong nonce format in the slot */\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n    return true;\n\n  return false;\n}\n```\n</target_code>\nPlease provide the modified is_slot_available code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe logging helper that appends human-friendly logs to a file. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2912.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic void probe_log_hex(const char *label, const unsigned char *data, size_t len)\n{\n  FILE *f = fopen(\"/tmp/logs/2912.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"%s (hex, len=%zu):\", label, len);\n  /* limit amount of bytes logged to avoid excessive output */\n  size_t max = (len < 16u) ? len : 16u;\n  for (size_t i = 0; i < max; ++i)\n    fprintf(f, \" %02x\", data[i]);\n  if (len > max)\n    fprintf(f, \" ...\");\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n\n  probe_log(\"ENTER is_slot_available: now=%\" PRIu64 \", new_nonce_len=%zu\", now, new_nonce_len);\n  probe_log(\"ASSERT check: new_nonce_len <= NONCE_STD_LEN(MAX_DIGEST) -> (value unknown at runtime)\");\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  probe_log(\"ASSERT check: NONCE_STD_LEN(MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH -> (value unknown at runtime)\");\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n\n  probe_log(\"nn->nonce[0]=0x%02x\", (unsigned)nn->nonce[0]);\n  if (0 == nn->nonce[0])\n  {\n    probe_log(\"slot empty: returning true\");\n    return true; /* The slot is empty */\n  }\n\n  /* Log a prefix of the compared nonces to help reproduce comparisons */\n  probe_log_hex(\"nn->nonce\", (const unsigned char *)nn->nonce, sizeof(nn->nonce));\n  probe_log_hex(\"new_nonce (prefix)\", (const unsigned char *)new_nonce, (new_nonce_len > 0u) ? ((new_nonce_len < 16u) ? new_nonce_len : 16u) : 0u);\n\n  int cmp = memcmp (nn->nonce, new_nonce, new_nonce_len);\n  probe_log(\"memcmp result for new_nonce_len=%zu -> %d\", new_nonce_len, cmp);\n  if (0 == cmp)\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    probe_log(\"same nonce already present: returning false\");\n    return false;\n  }\n\n  probe_log(\"nn->nc=%u\", (unsigned)nn->nc);\n  if (0 != nn->nc)\n  {\n    probe_log(\"nn->nc != 0: client already used the nonce in this slot -> returning true\");\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n  }\n\n  /* The nonce must be zero-terminated */\n  probe_log(\"ASSERT check: nonce zero-termination at last byte\");\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  probe_log(\"nn->nonce[last]=0x%02x\", (unsigned)nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n  {\n    probe_log(\"wrong nonce format in slot: returning true\");\n    return true; /* Wrong nonce format in the slot */\n  }\n\n  /* Capture timestamp validity and value for forensic evidence */\n  probe_log(\"calling get_nonce_timestamp(nn->nonce, 0, &timestamp)\");\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n\n  probe_log(\"get_nonce_timestamp -> timestamp_valid=%d, timestamp=%\" PRIu64, timestamp_valid, timestamp);\n  probe_log(\"about to mhd_assert(timestamp_valid)\");\n  mhd_assert (timestamp_valid);\n  probe_log(\"after mhd_assert(timestamp_valid)\");\n\n  if (! timestamp_valid)\n  {\n    probe_log(\"invalid timestamp in nonce-nc -> returning true\");\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n  }\n\n  /* Compute trimmed delta once and log values used in the reuse check */\n  uint64_t trimmed_delta = TRIM_TO_TIMESTAMP (now - timestamp);\n  uint64_t reuse_threshold = (uint64_t)REUSE_TIMEOUT * (uint64_t)1000u;\n  probe_log(\"trimmed_delta=%\" PRIu64 \", reuse_threshold=%\" PRIu64, trimmed_delta, reuse_threshold);\n\n  if (reuse_threshold < trimmed_delta)\n  {\n    probe_log(\"reuse timeout exceeded: returning true\");\n    return true;\n  }\n\n  probe_log(\"slot not available: returning false\");\n  return false;\n}\n"
}