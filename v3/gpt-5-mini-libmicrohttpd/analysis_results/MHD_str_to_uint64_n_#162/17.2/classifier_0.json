{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_str_to_uint64_n_:\n```c\nsize_t\nMHD_str_to_uint64_n_ (const char *str,\n                      size_t maxlen,\n                      uint64_t *out_val)\n{\n  uint64_t res;\n  size_t i;\n\n  if (! str || ! maxlen || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  i = 0;\n  do\n  {\n    const int digit = (unsigned char) str[i] - '0';\n\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    i++;\n  } while ( (i < maxlen) &&\n            isasciidigit (str[i]) );\n\n  *out_val = res;\n  return i;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (! str || ! maxlen || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fragment calls isasciidigit(str[0]) and performs null/zero checks; it does not call MHD_str_to_uint64_n_ (neither directly nor indirectly in the shown code). Only if isasciidigit were implemented to call back into MHD_str_to_uint64_n_ would there be an indirect recursion, but there is no evidence of that here."
}