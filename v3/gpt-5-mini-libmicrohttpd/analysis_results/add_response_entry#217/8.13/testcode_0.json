{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the callee add_response_entry_n is declared with non-const pointer parameters for the header/content (e.g. add_response_entry_n(..., char *header, size_t header_len, char *content, size_t content_len)). In that case const char * values are passed to non-const char * parameters, meaning the pointers should have been declared to point to const-qualified types (i.e. const char *), so Rule 8.13 is violated. If, however, add_response_entry_n already declares those parameters as const char *, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified add_response_entry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/2173.txt */\nstatic void\nwrite_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2173.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n\n  fclose (f);\n}\n\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry and pointers so callers/analysers can see what was passed. */\n  write_log (\"ENTER add_response_entry: response=%p, kind=%d, header=%p, content=%p\",\n             (void *) response, (int) kind, (const void *) header, (const void *) content);\n\n  if (NULL == content)\n  {\n    write_log (\"content == NULL -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  /* Compute lengths as original logic. Log safe snippets of strings. */\n  header_len = strlen (header);\n  content_len = strlen (content);\n\n  write_log (\"Computed lengths: header_len=%zu, content_len=%zu\", header_len, content_len);\n  write_log (\"Header snippet: \\\"%.128s\\\"\", header ? header : \"(null)\");\n  write_log (\"Content snippet: \\\"%.128s\\\"\", content ? content : \"(null)\");\n\n  /* Log before calling the callee so the exact types/values passed are captured. */\n  write_log (\"Calling add_response_entry_n(response=%p, kind=%d, header=%p, header_len=%zu, content=%p, content_len=%zu)\",\n             (void *) response, (int) kind, (const void *) header, header_len, (const void *) content, content_len);\n\n  int clereturn = add_response_entry_n (response, kind, header,\n                                       header_len, content,\n                                       content_len) ? 1 : 0;\n\n  write_log (\"add_response_entry_n returned %d -> returning %s\",\n             clereturn, clereturn ? \"MHD_YES\" : \"MHD_NO\");\n\n  return clereturn ? MHD_YES : MHD_NO;\n}\n"
}