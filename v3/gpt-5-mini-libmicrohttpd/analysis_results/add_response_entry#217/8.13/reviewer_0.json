{
  "user_message": "An agent A claimed that the following add_response_entry code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_response_entry.\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs if the callee add_response_entry_n is declared with non-const pointer parameters for the header/content (e.g. add_response_entry_n(..., char *header, size_t header_len, char *content, size_t content_len)). In that case const char * values are passed to non-const char * parameters, meaning the pointers should have been declared to point to const-qualified types (i.e. const char *), so Rule 8.13 is violated. If, however, add_response_entry_n already declares those parameters as const char *, then there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER add_response_entry: response=0x55bc1c900820, kind=1, header=0x55bc0ab1101f, content=0x55bc0ab1102d\nComputed lengths: header_len=13, content_len=8\nHeader snippet: \"Header-Type-A\"\nContent snippet: \"value-a1\"\nCalling add_response_entry_n(response=0x55bc1c900820, kind=1, header=0x55bc0ab1101f, header_len=13, content=0x55bc0ab1102d, content_len=8)\nadd_response_entry_n returned 1 -> returning MHD_YES\nENTER add_response_entry: response=0x55bc1c900820, kind=1, header=0x55bc0ab1101f, content=0x55bc0ab1104d\nComputed lengths: header_len=13, content_len=8\nHeader snippet: \"Header-Type-A\"\nContent snippet: \"value-a2\"\nCalling add_response_entry_n(response=0x55bc1c900820, kind=1, header=0x55bc0ab1101f, header_len=13, content=0x55bc0ab1104d, content_len=8)\nadd_response_entry_n returned 1 -> returning MHD_YES\nENTER add_response_entry: response=0x55bc1c900820, kind=1, header=0x55bc0ab1101f, content=0x55bc0ab11087\nComputed lengths: header_len=13, content_len=8\nHeader snippet: \"Header-Type-A\"\nContent snippet: \"value-a3\"\nCalling add_response_entry_n(response=0x55bc1c900820, kind=1, header=0x55bc0ab1101f, header_len=13, content=0x55bc0ab11087, content_len=8)\nadd_response_entry_n returned 1 -> returning MHD_YES\nENTER add_response_entry: response=0x55bc1c900820, kind=1, header=0x55bc0ab11a16, content=0x55bc0ab11a1b\nComputed lengths: header_len=4, content_len=29\nHeader snippet: \"Date\"\nContent snippet: \"Wed, 01 Apr 2015 00:00:00 GMT\"\nCalling add_response_entry_n(response=0x55bc1c900820, kind=1, header=0x55bc0ab11a16, header_len=4, content=0x55bc0ab11a1b, content_len=29)\nadd_response_entry_n returned 1 -> returning MHD_YES\nENTER add_response_entry: response=0x55bc1c900820, kind=1, header=0x55bc0ab11a16, content=0x55bc0ab11a79\nComputed lengths: header_len=4, content_len=29\nHeader snippet: \"Date\"\nContent snippet: \"Thu, 01 Apr 2021 00:00:00 GMT\"\nCalling add_response_entry_n(response=0x55bc1c900820, kind=1, header=0x55bc0ab11a16, header_len=4, content=0x55bc0ab11a79, content_len=29)\nadd_response_entry_n returned 1 -> returning MHD_YES\nENTER add_response_entry: response=0x55bc1c900820, kind=1, header=0x55bc0ab11af5, content=0x55bc0ab11b07\nComputed lengths: header_len=17, content_len=7\nHeader snippet: \"Transfer-Encoding\"\nContent snippet: \"chunked\"\nCalling add_response_entry_n(response=0x55bc1c900820, kind=1, header=0x55bc0ab11af5, header_len=17, content=0x55bc0ab11b07, content_len=7)\nadd_response_entry_n returned 1 -> returning MHD_YES\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is essentially correct but slightly imprecise about where the fault lies. The shown add_response_entry declares its header and content parameters as const char * (which conforms to Rule 8.13). A violation of MISRA C 2023 Rule 8.13 would occur if add_response_entry_n is declared to take non-const char * parameters and the const char * arguments are passed to it, because the callee\u2019s pointer parameters should be const-qualified when they do not modify the data. In other words, the actual violation is in the declaration of add_response_entry_n (or in the mismatch between the caller and callee prototypes), not in the add_response_entry function body shown. If add_response_entry_n already declares those parameters as const char *, there is no Rule 8.13 violation."
}