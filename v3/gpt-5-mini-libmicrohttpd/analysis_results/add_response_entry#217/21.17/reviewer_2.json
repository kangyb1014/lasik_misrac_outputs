{
  "user_message": "An agent A claimed that the following add_response_entry code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of add_response_entry.\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code only checks for NULL but does not ensure that 'content' points to a valid, null-terminated character array. If 'content' refers to a non-terminated buffer (e.g. a fixed-size receive buffer filled by recv()/read() without appending '\\0', or a pointer into an object where no '\\0' exists before the object's end), then strlen(content) may read past the object's bounds causing an out-of-bounds access.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[add_response_entry] stage=entry\n  header_ptr=0x560083aab01f, content_ptr=0x560083aab02d\n  header_strnlen_preview=13\nHeader-Type-A\n  content_strnlen_preview=8\nvalue-a1\n[add_response_entry] stage=before-strlen\n  header_ptr=0x560083aab01f, content_ptr=0x560083aab02d\n  header_strnlen_preview=13\nHeader-Type-A\n  content_strnlen_preview=8\nvalue-a1\n  computed header_len=13\n  computed content_len=8\n  add_response_entry_n returned=1\n[add_response_entry] exit\n\n[add_response_entry] stage=entry\n  header_ptr=0x560083aab01f, content_ptr=0x560083aab04d\n  header_strnlen_preview=13\nHeader-Type-A\n  content_strnlen_preview=8\nvalue-a2\n[add_response_entry] stage=before-strlen\n  header_ptr=0x560083aab01f, content_ptr=0x560083aab04d\n  header_strnlen_preview=13\nHeader-Type-A\n  content_strnlen_preview=8\nvalue-a2\n  computed header_len=13\n  computed content_len=8\n  add_response_entry_n returned=1\n[add_response_entry] exit\n\n[add_response_entry] stage=entry\n  header_ptr=0x560083aab01f, content_ptr=0x560083aab087\n  header_strnlen_preview=13\nHeader-Type-A\n  content_strnlen_preview=8\nvalue-a3\n[add_response_entry] stage=before-strlen\n  header_ptr=0x560083aab01f, content_ptr=0x560083aab087\n  header_strnlen_preview=13\nHeader-Type-A\n  content_strnlen_preview=8\nvalue-a3\n  computed header_len=13\n  computed content_len=8\n  add_response_entry_n returned=1\n[add_response_entry] exit\n\n[add_response_entry] stage=entry\n  header_ptr=0x560083aaba16, content_ptr=0x560083aaba1b\n  header_strnlen_preview=4\nDate\n  content_strnlen_preview=29\nWed, 01 Apr 2015 00:00:00 GMT\n[add_response_entry] stage=before-strlen\n  header_ptr=0x560083aaba16, content_ptr=0x560083aaba1b\n  header_strnlen_preview=4\nDate\n  content_strnlen_preview=29\nWed, 01 Apr 2015 00:00:00 GMT\n  computed header_len=4\n  computed content_len=29\n  add_response_entry_n returned=1\n[add_response_entry] exit\n\n[add_response_entry] stage=entry\n  header_ptr=0x560083aaba16, content_ptr=0x560083aaba79\n  header_strnlen_preview=4\nDate\n  content_strnlen_preview=29\nThu, 01 Apr 2021 00:00:00 GMT\n[add_response_entry] stage=before-strlen\n  header_ptr=0x560083aaba16, content_ptr=0x560083aaba79\n  header_strnlen_preview=4\nDate\n  content_strnlen_preview=29\nThu, 01 Apr 2021 00:00:00 GMT\n  computed header_len=4\n  computed content_len=29\n  add_response_entry_n returned=1\n[add_response_entry] exit\n\n[add_response_entry] stage=entry\n  header_ptr=0x560083aabaf5, content_ptr=0x560083aabb07\n  header_strnlen_preview=17\nTransfer-Encoding\n  content_strnlen_preview=7\nchunked\n[add_response_entry] stage=before-strlen\n  header_ptr=0x560083aabaf5, content_ptr=0x560083aabb07\n  header_strnlen_preview=17\nTransfer-Encoding\n  content_strnlen_preview=7\nchunked\n  computed header_len=17\n  computed content_len=7\n  add_response_entry_n returned=1\n[add_response_entry] exit\n\n[add_response_entry] stage=entry\n  header_ptr=0x55aa25e38ac5, content_ptr=0x55aa25e38acd\n  header_strnlen_preview=7\nUpgrade\n  content_strnlen_preview=20\nHello World Protocol\n[add_response_entry] stage=before-strlen\n  header_ptr=0x55aa25e38ac5, content_ptr=0x55aa25e38acd\n  header_strnlen_preview=7\nUpgrade\n  content_strnlen_preview=20\nHello World Protocol\n  computed header_len=7\n  computed content_len=20\n  add_response_entry_n returned=1\n[add_response_entry] exit\n\n[add_response_entry] stage=entry\n  header_ptr=0x55aa25e38ac5, content_ptr=0x55aa25e38acd\n  header_strnlen_preview=7\nUpgrade\n  content_strnlen_preview=20\nHello World Protocol\n[add_response_entry] stage=before-strlen\n  header_ptr=0x55aa25e38ac5, content_ptr=0x55aa25e38acd\n  header_strnlen_preview=7\nUpgrade\n  content_strnlen_preview=20\nHello World Protocol\n  computed header_len=7\n  computed content_len=20\n  add_response_entry_n returned=1\n[add_response_entry] exit\n\n[add_response_entry] stage=entry\n  header_ptr=0x55aa25e38ac5, content_ptr=0x55aa25e38acd\n  header_strnlen_preview=7\nUpgrade\n  content_strnlen_preview=20\nHello World Protocol\n[add_response_entry] stage=before-strlen\n  header_ptr=0x55aa25e38ac5, content_ptr=0x55aa25e38acd\n  header_strnlen_preview=7\nUpgrade\n  content_strnlen_preview=20\nHello World Protocol\n  computed header_len=\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.17 requires that use of functions such as strlen must not result in accesses beyond the bounds of the object referenced by the pointer parameter. In the shown add_response_entry implementation there is no guarantee that the pointer 'content' (or even 'header') actually points to a NUL-terminated character array that lies within object bounds: the code only checks content for NULL, it does not verify that the buffer is NUL-terminated or that a bound is known. If a caller supplies a non-terminated buffer (for example, a recv()/read() fill without appending '\\0', or a pointer into an object where no '\\0' occurs before the end), strlen(content) can read past the object and produce an out-of-bounds access, violating 21.17. The runtime log simply shows successful cases and does not prove that the precondition is always satisfied. Note also that 'header' is not NULL-checked here and could likewise cause an out-of-bounds or NULL-dereference. To comply with 21.17, the code must ensure a valid NUL-terminated string (or use a bounded function such as strnlen with a known maximum length or pass explicit lengths) before calling strlen."
}