{
  "user_message": "An agent A claimed that the following add_response_entry code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of add_response_entry.\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls strlen(header) without validating that header points to a valid, null-terminated object. content is checked for NULL, but header is not \u2014 if header is NULL (or points to a buffer lacking a terminating '\\0' within its bounds), strlen(header) can read out-of-bounds. For example, a caller passing header == NULL will cause strlen(header) to dereference a null pointer, violating Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nadd_response_entry: phase=entry, header=0x55e3c20f001f, content=0x55e3c20f002d, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x55e3c20f001f, content=0x55e3c20f002d, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x55e3c20f001f, content=0x55e3c20f002d, content_is_null=0\nadd_response_entry: header_len=13, content_len=8\nadd_response_entry: phase=entry, header=0x55e3c20f001f, content=0x55e3c20f004d, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x55e3c20f001f, content=0x55e3c20f004d, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x55e3c20f001f, content=0x55e3c20f004d, content_is_null=0\nadd_response_entry: header_len=13, content_len=8\nadd_response_entry: phase=entry, header=0x55e3c20f001f, content=0x55e3c20f0087, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x55e3c20f001f, content=0x55e3c20f0087, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x55e3c20f001f, content=0x55e3c20f0087, content_is_null=0\nadd_response_entry: header_len=13, content_len=8\nadd_response_entry: phase=entry, header=0x55e3c20f0a16, content=0x55e3c20f0a1b, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x55e3c20f0a16, content=0x55e3c20f0a1b, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x55e3c20f0a16, content=0x55e3c20f0a1b, content_is_null=0\nadd_response_entry: header_len=4, content_len=29\nadd_response_entry: phase=entry, header=0x55e3c20f0a16, content=0x55e3c20f0a79, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x55e3c20f0a16, content=0x55e3c20f0a79, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x55e3c20f0a16, content=0x55e3c20f0a79, content_is_null=0\nadd_response_entry: header_len=4, content_len=29\nadd_response_entry: phase=entry, header=0x55e3c20f0af5, content=0x55e3c20f0b07, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x55e3c20f0af5, content=0x55e3c20f0b07, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x55e3c20f0af5, content=0x55e3c20f0b07, content_is_null=0\nadd_response_entry: header_len=17, content_len=7\nadd_response_entry: phase=entry, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: header_len=7, content_len=20\nadd_response_entry: phase=entry, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: header_len=7, content_len=20\nadd_response_entry: phase=entry, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: header_len=7, content_len=20\nadd_response_entry: phase=entry, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: header_len=7, content_len=20\nadd_response_entry: phase=entry, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=before_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: phase=after_strlen_header, header=0x555f5fac3ac5, content=0x555f5fac3acd, content_is_null=0\nadd_response_entry: header_len=7, content_len=20\nadd_\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 21.17 forbids using <string.h> functions in a way that can access memory beyond the bounds of the objects referenced by their pointer parameters. In the shown code strlen(header) is called without any validation that header is non-NULL and points to a NUL-terminated object. If a caller passes header == NULL (or a pointer to a buffer that lacks a terminating '\\0' within its bounds), strlen(header) will dereference an invalid pointer or read out of bounds \u2014 precisely the kind of behaviour the rule prohibits.\n\nThe execution log only shows non-NULL header values at runtime, but that is runtime evidence for specific calls and does not eliminate the potential for a violating call in other contexts. Unless there is a documented and enforced precondition (or other static proof) that header can never be NULL and is always a properly terminated string, the call is not compliant with Rule 21.17. Therefore Agent A\u2019s report is correct.\n\nRecommended fixes: validate header != NULL before calling strlen, or document and enforce a non-NULL, NUL-terminated precondition for header (and ensure this is verifiable), or change the API to accept lengths along with pointers so strlen is not required."
}