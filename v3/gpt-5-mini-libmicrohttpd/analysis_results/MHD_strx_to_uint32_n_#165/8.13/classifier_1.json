{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint32_n_:\n```c\nsize_t\nMHD_strx_to_uint32_n_ (const char *str,\n                       size_t maxlen,\n                       uint32_t *out_val)\n{\n  size_t i;\n  uint32_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit > (UINT32_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (! str || ! out_val)\n    return 0;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The str parameter is const char* (const-qualified) and out_val is a non-const uint32_t* because the function stores the parsed result through it. Rule 8.13 requires pointers to be const-qualified when they need not be modified; here out_val must be modifiable, so making it const would be incorrect. The null-check (if (!str || !out_val) return 0;) is appropriate and does not violate Rule 8.13."
}