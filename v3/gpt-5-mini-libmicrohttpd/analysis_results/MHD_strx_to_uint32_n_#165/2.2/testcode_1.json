{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe right-hand test ((uint32_t)digit > (UINT32_MAX % 16)) is always false because UINT32_MAX % 16 == 15 and, given the loop condition (digit = toxdigitvalue(str[i])) >= 0, digit can only be 0..15 for valid hex digits. The comparison is therefore executed but cannot affect control flow; removing it would not change program behaviour, so it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint32_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1652.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint32_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint32_n_:\n```c\nsize_t\nMHD_strx_to_uint32_n_ (const char *str,\n                       size_t maxlen,\n                       uint32_t *out_val)\n{\n  size_t i;\n  uint32_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit > (UINT32_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint32_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <stddef.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Prototype for external helper used by original code */\nextern int toxdigitvalue (int ch);\n\nsize_t\nMHD_strx_to_uint32_n_ (const char *str,\n                       size_t maxlen,\n                       uint32_t *out_val)\n{\n  size_t i;\n  uint32_t res;\n  int digit;\n\n  /* Ensure log directory exists (ignore errors) and open log file for append. */\n  (void)mkdir(\"/tmp/logs\", 0700);\n  FILE *f = fopen(\"/tmp/logs/1652.txt\", \"a\");\n  if (f)\n    fprintf(f, \"MHD_strx_to_uint32_n_ called: str=%p maxlen=%zu out_val=%p\\n\", (void *)str, maxlen, (void *)out_val);\n\n  if (! str || ! out_val)\n  {\n    if (f)\n      fprintf(f, \"Invalid parameters: str=%p out_val=%p -> return 0\\n\", (void *)str, (void *)out_val);\n    if (f) fclose(f);\n    return 0;\n  }\n\n  res = 0;\n  i = 0;\n  if (f)\n    fprintf(f, \"Start parsing: initial res=%\" PRIu32 \"\\n\", res);\n\n  while (i < maxlen && (digit = toxdigitvalue ((int)str[i])) >= 0)\n  {\n    if (f)\n      fprintf(f, \"Loop iteration: i=%zu char='%c' (0x%02X) digit=%d res=%\" PRIu32 \"\\n\",\n              i, str[i], (unsigned char) str[i], digit, res);\n\n    /* Capture the values involved in the overflow test for logging. */\n    uint32_t max_div = (uint32_t)(UINT32_MAX / 16u);\n    uint32_t max_mod = (uint32_t)(UINT32_MAX % 16u);\n\n    int cond1 = (res > max_div);\n    int cond2 = ((res == max_div) && ((uint32_t) digit > max_mod));\n\n    if (f)\n    {\n      fprintf(f, \"Overflow check parts: res > max_div? %d (res=%\" PRIu32 \", max_div=%\" PRIu32 \")\\n\",\n              cond1, res, max_div);\n      fprintf(f, \"Overflow check second part: (res==max_div)? %d and ((uint32_t)digit > max_mod)? (digit=%d, max_mod=%\" PRIu32 \") -> %d\\n\",\n              (res == max_div), digit, max_mod, cond2);\n    }\n\n    if ( (res > (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit > (UINT32_MAX % 16)) ) )\n    {\n      if (f)\n        fprintf(f, \"Overflow condition met -> returning 0 (i=%zu res=%\" PRIu32 \" digit=%d)\\n\", i, res, digit);\n      if (f) fclose(f);\n      return 0;\n    }\n\n    res *= 16;\n    res += (unsigned int) digit;\n\n    if (f)\n      fprintf(f, \"After accumulate: res=%\" PRIu32 \"\\n\", res);\n\n    i++;\n  }\n\n  if (f)\n    fprintf(f, \"Loop exit: i=%zu res=%\" PRIu32 \"\\n\", i, res);\n\n  if (i)\n    *out_val = res;\n\n  if (f)\n  {\n    fprintf(f, \"Return: i=%zu out_val_assigned=%s final_res=%\" PRIu32 \"\\n\\n\",\n            i, (i ? \"yes\" : \"no\"), res);\n    fclose(f);\n  }\n\n  return i;\n}\n"
}