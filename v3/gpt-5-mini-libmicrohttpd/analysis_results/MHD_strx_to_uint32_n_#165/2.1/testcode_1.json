{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe conjunct ((uint32_t) digit > (UINT32_MAX % 16)) can never be true: toxdigitvalue() yields 0..15 for valid hex digits, while (UINT32_MAX % 16) == 15. Hence the sub-condition (res == (UINT32_MAX / 16)) && ((uint32_t)digit > (UINT32_MAX % 16)) can never be satisfied, making that branch effectively unreachable. This is a violation of MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint32_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1651.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint32_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint32_n_:\n```c\nsize_t\nMHD_strx_to_uint32_n_ (const char *str,\n                       size_t maxlen,\n                       uint32_t *out_val)\n{\n  size_t i;\n  uint32_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit > (UINT32_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint32_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n\n/* External digit parser used by the original code. */\nextern int toxdigitvalue(int c);\n\n/*\n * Small helper to log control flow and state to a file for reproducing\n * the reported unreachable-branch scenario. Appends lines to\n * \"/tmp/logs/1651.txt\". This helper preserves the logic of the\n * original function and does not alter program state.\n */\nstatic void\nmhd_log(const char *msg,\n        size_t i,\n        size_t maxlen,\n        uint32_t res,\n        int digit,\n        uint32_t div16,\n        uint32_t mod16,\n        int cond1,\n        int cond2,\n        int fullcond)\n{\n  FILE *f = fopen(\"/tmp/logs/1651.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f,\n            \"%s: i=%zu maxlen=%zu res=%u digit=%d div16=%u mod16=%u cond1=%d cond2=%d full=%d\\n\",\n            msg, i, maxlen, res, digit, div16, mod16, cond1, cond2, fullcond);\n    fclose(f);\n  }\n}\n\nsize_t\nMHD_strx_to_uint32_n_ (const char *str,\n                       size_t maxlen,\n                       uint32_t *out_val)\n{\n  size_t i;\n  uint32_t res;\n  int digit;\n  if (! str || ! out_val)\n  {\n    /* Log invalid parameters and preserve original behaviour */\n    mhd_log(\"null-param\", 0u, maxlen, 0u, -1, (UINT32_MAX / 16u), (UINT32_MAX % 16u), 0, 0, 0);\n    return 0;\n  }\n\n  res = 0u;\n  i = 0u;\n  while (i < maxlen && (digit = toxdigitvalue((int)str[i])) >= 0)\n  {\n    uint32_t div16 = (UINT32_MAX / 16u);\n    uint32_t mod16 = (UINT32_MAX % 16u);\n    int cond1 = (res > div16) ? 1 : 0;\n    int cond2 = ((res == div16) && ((uint32_t)digit > mod16)) ? 1 : 0;\n    int fullcond = cond1 || cond2;\n\n    /* Log the values used in the overflow check before evaluating it. */\n    mhd_log(\"before-check\", i, maxlen, res, digit, div16, mod16, cond1, cond2, fullcond);\n\n    if ( (res > (UINT32_MAX / 16u)) ||\n         ((res == (UINT32_MAX / 16u)) &&\n          ( (uint32_t) digit > (UINT32_MAX % 16u)) ) )\n      {\n        /* Log the exact moment the original code would return due to overflow. */\n        mhd_log(\"overflow-detected\", i, maxlen, res, digit, div16, mod16, cond1, cond2, fullcond);\n        return 0;\n      }\n\n    res *= 16u;\n    res += (unsigned int) digit;\n\n    /* Log state after updating the accumulated result. */\n    mhd_log(\"after-update\", i, maxlen, res, digit, div16, mod16, cond1, cond2, fullcond);\n    i++;\n  }\n\n  if (i)\n  {\n    *out_val = res;\n    mhd_log(\"final-success\", i, maxlen, res, -1, (UINT32_MAX / 16u), (UINT32_MAX % 16u), 0, 0, 0);\n  }\n  else\n  {\n    mhd_log(\"final-no-digits\", i, maxlen, res, -1, (UINT32_MAX / 16u), (UINT32_MAX % 16u), 0, 0, 0);\n  }\n  return i;\n}\n"
}