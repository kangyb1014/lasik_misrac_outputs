{
  "user_message": "An agent A claimed that the following MHD_digest_auth_get_username3 code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_get_username3.\n```c\n_MHD_EXTERN struct MHD_DigestAuthUsernameInfo *\nMHD_digest_auth_get_username3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  struct MHD_DigestAuthUsernameInfo *uname_info;\n  enum MHD_DigestAuthUsernameType uname_type;\n  size_t unif_buf_size;\n  uint8_t *unif_buf_ptr;\n  size_t unif_buf_used;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  uname_type = get_rq_uname_type (params);\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING == uname_type) ||\n       (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID == uname_type) )\n    return NULL;\n\n  unif_buf_size = get_rq_unames_size (params, uname_type);\n\n  uname_info = (struct MHD_DigestAuthUsernameInfo *)\n               MHD_calloc_ (1, (sizeof(struct MHD_DigestAuthUsernameInfo))\n                            + unif_buf_size);\n  unif_buf_ptr = (uint8_t *) (uname_info + 1);\n  unif_buf_used = get_rq_uname (params, uname_type, uname_info, unif_buf_ptr,\n                                unif_buf_size);\n  mhd_assert (unif_buf_size >= unif_buf_used);\n  (void) unif_buf_used; /* Mute compiler warning on non-debug builds */\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_info->uname_type);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID == uname_info->uname_type)\n  {\n    free (uname_info);\n    return NULL;\n  }\n  mhd_assert (uname_type == uname_info->uname_type);\n  uname_info->algo3 = params->algo3;\n\n  return uname_info;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes an allocated buffer pointer (unif_buf_ptr) and a size (unif_buf_size) into get_rq_uname. If get_rq_uname uses standard string functions (e.g. strcpy, strcat, memcpy, memmove) without respecting the supplied unif_buf_size (or if get_rq_unames_size underestimates the required size), those functions can write past the unif_buf_ptr allocation and corrupt the surrounding object (uname_info) or heap. Note that the code only asserts unif_buf_size >= unif_buf_used after the call, which does not prevent an overflow during the call itself. For example, if get_rq_uname performs strcpy(unif_buf_ptr, source) where source length > unif_buf_size, this will access beyond the bounds of unif_buf_ptr and thus violate MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as applied to this function alone. MISRA C:2023 Rule 21.17 concerns uses of the <string.h> functions that can access beyond the bounds of the objects passed. MHD_digest_auth_get_username3 does not itself call any <string.h> routines \u2014 it allocates a buffer of size unif_buf_size, computes unif_buf_ptr to that buffer, and passes that pointer and size to get_rq_uname. Whether a Rule 21.17 violation occurs depends on the implementation of get_rq_uname (or on an incorrect value returned by get_rq_unames_size). If get_rq_uname uses unsafe string functions (e.g. strcpy) or ignores the supplied size, then the overflow (and the Rule 21.17 violation) would be in get_rq_uname, not in MHD_digest_auth_get_username3 itself.\n\nThat said, the code has a potential safety gap: it asserts after the call that unif_buf_size >= unif_buf_used, but that assertion cannot prevent an overflow during the call. To determine compliance overall you must review get_rq_uname and get_rq_unames_size to ensure they correctly bound their writes (use length-checked functions or otherwise ensure no writes past unif_buf_size). The agent\u2019s scenario describes a real risk, but it identifies the wrong location for the Rule 21.17 violation \u2014 the violating code (if any) would be inside get_rq_uname (or an incorrect size computation), not in MHD_digest_auth_get_username3 itself."
}