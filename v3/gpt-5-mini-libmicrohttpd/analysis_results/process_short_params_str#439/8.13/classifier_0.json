{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of process_short_params_str:\n```c\nstatic enum PerfRepl_param_result\nprocess_short_params_str (const char *params_str, const char *next_param)\n{\n  if (0 == params_str[0])\n  {\n    fprintf (stderr, \"Unrecognised parameter: -\\n\");\n    return PERF_RPL_PARAM_ERROR;\n  }\n  do\n  {\n    enum PerfRepl_param_result param_res;\n    param_res = process_short_param (params_str, next_param);\n    if (PERF_RPL_PARAM_ONE_CHAR != param_res)\n      return param_res;\n  } while (0 != (++params_str)[0]);\n  return PERF_RPL_PARAM_FULL_STR;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nparam_res = process_short_param (params_str, next_param);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated in the fragment as written: both params_str and next_param are declared const char * and passing them to a function that accepts const char * parameters does not violate Rule 8.13. A violation would occur if the prototype of process_short_param were declared to take non-const pointers (e.g. char *params_str or char *next_param) while the function does not need to modify the pointed data \u2014 this would discard const qualification and breach Rule 8.13. Corrective action: declare process_short_param as taking const char * for parameters that are not modified (e.g. enum PerfRepl_param_result process_short_param(const char *params_str, const char *next_param);)."
}