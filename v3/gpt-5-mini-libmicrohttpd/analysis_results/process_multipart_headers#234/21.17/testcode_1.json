{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe expression &pp[1] yields a pointer one-past the struct object. If the MHD_PostProcessor object was not allocated with trailing bytes immediately after the struct (e.g. no trailing buffer or flexible array member), then casting that one-past-end address to char * and subsequently indexing (buf[newline]) or passing buf to string-handling routines (strlen, memcmp, etc., called directly or via helpers like MHD_str_equal_caseless_n_) can read/write beyond the bounds of the pp object. In that case string functions will access out-of-bounds memory and Rule 21.17 is violated. (If, however, the struct is deliberately allocated with extra storage immediately following it or defines a flexible array member for the buffer, the use is safe.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_multipart_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_multipart_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper - append-only */\nstatic void log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2349.txt\", \"a\");\n  if (!f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  /* Log entry and key state information before performing any buffer accesses. */\n  log_probe(\"ENTER process_multipart_headers: pp=%p, buf=%p, buffer_pos=%zu, buffer_size=%zu\",\n            (void *)pp, (void *)buf,\n            pp->buffer_pos, pp->buffer_size);\n\n  if (pp->buffer_pos > pp->buffer_size)\n    log_probe(\"WARNING: pp->buffer_pos (%zu) > pp->buffer_size (%zu)\",\n              pp->buffer_pos, pp->buffer_size);\n\n  /* If there is any reported data in the buffer, capture a safe sample for forensic purposes.\n     We only read up to pp->buffer_pos bytes here (this mirrors the original loop bound). */\n  if (pp->buffer_pos > 0) {\n    size_t sample = pp->buffer_pos > 32 ? 32 : pp->buffer_pos;\n    log_probe(\"Buffer sample (up to %zu bytes):\", sample);\n    for (size_t i = 0; i < sample; ++i) {\n      unsigned char c = (unsigned char) buf[i];\n      /* Print hex and a printable-representation (dot for non-printable). */\n      log_probe(\"  buf[%zu] = 0x%02x '%c'\", i, c,\n                (c >= 32 && c < 127) ? (char)c : '.');\n    }\n  } else {\n    log_probe(\"Buffer sample: no data (buffer_pos == 0)\");\n  }\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n  {\n    /* Log iteration progress. Keep this light-weight to avoid overwhelming logs. */\n    if ((newline & 0x7) == 0) /* log every 8th byte to limit verbosity */\n      log_probe(\"scanning: newline=%zu char=0x%02x\", newline, (unsigned char) buf[newline]);\n    newline++;\n  }\n\n  if (newline == pp->buffer_pos)\n    log_probe(\"Loop exit: reached buffer_pos=%zu without finding CR/LF\", newline);\n  else\n    log_probe(\"Loop exit: found terminator at newline=%zu char=0x%02x\", newline, (unsigned char) buf[newline]);\n\n  if (newline == pp->buffer_size)\n  {\n    log_probe(\"ERROR: newline == buffer_size (%zu) -> setting PP_Error and returning MHD_NO\", newline);\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n\n  if (newline == pp->buffer_pos)\n  {\n    log_probe(\"Need more data: newline == buffer_pos (%zu) -> returning MHD_NO\", newline);\n    return MHD_NO;              /* will need more data */\n  }\n\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    log_probe(\"Empty line detected at start of buffer: end of headers -> setting skip_rn=RN_Full state=%d next_state=%d\",\n              (int) pp->state, (int) next_state);\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n  {\n    log_probe(\"Header line ended with CR (\\r) at newline=%zu -> setting skip_rn=RN_OptN\", newline);\n    pp->skip_rn = RN_OptN;\n  }\n  else\n  {\n    log_probe(\"Header line ended with LF (\\n) at newline=%zu\", newline);\n  }\n\n  /* Log that we are about to NUL-terminate the header at buf[newline]. This mirrors original behaviour. */\n  log_probe(\"About to NUL-terminate buffer at buf[%zu] (was 0x%02x)\", newline, (unsigned char) buf[newline]);\n  buf[newline] = '\\0';\n  log_probe(\"NUL-termination complete at buf[%zu]\", newline);\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    log_probe(\"Matched header: Content-disposition -> extracting name and filename\");\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    log_probe(\"Did not match Content-disposition; trying Content-type and Content-Transfer-Encoding\");\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n\n  (*ioffptr) += newline + 1;\n  log_probe(\"Advance offset by newline+1 (%zu) -> new ioff=%zu returning MHD_YES\", newline + 1, *ioffptr);\n  return MHD_YES;\n}\n"
}