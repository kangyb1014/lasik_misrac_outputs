{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nMHD_str_equal_caseless_n_ is called with n = MHD_STATICSTR_LEN_(\"Content-disposition: \") and buf pointing to the post-processor buffer. The code only guarantees newline < pp->buffer_size (and null-terminates at buf[newline]) but does not ensure that pp->buffer_size >= n. If MHD_str_equal_caseless_n_ is implemented using a <string.h> routine that reads up to n bytes (e.g. memcmp/strncasecmp), and pp->buffer_size is smaller than the static string length, the call can read past the bounds of the object referenced by buf, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_multipart_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_multipart_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper to log state to /tmp/logs/2349.txt. */\nstatic void\npp_log_state(const struct MHD_PostProcessor *pp,\n             size_t newline,\n             size_t ioff_val,\n             const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/2349.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log basic numeric state. */\n  fprintf(f, \"[pp_log_state] stage=%s pp=%p buffer_pos=%zu buffer_size=%zu newline=%zu ioff=%zu state=%d skip_rn=%d\\n\",\n          stage,\n          (const void *)pp,\n          pp->buffer_pos,\n          pp->buffer_size,\n          newline,\n          ioff_val,\n          (int) pp->state,\n          (int) pp->skip_rn);\n\n  /* Safely dump up to the minimum of newline and buffer_pos bytes (cap at 64). */\n  {\n    size_t dump = pp->buffer_pos;\n    if (dump > newline)\n      dump = newline;\n    if (dump > 64u)\n      dump = 64u;\n    if (dump > 0u)\n    {\n      const unsigned char *buf = (const unsigned char *) &pp[1];\n      fprintf(f, \"[pp_log_state] buf[0..%zu]:\", dump - 1u);\n      for (size_t i = 0u; i < dump; ++i)\n        fprintf(f, \" %02x\", (unsigned) buf[i]);\n      fprintf(f, \"\\n\");\n    }\n  }\n\n  fclose(f);\n}\n\n/* Lightweight logger for specific events. */\nstatic void\npp_log_event(const struct MHD_PostProcessor *pp,\n             const char *event,\n             size_t a,\n             size_t b)\n{\n  FILE *f = fopen(\"/tmp/logs/2349.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"[pp_log_event] pp=%p event=%s a=%zu b=%zu\\n\",\n          (const void *)pp, event, a, b);\n  fclose(f);\n}\n\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  /* Log entry state. */\n  pp_log_state(pp, 0u, *ioffptr, \"entry\");\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n\n  /* Log after newline computation. */\n  pp_log_state(pp, newline, *ioffptr, \"after_newline_scan\");\n\n  if (newline == pp->buffer_size)\n  {\n    pp_log_event(pp, \"newline_eq_buffer_size -> error\", newline, pp->buffer_size);\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n  {\n    pp_log_event(pp, \"need_more_data\", newline, pp->buffer_pos);\n    return MHD_NO;              /* will need more data */\n  }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp_log_event(pp, \"empty_line_end_of_headers\", 0u, 0u);\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n\n  /* Log header line (safely): we only print up to newline bytes, which is within bounds. */\n  {\n    FILE *f = fopen(\"/tmp/logs/2349.txt\", \"a\");\n    if (f)\n    {\n      size_t dump = newline;\n      if (dump > 256u)\n        dump = 256u; /* cap length in log */\n      fprintf(f, \"[process_multipart_headers] header_line (len=%zu): \\\"\", dump);\n      for (size_t i = 0u; i < dump; ++i)\n      {\n        char c = buf[i];\n        /* print printable characters, else hex escape */\n        if ((c >= 32 && c <= 126))\n          fputc((int) c, f);\n        else\n          fprintf(f, \"\\\\x%02x\", (unsigned char) c);\n      }\n      fprintf(f, \"\\\"\\n\");\n      fclose(f);\n    }\n  }\n\n  /* Log before calling the equality test, including the static length used. */\n  {\n    size_t cd_len = MHD_STATICSTR_LEN_(\"Content-disposition: \");\n    pp_log_event(pp, \"before_MHD_str_equal_caseless_n_\", cd_len, pp->buffer_size);\n  }\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    pp_log_event(pp, \"matched_Content-disposition\", (size_t)0u, (size_t)0u);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    pp_log_event(pp, \"did_not_match_Content-disposition\", (size_t)0u, (size_t)0u);\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n\n  (*ioffptr) += newline + 1;\n\n  pp_log_state(pp, newline, *ioffptr, \"exit\");\n  return MHD_YES;\n}\n"
}