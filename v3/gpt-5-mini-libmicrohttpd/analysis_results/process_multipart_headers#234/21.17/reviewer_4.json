{
  "user_message": "An agent A claimed that the following process_multipart_headers code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of process_multipart_headers.\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes \u2014 try_match_header is called with a fixed length (MHD_STATICSTR_LEN_(\"Content-Transfer-Encoding: \")) but there is no check that the buffer contains that many bytes. If the stored header line is shorter than that prefix (or pp->buffer_size is less than the static prefix length, e.g. prefix length = 27) the helper will attempt to read MHD_STATICSTR_LEN_ bytes from buf and may access beyond the bounds of pp's buffer. For example, if pp->buffer_size < MHD_STATICSTR_LEN_(\"Content-Transfer-Encoding: \") (or newline < that length) the comparison inside try_match_header can read past the allocated buffer and thus violate Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n---- process_multipart_headers probe: enter\npp=0x55a6a2580820, buffer_pos=221, buffer_size=1028, newline=0, ioff=0\nsample_bytes=128: 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 66 69 65 6C 64 31 22 0D 0A 0D 0A 4A 6F 65 20 42 6C 6F 77 0D 0A 2D 2D 41 61 42 30 33 78 0D 0A 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65\nsample_ascii: \"content-disposition: form-data; name=\"field1\"\\r\\n\\r\\nJoe Blow\\r\\n--AaB03x\\r\\ncontent-disposition: form-data; name=\"pics\"; filename=\"file\"\n---- process_multipart_headers probe: after_scan_newline\npp=0x55a6a2580820, buffer_pos=221, buffer_size=1028, newline=45, ioff=0\nsample_bytes=128: 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 66 69 65 6C 64 31 22 0D 0A 0D 0A 4A 6F 65 20 42 6C 6F 77 0D 0A 2D 2D 41 61 42 30 33 78 0D 0A 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65\nsample_ascii: \"content-disposition: form-data; name=\"field1\"\\r\\n\\r\\nJoe Blow\\r\\n--AaB03x\\r\\ncontent-disposition: form-data; name=\"pics\"; filename=\"file\"\n---- process_multipart_headers probe: before_content_disposition_check\npp=0x55a6a2580820, buffer_pos=221, buffer_size=1028, newline=45, ioff=0\nsample_bytes=128: 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 66 69 65 6C 64 31 22 00 0A 0D 0A 4A 6F 65 20 42 6C 6F 77 0D 0A 2D 2D 41 61 42 30 33 78 0D 0A 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65\nsample_ascii: \"content-disposition: form-data; name=\"field1\".\\n\\r\\nJoe Blow\\r\\n--AaB03x\\r\\ncontent-disposition: form-data; name=\"pics\"; filename=\"file\"\nmatched Content-disposition prefix, cd_len=21, newline=45, buffer_size=1028\n---- process_multipart_headers probe: after_content_disposition\npp=0x55a6a2580820, buffer_pos=221, buffer_size=1028, newline=45, ioff=0\nsample_bytes=128: 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 66 69 65 6C 64 31 22 00 0A 0D 0A 4A 6F 65 20 42 6C 6F 77 0D 0A 2D 2D 41 61 42 30 33 78 0D 0A 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65\nsample_ascii: \"content-disposition: form-data; name=\"field1\".\\n\\r\\nJoe Blow\\r\\n--AaB03x\\r\\ncontent-disposition: form-data; name=\"pics\"; filename=\"file\"\n---- process_multipart_headers probe: exit_success\npp=0x55a6a2580820, buffer_pos=221, buffer_size=1028, newline=45, ioff=46\nsample_bytes=128: 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 66 69 65 6C 64 31 22 00 0A 0D 0A 4A 6F 65 20 42 6C 6F 77 0D 0A 2D 2D 41 61 42 30 33 78 0D 0A 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65\nsample_ascii: \"content-disposition: form-data; name=\"field1\".\\n\\r\\nJoe Blow\\r\\n--AaB03x\\r\\ncontent-disposition: form-data; name=\"pics\"; filename=\"file\"\n---- process_multipart_headers probe: enter\npp=0x55a6a2580820, buffer_pos=174, buffer_size=1028, newline=0, ioff=0\nsample_bytes=128: 0D 0A 4A 6F 65 20 42 6C 6F 77 0D 0A 2D 2D 41 61 42 30 33 78 0D 0A 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65 31 2E 74 78 74 22 0D 0A 43 6F 6E 74 65 6E 74 2D 54 79 70 65 3A 20 74 65 78 74 2F 70 6C 61 69 6E 0D 0A 43 6F 6E 74 65 6E 74 2D 54 72 61 6E 73\nsample_ascii: \"\\r\\nJoe Blow\\r\\n--AaB03x\\r\\ncontent-disposition: form-data; name=\"pic\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The code calls MHD_str_equal_caseless_n_ and try_match_header with a fixed prefix length (MHD_STATICSTR_LEN_(...)) but does not ensure the buffer contains at least that many bytes before those calls. The loop only stops at the first CR/LF (newline) and checks newline==0, newline==pp->buffer_pos and newline==pp->buffer_size, but it never verifies newline (or pp->buffer_size) is >= the static prefix length. If newline (the header line length) is shorter than the prefix length \u2014 or if pp->buffer_size itself is smaller than the static prefix length \u2014 the string-comparison helpers (which will read prefix_len bytes from buf) can read past the end of the buffer object, violating MISRA C:2023 Rule 21.17. The execution log examples are safe, but they do not prove the code prevents the out-of-bounds scenario in general."
}