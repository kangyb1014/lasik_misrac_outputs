{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 try_match_header is called with a fixed length (MHD_STATICSTR_LEN_(\"Content-Transfer-Encoding: \")) but there is no check that the buffer contains that many bytes. If the stored header line is shorter than that prefix (or pp->buffer_size is less than the static prefix length, e.g. prefix length = 27) the helper will attempt to read MHD_STATICSTR_LEN_ bytes from buf and may access beyond the bounds of pp's buffer. For example, if pp->buffer_size < MHD_STATICSTR_LEN_(\"Content-Transfer-Encoding: \") (or newline < that length) the comparison inside try_match_header can read past the allocated buffer and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_multipart_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_multipart_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: write state to /tmp/logs/2349.txt. Designed to avoid reading\n   beyond pp->buffer_pos or pp->buffer_size. */\nstatic void\nlog_multipart_probe(struct MHD_PostProcessor *pp,\n                    const char *stage,\n                    size_t newline,\n                    size_t ioff)\n{\n  FILE *f = fopen(\"/tmp/logs/2349.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"---- process_multipart_headers probe: %s\\n\", stage);\n  fprintf(f, \"pp=%p, buffer_pos=%zu, buffer_size=%zu, newline=%zu, ioff=%zu\\n\",\n          (void *)pp,\n          (size_t)pp->buffer_pos,\n          (size_t)pp->buffer_size,\n          newline,\n          ioff);\n\n  /* Safely compute how many bytes we can sample from the buffer. Do not\n     read beyond pp->buffer_pos or pp->buffer_size. */\n  size_t safe_bytes = pp->buffer_pos < pp->buffer_size ? pp->buffer_pos : pp->buffer_size;\n  if (safe_bytes > 128)\n    safe_bytes = 128;\n\n  char *buf = (char *)&pp[1];\n  fprintf(f, \"sample_bytes=%zu: \", safe_bytes);\n  for (size_t i = 0; i < safe_bytes; ++i)\n  {\n    unsigned char c = (unsigned char)buf[i];\n    /* Print hex for unambiguous logging */\n    fprintf(f, \"%02X\", c);\n    if (i + 1 < safe_bytes)\n      fprintf(f, \" \");\n  }\n  fprintf(f, \"\\n\");\n\n  /* Also print a short ASCII-safe representation up to safe_bytes */\n  fprintf(f, \"sample_ascii: \\\"\");\n  for (size_t i = 0; i < safe_bytes; ++i)\n  {\n    unsigned char c = (unsigned char)buf[i];\n    if (c >= 0x20 && c <= 0x7E)\n      fputc(c, f);\n    else if (c == '\\r')\n      fputs(\"\\\\r\", f);\n    else if (c == '\\n')\n      fputs(\"\\\\n\", f);\n    else\n      fputs(\".\", f);\n  }\n  fprintf(f, \"\\\"\\n\");\n\n  fclose(f);\n}\n\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  log_multipart_probe(pp, \"enter\", 0, *ioffptr);\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n\n  log_multipart_probe(pp, \"after_scan_newline\", newline, *ioffptr);\n\n  if (newline == pp->buffer_size)\n  {\n    log_multipart_probe(pp, \"error_out_of_memory_condition\", newline, *ioffptr);\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n  {\n    log_multipart_probe(pp, \"need_more_data\", newline, *ioffptr);\n    return MHD_NO;              /* will need more data */\n  }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    log_multipart_probe(pp, \"empty_line_end_of_headers\", newline, *ioffptr);\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n\n  /* Log about Content-disposition path */\n  log_multipart_probe(pp, \"before_content_disposition_check\", newline, *ioffptr);\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    /* Logging the indexes we will pass into try_get_value so we can detect\n       cases where the prefix length might exceed available bytes. */\n    size_t cd_len = MHD_STATICSTR_LEN_(\"Content-disposition: \");\n    FILE *f = fopen(\"/tmp/logs/2349.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"matched Content-disposition prefix, cd_len=%zu, newline=%zu, buffer_size=%zu\\n\",\n              cd_len, newline, pp->buffer_size);\n      fclose(f);\n    }\n\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n\n    log_multipart_probe(pp, \"after_content_disposition\", newline, *ioffptr);\n  }\n  else\n  {\n    /* Before calling try_match_header for Content-type, log prefix length\n       and whether the available bytes are sufficient. */\n    size_t ct_len = MHD_STATICSTR_LEN_(\"Content-type: \");\n    size_t cte_len = MHD_STATICSTR_LEN_(\"Content-Transfer-Encoding: \");\n\n    FILE *f = fopen(\"/tmp/logs/2349.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"attempting try_match_header for Content-type (ct_len=%zu) and Content-Transfer-Encoding (cte_len=%zu)\\n\",\n              ct_len, cte_len);\n      fprintf(f, \"newline=%zu, buffer_size=%zu, buffer_pos=%zu\\n\",\n              newline, pp->buffer_size, pp->buffer_pos);\n      fprintf(f, \"newline >= ct_len? %s\\n\", (newline >= ct_len) ? \"yes\" : \"no\");\n      fprintf(f, \"newline >= cte_len? %s\\n\", (newline >= cte_len) ? \"yes\" : \"no\");\n      fprintf(f, \"buffer_size >= ct_len? %s\\n\", (pp->buffer_size >= ct_len) ? \"yes\" : \"no\");\n      fprintf(f, \"buffer_size >= cte_len? %s\\n\", (pp->buffer_size >= cte_len) ? \"yes\" : \"no\");\n      fclose(f);\n    }\n\n    log_multipart_probe(pp, \"before_try_match_header_Content-type\", newline, *ioffptr);\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n\n    log_multipart_probe(pp, \"between_try_match_headers\", newline, *ioffptr);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n\n    log_multipart_probe(pp, \"after_try_match_header_Content-Transfer-Encoding\", newline, *ioffptr);\n  }\n  (*ioffptr) += newline + 1;\n\n  log_multipart_probe(pp, \"exit_success\", newline, *ioffptr);\n  return MHD_YES;\n}\n"
}