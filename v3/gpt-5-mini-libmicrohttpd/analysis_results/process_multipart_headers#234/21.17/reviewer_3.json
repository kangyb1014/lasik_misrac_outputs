{
  "user_message": "An agent A claimed that the following process_multipart_headers code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of process_multipart_headers.\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nLikely violated. The call passes buf and a fixed prefix length (MHD_STATICSTR_LEN_(\"Content-type: \")) to try_match_header without ensuring that the buffer contains at least that many bytes. If try_match_header implements the prefix comparison using a string.h routine that reads exactly the provided length (e.g. memcmp/strncmp with the length parameter), and the prefix length is greater than the number of bytes safely addressable in the object pointed to by buf (for example if pp->buffer_size or the remaining allocated bytes at &pp[1] are smaller than the prefix length, or the code only ensured newline < pp->buffer_pos but not that pp->buffer_size >= prefix_len), then the comparison can read past the end of the buffer and violate Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTRY: pp=0x560fffc2f820 buffer_pos=221 buffer_size=1028\nfound potential newline at index 45 char=0x0D\nbuffer preview (len=128):\nhex: 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 66 69 65 6C 64 31 22 0D 0A 0D 0A 4A 6F 65 20 42 6C 6F 77 0D 0A 2D 2D 41 61 42 30 33 78 0D 0A 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65 \nchars: content-disposition: form-data; name=\"field1\"....Joe Blow..--AaB03x..content-disposition: form-data; name=\"pics\"; filename=\"file\nHEADER-LINE at buf=0x560fffc2f8c0 length=45\nbuffer preview (len=45):\nhex: 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 66 69 65 6C 64 31 22 \nchars: content-disposition: form-data; name=\"field1\"\nprefix lengths: Content-disposition=21 Content-type=14 Content-Transfer-Encoding=27\nAbout to check Content-disposition: calling MHD_str_equal_caseless_n_ with buf=0x560fffc2f8c0 and len=21\nMATCHED Content-disposition: -> calling try_get_value for name and filename\nafter try_get_value(name): content_name=0x560fffc2feb0\nafter try_get_value(filename): content_filename=(nil)\nADVANCE: incremented ioffptr by 46 -> new ioff=46\nENTRY: pp=0x560fffc2f820 buffer_pos=174 buffer_size=1028\nfound potential newline at index 0 char=0x0D\nbuffer preview (len=128):\nhex: 0D 0A 4A 6F 65 20 42 6C 6F 77 0D 0A 2D 2D 41 61 42 30 33 78 0D 0A 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65 31 2E 74 78 74 22 0D 0A 43 6F 6E 74 65 6E 74 2D 54 79 70 65 3A 20 74 65 78 74 2F 70 6C 61 69 6E 0D 0A 43 6F 6E 74 65 6E 74 2D 54 72 61 6E 73 \nchars: ..Joe Blow..--AaB03x..content-disposition: form-data; name=\"pics\"; filename=\"file1.txt\"..Content-Type: text/plain..Content-Trans\nEMPTY-LINE: end of headers. Setting skip_rn=RN_Full, state=8\nENTRY: pp=0x560fffc2f820 buffer_pos=152 buffer_size=1028\nfound potential newline at index 65 char=0x0D\nbuffer preview (len=128):\nhex: 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65 31 2E 74 78 74 22 0D 0A 43 6F 6E 74 65 6E 74 2D 54 79 70 65 3A 20 74 65 78 74 2F 70 6C 61 69 6E 0D 0A 43 6F 6E 74 65 6E 74 2D 54 72 61 6E 73 66 65 72 2D 45 6E 63 6F 64 69 6E 67 3A 20 62 69 6E 61 72 79 0D 0A \nchars: content-disposition: form-data; name=\"pics\"; filename=\"file1.txt\"..Content-Type: text/plain..Content-Transfer-Encoding: binary..\nHEADER-LINE at buf=0x560fffc2f8c0 length=65\nbuffer preview (len=65):\nhex: 63 6F 6E 74 65 6E 74 2D 64 69 73 70 6F 73 69 74 69 6F 6E 3A 20 66 6F 72 6D 2D 64 61 74 61 3B 20 6E 61 6D 65 3D 22 70 69 63 73 22 3B 20 66 69 6C 65 6E 61 6D 65 3D 22 66 69 6C 65 31 2E 74 78 74 22 \nchars: content-disposition: form-data; name=\"pics\"; filename=\"file1.txt\"\nprefix lengths: Content-disposition=21 Content-type=14 Content-Transfer-Encoding=27\nAbout to check Content-disposition: calling MHD_str_equal_caseless_n_ with buf=0x560fffc2f8c0 and len=21\nMATCHED Content-disposition: -> calling try_get_value for name and filename\nafter try_get_value(name): content_name=0x560fffc2feb0\nafter try_get_value(filename): content_filename=0x560fffc2fed0\nADVANCE: incremented ioffptr by 66 -> new ioff=66\nENTRY: pp=0x560fffc2f820 buffer_pos=85 buffer_size=1028\nfound potential newline at index 24 char=0x0D\nbuffer preview (len=85):\nhex: 43 6F 6E 74 65 6E 74 2D 54 79 70 65 3A 20 74 65 78 74 2F 70 6C 61 69 6E 0D 0A 43 6F 6E 74 65 6E 74 2D 54 72 61 6E 73 66 65 72 2D 45 6E 63 6F 64 69 6E 67 3A 20 62 69 6E 61 72 79 0D 0A 0D 0A 66 69 6C 65 64 61 74 61 0D 0A 2D 2D 41 61 42 30 33 78 2D 2D 0D 0A \nchars: Content-Type: text/plain..Content-Transfer-Encoding: binary....filedata..--AaB03x--..\nHEADER-LINE at buf=0x560fffc2f8c0 length=24\nbuffer preview (len=24):\nhex: 43 6F 6E 74 65 6E 74 2D 54 79 70 65 3A 20 74 65 78 74\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct: process_multipart_headers can lead to a Rule 21.17 violation because it invokes string-comparison helpers with a fixed prefix length without ensuring the object pointed to by buf is safe to be accessed for that many bytes.\n\nWhy: the function locates the end-of-line at index newline (stopping when newline < pp->buffer_pos) and NUL\u2011terminates buf at buf[newline]. It then calls MHD_str_equal_caseless_n_ and try_match_header passing buf and compile\u2011time prefix lengths (e.g. MHD_STATICSTR_LEN_(\"Content-type: \")). MISRA 21.17 requires that calls to string.h routines (memcmp/strncmp/etc.) must not access beyond the bounds of the object referenced by the pointer parameters. If the called helpers implement the comparison using a string.h routine that reads exactly the provided length, and if that length is larger than the number of bytes guaranteed to be addressable at buf (for example if pp->buffer_size were smaller than the prefix length, or if no explicit invariant ensures pp->buffer_size >= those prefix lengths), the helper would read past the buffer boundary.\n\nThe existing checks do not prove safety for all cases: the code only checks newline against pp->buffer_pos and tests for newline == pp->buffer_size (error) and newline == pp->buffer_pos (need more data). There is no explicit check that the prefix length passed to the comparator is <= the number of accessible bytes at buf (i.e. <= pp->buffer_size or <= the remaining allocated space). Therefore a potential out-of-bounds read exists unless the called helper functions themselves validate lengths or there is an external invariant guaranteeing pp->buffer_size is always >= the largest prefix length. The violation could therefore manifest depending on helper implementations or unexpected buffer_size values.\n\nRecommendation: either (a) ensure (and document) an invariant that pp->buffer_size is always >= the maximum prefix length before these calls, (b) pass the available length (newline or pp->buffer_pos) to the comparison helpers so they cannot read more than available, or (c) make the helpers validate the available buffer length before calling string.h routines."
}