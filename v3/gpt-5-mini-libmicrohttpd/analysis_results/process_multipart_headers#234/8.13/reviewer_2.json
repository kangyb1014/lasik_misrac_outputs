{
  "user_message": "An agent A claimed that the following process_multipart_headers code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of process_multipart_headers.\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes &buf[MHD_STATICSTR_LEN_(\"Content-disposition: \")] (a char *) to try_get_value. If try_get_value\u2019s parameter is declared as char * (i.e. non-const) but the function only reads the string, then the pointer parameter is not const-qualified and Rule 8.13 is violated. The correct approach is for try_get_value to accept a const char * (or for the passed pointer to be const-qualified) when the function does not modify the buffer.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-26 09:18:56 [probe] process_multipart_headers entry pp=0x5570be76d820 buf=0x5570be76d8c0 buffer_pos=221 buffer_size=1028 state=7\n2025-08-26 09:18:56 [probe] scanned newline position=45 (buffer_pos=221)\n2025-08-26 09:18:56 [probe] header line extracted buf=0x5570be76d8c0 header_content='content-disposition: form-data; name=\"field1\"' newline=45\n2025-08-26 09:18:56 [probe] try_get_value entry label='Content-disposition:name' key='name' bufptr=0x5570be76d8d5 content_before='form-data; name=\"field1\"' dest_ptr=0x5570be76d850\n2025-08-26 09:18:56 [probe] try_get_value did NOT modify buffer for label='Content-disposition:name' bufptr=0x5570be76d8d5 content='form-data; name=\"field1\"'\n2025-08-26 09:18:56 [probe] try_get_value exit label='Content-disposition:name' dest_ptr=0x5570be76e0d0\n2025-08-26 09:18:56 [probe] try_get_value entry label='Content-disposition:filename' key='filename' bufptr=0x5570be76d8d5 content_before='form-data; name=\"field1\"' dest_ptr=0x5570be76d860\n2025-08-26 09:18:56 [probe] try_get_value did NOT modify buffer for label='Content-disposition:filename' bufptr=0x5570be76d8d5 content='form-data; name=\"field1\"'\n2025-08-26 09:18:56 [probe] try_get_value exit label='Content-disposition:filename' dest_ptr=(nil)\n2025-08-26 09:18:56 [probe] advancing ioffptr by 46 -> new ioffptr value=46\n2025-08-26 09:18:56 [probe] process_multipart_headers exit pp=0x5570be76d820 state=7 content_name=0x5570be76e0d0 content_filename=(nil) content_type=(nil) content_transfer_encoding=(nil)\n2025-08-26 09:18:56 [probe] process_multipart_headers entry pp=0x5570be76d820 buf=0x5570be76d8c0 buffer_pos=174 buffer_size=1028 state=7\n2025-08-26 09:18:56 [probe] scanned newline position=0 (buffer_pos=174)\n2025-08-26 09:18:56 [probe] empty line: end of headers, next_state=8\n2025-08-26 09:18:56 [probe] process_multipart_headers entry pp=0x5570be76d820 buf=0x5570be76d8c0 buffer_pos=152 buffer_size=1028 state=7\n2025-08-26 09:18:56 [probe] scanned newline position=65 (buffer_pos=152)\n2025-08-26 09:18:56 [probe] header line extracted buf=0x5570be76d8c0 header_content='content-disposition: form-data; name=\"pics\"; filename=\"file1.txt\"' newline=65\n2025-08-26 09:18:56 [probe] try_get_value entry label='Content-disposition:name' key='name' bufptr=0x5570be76d8d5 content_before='form-data; name=\"pics\"; filename=\"file1.txt\"' dest_ptr=0x5570be76d850\n2025-08-26 09:18:56 [probe] try_get_value did NOT modify buffer for label='Content-disposition:name' bufptr=0x5570be76d8d5 content='form-data; name=\"pics\"; filename=\"file1.txt\"'\n2025-08-26 09:18:56 [probe] try_get_value exit label='Content-disposition:name' dest_ptr=0x5570be76e0d0\n2025-08-26 09:18:56 [probe] try_get_value entry label='Content-disposition:filename' key='filename' bufptr=0x5570be76d8d5 content_before='form-data; name=\"pics\"; filename=\"file1.txt\"' dest_ptr=0x5570be76d860\n2025-08-26 09:18:56 [probe] try_get_value did NOT modify buffer for label='Content-disposition:filename' bufptr=0x5570be76d8d5 content='form-data; name=\"pics\"; filename=\"file1.txt\"'\n2025-08-26 09:18:56 [probe] try_get_value exit label='Content-disposition:filename' dest_ptr=0x5570be76e0f0\n2025-08-26 09:18:56 [probe] advancing ioffptr by 66 -> new ioffptr value=66\n2025-08-26 09:18:56 [probe] process_multipart_headers exit pp=0x5570be76d820 state=7 content_name=0x5570be76e0d0 content_filename=0x5570be76e0f0 content_type=(nil) content_transfer_encoding=(nil)\n2025-08-26 09:18:56 [probe] process_multipart_headers entry pp=0x5570be76d820 buf=0x5570be76d8c0 buffer_pos=85 buffer_size=1028 state=7\n2025-08-26 09:18:56 [probe] scanned newline position=24 (buffer_pos=85)\n2025-08-26 09:18:56 [probe] header line extracted buf=0x5570be76d8c0 header_content='Content-Type: text/plain' newline=24\n2025-08-26 09:18:56 [probe] try_match_header entry label='Content-type' hdr='Content-type: ' hdr_len=14 buf=0x5570be76d8c0 buf_content='Content-Type: text/plain' dest_ptr=0x5570be76d858\n2025-08-26 09:18:56 [probe] try_match_header exit label='Content-type' buf=0x5570be76d8c0 buf_content='Content-Type: text/plain' dest_ptr=0x5570be76e110\n2025-08-26 09:18:\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA 8.13 is about pointer declarations: a pointer shall point to a const-qualified type whenever possible. The snippet shown does not by itself prove a Rule 8.13 violation. In process_multipart_headers the buffer is mutable (buf is char* and the code writes buf[newline] = '\\0'), so the local pointer type is appropriate. The only possible 8.13 issue would be in the declaration of try_get_value (or try_match_header) if those functions declare their parameter as char * but only read from the buffer. The call site here (&buf[...]) is fine: passing a char * to a function declared to take const char * is allowed and preferred. The execution log even shows try_get_value did not modify the buffer at runtime, which suggests try_get_value\u2019s parameter could be const-qualified \u2014 but the snippet does not include try_get_value\u2019s prototype, so you cannot conclude a violation from this code alone. Conclusion: the report as stated is not correct for process_multipart_headers; a violation would exist only if try_get_value\u2019s declaration uses non-const pointer unnecessarily."
}