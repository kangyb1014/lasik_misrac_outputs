{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function try_get_value is declared to take a non-const pointer for the header text (for example: int try_get_value(char *header, const char *key, char **out)), then this call passes a modifiable char * where a const-qualified pointer would be appropriate because the buffer is being examined, not modified. In that case Rule 8.13 is violated \u2014 the header parameter should be declared const char * (or buf should be const char *) so the pointer points to a const-qualified type whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_multipart_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_multipart_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/2343.txt */\nstatic void append_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    f = fopen(\"/tmp/logs/2343.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Probe function to log key state for the multipart header processing */\nstatic void probe_process_state(struct MHD_PostProcessor *pp,\n                                char *buf,\n                                size_t newline,\n                                size_t *ioffptr,\n                                enum PP_State next_state)\n{\n    append_log(\"[probe] process_multipart_headers enter\");\n    append_log(\"[probe] pp=%p buf=%p buffer_pos=%zu buffer_size=%zu state=%d skip_rn=%d\",\n               (void *)pp, (void *)buf, pp->buffer_pos, pp->buffer_size, (int)pp->state, (int)pp->skip_rn);\n    append_log(\"[probe] computed newline=%zu ioffptr=%p (*ioffptr)=%zu next_state=%d\",\n               newline, (void *)ioffptr, (ioffptr ? *ioffptr : (size_t)0), (int)next_state);\n}\n\n/* Probe before calling try_get_value / try_match_header to record pointers and contents */\nstatic void probe_header_call(const char *tag, const char *label, char *ptr)\n{\n    /* ptr is expected to be a NUL-terminated portion of buf */\n    append_log(\"[probe] %s: label=\\\"%s\\\" ptr=%p\", tag, label, (void *)ptr);\n    if (ptr != NULL) {\n        /* limit logged content length to avoid huge logs */\n        char sample[256];\n        size_t len = strlen(ptr);\n        if (len >= sizeof(sample))\n            len = sizeof(sample) - 1;\n        memcpy(sample, ptr, len);\n        sample[len] = '\\0';\n        append_log(\"[probe] %s: content_sample=\\\"%s\\\" (len=%zu)\", tag, sample, strlen(sample));\n    }\n}\n\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n\n  /* Log initial state before scanning */\n  probe_process_state(pp, buf, newline, ioffptr, next_state);\n\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n\n  /* Log after scanning for newline */\n  append_log(\"[probe] after scan newline=%zu buffer_pos=%zu buffer_size=%zu\",\n             newline, pp->buffer_pos, pp->buffer_size);\n\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    append_log(\"[probe] error: newline == buffer_size -> set state=PP_Error\");\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n  {\n    append_log(\"[probe] need more data: newline == buffer_pos -> returning MHD_NO\");\n    return MHD_NO;              /* will need more data */\n  }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    append_log(\"[probe] empty line: end of headers -> skip_rn=RN_Full state=%d\", (int)pp->state);\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n\n  /* Null-terminate this header for safe inspection */\n  buf[newline] = '\\0';\n\n  /* Log the header line that was found */\n  probe_header_call(\"header_line\", \"full\", buf);\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    /* Log the pointer and content passed to try_get_value for name and filename */\n    char *value_start = &buf[MHD_STATICSTR_LEN_(\"Content-disposition: \")];\n    probe_header_call(\"try_get_value\", \"name\", value_start);\n    try_get_value (value_start,\n                   \"name\",\n                   &pp->content_name);\n    append_log(\"[probe] after try_get_value name: pp->content_name=%p\", (void *)pp->content_name);\n\n    probe_header_call(\"try_get_value\", \"filename\", value_start);\n    try_get_value (value_start,\n                   \"filename\",\n                   &pp->content_filename);\n    append_log(\"[probe] after try_get_value filename: pp->content_filename=%p\", (void *)pp->content_filename);\n  }\n  else\n  {\n    probe_header_call(\"try_match_header\", \"Content-type\", buf);\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    append_log(\"[probe] after try_match_header Content-type: pp->content_type=%p\", (void *)pp->content_type);\n\n    probe_header_call(\"try_match_header\", \"Content-Transfer-Encoding\", buf);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n    append_log(\"[probe] after try_match_header Content-Transfer-Encoding: pp->content_transfer_encoding=%p\",\n               (void *)pp->content_transfer_encoding);\n  }\n\n  (*ioffptr) += newline + 1;\n  append_log(\"[probe] advancing ioffptr by %zu -> new value %zu\", newline + 1, *ioffptr);\n  append_log(\"[probe] process_multipart_headers exit returning MHD_YES\");\n  return MHD_YES;\n}\n"
}