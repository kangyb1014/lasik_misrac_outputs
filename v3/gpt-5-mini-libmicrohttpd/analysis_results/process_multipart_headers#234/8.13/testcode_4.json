{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of try_match_header declares its first parameter as a non-const pointer (for example: int try_match_header(char *header, size_t len, char *buf, char **out)), then the call try_match_header(\"Content-Transfer-Encoding: \", ...) passes a string literal to a non-const char * parameter. That causes a pointer to a string literal to be treated as pointing to a non-const type, violating MISRA C 2023 Rule 8.13. (Fix: change the function prototype to take const char * for the header argument.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_multipart_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_multipart_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append a log entry about the current control path and state.\n   Writes to /tmp/logs/2343.txt. Keeps the original logic unchanged. */\nstatic void probe_log(const char *stage,\n                      const char *header,\n                      size_t hlen,\n                      char *buf,\n                      size_t newline,\n                      struct MHD_PostProcessor *pp)\n{\n    FILE *f = fopen(\"/tmp/logs/2343.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging */\n    }\n\n    fprintf(f, \"[process_multipart_headers] stage=%s\\n\", stage);\n    if (header != NULL)\n    {\n        /* print header pointer and a bounded view of the header content */\n        fprintf(f, \"  header_ptr=%p header_len=%zu header_text=\\\"%.*s\\\"\\n\",\n                (const void *)header,\n                hlen,\n                (int) (hlen > 128 ? 128 : hlen),\n                header);\n    }\n    fprintf(f, \"  buf_ptr=%p newline=%zu\\n\",\n            (void *)buf,\n            newline);\n\n    /* attempt to print useful pp state fields if available */\n    /* Use safe accesses assuming usual names from surrounding code */\n    fprintf(f, \"  buffer_pos=%zu buffer_size=%zu state=%d skip_rn=%d\\n\",\n            (size_t) pp->buffer_pos,\n            (size_t) pp->buffer_size,\n            (int) pp->state,\n            (int) pp->skip_rn);\n\n    /* Print pointers for content_* members so callers can correlate results */\n    fprintf(f, \"  content_name=%p content_filename=%p content_type=%p content_transfer_encoding=%p\\n\",\n            (void *) pp->content_name,\n            (void *) pp->content_filename,\n            (void *) pp->content_type,\n            (void *) pp->content_transfer_encoding);\n\n    /* Print a prefix of the buffer (bounded) so callers can see the header content\n       without risking very long prints. */\n    {\n        size_t n = newline;\n        if (n > 128U) n = 128U;\n        fprintf(f, \"  buf_prefix=\\\"\");\n        if (buf != NULL && n > 0U)\n        {\n            /* Use precision specification to bound output */\n            fprintf(f, \"%.*s\", (int) n, buf);\n        }\n        fprintf(f, \"\\\"\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  /* Log entry with initial state */\n  newline = 0;\n  probe_log(\"entry\", NULL, 0U, buf, newline, pp);\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n\n  /* Log after scanning for newline so other agents can see the computed index */\n  probe_log(\"after_scan\", NULL, 0U, buf, newline, pp);\n\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    probe_log(\"error_out_of_memory\", NULL, 0U, buf, newline, pp);\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n  {\n    probe_log(\"need_more_data\", NULL, 0U, buf, newline, pp);\n    return MHD_NO;              /* will need more data */\n  }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    probe_log(\"end_of_headers\", NULL, 0U, buf, newline, pp);\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n\n  /* Log the actual header line we just terminated */\n  probe_log(\"got_header\", NULL, 0U, buf, newline, pp);\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 /* keep alignment with existing code: */\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    /* Log before extracting values from content-disposition */\n    probe_log(\"before_try_get_value_content_disposition\",\n              \"Content-disposition: \",\n              (size_t)(sizeof(\"Content-disposition: \")) - 1U,\n              buf,\n              newline,\n              pp);\n\n    try_get_value (&buf[(sizeof(\"Content-disposition: \")) - 1U],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[(sizeof(\"Content-disposition: \")) - 1U],\n                   \"filename\",\n                   &pp->content_filename);\n\n    /* Log after attempting to extract name/filename */\n    probe_log(\"after_try_get_value_content_disposition\",\n              \"Content-disposition: \",\n              (size_t)(sizeof(\"Content-disposition: \")) - 1U,\n              buf,\n              newline,\n              pp);\n  }\n  else\n  {\n    /* Log before calling try_match_header for Content-type */\n    probe_log(\"before_try_match_header_content_type\",\n              \"Content-type: \",\n              (size_t)(sizeof(\"Content-type: \")) - 1U,\n              buf,\n              newline,\n              pp);\n\n    try_match_header (\"Content-type: \",\n                      (size_t)(sizeof(\"Content-type: \")) - 1U,\n                      buf,\n                      &pp->content_type);\n\n    /* Log after calling try_match_header for Content-type */\n    probe_log(\"after_try_match_header_content_type\",\n              \"Content-type: \",\n              (size_t)(sizeof(\"Content-type: \")) - 1U,\n              buf,\n              newline,\n              pp);\n\n    /* Log before calling try_match_header for Content-Transfer-Encoding. This\n       is the call that demonstrates passing a string literal as the header\n       argument; log the pointer and text so external agents can see the\n       pointer value and confirm whether a non-const parameter would receive\n       a pointer to a string literal. */\n    probe_log(\"before_try_match_header_content_transfer_encoding\",\n              \"Content-Transfer-Encoding: \",\n              (size_t)(sizeof(\"Content-Transfer-Encoding: \")) - 1U,\n              buf,\n              newline,\n              pp);\n\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      (size_t)(sizeof(\"Content-Transfer-Encoding: \")) - 1U,\n                      buf,\n                      &pp->content_transfer_encoding);\n\n    /* Log after calling try_match_header for Content-Transfer-Encoding */\n    probe_log(\"after_try_match_header_content_transfer_encoding\",\n              \"Content-Transfer-Encoding: \",\n              (size_t)(sizeof(\"Content-Transfer-Encoding: \")) - 1U,\n              buf,\n              newline,\n              pp);\n  }\n  (*ioffptr) += newline + 1;\n\n  probe_log(\"return_yes\", NULL, 0U, buf, newline, pp);\n  return MHD_YES;\n}\n"
}