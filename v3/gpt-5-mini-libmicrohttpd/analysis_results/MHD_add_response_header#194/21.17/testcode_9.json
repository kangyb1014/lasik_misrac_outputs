{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf content is NULL or not a NUL-terminated C string, the call to MHD_str_equal_caseless_(content, \"chunked\") may cause the underlying string-handling routine (e.g. strcmp/strncasecmp/memcmp) to read through an invalid pointer or past the end of the object. For example, if a caller passes content == NULL, and MHD_str_equal_caseless_ invokes a standard <string.h> function that assumes non-NULL, this will result in an out-of-bounds access (or dereference of NULL). Likewise, if content points to a buffer that is not NUL-terminated, the comparator may read beyond the buffer\u2019s bounds searching for a terminator.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1949.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "static void\nmhd_log_probe (const char *where,\n               const char *header,\n               const char *content,\n               struct MHD_Response *response)\n{\n  FILE *f = fopen(\"/tmp/logs/1949.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log the probe site, pointer values and NULLness. Do not dereference\n   * header/content pointers to avoid introducing new UB. If response is\n   * available, log some of its flag fields safely. */\n  fprintf (f, \"[MHD_PROBE] site=%s header_ptr=%p header_is_null=%d content_ptr=%p content_is_null=%d response_ptr=%p\",\n           where,\n           (void *) header,\n           (header == NULL) ? 1 : 0,\n           (void *) content,\n           (content == NULL) ? 1 : 0,\n           (void *) response);\n\n  if (NULL != response)\n    {\n      /* Accessing these fields is assumed safe because response is\n       * provided by the caller of MHD_add_response_header in normal use. */\n      fprintf (f, \" flags_auto=0x%08x flags=0x%08x\",\n               (unsigned int) response->flags_auto,\n               (unsigned int) response->flags);\n    }\n\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Probe: about to check for Connection header */\n  mhd_log_probe (\"entry:check_connection\", header, content, response);\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    {\n      mhd_log_probe (\"match:connection\", header, content, response);\n      return add_response_header_connection (response, content);\n    }\n\n  /* Probe: about to check for Transfer-Encoding header */\n  mhd_log_probe (\"entry:check_transfer_encoding\", header, content, response);\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_log_probe (\"match:transfer_encoding\", header, content, response);\n\n    /* Probe: about to compare content against literal \"chunked\". This is\n     * the call flagged in the violation scenario (content could be NULL or\n     * non-NUL-terminated). We log the state immediately before calling the\n     * comparator so external agents can correlate events with any crash or\n     * invalid memory access. */\n    mhd_log_probe (\"before_content_compare_chunked\", header, content, response);\n\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      {\n        mhd_log_probe (\"not_chunked\", header, content, response);\n        return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n      }\n\n    mhd_log_probe (\"is_chunked\", header, content, response);\n\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      {\n        mhd_log_probe (\"already_has_chunked\", header, content, response);\n        return MHD_YES;  /* Already has \"chunked\" encoding header */\n      }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      {\n        mhd_log_probe (\"has_content_length_no_insanity\", header, content, response);\n        return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n      }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_log_probe (\"added_chunked\", header, content, response);\n      return MHD_YES;\n    }\n    mhd_log_probe (\"failed_add_entry_chunked\", header, content, response);\n    return MHD_NO;\n  }\n\n  /* Probe: about to check for Date header */\n  mhd_log_probe (\"entry:check_date\", header, content, response);\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_log_probe (\"match:date\", header, content, response);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      mhd_log_probe (\"removed_existing_date\", header, content, response);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_log_probe (\"added_date\", header, content, response);\n      return MHD_YES;\n    }\n    mhd_log_probe (\"failed_add_entry_date\", header, content, response);\n    return MHD_NO;\n  }\n\n  /* Probe: about to check for Content-Length header */\n  mhd_log_probe (\"entry:check_content_length\", header, content, response);\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_log_probe (\"match:content_length\", header, content, response);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_log_probe (\"added_content_length\", header, content, response);\n        return MHD_YES;\n      }\n    }\n    mhd_log_probe (\"failed_add_entry_content_length\", header, content, response);\n    return MHD_NO;\n  }\n\n  /* Final probe: falling through to generic add_response_entry */\n  mhd_log_probe (\"fallthrough:add_response_entry\", header, content, response);\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}