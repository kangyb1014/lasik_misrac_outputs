{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_TRANSFER_ENCODING) may invoke standard string handling routines (e.g. strcmp/strlen/strncasecmp) on the pointer 'header'. If 'header' is NULL or points to a non\u2013NUL-terminated buffer (or a buffer shorter than expected), such routines can read past the object bounds and cause out-of-bounds accesses. For example, if a caller passes a pointer to a length-limited header buffer without a terminating '\\0', and MHD_str_equal_caseless_ internally uses strlen/strcmp, the comparison will read beyond the buffer boundary and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1949.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n\n/* Probe logging helper. Writes to /tmp/logs/1949.txt. Does not attempt to\n * dereference header/content (prints pointer values only). Only reads\n * response->flags and response->flags_auto if response is non-NULL to avoid\n * introducing additional UB. */\nstatic void probe_log(const char *label,\n                      const char *header,\n                      const char *content,\n                      struct MHD_Response *response,\n                      const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/1949.txt\", \"a\");\n  if (! f)\n    return;\n  if (response != NULL)\n    fprintf(f, \"%s: header=%p content=%p response=%p flags=0x%lx flags_auto=0x%lx note=%s\\n\",\n            label,\n            (void *) header,\n            (void *) content,\n            (void *) response,\n            (unsigned long) response->flags,\n            (unsigned long) response->flags_auto,\n            extra ? extra : \"\");\n  else\n    fprintf(f, \"%s: header=%p content=%p response=%p note=%s\\n\",\n            label,\n            (void *) header,\n            (void *) content,\n            (void *) response,\n            extra ? extra : \"\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Entry log */\n  probe_log(\"enter-MHD_add_response_header\", header, content, response, \"entry\");\n\n  /* CONNECTION header check */\n  {\n    char note[128];\n    snprintf(note, sizeof(note), \"about to compare with MHD_HTTP_HEADER_CONNECTION\");\n    probe_log(\"cmp-connection-pre\", header, content, response, note);\n    int eq = MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION);\n    snprintf(note, sizeof(note), \"cmp-connection result=%d\", eq);\n    probe_log(\"cmp-connection-post\", header, content, response, note);\n    if (eq)\n      return add_response_header_connection (response, content);\n  }\n\n  /* TRANSFER-ENCODING header check */\n  {\n    char note[128];\n    snprintf(note, sizeof(note), \"about to compare with MHD_HTTP_HEADER_TRANSFER_ENCODING\");\n    probe_log(\"cmp-transfer-pre\", header, content, response, note);\n    int eq_te = MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_TRANSFER_ENCODING);\n    snprintf(note, sizeof(note), \"cmp-transfer result=%d\", eq_te);\n    probe_log(\"cmp-transfer-post\", header, content, response, note);\n    if (eq_te)\n    {\n      /* content == \"chunked\" ? */\n      snprintf(note, sizeof(note), \"about to compare content with \\\"chunked\\\"\");\n      probe_log(\"cmp-content-chunked-pre\", header, content, response, note);\n      int eq_chunked = MHD_str_equal_caseless_ (content, \"chunked\");\n      snprintf(note, sizeof(note), \"cmp-content-chunked result=%d\", eq_chunked);\n      probe_log(\"cmp-content-chunked-post\", header, content, response, note);\n\n      if (! eq_chunked)\n      {\n        probe_log(\"transfer-encoding-not-chunked\", header, content, response,\n                  \"Only \\\"chunked\\\" encoding is allowed\");\n        return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n      }\n      if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      {\n        probe_log(\"transfer-encoding-already-has-chunked\", header, content, response,\n                  \"Already has \\\"chunked\\\" encoding header\");\n        return MHD_YES;  /* Already has \"chunked\" encoding header */\n      }\n      if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n           (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      {\n        probe_log(\"transfer-encoding-conflict-content-length\", header, content, response,\n                  \"Has Content-Length header and no Insanity flag\");\n        return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n      }\n      {\n        int addret;\n        probe_log(\"transfer-encoding-before-add-entry\", header, content, response,\n                  \"calling add_response_entry\");\n        addret = (MHD_NO != add_response_entry (response,\n                                               MHD_HEADER_KIND,\n                                               header,\n                                               content));\n        snprintf(note, sizeof(note), \"add_response_entry returned %d\", addret);\n        probe_log(\"transfer-encoding-after-add-entry\", header, content, response, note);\n        if (MHD_NO != addret)\n        {\n          response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n          probe_log(\"transfer-encoding-added-success\", header, content, response,\n                    \"set RAF_HAS_TRANS_ENC_CHUNKED and returning YES\");\n          return MHD_YES;\n        }\n        probe_log(\"transfer-encoding-added-failed\", header, content, response,\n                  \"add_response_entry failed, returning NO\");\n        return MHD_NO;\n      }\n    }\n  }\n\n  /* DATE header check */\n  {\n    char note[128];\n    snprintf(note, sizeof(note), \"about to compare with MHD_HTTP_HEADER_DATE\");\n    probe_log(\"cmp-date-pre\", header, content, response, note);\n    int eq_date = MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_DATE);\n    snprintf(note, sizeof(note), \"cmp-date result=%d\", eq_date);\n    probe_log(\"cmp-date-post\", header, content, response, note);\n    if (eq_date)\n    {\n      if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n      {\n        struct MHD_HTTP_Res_Header *hdr;\n        probe_log(\"date-has-existing\", header, content, response,\n                  \"existing date header found, will remove\");\n        hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                           MHD_HTTP_HEADER_DATE,\n                                           MHD_STATICSTR_LEN_ ( \\\n                                             MHD_HTTP_HEADER_DATE));\n        mhd_assert (NULL != hdr);\n        _MHD_remove_header (response, hdr);\n        if (NULL != hdr->value)\n          free (hdr->value);\n        free (hdr->header);\n        free (hdr);\n        probe_log(\"date-existing-removed\", header, content, response,\n                  \"removed old date header\");\n      }\n      probe_log(\"date-before-add-entry\", header, content, response,\n                \"calling add_response_entry for Date\");\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n        probe_log(\"date-added-success\", header, content, response,\n                  \"set RAF_HAS_DATE_HDR and returning YES\");\n        return MHD_YES;\n      }\n      probe_log(\"date-added-failed\", header, content, response,\n                \"add_response_entry failed for Date, returning NO\");\n      return MHD_NO;\n    }\n  }\n\n  /* CONTENT-LENGTH header check */\n  {\n    char note[128];\n    snprintf(note, sizeof(note), \"about to compare with MHD_HTTP_HEADER_CONTENT_LENGTH\");\n    probe_log(\"cmp-content-length-pre\", header, content, response, note);\n    int eq_cl = MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONTENT_LENGTH);\n    snprintf(note, sizeof(note), \"cmp-content-length result=%d\", eq_cl);\n    probe_log(\"cmp-content-length-post\", header, content, response, note);\n    if (eq_cl)\n    {\n      /* Generally MHD sets automatically correct \"Content-Length\" always when\n       * needed.\n       * Custom \"Content-Length\" header is allowed only in special cases. */\n      if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n           ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n            (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                           | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n      {\n        probe_log(\"content-length-allowed-branch\", header, content, response,\n                  \"allowed branch, calling add_response_entry\");\n        if (MHD_NO != add_response_entry (response,\n                                          MHD_HEADER_KIND,\n                                          header,\n                                          content))\n        {\n          response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n          probe_log(\"content-length-added-success\", header, content, response,\n                    \"set RAF_HAS_CONTENT_LENGTH and returning YES\");\n          return MHD_YES;\n        }\n      }\n      probe_log(\"content-length-return-no\", header, content, response,\n                \"returning NO for Content-Length\");\n      return MHD_NO;\n    }\n  }\n\n  probe_log(\"fallback-add-response-entry\", header, content, response,\n            \"calling generic add_response_entry at end\");\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}