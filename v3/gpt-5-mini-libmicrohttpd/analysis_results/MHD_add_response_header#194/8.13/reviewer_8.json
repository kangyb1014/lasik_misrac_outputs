{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the function add_response_entry is declared to take non-const char * parameters for header/content, then the call add_response_entry(..., header, content) passes const char * arguments (MHD_add_response_header declares header and content as const char *), discarding the const qualifier. That discarding of const violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible). To comply, add_response_entry should accept const char * for these parameters (or the call must not discard const).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab501f, content=0x563f20ab502d, header_str=Header-Type-A, content_str=value-a1, flags=0x0, flags_auto=0x0)\nCALL: default add_response_entry returned 1; returning that value\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab501f, content=0x563f20ab504d, header_str=Header-Type-A, content_str=value-a2, flags=0x0, flags_auto=0x0)\nCALL: default add_response_entry returned 1; returning that value\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab501f, content=0x563f20ab5087, header_str=Header-Type-A, content_str=value-a3, flags=0x0, flags_auto=0x0)\nCALL: default add_response_entry returned 1; returning that value\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab5101, header_str=Connection, content_str=a,b,c,d,e, flags=0x0, flags_auto=0x0)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab518e, header_str=Connection, content_str=i,k,l,m,n,o,p,close, flags=0x0, flags_auto=0x0)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab5240, header_str=Connection, content_str=1,2,3,4,5,6,7,close, flags=0x0, flags_auto=0x0)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab526f, header_str=Connection, content_str=8,9,close, flags=0x0, flags_auto=0x3)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab533c, header_str=Connection, content_str=10,12, flags=0x0, flags_auto=0x3)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab595d, header_str=Connection, content_str=close, flags=0x0, flags_auto=0x1)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab595d, header_str=Connection, content_str=close, flags=0x0, flags_auto=0x3)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab595d, header_str=Connection, content_str=close, flags=0x0, flags_auto=0x0)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab595d, header_str=Connection, content_str=close, flags=0x0, flags_auto=0x3)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab5570, header_str=Connection, content_str=close,other-token, flags=0x0, flags_auto=0x0)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab5595, header_str=Connection, content_str=close, new-token, flags=0x0, flags_auto=0x3)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab55ed, header_str=Connection, content_str=close, one-long-token, flags=0x0, flags_auto=0x0)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab595d, header_str=Connection, content_str=close, flags=0x0, flags_auto=0x3)\nBRANCH: connection -> add_response_header_connection returned 1\nENTER: MHD_add_response_header(response=0x563f57dab820, header=0x563f20ab50f6, content=0x563f20ab595d, header_str=Connection, content_str=close, flags=0x0, flags_auto=0x0)\nBRANCH: connection -> add_response_header_connect\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 says pointers should be declared to point to const-qualified types wherever possible. In the code shown, MHD_add_response_header declares both header and content as const char * \u2014 that conforms to the intent of 8.13 for those local parameters. The only potential problem described in the scenario is that add_response_entry might be declared to take non-const char * parameters. If that is the case, then the mismatch (caller having const char * and callee having char *) is indeed a problem: the callee\u2019s declaration should use const char * to avoid discarding const and to satisfy 8.13. However, that fault is in the declaration of add_response_entry, not in the MHD_add_response_header function itself. The evidence in the log does not show the prototype of add_response_entry, so you cannot conclude from the shown MHD_add_response_header code alone that it violates Rule 8.13. Conclusion: the underlying concern (a non-const parameter where const could be used) is valid if add_response_entry uses non-const parameters, but agent A\u2019s claim that MHD_add_response_header itself violates MISRA C 2023 Rule 8.13 is incorrect \u2014 the violation would be in add_response_entry\u2019s declaration, not in the caller shown here."
}