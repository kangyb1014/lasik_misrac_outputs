{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function MHD_get_response_element_n_ is declared with a non-const pointer parameter for the header (e.g. char *header), then this call passes a string literal (MHD_HTTP_HEADER_DATE) to a non-const pointer. String literals have static storage and should be pointed to by const-qualified pointers; therefore Rule 8.13 is violated. The concrete violation scenario: MHD_HTTP_HEADER_DATE expands to a string literal (or otherwise immutable data) and the prototype of MHD_get_response_element_n_ declares the header parameter as char * (not const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1943.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/1943.txt */\nstatic void mhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1943.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Log entry into function with pointers and strings (if available) */\n  mhd_probe_log (\"ENTER MHD_add_response_header: response=%p, header=%p, header_str=\\\"%s\\\", content=%p, content_str=\\\"%s\\\"\",\n                 (void *) response,\n                 (const void *) header, header ? header : \"(null)\",\n                 (const void *) content, content ? content : \"(null)\");\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    mhd_probe_log (\"Taking CONNECTION branch\");\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_probe_log (\"Taking TRANSFER_ENCODING branch: content=\\\"%s\\\"\",\n                   content ? content : \"(null)\");\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      mhd_probe_log (\"TRANSFER_ENCODING rejected: only \\\"chunked\\\" allowed\");\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      mhd_probe_log (\"TRANSFER_ENCODING already present (flags_auto=0x%lx)\",\n                     (unsigned long) response->flags_auto);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      mhd_probe_log (\"TRANSFER_ENCODING conflict with CONTENT_LENGTH (flags_auto=0x%lx, flags=0x%lx)\",\n                     (unsigned long) response->flags_auto,\n                     (unsigned long) response->flags);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_probe_log (\"TRANSFER_ENCODING added, new flags_auto=0x%lx\",\n                     (unsigned long) response->flags_auto);\n      return MHD_YES;\n    }\n    mhd_probe_log (\"TRANSFER_ENCODING add_response_entry failed\");\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_probe_log (\"Taking DATE branch: flags_auto=0x%lx\",\n                   (unsigned long) response->flags_auto);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n\n      mhd_probe_log (\"DATE header already present: about to lookup existing header entry\");\n\n      mhd_probe_log (\"About to call MHD_get_response_element_n_: passing header macro MHD_HTTP_HEADER_DATE=%p (\\\"%s\\\"), len=%u\",\n                     (const void *) MHD_HTTP_HEADER_DATE,\n                     MHD_HTTP_HEADER_DATE,\n                     (unsigned) MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE));\n\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_probe_log (\"MHD_get_response_element_n_ returned hdr=%p\", (void *) hdr);\n\n      /* Keep existing assert to preserve original behavior */\n      mhd_assert (NULL != hdr);\n\n      if (NULL != hdr)\n      {\n        mhd_probe_log (\"Existing header entry: hdr=%p, hdr->header=%p, header_str=\\\"%s\\\", hdr->value=%p, value_str=\\\"%s\\\"\",\n                       (void *) hdr,\n                       (void *) hdr->header, hdr->header ? hdr->header : \"(null)\",\n                       (void *) hdr->value, hdr->value ? hdr->value : \"(null)\");\n      }\n\n      _MHD_remove_header (response, hdr);\n      mhd_probe_log (\"Removed header entry via _MHD_remove_header: hdr=%p\", (void *) hdr);\n\n      if (NULL != hdr->value)\n      {\n        mhd_probe_log (\"Freeing hdr->value at %p\", (void *) hdr->value);\n        free (hdr->value);\n      }\n\n      mhd_probe_log (\"Freeing hdr->header at %p (caller will free regardless of origin)\", (void *) hdr->header);\n      free (hdr->header);\n\n      mhd_probe_log (\"Freeing hdr struct at %p\", (void *) hdr);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_probe_log (\"DATE header added, new flags_auto=0x%lx\", (unsigned long) response->flags_auto);\n      return MHD_YES;\n    }\n    mhd_probe_log (\"DATE add_response_entry failed\");\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_probe_log (\"Taking CONTENT_LENGTH branch: flags_auto=0x%lx, flags=0x%lx\",\n                   (unsigned long) response->flags_auto,\n                   (unsigned long) response->flags);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_probe_log (\"CONTENT_LENGTH added, new flags_auto=0x%lx\",\n                       (unsigned long) response->flags_auto);\n        return MHD_YES;\n      }\n    }\n    mhd_probe_log (\"CONTENT_LENGTH branch falling through (not added)\");\n    return MHD_NO;\n  }\n\n  mhd_probe_log (\"Falling back to add_response_entry for header=\\\"%s\\\"\", header ? header : \"(null)\");\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}