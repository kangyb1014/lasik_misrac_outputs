{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_connection_set_initial_state_:\n```c\nvoid\nMHD_connection_set_initial_state_ (struct MHD_Connection *c)\n{\n  size_t read_buf_size;\n\n#ifdef HTTPS_SUPPORT\n  mhd_assert ( (0 == (c->daemon->options & MHD_USE_TLS)) || \\\n               (MHD_TLS_CONN_INIT == c->tls_state) );\n  mhd_assert ( (0 != (c->daemon->options & MHD_USE_TLS)) || \\\n               (MHD_TLS_CONN_NO_TLS == c->tls_state) );\n#endif /* HTTPS_SUPPORT */\n  mhd_assert (MHD_CONNECTION_INIT == c->state);\n\n  c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n  c->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n\n  memset (&c->rq, 0, sizeof(c->rq));\n  memset (&c->rp, 0, sizeof(c->rp));\n\n  c->write_buffer = NULL;\n  c->write_buffer_size = 0;\n  c->write_buffer_send_offset = 0;\n  c->write_buffer_append_offset = 0;\n\n  c->continue_message_write_offset = 0;\n\n  c->read_buffer_offset = 0;\n  read_buf_size = c->daemon->pool_size / 2;\n  c->read_buffer\n    = MHD_pool_allocate (c->pool,\n                         read_buf_size,\n                         false);\n  c->read_buffer_size = read_buf_size;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments require investigation for MISRA C:2023 Rule 8.13 in this function. Rationale by pointer usage in the snippet:\n\n- Function parameter: \"struct MHD_Connection *c\"\n  - The function clearly modifies the object pointed to (many assignments to c->fields). Therefore the pointer must not point to a const-qualified type and cannot be const-qualified here.\n\n- c->read_buffer and c->write_buffer\n  - c->read_buffer is assigned the result of MHD_pool_allocate and c->write_buffer is explicitly set to NULL; these buffer pointers represent modifiable buffers, so they cannot/should not be const-qualified.\n\n- c->pool (used in MHD_pool_allocate)\n  - The pool is passed to an allocator routine (MHD_pool_allocate) that is very likely to modify pool state; thus the pool pointer cannot be made to point to a const-qualified type.\n\n- &c->rq and &c->rp passed to memset\n  - The address-of expressions are passed to memset which writes into those structures, so the pointers must be to non-const objects.\n\n- c->daemon and accesses to c->daemon->options and c->daemon->pool_size\n  - In this snippet these fields are only read (in assertions and to compute read_buf_size). However, the daemon pointer is a member of the mutable connection object (c) and the code also uses c->pool (related state) with functions that likely modify daemon/pool state. Without the full type declarations and the semantics of called functions, it is not safe to change the member types to const here. Additionally, making c->daemon a pointer-to-const would not be feasible if other code paths modify daemon through the same connection object.\n\n- Calls to mhd_assert and MHD_pool_allocate\n  - The prototypes of these functions/macros are not visible here; they may require non-const pointer types (or the semantics require modification). Given that, the current usage cannot be judged as violating or requiring const.\n\nGiven the visible operations (writes to the pointed-to structure and buffers, passing pointers to functions that modify data), none of the pointer usages in this function can be safely or obviously converted to point to const-qualified types. Therefore there are no suspicious fragments to report for Rule 8.13 in this code."
}