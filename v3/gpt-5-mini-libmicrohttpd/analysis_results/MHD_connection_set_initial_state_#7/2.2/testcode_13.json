{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe two mhd_assert(...) calls are purely diagnostic checks: they evaluate conditions about c->daemon->options and c->tls_state but do not modify program state. If these conditions are always true in correct operation, removing the assertions (or having mhd_assert compile to a no-op in non-debug builds) would not change observable program behaviour. Therefore these executed checks meet the definition of dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_set_initial_state_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/72.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_set_initial_state_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_set_initial_state_:\n```c\nvoid\nMHD_connection_set_initial_state_ (struct MHD_Connection *c)\n{\n  size_t read_buf_size;\n\n#ifdef HTTPS_SUPPORT\n  mhd_assert ( (0 == (c->daemon->options & MHD_USE_TLS)) || \\\n               (MHD_TLS_CONN_INIT == c->tls_state) );\n  mhd_assert ( (0 != (c->daemon->options & MHD_USE_TLS)) || \\\n               (MHD_TLS_CONN_NO_TLS == c->tls_state) );\n#endif /* HTTPS_SUPPORT */\n  mhd_assert (MHD_CONNECTION_INIT == c->state);\n\n  c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n  c->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n\n  memset (&c->rq, 0, sizeof(c->rq));\n  memset (&c->rp, 0, sizeof(c->rp));\n\n  c->write_buffer = NULL;\n  c->write_buffer_size = 0;\n  c->write_buffer_send_offset = 0;\n  c->write_buffer_append_offset = 0;\n\n  c->continue_message_write_offset = 0;\n\n  c->read_buffer_offset = 0;\n  read_buf_size = c->daemon->pool_size / 2;\n  c->read_buffer\n    = MHD_pool_allocate (c->pool,\n                         read_buf_size,\n                         false);\n  c->read_buffer_size = read_buf_size;\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_set_initial_state_ code.\n",
  "test_code": "void\nMHD_connection_set_initial_state_ (struct MHD_Connection *c)\n{\n  size_t read_buf_size;\n\n  /* Probe: log entry and basic connection/daemon state for diagnostics */\n  {\n    FILE *log = fopen(\"/tmp/logs/72.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"ENTRY: MHD_connection_set_initial_state_: c=%p\\n\", (void *)c);\n        if (c && c->daemon)\n          fprintf(log, \"  daemon=%p options=0x%08x tls_state=%d state=%d pool=%p pool_size=%zu\\n\",\n                  (void *)c->daemon,\n                  (unsigned)(c->daemon->options),\n                  (int)c->tls_state,\n                  (int)c->state,\n                  (void *)c->pool,\n                  (size_t)c->daemon->pool_size);\n        else\n          fprintf(log, \"  daemon or connection is NULL (c=%p daemon=%p)\\n\",\n                  (void *)c, (c ? (void *)c->daemon : NULL));\n        fclose(log);\n      }\n  }\n\n#ifdef HTTPS_SUPPORT\n  /* Evaluate the assertion conditions and log their boolean results so other agents\n     can reproduce whether these assertions are always true at runtime. */\n  if (c && c->daemon)\n    {\n      int cond1 = (0 == (c->daemon->options & MHD_USE_TLS)) ||\n                  (MHD_TLS_CONN_INIT == c->tls_state);\n      int cond2 = (0 != (c->daemon->options & MHD_USE_TLS)) ||\n                  (MHD_TLS_CONN_NO_TLS == c->tls_state);\n\n      FILE *log = fopen(\"/tmp/logs/72.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"ASSERT PRECHECK (HTTPS_SUPPORT): options=0x%08x tls_state=%d -> cond1=%d cond2=%d\\n\",\n                  (unsigned)(c->daemon->options), (int)c->tls_state, cond1, cond2);\n          fclose(log);\n        }\n    }\n\n  mhd_assert ( (0 == (c->daemon->options & MHD_USE_TLS)) || \\\n               (MHD_TLS_CONN_INIT == c->tls_state) );\n  mhd_assert ( (0 != (c->daemon->options & MHD_USE_TLS)) || \\\n               (MHD_TLS_CONN_NO_TLS == c->tls_state) );\n#endif /* HTTPS_SUPPORT */\n\n  /* Log check for state assertion */\n  {\n    int cond_state = (c && (MHD_CONNECTION_INIT == c->state));\n    FILE *log = fopen(\"/tmp/logs/72.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"ASSERT PRECHECK (STATE): state=%d -> cond_state=%d\\n\", (int)(c ? c->state : -1), cond_state);\n        fclose(log);\n      }\n  }\n\n  mhd_assert (MHD_CONNECTION_INIT == c->state);\n\n  c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n  c->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n\n  memset (&c->rq, 0, sizeof(c->rq));\n  memset (&c->rp, 0, sizeof(c->rp));\n\n  c->write_buffer = NULL;\n  c->write_buffer_size = 0;\n  c->write_buffer_send_offset = 0;\n  c->write_buffer_append_offset = 0;\n\n  c->continue_message_write_offset = 0;\n\n  c->read_buffer_offset = 0;\n  read_buf_size = c->daemon->pool_size / 2;\n\n  /* Log allocation request details before performing it */\n  {\n    FILE *log = fopen(\"/tmp/logs/72.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"ALLOC: requesting read buffer of size=%zu (daemon->pool_size=%zu)\\n\",\n                read_buf_size, (size_t)c->daemon->pool_size);\n        fclose(log);\n      }\n  }\n\n  c->read_buffer\n    = MHD_pool_allocate (c->pool,\n                         read_buf_size,\n                         false);\n  c->read_buffer_size = read_buf_size;\n\n  /* Log result of allocation */\n  {\n    FILE *log = fopen(\"/tmp/logs/72.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"ALLOC RESULT: read_buffer=%p read_buffer_size=%zu\\n\",\n                (void *)c->read_buffer, c->read_buffer_size);\n        fprintf(log, \"EXIT: MHD_connection_set_initial_state_ for c=%p\\n\", (void *)c);\n        fclose(log);\n      }\n  }\n}\n"
}