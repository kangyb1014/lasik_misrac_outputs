{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_str_unquote:\n```c\nsize_t\nMHD_str_unquote (const char *quoted,\n                 size_t quoted_len,\n                 char *result)\n{\n  size_t r;\n  size_t w;\n\n  r = 0;\n  w = 0;\n\n  while (quoted_len > r)\n  {\n    if ('\\\\' == quoted[r])\n    {\n      ++r;\n      if (quoted_len == r)\n        return 0; /* Last backslash is not followed by char to unescape */\n    }\n    result[w++] = quoted[r++];\n  }\n  return w;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_str_unquote (const char *quoted,\n                 size_t quoted_len,\n                 char *result)\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation of MISRA C 2023 Rule 21.17: the function body does not call any of the <string.h> functions (memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn, etc.). Therefore Rule 21.17 is not triggered. Note: the function can still write past the bounds of 'result' if the caller provides an undersized buffer (a potential out-of-bounds access issue), but that is not a violation of Rule 21.17 which specifically concerns use of the <string.h> functions."
}