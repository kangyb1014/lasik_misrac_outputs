{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf auth_value->str is declared as a non-const pointer (e.g. char *str in struct _MHD_str_w_len) while h->value refers to data that should be const (e.g. const char *value in the request header), then the assignment auth_value->str = h->value + token_len + 1; discards const-qualification. In that case Rule 8.13 is violated: auth_value->str should be declared as const char * (or otherwise const-qualified) to avoid removing const from the source pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_auth_rq_header_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2413.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of find_auth_rq_header_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of find_auth_rq_header_:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n</target_code>\nPlease provide the modified find_auth_rq_header_ code.\n",
  "test_code": "static void\nmhd_auth_probe_log(const char *phase,\n                   const struct MHD_Connection *c,\n                   enum MHD_AuthType type,\n                   const char *token,\n                   size_t token_len,\n                   const struct MHD_HTTP_Req_Header *h,\n                   struct _MHD_str_w_len *auth_value)\n{\n  /* Append diagnostic information to the log file. This function is nondisruptive\n   * and preserves the original control flow and return values of\n   * find_auth_rq_header_. */\n  FILE *f = fopen(\"/tmp/logs/2413.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"--- find_auth_rq_header_ probe: %s ---\\n\", phase);\n  if (c != NULL)\n    fprintf(f, \"connection=%p state=%u\\n\", (void *)c, (unsigned) c->state);\n  else\n    fprintf(f, \"connection=NULL\\n\");\n\n  fprintf(f, \"auth type=%d token=%p token_len=%zu\\n\", (int) type,\n          (const void *) token, token_len);\n\n  if (h != NULL)\n  {\n    fprintf(f, \"header struct=%p kind=%d header_size=%zu value_size=%zu\\n\",\n            (void *) h, (int) h->kind, h->header_size, h->value_size);\n    fprintf(f, \"header_ptr=%p value_ptr=%p\\n\", (void *) h->header,\n            (void *) h->value);\n    if (h->header && h->header_size > 0)\n      fprintf(f, \"header_preview=\\\"%.*s\\\"\\n\", (int) h->header_size, h->header);\n    if (h->value && h->value_size > 0)\n      fprintf(f, \"value_preview=\\\"%.*s\\\"\\n\",\n              (int) (h->value_size < 64 ? h->value_size : 64), h->value);\n  }\n  else\n  {\n    fprintf(f, \"header struct=NULL\\n\");\n  }\n\n  if (auth_value != NULL)\n    fprintf(f, \"auth_value pre str=%p len=%zu\\n\", (void *) auth_value->str, auth_value->len);\n  else\n    fprintf(f, \"auth_value=NULL\\n\");\n\n  fprintf(f, \"--- end probe (%s) ---\\n\\n\", phase);\n  fclose(f);\n}\n\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n  /* Log entry and initial state */\n  mhd_auth_probe_log(\"entry\", c, type, NULL, 0, NULL, auth_value);\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  /* Log token selection */\n  mhd_auth_probe_log(\"token_selected\", c, type, token, token_len, NULL, auth_value);\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    /* Log each header being examined */\n    mhd_auth_probe_log(\"header_loop_iter\", c, type, token, token_len, h, auth_value);\n\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        /* Log just before assignment that may discard const qualification in some builds */\n        mhd_auth_probe_log(\"pre_assign_skip_whitespace\", c, type, token, token_len, h, auth_value);\n\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n\n        /* Log immediately after assignment to capture the new pointer/len state */\n        mhd_auth_probe_log(\"post_assign_skip_whitespace\", c, type, token, token_len, h, auth_value);\n      }\n      else\n      { /* No whitespace to skip */\n        mhd_auth_probe_log(\"pre_assign_no_whitespace\", c, type, token, token_len, h, auth_value);\n\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n\n        mhd_auth_probe_log(\"post_assign_no_whitespace\", c, type, token, token_len, h, auth_value);\n      }\n      return true; /* Found a match */\n    }\n  }\n\n  mhd_auth_probe_log(\"no_match_found\", c, type, token, token_len, NULL, auth_value);\n  return false; /* No matching header has been found */\n}\n"
}