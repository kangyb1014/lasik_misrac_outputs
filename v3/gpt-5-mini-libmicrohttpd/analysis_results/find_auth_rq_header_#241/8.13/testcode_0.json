{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment discards const qualification: h is a pointer to const struct and h->value is (effectively) const char *. If auth_value->str is declared as char * (non-const) then auth_value->str = h->value + token_len assigns a const char * to a non-const pointer, violating the requirement that pointers should point to const-qualified types whenever possible. Fix by making auth_value->str (and the _MHD_str_w_len definition) const char * (or otherwise ensure types already carry const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_auth_rq_header_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2413.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of find_auth_rq_header_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of find_auth_rq_header_:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n</target_code>\nPlease provide the modified find_auth_rq_header_ code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append logs about control flow and state to /tmp/logs/2413.txt */\nstatic void\nmhd_auth_log_probe(const char *stage,\n                   const struct MHD_Connection *c,\n                   const struct MHD_HTTP_Req_Header *h,\n                   const char *token,\n                   size_t token_len,\n                   const struct _MHD_str_w_len *auth_value)\n{\n  FILE *f = fopen(\"/tmp/logs/2413.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"--- mhd_auth_log_probe: %s ---\\n\", stage);\n  fprintf(f, \"connection ptr: %p, state: %zu\\n\", (const void *)c, (size_t)c->state);\n  if (NULL != h)\n  {\n    fprintf(f, \"header ptr: %p\\n\", (const void *)h);\n    fprintf(f, \" header (ptr): %p, header_size: %zu, value_size: %zu\\n\",\n            (const void *)h->header, (size_t)h->header_size, (size_t)h->value_size);\n    /* print a limited prefix of the header value to avoid huge output */\n    if (NULL != h->value && h->value_size > 0)\n    {\n      size_t show = (h->value_size < 64) ? h->value_size : 64;\n      /* print as string with explicit length to avoid relying on NUL termination */\n      fprintf(f, \" header->value (first %zu bytes): '%.*s'\\n\", show, (int)show, h->value);\n    }\n  }\n  else\n  {\n    fprintf(f, \"header: NULL\\n\");\n  }\n\n  if (NULL != token)\n  {\n    size_t showt = (token_len < 64) ? token_len : 64;\n    fprintf(f, \"token ptr: %p, token_len: %zu, token (first %zu bytes): '%.*s'\\n\",\n            (const void *)token, token_len, showt, (int)showt, token);\n  }\n  else\n  {\n    fprintf(f, \"token: NULL\\n\");\n  }\n\n  if (NULL != auth_value)\n  {\n    /* Do not read auth_value->str contents unless it has been assigned; caller controls stage names. */\n    fprintf(f, \"auth_value ptr: %p, auth_value->len: %zu\\n\", (const void *)auth_value, (size_t)auth_value->len);\n    /* If auth_value->str seems valid and non-NULL, print pointer value. Do not dereference if NULL. */\n    if (NULL != auth_value->str)\n    {\n      fprintf(f, \" auth_value->str ptr: %p\\n\", (const void *)auth_value->str);\n      /* Print a small snippet from the assigned pointer (length limited by auth_value->len) */\n      if (auth_value->len > 0)\n      {\n        size_t showa = (auth_value->len < 64) ? auth_value->len : 64;\n        fprintf(f, \" auth_value->str (first %zu bytes): '%.*s'\\n\", showa, (int)showa, auth_value->str);\n      }\n    }\n    else\n    {\n      fprintf(f, \" auth_value->str: NULL (not yet assigned or explicitly NULL)\\n\");\n    }\n  }\n\n  fprintf(f, \"--- end probe ---\\n\\n\");\n  fclose(f);\n}\n\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n  /* Log entering function and connection state */\n  mhd_auth_log_probe(\"enter_find_auth_rq_header\", c, NULL, NULL, 0, auth_value);\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      /* Log that we've reached the matching header with details */\n      mhd_auth_log_probe(\"header_prefix_matched\", c, h, token, token_len, NULL);\n\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        /* Log before assignment to capture intended assignment and offsets. Do not dereference auth_value->str here. */\n        mhd_auth_log_probe(\"before_assign_skip_whitespace\", c, h, token, token_len, auth_value);\n\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n\n        /* Log after assignment to show that auth_value->str points into the header value */\n        mhd_auth_log_probe(\"after_assign_skip_whitespace\", c, h, token, token_len, auth_value);\n      }\n      else\n      { /* No whitespace to skip */\n        /* Log before assignment */\n        mhd_auth_log_probe(\"before_assign_no_whitespace\", c, h, token, token_len, auth_value);\n\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n\n        /* Log after assignment */\n        mhd_auth_log_probe(\"after_assign_no_whitespace\", c, h, token, token_len, auth_value);\n      }\n      return true; /* Found a match */\n    }\n  }\n\n  /* Log that no matching header was found */\n  mhd_auth_log_probe(\"no_matching_header_found\", c, NULL, token, token_len, NULL);\n  return false; /* No matching header has been found */\n}\n"
}