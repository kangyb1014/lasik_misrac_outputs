{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe call mhd_assert(0) likely expands to a control statement such as if (!(0)) { /* fail */ } which becomes if (1) { /* fail */ } \u2014 an invariant (always-true) controlling expression in the expanded code. This is a breach of Rule 14.3 (controlling expressions shall not be invariant).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_auth_rq_header_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2415.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of find_auth_rq_header_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of find_auth_rq_header_:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n</target_code>\nPlease provide the modified find_auth_rq_header_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/2415.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2415.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  (void)vfprintf (f, fmt, ap);\n  (void)fputc ('\\n', f);\n  va_end (ap);\n  (void)fclose (f);\n}\n\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  /* Log entry and initial state */\n  mhd_probe_log (\"ENTER find_auth_rq_header_: this=%p type=%d auth_value=%p state=%d\",\n                 (void *)c, (int)type, (void *)auth_value,\n                 (int) c->state);\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n  {\n    mhd_probe_log (\"EXIT find_auth_rq_header_: headers not processed (state=%d) -> return false\",\n                   (int) c->state);\n    return false;\n  }\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n    mhd_probe_log (\"Auth type: DIGEST selected (token=%p token_len=%zu)\",\n                   (const void *) token, token_len);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n    mhd_probe_log (\"Auth type: BASIC selected (token=%p token_len=%zu)\",\n                   (const void *) token, token_len);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    /* Unexpected/unsupported auth type: log context and preserve original behavior */\n    mhd_probe_log (\"UNEXPECTED auth type: %d -> about to call mhd_assert(0) and return false; connection=%p state=%d\",\n                   (int) type, (void *) c, (int) c->state);\n    mhd_assert (0);\n    mhd_probe_log (\"After mhd_assert(0) (if assertions disabled), returning false\");\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    /* Log each header examined to provide control-flow evidence */\n    mhd_probe_log (\"Examining header: ptr=%p kind=%d header_size=%zu value_size=%zu header_ptr=%p value_ptr=%p\",\n                   (void *) h, (int) h->kind, h->header_size, h->value_size,\n                   (void *) h->header, (void *) h->value);\n\n    if (MHD_HEADER_KIND != h->kind)\n    {\n      mhd_probe_log (\"  skip: wrong kind (expected %d)\", (int) MHD_HEADER_KIND);\n      continue;\n    }\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n    {\n      mhd_probe_log (\"  skip: header name length mismatch (expected %zu got %zu)\",\n                     MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION), h->header_size);\n      continue;\n    }\n    if (token_len > h->value_size)\n    {\n      mhd_probe_log (\"  skip: token_len (%zu) > header value_size (%zu)\", token_len, h->value_size);\n      continue;\n    }\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n    {\n      mhd_probe_log (\"  skip: header name mismatch (caseless)\");\n      continue;\n    }\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n    {\n      mhd_probe_log (\"  skip: token prefix mismatch in header value\");\n      continue;\n    }\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n        mhd_probe_log (\"MATCH (with whitespace): auth_value.ptr=%p len=%zu\",\n                       (void *) auth_value->str, auth_value->len);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n        mhd_probe_log (\"MATCH (no whitespace): auth_value.ptr=%p len=%zu\",\n                       (void *) auth_value->str, auth_value->len);\n      }\n      mhd_probe_log (\"EXIT find_auth_rq_header_: match found -> return true\");\n      return true; /* Found a match */\n    }\n    else\n    {\n      mhd_probe_log (\"  skip: token not followed by end/space/tab (char=0x%02x)\",\n                     (unsigned int) (unsigned char) h->value[token_len]);\n    }\n  }\n\n  mhd_probe_log (\"EXIT find_auth_rq_header_: no matching header found -> return false\");\n  return false; /* No matching header has been found */\n}\n"
}