{
  "user_message": "An agent A claimed that the following handle_req_footers_no_space code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_footers_no_space.\n```c\nstatic void\nhandle_req_footers_no_space (struct MHD_Connection *c,\n                             const char *add_footer,\n                             size_t add_footer_size)\n{\n  (void) add_footer; (void) add_footer_size; /* Unused */\n  mhd_assert (c->rq.have_chunked_upload);\n\n  /* Footers should be optional */\n  transmit_error_response_static (c,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_FOOTER_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is an assertion macro that is compiled out in non-debug builds (e.g. expands to ((void)0) when NDEBUG is set), the statement mhd_assert(c->rq.have_chunked_upload); is an executed no-op in some builds and its presence or removal does not affect program behaviour \u2014 this constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. (If, however, mhd_assert performs runtime actions with observable side\u2011effects such as logging or termination, then it would not be dead code.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct in principle. Whether a violation exists depends on the actual definition of mhd_assert. If mhd_assert is defined so that in production builds it expands to a no-op (for example ((void)0) when NDEBUG is set), then the statement\n\n  mhd_assert (c->rq.have_chunked_upload);\n\nis an executed no\u2011op in those builds. Removing that statement would not change program behaviour in those builds, so that occurrence would meet the definition of dead code in MISRA C 2023 Rule 2.2 and therefore would be a violation for the project configuration that produces the no\u2011op. Conversely, if mhd_assert performs observable actions (logging, diagnostics, program termination, etc.), then the statement has effect and is not dead code, so there is no violation.\n\nNote: the file also contains explicit (void) casts for unused parameters; those are common idioms to suppress warnings and are not the same concern as an assertion that is compiled out. To resolve the issue deterministically, ensure the assertion macro is documented and either (a) implemented so it has an observable effect in all project builds, or (b) excluded/guarded by configuration so it does not appear as dead code in the build(s) being checked by MISRA, or (c) removed if not needed. "
}