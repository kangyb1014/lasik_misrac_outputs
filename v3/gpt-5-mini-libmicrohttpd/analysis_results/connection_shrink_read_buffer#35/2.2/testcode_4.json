{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 in a build where mhd_assert is a no-op (typical release build), the statement mhd_assert(0 == c->read_buffer_offset) is executed on the early-return path but has no effect; removing it would not change program behaviour, so it is dead code. (If mhd_assert can abort or has side effects in that build, then it would not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_shrink_read_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/352.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_shrink_read_buffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_shrink_read_buffer:\n```c\nstatic void\nconnection_shrink_read_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  void *new_buf;\n\n  if ((NULL == c->read_buffer) || (0 == c->read_buffer_size))\n  {\n    mhd_assert (0 == c->read_buffer_size);\n    mhd_assert (0 == c->read_buffer_offset);\n    return;\n  }\n\n  mhd_assert (c->read_buffer_offset <= c->read_buffer_size);\n  if (0 == c->read_buffer_offset)\n  {\n    MHD_pool_deallocate (c->pool, c->read_buffer, c->read_buffer_size);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n  }\n  else\n  {\n    mhd_assert (MHD_pool_is_resizable_inplace (c->pool, c->read_buffer, \\\n                                               c->read_buffer_size));\n    new_buf = MHD_pool_reallocate (c->pool, c->read_buffer, c->read_buffer_size,\n                                   c->read_buffer_offset);\n    mhd_assert (c->read_buffer == new_buf);\n    c->read_buffer = new_buf;\n    c->read_buffer_size = c->read_buffer_offset;\n  }\n}\n```\n</target_code>\nPlease provide the modified connection_shrink_read_buffer code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe helper that appends a single line describing the current\n   connection state to /tmp/logs/352.txt. Kept separate so the original\n   logic of connection_shrink_read_buffer is otherwise unchanged. */\nstatic void\nprobe_log_state (const struct MHD_Connection *c, const char *event)\n{\n  FILE *f = fopen(\"/tmp/logs/352.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* If logging cannot be performed, do not alter behaviour. */\n    return;\n  }\n\n  time_t t = time(NULL);\n  /* Print timestamp, event tag, and key connection fields that are\n     relevant for reproducing the reported dead-code scenario. */\n  fprintf (f, \"%ld | %s | conn=%p pool=%p read_buffer=%p read_buffer_size=%llu read_buffer_offset=%llu\\n\",\n           (long)t,\n           event != NULL ? event : \"(null)\",\n           (const void *)c,\n           (const void *) (c ? c->pool : NULL),\n           (const void *) (c ? c->read_buffer : NULL),\n           (unsigned long long) (c ? (unsigned long long) c->read_buffer_size : 0ULL),\n           (unsigned long long) (c ? (unsigned long long) c->read_buffer_offset : 0ULL));\n  fclose (f);\n}\n\nstatic void\nconnection_shrink_read_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  void *new_buf;\n\n  /* Log entry and initial state */\n  probe_log_state (c, \"enter_connection_shrink_read_buffer\");\n\n  if ((NULL == c->read_buffer) || (0 == c->read_buffer_size))\n  {\n    /* Log that we hit the early-return path and the asserted conditions. */\n    probe_log_state (c, \"early_return_path_before_asserts: read_buffer_or_size_empty\");\n\n    mhd_assert (0 == c->read_buffer_size);\n    probe_log_state (c, \"after_assert: read_buffer_size_zero_check\");\n    mhd_assert (0 == c->read_buffer_offset);\n    probe_log_state (c, \"after_assert: read_buffer_offset_zero_check\");\n\n    probe_log_state (c, \"early_return_path_returning\");\n    return;\n  }\n\n  mhd_assert (c->read_buffer_offset <= c->read_buffer_size);\n  probe_log_state (c, \"after_assert: offset_le_size\");\n\n  if (0 == c->read_buffer_offset)\n  {\n    probe_log_state (c, \"deallocate_branch_before_deallocate\");\n    MHD_pool_deallocate (c->pool, c->read_buffer, c->read_buffer_size);\n    probe_log_state (c, \"deallocate_branch_after_deallocate\");\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n    probe_log_state (c, \"deallocate_branch_done\");\n  }\n  else\n  {\n    probe_log_state (c, \"reallocate_branch_before_is_resizable_inplace\");\n    mhd_assert (MHD_pool_is_resizable_inplace (c->pool, c->read_buffer, \\\n                                               c->read_buffer_size));\n    probe_log_state (c, \"reallocate_branch_after_is_resizable_inplace\");\n\n    new_buf = MHD_pool_reallocate (c->pool, c->read_buffer, c->read_buffer_size,\n                                   c->read_buffer_offset);\n    probe_log_state (c, \"reallocate_branch_after_reallocate\");\n\n    mhd_assert (c->read_buffer == new_buf);\n    probe_log_state (c, \"reallocate_branch_after_assert_ptr_equal\");\n\n    c->read_buffer = new_buf;\n    c->read_buffer_size = c->read_buffer_offset;\n    probe_log_state (c, \"reallocate_branch_done\") ;\n  }\n\n  probe_log_state (c, \"exit_connection_shrink_read_buffer\");\n}\n"
}