{
  "user_message": "An agent A claimed that the following create_response_object code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of create_response_object.\n```c\nstatic struct MHD_Response *\ncreate_response_object (void)\n{\n#if MHD_VERSION >= 0x00097701\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer_static (body_dyn_size,\n                                                   body_dyn);\n  else if (tool_params.empty)\n    return MHD_create_response_empty (MHD_RF_NONE);\n\n  return MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                                 tiny_body);\n\n#else  /* MHD_VERSION < 0x00097701 */\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer (body_dyn_size,\n                                            (void *) body_dyn,\n                                            MHD_RESPMEM_PERSISTENT);\n  else if (tool_params.empty)\n    return MHD_create_response_from_buffer (0,\n                                            (void *) tiny_body,\n                                            MHD_RESPMEM_PERSISTENT);\n\n  return MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                          (void *) tiny_body,\n                                          MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call casts away const: if tiny_body is defined as const char * or as a static const char[] (e.g. a string literal), then (void *) tiny_body removes the const qualifier and passes a non-const pointer to MHD_create_response_from_buffer. That discarding of const violates MISRA C 2023 Rule 8.13. (If tiny_body were a non-const object, no violation would occur.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the #else branch the code casts away const: it calls MHD_create_response_from_buffer which takes a non-const void * and passes (void *) tiny_body and (void *) body_dyn. If tiny_body or body_dyn are const-qualified (for example a string literal or static const char[]), those casts remove the const qualifier and therefore violate MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible). The #if branch that uses MHD_create_response_from_buffer_static does not show such casts and may be const-correct, but that does not avoid the violation in the older-API branch. \n\nRemediation options include: (a) use the const-correct API (e.g. MHD_create_response_from_buffer_static) when available, (b) provide a mutable copy of the constant data and pass a non-const pointer to it, (c) modify/wrap the third-party API to accept const, or (d) document and justify a deviation from MISRA (if unavoidable)."
}