{
  "user_message": "An agent A claimed that the following MHD_str_has_token_caseless_ code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_str_has_token_caseless_.\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe loop increments the function parameter 'str' (via str++), modifying the pointer itself rather than the object it points to. Rule 17.8 forbids modifying function parameters (the pointer value shall not be changed); here the pointer is changed, so this is a violation. Fix: use a local pointer (e.g. const char *p = str;) and increment p instead of str.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: MHD_str_has_token_caseless_, str=0x56534c564e7e, first_bytes=\"str\", token=0x56534c564e7e, token_len=6\nOUTER LOOP: at str=0x56534c564e7e ('s') - skipping leading spaces/commas if any\n  START SUBSTRING CHECK: str=0x56534c564e7e ('s'), token_len=6\n    COMPARE: sc='s' (0x73), tc='s' (0x73), i=1, str(after read)=0x56534c564e7f\n    COMPARE: sc='t' (0x74), tc='t' (0x74), i=2, str(after read)=0x56534c564e80\n    COMPARE: sc='r' (0x72), tc='r' (0x72), i=3, str(after read)=0x56534c564e81\n    COMPARE: sc='i' (0x69), tc='i' (0x69), i=4, str(after read)=0x56534c564e82\n    COMPARE: sc='n' (0x6e), tc='n' (0x6e), i=5, str(after read)=0x56534c564e83\n    COMPARE: sc='g' (0x67), tc='g' (0x67), i=6, str(after read)=0x56534c564e84\n    POTENTIAL MATCH: matched token_len=6 chars, checking trailing chars at str=0x56534c564e84 ('\u0000')\n    MATCH CONFIRMED: returning true, str now=0x56534c564e84 ('\u0000')\nENTER: MHD_str_has_token_caseless_, str=0x56534c563004, first_bytes=\"Str\", token=0x56534c564e7e, token_len=6\nOUTER LOOP: at str=0x56534c563004 ('S') - skipping leading spaces/commas if any\n  START SUBSTRING CHECK: str=0x56534c563004 ('S'), token_len=6\n    COMPARE: sc='S' (0x53), tc='s' (0x73), i=1, str(after read)=0x56534c563005\n    COMPARE: sc='t' (0x74), tc='t' (0x74), i=2, str(after read)=0x56534c563006\n    COMPARE: sc='r' (0x72), tc='r' (0x72), i=3, str(after read)=0x56534c563007\n    COMPARE: sc='i' (0x69), tc='i' (0x69), i=4, str(after read)=0x56534c563008\n    COMPARE: sc='n' (0x6e), tc='n' (0x6e), i=5, str(after read)=0x56534c563009\n    COMPARE: sc='g' (0x67), tc='g' (0x67), i=6, str(after read)=0x56534c56300a\n    POTENTIAL MATCH: matched token_len=6 chars, checking trailing chars at str=0x56534c56300a ('\u0000')\n    MATCH CONFIRMED: returning true, str now=0x56534c56300a ('\u0000')\nENTER: MHD_str_has_token_caseless_, str=0x56534c564e7e, first_bytes=\"str\", token=0x56534c563004, token_len=6\nOUTER LOOP: at str=0x56534c564e7e ('s') - skipping leading spaces/commas if any\n  START SUBSTRING CHECK: str=0x56534c564e7e ('s'), token_len=6\n    COMPARE: sc='s' (0x73), tc='S' (0x53), i=1, str(after read)=0x56534c564e7f\n    COMPARE: sc='t' (0x74), tc='t' (0x74), i=2, str(after read)=0x56534c564e80\n    COMPARE: sc='r' (0x72), tc='r' (0x72), i=3, str(after read)=0x56534c564e81\n    COMPARE: sc='i' (0x69), tc='i' (0x69), i=4, str(after read)=0x56534c564e82\n    COMPARE: sc='n' (0x6e), tc='n' (0x6e), i=5, str(after read)=0x56534c564e83\n    COMPARE: sc='g' (0x67), tc='g' (0x67), i=6, str(after read)=0x56534c564e84\n    POTENTIAL MATCH: matched token_len=6 chars, checking trailing chars at str=0x56534c564e84 ('\u0000')\n    MATCH CONFIRMED: returning true, str now=0x56534c564e84 ('\u0000')\nENTER: MHD_str_has_token_caseless_, str=0x56534c56300d, first_bytes=\"str\", token=0x56534c563004, token_len=6\nOUTER LOOP: at str=0x56534c56300d ('s') - skipping leading spaces/commas if any\n  START SUBSTRING CHECK: str=0x56534c56300d ('s'), token_len=6\n    COMPARE: sc='s' (0x73), tc='S' (0x53), i=1, str(after read)=0x56534c56300e\n    COMPARE: sc='t' (0x74), tc='t' (0x74), i=2, str(after read)=0x56534c56300f\n    COMPARE: sc='r' (0x72), tc='r' (0x72), i=3, str(after read)=0x56534c563010\n    COMPARE: sc='i' (0x69), tc='i' (0x69), i=4, str(after read)=0x56534c563011\n    COMPARE: sc='n' (0x6e), tc='n' (0x6e), i=5, str(after read)=0x56534c563012\n    COMPARE: sc='G' (0x47), tc='g' (0x67), i=6, str(after read)=0x56534c563013\n    POTENTIAL MATCH: matched token_len=6 chars, checking trailing chars at str=0x56534c563013 ('\u0000')\n    MATCH CONFIRMED: returning true, str now=0x56534c563013 ('\u0000')\nENTER: MHD_str_has_token_caseless_, str=0x56534c56300b, first_bytes=\"\t s\", token=0x56534c563004, token_len=6\nOUTER LOOP: at str=0x56534c56300b ('\t') - skipping leading spaces/commas if any\n  SKIP: skipping char '\t' at 0x56534c56300b\n  SKIP: skipping char ' ' at 0x56534c56300c\n  START SUBSTRING CHECK: str=0x56534c56300d ('s'), token_len=6\n    COMPARE: sc='s' (0x73), tc='S' (0x53), i=1, str(after read)=0x56534c56300e\n    COMPARE: sc='t' (0x74), tc='t' (0x74), i=2, str(after read)=0x56534c56300f\n    COMPARE: sc='r' (0x72), tc\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 requires that function parameters shall not be modified; although the object pointed to may be changed, the pointer parameter itself must not be altered. In MHD_str_has_token_caseless_ the parameter 'str' (declared as const char *str) is incremented in multiple places (e.g. while (' ' == *str || ... ) str++; sc = *(str++); and other str++ uses), which changes the pointer parameter value and thus violates Rule 17.8. The usual fix is to introduce a local pointer (e.g. const char *p = str;) and perform all increments/advances on that local pointer, leaving the parameter unmodified."
}