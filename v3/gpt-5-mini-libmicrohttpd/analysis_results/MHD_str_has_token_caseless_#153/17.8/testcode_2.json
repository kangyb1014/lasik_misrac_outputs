{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe loop increments the function parameter 'str' (via str++), modifying the pointer itself rather than the object it points to. Rule 17.8 forbids modifying function parameters (the pointer value shall not be changed); here the pointer is changed, so this is a violation. Fix: use a local pointer (e.g. const char *p = str;) and increment p instead of str.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_has_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1537.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_has_token_caseless_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_has_token_caseless_:\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_has_token_caseless_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/1537.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1537.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Forward declaration of external helper used by original code. */\nextern int charsequalcaseless(char a, char b);\n\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  /* Log entry and initial state */\n  probe_log(\"ENTER: MHD_str_has_token_caseless_, str=%p, first_bytes=\\\"%c%c%c\\\", token=%p, token_len=%zu\",\n            (const void *)str,\n            str && str[0] ? str[0] : '\\0',\n            str && str[1] ? str[1] : '\\0',\n            str && str[2] ? str[2] : '\\0',\n            (const void *)token, token_len);\n\n  if (0 == token_len)\n  {\n    probe_log(\"EARLY RETURN: token_len is 0 -> false\");\n    return false;\n  }\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    probe_log(\"OUTER LOOP: at str=%p ('%c') - skipping leading spaces/commas if any\", (const void *)str, *str ? *str : '\\0');\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n    {\n      probe_log(\"  SKIP: skipping char '%c' at %p\", *str ? *str : '\\0', (const void *)str);\n      str++;\n    }\n\n    /* Check for token match. */\n    i = 0;\n    probe_log(\"  START SUBSTRING CHECK: str=%p ('%c'), token_len=%zu\", (const void *)str, *str ? *str : '\\0', token_len);\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      probe_log(\"    COMPARE: sc='%c' (0x%02x), tc='%c' (0x%02x), i=%zu, str(after read)=%p\", sc ? sc : '\\0', (unsigned char)sc, tc ? tc : '\\0', (unsigned char)tc, i, (const void *)str);\n\n      if (0 == sc)\n      {\n        probe_log(\"    RETURN FALSE: reached end of string while comparing (sc==0)\");\n        return false;\n      }\n      if (! charsequalcaseless (sc, tc))\n      {\n        probe_log(\"    MISMATCH: sc and tc not equal (caseless) -> break to find next substring\");\n        break;\n      }\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        probe_log(\"    POTENTIAL MATCH: matched token_len=%zu chars, checking trailing chars at str=%p ('%c')\", token_len, (const void *)str, *str ? *str : '\\0');\n        while (' ' == *str || '\\t' == *str)\n        {\n          probe_log(\"      SKIP TRAILING SPACE: skipping '%c' at %p\", *str ? *str : '\\0', (const void *)str);\n          str++;\n        }\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n        {\n          probe_log(\"    MATCH CONFIRMED: returning true, str now=%p ('%c')\", (const void *)str, *str ? *str : '\\0');\n          return true;\n        }\n        /* Unmatched chars at end of substring. */\n        probe_log(\"    UNMATCHED TAIL: characters after matched token at str=%p ('%c') -> break to find next substring\", (const void *)str, *str ? *str : '\\0');\n        break;\n      }\n    }\n    /* Find next substring. */\n    probe_log(\"  FIND NEXT SUBSTRING: scanning to next comma or end from str=%p ('%c')\", (const void *)str, *str ? *str : '\\0');\n    while (0 != *str && ',' != *str)\n    {\n      probe_log(\"    ADVANCE TO COMMA: at %p char='%c'\", (const void *)str, *str ? *str : '\\0');\n      str++;\n    }\n    if (0 != *str)\n    {\n      probe_log(\"    STOP SCAN: now at delimiter '%c' at %p\", *str, (const void *)str);\n      /* If at a comma, advance one to continue outer loop; original logic\n         will let outer loop skip commas at top. We keep behavior identical. */\n    }\n  }\n  probe_log(\"EXIT: no match found -> false\");\n  return false;\n}\n"
}