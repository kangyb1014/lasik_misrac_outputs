{
  "user_message": "An agent A claimed that the following MHD_str_has_token_caseless_ code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_str_has_token_caseless_.\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer parameter 'str' (declared as 'const char *str') is incremented in the loop (str++), e.g. while (0 != *str && ',' != *str) str++; \u2014 this modifies the function parameter itself, which violates MISRA C 2023 Rule 17.8. Use a local pointer (e.g. const char *p = str;) and advance p instead of str to comply.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: str=0x55beaf5be197 *str=0x73('s') token_len=6 i=0 sc=0x00 tc=0x00 token=\"string\"\nINNER_STEP: str=0x55beaf5be197 *str=0x73('s') token_len=6 i=1 sc=0x73 tc=0x73 token=\"string\"\nINNER_STEP: str=0x55beaf5be198 *str=0x74('t') token_len=6 i=2 sc=0x74 tc=0x74 token=\"string\"\nINNER_STEP: str=0x55beaf5be199 *str=0x72('r') token_len=6 i=3 sc=0x72 tc=0x72 token=\"string\"\nINNER_STEP: str=0x55beaf5be19a *str=0x69('i') token_len=6 i=4 sc=0x69 tc=0x69 token=\"string\"\nINNER_STEP: str=0x55beaf5be19b *str=0x6e('n') token_len=6 i=5 sc=0x6e tc=0x6e token=\"string\"\nINNER_STEP: str=0x55beaf5be19c *str=0x67('g') token_len=6 i=6 sc=0x67 tc=0x67 token=\"string\"\nRETURN_TRUE_MATCHED: str=0x55beaf5be19d *str=0x00('.') token_len=6 i=6 sc=0x00 tc=0x00 token=\"string\"\nENTER: str=0x55beaf5be004 *str=0x53('S') token_len=6 i=0 sc=0x00 tc=0x00 token=\"string\"\nINNER_STEP: str=0x55beaf5be004 *str=0x53('S') token_len=6 i=1 sc=0x53 tc=0x73 token=\"string\"\nINNER_STEP: str=0x55beaf5be005 *str=0x74('t') token_len=6 i=2 sc=0x74 tc=0x74 token=\"string\"\nINNER_STEP: str=0x55beaf5be006 *str=0x72('r') token_len=6 i=3 sc=0x72 tc=0x72 token=\"string\"\nINNER_STEP: str=0x55beaf5be007 *str=0x69('i') token_len=6 i=4 sc=0x69 tc=0x69 token=\"string\"\nINNER_STEP: str=0x55beaf5be008 *str=0x6e('n') token_len=6 i=5 sc=0x6e tc=0x6e token=\"string\"\nINNER_STEP: str=0x55beaf5be009 *str=0x67('g') token_len=6 i=6 sc=0x67 tc=0x67 token=\"string\"\nRETURN_TRUE_MATCHED: str=0x55beaf5be00a *str=0x00('.') token_len=6 i=6 sc=0x00 tc=0x00 token=\"string\"\nENTER: str=0x55beaf5be197 *str=0x73('s') token_len=6 i=0 sc=0x00 tc=0x00 token=\"String\"\nINNER_STEP: str=0x55beaf5be197 *str=0x73('s') token_len=6 i=1 sc=0x73 tc=0x53 token=\"String\"\nINNER_STEP: str=0x55beaf5be198 *str=0x74('t') token_len=6 i=2 sc=0x74 tc=0x74 token=\"String\"\nINNER_STEP: str=0x55beaf5be199 *str=0x72('r') token_len=6 i=3 sc=0x72 tc=0x72 token=\"String\"\nINNER_STEP: str=0x55beaf5be19a *str=0x69('i') token_len=6 i=4 sc=0x69 tc=0x69 token=\"String\"\nINNER_STEP: str=0x55beaf5be19b *str=0x6e('n') token_len=6 i=5 sc=0x6e tc=0x6e token=\"String\"\nINNER_STEP: str=0x55beaf5be19c *str=0x67('g') token_len=6 i=6 sc=0x67 tc=0x67 token=\"String\"\nRETURN_TRUE_MATCHED: str=0x55beaf5be19d *str=0x00('.') token_len=6 i=6 sc=0x00 tc=0x00 token=\"String\"\nENTER: str=0x55beaf5be00d *str=0x73('s') token_len=6 i=0 sc=0x00 tc=0x00 token=\"String\"\nINNER_STEP: str=0x55beaf5be00d *str=0x73('s') token_len=6 i=1 sc=0x73 tc=0x53 token=\"String\"\nINNER_STEP: str=0x55beaf5be00e *str=0x74('t') token_len=6 i=2 sc=0x74 tc=0x74 token=\"String\"\nINNER_STEP: str=0x55beaf5be00f *str=0x72('r') token_len=6 i=3 sc=0x72 tc=0x72 token=\"String\"\nINNER_STEP: str=0x55beaf5be010 *str=0x69('i') token_len=6 i=4 sc=0x69 tc=0x69 token=\"String\"\nINNER_STEP: str=0x55beaf5be011 *str=0x6e('n') token_len=6 i=5 sc=0x6e tc=0x6e token=\"String\"\nINNER_STEP: str=0x55beaf5be012 *str=0x47('G') token_len=6 i=6 sc=0x47 tc=0x67 token=\"String\"\nRETURN_TRUE_MATCHED: str=0x55beaf5be013 *str=0x00('.') token_len=6 i=6 sc=0x00 tc=0x00 token=\"String\"\nENTER: str=0x55beaf5be00b *str=0x09('.') token_len=6 i=0 sc=0x00 tc=0x00 token=\"String\"\nSKIP_WS_BEFORE_INC: str=0x55beaf5be00b *str=0x09('.') token_len=6 i=0 sc=0x00 tc=0x00 token=\"String\"\nSKIP_WS_AFTER_INC: str=0x55beaf5be00c *str=0x20(' ') token_len=6 i=0 sc=0x00 tc=0x00 token=\"String\"\nSKIP_WS_BEFORE_INC: str=0x55beaf5be00c *str=0x20(' ') token_len=6 i=0 sc=0x00 tc=0x00 token=\"String\"\nSKIP_WS_AFTER_INC: str=0x55beaf5be00d *str=0x73('s') token_len=6 i=0 sc=0x00 tc=0x00 token=\"String\"\nINNER_STEP: str=0x55beaf5be00d *str=0x73('s') token_len=6 i=1 sc=0x73 tc=0x53 token=\"String\"\nINNER_STEP: str=0x55beaf5be00e *str=0x74('t') token_len=6 i=2 sc=0x74 tc=0x74 token=\"String\"\nINNER_STEP: str=0x55beaf5be00f *str=0x72('r') token_len=6 i=3 sc=0x72 tc=0x72 token=\"String\"\nINNER_STEP: str=0x55beaf5be010 *str=0x69('i') token_len=6 i=4 sc=0x69 tc=0x69 token=\"String\"\nINNER_STEP: str=0x55beaf5be011 *str=0x6e('n') token_len=6 i=5 sc=0x6e tc=0x6e token=\"String\"\nINNER_STEP: str=0x55beaf5be012 *str=0x47('G') token_len=6 i=6 sc=0x47 tc=0x67 token=\"String\"\nRETURN_TRUE_MATCHED: str=0x55beaf5be013 *str=0x00('.') t\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. MISRA C:2023 Rule 17.8 prohibits modifying function parameters themselves (the pointer value), even though the object pointed to may be modified. In the posted function the parameter str (declared as const char *str) is incremented/advanced in multiple places (e.g. the inner loop uses (str++) and the loops do str++; and while (0 != *str && ',' != *str) str++;). Those operations modify the parameter variable str and therefore violate Rule 17.8.\n\nFixes: make a local pointer copy and advance that (e.g. const char *p = str; use p++ / p instead of str), or change the parameter type to const char * const str to make the pointer itself const (which would also prevent modification), with the local-pointer approach being the usual non\u2011breaking remedy."
}