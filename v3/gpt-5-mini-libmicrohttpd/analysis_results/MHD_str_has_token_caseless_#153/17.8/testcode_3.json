{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the function parameter 'str' is declared as 'const char *str'. The expression '*(str++)' uses post-increment on the parameter, which modifies the pointer itself. MISRA C 2023 Rule 17.8 forbids modifying a pointer parameter (the object it points to may be modified, but not the pointer), so this fragment violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_has_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1537.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_has_token_caseless_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_has_token_caseless_:\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_has_token_caseless_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <ctype.h>\n\n/* Probe/logging helpers. These do not change program logic; they only\n * append diagnostic information to /tmp/logs/1537.txt so other agents\n * can reproduce the control flow and observe the pointer modifications\n * (e.g. the post-increment of the parameter 'str').\n */\nstatic void log_char_repr(FILE *f, char c)\n{\n  unsigned char uc = (unsigned char)c;\n  if (c == 0)\n  {\n    fprintf(f, \"<NUL>\");\n  }\n  else if (isprint(uc))\n  {\n    fprintf(f, \"'%c' (0x%02X)\", c, uc);\n  }\n  else\n  {\n    fprintf(f, \"\\\\x%02X ( %u )\", uc, (unsigned)uc);\n  }\n}\n\nstatic void mhd_log(const char *event,\n                    const char *str_ptr,\n                    const char *token_ptr,\n                    size_t token_len,\n                    size_t idx,\n                    char sc,\n                    char tc)\n{\n  FILE *f = fopen(\"/tmp/logs/1537.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"EVENT: %s\\n\", event);\n  fprintf(f, \"  token_len=%zu idx=%zu\\n\", token_len, idx);\n  fprintf(f, \"  str_ptr=%p token_ptr=%p\\n\", (const void *)str_ptr, (const void *)token_ptr);\n  fprintf(f, \"  *str (current) = \");\n  if (str_ptr != NULL)\n    log_char_repr(f, *str_ptr);\n  else\n    fprintf(f, \"<NULL>\");\n  fprintf(f, \"\\n\");\n\n  fprintf(f, \"  sc (consumed char) = \"); log_char_repr(f, sc); fprintf(f, \"\\n\");\n  fprintf(f, \"  tc (token char)    = \"); log_char_repr(f, tc); fprintf(f, \"\\n\");\n\n  fprintf(f, \"  ----\\n\");\n  fclose(f);\n}\n\n/* Forward declaration: the real implementation is expected elsewhere.\n * We declare it to avoid implicit declaration warnings. The function\n * compares characters case-insensitively; the exact implementation is\n * not required here.\n */\nextern int charsequalcaseless (char a, char b);\n\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  /* Log entry state */\n  mhd_log(\"ENTRY\", str, token, token_len, 0, 0, 0);\n\n  if (0 == token_len)\n  {\n    mhd_log(\"TOKEN_LEN_ZERO\", str, token, token_len, 0, 0, 0);\n    return false;\n  }\n\n  size_t outer_iter = 0;\n  while (0 != *str)\n  {\n    mhd_log(\"OUTER_LOOP_START\", str, token, token_len, outer_iter, 0, 0);\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n    {\n      mhd_log(\"SKIP_WHITESPACE_COMMA\", str, token, token_len, outer_iter, 0, 0);\n      str++;\n    }\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      /* Capture pointer before the post-increment so logs can show the\n       * pointer value before and after the increment (the post-increment\n       * is the thing reported as the cause of the MISRA Rule 17.8 violation).\n       */\n      const char *prev_str = str;\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      /* Log the inner iteration state including the pointer before and\n       * after the post-increment (prev_str and str). This provides clear\n       * evidence that the parameter 'str' has been modified by the\n       * expression '*(str++)'.\n       */\n      {\n        FILE *f = fopen(\"/tmp/logs/1537.txt\", \"a\");\n        if (f)\n        {\n          fprintf(f, \"EVENT: INNER_ITER\\n\");\n          fprintf(f, \"  i=%zu prev_str=%p str(after)=%p token_ptr=%p\\n\",\n                  (size_t)i, (const void *)prev_str, (const void *)str, (const void *)token);\n          fprintf(f, \"  *prev_str = \");\n          if (prev_str != NULL)\n            log_char_repr(f, *prev_str);\n          else\n            fprintf(f, \"<NULL>\");\n          fprintf(f, \"\\n\");\n          fprintf(f, \"  sc = \"); log_char_repr(f, sc); fprintf(f, \"\\n\");\n          fprintf(f, \"  tc = \"); log_char_repr(f, tc); fprintf(f, \"\\n\");\n          fprintf(f, \"  ----\\n\");\n          fclose(f);\n        }\n      }\n\n      if (0 == sc)\n      {\n        mhd_log(\"INNER_REACHED_NUL\", str, token, token_len, i, sc, tc);\n        return false;\n      }\n      if (! charsequalcaseless (sc, tc))\n      {\n        mhd_log(\"CHAR_MISMATCH_BREAK\", str, token, token_len, i, sc, tc);\n        break;\n      }\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n        {\n          mhd_log(\"SKIP_TRAILING_WHITESPACE\", str, token, token_len, i, sc, tc);\n          str++;\n        }\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n        {\n          mhd_log(\"MATCH_SUCCESS_RETURN_TRUE\", str, token, token_len, i, sc, tc);\n          return true;\n        }\n        /* Unmatched chars at end of substring. */\n        mhd_log(\"UNMATCHED_TAIL_BREAK\", str, token, token_len, i, sc, tc);\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n    {\n      mhd_log(\"FIND_NEXT_SUBSTRING_ADVANCE\", str, token, token_len, outer_iter, 0, 0);\n      str++;\n    }\n    outer_iter++;\n  }\n\n  mhd_log(\"NO_MATCH_RETURN_FALSE\", str, token, token_len, outer_iter, 0, 0);\n  return false;\n}\n"
}