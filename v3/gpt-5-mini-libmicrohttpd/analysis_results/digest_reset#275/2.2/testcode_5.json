{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mhd_assert macro is defined as a no-op in some build configurations (for example #define mhd_assert(x) ((void)0) when assertions are disabled), the statement 'mhd_assert (! da->uninitialised);' becomes an executed no-op whose removal would not affect program behaviour. In that configuration it is dead code and therefore violates MISRA C 2023 Rule 2.2. If, however, mhd_assert expands to a real runtime check (e.g. calls abort/logs on failure), then the assertion is not dead and does not violate the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2752.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_reset:\n```c\n_MHD_static_inline void\ndigest_reset (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (! da->hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_MD5_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_reset (&da->ctx.md5_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    mhd_assert (! da->ready_for_hashing);\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif\n    mhd_assert (0); /* May not happen, bad algorithm */\n  }\n}\n```\n</target_code>\nPlease provide the modified digest_reset code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append human-readable state and control-flow notes to the log file. */\nstatic inline void\ndigest_reset_probe(const struct DigestAlgorithm *da, const char *where)\n{\n  FILE *f = fopen(\"/tmp/logs/2752.txt\", \"a\");\n  if (f)\n  {\n    /* Print pointer and key boolean/int fields to help reproduce the violation scenario. */\n    fprintf(f, \"digest_reset: %s: da=%p uninitialised=%d algo_selected=%d hashing=%d algo=%u\",\n            where, (const void *)da,\n            (int)da->uninitialised,\n            (int)da->algo_selected,\n            (int)da->hashing,\n            (unsigned)da->algo);\n#ifdef _DEBUG\n    fprintf(f, \" ready_for_hashing=%d\", (int)da->ready_for_hashing);\n#endif\n    fprintf(f, \"\\n\");\n    fclose(f);\n  }\n}\n\n_MHD_static_inline void\ndigest_reset (struct DigestAlgorithm *da)\n{\n  /* Log before assertions so we capture the evaluated state even if mhd_assert is a no-op. */\n  digest_reset_probe(da, \"pre_assert_uninitialised\");\n  mhd_assert (! da->uninitialised);\n\n  digest_reset_probe(da, \"pre_assert_algo_selected\");\n  mhd_assert (da->algo_selected);\n\n  digest_reset_probe(da, \"pre_assert_hashing\");\n  mhd_assert (! da->hashing);\n\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    digest_reset_probe(da, \"md5_pre_assert_ready_for_hashing_not\");\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_MD5_HAS_FINISH */\n    digest_reset_probe(da, \"md5_pre_assert_ready_for_hashing_yes\");\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_MD5_HAS_FINISH */\n\n    digest_reset_probe(da, \"md5_before_reset\");\n    MHD_MD5_reset (&da->ctx.md5_ctx);\n\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n    digest_reset_probe(da, \"md5_after_reset_set_ready\");\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    digest_reset_probe(da, \"sha256_pre_assert_ready_for_hashing_not\");\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    digest_reset_probe(da, \"sha256_pre_assert_ready_for_hashing_yes\");\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_SHA256_HAS_FINISH */\n\n    digest_reset_probe(da, \"sha256_before_reset\");\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n    digest_reset_probe(da, \"sha256_after_reset_set_ready\");\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    digest_reset_probe(da, \"sha512_256_pre_assert_ready_for_hashing_not\");\n    mhd_assert (! da->ready_for_hashing);\n\n    digest_reset_probe(da, \"sha512_256_before_init\");\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n    digest_reset_probe(da, \"sha512_256_after_init_set_ready\");\n#endif\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n    digest_reset_probe(da, \"default_branch_set_ready_false\");\n#endif\n    digest_reset_probe(da, \"default_branch_assert_failure\");\n    mhd_assert (0); /* May not happen, bad algorithm */\n  }\n}\n"
}