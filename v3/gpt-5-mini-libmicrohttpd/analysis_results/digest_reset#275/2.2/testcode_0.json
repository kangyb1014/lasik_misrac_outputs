{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment da->ready_for_hashing = false; is compiled only in _DEBUG builds and is immediately followed by mhd_assert(0). In typical configurations mhd_assert(0) is non\u2011returning (terminates the program), so the assignment has no observable effect \u2014 removing it would not change behaviour. Therefore this operation is dead code and Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2752.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_reset:\n```c\n_MHD_static_inline void\ndigest_reset (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (! da->hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_MD5_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_reset (&da->ctx.md5_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    mhd_assert (! da->ready_for_hashing);\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif\n    mhd_assert (0); /* May not happen, bad algorithm */\n  }\n}\n```\n</target_code>\nPlease provide the modified digest_reset code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: log control flow and state to /tmp/logs/2752.txt. */\nstatic void digest_reset_probe(const char *event, const struct DigestAlgorithm *da, const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/2752.txt\", \"a\");\n  if (!f) return;\n  fprintf(f, \"%s: da=%p algo=%d uninitialised=%d algo_selected=%d hashing=%d ready_for_hashing=%d\",\n          event, (void *) da,\n          (int) da->algo,\n          (int) da->uninitialised,\n          (int) da->algo_selected,\n          (int) da->hashing,\n          (int) da->ready_for_hashing);\n  if (extra) fprintf(f, \" extra=%s\", extra);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_static_inline void\ndigest_reset (struct DigestAlgorithm *da)\n{\n  /* Log entry state before performing the existing assertions */\n  digest_reset_probe(\"ENTRY\", da, NULL);\n\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (! da->hashing);\n\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_MD5_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_MD5_HAS_FINISH */\n    /* Log before resetting MD5 context */\n    digest_reset_probe(\"MD5_BEFORE_RESET\", da, NULL);\n    MHD_MD5_reset (&da->ctx.md5_ctx);\n#ifdef _DEBUG\n    /* Log about to assign ready_for_hashing = true */\n    digest_reset_probe(\"MD5_BEFORE_ASSIGN_TRUE\", da, NULL);\n    da->ready_for_hashing = true;\n    /* Log after assignment */\n    digest_reset_probe(\"MD5_AFTER_ASSIGN_TRUE\", da, NULL);\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_SHA256_HAS_FINISH */\n    digest_reset_probe(\"SHA256_BEFORE_RESET\", da, NULL);\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    digest_reset_probe(\"SHA256_BEFORE_ASSIGN_TRUE\", da, NULL);\n    da->ready_for_hashing = true;\n    digest_reset_probe(\"SHA256_AFTER_ASSIGN_TRUE\", da, NULL);\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    mhd_assert (! da->ready_for_hashing);\n    digest_reset_probe(\"SHA512_256_BEFORE_INIT\", da, NULL);\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n#ifdef _DEBUG\n    digest_reset_probe(\"SHA512_256_BEFORE_ASSIGN_TRUE\", da, NULL);\n    da->ready_for_hashing = true;\n    digest_reset_probe(\"SHA512_256_AFTER_ASSIGN_TRUE\", da, NULL);\n#endif\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n#ifdef _DEBUG\n    /* Log that the code path will assign false in _DEBUG */\n    digest_reset_probe(\"BAD_ALGO_BEFORE_ASSIGN_FALSE\", da, NULL);\n    da->ready_for_hashing = false;\n    digest_reset_probe(\"BAD_ALGO_AFTER_ASSIGN_FALSE\", da, NULL);\n#else\n    /* Log that no assignment will be performed in non-_DEBUG build */\n    digest_reset_probe(\"BAD_ALGO_NO_ASSIGN\", da, NULL);\n#endif\n    /* Log just before the fatal assertion */\n    digest_reset_probe(\"BAD_ALGO_BEFORE_ASSERT0\", da, NULL);\n    mhd_assert (0); /* May not happen, bad algorithm */\n  }\n}\n"
}