{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mhd_assert macro is defined as a debug-only check that expands to nothing (e.g. becomes a no-op when assertions are disabled / NDEBUG is set), then the statement mhd_assert(! da->hashing); is executed only in debug builds and has no observable effect in release builds. Removing that statement (or compiling with assertions disabled) would not change the program behaviour in the release configuration, so the operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2752.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_reset:\n```c\n_MHD_static_inline void\ndigest_reset (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (! da->hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_MD5_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_reset (&da->ctx.md5_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    mhd_assert (! da->ready_for_hashing);\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif\n    mhd_assert (0); /* May not happen, bad algorithm */\n  }\n}\n```\n</target_code>\nPlease provide the modified digest_reset code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void\nmhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2752.txt\", \"a\");\n  if (f)\n  {\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n  }\n}\n\n_MHD_static_inline void\ndigest_reset (struct DigestAlgorithm *da)\n{\n  /* Log entry and the state that is relevant to the asserted conditions. */\n  mhd_probe_log(\"digest_reset ENTER: da=%p uninitialised=%d algo_selected=%d hashing=%d algo=%d\",\n                (void *)da, (int)da->uninitialised, (int)da->algo_selected, (int)da->hashing, (int)da->algo);\n\n  /* Original assertions retained. We also log immediately before each assertion so test harnesses\n     can observe the program state that the assertion checks. This helps reproduce the scenario\n     where the mhd_assert may become a no-op in release builds (and thus be \"dead\"). */\n  mhd_probe_log(\"check: !da->uninitialised -> %d\", (int)(! da->uninitialised));\n  mhd_assert (! da->uninitialised);\n\n  mhd_probe_log(\"check: da->algo_selected -> %d\", (int)(da->algo_selected));\n  mhd_assert (da->algo_selected);\n\n  mhd_probe_log(\"check: !da->hashing -> %d\", (int)(! da->hashing));\n  mhd_assert (! da->hashing);\n\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    mhd_probe_log(\"MD5 branch: check: !da->ready_for_hashing -> %d\", (int)(! da->ready_for_hashing));\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_MD5_HAS_FINISH */\n    mhd_probe_log(\"MD5 branch: check: da->ready_for_hashing -> %d\", (int)(da->ready_for_hashing));\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_MD5_HAS_FINISH */\n\n    mhd_probe_log(\"MD5 branch: calling MHD_MD5_reset on ctx.md5_ctx for da=%p\", (void *)da);\n    MHD_MD5_reset (&da->ctx.md5_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n    mhd_probe_log(\"MD5 branch: set da->ready_for_hashing = true (debug)\");\n#endif /* _DEBUG */\n\n    mhd_probe_log(\"MD5 branch: done for da=%p\", (void *)da);\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    mhd_probe_log(\"SHA256 branch: check: !da->ready_for_hashing -> %d\", (int)(! da->ready_for_hashing));\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    mhd_probe_log(\"SHA256 branch: check: da->ready_for_hashing -> %d\", (int)(da->ready_for_hashing));\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_SHA256_HAS_FINISH */\n\n    mhd_probe_log(\"SHA256 branch: calling MHD_SHA256_reset on ctx.sha256_ctx for da=%p\", (void *)da);\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n    mhd_probe_log(\"SHA256 branch: set da->ready_for_hashing = true (debug)\");\n#endif /* _DEBUG */\n\n    mhd_probe_log(\"SHA256 branch: done for da=%p\", (void *)da);\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    mhd_probe_log(\"SHA512_256 branch: check: !da->ready_for_hashing -> %d\", (int)(! da->ready_for_hashing));\n    mhd_assert (! da->ready_for_hashing);\n\n    mhd_probe_log(\"SHA512_256 branch: calling MHD_SHA512_256_init on ctx.sha512_256_ctx for da=%p\", (void *)da);\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n    mhd_probe_log(\"SHA512_256 branch: set da->ready_for_hashing = true (debug)\");\n#endif\n\n    mhd_probe_log(\"SHA512_256 branch: done for da=%p\", (void *)da);\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n    mhd_probe_log(\"default branch: set da->ready_for_hashing = false (debug) for da=%p\", (void *)da);\n#endif\n    mhd_probe_log(\"default branch: unexpected algorithm (%d) for da=%p -> asserting failure\", (int)da->algo, (void *)da);\n    mhd_assert (0); /* May not happen, bad algorithm */\n  }\n\n  mhd_probe_log(\"digest_reset EXIT: da=%p\", (void *)da);\n}\n"
}