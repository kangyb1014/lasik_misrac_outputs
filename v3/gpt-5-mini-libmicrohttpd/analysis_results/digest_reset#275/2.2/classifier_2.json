{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of digest_reset:\n```c\n_MHD_static_inline void\ndigest_reset (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (! da->hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_MD5_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_reset (&da->ctx.md5_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    mhd_assert (! da->ready_for_hashing);\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif\n    mhd_assert (0); /* May not happen, bad algorithm */\n  }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The fragment contains active operations that affect program behaviour: MHD_SHA256_reset modifies the digest context and is required for correct operation; the mhd_assert checks document preconditions (and are only compiled/executed when asserts are enabled); the assignment under _DEBUG updates state used by debugging logic. The preprocessor guards merely remove the whole block when SHA\u2011256 support is not built in (not dead code). Therefore Rule 2.2 is not violated (is_rule_violated: false)."
}