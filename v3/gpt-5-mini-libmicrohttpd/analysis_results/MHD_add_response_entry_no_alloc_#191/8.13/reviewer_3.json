{
  "user_message": "An agent A claimed that the following MHD_add_response_entry_no_alloc_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_entry_no_alloc_.\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'char *content' is not const-qualified even though the function does not modify the pointee; it only stores the pointer into the response header ('hdr->value = content'). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible. This can be fixed by changing the parameter to 'const char *content' (and the corresponding struct member, e.g. 'const char *value').\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_add_response_entry_no_alloc_: response=0x564ce071e820 kind=1 header=0x564ce071e8e0 header_len=13 content=0x564ce071e900 content_len=8\nAFTER ASSIGN: hdr=0x564ce071fb10 hdr->header=0x564ce071e8e0 hdr->header_size=13 hdr->value=0x564ce071e900 hdr->value_size=8 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x564ce071e820, hdr=0x564ce071fb10)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x564ce071e820 kind=1 header=0x564ce071eb00 header_len=13 content=0x564ce071eb20 content_len=8\nAFTER ASSIGN: hdr=0x564ce071eb40 hdr->header=0x564ce071eb00 hdr->header_size=13 hdr->value=0x564ce071eb20 hdr->value_size=8 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x564ce071e820, hdr=0x564ce071eb40)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x564ce071e820 kind=1 header=0x564ce071e900 header_len=13 content=0x564ce071e8e0 content_len=8\nAFTER ASSIGN: hdr=0x564ce071eb80 hdr->header=0x564ce071e900 hdr->header_size=13 hdr->value=0x564ce071e8e0 hdr->value_size=8 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x564ce071e820, hdr=0x564ce071eb80)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x564ce071e820 kind=1 header=0x564ce071e8e0 header_len=4 content=0x564ce071ec00 content_len=29\nAFTER ASSIGN: hdr=0x564ce071ed50 hdr->header=0x564ce071e8e0 hdr->header_size=4 hdr->value=0x564ce071ec00 hdr->value_size=29 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x564ce071e820, hdr=0x564ce071ed50)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x564ce071e820 kind=1 header=0x564ce071e8e0 header_len=4 content=0x564ce071ec00 content_len=29\nAFTER ASSIGN: hdr=0x564ce071ed50 hdr->header=0x564ce071e8e0 hdr->header_size=4 hdr->value=0x564ce071ec00 hdr->value_size=29 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x564ce071e820, hdr=0x564ce071ed50)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x564ce071e820 kind=1 header=0x564ce071e8e0 header_len=17 content=0x564ce071e900 content_len=7\nAFTER ASSIGN: hdr=0x564ce071ed50 hdr->header=0x564ce071e8e0 hdr->header_size=17 hdr->value=0x564ce071e900 hdr->value_size=7 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x564ce071e820, hdr=0x564ce071ed50)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x564f5dd000c0 kind=1 header=0x564f5dd00200 header_len=7 content=0x564f5dd00220 content_len=20\nAFTER ASSIGN: hdr=0x564f5dd01430 hdr->header=0x564f5dd00200 hdr->header_size=7 hdr->value=0x564f5dd00220 hdr->value_size=20 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x564f5dd000c0, hdr=0x564f5dd01430)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x564f5dd00cb0 kind=1 header=0x564f5dd00180 header_len=7 content=0x564f5dd001e0 content_len=20\nAFTER ASSIGN: hdr=0x564f5dd00db0 hdr->header=0x564f5dd00180 hdr->header_size=7 hdr->value=0x564f5dd001e0 hdr->value_size=20 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x564f5dd00cb0, hdr=0x564f5dd00db0)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x564f5dd01270 kind=1 header=0x564f5dd00220 header_len=7 content=0x564f5dd00200 content_len=20\nAFTER ASSIGN: hdr=0x564f5dd01370 hdr->header=0x564f5dd00220 hdr->header_size=7 hdr->value=0x564f5dd00200 hdr->value_size=20 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x564f5dd01270, hdr=0x564f5dd01370)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x7f6e88000b90 kind=1 header=0x7f6e88000cb0 header_len=7 content=0x7f6e88000cd0 content_len=20\nAFTER ASSIGN: hdr=0x7f6e88001ee0 hdr->header=0x7f6e88000cb0 hdr->header_size=7 hdr->value=0x7f6e88000cd0 hdr->value_size=20 hdr->kind=1\nAbout to call _MHD_insert_header_last(response=0x7f6e88000b90, hdr=0x7f6e88001ee0)\nINSERTED: header inserted, returning true\nENTER MHD_add_response_entry_no_alloc_: respon\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is basically correct given the code shown. In MHD_add_response_entry_no_alloc_ the function never writes through header or content; it merely stores the pointers in the newly allocated hdr object (hdr->header = header; hdr->value = content;). Per MISRA C:2023 Rule 8.13 (\u201cA pointer should point to a const\u2011qualified type whenever possible\u201d), the formal parameters could and should be declared as const char *header and const char *content (and the corresponding struct members changed to const char *), unless there is a later use of those stored pointers that requires them to be mutable. If other code legitimately needs to modify the pointees via hdr->header or hdr->value, then const qualification would not be possible and no violation would occur. Based solely on the provided function and log, however, the rule is violated and the suggested fix is appropriate."
}