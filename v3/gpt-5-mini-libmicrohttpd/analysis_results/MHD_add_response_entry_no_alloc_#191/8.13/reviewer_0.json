{
  "user_message": "An agent A claimed that the following MHD_add_response_entry_no_alloc_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_entry_no_alloc_.\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'header' is declared as 'char *header' but within MHD_add_response_entry_no_alloc_ the function does not modify the characters pointed to by header (it only stores the pointer in hdr->header). Under MISRA C 2023 Rule 8.13 this pointer should be const-qualified (e.g. 'const char *header'), and the corresponding struct member should also be const if the intent is read-only. As written, the non-const pointer violates R.8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_add_response_entry_no_alloc_: response=0x55603132d820 kind=1 header=0x55603132d8e0 header_len=13 content=0x55603132d900 content_len=8\nAllocated hdr=0x55603132eb10\nAssigned hdr fields: hdr=0x55603132eb10 header=0x55603132d8e0 header_size=13 value=0x55603132d900 value_size=8 kind=1\nInserted header into response=0x55603132d820 via _MHD_insert_header_last\nEXIT MHD_add_response_entry_no_alloc_: returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x55603132d820 kind=1 header=0x55603132db00 header_len=13 content=0x55603132db20 content_len=8\nAllocated hdr=0x55603132db40\nAssigned hdr fields: hdr=0x55603132db40 header=0x55603132db00 header_size=13 value=0x55603132db20 value_size=8 kind=1\nInserted header into response=0x55603132d820 via _MHD_insert_header_last\nEXIT MHD_add_response_entry_no_alloc_: returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x55603132d820 kind=1 header=0x55603132d900 header_len=13 content=0x55603132d8e0 content_len=8\nAllocated hdr=0x55603132db80\nAssigned hdr fields: hdr=0x55603132db80 header=0x55603132d900 header_size=13 value=0x55603132d8e0 value_size=8 kind=1\nInserted header into response=0x55603132d820 via _MHD_insert_header_last\nEXIT MHD_add_response_entry_no_alloc_: returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x55603132d820 kind=1 header=0x55603132d8e0 header_len=4 content=0x55603132dc00 content_len=29\nAllocated hdr=0x55603132dd50\nAssigned hdr fields: hdr=0x55603132dd50 header=0x55603132d8e0 header_size=4 value=0x55603132dc00 value_size=29 kind=1\nInserted header into response=0x55603132d820 via _MHD_insert_header_last\nEXIT MHD_add_response_entry_no_alloc_: returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x55603132d820 kind=1 header=0x55603132d8e0 header_len=4 content=0x55603132dc00 content_len=29\nAllocated hdr=0x55603132dd50\nAssigned hdr fields: hdr=0x55603132dd50 header=0x55603132d8e0 header_size=4 value=0x55603132dc00 value_size=29 kind=1\nInserted header into response=0x55603132d820 via _MHD_insert_header_last\nEXIT MHD_add_response_entry_no_alloc_: returning true\nENTER MHD_add_response_entry_no_alloc_: response=0x55603132d820 kind=1 header=0x55603132d8e0 header_len=17 content=0x55603132d900 content_len=7\nAllocated hdr=0x55603132dd50\nAssigned hdr fields: hdr=0x55603132dd50 header=0x55603132d8e0 header_size=17 value=0x55603132d900 value_size=7 kind=1\nInserted header into response=0x55603132d820 via _MHD_insert_header_last\nEXIT MHD_add_response_entry_no_alloc_: returning true\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The claim is correct in the absence of a demonstrated need to modify the pointed-to characters. In the shown function neither 'header' nor 'content' are modified \u2014 they are only stored into the newly allocated response header structure (hdr->header and hdr->value). MISRA C:2023 R.8.13 recommends that pointers point to const-qualified types whenever possible, so the parameters should be declared as const char * (and the corresponding struct members should be const-qualified too) unless there is a clear and necessary reason elsewhere in the code to mutate the pointed-to buffers. If, however, other code (not shown) intentionally writes through hdr->header or hdr->value, then the non-const parameters are justified and the report would be incorrect. Given only the presented code, the report is correct."
}