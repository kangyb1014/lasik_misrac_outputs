{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'char *header' (and the struct member 'hdr->header') are non-const pointers that are assigned but not modified. Since the code merely stores a pointer to existing data rather than modifying it, the pointer should be const-qualified (e.g. const char *header and const char *hdr->header). Thus the assignment 'hdr->header = header;' represents a violation of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_entry_no_alloc_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_entry_no_alloc_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_alloc_:\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_entry_no_alloc_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe/logging helper to record control flow and state to /tmp/logs/1913.txt */\nstatic void\nmhd_probe_log (const char *event,\n               struct MHD_Response *response,\n               enum MHD_ValueKind kind,\n               char *header,\n               size_t header_len,\n               char *content,\n               size_t content_len,\n               struct MHD_HTTP_Res_Header *hdr)\n{\n  FILE *f = fopen(\"/tmp/logs/1913.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging only */\n\n  fprintf (f, \"EVENT: %s\\n\", event);\n  fprintf (f, \" response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu hdr=%p\\n\",\n           (void *) response, (int) kind,\n           (void *) header, header_len,\n           (void *) content, content_len,\n           (void *) hdr);\n\n  if (NULL != header && header_len > 0)\n  {\n    /* Log up to 64 bytes of header for inspection (may not be NUL-terminated). */\n    size_t to_print = header_len < 64u ? header_len : 64u;\n    fprintf (f, \" header_sample_len=%zu header_sample=\\'\", to_print);\n    /* Use fwrite to avoid issues with non-printable bytes; still useful for debugging. */\n    fwrite (header, 1u, to_print, f);\n    fprintf (f, \"\\'\\n\");\n  }\n\n  if (NULL != content && content_len > 0)\n  {\n    size_t to_print = content_len < 64u ? content_len : 64u;\n    fprintf (f, \" content_sample_len=%zu content_sample=\\'\", to_print);\n    fwrite (content, 1u, to_print, f);\n    fprintf (f, \"\\'\\n\");\n  }\n\n  if (NULL != hdr)\n  {\n    /* Record the fields of the newly allocated header structure. */\n    fprintf (f, \" hdr->header=%p hdr->header_size=%zu hdr->value=%p hdr->value_size=%zu hdr->kind=%d\\n\",\n             (void *) hdr->header,\n             (size_t) hdr->header_size,\n             (void *) hdr->value,\n             (size_t) hdr->value_size,\n             (int) hdr->kind);\n  }\n\n  fprintf (f, \"----\\n\");\n  fclose (f);\n}\n\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  /* Log entry with parameter state. */\n  mhd_probe_log (\"ENTRY\", response, kind, header, header_len, content, content_len, NULL);\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n  {\n    /* Log allocation failure path. */\n    mhd_probe_log (\"CALLOC_FAIL\", response, kind, header, header_len, content, content_len, NULL);\n    return false;\n  }\n\n  /* Log state after allocation, before assignment. */\n  mhd_probe_log (\"ALLOCATED\", response, kind, header, header_len, content, content_len, hdr);\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n\n  /* Log the moment after storing pointers into hdr to capture the violation scenario evidence. */\n  mhd_probe_log (\"ASSIGNED_TO_HDR\", response, kind, header, header_len, content, content_len, hdr);\n\n  _MHD_insert_header_last (response, hdr);\n\n  /* Log successful exit. */\n  mhd_probe_log (\"RETURN_SUCCESS\", response, kind, header, header_len, content, content_len, hdr);\n\n  return true; /* Success exit point */\n}\n"
}