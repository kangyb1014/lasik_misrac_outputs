{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'header' is declared as 'char *header' but within MHD_add_response_entry_no_alloc_ the function does not modify the characters pointed to by header (it only stores the pointer in hdr->header). Under MISRA C 2023 Rule 8.13 this pointer should be const-qualified (e.g. 'const char *header'), and the corresponding struct member should also be const if the intent is read-only. As written, the non-const pointer violates R.8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_entry_no_alloc_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_entry_no_alloc_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_alloc_:\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_entry_no_alloc_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n  FILE *log = fopen(\"/tmp/logs/1913.txt\", \"a\");\n\n  if (log)\n    {\n      /* Log entry with pointers and sizes so other agents can inspect whether\n         header is treated as read-only (pointer only stored) and capture\n         control flow. */\n      fprintf(log,\n              \"ENTER MHD_add_response_entry_no_alloc_: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n              (void *) response, (int) kind, (void *) header, header_len, (void *) content, content_len);\n    }\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    {\n      if (log)\n        {\n          fprintf(log, \"Allocation failed: hdr=NULL\\n\");\n          fclose(log);\n        }\n      return false;\n    }\n\n  if (log)\n    fprintf(log, \"Allocated hdr=%p\\n\", (void *) hdr);\n\n  /* Preserve original assignments; log the state after assignment so\n     callers can observe that header pointer is simply stored (not modified). */\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n\n  if (log)\n    {\n      fprintf(log,\n              \"Assigned hdr fields: hdr=%p header=%p header_size=%zu value=%p value_size=%zu kind=%d\\n\",\n              (void *) hdr, (void *) hdr->header, hdr->header_size, (void *) hdr->value, hdr->value_size, (int) hdr->kind);\n    }\n\n  _MHD_insert_header_last (response, hdr);\n\n  if (log)\n    {\n      fprintf(log, \"Inserted header into response=%p via _MHD_insert_header_last\\n\", (void *) response);\n      fprintf(log, \"EXIT MHD_add_response_entry_no_alloc_: returning true\\n\");\n      fclose(log);\n    }\n\n  return true; /* Success exit point */\n}\n"
}