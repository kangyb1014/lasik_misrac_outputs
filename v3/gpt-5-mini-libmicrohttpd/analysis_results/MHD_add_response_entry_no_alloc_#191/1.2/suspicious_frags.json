{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_alloc_:\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the entire function for compiler-specific language extensions (examples: GCC/Clang __attribute__(), __builtin_* functions, typeof, statement expressions ({ ... }), inline asm, __asm__, __extension__, non-standard keywords, compiler-specific pragmas, or vendor-specific type keywords). None are present. Specific constructs checked and why they are not extensions:\n- bool: this is the standard C _Bool/stdbool.h type, not a compiler extension.\n- enum, struct, pointers, size_t: all standard C types/constructs.\n- Assignment inside the if condition (if (NULL == (hdr = ...))): standard C, not an extension.\n- Function and identifier names with leading underscores (e.g. _MHD_insert_header_last, MHD_add_response_entry_no_alloc_): leading-underscore identifiers can be reserved by the implementation but are not compiler language extensions; they are valid C identifiers.\n- Calls to MHD_calloc_ and macros like mhd_assert: these are library/macros defined elsewhere; their presence alone is not a language extension. If those expand to compiler-specific constructs, that would need investigation, but nothing in this snippet shows such expansion.\n\nTherefore there are no code fragments in this function that use compiler-declared language extensions and thus nothing to report for MISRA C 2023 Rule 1.2."
}