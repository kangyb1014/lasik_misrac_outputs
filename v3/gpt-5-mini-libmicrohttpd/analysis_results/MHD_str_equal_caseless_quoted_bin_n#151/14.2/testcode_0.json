{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop in the function uses two loop counters (i and j) \u2014 the third clause increments both (++i, ++j). MISRA C 2023 Rule 14.2 clause 4 allows only one loop counter in a for loop. The separate declaration 'size_t i;' by itself is not forbidden, but in this context the loop is ill-formed because two counters are used/modified, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_quoted_bin_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1514.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_quoted_bin_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_quoted_bin_n:\n```c\nbool\nMHD_str_equal_caseless_quoted_bin_n (const char *quoted,\n                                     size_t quoted_len,\n                                     const char *unquoted,\n                                     size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (! charsequalcaseless (quoted[i], unquoted[j]))\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_quoted_bin_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <ctype.h>\n\n/*\n * Probe logging helper: append a single line to /tmp/logs/1514.txt\n */\nstatic void append_log_line(const char *line)\n{\n    FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n    if (f == NULL)\n        return;\n    fprintf(f, \"%s\\n\", line);\n    fclose(f);\n}\n\nstatic void log_entry(size_t quoted_len, size_t unquoted_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n    if (f == NULL)\n        return;\n    fprintf(f, \"ENTER MHD_str_equal_caseless_quoted_bin_n: quoted_len=%zu, unquoted_len=%zu\\n\",\n            quoted_len, unquoted_len);\n    fclose(f);\n}\n\nstatic void log_iteration(size_t i, size_t j, unsigned char qch, unsigned char uch)\n{\n    FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n    if (f == NULL)\n        return;\n    fprintf(f, \"LOOP ITER: i=%zu, j=%zu, quoted[i]=0x%02x ('%c'), unquoted[j]=0x%02x ('%c')\\n\",\n            i, j, qch, (qch >= 32 && qch < 127) ? qch : '.', uch, (uch >= 32 && uch < 127) ? uch : '.');\n    fclose(f);\n}\n\nstatic void log_backslash(size_t i_before, size_t i_after, size_t quoted_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n    if (f == NULL)\n        return;\n    fprintf(f, \"BACKSLASH: i_before=%zu, i_after=%zu, quoted_len=%zu\\n\",\n            i_before, i_after, quoted_len);\n    fclose(f);\n}\n\nstatic void log_mismatch(size_t i, size_t j, unsigned char qch, unsigned char uch)\n{\n    FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n    if (f == NULL)\n        return;\n    fprintf(f, \"MISMATCH at i=%zu, j=%zu: quoted=0x%02x ('%c'), unquoted=0x%02x ('%c')\\n\",\n            i, j, qch, (qch >= 32 && qch < 127) ? qch : '.', uch, (uch >= 32 && uch < 127) ? uch : '.');\n    fclose(f);\n}\n\nstatic void log_return_bool(bool retval, const char *reason, size_t i, size_t j, size_t quoted_len, size_t unquoted_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n    if (f == NULL)\n        return;\n    fprintf(f, \"RETURN %s (%s): i=%zu, j=%zu, quoted_len=%zu, unquoted_len=%zu\\n\",\n            retval ? \"true\" : \"false\", reason, i, j, quoted_len, unquoted_len);\n    fclose(f);\n}\n\n/*\n * Provide a local implementation for charsequalcaseless so this unit compiles\n * and can be executed for testing. This mimics a case-insensitive comparison\n * of two characters.\n */\nstatic bool charsequalcaseless (char a, char b)\n{\n    unsigned char ua = (unsigned char) a;\n    unsigned char ub = (unsigned char) b;\n    return (unsigned char) tolower(ua) == (unsigned char) tolower(ub);\n}\n\nbool\nMHD_str_equal_caseless_quoted_bin_n (const char *quoted,\n                                     size_t quoted_len,\n                                     const char *unquoted,\n                                     size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n\n  /* Log entry and parameters */\n  log_entry(quoted_len, unquoted_len);\n\n  if (unquoted_len < quoted_len / 2)\n  {\n    log_return_bool(false, \"unquoted_len < quoted_len/2\", 0u, 0u, quoted_len, unquoted_len);\n    return false;\n  }\n\n  j = 0;\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"Init before loop: j=%zu\", j);\n    append_log_line(buf);\n  }\n\n  /* NOTE: The loop intentionally uses two loop counters in the third clause\n   * (++i, ++j). This reproduces the reported scenario where a for loop\n   * modifies more than one loop counter in the iteration expression.\n   */\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    /* Log state at start of iteration */\n    log_iteration(i, j, (unsigned char) quoted[i], (unsigned char) unquoted[j]);\n\n    if ('\\\\' == quoted[i])\n    {\n      size_t i_before = i;\n      i++; /* Advance to the next character */\n      log_backslash(i_before, i, quoted_len);\n      if (quoted_len == i)\n      {\n        log_return_bool(false, \"escaped backslash but no following character\", i, j, quoted_len, unquoted_len);\n        return false; /* No character after escaping backslash */\n      }\n    }\n    if (! charsequalcaseless (quoted[i], unquoted[j]))\n    {\n      log_mismatch(i, j, (unsigned char) quoted[i], (unsigned char) unquoted[j]);\n      log_return_bool(false, \"character mismatch\", i, j, quoted_len, unquoted_len);\n      return false; /* Different characters */\n    }\n  }\n\n  if ((quoted_len != i) || (unquoted_len != j))\n  {\n    log_return_bool(false, \"length mismatch after loop\", i, j, quoted_len, unquoted_len);\n    return false; /* The strings have different length */\n  }\n\n  log_return_bool(true, \"matched successfully\", i, j, quoted_len, unquoted_len);\n  return true;\n}\n"
}