{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop\u2019s loop counter 'i' is incremented inside the loop body (the code contains an i++ immediately before the fragment). Rule 14.2 prohibits modifying the loop counter in the loop body. Although the specific fragment 'if (quoted_len == i) return false;' does not itself modify 'i', it appears immediately after the in-body increment of the loop counter, so the for loop is not well-formed and the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_quoted_bin_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1514.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_quoted_bin_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_quoted_bin_n:\n```c\nbool\nMHD_str_equal_caseless_quoted_bin_n (const char *quoted,\n                                     size_t quoted_len,\n                                     const char *unquoted,\n                                     size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (! charsequalcaseless (quoted[i], unquoted[j]))\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_quoted_bin_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Forward declaration of helper used by the function under test. */\nextern bool charsequalcaseless (char a, char b);\n\n/* Logging probe: append human-readable trace messages to /tmp/logs/1514.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    va_end(ap);\n    fclose(f);\n}\n\nbool\nMHD_str_equal_caseless_quoted_bin_n (const char *quoted,\n                                     size_t quoted_len,\n                                     const char *unquoted,\n                                     size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n\n  /* Log entry and initial lengths */\n  log_probe(\"ENTER: quoted_len=%zu, unquoted_len=%zu\", quoted_len, unquoted_len);\n\n  if (unquoted_len < quoted_len / 2)\n  {\n    log_probe(\"EARLY_RETURN: unquoted_len < quoted_len/2 (%zu < %zu)\", unquoted_len, quoted_len / 2);\n    return false;\n  }\n\n  j = 0;\n  log_probe(\"LOOP_START: initial i=0, j=0\");\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    /* Log iteration entry; do not dereference quoted[i] here if out-of-bounds would occur\n       but loop condition ensures quoted_len > i and unquoted_len > j, so it's safe. */\n    log_probe(\"ITER: i=%zu, j=%zu, quoted_len=%zu, unquoted_len=%zu, quoted[i]=0x%02x, unquoted[j]=0x%02x\",\n              i, j, quoted_len, unquoted_len,\n              (unsigned char)quoted[i], (unsigned char)unquoted[j]);\n\n    if ('\\\\' == quoted[i])\n    {\n      log_probe(\"BACKSLASH_FOUND: at i=%zu (quoted[i]=\\\\)\", i);\n\n      i++; /* Advance to the next character */\n      log_probe(\"IN_BODY_INCREMENT: i incremented inside loop body -> i=%zu\", i);\n\n      if (quoted_len == i)\n      {\n        log_probe(\"RETURN_FALSE: No character after escaping backslash (quoted_len==i==%zu)\", i);\n        return false; /* No character after escaping backslash */\n      }\n    }\n\n    if (! charsequalcaseless (quoted[i], unquoted[j]))\n    {\n      log_probe(\"RETURN_FALSE: characters differ at i=%zu, j=%zu -> quoted=0x%02x, unquoted=0x%02x\",\n                i, j, (unsigned char)quoted[i], (unsigned char)unquoted[j]);\n      return false; /* Different characters */\n    }\n    log_probe(\"ITER_OK: matched at i=%zu, j=%zu\", i, j);\n  }\n\n  if ((quoted_len != i) || (unquoted_len != j))\n  {\n    log_probe(\"RETURN_FALSE: length mismatch after loop: quoted_len=%zu, i=%zu, unquoted_len=%zu, j=%zu\",\n              quoted_len, i, unquoted_len, j);\n    return false; /* The strings have different length */\n  }\n\n  log_probe(\"RETURN_TRUE: strings equal caselessly (quoted_len=%zu, unquoted_len=%zu)\", quoted_len, unquoted_len);\n  return true;\n}\n"
}