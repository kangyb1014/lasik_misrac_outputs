{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration 'size_t j;' leads to the for loop using two loop counters (i and j). In the for statement (++i, ++j) the third clause modifies more than one object (both i and j), and the loop body also modifies i (i++ on backslash), so the requirements of Rule 14.2 are violated: there shall be only one loop counter and it shall not be modified in the loop body. Therefore the code violates MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_quoted_bin_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1514.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_quoted_bin_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_quoted_bin_n:\n```c\nbool\nMHD_str_equal_caseless_quoted_bin_n (const char *quoted,\n                                     size_t quoted_len,\n                                     const char *unquoted,\n                                     size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (! charsequalcaseless (quoted[i], unquoted[j]))\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_quoted_bin_n code.\n",
  "test_code": "#include <stdbool.h>\n#include <stddef.h>\n#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* External comparator - assumed provided elsewhere in the project */\nextern int charsequalcaseless (char a, char b);\n\n/* Helper probe: append a log entry describing the current control state.\n   Tries to create /tmp/logs if it does not exist. */\nstatic void\nmhd_log_probe(const char *event, size_t i, size_t j,\n              size_t quoted_len, size_t unquoted_len,\n              int escaped_flag, int qc, int uc)\n{\n  FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* Try to create the directory then reopen. Ignore errors if creation fails. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n  }\n  if (f != NULL)\n  {\n    /* Print numeric values for characters (0..255) to avoid locale/printing issues */\n    (void)fprintf(f,\n                  \"EVENT=%s i=%zu j=%zu quoted_len=%zu unquoted_len=%zu escaped=%d qc=0x%02X uc=0x%02X\\n\",\n                  event, i, j, quoted_len, unquoted_len, escaped_flag,\n                  (unsigned int)(unsigned char)qc, (unsigned int)(unsigned char)uc);\n    (void)fclose(f);\n  }\n}\n\nbool\nMHD_str_equal_caseless_quoted_bin_n (const char *quoted,\n                                     size_t quoted_len,\n                                     const char *unquoted,\n                                     size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n\n  /* Log entry into function */\n  mhd_log_probe(\"entry\", 0u, 0u, quoted_len, unquoted_len, 0, 0, 0);\n\n  if (unquoted_len < quoted_len / 2)\n  {\n    mhd_log_probe(\"early_length_check_failed\", 0u, 0u, quoted_len, unquoted_len, 0, 0, 0);\n    return false;\n  }\n\n  j = 0u;\n\n  mhd_log_probe(\"before_loop\", 0u, j, quoted_len, unquoted_len, 0, 0, 0);\n\n  for (i = 0u; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    /* Log iteration start: characters are logged if indexes are in range */\n    int qc = (quoted_len > i) ? (int)(unsigned char)quoted[i] : -1;\n    int uc = (unquoted_len > j) ? (int)(unsigned char)unquoted[j] : -1;\n    mhd_log_probe(\"iter_start\", i, j, quoted_len, unquoted_len, 0, qc, uc);\n\n    if ('\\\\' == quoted[i])\n    {\n      mhd_log_probe(\"backslash_seen_before_advance\", i, j, quoted_len, unquoted_len, 1, qc, uc);\n\n      i++; /* Advance to the next character */\n\n      if (quoted_len == i)\n      {\n        mhd_log_probe(\"escape_at_end_failure\", i, j, quoted_len, unquoted_len, 1, -1, uc);\n        return false; /* No character after escaping backslash */\n      }\n\n      /* Log the escaped character that will be compared */\n      qc = (int)(unsigned char)quoted[i];\n      mhd_log_probe(\"after_escape_advance\", i, j, quoted_len, unquoted_len, 1, qc, uc);\n    }\n\n    /* Compare the characters - log the values used */\n    {\n      int qc_local = (int)(unsigned char)quoted[i];\n      int uc_local = (int)(unsigned char)unquoted[j];\n      mhd_log_probe(\"before_compare\", i, j, quoted_len, unquoted_len, 0, qc_local, uc_local);\n\n      if (! charsequalcaseless (quoted[i], unquoted[j]))\n      {\n        mhd_log_probe(\"char_mismatch\", i, j, quoted_len, unquoted_len, 0, qc_local, uc_local);\n        return false; /* Different characters */\n      }\n\n      mhd_log_probe(\"char_match\", i, j, quoted_len, unquoted_len, 0, qc_local, uc_local);\n    }\n  }\n\n  mhd_log_probe(\"after_loop\", i, j, quoted_len, unquoted_len, 0, 0, 0);\n\n  if ((quoted_len != i) || (unquoted_len != j))\n  {\n    mhd_log_probe(\"length_mismatch_after_loop\", i, j, quoted_len, unquoted_len, 0, 0, 0);\n    return false; /* The strings have different length */\n  }\n\n  mhd_log_probe(\"success\", i, j, quoted_len, unquoted_len, 0, 0, 0);\n  return true;\n}\n"
}