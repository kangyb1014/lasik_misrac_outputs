{
  "user_message": "An agent A claimed that the following digest_update code violates the MISRA C 2023 rule 14.3.\n<misra_rule>\nMISRA C 2023 Rule 14.3 is Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<target_code>\nHere is the original code of digest_update.\n```c\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                           (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* May not happen */\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is implemented as a macro that uses the supplied expression as a controlling expression (for example: #define mhd_assert(x) do { if (!(x)) mhd_assert_fail(); } while(0) or #define mhd_assert(x) ((void)((x) ? 0 : mhd_assert_fail())) ), then the call mhd_assert(0) yields an invariant controlling expression (if(1) or the conditional's controlling expression is constant). That expansion therefore violates MISRA C 2023 Rule 14.3.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct, but only when the assert macro expands into a controlling statement that uses the supplied expression directly as its controlling expression. If mhd_assert is defined as a macro that generates an if or conditional operator using the argument (for example: #define mhd_assert(x) do { if (!(x)) mhd_assert_fail(); } while(0) or #define mhd_assert(x) ((void)((x) ? 0 : mhd_assert_fail())) ), then mhd_assert(0) will expand into an invariant controlling expression (e.g. if (!(0)) => if (1), or (0) ? ... => controlling expression constant 0). MISRA C 2023 Rule 14.3 forbids invariant controlling expressions (except the listed exceptions, which do not apply here), so in that expansion the code would violate Rule 14.3. Note that if mhd_assert is implemented differently (for example it becomes a function call or ((void)0) in release builds), no such violation occurs."
}