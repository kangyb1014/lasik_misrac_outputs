{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is implemented as a macro that uses the supplied expression as a controlling expression (for example: #define mhd_assert(x) do { if (!(x)) mhd_assert_fail(); } while(0) or #define mhd_assert(x) ((void)((x) ? 0 : mhd_assert_fail())) ), then the call mhd_assert(0) yields an invariant controlling expression (if(1) or the conditional's controlling expression is constant). That expansion therefore violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2765.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_update:\n```c\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                           (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* May not happen */\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n```\n</target_code>\nPlease provide the modified digest_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: logs control flow and selected state to /tmp/logs/2765.txt. */\nstatic void\nmhd_log_probe (const void *vda, const void *data, size_t length, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/2765.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  /* Minimal, defensive logging to avoid changing program logic. */\n  (void) fprintf (f, \"Stage: %s\\n\", (stage != NULL) ? stage : \"(null)\");\n  (void) fprintf (f, \"da=%p, length=%zu\\n\", vda, length);\n\n  /* Attempt to log a few bytes of the provided data pointer for context. */\n  if (data != NULL && length > 0U)\n  {\n    const unsigned char *p = (const unsigned char *) data;\n    size_t i;\n    size_t cnt = (length < 8U) ? length : 8U;\n    (void) fprintf (f, \"data[0..%zu]=\", (cnt == 0U) ? 0U : (cnt - 1U));\n    for (i = 0U; i < cnt; ++i)\n    {\n      (void) fprintf (f, \"%02x \", (unsigned int) p[i]);\n    }\n    (void) fprintf (f, \"\\n\");\n  }\n\n  (void) fprintf (f, \"---\\n\");\n  (void) fclose (f);\n}\n\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  /* Log entry and basic state before assertions to capture calling context. */\n  mhd_log_probe (da, data, length, \"enter: before initial asserts\");\n\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n\n  /* Log after the initial assertions \u2014 these reflect preconditions. */\n  mhd_log_probe (da, data, length, \"after initial asserts\");\n\n#ifdef MHD_MD5_SUPPORT\n  mhd_log_probe (da, data, length, \"check: MD5\");\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n    mhd_log_probe (da, data, length, \"take: MD5 path\");\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  {\n    mhd_log_probe (da, data, length, \"check: SHA256\");\n    if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    {\n      mhd_log_probe (da, data, length, \"take: SHA256 path\");\n      MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n    }\n    else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n    {\n      mhd_log_probe (da, data, length, \"check: SHA512_256\");\n      if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n      {\n        mhd_log_probe (da, data, length, \"take: SHA512_256 path\");\n        MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                               (const uint8_t *) data, length);\n      }\n      else\n#endif /* MHD_SHA512_256_SUPPORT */\n      {\n        /* Log the unexpected control path prior to the assertion. */\n        mhd_log_probe (da, data, length, \"unexpected: about to hit mhd_assert(0)\");\n        mhd_assert (0);   /* May not happen */\n      }\n\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n"
}