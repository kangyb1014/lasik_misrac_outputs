{
  "user_message": "An agent A claimed that the following digest_update code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of digest_update.\n```c\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                           (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* May not happen */\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the member da->hashing is never read (for example it is only written here and never inspected elsewhere, or only referenced inside assertions that are disabled), then the assignment da->hashing = true; is an operation whose removal would not affect program behaviour. In that case this write is dead code and violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's reasoning is correct in principle but is conditional on project-wide usage. Rule 2.2 forbids operations whose removal would not affect program behaviour. The assignment da->hashing = true; is exactly such an operation if the stored field is never subsequently read (or only read from code that is itself disabled, e.g. only inside assertions that are compiled out). In that case removing the write would not change program observable behaviour and it is dead code.\n\nFrom the snippet alone you cannot prove the violation \u2014 whether a Rule 2.2 breach actually exists depends on the rest of the project: is da->hashing inspected anywhere in non-disabled code, or treated volatile, or used by a debugger/monitor in a way the project considers behaviour? If it is never read outside disabled assertions, then the report is correct and the write violates MISRA C 2023 Rule 2.2. If the field is read/used, then no violation occurs.\n\nRecommendation: inspect the full project to see if da->hashing is read (in non-assert code) or otherwise has side effects. If it is truly unused, remove the assignment (or the field) or document/justify it with an approved deviation."
}