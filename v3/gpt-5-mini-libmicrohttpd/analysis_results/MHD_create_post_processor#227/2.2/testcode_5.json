{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement `encoding = NULL;` is redundant. Immediately after this assignment the function calls MHD_lookup_connection_value_n(&encoding,...). If that call fails the function returns immediately, so the earlier assignment has no effect; if it succeeds it will set encoding to the returned value, overwriting the assignment. Removing the single assignment would not change program behaviour, so the operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_post_processor code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2272.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_post_processor as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_post_processor:\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_post_processor code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper - writes control flow and state to /tmp/logs/2272.txt */\nstatic void mhd_pp_log_probe(const char *label,\n                             const void *connection,\n                             const void *iter,\n                             size_t buffer_size,\n                             const char *encoding,\n                             const char *boundary,\n                             size_t blen,\n                             int lookup_ret)\n{\n  FILE *f = fopen(\"/tmp/logs/2272.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"[MHD_create_post_processor] %s\\n\", label);\n  fprintf(f, \"  connection=%p, iter=%p, buffer_size=%zu\\n\",\n          connection, iter, buffer_size);\n  if (encoding)\n  {\n    /* print up to 256 chars of encoding to avoid huge logs */\n    size_t show = strlen(encoding);\n    if (show > 256) show = 256;\n    fprintf(f, \"  encoding=%p, encoding_str=%.*s\\n\", encoding, (int)show, encoding);\n  }\n  else\n    fprintf(f, \"  encoding=NULL\\n\");\n  fprintf(f, \"  boundary=%p\\n\", boundary);\n  fprintf(f, \"  blen=%zu\\n\", blen);\n  if (lookup_ret != -999)\n    fprintf(f, \"  lookup_ret=%d\\n\", lookup_ret);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n\n  /* Log entry state */\n  mhd_pp_log_probe(\"ENTRY\", connection, iter, buffer_size, NULL, NULL, 0, -999);\n\n  encoding = NULL;\n  /* Log right after the assignment that is reported as redundant */\n  mhd_pp_log_probe(\"AFTER encoding = NULL\", connection, iter, buffer_size, encoding, NULL, 0, -999);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n  {\n    /* Log lookup failure including the encoding pointer (should remain NULL) */\n    mhd_pp_log_probe(\"LOOKUP FAILED - returning NULL\", connection, iter, buffer_size, encoding, NULL, 0, (int)MHD_NO);\n    return NULL;\n  }\n\n  /* Log lookup success and encoding content */\n  mhd_pp_log_probe(\"LOOKUP SUCCEEDED\", connection, iter, buffer_size, encoding, NULL, 0, (int)0);\n\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    {\n      mhd_pp_log_probe(\"ENCODING NOT SUPPORTED - returning NULL\", connection, iter, buffer_size, encoding, NULL, 0, -999);\n      return NULL;\n    }\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n    {\n      mhd_pp_log_probe(\"NO BOUNDARY FOUND - returning NULL\", connection, iter, buffer_size, encoding, NULL, 0, -999);\n      return NULL; /* failed to determine boundary */\n    }\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n\n    /* Log after determining boundary and blen */\n    mhd_pp_log_probe(\"BOUNDARY DETERMINED\", connection, iter, buffer_size, encoding, boundary, blen, -999);\n\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n    {\n      mhd_pp_log_probe(\"BOUNDARY INVALID/OUT OF MEMORY - returning NULL\", connection, iter, buffer_size, encoding, boundary, blen, -999);\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    }\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n      mhd_pp_log_probe(\"BOUNDARY QUOTED - stripped quotes\", connection, iter, buffer_size, encoding, boundary, blen, -999);\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n  {\n    mhd_pp_log_probe(\"CALLOC FAILED - returning NULL\", connection, iter, buffer_size, encoding, boundary, blen, -999);\n    return NULL;\n  }\n\n  /* Log the final state before populating the structure */\n  mhd_pp_log_probe(\"ALLOCATED - populating ret fields\", connection, iter, buffer_size, encoding, boundary, blen, -999);\n\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n\n  mhd_pp_log_probe(\"RETURNING ret\", connection, iter, buffer_size, encoding, boundary, blen, -999);\n  return ret;\n}\n"
}