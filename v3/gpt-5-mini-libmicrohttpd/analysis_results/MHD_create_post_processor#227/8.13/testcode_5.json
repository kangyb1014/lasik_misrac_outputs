{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes non-const pointer parameters that are only read/forwarded and never modified, so they could be const-qualified. Specifically:\n\n- struct MHD_Connection *connection: within MHD_create_post_processor the connection is only passed to lookup functions and assigned into ret->connection; it is never modified. It could be declared as const struct MHD_Connection *connection (or at least const where only read) to satisfy Rule 8.13.\n\n- void *iter_cls: this parameter is stored in ret->cls and not modified by the function. If the closure object is not intended to be modified by callers through this API, it could be declared const void *iter_cls.\n\nThe return type (struct MHD_PostProcessor *) and the function-pointer parameter (MHD_PostDataIterator iter) are not good candidates for const in this context. Therefore the rule is violated because pointer parameters that can be const-qualified are not.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_post_processor code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_post_processor as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_post_processor:\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_post_processor code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logger: write appended logs to /tmp/logs/2273.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  /* try to create directory if it does not exist; ignore errors */\n  (void)mkdir(\"/tmp/logs\", 0700);\n\n  f = fopen(\"/tmp/logs/2273.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fflush(f);\n  fclose(f);\n}\n\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  /* Log entry with parameter values */\n  mhd_probe_log(\"ENTER: MHD_create_post_processor(connection=%p, buffer_size=%zu, iter=%p, iter_cls=%p)\",\n                (void *)connection, buffer_size, (void *)iter, (void *)iter_cls);\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n  {\n    /* Log the precise reason that leads to panic before delegating to original behavior */\n    mhd_probe_log(\"PANIC_CONDITION: buffer_size=%zu (<256? %d), connection=%p, iter=%p\",\n                  buffer_size,\n                  (int)(buffer_size < 256),\n                  (void *)connection,\n                  (void *)iter);\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  }\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n  {\n    mhd_probe_log(\"LOOKUP_FAILED: MHD_lookup_connection_value_n returned MHD_NO; connection=%p\", (void *)connection);\n    return NULL;\n  }\n  mhd_assert (NULL != encoding);\n  mhd_probe_log(\"FOUND_ENCODING: encoding=%s\", encoding ? encoding : \"(null)\");\n\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    {\n      mhd_probe_log(\"UNSUPPORTED_ENCODING: encoding=%s\", encoding ? encoding : \"(null)\");\n      return NULL;\n    }\n\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    mhd_probe_log(\"MULTIPART_DETECTED: raw_boundary_start=%p (offset %zu)\", (void *)boundary,\n                  (size_t)(boundary - encoding));\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n    {\n      mhd_probe_log(\"BOUNDARY_NOT_FOUND: encoding=%s\", encoding ? encoding : \"(null)\");\n      return NULL; /* failed to determine boundary */\n    }\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    mhd_probe_log(\"BOUNDARY_RAW: boundary=%s, blen=%zu\", boundary, blen);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n    {\n      mhd_probe_log(\"INVALID_BOUNDARY_OR_BUFFER: blen=%zu, buffer_size=%zu\", blen, buffer_size);\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    }\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n      mhd_probe_log(\"BOUNDARY_QUOTED: adjusted_boundary=%s, adjusted_blen=%zu\", boundary, blen);\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n  {\n    mhd_probe_log(\"ALLOC_FAIL: requested_bytes=%zu\", sizeof (struct MHD_PostProcessor) + buffer_size + 1);\n    return NULL;\n  }\n\n  /* Log allocation success and planned initialization values */\n  mhd_probe_log(\"ALLOC_OK: ret=%p, buffer_size_adjusted=%zu, blen=%zu, boundary_ptr=%p\",\n                (void *)ret, buffer_size, blen, (void *)boundary);\n\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n\n  /* Final state log before returning */\n  mhd_probe_log(\"EXIT: MHD_create_post_processor returning %p; fields: connection=%p, ikvi=%p, cls=%p, encoding=%s, buffer_size=%zu, blen=%zu, boundary=%p\",\n                (void *)ret,\n                (void *)ret->connection,\n                (void *)ret->ikvi,\n                (void *)ret->cls,\n                ret->encoding ? ret->encoding : \"(null)\",\n                ret->buffer_size,\n                ret->blen,\n                (void *)ret->boundary);\n\n  return ret;\n}\n"
}