{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_mhd_response_size:\n```c\nstatic const char *\nget_mhd_response_size (void)\n{\n  if (tool_params.empty)\n    return \"0 bytes (empty)\";\n  else if (tool_params.tiny)\n    return \"3 bytes (tiny)\";\n  else if (tool_params.medium)\n    return \"8 KB (medium)\";\n  else if (tool_params.large)\n    return \"1 MB (large)\";\n  return \"!!internal error!!\";\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nelse if (tool_params.large)\n    return \"1 MB (large)\";\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the controlling expression 'tool_params.large' is a non-constant object member and thus not invariant. A violation would occur if 'tool_params.large' were a compile-time constant or otherwise provably always true/false (for example if it were a macro defined as 1 or a const object initialized to a fixed value and never modified), making the condition invariant."
}