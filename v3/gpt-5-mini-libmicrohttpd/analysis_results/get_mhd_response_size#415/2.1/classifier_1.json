{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_mhd_response_size:\n```c\nstatic const char *\nget_mhd_response_size (void)\n{\n  if (tool_params.empty)\n    return \"0 bytes (empty)\";\n  else if (tool_params.tiny)\n    return \"3 bytes (tiny)\";\n  else if (tool_params.medium)\n    return \"8 KB (medium)\";\n  else if (tool_params.large)\n    return \"1 MB (large)\";\n  return \"!!internal error!!\";\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (tool_params.empty)\n    return \"0 bytes (empty)\";\n  else if (tool_params.tiny)\n    return \"3 bytes (tiny)\";\n  else if (tool_params.medium)\n    return \"8 KB (medium)\";\n  else if (tool_params.large)\n    return \"1 MB (large)\";\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown fragment as written: each else-if branch can be reached depending on the runtime state of tool_params, and the final return provides a default. A violation would occur only in a specific case where some branch is provably never reachable \u2014 for example, if tool_params is a compile-time constant (or its fields are macros expanding to compile-time constants) such that tool_params.empty is always true; then the subsequent else-if branches and their code would be unreachable and would violate MISRA C 2023 Rule 2.1."
}