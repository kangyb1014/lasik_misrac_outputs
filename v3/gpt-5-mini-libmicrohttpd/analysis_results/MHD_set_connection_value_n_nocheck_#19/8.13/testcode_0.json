{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the struct member pos->header is declared as a non-const pointer (e.g. \"char *header\" in struct MHD_HTTP_Req_Header), then the assignment pos->header = key; copies a const char * into a char *, discarding the const qualifier. That violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types when possible). (If pos->header is already declared as \"const char *header\" then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n_nocheck_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/193.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value_n_nocheck_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n_nocheck_:\n```c\nstatic enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                     enum MHD_ValueKind kind,\n                                     const char *key,\n                                     size_t key_size,\n                                     const char *value,\n                                     size_t value_size)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  pos = MHD_connection_alloc_memory_ (connection,\n                                      sizeof (struct MHD_HTTP_Res_Header));\n  if (NULL == pos)\n    return MHD_NO;\n  pos->header = key;\n  pos->header_size = key_size;\n  pos->value = value;\n  pos->value_size = value_size;\n  pos->kind = kind;\n  pos->next = NULL;\n  /* append 'pos' to the linked list of headers */\n  if (NULL == connection->rq.headers_received_tail)\n  {\n    connection->rq.headers_received = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  else\n  {\n    connection->rq.headers_received_tail->next = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value_n_nocheck_ code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/193.txt.\n   Do not alter program logic; only record pointers, sizes and leading\n   contents (bounded) of key and value to help reproduce the const-qualifier\n   discard scenario. */\nstatic void\nMHD_log_probe (const char *label,\n               struct MHD_Connection *connection,\n               struct MHD_HTTP_Req_Header *pos,\n               const char *key,\n               size_t key_size,\n               const char *value,\n               size_t value_size,\n               const void *extra_ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/193.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"MHD_probe: %s\\n\", label);\n  fprintf(f, \"  connection=%p\\n\", (void *)connection);\n  fprintf(f, \"  pos=%p\\n\", (void *)pos);\n  /* Do not read pos->header (may be uninitialised). Only take its address. */\n  if (pos != NULL)\n    fprintf(f, \"  &pos->header=%p\\n\", (void *)&pos->header);\n  else\n    fprintf(f, \"  &pos->header=(null)\\n\");\n\n  fprintf(f, \"  key=%p, key_size=%zu\\n\", (void *)key, key_size);\n  if (key != NULL && key_size > 0)\n  {\n    size_t n = key_size;\n    if (n > 256U) n = 256U; /* limit amount logged */\n    fprintf(f, \"  key[0..%zu]='\", n);\n    fwrite(key, 1, n, f);\n    if (n < key_size) fprintf(f, \"...\");\n    fprintf(f, \"'\\n\");\n  }\n\n  fprintf(f, \"  value=%p, value_size=%zu\\n\", (void *)value, value_size);\n  if (value != NULL && value_size > 0)\n  {\n    size_t n = value_size;\n    if (n > 256U) n = 256U;\n    fprintf(f, \"  value[0..%zu]='\", n);\n    fwrite(value, 1, n, f);\n    if (n < value_size) fprintf(f, \"...\");\n    fprintf(f, \"'\\n\");\n  }\n\n  if (extra_ptr != NULL)\n    fprintf(f, \"  extra=%p\\n\", extra_ptr);\n\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                     enum MHD_ValueKind kind,\n                                     const char *key,\n                                     size_t key_size,\n                                     const char *value,\n                                     size_t value_size)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  /* Log entry with all input parameters */\n  MHD_log_probe(\"entry\",\n                connection,\n                (struct MHD_HTTP_Req_Header *)0, /* pos unknown yet */\n                key, key_size, value, value_size,\n                NULL);\n\n  pos = MHD_connection_alloc_memory_ (connection,\n                                      sizeof (struct MHD_HTTP_Res_Header));\n  if (NULL == pos)\n  {\n    MHD_log_probe(\"alloc_failed\",\n                  connection,\n                  pos,\n                  key, key_size, value, value_size,\n                  NULL);\n    return MHD_NO;\n  }\n\n  /* Log after allocation; do NOT read pos->header contents (uninitialised),\n     but record its address and relevant pointers so the trace shows where\n     the upcoming assignment will write the const char * into a (possibly)\n     non-const member. */\n  MHD_log_probe(\"after_alloc_before_assign\",\n                connection,\n                pos,\n                key, key_size, value, value_size,\n                NULL);\n\n  /* Original assignments (preserve logic). */\n  pos->header = key;\n  pos->header_size = key_size;\n  pos->value = value;\n  pos->value_size = value_size;\n  pos->kind = kind;\n  pos->next = NULL;\n\n  /* Log after assignments: now it is safe to read pos->header and pos->value. */\n  MHD_log_probe(\"after_assign\",\n                connection,\n                pos,\n                key, key_size, value, value_size,\n                (const void *)pos->header);\n\n  /* append 'pos' to the linked list of headers */\n  if (NULL == connection->rq.headers_received_tail)\n  {\n    /* Log state before update when tail is NULL */\n    MHD_log_probe(\"append_head_empty_before\",\n                  connection,\n                  pos,\n                  key, key_size, value, value_size,\n                  (const void *)connection->rq.headers_received_tail);\n\n    connection->rq.headers_received = pos;\n    connection->rq.headers_received_tail = pos;\n\n    /* Log after update */\n    MHD_log_probe(\"append_head_empty_after\",\n                  connection,\n                  pos,\n                  key, key_size, value, value_size,\n                  (const void *)connection->rq.headers_received_tail);\n  }\n  else\n  {\n    /* Log state before linking (non-empty list) */\n    MHD_log_probe(\"append_nonempty_before\",\n                  connection,\n                  pos,\n                  key, key_size, value, value_size,\n                  (const void *)connection->rq.headers_received_tail);\n\n    connection->rq.headers_received_tail->next = pos;\n    connection->rq.headers_received_tail = pos;\n\n    /* Log after linking */\n    MHD_log_probe(\"append_nonempty_after\",\n                  connection,\n                  pos,\n                  key, key_size, value, value_size,\n                  (const void *)connection->rq.headers_received_tail);\n  }\n  return MHD_YES;\n}\n"
}