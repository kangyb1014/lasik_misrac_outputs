{
  "user_message": "An agent A claimed that the following MHD_del_response_header code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_del_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code computes content_len = strlen(content) (so content is a null\u2011terminated C string) and then calls memcmp(content, pos->value, content_len) to compare them. Using memcmp to compare a null\u2011terminated string (content) violates MISRA C 2023 Rule 21.14.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_del_response_header: response=0x55af9a693820 header=0x55af690f301f content=0x55af690f302d\n  header (string)='Header-Type-A'\n  content (string)='value-a1'\nComputed lengths: header_len=13 content_len=8\nLOOP: pos=0x55af9a693920 pos->header=0x55af9a6938e0 pos->value=0x55af9a693900 pos->header_size=13 pos->value_size=8\n  pos->header (raw, len=13): 'Header-Type-A'\n  pos->value (raw, len=8): 'value-a1'\n  memcmp checks performed: header_cmp=0 content_cmp=0 (compared 13 bytes)\n  compared header (param)='Header-Type-A'\n  compared content (param)='value-a1'\n  pos->header pointer=0x55af9a6938e0 pos->value pointer=0x55af9a693900\nMATCH FOUND: removing header at pos=0x55af9a693920\nRETURN: MHD_YES (header removed)\nENTER MHD_del_response_header: response=0x55af9a693820 header=0x55af690f301f content=0x55af690f3087\n  header (string)='Header-Type-A'\n  content (string)='value-a3'\nComputed lengths: header_len=13 content_len=8\nLOOP: pos=0x55af9a6939a0 pos->header=0x55af9a693960 pos->value=0x55af9a693980 pos->header_size=13 pos->value_size=8\n  pos->header (raw, len=13): 'Header-Type-A'\n  pos->value (raw, len=8): 'value-a2'\n  memcmp checks performed: header_cmp=0 content_cmp=1 (compared 13 bytes)\n  compared header (param)='Header-Type-A'\n  compared content (param)='value-a3'\n  pos->header pointer=0x55af9a693960 pos->value pointer=0x55af9a693980\nLOOP: pos=0x55af9a693bc0 pos->header=0x55af9a693900 pos->value=0x55af9a6938e0 pos->header_size=13 pos->value_size=8\n  pos->header (raw, len=13): 'Header-Type-A'\n  pos->value (raw, len=8): 'value-a3'\n  memcmp checks performed: header_cmp=0 content_cmp=0 (compared 13 bytes)\n  compared header (param)='Header-Type-A'\n  compared content (param)='value-a3'\n  pos->header pointer=0x55af9a693900 pos->value pointer=0x55af9a6938e0\nMATCH FOUND: removing header at pos=0x55af9a693bc0\nRETURN: MHD_YES (header removed)\nENTER MHD_del_response_header: response=0x55af9a693820 header=0x55af690f309e content=0x55af690f3087\n  header (string)='Header-Type-C'\n  content (string)='value-a3'\nComputed lengths: header_len=13 content_len=8\nLOOP: pos=0x55af9a6939a0 pos->header=0x55af9a693960 pos->value=0x55af9a693980 pos->header_size=13 pos->value_size=8\n  pos->header (raw, len=13): 'Header-Type-A'\n  pos->value (raw, len=8): 'value-a2'\n  memcmp checks performed: header_cmp=2 content_cmp=1 (compared 13 bytes)\n  compared header (param)='Header-Type-C'\n  compared content (param)='value-a3'\n  pos->header pointer=0x55af9a693960 pos->value pointer=0x55af9a693980\nRETURN: MHD_NO (no matching header found)\nENTER MHD_del_response_header: response=0x55af9a693820 header=0x55af690f301f content=0x55af690f30ca\n  header (string)='Header-Type-A'\n  content (string)='value-c'\nComputed lengths: header_len=13 content_len=7\nLOOP: pos=0x55af9a6939a0 pos->header=0x55af9a693960 pos->value=0x55af9a693980 pos->header_size=13 pos->value_size=8\n  pos->header (raw, len=13): 'Header-Type-A'\n  pos->value (raw, len=8): 'value-a2'\nRETURN: MHD_NO (no matching header found)\nENTER MHD_del_response_header: response=0x55af9a693820 header=0x55af690f30f6 content=0x55af690f314d\n  header (string)='Connection'\n  content (string)='e,b,c,d,a'\nBRANCH: connection header special handling taken for header='Connection'\nENTER MHD_del_response_header: response=0x55af9a693820 header=0x55af690f30f6 content=0x55af690f318e\n  header (string)='Connection'\n  content (string)='i,k,l,m,n,o,p,close'\nBRANCH: connection header special handling taken for header='Connection'\nENTER MHD_del_response_header: response=0x55af9a693820 header=0x55af690f30f6 content=0x55af690f32e1\n  header (string)='Connection'\n  content (string)='1,3,5,7,9'\nBRANCH: connection header special handling taken for header='Connection'\nENTER MHD_del_response_header: response=0x55af9a693820 header=0x55af690f30f6 content=0x55af690f3396\n  header (string)='Connection'\n  content (string)='12  ,10  ,8  ,close'\nBRANCH: connection header special handling taken for header='Connection'\nENTER MHD_del_response_header: response=0x55af9a693820 header=0x55af690f30f6 content=0x55af690f3437\n  header (string)='Connection'\n  content (string)=\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.14 forbids using memcmp to compare null\u2011terminated strings. In the function the code calls strlen(header) and strlen(content) and then uses memcmp(header, pos->header, header_len) and memcmp(content, pos->value, content_len). The use of strlen shows header and content are treated as null\u2011terminated C strings, so using memcmp to compare them violates 21.14. (Note: the header comparison is an additional instance of the same violation.)\n\nFixes include: use the appropriate string functions (strcmp/strncmp or the project\u2019s supplied string comparison helpers) when both operands are null\u2011terminated strings, or ensure both operands are treated strictly as binary buffers (no dependence on strlen) before using memcmp."
}