{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes header_len = strlen(header) (and content_len = strlen(content)) and then calls memcmp(header, pos->header, header_len) (and memcmp(content, pos->value, content_len)). Because header and content are null-terminated strings (strlen was used), using memcmp to compare them violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2088.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "static void dump_bytes_to_log(const char *label, const char *buf, size_t len)\n{\n  size_t i, upto = (len > 128u) ? 128u : len; /* limit amount logged */\n  FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s: len=%zu\\n\", label, len);\n  if (NULL == buf)\n  {\n    fprintf(f, \"  (buf==NULL)\\n\");\n    fclose(f);\n    return;\n  }\n  fprintf(f, \"  bytes[0..%zu): \", upto);\n  for (i = 0; i < upto; ++i)\n    fprintf(f, \"%02x\", (unsigned char) buf[i]);\n  if (len > upto)\n    fprintf(f, \" ...\");\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry and pointers */\n  {\n    FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"MHD_del_response_header ENTRY: response=%p header=%p content=%p\\n\",\n              (void *) response, (const void *) header, (const void *) content);\n      fclose(f);\n    }\n  }\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"MHD_del_response_header: NULL parameter(s): header=%p content=%p -> return MHD_NO\\n\",\n              (const void *) header, (const void *) content);\n      fclose(f);\n    }\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n\n  /* Log header_len and relevant response flags */\n  {\n    FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"header_len=%zu flags_auto=0x%08x\\n\",\n              header_len, (unsigned int) response->flags_auto);\n      fclose(f);\n    }\n  }\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"Special-case: connection header matched; delegating to del_response_header_connection\\n\");\n      fclose(f);\n    }\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n\n  /* Log content_len */\n  {\n    FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"content_len=%zu\\n\", content_len);\n      fclose(f);\n    }\n  }\n\n  /* Dump the header/content bytes (limited) for later inspection */\n  dump_bytes_to_log(\"header (caller)\", header, header_len);\n  dump_bytes_to_log(\"content (caller)\", content, content_len);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    /* Log current list node and sizes */\n    {\n      FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n      if (NULL != f)\n      {\n        fprintf(f, \"visiting pos=%p header_size=%zu value_size=%zu pos->header=%p pos->value=%p\\n\",\n                (void *) pos, pos->header_size, pos->value_size,\n                (const void *) pos->header, (const void *) pos->value);\n        fclose(f);\n      }\n    }\n\n    /* Dump the stored header/value bytes (limited) */\n    dump_bytes_to_log(\"pos->header (stored)\", pos->header, pos->header_size);\n    dump_bytes_to_log(\"pos->value (stored)\", pos->value, pos->value_size);\n\n    /* Log that the function is about to perform the size and memcmp checks. */\n    {\n      FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n      if (NULL != f)\n      {\n        fprintf(f, \"About to evaluate match condition: (header_len==pos->header_size) && (content_len==pos->value_size) && memcmp(header,pos->header,header_len)==0 && memcmp(content,pos->value,pos->value_size)==0\\n\");\n        fprintf(f, \"Evaluating sizes: header_len=%zu pos->header_size=%zu content_len=%zu pos->value_size=%zu\\n\",\n                header_len, pos->header_size, content_len, pos->value_size);\n        fclose(f);\n      }\n    }\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      /* Log a successful match just before removal */\n      {\n        FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n        if (NULL != f)\n        {\n          fprintf(f, \"Match found: removing header at pos=%p\\n\", (void *) pos);\n          fclose(f);\n        }\n      }\n\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n\n      /* Log flags_auto after potential modifications */\n      {\n        FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n        if (NULL != f)\n        {\n          fprintf(f, \"After removal, flags_auto=0x%08x\\n\", (unsigned int) response->flags_auto);\n          fclose(f);\n        }\n      }\n\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n\n  /* Log not found */\n  {\n    FILE *f = fopen(\"/tmp/logs/2088.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"No matching header/value found -> return MHD_NO\\n\");\n      fclose(f);\n    }\n  }\n  return MHD_NO;\n}\n"
}