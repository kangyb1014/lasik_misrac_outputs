{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(header) assumes 'header' points to a NUL-terminated char array. If the caller passes a non\u2011NUL\u2011terminated buffer (e.g. char h[3] = {'A','B','C'}; MHD_del_response_header(resp, h, \"content\");) strlen will read past the object bounds and cause an out\u2011of\u2011bounds access/UB. This violates Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2089.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n  FILE *fp;\n\n  /* Probe: log entrance and pointer/state information. Do not read\n     the contents of 'header' or 'content' strings to avoid introducing\n     additional out-of-bounds reads beyond those in the original logic. */\n  fp = fopen(\"/tmp/logs/2089.txt\", \"a\");\n  if (NULL != fp)\n  {\n    fprintf(fp, \"ENTER MHD_del_response_header\\n\");\n    fprintf(fp, \"  response=%p\\n\", (void *) response);\n    fprintf(fp, \"  header=%p\\n\", (void *) header);\n    fprintf(fp, \"  content=%p\\n\", (void *) content);\n    if (response)\n      fprintf(fp, \"  response->first_header=%p flags_auto=0x%llx\\n\",\n              (void *) response->first_header,\n              (unsigned long long) response->flags_auto);\n    fflush(fp);\n    fclose(fp);\n  }\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n\n  /* Original potentially-unsafe call retained to preserve logic and to\n     allow reproduction of the reported violation. We log the pointer\n     and the computed length so the test output can be inspected. */\n  header_len = strlen (header);\n\n  fp = fopen(\"/tmp/logs/2089.txt\", \"a\");\n  if (NULL != fp)\n  {\n    fprintf(fp, \"after strlen(header): header_len=%zu\\n\", header_len);\n    fflush(fp);\n    fclose(fp);\n  }\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    fp = fopen(\"/tmp/logs/2089.txt\", \"a\");\n    if (NULL != fp)\n    {\n      fprintf(fp, \"taking special branch: del_response_header_connection\\n\");\n      fflush(fp);\n      fclose(fp);\n    }\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n\n  fp = fopen(\"/tmp/logs/2089.txt\", \"a\");\n  if (NULL != fp)\n  {\n    fprintf(fp, \"after strlen(content): content_len=%zu\\n\", content_len);\n    fflush(fp);\n    fclose(fp);\n  }\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      /* Log the match details (pointer and size only). Avoid printing\n         string contents to not introduce extra reads that could be\n         UB for non-NUL-terminated buffers. */\n      fp = fopen(\"/tmp/logs/2089.txt\", \"a\");\n      if (NULL != fp)\n      {\n        fprintf(fp, \"match found: pos=%p header_size=%zu value_size=%zu\\n\",\n                (void *) pos, pos->header_size, pos->value_size);\n        fprintf(fp, \"  pos->header=%p pos->value=%p\\n\",\n                (void *) pos->header, (void *) pos->value);\n        fflush(fp);\n        fclose(fp);\n      }\n\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n\n      fp = fopen(\"/tmp/logs/2089.txt\", \"a\");\n      if (NULL != fp)\n      {\n        fprintf(fp, \"returning MHD_YES\\n\");\n        fflush(fp);\n        fclose(fp);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n\n  fp = fopen(\"/tmp/logs/2089.txt\", \"a\");\n  if (NULL != fp)\n  {\n    fprintf(fp, \"no matching header found, returning MHD_NO\\n\");\n    fflush(fp);\n    fclose(fp);\n  }\n  return MHD_NO;\n}\n"
}