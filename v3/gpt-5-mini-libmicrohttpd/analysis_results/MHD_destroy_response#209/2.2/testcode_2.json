{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe NULL-check guarding free(response->data_iov) is redundant: the C standard defines free(NULL) as a no-op, so replacing the if-block with an unconditional call free(response->data_iov); would not change program behaviour. Therefore the conditional check is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_destroy_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2092.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_destroy_response as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_destroy_response:\n```c\n_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if (NULL == response)\n    return;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n#endif\n  if (NULL != response->crfc)\n    response->crfc (response->crc_cls);\n\n  if (NULL != response->data_iov)\n  {\n    free (response->data_iov);\n  }\n\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n    free (pos->header);\n    free (pos->value);\n    free (pos);\n  }\n  free (response);\n}\n```\n</target_code>\nPlease provide the modified MHD_destroy_response code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/2092.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2092.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* Try to create directory once and reopen. If this fails, give up quietly. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/2092.txt\", \"a\");\n    if (NULL == f)\n      return;\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  log_probe(\"ENTER MHD_destroy_response: response=%p\", (void *)response);\n\n  if (NULL == response)\n  {\n    log_probe(\"MHD_destroy_response: response is NULL -> returning\");\n    return;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  log_probe(\"MHD_destroy_response: locking mutex %p\", (void *)&response->mutex);\n  MHD_mutex_lock_chk_ (&response->mutex);\n  log_probe(\"MHD_destroy_response: mutex %p locked\", (void *)&response->mutex);\n#endif\n\n  log_probe(\"MHD_destroy_response: current reference_count before decrement = %d\", (int)response->reference_count);\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n    log_probe(\"MHD_destroy_response: reference_count > 0 after decrement (%d) -> unlocked mutex %p and returning\", (int)response->reference_count, (void *)&response->mutex);\n#else\n    log_probe(\"MHD_destroy_response: reference_count > 0 after decrement (%d) -> returning\", (int)response->reference_count);\n#endif\n    return;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n  log_probe(\"MHD_destroy_response: reference_count reached 0; mutex %p destroyed\", (void *)&response->mutex);\n#endif\n\n  if (NULL != response->crfc)\n  {\n    log_probe(\"MHD_destroy_response: calling crfc callback %p with crc_cls=%p\", (void *)response->crfc, (void *)response->crc_cls);\n    response->crfc (response->crc_cls);\n    log_probe(\"MHD_destroy_response: returned from crfc callback %p\", (void *)response->crfc);\n  }\n\n  /* Log the state of data_iov before the conditional check */\n  log_probe(\"MHD_destroy_response: data_iov pointer before check = %p\", (void *)response->data_iov);\n\n  if (NULL != response->data_iov)\n  {\n    log_probe(\"MHD_destroy_response: data_iov is non-NULL (%p) -> freeing\", (void *)response->data_iov);\n    free (response->data_iov);\n    log_probe(\"MHD_destroy_response: free(response->data_iov) completed\");\n  }\n  else\n  {\n    /* This branch documents the case where the pointer is NULL. According to the C standard free(NULL) is a no-op. */\n    log_probe(\"MHD_destroy_response: data_iov is NULL -> skipping free (note: free(NULL) would be a no-op)\");\n  }\n\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n    log_probe(\"MHD_destroy_response: freeing header node %p, header=%p, value=%p, next=%p\", (void *)pos, (void *)pos->header, (void *)pos->value, (void *)pos->next);\n    free (pos->header);\n    free (pos->value);\n    free (pos);\n    log_probe(\"MHD_destroy_response: freed header node %p\", (void *)pos);\n  }\n\n  free (response);\n  log_probe(\"MHD_destroy_response: freed response %p and exiting\", (void *)response);\n}\n"
}