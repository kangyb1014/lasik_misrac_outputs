{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen compiled with HAS_FD_SETSIZE_OVERRIDABLE not defined and the subsequent platform-specific macros (MHD_SCKT_FD_FITS_FDSET_SETSIZE_ and MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_) do not actually read the fd_setsize parameter, the assignment fd_setsize = (int) FD_SETSIZE; has no observable effect and can be removed without changing program behaviour. The preceding (void) fd_setsize; already indicates fd_setsize is unused in that configuration, so this write is an executed operation whose removal would not affect behaviour\u2014i.e. dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_to_fd_set_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1842.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_to_fd_set_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_to_fd_set_:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_add_to_fd_set_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void MHD_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1842.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  MHD_log_probe(\"ENTER MHD_add_to_fd_set_: fd=%ld set=%p max_fd=%p fd_setsize_in=%d\",\n                (long) fd, (void *) set, (void *) max_fd, fd_setsize);\n\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) ) {\n    MHD_log_probe(\"EARLY RETURN: NULL set or invalid fd: set=%p fd=%ld\",\n                  (void *) set, (long) fd);\n    return 0;\n  }\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  MHD_log_probe(\"HAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=%d\",\n                fd_setsize);\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n  MHD_log_probe(\"Assigned fd_setsize = (int) FD_SETSIZE -> %d\",\n                fd_setsize);\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  /* Probe the platform-specific fits check */\n  int fits = MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                              set,\n                                              fd_setsize);\n  MHD_log_probe(\"MHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned %d for fd=%ld fd_setsize=%d\",\n                fits, (long) fd, fd_setsize);\n  if (! fits) {\n    MHD_log_probe(\"FD does not fit in fd_set -> RETURN 0\");\n    return 0;\n  }\n\n  MHD_log_probe(\"Calling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=%ld fd_setsize=%d\",\n                (long) fd, fd_setsize);\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  MHD_log_probe(\"MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=%ld\",\n                (long) fd);\n\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) ) {\n    MHD_log_probe(\"Updating max_fd: old=%ld new=%ld\",\n                  (long) *max_fd, (long) fd);\n    *max_fd = fd;\n  } else {\n    if (NULL != max_fd)\n      MHD_log_probe(\"Not updating max_fd: current=%ld fd=%ld\",\n                    (long) *max_fd, (long) fd);\n    else\n      MHD_log_probe(\"max_fd is NULL, skipping update\");\n  }\n\n  MHD_log_probe(\"EXIT MHD_add_to_fd_set_: RETURN 1\");\n  return ! 0;\n}\n"
}