{
  "user_message": "An agent A claimed that the following MHD_add_to_fd_set_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_to_fd_set_.\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWhen compiled with HAS_FD_SETSIZE_OVERRIDABLE not defined and the subsequent platform-specific macros (MHD_SCKT_FD_FITS_FDSET_SETSIZE_ and MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_) do not actually read the fd_setsize parameter, the assignment fd_setsize = (int) FD_SETSIZE; has no observable effect and can be removed without changing program behaviour. The preceding (void) fd_setsize; already indicates fd_setsize is unused in that configuration, so this write is an executed operation whose removal would not affect behaviour\u2014i.e. dead code.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_add_to_fd_set_: fd=3 set=0x7ffc28e97590 max_fd=0x7ffc28e9758c fd_setsize_in=1024\nHAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=1024\nAssigned fd_setsize = (int) FD_SETSIZE -> 1024\nMHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned 1 for fd=3 fd_setsize=1024\nCalling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=3 fd_setsize=1024\nMHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=3\nUpdating max_fd: old=0 new=3\nEXIT MHD_add_to_fd_set_: RETURN 1\nENTER MHD_add_to_fd_set_: fd=3 set=0x7ffc28e97468 max_fd=0x7ffc28e97364 fd_setsize_in=1024\nHAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=1024\nAssigned fd_setsize = (int) FD_SETSIZE -> 1024\nMHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned 1 for fd=3 fd_setsize=1024\nCalling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=3 fd_setsize=1024\nMHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=3\nUpdating max_fd: old=-1 new=3\nEXIT MHD_add_to_fd_set_: RETURN 1\nENTER MHD_add_to_fd_set_: fd=3 set=0x7ffc28e97590 max_fd=0x7ffc28e9758c fd_setsize_in=1024\nHAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=1024\nAssigned fd_setsize = (int) FD_SETSIZE -> 1024\nMHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned 1 for fd=3 fd_setsize=1024\nCalling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=3 fd_setsize=1024\nMHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=3\nUpdating max_fd: old=0 new=3\nEXIT MHD_add_to_fd_set_: RETURN 1\nENTER MHD_add_to_fd_set_: fd=3 set=0x7ffc28e97468 max_fd=0x7ffc28e97364 fd_setsize_in=1024\nHAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=1024\nAssigned fd_setsize = (int) FD_SETSIZE -> 1024\nMHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned 1 for fd=3 fd_setsize=1024\nCalling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=3 fd_setsize=1024\nMHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=3\nUpdating max_fd: old=-1 new=3\nEXIT MHD_add_to_fd_set_: RETURN 1\nENTER MHD_add_to_fd_set_: fd=3 set=0x7ffc28e97590 max_fd=0x7ffc28e9758c fd_setsize_in=1024\nHAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=1024\nAssigned fd_setsize = (int) FD_SETSIZE -> 1024\nMHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned 1 for fd=3 fd_setsize=1024\nCalling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=3 fd_setsize=1024\nMHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=3\nUpdating max_fd: old=0 new=3\nEXIT MHD_add_to_fd_set_: RETURN 1\nENTER MHD_add_to_fd_set_: fd=3 set=0x7ffc28e97468 max_fd=0x7ffc28e97364 fd_setsize_in=1024\nHAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=1024\nAssigned fd_setsize = (int) FD_SETSIZE -> 1024\nMHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned 1 for fd=3 fd_setsize=1024\nCalling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=3 fd_setsize=1024\nMHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=3\nUpdating max_fd: old=-1 new=3\nEXIT MHD_add_to_fd_set_: RETURN 1\nENTER MHD_add_to_fd_set_: fd=3 set=0x7ffc28e97590 max_fd=0x7ffc28e9758c fd_setsize_in=1024\nHAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=1024\nAssigned fd_setsize = (int) FD_SETSIZE -> 1024\nMHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned 1 for fd=3 fd_setsize=1024\nCalling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=3 fd_setsize=1024\nMHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=3\nUpdating max_fd: old=0 new=3\nEXIT MHD_add_to_fd_set_: RETURN 1\nENTER MHD_add_to_fd_set_: fd=3 set=0x7ffc28e97468 max_fd=0x7ffc28e97364 fd_setsize_in=1024\nHAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=1024\nAssigned fd_setsize = (int) FD_SETSIZE -> 1024\nMHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned 1 for fd=3 fd_setsize=1024\nCalling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=3 fd_setsize=1024\nMHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=3\nUpdating max_fd: old=-1 new=3\nEXIT MHD_add_to_fd_set_: RETURN 1\nENTER MHD_add_to_fd_set_: fd=3 set=0x7ffc28e97590 max_fd=0x7ffc28e9758c fd_setsize_in=1024\nHAS_FD_SETSIZE_OVERRIDABLE not defined: fd_setsize before assign=1024\nAssigned fd_setsize = (int) FD_SETSIZE -> 1024\nMHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned 1 for fd=3 fd_setsize=1024\nCalling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ for fd=3 fd_setsize=1024\nMHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed for fd=3\nUpdating max_fd: old=0 n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The assignment fd_setsize = (int) FD_SETSIZE; is an executed statement that writes a local, non-volatile variable which is never subsequently read in the configuration you describe (the macros do not consume the fd_setsize argument and the code already contains a (void) fd_setsize;). Removing that assignment would not change the program\u2019s observable behaviour in that configuration, so it is dead code under the definition of MISRA C 2023 Rule 2.2. \n\n(Notes/mitigations: The only potential rebuttal is a project-specific justification that the write must remain because its execution timing or effect on compiler code generation is relied on \u2014 per Rule 2.2 note 1, timing can affect embedded behaviour. If no such documented, architecture-specific justification exists, the assignment is a violation.)"
}