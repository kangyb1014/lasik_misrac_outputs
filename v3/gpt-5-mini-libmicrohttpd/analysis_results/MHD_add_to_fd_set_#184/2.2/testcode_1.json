{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression statement '(void) fd_setsize;' is an executed expression with no side-effects whose removal would not change program behaviour. For example (when HAS_FD_SETSIZE_OVERRIDABLE is not defined) the subsequent assignment 'fd_setsize = (int) FD_SETSIZE;' establishes the value, so the preceding void-cast is redundant and can be removed without effect\u2014constituting dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_to_fd_set_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1842.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_to_fd_set_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_to_fd_set_:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_add_to_fd_set_ code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  /* Lightweight probes that append execution trace and state to /tmp/logs/1842.txt */\n  FILE *f = fopen(\"/tmp/logs/1842.txt\", \"a\");\n  if (f)\n    {\n      fprintf(f, \"ENTRY: MHD_add_to_fd_set_. fd=%\" PRIdPTR \", set=%p, max_fd=%p, fd_setsize=%d\\n\",\n              (intptr_t) fd, (void *) set, (void *) max_fd, fd_setsize);\n      if (NULL != max_fd)\n        fprintf(f, \"       initial *max_fd=%\" PRIdPTR \"\\n\", (intptr_t) *max_fd);\n      fclose(f);\n    }\n\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    {\n      /* Log early-return reason */\n      f = fopen(\"/tmp/logs/1842.txt\", \"a\");\n      if (f)\n        {\n          fprintf(f, \"EARLY-RETURN: null-set-or-invalid-fd. set=%p, fd=%\" PRIdPTR \"\\n\",\n                  (void *) set, (intptr_t) fd);\n          fclose(f);\n        }\n      return 0;\n    }\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  /* Probe before the (void) cast to record incoming fd_setsize value */\n  f = fopen(\"/tmp/logs/1842.txt\", \"a\");\n  if (f)\n    {\n      fprintf(f, \"PRE-NOP-PROBE: (void) fd_setsize about to be applied. fd_setsize(before)=%d\\n\",\n              fd_setsize);\n      fclose(f);\n    }\n\n  (void) fd_setsize;  /* Mute compiler warning */\n\n  /* Probe after the (void) cast (no change expected) */\n  f = fopen(\"/tmp/logs/1842.txt\", \"a\");\n  if (f)\n    {\n      fprintf(f, \"POST-NOP-PROBE: after (void) fd_setsize. fd_setsize(still)=%d\\n\",\n              fd_setsize);\n      fclose(f);\n    }\n\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n\n  /* Probe after assignment to show final fd_setsize used */\n  f = fopen(\"/tmp/logs/1842.txt\", \"a\");\n  if (f)\n    {\n      fprintf(f, \"ASSIGN-PROBE: fd_setsize set to FD_SETSIZE -> %d\\n\", fd_setsize);\n      fclose(f);\n    }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    {\n      f = fopen(\"/tmp/logs/1842.txt\", \"a\");\n      if (f)\n        {\n          fprintf(f, \"EARLY-RETURN: FD does not fit fd_setsize. fd=%\" PRIdPTR \", fd_setsize=%d\\n\",\n                  (intptr_t) fd, fd_setsize);\n          fclose(f);\n        }\n      return 0;\n    }\n\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    {\n      f = fopen(\"/tmp/logs/1842.txt\", \"a\");\n      if (f)\n        {\n          fprintf(f, \"MAX_FD_UPDATE: max_fd changed from %\" PRIdPTR \" to %\" PRIdPTR \"\\n\",\n                  (intptr_t) *max_fd, (intptr_t) fd);\n          fclose(f);\n        }\n      *max_fd = fd;\n    }\n\n  f = fopen(\"/tmp/logs/1842.txt\", \"a\");\n  if (f)\n    {\n      fprintf(f, \"EXIT: MHD_add_to_fd_set_ returning success (1). fd=%\" PRIdPTR \"\\n\",\n              (intptr_t) fd);\n      fclose(f);\n    }\n  return ! 0;\n}\n"
}