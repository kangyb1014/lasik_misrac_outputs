{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe call to MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_(fd, set, fd_setsize) itself does not modify any function parameter and so the call fragment alone does not violate Rule 17.8. However, the enclosing function does violate Rule 17.8 because the value parameter fd_setsize is assigned to earlier in the function: fd_setsize = (int) FD_SETSIZE; \u2014 this modifies a non\u2011pointer parameter and therefore breaches MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_to_fd_set_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1847.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_to_fd_set_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_to_fd_set_:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_add_to_fd_set_ code.\n",
  "test_code": "static void\nMHD_add_to_fd_set_log_probe(const char *where,\n                            MHD_socket fd,\n                            fd_set *set,\n                            MHD_socket *max_fd,\n                            int fd_setsize)\n{\n  FILE *fp = fopen(\"/tmp/logs/1847.txt\", \"a\");\n  if (NULL == fp)\n    return;\n\n  /* Log basic state. Cast sockets to long for safer printing across typical\n     platforms; this is only for diagnostics and should not change program\n     behaviour. */\n  (void) fprintf(fp, \"%s: fd=%ld, set=%p, max_fd=%p, fd_setsize=%d\\n\",\n                 where,\n                 (long) fd,\n                 (void *) set,\n                 (void *) max_fd,\n                 fd_setsize);\n\n  if (NULL != max_fd)\n    (void) fprintf(fp, \"%s: *max_fd(before)=%ld\\n\",\n                   where,\n                   (long) (*max_fd));\n\n  (void) fclose(fp);\n}\n\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  /* Entry probe */\n  MHD_add_to_fd_set_log_probe(\"ENTRY\", fd, set, max_fd, fd_setsize);\n\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n  {\n    MHD_add_to_fd_set_log_probe(\"EARLY_RETURN_INVALID_ARGS\", fd, set, max_fd, fd_setsize);\n    return 0;\n  }\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  /* Log value before the assignment that is the subject of the violation\n     scenario (modifying a non-pointer parameter). */\n  MHD_add_to_fd_set_log_probe(\"BEFORE_FDSETSIZE_ASSIGN\", fd, set, max_fd, fd_setsize);\n\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n\n  /* Log value after assignment so evidence can be gathered. */\n  MHD_add_to_fd_set_log_probe(\"AFTER_FDSETSIZE_ASSIGN\", fd, set, max_fd, fd_setsize);\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n  {\n    MHD_add_to_fd_set_log_probe(\"FD_FITS_CHECK_FAILED\", fd, set, max_fd, fd_setsize);\n    return 0;\n  }\n\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  MHD_add_to_fd_set_log_probe(\"ADDED_TO_FDSET\", fd, set, max_fd, fd_setsize);\n\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n  {\n    /* Log before and after changing the object pointed to by max_fd. */\n    MHD_add_to_fd_set_log_probe(\"BEFORE_MAX_FD_UPDATE\", fd, set, max_fd, fd_setsize);\n    *max_fd = fd;\n    MHD_add_to_fd_set_log_probe(\"AFTER_MAX_FD_UPDATE\", fd, set, max_fd, fd_setsize);\n  }\n\n  MHD_add_to_fd_set_log_probe(\"RETURN_SUCCESS\", fd, set, max_fd, fd_setsize);\n  return ! 0;\n}\n"
}