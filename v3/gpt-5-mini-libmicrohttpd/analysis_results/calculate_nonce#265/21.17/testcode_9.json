{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls MHD_bin_to_hex(timestamp, sizeof(timestamp), nonce + digest_get_size(da) * 2) without any information or check of the size of the buffer pointed to by nonce. MHD_bin_to_hex will write the hex representation of timestamp (typically 2 * sizeof(timestamp) bytes, plus possibly a terminator depending on implementation) starting at nonce + digest_get_size(da) * 2. If the caller only allocated space for the hex of the digest (digest_get_size(da) * 2 bytes) then the timestamp hex will be written past the end of that allocation. Example: TIMESTAMP_BIN_SIZE == 6 => timestamp hex is 12 bytes. For a 32-byte digest (digest_get_size == 32) the code writes the hash hex at nonce[0..63] and then writes 12 bytes at nonce[64..75]; if the buffer was only 64 bytes this overruns by 12 bytes. Because the code does not ensure the destination object is large enough, this can result in accesses beyond the bounds of the object referenced by the pointer parameter and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2659.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_nonce:\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\nPlease provide the modified calculate_nonce code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n\n  /* Open log file once for this call and emit diagnostic info that helps\n   * reproduce and demonstrate the potential out-of-bounds write reported\n   * by the external agent. The logs include computed offsets, sizes and\n   * control-flow relevant flags. */\n  {\n    FILE *mhd_log = fopen(\"/tmp/logs/2659.txt\", \"a\");\n    if (NULL != mhd_log)\n    {\n      size_t digest_sz = digest_get_size(da);\n      fprintf(mhd_log,\n              \"calculate_nonce entry: nonce=%p nonce_time=%llu digest_get_size=%zu rnd_size=%zu saddr_size=%zu bind_options=0x%x mthd_e=%d uri_len=%zu realm_len=%zu\\n\",\n              (void *) nonce,\n              (unsigned long long) nonce_time,\n              digest_sz,\n              rnd_size,\n              saddr_size,\n              bind_options,\n              (int) mthd_e,\n              uri_len,\n              realm_len);\n      fclose(mhd_log);\n    }\n  }\n\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n\n    /* Probe logging before writing timestamp hex into nonce. This records the\n     * computed destination pointer, sizes of the digest hex area, timestamp hex\n     * area and the combined required size. A mismatch between required size and\n     * the actual allocation passed by the caller would indicate a potential\n     * out-of-bounds write. */\n    {\n      FILE *mhd_log = fopen(\"/tmp/logs/2659.txt\", \"a\");\n      if (NULL != mhd_log)\n      {\n        size_t ts_bin_size = sizeof(timestamp);\n        size_t ts_hex_len = ts_bin_size * 2; /* expected 2 chars per byte */\n        size_t digest_sz = digest_get_size(da);\n        size_t digest_hex_len = digest_sz * 2;\n        size_t ts_offset = digest_hex_len; /* where timestamp hex will start */\n        size_t ts_end = ts_offset + ts_hex_len;\n\n        fprintf(mhd_log,\n                \"MHD_bin_to_hex(timestamp): nonce_base=%p write_dest=%p digest_sz=%zu digest_hex_len=%zu ts_bin_size=%zu ts_hex_len=%zu ts_offset=%zu ts_end=%zu (dest + offset .. end-1)\\n\",\n                (void *) nonce,\n                (void *) (nonce + (digest_sz * 2)),\n                digest_sz,\n                digest_hex_len,\n                ts_bin_size,\n                ts_hex_len,\n                ts_offset,\n                ts_end);\n\n        /* Also log some control-flow relevant flags that determine what else\n         * will be appended to the nonce/hashing. */\n        fprintf(mhd_log,\n                \"control flags: rnd_size=%zu saddr_size=%zu bind_options=0x%x (MHD_DAUTH_BIND_NONCE_NONE=%d, MHD_DAUTH_BIND_NONCE_CLIENT_IP=0x%x, MHD_DAUTH_BIND_NONCE_URI=0x%x, MHD_DAUTH_BIND_NONCE_URI_PARAMS=0x%x, MHD_DAUTH_BIND_NONCE_REALM=0x%x)\\n\",\n                rnd_size,\n                saddr_size,\n                bind_options,\n                (int) MHD_DAUTH_BIND_NONCE_NONE,\n                (int) MHD_DAUTH_BIND_NONCE_CLIENT_IP,\n                (int) MHD_DAUTH_BIND_NONCE_URI,\n                (int) MHD_DAUTH_BIND_NONCE_URI_PARAMS,\n                (int) MHD_DAUTH_BIND_NONCE_REALM);\n\n        fclose(mhd_log);\n      }\n    }\n\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n\n    /* Log information about final hash hex write to nonce at start of buffer */\n    {\n      FILE *mhd_log = fopen(\"/tmp/logs/2659.txt\", \"a\");\n      if (NULL != mhd_log)\n      {\n        size_t digest_sz = digest_get_size(da);\n        size_t digest_hex_len = digest_sz * 2;\n        fprintf(mhd_log,\n                \"MHD_bin_to_hex(hash): nonce=%p hash_dest=%p digest_sz=%zu digest_hex_len=%zu\\n\",\n                (void *) nonce,\n                (void *) nonce,\n                digest_sz,\n                digest_hex_len);\n        /* For clarity, also emit a summary of previously computed ranges. */\n        {\n          size_t ts_bin_size = TIMESTAMP_BIN_SIZE;\n          size_t ts_hex_len = ts_bin_size * 2;\n          size_t prev_ts_offset = digest_hex_len; /* where timestamp hex was written */\n          fprintf(mhd_log,\n                  \"summary: digest_hex_len=%zu timestamp_hex_len=%zu timestamp_written_at_offset=%zu -> reserved_end=%zu total_required_if_hash_appended=%zu\\n\",\n                  digest_hex_len,\n                  ts_hex_len,\n                  prev_ts_offset,\n                  (prev_ts_offset + ts_hex_len),\n                  (prev_ts_offset + ts_hex_len + digest_hex_len));\n        }\n        fclose(mhd_log);\n      }\n    }\n\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n"
}