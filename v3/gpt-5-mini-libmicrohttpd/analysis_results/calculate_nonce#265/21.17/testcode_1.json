{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds read if h->header_size does not reflect the actual storage length of h->header. For example, if h->header points to a 5\u2011byte buffer but h->header_size == 10, and digest_update() internally calls memcpy/memmove(memcpy-like operation) with that size, the library call will read 10 bytes from h->header and access memory beyond the object bounds (out-of-bounds read). The fragment itself does not call <string.h> functions directly, but it passes a pointer/length pair to digest_update; unless there is a proven invariant (not shown) that header_size <= allocated/valid bytes of h->header, this can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2659.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_nonce:\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\nPlease provide the modified calculate_nonce code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/2659.txt */\nstatic void\nlog_msg (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2659.txt\", \"a\");\n  if (! f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic void\nlog_bytes_hex (const uint8_t *buf, size_t len)\n{\n  FILE *f = fopen(\"/tmp/logs/2659.txt\", \"a\");\n  if (! f)\n    return;\n  for (size_t i = 0; i < len; ++i)\n    fprintf (f, \"%02x\", (unsigned) buf[i]);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n\n  /* Log entry and high-level parameters */\n  log_msg (\"calculate_nonce ENTRY: nonce_time=%llu, mthd_e=%d, method=%p, rnd=%p, rnd_size=%zu, saddr=%p, saddr_size=%zu, uri=%p, uri_len=%zu, first_header=%p, realm=%p, realm_len=%zu, bind_options=0x%x, da=%p, nonce=%p\",\n           (unsigned long long) nonce_time,\n           (int) mthd_e,\n           (const void *) method,\n           (const void *) rnd,\n           rnd_size,\n           (const void *) saddr,\n           saddr_size,\n           (const void *) uri,\n           uri_len,\n           (const void *) first_header,\n           (const void *) realm,\n           realm_len,\n           bind_options,\n           (const void *) da,\n           (void *) nonce);\n\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n\n    /* Log timestamp bytes */\n    log_msg (\"timestamp bytes:\");\n    log_bytes_hex (timestamp, sizeof (timestamp));\n\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n\n    log_msg (\"after digest_update(timestamp): da=%p, timestamp_size=%zu, digest_size=%d\",\n             (const void *) da, sizeof (timestamp), (int) digest_get_size (da));\n  }\n\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n\n    /* Log rnd pointer and size just before updating */\n    log_msg (\"about to digest_update rnd: rnd=%p, rnd_size=%zu\", (const void *) rnd, rnd_size);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n    log_msg (\"after digest_update rnd\");\n  }\n\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n\n    log_msg (\"about to digest_update saddr full: saddr=%p, saddr_size=%zu\", (const void *) saddr, saddr_size);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n    log_msg (\"after digest_update saddr full\");\n  }\n\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n    {\n      const void *addrptr = &((const struct sockaddr_in *) saddr)->sin_addr;\n      size_t addrsz = sizeof(((const struct sockaddr_in *) saddr)->sin_addr);\n      log_msg (\"about to digest_update AF_INET addr: saddr=%p, addrptr=%p, addrsz=%zu, ss_family=%d\",\n               (const void *) saddr, addrptr, addrsz, (int) saddr->ss_family);\n      digest_update (da,\n                     addrptr,\n                     addrsz);\n      log_msg (\"after digest_update AF_INET addr\");\n    }\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n    {\n      const void *addrptr = &((const struct sockaddr_in6 *) saddr)->sin6_addr;\n      size_t addrsz = sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr);\n      log_msg (\"about to digest_update AF_INET6 addr: saddr=%p, addrptr=%p, addrsz=%zu, ss_family=%d\",\n               (const void *) saddr, addrptr, addrsz, (int) saddr->ss_family);\n      digest_update (da,\n                     addrptr,\n                     addrsz);\n      log_msg (\"after digest_update AF_INET6 addr\");\n    }\n#endif /* HAVE_INET6 */\n  }\n\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n\n      log_msg (\"about to digest_update method enum: mthd_for_hash=%u\", (unsigned) mthd_for_hash);\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n      log_msg (\"after digest_update method enum\");\n    }\n    else\n    {\n      log_msg (\"about to digest_update_str method: method=%p\", (const void *) method);\n      digest_update_str (da, method);\n      log_msg (\"after digest_update_str method\");\n    }\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    log_msg (\"about to digest_update uri: uri=%p, uri_len=%zu\", (const void *) uri, uri_len);\n    digest_update (da,\n                   uri,\n                   uri_len);\n    log_msg (\"after digest_update uri\");\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n\n      /* Log header structure and sizes to detect potential header_size/value_size mismatches */\n      log_msg (\"header loop: h=%p kind=%d header_size=%zu header_ptr=%p value_size=%zu value_ptr=%p\",\n               (const void *) h,\n               (int) h->kind,\n               (size_t) h->header_size,\n               (const void *) h->header,\n               (size_t) h->value_size,\n               (const void *) h->value);\n\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n      {\n        log_msg (\"about to digest_update header: h->header=%p, h->header_size=%zu\", (const void *) h->header, (size_t) h->header_size);\n        digest_update (da, h->header, h->header_size);\n        log_msg (\"after digest_update header: h=%p\", (const void *) h);\n      }\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n      {\n        log_msg (\"about to digest_update value: h->value=%p, h->value_size=%zu\", (const void *) h->value, (size_t) h->value_size);\n        digest_update (da, h->value, h->value_size);\n        log_msg (\"after digest_update value: h=%p\", (const void *) h);\n      }\n    }\n  }\n\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    log_msg (\"about to digest_update realm: realm=%p, realm_len=%zu\", (const void *) realm, realm_len);\n    digest_update (da,\n                   realm,\n                   realm_len);\n    log_msg (\"after digest_update realm\");\n  }\n\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n\n    log_msg (\"computed hash (raw bytes):\");\n    log_bytes_hex (hash, (size_t) digest_get_size (da));\n\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n\n    log_msg (\"final nonce written to pointer %p (hex), digest_size=%d\", (void *) nonce, (int) digest_get_size (da));\n  }\n\n  log_msg (\"calculate_nonce EXIT: nonce_time=%llu, nonce_out_ptr=%p\", (unsigned long long) nonce_time, (void *) nonce);\n}\n"
}