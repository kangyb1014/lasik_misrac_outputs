{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf digest_update is declared to accept a non-const data pointer (e.g. void *data or char *data), then the call digest_update(da, \"\\0\", 2) passes an address of a string literal (immutable/static data) to a non-const pointer \u2014 violating MISRA C 2023 Rule 8.13. The correct approach is to declare the parameter as const void * (or const char *) so pointers to read-only data are const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2653.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_nonce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_nonce:\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\nPlease provide the modified calculate_nonce code.\n",
  "test_code": "static void probe_log_bytes(const char *label, const void *data, size_t size)\n{\n  FILE *f = fopen(\"/tmp/logs/2653.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"%s: data=%p size=%zu\\n\", label, data, size);\n  if (NULL != data && size > 0)\n  {\n    const unsigned char *p = (const unsigned char *) data;\n    size_t i;\n    size_t lim = (size > 32u) ? 32u : size; /* limit output */\n    fprintf(f, \"bytes:\");\n    for (i = 0u; i < lim; ++i)\n      fprintf(f, \" %02X\", (unsigned) p[i]);\n    if (size > lim)\n      fprintf(f, \" ... (%zu more bytes)\", size - lim);\n    fprintf(f, \"\\n\");\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic void probe_log_context(const char *stage,\n                              unsigned int bind_options,\n                              size_t saddr_size,\n                              size_t uri_len,\n                              size_t realm_len,\n                              size_t rnd_size,\n                              enum MHD_HTTP_Method mthd_e,\n                              const char *method,\n                              const struct MHD_HTTP_Req_Header *first_header)\n{\n  FILE *f = fopen(\"/tmp/logs/2653.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"ENTER %s\\n\", stage);\n  fprintf(f, \" bind_options=0x%X saddr_size=%zu uri_len=%zu realm_len=%zu rnd_size=%zu mthd_e=%d method=%p first_header=%p\\n\",\n          bind_options, saddr_size, uri_len, realm_len, rnd_size, (int) mthd_e, (const void *) method, (const void *) first_header);\n  fprintf(f, \"-----------------------------------------------------\\n\\n\");\n  fclose(f);\n}\n\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  /* Log entry context so agents can reproduce flow/state that leads to the\n     violation scenario (passing string literals to a non-const pointer). */\n  probe_log_context(\"calculate_nonce entry\", bind_options, saddr_size, uri_len, realm_len, rnd_size, mthd_e, method, first_header);\n\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n\n    /* Log timestamp bytes before passing to digest_update */\n    probe_log_bytes(\"digest_update(timestamp)\", timestamp, sizeof(timestamp));\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    probe_log_bytes(\"digest_update(rnd)\", rnd, rnd_size);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    probe_log_bytes(\"digest_update(saddr)\", saddr, saddr_size);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n    {\n      const void *ipaddr = &((const struct sockaddr_in *) saddr)->sin_addr;\n      size_t ipsize = sizeof(((const struct sockaddr_in *) saddr)->sin_addr);\n      probe_log_bytes(\"digest_update(sin_addr)\", ipaddr, ipsize);\n      digest_update (da,\n                     ipaddr,\n                     ipsize);\n    }\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n    {\n      const void *ipaddr = &((const struct sockaddr_in6 *) saddr)->sin6_addr;\n      size_t ipsize = sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr);\n      probe_log_bytes(\"digest_update(sin6_addr)\", ipaddr, ipsize);\n      digest_update (da,\n                     ipaddr,\n                     ipsize);\n    }\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      probe_log_bytes(\"digest_update(mthd_for_hash)\", &mthd_for_hash, sizeof(mthd_for_hash));\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n    {\n      probe_log_bytes(\"digest_update_str(method)\", method, (method != NULL) ? strlen(method) : 0);\n      digest_update_str (da, method);\n    }\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    probe_log_bytes(\"digest_update(uri)\", uri, uri_len);\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      /* This call is the reported violation scenario: a string literal \"\\0\"\n         passed to a function that (in the reported code) accepts a\n         non-const pointer. Log address and bytes to provide evidence. */\n      probe_log_bytes(\"digest_update(literal \\\"\\\\0\\\")\", \"\\0\", 2);\n      digest_update (da, \"\\0\", 2);\n\n      if (0 != h->header_size)\n      {\n        probe_log_bytes(\"digest_update(h->header)\", h->header, h->header_size);\n        digest_update (da, h->header, h->header_size);\n      }\n\n      /* Another literal used here: empty string \"\" (1 byte) */\n      probe_log_bytes(\"digest_update(literal \\\"\\\" )\", \"\", 1);\n      digest_update (da, \"\", 1);\n\n      if (0 != h->value_size)\n      {\n        probe_log_bytes(\"digest_update(h->value)\", h->value, h->value_size);\n        digest_update (da, h->value, h->value_size);\n      }\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    probe_log_bytes(\"digest_update(realm)\", realm, realm_len);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n\n    /* Log final nonce hex (truncated) to correlate the logged inputs with the\n       computed result. */\n    probe_log_bytes(\"final_hash_hex\", nonce, (size_t) (digest_get_size (da) * 2));\n  }\n}\n"
}