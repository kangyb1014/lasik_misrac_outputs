{
  "user_message": "An agent A claimed that the following process_value_to_boundary code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of process_value_to_boundary.\n```c\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        newline = pp->buffer_pos - 4;\n        break;\n      }\n      newline = (size_t) (r - buf);\n      if (0 == memcmp (\"\\r\\n--\",\n                       &buf[newline],\n                       4))\n        break;\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      if (0 != memcmp (&buf[newline + 4],\n                       boundary,\n                       blen))\n      {\n        /* no boundary, \"\\r\\n--\" is part of content, skip */\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        /* boundary found, process until newline then\n           skip boundary and go back to init */\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;             /* skip boundary as well */\n        buf[newline] = '\\0';\n        break;\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    pp->state = PP_Error;\n    return MHD_NO;\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls memcmp(\"\\r\\n--\", &buf[newline], 4) where the first operand is a string literal (a null\u2011terminated string). MISRA C 2023 Rule 21.14 forbids using memcmp to compare null\u2011terminated strings \u2014 use the appropriate string function (e.g. strncmp) or compare raw memory that is not a C string. Therefore this is a violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER process_value_to_boundary: pp=0x55d9dc81a820, buffer_pos=172, buffer_size=1028, blen=6, ioff=0, next_state=10, next_dash_state=1\ninner loop: newline=0, buffer_pos=172\nmemchr: found '\\r' at ptr 0x55d9dc81a8c8 -> newline=8\nbytes_at_newline(4): 0d 0a 2d 2d\nmemcmp literal vs buf[newline]: result=0\nliteral match at newline=8 -> potential boundary prefix found\ncan check full boundary: newline=8, blen=6, buffer_pos=172\nbytes_after_prefix(blen): 41 61 42 30 33 78\nmemcmp buf[newline+4] vs boundary: result=0\nboundary matched at newline=8; setting states and skipping blen+4=10 bytes\nafter boundary: ioff=10, buf[newline] set to NUL at offset 8\nEXIT process_value_to_boundary: new value_offset=8, ioff=18, must_ikvi=0, state=10\nENTER process_value_to_boundary: pp=0x55d9dc81a820, buffer_pos=22, buffer_size=1028, blen=6, ioff=0, next_state=10, next_dash_state=1\ninner loop: newline=0, buffer_pos=22\nmemchr: found '\\r' at ptr 0x55d9dc81a8c8 -> newline=8\nbytes_at_newline(4): 0d 0a 2d 2d\nmemcmp literal vs buf[newline]: result=0\nliteral match at newline=8 -> potential boundary prefix found\ncan check full boundary: newline=8, blen=6, buffer_pos=22\nbytes_after_prefix(blen): 41 61 42 30 33 78\nmemcmp buf[newline+4] vs boundary: result=0\nboundary matched at newline=8; setting states and skipping blen+4=10 bytes\nafter boundary: ioff=10, buf[newline] set to NUL at offset 8\nEXIT process_value_to_boundary: new value_offset=8, ioff=18, must_ikvi=0, state=10\nENTER process_value_to_boundary: pp=0x55d9dc81a820, buffer_pos=172, buffer_size=1028, blen=6, ioff=0, next_state=10, next_dash_state=1\ninner loop: newline=0, buffer_pos=172\nmemchr: found '\\r' at ptr 0x55d9dc81a8c8 -> newline=8\nbytes_at_newline(4): 0d 0a 2d 2d\nmemcmp literal vs buf[newline]: result=0\nliteral match at newline=8 -> potential boundary prefix found\ncan check full boundary: newline=8, blen=6, buffer_pos=172\nbytes_after_prefix(blen): 41 61 42 30 33 78\nmemcmp buf[newline+4] vs boundary: result=0\nboundary matched at newline=8; setting states and skipping blen+4=10 bytes\nafter boundary: ioff=10, buf[newline] set to NUL at offset 8\nEXIT process_value_to_boundary: new value_offset=8, ioff=18, must_ikvi=0, state=10\nENTER process_value_to_boundary: pp=0x55d9dc81a820, buffer_pos=22, buffer_size=1028, blen=6, ioff=0, next_state=10, next_dash_state=1\ninner loop: newline=0, buffer_pos=22\nmemchr: found '\\r' at ptr 0x55d9dc81a8c8 -> newline=8\nbytes_at_newline(4): 0d 0a 2d 2d\nmemcmp literal vs buf[newline]: result=0\nliteral match at newline=8 -> potential boundary prefix found\ncan check full boundary: newline=8, blen=6, buffer_pos=22\nbytes_after_prefix(blen): 41 61 42 30 33 78\nmemcmp buf[newline+4] vs boundary: result=0\nboundary matched at newline=8; setting states and skipping blen+4=10 bytes\nafter boundary: ioff=10, buf[newline] set to NUL at offset 8\nEXIT process_value_to_boundary: new value_offset=8, ioff=18, must_ikvi=0, state=10\nENTER process_value_to_boundary: pp=0x55d9dc81a820, buffer_pos=172, buffer_size=1028, blen=6, ioff=0, next_state=10, next_dash_state=1\ninner loop: newline=0, buffer_pos=172\nmemchr: found '\\r' at ptr 0x55d9dc81a8c8 -> newline=8\nbytes_at_newline(4): 0d 0a 2d 2d\nmemcmp literal vs buf[newline]: result=0\nliteral match at newline=8 -> potential boundary prefix found\ncan check full boundary: newline=8, blen=6, buffer_pos=172\nbytes_after_prefix(blen): 41 61 42 30 33 78\nmemcmp buf[newline+4] vs boundary: result=0\nboundary matched at newline=8; setting states and skipping blen+4=10 bytes\nafter boundary: ioff=10, buf[newline] set to NUL at offset 8\nEXIT process_value_to_boundary: new value_offset=8, ioff=18, must_ikvi=0, state=10\nENTER process_value_to_boundary: pp=0x55d9dc81a820, buffer_pos=22, buffer_size=1028, blen=6, ioff=0, next_state=10, next_dash_state=1\ninner loop: newline=0, buffer_pos=22\nmemchr: found '\\r' at ptr 0x55d9dc81a8c8 -> newline=8\nbytes_at_newline(4): 0d 0a 2d 2d\nmemcmp literal vs buf[newline]: result=0\nliteral match at newline=8 -> potential boundary prefix found\ncan check full boundary: newline=8, blen=6, buffer_pos=22\nbytes_after_prefix(blen): 41 61 42 30 \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.14 prohibits using memcmp to compare null\u2011terminated strings. In the code shown memcmp is called with a string literal \"\\r\\n--\" as the first argument. A string literal is a null\u2011terminated char array, so using memcmp to compare it against buffer contents violates the rule. (The second memcmp(&buf[newline+4], boundary, blen) is also suspect if boundary is a C string; the primary definite violation is the literal.) Recommended fix: use the appropriate string function (e.g. strncmp) or ensure both operands are treated as raw memory blocks that are not C strings; for example replace memcmp(\"\\r\\n--\", &buf[newline], 4) with strncmp(&buf[newline], \"\\r\\n--\", 4) or otherwise refactor to comply with MISRA guidance."
}