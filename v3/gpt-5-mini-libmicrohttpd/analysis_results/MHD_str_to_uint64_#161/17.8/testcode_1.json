{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code increments the function parameter pointer 'str' (str++ in the loop). MISRA C 2023 Rule 17.8 forbids modifying a function parameter itself (the pointer variable); although the pointed-to object may be modified, the pointer shall not be changed. Therefore this fragment violates Rule 17.8. (Note: writing '*out_val = res;' is permitted because it modifies the object pointed to, not the pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_to_uint64_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1617.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_to_uint64_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_to_uint64_:\n```c\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    str++;\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\nPlease provide the modified MHD_str_to_uint64_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <inttypes.h>\n#include <ctype.h>\n#include <limits.h>\n\n/* Small local helper that mirrors the expected behavior of the project's\n   isasciidigit function: true for '0'..'9'. Declared static to avoid\n   linkage surprises. */\nstatic int isasciidigit_local(int c)\n{\n  return (unsigned) (c - '0') <= 9u;\n}\n\n/* Simple logging helper that appends a single line to the log file. Keep\n   it minimal to avoid changing program behaviour. */\nstatic void log_line(const char *label,\n                     const char *str_ptr,\n                     const char *start_ptr,\n                     uint64_t res,\n                     int digit,\n                     const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/1617.txt\", \"a\");\n  if (! f)\n    return;\n\n  /* Print pointer addresses, current char (as hex and printable if possible),\n     accumulated result and digit candidate, plus an optional note. */\n  unsigned char ch = 0;\n  if (str_ptr != NULL)\n    ch = (unsigned char) *str_ptr;\n\n  fprintf(f, \"%s: str=%p char=0x%02X '%c' start=%p res=%\" PRIu64 \" digit=%d note=%s\\n\",\n          label,\n          (const void *) str_ptr,\n          (unsigned) ch,\n          (isprint(ch) ? (int) ch : '.'),\n          (const void *) start_ptr,\n          res,\n          digit,\n          (note != NULL) ? note : \"\");\n\n  fclose(f);\n}\n\n/* Export a symbol name matching original code. Use local digit test helper\n   to avoid an external dependency on isasciidigit while preserving behavior. */\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  /* Validate inputs; mirror original behavior. Use local digit check. */\n  if (! str || ! out_val || ! isasciidigit_local ((unsigned char) str[0]))\n  {\n    /* Log reason for immediate return. Do not dereference str if NULL. */\n    log_line(\"entry-fail\",\n             str,\n             start,\n             0ULL,\n             -1,\n             \"invalid parameter or first char not digit\");\n    return 0;\n  }\n\n  res = 0;\n  /* Log initial state (before entering loop). */\n  log_line(\"entry-ok\",\n           str,\n           start,\n           res,\n           ((unsigned char) (*str) - '0'),\n           \"start parsing\");\n\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n\n    /* Log state before overflow checks. */\n    log_line(\"before-check\",\n             str,\n             start,\n             res,\n             digit,\n             \"about to check overflow\");\n\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n    {\n      /* Log overflow detection and return 0, matching original logic. */\n      log_line(\"overflow\",\n               str,\n               start,\n               res,\n               digit,\n               \"overflow detected - returning 0\");\n      return 0;\n    }\n\n    res *= 10;\n    res += (unsigned int) digit;\n\n    /* Log state after accumulating digit but before advancing pointer. */\n    log_line(\"after-accumulate-before-increment\",\n             str,\n             start,\n             res,\n             digit,\n             \"accumulated digit, will increment str\");\n\n    /* The following increments the function parameter pointer 'str'. This\n       is the operation under scrutiny for MISRA Rule 17.8; the logging\n       captures pointer value before and after the increment. */\n    str++;\n\n    /* Log pointer after increment so evidence is present in the file. */\n    log_line(\"after-increment\",\n             str,\n             start,\n             res,\n             -1,\n             \"str was incremented\");\n\n  } while (isasciidigit_local ((unsigned char) *str));\n\n  *out_val = res;\n\n  /* Log successful completion with result and number of characters consumed. */\n  {\n    size_t len = (size_t) (str - start);\n    FILE *f = fopen(\"/tmp/logs/1617.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"success: out_val=%\" PRIu64 \" len=%zu str=%p start=%p\\n\",\n              res, len, (const void *) str, (const void *) start);\n      fclose(f);\n    }\n  }\n\n  return (size_t) (str - start);\n}\n"
}