{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter crc_cls is declared as void * (and stored into response->crc_cls) even though the create function does not modify the pointed-to object. If the content-reader callback only reads the context (i.e. the pointed-to object is not modified by the library), the pointer should be const-qualified (const void *crc_cls and a matching const-qualified struct member). As written, this fails to qualify the pointer as const where possible and therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_callback code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_from_callback as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_callback:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_callback (uint64_t size,\n                                   size_t block_size,\n                                   MHD_ContentReaderCallback crc,\n                                   void *crc_cls,\n                                   MHD_ContentReaderFreeCallback crfc)\n{\n  struct MHD_Response *response;\n\n  if ((NULL == crc) || (0 == block_size))\n    return NULL;\n  if (NULL == (response = MHD_calloc_ (1, sizeof (struct MHD_Response)\n                                       + block_size)))\n    return NULL;\n  response->fd = -1;\n  response->data = (void *) &response[1];\n  response->data_buffer_size = block_size;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->crc = crc;\n  response->crfc = crfc;\n  response->crc_cls = crc_cls;\n  response->reference_count = 1;\n  response->total_size = size;\n  return response;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_from_callback code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Helper probe function: append diagnostic lines to /tmp/logs/2023.txt */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2023.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  /* Simple timestamp */\n  time_t t = time(NULL);\n  if (t != (time_t)-1)\n    fprintf(f, \"[%ld] \", (long)t);\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_callback (uint64_t size,\n                                   size_t block_size,\n                                   MHD_ContentReaderCallback crc,\n                                   void *crc_cls,\n                                   MHD_ContentReaderFreeCallback crfc)\n{\n  struct MHD_Response *response;\n\n  mhd_log_probe(\"enter: size=%\" PRIu64 \", block_size=%zu, crc=%s, crc_cls=%p, crfc=%s\",\n                size,\n                block_size,\n                (crc != (MHD_ContentReaderCallback)0) ? \"non-NULL\" : \"NULL\",\n                crc_cls,\n                (crfc != (MHD_ContentReaderFreeCallback)0) ? \"non-NULL\" : \"NULL\");\n\n  if ((NULL == crc) || (0 == block_size))\n  {\n    mhd_log_probe(\"early return: invalid args (crc %s, block_size=%zu)\",\n                  (crc != (MHD_ContentReaderCallback)0) ? \"non-NULL\" : \"NULL\",\n                  block_size);\n    return NULL;\n  }\n  if (NULL == (response = MHD_calloc_ (1, sizeof (struct MHD_Response)\n                                       + block_size)))\n  {\n    mhd_log_probe(\"allocation failed: requested=%zu bytes (struct + block_size)\",\n                  sizeof (struct MHD_Response) + block_size);\n    return NULL;\n  }\n  response->fd = -1;\n  response->data = (void *) &response[1];\n  response->data_buffer_size = block_size;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    mhd_log_probe(\"mutex init failed, freeing response=%p\", (void *)response);\n    free (response);\n    return NULL;\n  }\n#endif\n  response->crc = crc;\n  response->crfc = crfc;\n\n  /* Log the pointer value being stored so callers/inspectors can observe that\n     the created response stores a non-const void * (potential source of MISRA\n     8.13 concern if the pointed-to object is not modified). */\n  mhd_log_probe(\"storing crc_cls into response: response=%p, crc_cls=%p\",\n                (void *)response, crc_cls);\n\n  response->crc_cls = crc_cls;\n  response->reference_count = 1;\n  response->total_size = size;\n\n  mhd_log_probe(\"exit: returning response=%p (crc_cls=%p, total_size=%\" PRIu64 \")\",\n                (void *)response, crc_cls, size);\n  return response;\n}\n"
}