{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf both the parameter 'crc_cls' and the struct member 'response->crc_cls' are declared as plain 'void *' (non-const), then this assignment leaves the pointer unqualified even though it is typically used as a read-only/context pointer. In that case Rule 8.13 is violated (e.g. passing a pointer to static configuration or a literal should use 'const void *'). The fix is to declare the parameter and the struct member as 'const void *' so the assignment preserves const qualification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_callback code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_from_callback as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_callback:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_callback (uint64_t size,\n                                   size_t block_size,\n                                   MHD_ContentReaderCallback crc,\n                                   void *crc_cls,\n                                   MHD_ContentReaderFreeCallback crfc)\n{\n  struct MHD_Response *response;\n\n  if ((NULL == crc) || (0 == block_size))\n    return NULL;\n  if (NULL == (response = MHD_calloc_ (1, sizeof (struct MHD_Response)\n                                       + block_size)))\n    return NULL;\n  response->fd = -1;\n  response->data = (void *) &response[1];\n  response->data_buffer_size = block_size;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->crc = crc;\n  response->crfc = crfc;\n  response->crc_cls = crc_cls;\n  response->reference_count = 1;\n  response->total_size = size;\n  return response;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_from_callback code.\n",
  "test_code": "static void mhd_probe_log(const char *event, uint64_t size, size_t block_size, void *crc_cls, struct MHD_Response *resp)\n{\n  /* Lightweight probe logger. Appends control-flow and state info to /tmp/logs/2023.txt.\n     Intentionally minimal to avoid changing program behavior. */\n  FILE *f = fopen(\"/tmp/logs/2023.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] EVENT: %s\\n\", (long)t, event);\n  fprintf(f, \"  size=%llu, block_size=%zu\\n\", (unsigned long long) size, block_size);\n  fprintf(f, \"  crc_cls (arg) = %p\\n\", crc_cls);\n  if (NULL != resp)\n  {\n    fprintf(f, \"  response ptr = %p\\n\", (void *) resp);\n    fprintf(f, \"  response->fd = %d\\n\", resp->fd);\n    fprintf(f, \"  response->data = %p\\n\", resp->data);\n    fprintf(f, \"  response->data_buffer_size = %zu\\n\", resp->data_buffer_size);\n    fprintf(f, \"  response->crc = %p\\n\", (void *) resp->crc);\n    fprintf(f, \"  response->crfc = %p\\n\", (void *) resp->crfc);\n    fprintf(f, \"  response->crc_cls = %p\\n\", resp->crc_cls);\n    fprintf(f, \"  response->reference_count = %d\\n\", resp->reference_count);\n    fprintf(f, \"  response->total_size = %llu\\n\", (unsigned long long) resp->total_size);\n  }\n  fflush(f);\n  fclose(f);\n}\n\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_callback (uint64_t size,\n                                   size_t block_size,\n                                   MHD_ContentReaderCallback crc,\n                                   void *crc_cls,\n                                   MHD_ContentReaderFreeCallback crfc)\n{\n  struct MHD_Response *response;\n\n  mhd_probe_log(\"entry\", size, block_size, crc_cls, NULL);\n\n  if ((NULL == crc) || (0 == block_size))\n  {\n    mhd_probe_log(\"invalid-params: crc null or block_size zero\", size, block_size, crc_cls, NULL);\n    return NULL;\n  }\n  if (NULL == (response = MHD_calloc_ (1, sizeof (struct MHD_Response)\n                                       + block_size)))\n  {\n    mhd_probe_log(\"alloc-failed\", size, block_size, crc_cls, NULL);\n    return NULL;\n  }\n  /* log after allocation to capture response pointer and initial layout */\n  mhd_probe_log(\"allocated\", size, block_size, crc_cls, response);\n\n  response->fd = -1;\n  response->data = (void *) &response[1];\n  response->data_buffer_size = block_size;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    mhd_probe_log(\"mutex-init-failed\", size, block_size, crc_cls, response);\n    free (response);\n    return NULL;\n  }\n#endif\n  response->crc = crc;\n  response->crfc = crfc;\n\n  /* Probe immediately before and after assigning crc_cls to demonstrate\n     the (non-const) pointer being copied into the response object. This\n     helps reproduce the const-qualification loss scenario described. */\n  mhd_probe_log(\"before-assign-crc_cls\", size, block_size, crc_cls, response);\n  response->crc_cls = crc_cls;\n  mhd_probe_log(\"after-assign-crc_cls\", size, block_size, crc_cls, response);\n\n  response->reference_count = 1;\n  response->total_size = size;\n\n  mhd_probe_log(\"returning-success\", size, block_size, crc_cls, response);\n  return response;\n}\n"
}