{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_empty:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_empty (enum MHD_ResponseFlags flags)\n{\n  struct MHD_Response *r;\n  r = (struct MHD_Response *) MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL != r)\n  {\n    if (MHD_mutex_init_ (&r->mutex))\n    {\n      r->fd = -1;\n      r->reference_count = 1;\n      /* If any flags combination will be not allowed, replace the next\n       * assignment with MHD_set_response_options() call. */\n      r->flags = flags;\n\n      return r; /* Successful result */\n    }\n    free (r);\n  }\n  return NULL; /* Something failed */\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n      if (MHD_mutex_init_ (&r->mutex))\n      {\n        r->fd = -1;\n        r->reference_count = 1;\n        /* If any flags combination will be not allowed, replace the next\n         * assignment with MHD_set_response_options() call. */\n        r->flags = flags;\n\n        return r; /* Successful result */\n      }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No \u2014 the fragment as written does not contain statically unreachable code. The if branch and the code after the if are both potentially reachable depending on the runtime result of MHD_mutex_init_. However, a violation would occur if MHD_mutex_init_ were a compile\u2011time constant that always evaluates true (for example a macro or inline function that expands to 1), because then the free(r); and return NULL; path would be statically unreachable."
}