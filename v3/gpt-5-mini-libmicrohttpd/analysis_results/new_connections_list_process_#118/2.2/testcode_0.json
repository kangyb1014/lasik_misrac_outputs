{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) 0;' inside the if-block is executed when 'MHD_NO == new_connection_process_(daemon, c)'. It performs no observable action and can be removed without changing program behaviour (especially when HAVE_MESSAGES is not defined, the cast-to-void is the only statement in the block). Therefore it is an executed no-op and constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified new_connections_list_process_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1182.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of new_connections_list_process_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of new_connections_list_process_:\n```c\nstatic void\nnew_connections_list_process_ (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *local_head;\n  struct MHD_Connection *local_tail;\n  mhd_assert (daemon->have_new);\n  mhd_assert (MHD_D_IS_THREAD_SAFE_ (daemon));\n\n  /* Detach DL-list of new connections from the daemon for\n   * following local processing. */\n  MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n  mhd_assert (NULL != daemon->new_connections_head);\n  local_head = daemon->new_connections_head;\n  local_tail = daemon->new_connections_tail;\n  daemon->new_connections_head = NULL;\n  daemon->new_connections_tail = NULL;\n  daemon->have_new = false;\n  MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n  (void) local_head; /* Mute compiler warning */\n\n  /* Process new connections in FIFO order. */\n  do\n  {\n    struct MHD_Connection *c;   /**< Currently processed connection */\n\n    c = local_tail;\n    DLL_remove (local_head,\n                local_tail,\n                c);\n    mhd_assert (daemon == c->daemon);\n    if (MHD_NO == new_connection_process_ (daemon, c))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to start serving new connection.\\n\"));\n#endif\n      (void) 0;\n    }\n  } while (NULL != local_tail);\n\n}\n```\n</target_code>\nPlease provide the modified new_connections_list_process_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helper: append a single log line with key state information. */\nstatic void\nmhd_probe_log_state_(const char *event,\n                     struct MHD_Daemon *daemon,\n                     struct MHD_Connection *c,\n                     struct MHD_Connection *local_head,\n                     struct MHD_Connection *local_tail)\n{\n  FILE *f = fopen(\"/tmp/logs/1182.txt\", \"a\");\n  if (NULL == f)\n  {\n    return; /* best-effort logging only */\n  }\n\n  /* Print event, pointers and a snapshot of daemon->have_new if available. */\n  if (NULL != daemon)\n  {\n    fprintf(f,\n            \"EVENT=%s daemon=%p have_new=%d local_head=%p local_tail=%p c=%p\\n\",\n            event,\n            (void *) daemon,\n            (int) daemon->have_new,\n            (void *) local_head,\n            (void *) local_tail,\n            (void *) c);\n  }\n  else\n  {\n    fprintf(f,\n            \"EVENT=%s daemon=NULL local_head=%p local_tail=%p c=%p\\n\",\n            event,\n            (void *) local_head,\n            (void *) local_tail,\n            (void *) c);\n  }\n\n  fclose(f);\n}\n\nstatic void\nnew_connections_list_process_ (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *local_head;\n  struct MHD_Connection *local_tail;\n  mhd_assert (daemon->have_new);\n  mhd_assert (MHD_D_IS_THREAD_SAFE_ (daemon));\n\n  /* Log entry with initial daemon state. */\n  mhd_probe_log_state_(\"enter_new_connections_list_process\", daemon, NULL, daemon->new_connections_head, daemon->new_connections_tail);\n\n  /* Detach DL-list of new connections from the daemon for\n   * following local processing. */\n  MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n  mhd_assert (NULL != daemon->new_connections_head);\n  local_head = daemon->new_connections_head;\n  local_tail = daemon->new_connections_tail;\n  daemon->new_connections_head = NULL;\n  daemon->new_connections_tail = NULL;\n  daemon->have_new = false;\n  MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n  (void) local_head; /* Mute compiler warning */\n\n  /* Log detached list pointers and altered daemon state. */\n  mhd_probe_log_state_(\"after_detach\", daemon, NULL, local_head, local_tail);\n\n  /* Process new connections in FIFO order. */\n  do\n  {\n    struct MHD_Connection *c;   /**< Currently processed connection */\n\n    c = local_tail;\n    DLL_remove (local_head,\n                local_tail,\n                c);\n    mhd_assert (daemon == c->daemon);\n\n    /* Log before attempting to start serving the connection. */\n    mhd_probe_log_state_(\"before_new_connection_process\", daemon, c, local_head, local_tail);\n\n    if (MHD_NO == new_connection_process_ (daemon, c))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to start serving new connection.\\n\"));\n#endif\n      /* Log that the failure branch was taken. This is the probe that\n       * provides evidence that the branch (which may contain only\n       * (void) 0; when HAVE_MESSAGES is not defined) was executed. */\n      mhd_probe_log_state_(\"new_connection_process_failed_branch\", daemon, c, local_head, local_tail);\n\n      (void) 0;\n    }\n\n    /* Log after processing this connection and current list tail. */\n    mhd_probe_log_state_(\"after_processing_connection\", daemon, c, local_head, local_tail);\n  } while (NULL != local_tail);\n\n  /* Final log on exit. */\n  mhd_probe_log_state_(\"exit_new_connections_list_process\", daemon, NULL, NULL, NULL);\n\n}\n"
}