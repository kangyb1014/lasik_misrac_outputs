{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_strerror_ is declared to return a non-const char * (e.g. wrapper around strerror), this is a violation: the returned pointer points to a string that is not meant to be modified and therefore should be const char *. Passing a non-const char * where the data is immutable breaks MISRA C 2023 Rule 8.13. If, however, MHD_strerror_ is declared to return const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified new_connection_process_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of new_connection_process_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of new_connection_process_:\n```c\nstatic enum MHD_Result\nnew_connection_process_ (struct MHD_Daemon *daemon,\n                         struct MHD_Connection *connection)\n{\n  int eno = 0;\n\n  mhd_assert (connection->daemon == daemon);\n\n#ifdef MHD_USE_THREADS\n  /* Function manipulate connection and timeout DL-lists,\n   * must be called only within daemon thread. */\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  /* Allocate memory pool in the processing thread so\n   * intensively used memory area is allocated in \"good\"\n   * (for the thread) memory region. It is important with\n   * NUMA and/or complex cache hierarchy. */\n  connection->pool = MHD_pool_create (daemon->pool_size);\n  if (NULL == connection->pool)\n  { /* 'pool' creation failed */\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Error allocating memory: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif\n#if defined(ENOMEM) && (ENOMEM + 0 != 0)\n    eno = ENOMEM;\n#endif\n    (void) 0; /* Mute possible compiler warning */\n  }\n  else\n  { /* 'pool' creation succeed */\n    MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n    /* Firm check under lock. */\n    if (daemon->connections >= daemon->connection_limit)\n    { /* Connections limit */\n      MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Server reached connection limit. \"\n                   \"Closing inbound connection.\\n\"));\n#endif\n#if defined(ENFILE) && (ENFILE + 0 != 0)\n      eno = ENFILE;\n#endif\n      (void) 0; /* Mute possible compiler warning */\n    }\n    else\n    { /* Have space for new connection */\n      daemon->connections++;\n      DLL_insert (daemon->connections_head,\n                  daemon->connections_tail,\n                  connection);\n      if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n      {\n        XDLL_insert (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      }\n      MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n\n      MHD_connection_set_initial_state_ (connection);\n\n      if (NULL != daemon->notify_connection)\n        daemon->notify_connection (daemon->notify_connection_cls,\n                                   connection,\n                                   &connection->socket_context,\n                                   MHD_CONNECTION_NOTIFY_STARTED);\n#ifdef MHD_USE_THREADS\n      if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n      {\n        mhd_assert (! MHD_D_IS_USING_EPOLL_ (daemon));\n        if (! MHD_create_named_thread_ (&connection->tid,\n                                        \"MHD-connection\",\n                                        daemon->thread_stack_size,\n                                        &thread_main_handle_connection,\n                                        connection))\n        {\n          eno = errno;\n#ifdef HAVE_MESSAGES\n#ifdef EAGAIN\n          if (EAGAIN == eno)\n            MHD_DLOG (daemon,\n                      _ (\"Failed to create a new thread because it would \"\n                         \"have exceeded the system limit on the number of \"\n                         \"threads or no system resources available.\\n\"));\n          else\n#endif /* EAGAIN */\n          MHD_DLOG (daemon,\n                    _ (\"Failed to create a thread: %s\\n\"),\n                    MHD_strerror_ (eno));\n#endif /* HAVE_MESSAGES */\n        }\n        else               /* New thread has been created successfully */\n          return MHD_YES;  /* *** Function success exit point *** */\n      }\n      else\n#else  /* ! MHD_USE_THREADS */\n      if (1)\n#endif /* ! MHD_USE_THREADS */\n      { /* No 'thread-per-connection' */\n#ifdef MHD_USE_THREADS\n        connection->tid = daemon->tid;\n#endif /* MHD_USE_THREADS */\n#ifdef EPOLL_SUPPORT\n        if (MHD_D_IS_USING_EPOLL_ (daemon))\n        {\n          if (0 == (daemon->options & MHD_USE_TURBO))\n          {\n            struct epoll_event event;\n\n            event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET | EPOLLRDHUP;\n            event.data.ptr = connection;\n            if (0 != epoll_ctl (daemon->epoll_fd,\n                                EPOLL_CTL_ADD,\n                                connection->socket_fd,\n                                &event))\n            {\n              eno = errno;\n#ifdef HAVE_MESSAGES\n              MHD_DLOG (daemon,\n                        _ (\"Call to epoll_ctl failed: %s\\n\"),\n                        MHD_socket_last_strerr_ ());\n#endif\n            }\n            else\n            { /* 'socket_fd' has been added to 'epool' */\n              connection->epoll_state |= MHD_EPOLL_STATE_IN_EPOLL_SET;\n\n              return MHD_YES;  /* *** Function success exit point *** */\n            }\n          }\n          else\n          {\n            connection->epoll_state |= MHD_EPOLL_STATE_READ_READY\n                                       | MHD_EPOLL_STATE_WRITE_READY\n                                       | MHD_EPOLL_STATE_IN_EREADY_EDLL;\n            EDLL_insert (daemon->eready_head,\n                         daemon->eready_tail,\n                         connection);\n\n            return MHD_YES;  /* *** Function success exit point *** */\n          }\n        }\n        else /* No 'epoll' */\n#endif /* EPOLL_SUPPORT */\n        return MHD_YES;    /* *** Function success exit point *** */\n      }\n\n      /* ** Below is a cleanup path ** */\n      if (NULL != daemon->notify_connection)\n        daemon->notify_connection (daemon->notify_connection_cls,\n                                   connection,\n                                   &connection->socket_context,\n                                   MHD_CONNECTION_NOTIFY_CLOSED);\n      MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n      if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n      {\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      }\n      DLL_remove (daemon->connections_head,\n                  daemon->connections_tail,\n                  connection);\n      daemon->connections--;\n      MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n    }\n    MHD_pool_destroy (connection->pool);\n  }\n  /* Free resources allocated before the call of this functions */\n#ifdef HTTPS_SUPPORT\n  if (NULL != connection->tls_session)\n    gnutls_deinit (connection->tls_session);\n#endif /* HTTPS_SUPPORT */\n  MHD_ip_limit_del (daemon,\n                    connection->addr,\n                    connection->addr_len);\n  if (NULL != connection->addr)\n    free (connection->addr);\n  MHD_socket_close_chk_ (connection->socket_fd);\n  free (connection);\n  if (0 != eno)\n    errno = eno;\n#ifdef EINVAL\n  else\n    errno = EINVAL;\n#endif /* EINVAL */\n  return MHD_NO;  /* *** Function failure exit point *** */\n}\n```\n</target_code>\nPlease provide the modified new_connection_process_ code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe helpers inserted to capture control flow and state for debugging.\n * Logs are appended to /tmp/logs/1173.txt. These helpers avoid changing\n * program logic and only read state. */\nstatic void\nprobe_log_time_and_msg (const char *msg)\n{\n  FILE *f = fopen (\"/tmp/logs/1173.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time (NULL);\n  struct tm tm_buf;\n  struct tm *tmv = localtime_r (&t, &tm_buf);\n  if (NULL == tmv)\n    fprintf (f, \"[unknown-time] %s\\n\", msg);\n  else\n    fprintf (f, \"[%04d-%02d-%02d %02d:%02d:%02d] %s\\n\",\n             tmv->tm_year + 1900,\n             tmv->tm_mon + 1,\n             tmv->tm_mday,\n             tmv->tm_hour,\n             tmv->tm_min,\n             tmv->tm_sec,\n             msg);\n  fclose (f);\n}\n\nstatic void\nprobe_log_strerror_usage (const char *context, int err)\n{\n  /* Call the same function that the target code uses so we record the\n   * pointer and text it returns. We treat the returned pointer as\n   * const char * here to avoid any mutation. */\n  const char *s = MHD_strerror_ (err);\n  FILE *f = fopen (\"/tmp/logs/1173.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time (NULL);\n  struct tm tm_buf;\n  struct tm *tmv = localtime_r (&t, &tm_buf);\n  if (NULL == tmv)\n    fprintf (f, \"[unknown-time] [%s] errno=%d ptr=%p text=%s\\n\",\n             context, err, (const void *) s, (NULL != s) ? s : \"(NULL)\");\n  else\n    fprintf (f, \"[%04d-%02d-%02d %02d:%02d:%02d] [%s] errno=%d ptr=%p text=%s\\n\",\n             tmv->tm_year + 1900,\n             tmv->tm_mon + 1,\n             tmv->tm_mday,\n             tmv->tm_hour,\n             tmv->tm_min,\n             tmv->tm_sec,\n             context, err, (const void *) s, (NULL != s) ? s : \"(NULL)\");\n  fclose (f);\n}\n\nstatic void\nprobe_log_strmsg (const char *context, const char *s)\n{\n  FILE *f = fopen (\"/tmp/logs/1173.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time (NULL);\n  struct tm tm_buf;\n  struct tm *tmv = localtime_r (&t, &tm_buf);\n  if (NULL == tmv)\n    fprintf (f, \"[unknown-time] [%s] ptr=%p text=%s\\n\",\n             context, (const void *) s, (NULL != s) ? s : \"(NULL)\");\n  else\n    fprintf (f, \"[%04d-%02d-%02d %02d:%02d:%02d] [%s] ptr=%p text=%s\\n\",\n             tmv->tm_year + 1900,\n             tmv->tm_mon + 1,\n             tmv->tm_mday,\n             tmv->tm_hour,\n             tmv->tm_min,\n             tmv->tm_sec,\n             context, (const void *) s, (NULL != s) ? s : \"(NULL)\");\n  fclose (f);\n}\n\nstatic void\nprobe_log_connection_state (const char *context,\n                            struct MHD_Daemon *daemon,\n                            struct MHD_Connection *connection)\n{\n  FILE *f = fopen (\"/tmp/logs/1173.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time (NULL);\n  struct tm tm_buf;\n  struct tm *tmv = localtime_r (&t, &tm_buf);\n  if (NULL == tmv)\n    fprintf (f, \"[unknown-time] [%s] daemon=%p connection=%p\\n\",\n             context, (void *) daemon, (void *) connection);\n  else\n    fprintf (f, \"[%04d-%02d-%02d %02d:%02d:%02d] [%s] daemon=%p connection=%p\\n\",\n             tmv->tm_year + 1900,\n             tmv->tm_mon + 1,\n             tmv->tm_mday,\n             tmv->tm_hour,\n             tmv->tm_min,\n             tmv->tm_sec,\n             context, (void *) daemon, (void *) connection);\n\n  if (NULL != daemon)\n  {\n    /* Only read simple integer fields to avoid dereferencing in an unsafe way */\n    fprintf (f, \"  daemon->connections=%d connection_limit=%d\\n\",\n             daemon->connections, daemon->connection_limit);\n  }\n  if (NULL != connection)\n  {\n    fprintf (f, \"  connection->socket_fd=%d pool=%p epoll_state=0x%x\\n\",\n             connection->socket_fd,\n             (void *) connection->pool,\n             connection->epoll_state);\n  }\n\n  fclose (f);\n}\n\nstatic enum MHD_Result\nnew_connection_process_ (struct MHD_Daemon *daemon,\n                         struct MHD_Connection *connection)\n{\n  int eno = 0;\n\n  /* Log entry into the function */\n  probe_log_connection_state (\"enter_new_connection_process\", daemon, connection);\n\n  mhd_assert (connection->daemon == daemon);\n\n#ifdef MHD_USE_THREADS\n  /* Function manipulate connection and timeout DL-lists,\n   * must be called only within daemon thread. */\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  /* Allocate memory pool in the processing thread so\n   * intensively used memory area is allocated in \"good\"\n   * (for the thread) memory region. It is important with\n   * NUMA and/or complex cache hierarchy. */\n  connection->pool = MHD_pool_create (daemon->pool_size);\n  if (NULL == connection->pool)\n  { /* 'pool' creation failed */\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Error allocating memory: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif\n    /* Probe: record the usage of MHD_strerror_ here to capture the\n     * returned pointer and errno for the violation scenario. */\n    probe_log_strerror_usage (\"pool_create_failed\", errno);\n\n#if defined(ENOMEM) && (ENOMEM + 0 != 0)\n    eno = ENOMEM;\n#endif\n    (void) 0; /* Mute possible compiler warning */\n  }\n  else\n  { /* 'pool' creation succeed */\n    MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n    /* Firm check under lock. */\n    if (daemon->connections >= daemon->connection_limit)\n    { /* Connections limit */\n      MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Server reached connection limit. \"\n                   \"Closing inbound connection.\\n\"));\n#endif\n      /* Log that we hit the connections limit */\n      probe_log_time_and_msg (\"connections_limit_reached\");\n#if defined(ENFILE) && (ENFILE + 0 != 0)\n      eno = ENFILE;\n#endif\n      (void) 0; /* Mute possible compiler warning */\n    }\n    else\n    { /* Have space for new connection */\n      daemon->connections++;\n      DLL_insert (daemon->connections_head,\n                  daemon->connections_tail,\n                  connection);\n      if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n      {\n        XDLL_insert (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      }\n      MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n\n      MHD_connection_set_initial_state_ (connection);\n\n      if (NULL != daemon->notify_connection)\n        daemon->notify_connection (daemon->notify_connection_cls,\n                                   connection,\n                                   &connection->socket_context,\n                                   MHD_CONNECTION_NOTIFY_STARTED);\n#ifdef MHD_USE_THREADS\n      if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n      {\n        mhd_assert (! MHD_D_IS_USING_EPOLL_ (daemon));\n        if (! MHD_create_named_thread_ (&connection->tid,\n                                        \"MHD-connection\",\n                                        daemon->thread_stack_size,\n                                        &thread_main_handle_connection,\n                                        connection))\n        {\n          eno = errno;\n#ifdef HAVE_MESSAGES\n#ifdef EAGAIN\n          if (EAGAIN == eno)\n            MHD_DLOG (daemon,\n                      _ (\"Failed to create a new thread because it would \"\n                         \"have exceeded the system limit on the number of \"\n                         \"threads or no system resources available.\\n\"));\n          else\n#endif /* EAGAIN */\n          MHD_DLOG (daemon,\n                    _ (\"Failed to create a thread: %s\\n\"),\n                    MHD_strerror_ (eno));\n#endif /* HAVE_MESSAGES */\n\n          /* Probe: log the errno and the pointer returned by MHD_strerror_ */\n          probe_log_strerror_usage (\"thread_create_failed\", eno);\n        }\n        else               /* New thread has been created successfully */\n        {\n          /* Log successful thread creation before returning */\n          probe_log_connection_state (\"thread_per_conn_created\", daemon, connection);\n          return MHD_YES;  /* *** Function success exit point *** */\n        }\n      }\n      else\n#else  /* ! MHD_USE_THREADS */\n      if (1)\n#endif /* ! MHD_USE_THREADS */\n      { /* No 'thread-per-connection' */\n#ifdef MHD_USE_THREADS\n        connection->tid = daemon->tid;\n#endif /* MHD_USE_THREADS */\n#ifdef EPOLL_SUPPORT\n        if (MHD_D_IS_USING_EPOLL_ (daemon))\n        {\n          if (0 == (daemon->options & MHD_USE_TURBO))\n          {\n            struct epoll_event event;\n\n            event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET | EPOLLRDHUP;\n            event.data.ptr = connection;\n            if (0 != epoll_ctl (daemon->epoll_fd,\n                                EPOLL_CTL_ADD,\n                                connection->socket_fd,\n                                &event))\n            {\n              eno = errno;\n#ifdef HAVE_MESSAGES\n              MHD_DLOG (daemon,\n                        _ (\"Call to epoll_ctl failed: %s\\n\"),\n                        MHD_socket_last_strerr_ ());\n#endif\n              /* Probe: log the string returned by MHD_socket_last_strerr_ */\n              probe_log_strmsg (\"epoll_ctl_failed\", MHD_socket_last_strerr_ ());\n            }\n            else\n            { /* 'socket_fd' has been added to 'epool' */\n              connection->epoll_state |= MHD_EPOLL_STATE_IN_EPOLL_SET;\n\n              /* Log the state before successful return */\n              probe_log_connection_state (\"epoll_added\", daemon, connection);\n\n              return MHD_YES;  /* *** Function success exit point *** */\n            }\n          }\n          else\n          {\n            connection->epoll_state |= MHD_EPOLL_STATE_READ_READY\n                                       | MHD_EPOLL_STATE_WRITE_READY\n                                       | MHD_EPOLL_STATE_IN_EREADY_EDLL;\n            EDLL_insert (daemon->eready_head,\n                         daemon->eready_tail,\n                         connection);\n\n            /* Log turbo/eready insertion */\n            probe_log_connection_state (\"eready_inserted\", daemon, connection);\n\n            return MHD_YES;  /* *** Function success exit point *** */\n          }\n        }\n        else /* No 'epoll' */\n#endif /* EPOLL_SUPPORT */\n        {\n          /* Log the non-epoll fast success path */\n          probe_log_connection_state (\"no_epoll_success\", daemon, connection);\n          return MHD_YES;    /* *** Function success exit point *** */\n        }\n      }\n\n      /* ** Below is a cleanup path ** */\n      if (NULL != daemon->notify_connection)\n        daemon->notify_connection (daemon->notify_connection_cls,\n                                   connection,\n                                   &connection->socket_context,\n                                   MHD_CONNECTION_NOTIFY_CLOSED);\n      MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n      if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n      {\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      }\n      DLL_remove (daemon->connections_head,\n                  daemon->connections_tail,\n                  connection);\n      daemon->connections--;\n      MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n    }\n    MHD_pool_destroy (connection->pool);\n  }\n  /* Free resources allocated before the call of this functions */\n#ifdef HTTPS_SUPPORT\n  if (NULL != connection->tls_session)\n    gnutls_deinit (connection->tls_session);\n#endif /* HTTPS_SUPPORT */\n  MHD_ip_limit_del (daemon,\n                    connection->addr,\n                    connection->addr_len);\n  if (NULL != connection->addr)\n    free (connection->addr);\n  MHD_socket_close_chk_ (connection->socket_fd);\n  free (connection);\n\n  /* Log failure exit and errno value */\n  if (0 != eno)\n  {\n    char buf[128];\n    (void) snprintf (buf, sizeof (buf), \"exit_new_connection_process failure errno=%d\", eno);\n    probe_log_time_and_msg (buf);\n    errno = eno;\n  }\n#ifdef EINVAL\n  else\n    errno = EINVAL;\n#endif /* EINVAL */\n\n  probe_log_time_and_msg (\"exit_new_connection_process returning MHD_NO\");\n  return MHD_NO;  /* *** Function failure exit point *** */\n}\n"
}