{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a username pointer that is NULL or that points to a character array not terminated by a '\\0' within its allocated bounds, the call to strlen(username) may read beyond the object\u2019s bounds (scanning until a NUL is found) and thus violates Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2469.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "static void MHD_digest_probe_log(const char *stage,\n                                     const char *username,\n                                     const char *realm,\n                                     void *userdigest_bin,\n                                     size_t bin_buf_size)\n{\n  /* Append-only log so repeated runs accumulate evidence. Keep logging minimal\n     to avoid introducing extra memory reads/deferences that could create new\n     violations. We only log pointer values and sizes (no dereference of the\n     char pointers). */\n  FILE *f = fopen(\"/tmp/logs/2469.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"[MHD_DIGEST_PROBE] stage=%s username=%p realm=%p userdigest_bin=%p bin_buf_size=%zu\\n\",\n          stage,\n          (const void *)username,\n          (const void *)realm,\n          userdigest_bin,\n          bin_buf_size);\n\n  if (username == NULL)\n    fprintf(f, \"[MHD_DIGEST_PROBE] username == NULL (will call strlen(username) in original code)\\n\");\n  else\n    fprintf(f, \"[MHD_DIGEST_PROBE] username != NULL (pointer logged, not dereferenced)\\n\");\n\n  if (realm == NULL)\n    fprintf(f, \"[MHD_DIGEST_PROBE] realm == NULL (will call strlen(realm) in original code)\\n\");\n  else\n    fprintf(f, \"[MHD_DIGEST_PROBE] realm != NULL (pointer logged, not dereferenced)\\n\");\n\n  fflush(f);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Log entry with pointers and buffer size. This captures the control path\n     and state just before any potentially unsafe string operations. */\n  MHD_digest_probe_log(\"entry\", username, realm, userdigest_bin, bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3))) {\n    MHD_digest_probe_log(\"digest_init_one_time_failed\", username, realm, userdigest_bin, bin_buf_size);\n    return MHD_NO;\n  }\n\n  if (digest_get_size (&da) > bin_buf_size) {\n    MHD_digest_probe_log(\"insufficient_bin_buf_size\", username, realm, userdigest_bin, bin_buf_size);\n    ret = MHD_NO;\n  }\n  else\n  {\n    /* Log that we're about to perform strlen on username and realm. We\n       intentionally do not change the original control flow: the strlen\n       calls below remain as in the original implementation so that the\n       same potential violation can be reproduced. */\n    MHD_digest_probe_log(\"about_to_strlen_and_calc_userdigest\", username, realm, userdigest_bin, bin_buf_size);\n\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n    /* Log outcome after calc_userdigest (note: if strlen caused undefined\n       behaviour, program may not reach this point; presence/absence of this\n       log entry is useful evidence). */\n    MHD_digest_probe_log(\"after_calc_userdigest\", username, realm, userdigest_bin, bin_buf_size);\n  }\n  digest_deinit (&da);\n\n  MHD_digest_probe_log(\"exit\", username, realm, userdigest_bin, bin_buf_size);\n\n  return ret;\n}"
}