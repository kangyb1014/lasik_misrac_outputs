{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(username) and strlen(realm) without checking the pointers can read out-of-bounds. For example, if the caller passes username == NULL (or realm == NULL) the strlen call dereferences a NULL pointer; or if the provided buffers are not NUL-terminated within their allocated bounds, strlen will scan past the object. This can result in accesses beyond the bounds of the objects referenced by the pointer parameters, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2469.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append a single log entry to /tmp/logs/2469.txt.\n   We only log pointer values and sizes (not string contents) to avoid\n   introducing additional reads of the pointed-to objects. */\nstatic void mhd_log_probe(const char *tag,\n                          const void *username_ptr,\n                          const void *realm_ptr,\n                          const void *password_ptr,\n                          size_t bin_buf_size,\n                          size_t username_len,\n                          size_t realm_len,\n                          size_t digest_size,\n                          int algo3)\n{\n  FILE *f = fopen(\"/tmp/logs/2469.txt\", \"a\");\n  if (!f)\n    return;\n\n  /* Log a simple record: tag, pointers, lengths (if known), sizes and algo. */\n  fprintf(f, \"[%s] algo=%d username=%p realm=%p password=%p bin_buf_size=%zu digest_size=%zu username_len=%zu realm_len=%zu\\n\",\n          tag, algo3, username_ptr, realm_ptr, password_ptr, bin_buf_size,\n          digest_size, username_len, realm_len);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Log entry with pointer values; lengths unknown yet (use (size_t)-1). */\n  mhd_log_probe(\"entry\", (const void *)username, (const void *)realm,\n                (const void *)password, bin_buf_size, (size_t)-1, (size_t)-1,\n                (size_t)-1, (int)algo3);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    mhd_log_probe(\"init_failed\", (const void *)username, (const void *)realm,\n                  (const void *)password, bin_buf_size, (size_t)-1, (size_t)-1,\n                  (size_t)-1, (int)algo3);\n    return MHD_NO;\n  }\n\n  /* Query digest size and log it. */\n  {\n    size_t dsize = digest_get_size(&da);\n    mhd_log_probe(\"after_init\",\n                  (const void *)username, (const void *)realm,\n                  (const void *)password, bin_buf_size, (size_t)-1, (size_t)-1,\n                  dsize, (int)algo3);\n\n    if (dsize > bin_buf_size)\n      ret = MHD_NO;\n    else\n    {\n      /* Log that we are about to call strlen on the pointers. We do not\n         log the string contents to avoid additional reads; we do log the\n         pointer values, then perform the same strlen calls present in the\n         original code to capture their results (this preserves original\n         behavior while providing probe evidence). */\n      mhd_log_probe(\"before_strlen\", (const void *)username, (const void *)realm,\n                    (const void *)password, bin_buf_size, (size_t)-1, (size_t)-1,\n                    dsize, (int)algo3);\n\n      /* The following strlen calls are identical in effect to the original\n         code's calls and are intentionally not guarded here so that the\n         same violation scenario (NULL or non-NUL-terminated buffers) can be\n         reproduced and captured in the logs. */\n      size_t username_len = strlen(username);\n      size_t realm_len = strlen(realm);\n\n      /* Log the lengths obtained by strlen. If username or realm were NULL\n         or not NUL-terminated inside their bounds, the program may have\n         crashed before reaching this log, which itself is evidence of the\n         violation. */\n      mhd_log_probe(\"strlen_results\", (const void *)username, (const void *)realm,\n                    (const void *)password, bin_buf_size, username_len, realm_len,\n                    dsize, (int)algo3);\n\n      calc_userdigest (&da,\n                       username,\n                       username_len,\n                       realm,\n                       realm_len,\n                       password,\n                       userdigest_bin);\n\n      mhd_log_probe(\"after_calc_userdigest\", (const void *)username,\n                    (const void *)realm, (const void *)password, bin_buf_size,\n                    username_len, realm_len, dsize, (int)algo3);\n\n      ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n      if (digest_ext_error (&da))\n        ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    }\n  }\n\n  digest_deinit (&da);\n\n  mhd_log_probe(\"exit\", (const void *)username, (const void *)realm,\n                (const void *)password, bin_buf_size, (size_t)-1, (size_t)-1,\n                (size_t)-1, (int)algo3);\n\n  return ret;\n}\n"
}