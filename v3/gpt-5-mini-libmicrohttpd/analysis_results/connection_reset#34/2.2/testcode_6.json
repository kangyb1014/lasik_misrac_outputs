{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the non-reuse branch, after calling MHD_connection_close_(c, ...), the comment indicates the function will destroy the response, notify the client, destroy the memory pool and set the connection state to CLOSED. If MHD_connection_close_ already releases or invalidates the read buffer (or no code accesses the connection fields after the connection is closed), then the subsequent assignment c->read_buffer = NULL; is redundant: removing it would not affect program behaviour. In that situation the assignment is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/342.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_reset:\n```c\nstatic void\nconnection_reset (struct MHD_Connection *connection,\n                  bool reuse)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Daemon *const d = connection->daemon;\n\n  if (! reuse)\n  {\n    /* Next function will destroy response, notify client,\n     * destroy memory pool, and set connection state to \"CLOSED\" */\n    MHD_connection_close_ (c,\n                           c->stop_with_error ?\n                           MHD_REQUEST_TERMINATED_WITH_ERROR :\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n    c->read_buffer_offset = 0;\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n  }\n  else\n  {\n    /* Reset connection to process the next request */\n    size_t new_read_buf_size;\n    mhd_assert (! c->stop_with_error);\n    mhd_assert (! c->discard_request);\n\n    if ( (NULL != d->notify_completed) &&\n         (c->rq.client_aware) )\n      d->notify_completed (d->notify_completed_cls,\n                           c,\n                           &c->rq.client_context,\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->rq.client_aware = false;\n\n    if (NULL != c->rp.response)\n      MHD_destroy_response (c->rp.response);\n    c->rp.response = NULL;\n\n    c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n    c->state = MHD_CONNECTION_INIT;\n    c->event_loop_info =\n      (0 == c->read_buffer_offset) ?\n      MHD_EVENT_LOOP_INFO_READ : MHD_EVENT_LOOP_INFO_PROCESS;\n\n    memset (&c->rq, 0, sizeof(c->rq));\n\n    /* iov (if any) will be deallocated by MHD_pool_reset */\n    memset (&c->rp, 0, sizeof(c->rp));\n\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n    c->continue_message_write_offset = 0;\n\n    /* Reset the read buffer to the starting size,\n       preserving the bytes we have already read. */\n    new_read_buf_size = c->daemon->pool_size / 2;\n    if (c->read_buffer_offset > new_read_buf_size)\n      new_read_buf_size = c->read_buffer_offset;\n\n    c->read_buffer\n      = MHD_pool_reset (c->pool,\n                        c->read_buffer,\n                        c->read_buffer_offset,\n                        new_read_buf_size);\n    c->read_buffer_size = new_read_buf_size;\n  }\n  c->rq.client_context = NULL;\n}\n```\n</target_code>\nPlease provide the modified connection_reset code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe helpers: keep them small and side-effect free. */\nstatic void\nlog_probe_simple(const char *note, void *p, size_t sz1, size_t sz2)\n{\n    FILE *f = fopen(\"/tmp/logs/342.txt\", \"a\");\n    if (NULL == f)\n        return;\n    /* print a concise snapshot: note, pointer value and two sizes/offsets */\n    fprintf(f, \"%s: ptr=%p, s1=%zu, s2=%zu\\n\", note, p, sz1, sz2);\n    fclose(f);\n}\n\nstatic void\nlog_probe_full(const char *stage, const struct MHD_Connection *c)\n{\n    FILE *f = fopen(\"/tmp/logs/342.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    /* Log control point and a selection of connection fields.\n       We intentionally only print pointer values and integer fields to\n       avoid dereferencing possibly invalid memory. */\n    fprintf(f, \"connection_reset %s: c=%p, daemon=%p, read_buffer=%p, read_buffer_size=%zu, read_buffer_offset=%zu, write_buffer=%p, write_buffer_size=%zu, write_send_off=%zu, write_append_off=%zu, state=%d, keepalive=%d, stop_with_error=%d, discard_request=%d\\n\",\n            stage,\n            (const void *)c,\n            (const void *)((c) ? c->daemon : NULL),\n            (const void *)((c) ? c->read_buffer : NULL),\n            (size_t)((c) ? c->read_buffer_size : 0),\n            (size_t)((c) ? c->read_buffer_offset : 0),\n            (const void *)((c) ? c->write_buffer : NULL),\n            (size_t)((c) ? c->write_buffer_size : 0),\n            (size_t)((c) ? c->write_buffer_send_offset : 0),\n            (size_t)((c) ? c->write_buffer_append_offset : 0),\n            (int)((c) ? c->state : -1),\n            (int)((c) ? c->keepalive : -1),\n            (int)((c) ? c->stop_with_error : 0),\n            (int)((c) ? c->discard_request : 0)\n            );\n    fclose(f);\n}\n\n/* The original function with probes inserted. */\nstatic void\nconnection_reset (struct MHD_Connection *connection,\n                  bool reuse)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Daemon *const d = connection->daemon;\n\n  /* Log entry and basic state */\n  log_probe_full(\"entry\", c);\n\n  if (! reuse)\n  {\n    /* Log state immediately before calling close */\n    log_probe_full(\"before_close\", c);\n\n    /* Next function will destroy response, notify client,\n     * destroy memory pool, and set connection state to \"CLOSED\" */\n    MHD_connection_close_ (c,\n                           c->stop_with_error ?\n                           MHD_REQUEST_TERMINATED_WITH_ERROR :\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n\n    /* Log state immediately after calling close to capture whether\n       read_buffer or other fields were changed/cleared by close. */\n    log_probe_full(\"after_close\", c);\n\n    c->read_buffer = NULL;\n    /* Probe after we explicitly set read_buffer to NULL */\n    log_probe_simple(\"explicit_read_buffer_cleared\", (void *)c->read_buffer, c->read_buffer_size, c->read_buffer_offset);\n\n    c->read_buffer_size = 0;\n    c->read_buffer_offset = 0;\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n\n    /* Final probe for non-reuse branch */\n    log_probe_full(\"non_reuse_final\", c);\n  }\n  else\n  {\n    /* Reset connection to process the next request */\n    size_t new_read_buf_size;\n    mhd_assert (! c->stop_with_error);\n    mhd_assert (! c->discard_request);\n\n    if ( (NULL != d->notify_completed) &&\n         (c->rq.client_aware) )\n      d->notify_completed (d->notify_completed_cls,\n                           c,\n                           &c->rq.client_context,\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->rq.client_aware = false;\n\n    if (NULL != c->rp.response)\n      MHD_destroy_response (c->rp.response);\n    c->rp.response = NULL;\n\n    c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n    c->state = MHD_CONNECTION_INIT;\n    c->event_loop_info =\n      (0 == c->read_buffer_offset) ?\n      MHD_EVENT_LOOP_INFO_READ : MHD_EVENT_LOOP_INFO_PROCESS;\n\n    memset (&c->rq, 0, sizeof(c->rq));\n\n    /* iov (if any) will be deallocated by MHD_pool_reset */\n    memset (&c->rp, 0, sizeof(c->rp));\n\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n    c->continue_message_write_offset = 0;\n\n    /* Reset the read buffer to the starting size,\n       preserving the bytes we have already read. */\n    new_read_buf_size = c->daemon->pool_size / 2;\n    if (c->read_buffer_offset > new_read_buf_size)\n      new_read_buf_size = c->read_buffer_offset;\n\n    /* Probe before pool reset to capture pointer and offsets */\n    log_probe_full(\"before_pool_reset\", c);\n\n    c->read_buffer\n      = MHD_pool_reset (c->pool,\n                        c->read_buffer,\n                        c->read_buffer_offset,\n                        new_read_buf_size);\n    c->read_buffer_size = new_read_buf_size;\n\n    /* Probe after pool reset */\n    log_probe_full(\"after_pool_reset\", c);\n  }\n  c->rq.client_context = NULL;\n\n  /* Final probe on function exit */\n  log_probe_full(\"exit\", c);\n}\n"
}