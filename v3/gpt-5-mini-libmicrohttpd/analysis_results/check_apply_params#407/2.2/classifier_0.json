{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_apply_params:\n```c\nstatic int\ncheck_apply_params (void)\n{\n  if (tool_params.help)\n  {\n    show_help ();\n    return -1;\n  }\n  else if (tool_params.version)\n  {\n    print_version ();\n    return -1;\n  }\n  check_param_port ();\n  check_apply_param__all_cpus ();\n  check_apply_param__threads ();\n  if (! check_apply_param__thread_per_conn ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__epoll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__poll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  check_param__empty_tiny_medium_large ();\n  check_param__shared_single_unique ();\n  if (! check_param__connections ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  return 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ncheck_param__shared_single_unique ();\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The call check_param__shared_single_unique(); appears to be an executed operation whose result is ignored. If that function has no observable side-effects (for example if it returns a boolean/int and merely checks something without modifying state or producing I/O), then removing this call would not affect program behaviour \u2014 hence it is dead code and violates MISRA C 2023 Rule 2.2. (If, conversely, the function is void and performs necessary side-effects such as logging, state updates, or hardware access, then the call is not dead and no violation occurs.)"
}