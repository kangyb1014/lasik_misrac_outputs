{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'con' is declared as a non-const pointer (struct MHD_Connection *con) but is not used or modified (it is cast to void). According to MISRA C:2023 Rule 8.13, it should be declared to point to a const-qualified type (const struct MHD_Connection *con) whenever possible. This is a violation unless the function signature must match an external API/callback type that requires a non-const pointer, in which case the non-const declaration is unavoidable.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. Rule 8.13 requires pointers to be const-qualified when possible. In this function the parameter con is neither used nor modified (it is explicitly cast to void), so it could be declared as pointing to const (or removed). The function is static (internal linkage), so there is no apparent need to keep the non-const signature to match an external API. Therefore, unless there is an external constraint not shown (for example the function must match a non-const callback prototype), this is a violation of MISRA C:2023 Rule 8.13. Recommendation: change the parameter to const struct MHD_Connection *con (or drop it) or provide a documented justification if the non-const type is required by an external API."
}