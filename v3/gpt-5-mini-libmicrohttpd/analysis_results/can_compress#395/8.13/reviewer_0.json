{
  "user_message": "An agent A claimed that the following can_compress code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of can_compress.\n```c\nstatic enum MHD_Result\ncan_compress (struct MHD_Connection *con)\n{\n  const char *ae;\n  const char *de;\n\n  ae = MHD_lookup_connection_value (con,\n                                    MHD_HEADER_KIND,\n                                    MHD_HTTP_HEADER_ACCEPT_ENCODING);\n  if (NULL == ae)\n    return MHD_NO;\n  if (0 == strcmp (ae,\n                   \"*\"))\n    return MHD_YES;\n  de = strstr (ae,\n               \"deflate\");\n  if (NULL == de)\n    return MHD_NO;\n  if (((de == ae) ||\n       (de[-1] == ',') ||\n       (de[-1] == ' ')) &&\n      ((de[strlen (\"deflate\")] == '\\0') ||\n       (de[strlen (\"deflate\")] == ',') ||\n       (de[strlen (\"deflate\")] == ';')))\n    return MHD_YES;\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'con' is declared as 'struct MHD_Connection *con' but in the function body it is only used for read-only access (passed to MHD_lookup_connection_value and never modified). Per MISRA C 2023 Rule 8.13 this pointer should be const-qualified (e.g. 'const struct MHD_Connection *con'). This is a violation unless the called API (MHD_lookup_connection_value) requires a non-const pointer and cannot be changed.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct in the usual case. MISRA C 2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible. In the can_compress function the parameter con is declared as struct MHD_Connection *con but is only used for read-only access (passed to MHD_lookup_connection_value and never modified). Therefore, con should be declared as const struct MHD_Connection *con unless doing so is impossible because of external constraints.\n\nCaveat: If can_compress must match a required non-const function pointer type (e.g. it is an override/callback with a fixed signature), or if the called API (MHD_lookup_connection_value) is declared to take a non-const struct MHD_Connection * and cannot be changed, then making con const may not be possible and the current code would be an acceptable exception. In that case the deviation should be documented.\n\nRemediation: Prefer changing the signature to\n  static enum MHD_Result can_compress (const struct MHD_Connection *con)\nand, if possible, update MHD_lookup_connection_value to accept a const pointer. If the external API prevents that, keep the current signature but document the deviation or use an explicit cast at the call site with justification."
}