{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_timeout_millisec_int:\n```c\nstatic int\nget_timeout_millisec_int (struct MHD_Daemon *daemon,\n                          int32_t max_timeout)\n{\n  int64_t res;\n\n  res = get_timeout_millisec_ (daemon, max_timeout);\n#if SIZEOF_INT < SIZEOF_INT64_T\n  if (INT_MAX <= res)\n    return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n  return (int) res;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n  res = get_timeout_millisec_ (daemon, max_timeout);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation can be established from the single call expression alone. The code fragment only shows passing 'daemon' to get_timeout_millisec_ but not the callee\u2019s prototype or whether the object is modified. If get_timeout_millisec_ is declared to take 'const struct MHD_Daemon *' (or otherwise does not modify *daemon), then Rule 8.13 is satisfied. A concrete violation would occur if the prototype is 'int64_t get_timeout_millisec_(struct MHD_Daemon *daemon, int32_t max_timeout)' and the function does not modify the pointed object \u2014 in that case the parameter should be 'const struct MHD_Daemon *' and Rule 8.13 would be violated."
}