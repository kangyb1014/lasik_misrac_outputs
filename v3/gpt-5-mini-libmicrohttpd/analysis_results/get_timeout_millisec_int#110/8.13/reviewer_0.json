{
  "user_message": "An agent A claimed that the following get_timeout_millisec_int code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_timeout_millisec_int.\n```c\nstatic int\nget_timeout_millisec_int (struct MHD_Daemon *daemon,\n                          int32_t max_timeout)\n{\n  int64_t res;\n\n  res = get_timeout_millisec_ (daemon, max_timeout);\n#if SIZEOF_INT < SIZEOF_INT64_T\n  if (INT_MAX <= res)\n    return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n  return (int) res;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'daemon' is declared as a non-const pointer (struct MHD_Daemon *daemon) although the function body only reads it and simply forwards it to get_timeout_millisec_. If get_timeout_millisec_int does not modify the pointed-to object (and the callee either accepts a const pointer or also does not modify it), the parameter should be declared as const struct MHD_Daemon *daemon to comply with MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not demonstrably correct. MISRA C 2023 Rule 8.13 says a pointer should point to a const-qualified type whenever possible, but whether it is \u201cpossible\u201d here depends on facts not present in the snippet: (a) whether get_timeout_millisec_ (the callee) accepts a pointer-to-const or modifies the object, and (b) whether the pointed-to object is ever modified. The presented function is static and merely forwards the parameter; if the callee requires a non-const pointer (i.e. its prototype is struct MHD_Daemon *), then declaring the parameter const would be incompatible (you would need a cast to call the callee) and so the non-const declaration would be justified. Conversely, if the callee accepts a const pointer and neither function modifies the object, then changing the parameter to const would satisfy 8.13 \u2014 but that is a different critique and requires knowledge of the callee prototype. Because the necessary information about get_timeout_millisec_ and whether the object is modified is missing, you cannot conclude a MISRA 8.13 violation from the shown code alone."
}