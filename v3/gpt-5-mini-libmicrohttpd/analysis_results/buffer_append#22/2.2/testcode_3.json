{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mhd_assert macro expands to a no\u2011op in the build (for example to ((void)0) or is compiled out), the statement is executed but has no effect and its removal would not change program behaviour \u2014 this makes it dead code and therefore violates MISRA C 2023 Rule 2.2. (If, however, mhd_assert expands to an expression with observable side effects such as logging/abort on failure, then removal would change behaviour and it would not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified buffer_append code that contains useful probe functions that print useful logs to a file \"/tmp/logs/222.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of buffer_append as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of buffer_append:\n```c\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n  if (buf_size < *ppos + append_size)\n    return false;\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified buffer_append code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe logging utility \u2014 appends one-line entries to /tmp/logs/222.txt */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/222.txt\", \"a\");\n  if (f == NULL)\n  {\n    return; /* avoid introducing new failure modes */\n  }\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n\n  fclose (f);\n}\n\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  /* Log entry and input state before the assertion so callers can see\n     whether the assertion would have been triggered and what the\n     subsequent control flow/state is when mhd_assert is a no-op. */\n  probe_log (\n    \"buffer_append: entry buf=%p, ppos=%p, *ppos=%zu, buf_size=%zu, append=%p, append_size=%zu\",\n    (void *)buf, (void *)ppos, *ppos, buf_size, (void *)append, append_size);\n\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n\n  /* Log immediately after the assertion. If mhd_assert causes abort or\n     other observable side effects, this log will not be reached; if the\n     assertion is a no-op, this log documents that execution continued. */\n  probe_log (\"buffer_append: after mhd_assert buf=%p, ppos=%p, *ppos=%zu\",\n             (void *)buf, (void *)ppos, *ppos);\n\n  if (buf_size < *ppos + append_size)\n  {\n    probe_log (\"buffer_append: insufficient space: buf_size=%zu < *ppos + append_size=%zu\",\n               buf_size, *ppos + append_size);\n    return false;\n  }\n\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n\n  probe_log (\"buffer_append: success new *ppos=%zu\", *ppos);\n  return true;\n}\n"
}