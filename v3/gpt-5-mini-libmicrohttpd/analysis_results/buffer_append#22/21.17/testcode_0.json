{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The expression '*ppos + append_size' can overflow size_t and wrap around, causing the bounds check to pass incorrectly and memcpy to write beyond buf. Example: buf_size = 100, *ppos = SIZE_MAX - 10, append_size = 20 -> *ppos + append_size wraps to 9, so (buf_size < 9) is false and memcpy(buf + *ppos, append, append_size) writes past the buffer, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified buffer_append code that contains useful probe functions that print useful logs to a file \"/tmp/logs/229.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of buffer_append as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of buffer_append:\n```c\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n  if (buf_size < *ppos + append_size)\n    return false;\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified buffer_append code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logger: appends state information to /tmp/logs/229.txt */\nstatic void\nbuffer_append_log_probe(const char *stage,\n                        size_t ppos,\n                        size_t append_size,\n                        size_t buf_size,\n                        size_t sum_mod,\n                        int overflow)\n{\n  FILE *f = fopen(\"/tmp/logs/229.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Log stage and key values. sum_mod is the result of (ppos + append_size) in size_t arithmetic */\n  fprintf(f, \"%s: ppos=%zu append_size=%zu buf_size=%zu sum_mod=%zu overflow=%d\\n\",\n          stage, ppos, append_size, buf_size, sum_mod, overflow);\n  fclose(f);\n}\n\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n\n  /* Compute the addition once (wraps according to size_t semantics, as in the original code). */\n  size_t sum = *ppos + append_size;\n  int did_overflow = (sum < *ppos) ? 1 : 0;\n\n  /* Log entry state before the bounds check. This will capture wrapping behavior. */\n  buffer_append_log_probe(\"enter\", *ppos, append_size, buf_size, sum, did_overflow);\n\n  if (buf_size < sum)\n  {\n    buffer_append_log_probe(\"check_failed\", *ppos, append_size, buf_size, sum, did_overflow);\n    return false;\n  }\n\n  /* Log just before performing the memcpy so the exact parameters are recorded. */\n  buffer_append_log_probe(\"before_memcpy\", *ppos, append_size, buf_size, sum, did_overflow);\n\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n\n  /* Log after successful append to record final position. */\n  buffer_append_log_probe(\"after_append\", *ppos, append_size, buf_size, sum, did_overflow);\n  return true;\n}\n"
}