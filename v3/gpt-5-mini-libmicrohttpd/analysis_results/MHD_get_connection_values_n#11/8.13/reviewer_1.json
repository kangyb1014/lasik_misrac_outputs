{
  "user_message": "An agent A claimed that the following MHD_get_connection_values_n code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values_n.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n\n  if (NULL == iterator)\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  else\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n          return ret;\n      }\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe loop iterator 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos' but is only used for read access inside the loop (pos->kind, pos->header, pos->header_size, pos->value, pos->value_size). Therefore it could be declared as 'const struct MHD_HTTP_Req_Header *pos' so the pointer would point to a const-qualified type. (Only if other code or the iterator callback requires modifying the pointed-to data would const-qualification be impossible.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_get_connection_values_n: enter; connection=0x558e97237270, kind=1, iterator=0x558e5df2f550, iterator_cls=0x7ffc81a23600\nMHD_get_connection_values_n: iterator provided -> callback mode\niter cb: pos=0x558e9723f480, pos->kind=1, header=0x558e972374d1, header_size=4, value=0x558e972374d7, value_size=9\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e972374d1, header_size=4, value=0x558e972374d7, value_size=9\nMHD_get_connection_values_n: iterator returned 1\niter cb: pos=0x558e9723f440, pos->kind=1, header=0x558e972374e2, header_size=10, value=0x558e972374ee, value_size=15\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e972374e2, header_size=10, value=0x558e972374ee, value_size=15\nMHD_get_connection_values_n: iterator returned 1\niter cb: pos=0x558e9723f400, pos->kind=1, header=0x558e972374ff, header_size=14, value=0x558e9723750f, value_size=2\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e972374ff, header_size=14, value=0x558e9723750f, value_size=2\nMHD_get_connection_values_n: iterator returned 1\niter cb: pos=0x558e9723f3c0, pos->kind=1, header=0x558e97237513, header_size=12, value=0x558e97237521, value_size=10\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e97237513, header_size=12, value=0x558e97237521, value_size=10\nMHD_get_connection_values_n: iterator returned 1\nMHD_get_connection_values_n: exit -> returning 4\nMHD_get_connection_values_n: enter; connection=0x558e97237270, kind=1, iterator=0x558e5df2f550, iterator_cls=0x7ffc81a23600\nMHD_get_connection_values_n: iterator provided -> callback mode\niter cb: pos=0x558e9723f480, pos->kind=1, header=0x558e972374d1, header_size=4, value=0x558e972374d7, value_size=9\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e972374d1, header_size=4, value=0x558e972374d7, value_size=9\nMHD_get_connection_values_n: iterator returned 1\niter cb: pos=0x558e9723f440, pos->kind=1, header=0x558e972374e2, header_size=10, value=0x558e972374ee, value_size=15\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e972374e2, header_size=10, value=0x558e972374ee, value_size=15\nMHD_get_connection_values_n: iterator returned 1\niter cb: pos=0x558e9723f400, pos->kind=1, header=0x558e972374ff, header_size=14, value=0x558e9723750f, value_size=2\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e972374ff, header_size=14, value=0x558e9723750f, value_size=2\nMHD_get_connection_values_n: iterator returned 1\niter cb: pos=0x558e9723f3c0, pos->kind=1, header=0x558e97237513, header_size=12, value=0x558e97237521, value_size=10\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e97237513, header_size=12, value=0x558e97237521, value_size=10\nMHD_get_connection_values_n: iterator returned 1\nMHD_get_connection_values_n: exit -> returning 4\nMHD_get_connection_values_n: enter; connection=0x558e97237270, kind=1, iterator=0x558e5df2f550, iterator_cls=0x7ffc81a23600\nMHD_get_connection_values_n: iterator provided -> callback mode\niter cb: pos=0x558e9723f480, pos->kind=1, header=0x558e972374d1, header_size=4, value=0x558e972374d7, value_size=9\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e972374d1, header_size=4, value=0x558e972374d7, value_size=9\nMHD_get_connection_values_n: iterator returned 1\niter cb: pos=0x558e9723f440, pos->kind=1, header=0x558e972374e2, header_size=10, value=0x558e972374ee, value_size=15\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e972374e2, header_size=10, value=0x558e972374ee, value_size=15\nMHD_get_connection_values_n: iterator returned 1\niter cb: pos=0x558e9723f400, pos->kind=1, header=0x558e972374ff, header_size=14, value=0x558e9723750f, value_size=2\nMHD_get_connection_values_n: invoking iterator with kind=1, header=0x558e972374ff, header_size=14, value=0x558e9723750f, value_size=2\nMHD_get_connection_values_n: iterator returned 1\niter cb: pos=0x558e9723f3c0, pos->kind=1, header=0x558e97237513, header_size=12, value=0x558e97237521, value_size=10\nMHD_get_connection_value\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In MHD_get_connection_values_n the local loop variable pos is only used to read fields (pos->kind, pos->header, pos->header_size, pos->value, pos->value_size) and to follow the next link (pos = pos->next). There is no write-through-pos to modify the pointed-to MHD_HTTP_Req_Header object. Declaring pos as pointer-to-const (const struct MHD_HTTP_Req_Header *pos) is therefore appropriate and satisfies MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible). Assigning the non-const headers_received and pos->next (both likely struct MHD_HTTP_Req_Header *) into a const-qualified pointer is allowed, and the members accessed remain usable for read-only operations and for passing their addresses/values to the iterator. The only reason this change would not be possible is if code outside this function (or the iterator callback) relied on modifying the struct via this particular pointer type; nothing in the shown function prevents making pos point to a const-qualified type."
}