{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'pos' is only used to read fields of the linked list (pos->kind, pos->header, pos->header_size, pos->value, pos->value_size) and is never used to modify the pointed-to MHD_HTTP_Req_Header object. Therefore it should be declared to point to a const-qualified type, e.g. 'const struct MHD_HTTP_Req_Header *pos;'. Declaring it as a non-const pointer ('struct MHD_HTTP_Req_Header *pos;') violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values_n:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n\n  if (NULL == iterator)\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  else\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n          return ret;\n      }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/113.txt.\n   Keeps original logic unchanged; does not modify any program state. */\nstatic void mhd_log_probe(const char *stage,\n                          struct MHD_Connection *connection,\n                          struct MHD_HTTP_Req_Header *pos,\n                          enum MHD_ValueKind kind,\n                          int ret,\n                          MHD_KeyValueIteratorN iterator,\n                          void *iterator_cls)\n{\n  FILE *f = fopen(\"/tmp/logs/113.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[%s] connection=%p kind=%u ret=%d iterator=%p iterator_cls=%p pos=%p\\n\",\n          (stage != NULL) ? stage : \"\",\n          (void *)connection,\n          (unsigned) kind,\n          ret,\n          (void *) (uintptr_t) iterator,\n          iterator_cls,\n          (void *) pos);\n\n  if (NULL != pos)\n  {\n    /* Print structural fields observed on the node. Use casts to unsigned long\n       for sizes so formatting is robust regardless of the exact typedefs. */\n    fprintf(f, \"  pos->kind=%u header=%p header_size=%lu value=%p value_size=%lu\\n\",\n            (unsigned) pos->kind,\n            (void *) pos->header,\n            (unsigned long) pos->header_size,\n            (void *) pos->value,\n            (unsigned long) pos->value_size);\n\n    /* Dump up to 16 bytes of header and value as hex (if present) to aid\n       reproduction without assuming NUL-termination. */\n    if (NULL != pos->header && 0u != pos->header_size)\n    {\n      const unsigned char *hb = (const unsigned char *) pos->header;\n      unsigned long n = pos->header_size < 16u ? (unsigned long) pos->header_size : 16u;\n      fprintf(f, \"  header_bytes=\");\n      for (unsigned long i = 0u; i < n; ++i)\n        fprintf(f, \"%02x\", (unsigned) hb[i]);\n      fprintf(f, \"\\n\");\n    }\n\n    if (NULL != pos->value && 0u != pos->value_size)\n    {\n      const unsigned char *vb = (const unsigned char *) pos->value;\n      unsigned long n = pos->value_size < 16u ? (unsigned long) pos->value_size : 16u;\n      fprintf(f, \"  value_bytes=\");\n      for (unsigned long i = 0u; i < n; ++i)\n        fprintf(f, \"%02x\", (unsigned) vb[i]);\n      fprintf(f, \"\\n\");\n    }\n  }\n\n  fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  /* Log entry and parameters */\n  mhd_log_probe(\"entry\", connection, NULL, kind, -1, iterator, iterator_cls);\n\n  if (NULL == connection)\n  {\n    mhd_log_probe(\"null_connection_return\", connection, NULL, kind, -1, iterator, iterator_cls);\n    return -1;\n  }\n\n  ret = 0;\n\n  if (NULL == iterator)\n  {\n    mhd_log_probe(\"count_only_start\", connection, NULL, kind, ret, iterator, iterator_cls);\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      /* Log each node visited in the traversal */\n      mhd_log_probe(\"count_only_iter\", connection, pos, kind, ret, iterator, iterator_cls);\n\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  }\n  else\n  {\n    mhd_log_probe(\"iterate_start\", connection, NULL, kind, ret, iterator, iterator_cls);\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      /* Log each node visited in the traversal */\n      mhd_log_probe(\"iterate_iter\", connection, pos, kind, ret, iterator, iterator_cls);\n\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        mhd_log_probe(\"call_iterator_before\", connection, pos, kind, ret, iterator, iterator_cls);\n\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n        {\n          mhd_log_probe(\"iterator_signalled_stop\", connection, pos, kind, ret, iterator, iterator_cls);\n          return ret;\n        }\n\n        mhd_log_probe(\"call_iterator_after\", connection, pos, kind, ret, iterator, iterator_cls);\n      }\n    }\n  }\n\n  mhd_log_probe(\"exit\", connection, NULL, kind, ret, iterator, iterator_cls);\n  return ret;\n}\n"
}