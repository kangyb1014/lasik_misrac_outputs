{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'struct MHD_Connection *connection' is only read (the function traverses connection->rq.headers_received and reads fields) and is not modified, so it should be declared as 'const struct MHD_Connection *connection'. This violates MISRA C 2023 Rule 8.13. Additionally, 'void *iterator_cls' could also be const-qualified (and the iterator type adjusted accordingly) if the iterator does not modify the context object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values_n:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n\n  if (NULL == iterator)\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  else\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n          return ret;\n      }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\n/* Probe helpers to write reproducible logs to /tmp/logs/113.txt */\nstatic void MHD_log_fmt(const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  /* Ensure directory exists (ignore error if it already exists) */\n  (void)mkdir(\"/tmp/logs\", 0755);\n\n  f = fopen(\"/tmp/logs/113.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n\n  va_start(ap, fmt);\n  (void)vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  (void)fclose(f);\n}\n\nstatic void MHD_log_connection_snapshot(const struct MHD_Connection *connection,\n                                        enum MHD_ValueKind kind,\n                                        MHD_KeyValueIteratorN iterator,\n                                        void *iterator_cls)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  MHD_log_fmt(\"ENTRY: MHD_get_connection_values_n connection=%p kind=%u iterator=%p iterator_cls=%p\\n\",\n              (void *)connection,\n              (unsigned)kind,\n              (void *)iterator,\n              iterator_cls);\n\n  if (NULL == connection)\n  {\n    MHD_log_fmt(\"  connection is NULL\\n\");\n    return;\n  }\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log structural information about each header node. Do not modify anything. */\n    MHD_log_fmt(\"  node=%p kind=%u header_size=%u value_size=%u header_ptr=%p value_ptr=%p\\n\",\n                (void *)pos,\n                (unsigned)pos->kind,\n                (unsigned)pos->header_size,\n                (unsigned)pos->value_size,\n                (void *)pos->header,\n                (void *)pos->value);\n\n    /* If printable, log a limited-length preview of header and value to avoid huge logs. */\n    if (NULL != pos->header)\n    {\n      unsigned int hsz = (unsigned int)pos->header_size;\n      unsigned int vsz = (unsigned int)pos->value_size;\n      /* limit to 200 chars for readability */\n      int hprint = (hsz > 200U) ? 200 : (int)hsz;\n      int vprint = (vsz > 200U) ? 200 : (int)vsz;\n      MHD_log_fmt(\"    header_preview=\\\"%.*s\\\" value_preview=\\\"%.*s\\\"\\n\",\n                  hprint,\n                  (char *)pos->header,\n                  vprint,\n                  (char *)pos->value);\n    }\n  }\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  /* Log entry and snapshot of connection state to help reproduce the reported violation. */\n  MHD_log_connection_snapshot(connection, kind, iterator, iterator_cls);\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n\n  if (NULL == iterator)\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        /* Log the increment for tracing control flow when iterator is NULL. */\n        MHD_log_fmt(\"  no-iterator: matched node=%p kind=%u incremented ret=%d\\n\",\n                    (void *)pos,\n                    (unsigned)pos->kind,\n                    ret);\n      }\n    }\n  else\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        MHD_log_fmt(\"  iterator-path: matched node=%p kind=%u ret=%d calling iterator...\\n\",\n                    (void *)pos,\n                    (unsigned)pos->kind,\n                    ret);\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n        {\n          MHD_log_fmt(\"  iterator returned MHD_NO at node=%p, returning ret=%d\\n\",\n                      (void *)pos,\n                      ret);\n          return ret;\n        }\n        MHD_log_fmt(\"  iterator returned continue at node=%p, ret=%d\\n\",\n                    (void *)pos,\n                    ret);\n      }\n  MHD_log_fmt(\"EXIT: MHD_get_connection_values_n returning %d\\n\", ret);\n  return ret;\n}\n"
}