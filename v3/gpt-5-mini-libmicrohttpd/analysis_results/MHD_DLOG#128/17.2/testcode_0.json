{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if daemon->custom_error_log points to MHD_DLOG (or to some function that calls MHD_DLOG). In that case MHD_DLOG calls daemon->custom_error_log which calls MHD_DLOG again \u2014 an indirect recursive call and therefore a breach of MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_DLOG code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1286.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_DLOG as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_DLOG:\n```c\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n```\n</target_code>\nPlease provide the modified MHD_DLOG code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Probe logger: append useful runtime information to /tmp/logs/1286.txt. */\nstatic void\nMHD_probe_log(const char *event, const struct MHD_Daemon *daemon, const char *format)\n{\n  FILE *f = fopen(\"/tmp/logs/1286.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  time_t t = time(NULL);\n  pid_t pid = getpid();\n\n  fprintf(f, \"[%ld] PID:%d EVENT:%s\\n\", (long)t, (int)pid, event);\n  if (daemon != NULL)\n  {\n    /* Print key state fields to help reproduce the recursion scenario */\n    fprintf(f,\n            \" daemon=%p options=0x%08x custom_error_log=%p custom_error_log_cls=%p format=%s\\n\",\n            (const void *)daemon,\n            (unsigned int)daemon->options,\n            (const void *)daemon->custom_error_log,\n            daemon->custom_error_log_cls,\n            (format != NULL) ? format : \"(null)\");\n  }\n  else\n  {\n    fprintf(f, \" daemon=NULL format=%s\\n\", (format != NULL) ? format : \"(null)\");\n  }\n  fclose(f);\n}\n\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  /* Entry probe */\n  MHD_probe_log(\"ENTRY\", daemon, format);\n\n  if (daemon == NULL)\n  {\n    MHD_probe_log(\"DAEMON_NULL_RETURN\", daemon, format);\n    return;\n  }\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n  {\n    /* Log that error logging is disabled for this daemon */\n    MHD_probe_log(\"ERROR_LOG_DISABLED_RETURN\", daemon, format);\n    return;\n  }\n\n  /* Detect if the custom_error_log points back to MHD_DLOG (potential indirect recursion).\n     Compare as the expected function pointer type for custom_error_log: void (*)(void *, const char *, va_list)\n     This cast is only for diagnostic comparison; it does not change runtime behavior. */\n  if (daemon->custom_error_log == (void (*)(void *, const char *, va_list)) MHD_DLOG)\n  {\n    MHD_probe_log(\"POTENTIAL_RECURSION_DETECTED_CUSTOM_PTR_EQUALS_MHD_DLOG\", daemon, format);\n  }\n  else\n  {\n    MHD_probe_log(\"CUSTOM_PTR_DIFFERENT_FROM_MHD_DLOG\", daemon, format);\n  }\n\n  va_start (va, format);\n\n  MHD_probe_log(\"BEFORE_CUSTOM_CALL\", daemon, format);\n\n  /* Preserve original behavior: call the custom error logger with the provided va_list. */\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n\n  MHD_probe_log(\"AFTER_CUSTOM_CALL\", daemon, format);\n  va_end (va);\n\n  MHD_probe_log(\"EXIT\", daemon, format);\n}\n"
}