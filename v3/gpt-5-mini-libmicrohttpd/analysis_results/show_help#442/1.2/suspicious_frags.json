{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of show_help:\n```c\nstatic void\nshow_help (void)\n{\n  printf (\"Usage: %s [OPTIONS] [PORT_NUMBER]\\n\", self_name);\n  printf (\"Start MHD-based web-server optimised for fast replies.\\n\");\n  printf (\"\\n\");\n  printf (\"Threads options (mutually exclusive):\\n\");\n  printf (\"  -A,     --all-cpus        use all available CPU cores (for \\n\"\n          \"                            testing with remote client)\\n\");\n  printf (\"  -t NUM, --threads=NUM     use NUM threads\\n\");\n  printf (\"  -P,     --thread-per-conn use thread-per-connection mode,\\n\"\n          \"                            the number of threads are limited only\\n\"\n          \"                            by the number of connection\\n\");\n  printf (\"\\n\");\n  printf (\"Force polling function (mutually exclusive):\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_EPOLL))\n    printf (\"  -e,     --epoll           use 'epoll' functionality\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_POLL))\n    printf (\"  -p,     --poll            use poll() function\\n\");\n  printf (\"  -s,     --select          use select() function\\n\");\n  printf (\"\\n\");\n  printf (\"Response body size options (mutually exclusive):\\n\");\n  printf (\"  -E,     --empty           empty response, 0 bytes\\n\");\n  printf (\"  -T,     --tiny            tiny response, 3 bytes (default)\\n\");\n  printf (\"  -M,     --medium          medium response, 8 KB\\n\");\n  printf (\"  -L,     --large           large response, 1 MB\\n\");\n  printf (\"\\n\");\n  printf (\"Response use options (mutually exclusive):\\n\");\n  printf (\"  -S,     --shared          pool of pre-generated shared response\\n\"\n          \"                            objects (default)\\n\");\n  printf (\"  -I,     --single          single pre-generated response object\\n\"\n          \"                            used for all requests\\n\");\n  printf (\"  -U,     --unique          response object generated for every\\n\"\n          \"                            request and used one time only\\n\");\n  printf (\"\\n\");\n  printf (\"Other options:\\n\");\n  printf (\"  -c NUM, --connections=NUM reject more than NUM client \\n\"\n          \"                            connections\\n\");\n  printf (\"  -O NUM, --timeout=NUM     set connection timeout to NUM seconds,\\n\"\n          \"                            zero means no timeout\\n\");\n  printf (\"          --date-header     use the 'Date:' header in every\\n\"\n          \"                            reply\\n\");\n  printf (\"          --help            display this help and exit\\n\");\n  printf (\"  -V,     --version         output version information and exit\\n\");\n  printf (\"\\n\");\n  printf (\"This tool is part of GNU libmicrohttpd suite.\\n\");\n  printf (\"%s\\n\", tool_copyright);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No language/compiler extensions are present in the provided code fragment. Specifically:\n- The function definition style (static void show_help(void)) is standard C.\n- The conditional expression using MHD_NO and MHD_is_feature_supported(...) is standard C; any MHD_* identifiers are library macros/functions, not language extensions in this snippet.\n- Variadic calls to printf(...) are standard C usage.\n- Adjacent string literal concatenation across lines (e.g. \"...\\n\" \"   ...\\n\") is defined by the C standard and is not a compiler extension.\n- There are no GCC/Clang-specific constructs such as __attribute__, typeof, statement expressions ({ ... }), nested functions, inline assembly, platform-specific keywords, or other documented compiler extensions.\n\nTherefore there are no code fragments that require investigation for MISRA C 2023 Rule 1.2 in the supplied function."
}