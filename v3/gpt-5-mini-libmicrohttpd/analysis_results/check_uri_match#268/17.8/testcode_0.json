{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns to the function parameter 'uri_len' via: uri_len = daemon->unescape_callback(...). This modifies a non-pointer function parameter, which violates MISRA C 2023 Rule 17.8. (The rule permits modifying the object pointed to by a pointer parameter but prohibits modifying parameters themselves; use a separate local variable to hold the returned length.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2687.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n  size_t orig_uri_len = uri_len; /* capture original parameter for logging */\n\n  /* Preserve original behavior: terminate buffer for safe logging and processing */\n  uri[uri_len] = 0;\n\n  /* Log initial state */\n  {\n    FILE *f = fopen(\"/tmp/logs/2687.txt\", \"a\");\n    if (f != NULL)\n    {\n      /* Print pointers and the original length and a safe preview of the URI */\n      fprintf(f, \"[check_uri_match] entry: connection=%p daemon=%p orig_uri_len=%zu uri=\\\"%.*s\\\"\\n\",\n              (void *)connection, (void *)daemon, orig_uri_len, (int)orig_uri_len, uri);\n      fclose(f);\n    }\n  }\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Log presence/position of '?' */\n  {\n    FILE *f = fopen(\"/tmp/logs/2687.txt\", \"a\");\n    if (f != NULL)\n    {\n      if (qmark != NULL)\n        fprintf(f, \"[check_uri_match] qmark found at offset %zu\\n\", (size_t)(qmark - uri));\n      else\n        fprintf(f, \"[check_uri_match] no qmark found\\n\");\n      fclose(f);\n    }\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  /* Log before calling unescape_callback */\n  {\n    FILE *f = fopen(\"/tmp/logs/2687.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[check_uri_match] before unescape_callback: uri_len (parameter) = %zu uri=\\\"%s\\\"\\n\",\n              uri_len, uri);\n      fclose(f);\n    }\n  }\n\n  /* Violation scenario: parameter 'uri_len' is modified by assignment below. */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  /* Log after unescape_callback and note that the parameter was assigned to */\n  {\n    FILE *f = fopen(\"/tmp/logs/2687.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[check_uri_match] after unescape_callback: returned_len = %zu (assigned to uri_len parameter)\\n\",\n              uri_len);\n      /* Log comparison targets */\n      fprintf(f, \"[check_uri_match] connection->rq.url_len = %zu\\n\", connection->rq.url_len);\n      /* Print the unescaped URI safely up to the returned length */\n      fprintf(f, \"[check_uri_match] unescaped uri preview=\\\"%.*s\\\"\\n\", (int)uri_len, uri);\n      fclose(f);\n    }\n  }\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    /* Log failure reason */\n    {\n      FILE *f = fopen(\"/tmp/logs/2687.txt\", \"a\");\n      if (f != NULL)\n      {\n        fprintf(f, \"[check_uri_match] URI mismatch: uri_len=%zu conn_url_len=%zu memcmp=%d\\n\",\n                uri_len, connection->rq.url_len,\n                (int)((uri_len == connection->rq.url_len) ? memcmp(uri, connection->rq.url, uri_len) : -1));\n        fclose(f);\n      }\n    }\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  /* Log the arguments portion that will be checked */\n  {\n    FILE *f = fopen(\"/tmp/logs/2687.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[check_uri_match] args pointer=%p args_preview=\\\"%s\\\"\\n\", (void *)args, args);\n      fclose(f);\n    }\n  }\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    /* Log argument mismatch */\n    {\n      FILE *f = fopen(\"/tmp/logs/2687.txt\", \"a\");\n      if (f != NULL)\n      {\n        fprintf(f, \"[check_uri_match] argument match failed for args=\\\"%s\\\"\\n\", args);\n        fclose(f);\n      }\n    }\n    return false;\n  }\n\n  /* Log successful match */\n  {\n    FILE *f = fopen(\"/tmp/logs/2687.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[check_uri_match] success: original_param_len=%zu final_len=%zu\\n\", orig_uri_len, uri_len);\n      fclose(f);\n    }\n  }\n\n  return true;\n}\n"
}