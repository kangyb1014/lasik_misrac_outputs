{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'args' is declared as a modifiable char * but is only used to read from the URI (it is assigned either qmark + 1 or uri + uri_len after any writes to uri have already been performed). Because there is no further modification through 'args', it could be declared as 'const char *args'. Declaring it non-const therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe helper: append a compact state log to /tmp/logs/2683.txt */\nstatic void\nprobe_log_state (const char *stage,\n                 struct MHD_Connection *connection,\n                 char *uri,\n                 size_t uri_len,\n                 char *qmark,\n                 char *args)\n{\n  FILE *f = fopen(\"/tmp/logs/2683.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Print stage, lengths, pointer values and a bounded view of the uri */\n  fprintf (f, \"stage=%s, uri_len=%zu, uri_ptr=%p, qmark=%p, args=%p\\n\",\n           stage, uri_len, (void *)uri, (void *)qmark, (void *)args);\n\n  /* Print up to uri_len characters of the URI safely */\n  if (uri != NULL && uri_len > 0)\n  {\n    /* Use a bounded print to avoid reading past uri_len (may not be NUL-terminated yet) */\n    fprintf (f, \"uri_view=\\\"\");\n    fprintf (f, \"%.*s\", (int)uri_len, uri);\n    fprintf (f, \"\\\"\\n\");\n  }\n  else\n  {\n    fprintf (f, \"uri_view=(null or empty)\\n\");\n  }\n\n  fclose (f);\n}\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Log initial entry state: before NUL-termination */\n  probe_log_state (\"entry\", connection, uri, uri_len, NULL, NULL);\n\n  uri[uri_len] = 0;\n\n  /* Log after we NUL-terminate (uri now safe to treat as C string) */\n  probe_log_state (\"nul_terminated\", connection, uri, uri_len, NULL, NULL);\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n\n  /* Log result of memchr */\n  probe_log_state (\"after_memchr\", connection, uri, uri_len, qmark, NULL);\n\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Log after clearing '?' (if any) */\n  probe_log_state (\"qmark_cleared\", connection, uri, uri_len, qmark, NULL);\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  /* Log after unescape: uri may have changed and uri_len updated */\n  probe_log_state (\"after_unescape\", connection, uri, uri_len, qmark, NULL);\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    probe_log_state (\"mismatch_uri\", connection, uri, uri_len, qmark, NULL);\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  /* Log the chosen args pointer and whether it points inside uri or at the end */\n  probe_log_state (\"args_computed\", connection, uri, uri_len, qmark, args);\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    probe_log_state (\"mismatch_args\", connection, uri, uri_len, qmark, args);\n    return false;\n  }\n\n  probe_log_state (\"success\", connection, uri, uri_len, qmark, args);\n  return true;\n}\n"
}