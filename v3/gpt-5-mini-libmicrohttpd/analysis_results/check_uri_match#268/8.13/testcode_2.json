{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code declares a const pointer to a non-const object: 'struct MHD_Daemon *const daemon = connection->daemon;'. The function only reads members of *daemon (calls daemon->unescape_callback and uses daemon for logging) and does not modify the pointed-to object, so the pointer should point to a const-qualified type. Replace with 'const struct MHD_Daemon *const daemon = connection->daemon;' (or 'const struct MHD_Daemon *daemon') to satisfy MISRA C 2023 Rule 8.13. Note: if the function actually needs to modify the daemon object, then leaving it non-const is acceptable; otherwise this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Helper logging function: append logs to /tmp/logs/2683.txt */\nstatic void\nwrite_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2683.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Log entry and initial state */\n  write_log(\"[check_uri_match] entry: connection=%p, daemon=%p, uri=%p, uri_len=%zu\",\n            (void *)connection, (void *)daemon, (void *)uri, uri_len);\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n  {\n    *qmark = '\\0';\n    write_log(\"[check_uri_match] qmark found at %p, uri now='%s'\", (void *)qmark, uri);\n  }\n  else\n  {\n    write_log(\"[check_uri_match] no qmark, uri='%s'\", uri);\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  write_log(\"[check_uri_match] calling unescape_callback: unescape_callback=%p, cls=%p\",\n            (void *)daemon->unescape_callback, (void *)daemon->unescape_callback_cls);\n\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  write_log(\"[check_uri_match] returned from unescape_callback: new_uri_len=%zu, uri='%s'\",\n            uri_len, uri);\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    /* Log mismatch details */\n    write_log(\"[check_uri_match] mismatch: uri_len=%zu, expected=%zu, memcmp=%d\",\n              uri_len, connection->rq.url_len,\n              (int)memcmp (uri, connection->rq.url, uri_len));\n    write_log(\"[check_uri_match] returning false (URI mismatch)\");\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n  write_log(\"[check_uri_match] args start at %p (args='%s')\", (void *)args, args);\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    write_log(\"[check_uri_match] check_argument_match failed; returning false\");\n    return false;\n  }\n\n  write_log(\"[check_uri_match] success; returning true\");\n  return true;\n}\n"
}