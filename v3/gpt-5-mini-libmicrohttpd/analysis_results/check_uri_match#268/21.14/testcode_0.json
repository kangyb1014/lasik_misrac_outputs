{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nViolation: The code explicitly sets uri[uri_len] = 0 (and may set *qmark = '\\0'), making 'uri' a null-terminated string, then calls memcmp(uri, connection->rq.url, uri_len) to compare it. Using memcmp to compare null-terminated strings is prohibited by MISRA C 2023 Rule 21.14. The violation occurs when uri_len == connection->rq.url_len and the memcmp is executed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2688.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_uri_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_uri_match code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append diagnostic information to /tmp/logs/2688.txt */\nstatic void\nprobe_log_state(const char *stage,\n                struct MHD_Connection *connection,\n                char *uri,\n                size_t uri_len,\n                char *qmark)\n{\n  FILE *f = fopen(\"/tmp/logs/2688.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  fprintf(f, \"[check_uri_match] stage=%s\\n\", stage);\n  fprintf(f, \"  uri_len=%zu\\n\", uri_len);\n  if (qmark == NULL)\n    fprintf(f, \"  qmark=NULL\\n\");\n  else\n    fprintf(f, \"  qmark_offset=%td\\n\", (ptrdiff_t)(qmark - uri));\n\n  if (connection != NULL)\n  {\n    /* connection->rq.* fields are accessed in the original function; print their runtime values */\n    fprintf(f, \"  connection->rq.url_len=%zu\\n\", connection->rq.url_len);\n    fprintf(f, \"  connection->rq.url_ptr=%p\\n\", (void *) connection->rq.url);\n  }\n\n  /* Print a safe preview of the uri buffer (up to 128 bytes) */\n  {\n    size_t preview = (uri_len > 128u) ? 128u : uri_len;\n    fprintf(f, \"  uri_preview(len=%zu):\\n    '\", preview);\n    if (preview > 0 && uri != NULL)\n    {\n      /* write raw bytes so we can see NULs if present */\n      fwrite(uri, 1, preview, f);\n    }\n    fprintf(f, \"'\\n\");\n  }\n\n  fflush(f);\n  fclose(f);\n}\n\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Preserve original behavior: ensure temporary NUL termination for processing */\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Log state after initial NUL-termination and possible qmark truncation */\n  probe_log_state(\"after_null_terminate_and_qmark\", connection, uri, uri_len, qmark);\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  /* Log state after unescape callback returns */\n  probe_log_state(\"after_unescape_callback\", connection, uri, uri_len, qmark);\n\n  /* Preserve original semantics: only call memcmp if lengths are equal. */\n  if (uri_len != connection->rq.url_len)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    probe_log_state(\"length_mismatch\", connection, uri, uri_len, qmark);\n    return false;\n  }\n\n  /* lengths are equal -> perform memcmp and log its result */\n  {\n    int cmp_res = memcmp (uri, connection->rq.url, uri_len);\n\n    FILE *f = fopen(\"/tmp/logs/2688.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[check_uri_match] memcmp called: compare_len=%zu, cmp_res=%d\\n\", uri_len, cmp_res);\n      /* Print short hex dumps (up to 64 bytes) of both buffers to help reproduce the mismatch */\n      size_t dump_len = (uri_len > 64u) ? 64u : uri_len;\n      if (dump_len > 0)\n      {\n        fprintf(f, \"  uri_hex:    \");\n        for (size_t i = 0; i < dump_len; ++i)\n          fprintf(f, \"%02X\", (unsigned char)uri[i]);\n        fprintf(f, \"\\n\");\n\n        fprintf(f, \"  url_hex:    \");\n        for (size_t i = 0; i < dump_len; ++i)\n          fprintf(f, \"%02X\", (unsigned char)connection->rq.url[i]);\n        fprintf(f, \"\\n\");\n      }\n      fflush(f);\n      fclose(f);\n    }\n\n    if (0 != cmp_res)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n      probe_log_state(\"memcmp_mismatch\", connection, uri, uri_len, qmark);\n      return false;\n    }\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    probe_log_state(\"argument_mismatch\", connection, uri, uri_len, qmark);\n    return false;\n  }\n  probe_log_state(\"match_success\", connection, uri, uri_len, qmark);\n  return true;\n}\n"
}