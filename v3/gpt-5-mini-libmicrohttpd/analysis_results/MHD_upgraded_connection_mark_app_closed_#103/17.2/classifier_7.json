{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_upgraded_connection_mark_app_closed_:\n```c\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (NULL != connection->urh);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the fragment as given. The single line mhd_assert(NULL != connection->urh); does not itself cause a function to call itself. To actually violate MISRA C 2023 Rule 17.2 the mhd_assert macro (or any functions it invokes) would need to expand/execute into a call sequence that eventually calls MHD_upgraded_connection_mark_app_closed_ again (directly or through an indirect call chain). For example, a concrete violating scenario would be if mhd_assert expanded to something like: if (!(cond)) mhd_assert_fail(...); and mhd_assert_fail called a logging function that (directly or indirectly) invoked MHD_upgraded_connection_mark_app_closed_ (e.g. mhd_assert_fail -> MHD_DLOG -> ... -> MHD_upgraded_connection_mark_app_closed_), creating recursion. In the absence of the mhd_assert definition or evidence of such a call chain, the rule is not violated."
}