{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation scenario: MHD_itc_activate_ is declared with a non-const pointer parameter for the string argument (for example: int MHD_itc_activate_(struct MHD_ITC *itc, char *mode)). In that case the call MHD_itc_activate_(daemon->itc, \"r\") passes a string literal (which should be treated as const) to a non-const char* parameter, violating MISRA C 2023 Rule 8.13. Fix by declaring the parameter as const char *mode (or otherwise ensuring the pointer points to a const-qualified type). Note: if the function prototype already uses const char * for the second parameter, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_upgraded_connection_mark_app_closed_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1033.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_upgraded_connection_mark_app_closed_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_upgraded_connection_mark_app_closed_:\n```c\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_upgraded_connection_mark_app_closed_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append a line to the log file. Keep very small and local to avoid\n   changing program logic. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1033.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  /* Log entry state: pointers and option flags. Cast pointers to void* to\n     avoid type-dependent printf issues. */\n  mhd_probe_log(\"ENTRY: MHD_upgraded_connection_mark_app_closed_ - connection=%p daemon=%p urh=%p options=0x%lx itc=%p\",\n                (void *) connection,\n                (void *) daemon,\n                (void *) connection->urh,\n                (unsigned long) daemon->options,\n                (void *) daemon->itc);\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n\n  /* Prepare information about the literal we're passing into the ITC\n     activation function so we can observe the exact pointer and value at\n     runtime. This helps reproduce the scenario where a string literal is\n     passed to a non-const parameter. */\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    const char *mode_literal = \"r\"; /* string literal passed below */\n    size_t literal_size = sizeof(\"r\");\n\n    mhd_probe_log(\"ITC valid: daemon->itc=%p; about to call MHD_itc_activate_ with mode_literal=%p size=%zu value='%s'\",\n                  (void *) daemon->itc,\n                  (const void *) mode_literal,\n                  (unsigned long) literal_size,\n                  mode_literal);\n\n    /* Call the original function exactly once and record its return value. */\n    int activated = MHD_itc_activate_ (daemon->itc, mode_literal);\n\n    mhd_probe_log(\"MHD_itc_activate_ returned=%d for daemon->itc=%p mode_literal=%p\",\n                  activated,\n                  (void *) daemon->itc,\n                  (const void *) mode_literal);\n\n    if (! activated)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal resume via \" \\\n                   \"inter-thread communication channel.\\n\"));\n#endif\n      mhd_probe_log(\"MHD_itc_activate_ reported failure (activated=0) for daemon->itc=%p mode_literal=%p\",\n                    (void *) daemon->itc,\n                    (const void *) mode_literal);\n    }\n  }\n  else\n  {\n    mhd_probe_log(\"ITC not valid: daemon->itc=%p. Skipping MHD_itc_activate_.\",\n                  (void *) daemon->itc);\n  }\n}\n"
}