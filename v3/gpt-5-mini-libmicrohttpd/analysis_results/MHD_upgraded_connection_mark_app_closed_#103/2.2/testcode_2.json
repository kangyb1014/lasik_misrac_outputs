{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert invocation is a runtime-only diagnostic that performs a condition check with no side effects on success. If mhd_assert expands to an expression that is executed in normal builds (e.g. evaluates the condition and possibly logs or aborts only on failure) then, for correct runs where the assertion never fails, its execution does not affect program behaviour \u2014 removing it would not change the program \u2014 so it constitutes dead code and thus violates Rule 2.2. (If, instead, mhd_assert is compiled out entirely as a no-op in the build used for the project, it is not executed and therefore not classified as dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_upgraded_connection_mark_app_closed_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1032.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_upgraded_connection_mark_app_closed_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_upgraded_connection_mark_app_closed_:\n```c\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_upgraded_connection_mark_app_closed_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Helper probe logging function: append a formatted line to /tmp/logs/1032.txt */\nstatic void\nmhd_probe_f (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1032.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  mhd_probe_f (\"MHD_upgraded_connection_mark_app_closed_: enter, connection=%p, daemon=%p\",\n               (void *) connection, (void *) daemon);\n#if defined(MHD_USE_THREADS)\n  /* Probe the condition expected by the assert without changing program logic */\n  {\n    bool worker_pool_is_null = (NULL == daemon->worker_pool);\n    mhd_probe_f (\"check: daemon->worker_pool == NULL -> %d\", worker_pool_is_null);\n  }\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  {\n    bool urh_not_null = (NULL != connection->urh);\n    mhd_probe_f (\"check: connection->urh != NULL -> %d (connection->urh=%p)\",\n                 urh_not_null, (void *) connection->urh);\n  }\n  mhd_assert (NULL != connection->urh);\n\n  {\n    bool option_allow_suspend = (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n    mhd_probe_f (\"check: daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME -> %d (options=0x%08x)\",\n                 option_allow_suspend, (unsigned int) daemon->options);\n  }\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  /* Log state before taking the mutex */\n  mhd_probe_f (\"pre-lock: connection->urh->was_closed=%d, connection->resuming=%d, daemon->resuming=%d\",\n               (int) connection->urh->was_closed,\n               (int) connection->resuming,\n               (int) daemon->resuming);\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  mhd_probe_f (\"locked cleanup_connection_mutex\");\n\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n\n  mhd_probe_f (\"after-assign: connection->urh->was_closed=%d, connection->resuming=%d, daemon->resuming=%d\",\n               (int) connection->urh->was_closed,\n               (int) connection->resuming,\n               (int) daemon->resuming);\n\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  mhd_probe_f (\"unlocked cleanup_connection_mutex\");\n\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      int activated = MHD_itc_activate_ (daemon->itc, \"r\");\n      mhd_probe_f (\"MHD_itc_activate_ returned %d for itc=%p\",\n                   activated, (void *) daemon->itc);\n      if (! activated)\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Failed to signal resume via \" \\\n                       \"inter-thread communication channel.\\n\"));\n#endif\n          mhd_probe_f (\"itc activation failed: signalled attempt to resume failed\");\n        }\n    }\n  else\n    {\n      mhd_probe_f (\"no itc: MHD_ITC_IS_VALID_ returned false for itc=%p\",\n                   (void *) daemon->itc);\n    }\n\n  mhd_probe_f (\"MHD_upgraded_connection_mark_app_closed_: exit\");\n}\n"
}