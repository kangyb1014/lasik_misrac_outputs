{
  "user_message": "An agent A claimed that the following MHD_digest_auth_check_digest3 code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_check_digest3.\n```c\n_MHD_EXTERN enum MHD_DigestAuthResult\nMHD_digest_auth_check_digest3 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *username,\n                               const void *userdigest,\n                               size_t userdigest_size,\n                               unsigned int nonce_timeout,\n                               uint32_t max_nc,\n                               enum MHD_DigestAuthMultiQOP mqop,\n                               enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  if (1 != (((0 != (malgo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)\n            + ((0 != (malgo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)\n            + ((0 != (malgo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)))\n    MHD_PANIC (_ (\"Wrong 'malgo3' value, only one base hashing algorithm \" \\\n                  \"(MD5, SHA-256 or SHA-512/256) must be specified, \" \\\n                  \"API violation\"));\n\n#ifndef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_MD5))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The MD5 algorithm is not supported by this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_MD5_SUPPORT */\n#ifndef MHD_SHA256_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_SHA256))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The SHA-256 algorithm is not supported by \"\n                 \"this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_SHA256_SUPPORT */\n#ifndef MHD_SHA512_256_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_SHA512_256))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The SHA-512/256 algorithm is not supported by \"\n                 \"this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_SHA512_256_SUPPORT */\n\n  if (digest_get_hash_size ((enum MHD_DigestAuthAlgo3) malgo3) !=\n      userdigest_size)\n    MHD_PANIC (_ (\"Wrong 'userdigest_size' value, does not match 'malgo3', \"\n                  \"API violation\"));\n\n  return digest_auth_check_all (connection,\n                                realm,\n                                username,\n                                NULL,\n                                (const uint8_t *) userdigest,\n                                nonce_timeout,\n                                max_nc,\n                                mqop,\n                                malgo3);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call MHD_DLOG(connection->daemon, _(\"The MD5 algorithm is not supported by this MHD build.\\n\")); passes a string literal (through the _() gettext macro) to MHD_DLOG. If MHD_DLOG (or the _ macro) is declared to take a non-const char * (i.e. modifies or does not use a const-qualified pointer), this violates MISRA C 2023 Rule 8.13 because the pointer should be to a const-qualified type (const char *) when the data (a literal) cannot/should not be modified.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as stated. MISRA C:2023 Rule 8.13 concerns pointer declarations and parameters that could reasonably be const-qualified. To prove a violation you must show that a pointer type in the program (e.g. a function parameter or a variable) is declared without const even though it could be const. The scenario described is speculative: whether a const-qualification is being discarded depends entirely on the declarations of _ (gettext) and MHD_DLOG, which are not shown in the snippet.\n\nRemarks:\n- In C the token \"string literal\" has type \"array of char\" (not \"const char[]\") historically, so passing it to a function taking \"char *\" is legal in C; that is a language detail but not by itself a MISRA proof. MISRA recommends const qualification where appropriate, but the source snippet does not declare MHD_DLOG or the _ macro, so you cannot conclude a Rule 8.13 violation from the call site alone.\n- If, in the actual project, MHD_DLOG (or the _ macro) is declared to take a non-const char * and that parameter could reasonably be const (i.e. the function does not modify the pointed data), then that declaration would contravene Rule 8.13 and should be fixed (change the parameter to const char * or otherwise justify why it must be non-const). But that is a deficiency in the function\u2019s declaration, not something demonstrably present in the provided code fragment.\n\nConclusion: the agent\u2019s claim is not proven by the supplied code, so the report is incorrect."
}