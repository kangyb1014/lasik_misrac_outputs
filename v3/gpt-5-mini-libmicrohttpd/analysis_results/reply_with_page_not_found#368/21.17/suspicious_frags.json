{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of reply_with_page_not_found:\n```c\nstatic enum MHD_Result\nreply_with_page_not_found (struct MHD_Connection *c)\n{\n  static const char page_content[] =\n    \"<html><head><title>Page Not Found</title></head>\" \\\n    \"<body>The requested page not found.</body></html>\";\n  static const size_t page_content_len =\n    (sizeof(page_content) / sizeof(char)) - 1;\n  struct MHD_Response *resp;\n  enum MHD_Result ret;\n\n  resp = MHD_create_response_from_buffer_static (page_content_len,\n                                                 page_content);\n  if (NULL == resp)\n    return MHD_NO;\n\n  /* Ignore possible error when adding the header as the reply will work even\n     without this header. */\n  (void) MHD_add_response_header (resp,\n                                  MHD_HTTP_HEADER_CONTENT_TYPE,\n                                  \"text/html\");\n\n  ret = MHD_queue_response (c, MHD_HTTP_NOT_FOUND, resp);\n  MHD_destroy_response (resp);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No direct calls to any of the <string.h> functions (memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn, etc.) are present in the provided code fragment, so there are no obvious in-code string-handling usages that could lead to out-of-bounds accesses under MISRA C 2023 Rule 21.17. Specific reasons why other fragments need not be investigated:\n\n- The only string data is the static const char page_content[] = \"...\" literal. A string literal in C includes the terminating NUL; using sizeof(page_content)/sizeof(char) - 1 computes the number of visible characters (excluding the terminator) and is correct for the length passed to the response API.\n- The code passes an explicit length (page_content_len) to MHD_create_response_from_buffer_static, so the code does not rely on strlen or other runtime string functions to determine length.\n- The call to MHD_add_response_header uses a string literal for the header value; there is no local manipulation or copying of that buffer in this code fragment.\n- No other pointer arithmetic or buffer indexing is performed in this function that could cause out-of-bounds accesses related to standard string functions.\n\nNote: If there is concern that the external functions (MHD_create_response_from_buffer_static, MHD_add_response_header, MHD_queue_response, etc.) may internally use <string.h> functions in an unsafe way, those implementations should be inspected separately. However, such internal uses are not present in the supplied source fragment and therefore are outside the scope of this fragment-level review for Rule 21.17."
}