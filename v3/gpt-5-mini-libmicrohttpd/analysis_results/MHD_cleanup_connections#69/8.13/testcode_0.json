{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes pos->addr (a non-const pointer field of struct MHD_Connection) to MHD_ip_limit_del. If pos->addr is declared as a non-const pointer (e.g. void *addr or struct sockaddr *addr) but the data it points to is only read (MHD_ip_limit_del does not modify the pointed memory), then the pointer should be declared to point to a const-qualified type (e.g. const void * or const struct sockaddr *) per MISRA C 2023 Rule 8.13. Without the declaration of pos->addr or the prototype of MHD_ip_limit_del it cannot be proven here, but in the common case where pos->addr is non-const and only read, this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_cleanup_connections code that contains useful probe functions that print useful logs to a file \"/tmp/logs/693.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_cleanup_connections as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_cleanup_connections:\n```c\nstatic void\nMHD_cleanup_connections (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *pos;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  while (NULL != (pos = daemon->cleanup_tail))\n  {\n    DLL_remove (daemon->cleanup_head,\n                daemon->cleanup_tail,\n                pos);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n    if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) &&\n        (! pos->thread_joined) &&\n        (! MHD_thread_handle_ID_join_thread_ (pos->tid)) )\n      MHD_PANIC (_ (\"Failed to join a thread.\\n\"));\n#endif\n#ifdef UPGRADE_SUPPORT\n    cleanup_upgraded_connection (pos);\n#endif /* UPGRADE_SUPPORT */\n    MHD_pool_destroy (pos->pool);\n#ifdef HTTPS_SUPPORT\n    if (NULL != pos->tls_session)\n      gnutls_deinit (pos->tls_session);\n#endif /* HTTPS_SUPPORT */\n\n    /* clean up the connection */\n    if (NULL != daemon->notify_connection)\n      daemon->notify_connection (daemon->notify_connection_cls,\n                                 pos,\n                                 &pos->socket_context,\n                                 MHD_CONNECTION_NOTIFY_CLOSED);\n    MHD_ip_limit_del (daemon,\n                      pos->addr,\n                      pos->addr_len);\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n    {\n      if (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))\n      {\n        EDLL_remove (daemon->eready_head,\n                     daemon->eready_tail,\n                     pos);\n        pos->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_IN_EREADY_EDLL);\n      }\n      if ( (-1 != daemon->epoll_fd) &&\n           (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) )\n      {\n        /* epoll documentation suggests that closing a FD\n           automatically removes it from the epoll set; however,\n           this is not true as if we fail to do manually remove it,\n           we are still seeing an event for this fd in epoll,\n           causing grief (use-after-free...) --- at least on my\n           system. */\n        if (0 != epoll_ctl (daemon->epoll_fd,\n                            EPOLL_CTL_DEL,\n                            pos->socket_fd,\n                            NULL))\n          MHD_PANIC (_ (\"Failed to remove FD from epoll set.\\n\"));\n        pos->epoll_state &=\n          ~((enum MHD_EpollState)\n            MHD_EPOLL_STATE_IN_EPOLL_SET);\n      }\n    }\n#endif\n    if (NULL != pos->rp.response)\n    {\n      MHD_destroy_response (pos->rp.response);\n      pos->rp.response = NULL;\n    }\n    if (MHD_INVALID_SOCKET != pos->socket_fd)\n      MHD_socket_close_chk_ (pos->socket_fd);\n    if (NULL != pos->addr)\n      free (pos->addr);\n    free (pos);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n    daemon->connections--;\n    daemon->at_limit = false;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n}\n```\n</target_code>\nPlease provide the modified MHD_cleanup_connections code.\n",
  "test_code": "static void MHD_log_hexdump(FILE *f, const void *buf, size_t len)\n{\n  const unsigned char *b = (const unsigned char *) buf;\n  size_t i;\n\n  if (NULL == buf || 0 == len)\n  {\n    fprintf(f, \"<no-data>\\n\");\n    return;\n  }\n\n  for (i = 0; i < len; ++i)\n  {\n    fprintf(f, \"%02x\", b[i]);\n    if (i + 1 < len)\n      fprintf(f, \" \");\n  }\n  fprintf(f, \"\\n\");\n}\n\nstatic void MHD_probe_before_ip_limit_del(struct MHD_Daemon *daemon,\n                                          struct MHD_Connection *pos,\n                                          unsigned char **out_snapshot,\n                                          size_t *out_snapshot_len)\n{\n  FILE *f = fopen(\"/tmp/logs/693.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[MHD_cleanup_connections] entering iteration: daemon=%p pos=%p\\n\",\n          (void *) daemon, (void *) pos);\n  fprintf(f, \"  pos->addr=%p pos->addr_len=%zu\\n\",\n          (void *) pos->addr, (size_t) pos->addr_len);\n\n  if ((NULL != pos->addr) && (pos->addr_len > 0))\n  {\n    size_t snaplen = (pos->addr_len > 256) ? 256 : pos->addr_len;\n    unsigned char *snap = (unsigned char *) malloc(snaplen);\n    if (NULL != snap)\n    {\n      memcpy(snap, pos->addr, snaplen);\n      *out_snapshot = snap;\n      *out_snapshot_len = snaplen;\n\n      fprintf(f, \"  snapshot_len=%zu snapshot(first %zu bytes):\\n  \", snaplen, snaplen);\n      MHD_log_hexdump(f, snap, snaplen);\n    }\n    else\n    {\n      *out_snapshot = NULL;\n      *out_snapshot_len = 0;\n      fprintf(f, \"  snapshot allocation failed\\n\");\n    }\n  }\n  else\n  {\n    *out_snapshot = NULL;\n    *out_snapshot_len = 0;\n    fprintf(f, \"  pos->addr is NULL or zero-length\\n\");\n  }\n\n  fclose(f);\n}\n\nstatic void MHD_probe_after_ip_limit_del(struct MHD_Daemon *daemon,\n                                         struct MHD_Connection *pos,\n                                         unsigned char *snapshot,\n                                         size_t snapshot_len)\n{\n  FILE *f = fopen(\"/tmp/logs/693.txt\", \"a\");\n  if (NULL == f)\n  {\n    if (NULL != snapshot)\n      free(snapshot);\n    return;\n  }\n\n  fprintf(f, \"[MHD_cleanup_connections] after MHD_ip_limit_del: daemon=%p pos=%p\\n\",\n          (void *) daemon, (void *) pos);\n  fprintf(f, \"  pos->addr=%p pos->addr_len=%zu\\n\",\n          (void *) pos->addr, (size_t) pos->addr_len);\n\n  if (NULL != snapshot && snapshot_len > 0 && NULL != pos->addr)\n  {\n    size_t cmp_len = (snapshot_len > (size_t) pos->addr_len) ? pos->addr_len : snapshot_len;\n    unsigned char *after = (unsigned char *) malloc(cmp_len);\n    if (NULL != after)\n    {\n      memcpy(after, pos->addr, cmp_len);\n      fprintf(f, \"  post-call first %zu bytes:\\n  \", cmp_len);\n      MHD_log_hexdump(f, after, cmp_len);\n\n      if (0 == memcmp(snapshot, after, cmp_len))\n        fprintf(f, \"  -> contents unchanged (first %zu bytes)\\n\", cmp_len);\n      else\n        fprintf(f, \"  -> contents CHANGED (first %zu bytes)\\n\", cmp_len);\n\n      free(after);\n    }\n    else\n    {\n      fprintf(f, \"  allocation for after-snapshot failed\\n\");\n    }\n\n    free(snapshot);\n  }\n  else\n  {\n    if (NULL == pos->addr)\n      fprintf(f, \"  pos->addr is NULL after call\\n\");\n    else\n      fprintf(f, \"  no snapshot available to compare\\n\");\n  }\n\n  fclose(f);\n}\n\nstatic void\nMHD_cleanup_connections (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *pos;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  while (NULL != (pos = daemon->cleanup_tail))\n  {\n    DLL_remove (daemon->cleanup_head,\n                daemon->cleanup_tail,\n                pos);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n    if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) &&\n        (! pos->thread_joined) &&\n        (! MHD_thread_handle_ID_join_thread_ (pos->tid)) )\n      MHD_PANIC (_ (\"Failed to join a thread.\\n\"));\n#endif\n#ifdef UPGRADE_SUPPORT\n    cleanup_upgraded_connection (pos);\n#endif /* UPGRADE_SUPPORT */\n    MHD_pool_destroy (pos->pool);\n#ifdef HTTPS_SUPPORT\n    if (NULL != pos->tls_session)\n      gnutls_deinit (pos->tls_session);\n#endif /* HTTPS_SUPPORT */\n\n    /* clean up the connection */\n    if (NULL != daemon->notify_connection)\n      daemon->notify_connection (daemon->notify_connection_cls,\n                                 pos,\n                                 &pos->socket_context,\n                                 MHD_CONNECTION_NOTIFY_CLOSED);\n\n    /* Probe: capture state before calling MHD_ip_limit_del, then compare after */\n    {\n      unsigned char *snapshot = NULL;\n      size_t snapshot_len = 0;\n\n      MHD_probe_before_ip_limit_del(daemon, pos, &snapshot, &snapshot_len);\n\n      MHD_ip_limit_del (daemon,\n                        pos->addr,\n                        pos->addr_len);\n\n      MHD_probe_after_ip_limit_del(daemon, pos, snapshot, snapshot_len);\n    }\n\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n    {\n      if (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))\n      {\n        EDLL_remove (daemon->eready_head,\n                     daemon->eready_tail,\n                     pos);\n        pos->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_IN_EREADY_EDLL);\n      }\n      if ( (-1 != daemon->epoll_fd) &&\n           (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) )\n      {\n        /* epoll documentation suggests that closing a FD\n           automatically removes it from the epoll set; however,\n           this is not true as if we fail to do manually remove it,\n           we are still seeing an event for this fd in epoll,\n           causing grief (use-after-free...) --- at least on my\n           system. */\n        if (0 != epoll_ctl (daemon->epoll_fd,\n                            EPOLL_CTL_DEL,\n                            pos->socket_fd,\n                            NULL))\n          MHD_PANIC (_ (\"Failed to remove FD from epoll set.\\n\"));\n        pos->epoll_state &=\n          ~((enum MHD_EpollState)\n            MHD_EPOLL_STATE_IN_EPOLL_SET);\n      }\n    }\n#endif\n    if (NULL != pos->rp.response)\n    {\n      MHD_destroy_response (pos->rp.response);\n      pos->rp.response = NULL;\n    }\n    if (MHD_INVALID_SOCKET != pos->socket_fd)\n      MHD_socket_close_chk_ (pos->socket_fd);\n    if (NULL != pos->addr)\n      free (pos->addr);\n    free (pos);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n    daemon->connections--;\n    daemon->at_limit = false;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n}\n"
}