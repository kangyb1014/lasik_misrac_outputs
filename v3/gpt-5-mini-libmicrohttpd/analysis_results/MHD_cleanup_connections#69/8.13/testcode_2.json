{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes a non-const pointer (pos of type struct MHD_Connection *) to a callback (daemon->notify_connection). If the notify_connection callback is declared as taking a non-const struct MHD_Connection * but does not need to modify the connection, this violates MISRA C 2023 Rule 8.13 \u2014 the pointer parameter (and/or the local pointer) should be to a const-qualified type. To determine definitively you must inspect the prototype of notify_connection; if it is declared to accept a const-qualified pointer (e.g. const struct MHD_Connection *), there is no violation. Otherwise (prototype uses a non-const pointer when mutation is not required) this is a rule violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_cleanup_connections code that contains useful probe functions that print useful logs to a file \"/tmp/logs/693.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_cleanup_connections as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_cleanup_connections:\n```c\nstatic void\nMHD_cleanup_connections (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *pos;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  while (NULL != (pos = daemon->cleanup_tail))\n  {\n    DLL_remove (daemon->cleanup_head,\n                daemon->cleanup_tail,\n                pos);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n    if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) &&\n        (! pos->thread_joined) &&\n        (! MHD_thread_handle_ID_join_thread_ (pos->tid)) )\n      MHD_PANIC (_ (\"Failed to join a thread.\\n\"));\n#endif\n#ifdef UPGRADE_SUPPORT\n    cleanup_upgraded_connection (pos);\n#endif /* UPGRADE_SUPPORT */\n    MHD_pool_destroy (pos->pool);\n#ifdef HTTPS_SUPPORT\n    if (NULL != pos->tls_session)\n      gnutls_deinit (pos->tls_session);\n#endif /* HTTPS_SUPPORT */\n\n    /* clean up the connection */\n    if (NULL != daemon->notify_connection)\n      daemon->notify_connection (daemon->notify_connection_cls,\n                                 pos,\n                                 &pos->socket_context,\n                                 MHD_CONNECTION_NOTIFY_CLOSED);\n    MHD_ip_limit_del (daemon,\n                      pos->addr,\n                      pos->addr_len);\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n    {\n      if (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))\n      {\n        EDLL_remove (daemon->eready_head,\n                     daemon->eready_tail,\n                     pos);\n        pos->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_IN_EREADY_EDLL);\n      }\n      if ( (-1 != daemon->epoll_fd) &&\n           (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) )\n      {\n        /* epoll documentation suggests that closing a FD\n           automatically removes it from the epoll set; however,\n           this is not true as if we fail to do manually remove it,\n           we are still seeing an event for this fd in epoll,\n           causing grief (use-after-free...) --- at least on my\n           system. */\n        if (0 != epoll_ctl (daemon->epoll_fd,\n                            EPOLL_CTL_DEL,\n                            pos->socket_fd,\n                            NULL))\n          MHD_PANIC (_ (\"Failed to remove FD from epoll set.\\n\"));\n        pos->epoll_state &=\n          ~((enum MHD_EpollState)\n            MHD_EPOLL_STATE_IN_EPOLL_SET);\n      }\n    }\n#endif\n    if (NULL != pos->rp.response)\n    {\n      MHD_destroy_response (pos->rp.response);\n      pos->rp.response = NULL;\n    }\n    if (MHD_INVALID_SOCKET != pos->socket_fd)\n      MHD_socket_close_chk_ (pos->socket_fd);\n    if (NULL != pos->addr)\n      free (pos->addr);\n    free (pos);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n    daemon->connections--;\n    daemon->at_limit = false;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n}\n```\n</target_code>\nPlease provide the modified MHD_cleanup_connections code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper probe: append formatted logs to /tmp/logs/693.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/693.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log_connection_state (struct MHD_Daemon *daemon,\n                                struct MHD_Connection *pos,\n                                const char *stage)\n{\n  if (NULL == daemon)\n  {\n    mhd_probe_log (\"[probe] %s: daemon=NULL\\n\", stage);\n    return;\n  }\n\n  if (NULL == pos)\n  {\n    mhd_probe_log (\"[probe] %s: daemon=%p pos=NULL cleanup_tail=%p cleanup_head=%p notify_connection=%p notify_connection_cls=%p connections=%d\\n\",\n                   stage,\n                   (void *) daemon,\n                   (void *) daemon->cleanup_tail,\n                   (void *) daemon->cleanup_head,\n                   (void *) daemon->notify_connection,\n                   (void *) daemon->notify_connection_cls,\n                   daemon->connections);\n    return;\n  }\n\n  /* Log key pos fields that are available/used in cleanup to give context. */\n  mhd_probe_log (\"[probe] %s: daemon=%p pos=%p socket_fd=%d socket_context=%p addr=%p addr_len=%lu rp.response=%p pool=%p tls_session=%p thread_joined=%d tid=%llu epoll_state=0x%08x\\n\",\n                 stage,\n                 (void *) daemon,\n                 (void *) pos,\n                 (int) pos->socket_fd,\n                 (void *) &pos->socket_context,\n                 (void *) pos->addr,\n                 (unsigned long) pos->addr_len,\n                 (void *) pos->rp.response,\n                 (void *) pos->pool,\n                 (void *) pos->tls_session,\n                 (int) pos->thread_joined,\n                 (unsigned long long) pos->tid,\n                 (unsigned int) pos->epoll_state);\n}\n\nstatic void\nMHD_cleanup_connections (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *pos;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n\n  mhd_probe_log (\"[probe] MHD_cleanup_connections enter: daemon=%p cleanup_tail=%p cleanup_head=%p notify_connection=%p notify_connection_cls=%p connections=%d\\n\",\n                 (void *) daemon,\n                 (void *) (daemon ? daemon->cleanup_tail : NULL),\n                 (void *) (daemon ? daemon->cleanup_head : NULL),\n                 (void *) (daemon ? daemon->notify_connection : NULL),\n                 (void *) (daemon ? daemon->notify_connection_cls : NULL),\n                 daemon ? daemon->connections : -1);\n\n  while (NULL != (pos = daemon->cleanup_tail))\n  {\n    DLL_remove (daemon->cleanup_head,\n                daemon->cleanup_tail,\n                pos);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n    if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) &&\n        (! pos->thread_joined) &&\n        (! MHD_thread_handle_ID_join_thread_ (pos->tid)) )\n      MHD_PANIC (_ (\"Failed to join a thread.\\n\"));\n#endif\n\n#ifdef UPGRADE_SUPPORT\n    cleanup_upgraded_connection (pos);\n#endif /* UPGRADE_SUPPORT */\n    MHD_pool_destroy (pos->pool);\n#ifdef HTTPS_SUPPORT\n    if (NULL != pos->tls_session)\n      gnutls_deinit (pos->tls_session);\n#endif /* HTTPS_SUPPORT */\n\n    /* Log state just before notifying and cleaning up the connection. */\n    mhd_probe_log_connection_state (daemon, pos, \"before_notify\");\n\n    /* clean up the connection */\n    if (NULL != daemon->notify_connection)\n    {\n      mhd_probe_log (\"[probe] calling notify_connection: daemon=%p notify_connection=%p notify_connection_cls=%p pos=%p socket_context=%p event=%d\\n\",\n                     (void *) daemon,\n                     (void *) daemon->notify_connection,\n                     (void *) daemon->notify_connection_cls,\n                     (void *) pos,\n                     (void *) &pos->socket_context,\n                     (int) MHD_CONNECTION_NOTIFY_CLOSED);\n\n      /* Actual callback invocation retained exactly as in original code. */\n      daemon->notify_connection (daemon->notify_connection_cls,\n                                 pos,\n                                 &pos->socket_context,\n                                 MHD_CONNECTION_NOTIFY_CLOSED);\n\n      mhd_probe_log (\"[probe] returned from notify_connection: func=%p pos=%p\\n\",\n                     (void *) daemon->notify_connection,\n                     (void *) pos);\n    }\n    else\n    {\n      mhd_probe_log (\"[probe] notify_connection is NULL: daemon=%p pos=%p\\n\",\n                     (void *) daemon,\n                     (void *) pos);\n    }\n\n    MHD_ip_limit_del (daemon,\n                      pos->addr,\n                      pos->addr_len);\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n    {\n      if (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))\n      {\n        EDLL_remove (daemon->eready_head,\n                     daemon->eready_tail,\n                     pos);\n        pos->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_IN_EREADY_EDLL);\n      }\n      if ( (-1 != daemon->epoll_fd) &&\n           (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) )\n      {\n        /* epoll documentation suggests that closing a FD\n           automatically removes it from the epoll set; however,\n           this is not true as if we fail to do manually remove it,\n           we are still seeing an event for this fd in epoll,\n           causing grief (use-after-free...) --- at least on my\n           system. */\n        if (0 != epoll_ctl (daemon->epoll_fd,\n                            EPOLL_CTL_DEL,\n                            pos->socket_fd,\n                            NULL))\n          MHD_PANIC (_ (\"Failed to remove FD from epoll set.\\n\"));\n        pos->epoll_state &=\n          ~((enum MHD_EpollState)\n            MHD_EPOLL_STATE_IN_EPOLL_SET);\n      }\n    }\n#endif\n    if (NULL != pos->rp.response)\n    {\n      MHD_destroy_response (pos->rp.response);\n      pos->rp.response = NULL;\n    }\n    if (MHD_INVALID_SOCKET != pos->socket_fd)\n      MHD_socket_close_chk_ (pos->socket_fd);\n    if (NULL != pos->addr)\n      free (pos->addr);\n\n    /* Log state right before freeing pos (do not access pos after free). */\n    mhd_probe_log_connection_state (daemon, pos, \"before_free\");\n\n    free (pos);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n    daemon->connections--;\n    daemon->at_limit = false;\n\n    mhd_probe_log (\"[probe] iteration complete: daemon=%p remaining_cleanup_tail=%p connections=%d at_limit=%d\\n\",\n                   (void *) daemon,\n                   (void *) daemon->cleanup_tail,\n                   daemon->connections,\n                   daemon->at_limit ? 1 : 0);\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n\n  mhd_probe_log (\"[probe] MHD_cleanup_connections exit: daemon=%p cleanup_tail=%p connections=%d\\n\",\n                 (void *) daemon,\n                 (void *) (daemon ? daemon->cleanup_tail : NULL),\n                 daemon ? daemon->connections : -1);\n}\n"
}