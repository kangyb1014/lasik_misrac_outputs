{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a string literal (\"\\n\") which decays to a pointer to char. If the prototype of post_process_urlencoded declares the corresponding parameter as a non-const pointer (e.g. char *), this violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when possible. If the function parameter is declared as const char * (or otherwise does not allow modification), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_destroy_post_processor code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_destroy_post_processor as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_destroy_post_processor:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_destroy_post_processor (struct MHD_PostProcessor *pp)\n{\n  enum MHD_Result ret;\n\n  if (NULL == pp)\n    return MHD_YES;\n  if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n  }\n  /* These internal strings need cleaning up since\n     the post-processing may have been interrupted\n     at any stage */\n  if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;\n  else\n    ret = MHD_YES;\n  pp->have = NE_none;\n  free_unmarked (pp);\n  if (NULL != pp->nested_boundary)\n    free (pp->nested_boundary);\n  free (pp);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_destroy_post_processor code.\n",
  "test_code": "static void pp_log_state(const struct MHD_PostProcessor *pp, const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/2283.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"MHD_destroy_post_processor: %s\\n\", note);\n    fprintf(f, \"  pp=%p\\n\", (void *)pp);\n    if (pp)\n    {\n      fprintf(f, \"  state=%d xbuf_pos=%d have=%d nested_boundary=%p\\n\",\n              (int)pp->state,\n              (int)pp->xbuf_pos,\n              (int)pp->have,\n              (void *)pp->nested_boundary);\n    }\n    fprintf(f, \"---\\n\");\n    fclose(f);\n  }\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_destroy_post_processor (struct MHD_PostProcessor *pp)\n{\n  enum MHD_Result ret;\n\n  /* Log entry and pointer value */\n  pp_log_state(pp, \"entry\");\n\n  if (NULL == pp)\n  {\n    pp_log_state(pp, \"pp is NULL, returning MHD_YES\");\n    return MHD_YES;\n  }\n  if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    /* Probe: log that we are about to pass a string literal \"\\n\" to\n       post_process_urlencoded. This helps reproduce the scenario where\n       a string literal (which has type \"array of char\" in C, decays to\n       char *) is supplied to a function that may accept a non-const\n       char * parameter. We log the literal's address and expected length. */\n    {\n      const char *terminator_literal = \"\\n\"; /* keep as const for logging only */\n      FILE *f = fopen(\"/tmp/logs/2283.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"About to call post_process_urlencoded: literal=%p value='%s' length=%d\\n\",\n                (void *)terminator_literal,\n                terminator_literal,\n                1);\n        fprintf(f, \"  pp state before call: %d xbuf_pos=%d have=%d\\n\",\n                (int)pp->state,\n                (int)pp->xbuf_pos,\n                (int)pp->have);\n        fclose(f);\n      }\n    }\n\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n\n    /* Log state after the call */\n    pp_log_state(pp, \"after post_process_urlencoded call\");\n  }\n  /* These internal strings need cleaning up since\n     the post-processing may have been interrupted\n     at any stage */\n  if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;\n  else\n    ret = MHD_YES;\n\n  {\n    FILE *f = fopen(\"/tmp/logs/2283.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"Decision computed: ret=%d (0==MHD_YES?) pp->xbuf_pos=%d pp->state=%d\\n\",\n              (int)ret,\n              (int)pp->xbuf_pos,\n              (int)pp->state);\n      fclose(f);\n    }\n  }\n\n  pp->have = NE_none;\n\n  /* Log before cleanup */\n  pp_log_state(pp, \"before cleanup and free_unmarked\");\n\n  free_unmarked (pp);\n  if (NULL != pp->nested_boundary)\n  {\n    FILE *f = fopen(\"/tmp/logs/2283.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"Freeing nested_boundary=%p\\n\", (void *)pp->nested_boundary);\n      fclose(f);\n    }\n    free (pp->nested_boundary);\n  }\n  free (pp);\n\n  {\n    FILE *f = fopen(\"/tmp/logs/2283.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_destroy_post_processor exit: returning ret=%d\\n\", (int)ret);\n      fprintf(f, \"========================================\\n\");\n      fclose(f);\n    }\n  }\n  return ret;\n}\n"
}