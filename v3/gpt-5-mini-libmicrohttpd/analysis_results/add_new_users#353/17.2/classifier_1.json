{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of add_new_users:\n```c\nstatic int\nadd_new_users (void)\n{\n  if (! add_new_user_entry (\"joepublic\",\n                            \"password\",\n                            REALM,\n                            ! 0,\n                            0))\n    return 0;\n\n  if (! add_new_user_entry (\"superadmin\",\n                            \"pA$$w0Rd\",\n                            REALM,\n                            ! 0,\n                            ! 0))\n    return 0;\n\n  return ! 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n  if (! add_new_user_entry (\"joepublic\",\n                            \"password\",\n                            REALM,\n                            ! 0,\n                            0))\n    return 0;\n\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown fragment itself: add_new_users calls add_new_user_entry, which is a different function, so there is no direct self-call. Rule 17.2 would only be violated if there is recursion (direct or indirect). A possible violating scenario would be if add_new_user_entry (or a chain of functions it calls) calls add_new_users, e.g.:\n\nstatic int add_new_user_entry(...) { /* ... */ return add_new_users(); }\n\nor indirectly:\nstatic int helper(...) { return add_new_users(); }\nstatic int add_new_user_entry(...) { return helper(...); }\n\nEither of those would create an indirect recursive cycle and violate Rule 17.2."
}