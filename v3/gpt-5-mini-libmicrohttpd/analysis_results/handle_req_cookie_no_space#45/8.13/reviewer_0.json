{
  "user_message": "An agent A claimed that the following handle_req_cookie_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_cookie_no_space.\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_COOKIE,\n                                           NULL,\n                                           0);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf transmit_error_response_static is prototyped with a non-const character pointer for its third parameter (for example: void transmit_error_response_static(struct MHD_Connection *c, unsigned int err, char *msg);) then passing the string literal ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG causes a pointer to a non-const-qualified type to point to an immutable string literal. This violates MISRA C 2023 Rule 8.13. (If the function's parameter is already declared as const char * there is no violation.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct under the stated condition. MISRA C 2023 Rule 8.13 requires that pointers should point to const-qualified types whenever possible. A string literal is immutable and should be treated as const char *. If transmit_error_response_static is declared with a non-const third parameter (e.g. char *msg), then passing the string literal ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG causes a non-const pointer to refer to immutable data, which violates Rule 8.13. If, however, the function is declared as taking const char * for that parameter, there is no violation."
}