{
  "user_message": "An agent A claimed that the following handle_req_cookie_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_cookie_no_space.\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_COOKIE,\n                                           NULL,\n                                           0);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MHD_Connection *c' is not const-qualified. If handle_req_cookie_no_space does not modify the pointed-to MHD_Connection (and/or the downstream functions it calls accept a const pointer), then the pointer should be declared as 'const struct MHD_Connection *c'. In that case Rule 8.13 is violated. Example specific violation: handle_req_cookie_no_space only calls get_no_space_err_status_code(c, ...) and transmit_error_response_static(c, ...), and if neither call (nor the function itself) mutates *c, then the parameter should be const-qualified but is not.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 R.8.13 recommends that a pointer parameter be to a const-qualified type when the function (and any callees it forwards the pointer to) do not modify the pointed-to object. From the snippet alone we cannot conclude that requirement is violated: handle_req_cookie_no_space does not itself dereference or modify *c, but it forwards c to get_no_space_err_status_code and transmit_error_response_static. If either of those functions expects a non-const struct MHD_Connection * and may mutate the object, then the parameter cannot be made const and there is no violation. Conversely, if both callees accept a const pointer (and neither they nor this function modify *c), then the parameter should be declared const and the report would be correct. Because the prototypes/implementations of the callees (and any required callback signature compatibility) are not provided, the claim cannot be confirmed from the shown code alone. Therefore the report as stated is not proven correct."
}