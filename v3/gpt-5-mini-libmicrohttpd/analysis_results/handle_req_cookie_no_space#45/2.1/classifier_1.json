{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of handle_req_cookie_no_space:\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_COOKIE,\n                                           NULL,\n                                           0);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntransmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation based on the provided fragment: the call to transmit_error_response_static is the final statement of handle_req_cookie_no_space and is executed unconditionally when that function is invoked, so it is reachable. This would only be a rule violation if additional project-wide information showed that handle_req_cookie_no_space is never called (making the code unreachable) or if get_no_space_err_status_code or another prior operation is guaranteed not to return (e.g. marked noreturn or always exits/longjmps). No such evidence is present in the fragment, so no MISRA\u00a0C\u00a02023 Rule\u00a02.1 violation can be concluded."
}