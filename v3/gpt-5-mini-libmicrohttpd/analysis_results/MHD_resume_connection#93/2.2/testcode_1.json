{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment is dead if the connection->resuming flag is never read (or affects any observable behaviour) after this write. In the shown function the field is written but not used locally; daemon->resuming is also set, and the inter-thread signalling uses daemon->itc. If, in the rest of the project, there are no reads of connection->resuming (no checks, no uses by other threads, no callbacks that depend on it), then removing this assignment would not change program behaviour and the assignment is dead code \u2014 violating MISRA C 2023 Rule 2.2. To confirm, search the codebase for reads of connection->resuming; if none exist (or the flag is only written elsewhere without being observed), this line is a Rule 2.2 violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_resume_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/932.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_resume_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_resume_connection:\n```c\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_resume_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/932.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t t = time(NULL);\n  struct tm tm;\n#if defined(_POSIX_TIMERS)\n  localtime_r(&t, &tm);\n#else\n  {\n    struct tm *tmp = localtime(&t);\n    if (tmp != NULL)\n      tm = *tmp;\n  }\n#endif\n\n  fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d pid=%d: \",\n          tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n          tm.tm_hour, tm.tm_min, tm.tm_sec, (int)getpid());\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fprintf(f, \"\\n\");\n  fflush(f);\n  fclose(f);\n}\n\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  /* Log entry and relevant state before any action */\n  mhd_log_probe(\"ENTER MHD_resume_connection: connection=%p daemon=%p options=0x%08x connection->resuming=%d daemon->resuming=%d\",\n                (void *)connection, (void *)daemon,\n                (unsigned int)daemon->options,\n                (int)(connection->resuming), (int)(daemon->resuming));\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) {\n    mhd_log_probe(\"PANIC: suspend/resume not allowed (options=0x%08x)\", (unsigned int)daemon->options);\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n\n  /* Log previous values before modification */\n  mhd_log_probe(\"Before set: connection->resuming=%d daemon->resuming=%d\",\n                (int)(connection->resuming), (int)(daemon->resuming));\n\n  connection->resuming = true;\n  daemon->resuming = true;\n\n  /* Log after write to capture that the field was written */\n  mhd_log_probe(\"After set: connection->resuming=%d daemon->resuming=%d\",\n                (int)(connection->resuming), (int)(daemon->resuming));\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n    mhd_log_probe(\"MHD_itc_activate_ returned failure for daemon->itc=%p\", (void *)daemon->itc);\n  } else {\n    /* Log both the case when itc is invalid and when activation succeeded */\n    if (! MHD_ITC_IS_VALID_ (daemon->itc))\n      mhd_log_probe(\"No valid ITC present (daemon->itc=%p)\", (void *)daemon->itc);\n    else\n      mhd_log_probe(\"ITC activation succeeded for daemon->itc=%p\", (void *)daemon->itc);\n  }\n\n  mhd_log_probe(\"EXIT MHD_resume_connection: connection->resuming=%d daemon->resuming=%d\",\n                (int)(connection->resuming), (int)(daemon->resuming));\n}\n"
}