{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of compress_buf:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No unreachable code fragments were found in the provided function. Rationale:\n\n- The outer loop (do { ... } while (flush != Z_SYNC_FLUSH);) uses a locally assigned variable flush that is set to Z_NO_FLUSH when src_size > CHUNK and to Z_SYNC_FLUSH when src_size <= CHUNK. Both branches are reachable depending on src_size, and the loop terminates when the final chunk sets flush to Z_SYNC_FLUSH.\n\n- The inner loop is a do { ... } while (0 == strm->avail_out); so it is guaranteed to execute at least once (do/while), ensuring ret is assigned inside the inner loop before the enclosing function can return ret at the end.\n\n- The realloc(NULL) / free and early return path (if tmp_dest == NULL) is reachable and correctly returns early; code following that return is not present in the same block and therefore not unreachable.\n\n- There are no unconditional returns or breaks that would make subsequent statements in the function unreachable. All control-flow branches (both if/else branches, inner and outer loops, and the realloc failure path) are reachable under some input conditions.\n\nNotes (not treated as unreachable-code findings):\n- The function does not advance the src pointer between outer-loop iterations (it only decrements src_size and updates *offset). That is a potential logic/functional bug but not an unreachable-code issue under MISRA Rule 2.1.\n- If CHUNK were zero (not shown in the snippet), the loops could misbehave; ensure CHUNK > 0. This is a precondition check, not an instance of unreachable code.\n\nGiven the above, there are no code fragments in this function that appear to be statically unreachable and therefore none need investigation for MISRA C 2023 Rule 2.1."
}