{
  "user_message": "An agent A claimed that the following MHD_upgrade_action code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_upgrade_action.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n\n  if (NULL == urh)\n    return MHD_NO;\n  connection = urh->connection;\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n    return MHD_NO;\n  daemon = connection->daemon;\n  if (NULL == daemon)\n    return MHD_NO;\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (urh->was_closed)\n      return MHD_NO; /* Already closed. */\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           true) ? MHD_YES : MHD_NO;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           false) ? MHD_YES : MHD_NO;\n  default:\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local variable is declared as a non-const pointer: \"struct MHD_Daemon *daemon;\" and is assigned from connection->daemon. In the shown code the pointer is only used for read-only access (daemon->options is inspected), so it could and should be declared as a pointer to const (e.g. \"const struct MHD_Daemon *daemon = connection->daemon;\") to satisfy MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nstage=after_urh_check urh=0x55b72d7d14a0 connection=(nil) daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_connection_check urh=0x55b72d7d14a0 connection=0x55b72d7c8df0 daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_daemon_check urh=0x55b72d7d14a0 connection=0x55b72d7c8df0 daemon=0x55b72d7c8830 action=0 options=0x0000a401 TLS=0 was_closed=0\nstage=marked_app_closed urh=0x55b72d7d14a0 connection=0x55b72d7c8df0 daemon=0x55b72d7c8830 action=0 options=0x0000a401 TLS=0 was_closed=1\nstage=after_urh_check urh=0x55b72d7d14c0 connection=(nil) daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_connection_check urh=0x55b72d7d14c0 connection=0x55b72d7d1a80 daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_daemon_check urh=0x55b72d7d14c0 connection=0x55b72d7d1a80 daemon=0x55b72d7d1600 action=0 options=0x0001a601 TLS=0 was_closed=0\nstage=marked_app_closed urh=0x55b72d7d14c0 connection=0x55b72d7d1a80 daemon=0x55b72d7d1600 action=0 options=0x0001a601 TLS=0 was_closed=1\nstage=after_urh_check urh=0x55b72d7c8cb0 connection=(nil) daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_connection_check urh=0x55b72d7c8cb0 connection=0x55b72d7c9090 daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_daemon_check urh=0x55b72d7c8cb0 connection=0x55b72d7c9090 daemon=0x55b72d7d1e10 action=0 options=0x0000a601 TLS=0 was_closed=0\nstage=marked_app_closed urh=0x55b72d7c8cb0 connection=0x55b72d7c9090 daemon=0x55b72d7d1e10 action=0 options=0x0000a601 TLS=0 was_closed=1\nstage=after_urh_check urh=0x7fb864000d30 connection=(nil) daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_connection_check urh=0x7fb864000d30 connection=0x7fb85c000b70 daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_daemon_check urh=0x7fb864000d30 connection=0x7fb85c000b70 daemon=0x55b72d7c92e0 action=0 options=0x0000a40d TLS=0 was_closed=0\nstage=marked_app_closed urh=0x7fb864000d30 connection=0x7fb85c000b70 daemon=0x55b72d7c92e0 action=0 options=0x0000a40d TLS=0 was_closed=1\nstage=after_urh_check urh=0x7fb864000cf0 connection=(nil) daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_connection_check urh=0x7fb864000cf0 connection=0x7fb85c000b70 daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_daemon_check urh=0x7fb864000cf0 connection=0x7fb85c000b70 daemon=0x55b72d7c9760 action=0 options=0x0001a44d TLS=0 was_closed=0\nstage=marked_app_closed urh=0x7fb864000cf0 connection=0x7fb85c000b70 daemon=0x55b72d7c9760 action=0 options=0x0001a44d TLS=0 was_closed=1\nstage=after_urh_check urh=0x7fb858000d30 connection=(nil) daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_connection_check urh=0x7fb858000d30 connection=0x7fb85c000b70 daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_daemon_check urh=0x7fb858000d30 connection=0x7fb85c000b70 daemon=0x55b72d7c9ba0 action=0 options=0x0000a44d TLS=0 was_closed=0\nstage=marked_app_closed urh=0x7fb858000d30 connection=0x7fb85c000b70 daemon=0x55b72d7c9ba0 action=0 options=0x0000a44d TLS=0 was_closed=1\nstage=after_urh_check urh=0x7fb85c009100 connection=(nil) daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_connection_check urh=0x7fb85c009100 connection=0x7fb85c000b70 daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_daemon_check urh=0x7fb85c009100 connection=0x7fb85c000b70 daemon=0x55b72d7c9fe0 action=0 options=0x0000a409 TLS=0 was_closed=0\nstage=marked_app_closed urh=0x7fb85c009100 connection=0x7fb85c000b70 daemon=0x55b72d7c9fe0 action=0 options=0x0000a409 TLS=0 was_closed=1\nstage=after_urh_check urh=0x7fb85c009100 connection=(nil) daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_connection_check urh=0x7fb85c009100 connection=0x7fb85c000b70 daemon=(nil) action=0 options=0x00000000 TLS=0 was_closed=0\nstage=after_daemon_check urh=0x7fb85c009100 connection=0x7fb85c000b70 daemon=0x55b72d7cab08 action=0 options=0x0000a409 TLS=0 was_closed=0\nst\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In MHD_upgrade_action the local variable \"daemon\" is declared as \"struct MHD_Daemon *daemon;\" but is only used for read-only access (NULL check and reading daemon->options). MISRA C 2023 Rule 8.13 recommends that pointers point to const-qualified types whenever possible, so this should be declared as a pointer to const: e.g. \"const struct MHD_Daemon *daemon = connection->daemon;\". That change is safe (adding const is allowed when assigning a non-const object pointer to a pointer-to-const) unless other code not shown later in the function modifies the daemon object via that pointer or passes it to APIs requiring a non-const pointer. Given the shown code and the execution log (which only shows reads of daemon->options), the report of a Rule 8.13 violation is correct."
}