{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_upgrade_action:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n\n  if (NULL == urh)\n    return MHD_NO;\n  connection = urh->connection;\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n    return MHD_NO;\n  daemon = connection->daemon;\n  if (NULL == daemon)\n    return MHD_NO;\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (urh->was_closed)\n      return MHD_NO; /* Already closed. */\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           true) ? MHD_YES : MHD_NO;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           false) ? MHD_YES : MHD_NO;\n  default:\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return MHD_connection_set_cork_state_ (connection,\n                                           false) ? MHD_YES : MHD_NO;",
    "connection = urh->connection;",
    "struct MHD_Connection *connection;",
    "_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{",
    "struct MHD_Daemon *daemon;",
    "MHD_upgraded_connection_mark_app_closed_ (connection);",
    "shutdown (urh->app.socket,\n                SHUT_RDWR);",
    "mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);",
    "return MHD_connection_set_cork_state_ (connection,\n                                           true) ? MHD_YES : MHD_NO;",
    "daemon = connection->daemon;"
  ],
  "explanation": "Fragments not listed do not need investigation for Rule 8.13 because they do not introduce pointer types whose const qualification could be changed, or they clearly perform runtime checks/returns or operate on non-pointer data: - NULL checks and immediate returns (e.g. \"if (NULL == urh)\", \"if (NULL == connection)\", \"if (NULL == daemon)\") are pointer-validity checks, not declarations \u2014 they don't affect whether a pointer type should be const-qualified. - Switch/case labels, return constants (MHD_YES/MHD_NO), comments and preprocessor conditionals (e.g. #ifdef HTTPS_SUPPORT) are structural/flow constructs unrelated to pointer constness. - The shutdown call argument is a socket integer field access (urh->app.socket) \u2014 the call passes an integer, not a pointer type to be const-qualified. - The switch branches and simple boolean expressions/returns (besides the function calls that accept the connection pointer, which are included above) do not declare or introduce pointer types whose const qualification could be tightened. The listed fragments cover all places where pointer types are declared, assigned, dereferenced, or passed to functions in this function and thus are the relevant locations to investigate for possible const qualification per MISRA C Rule 8.13."
}