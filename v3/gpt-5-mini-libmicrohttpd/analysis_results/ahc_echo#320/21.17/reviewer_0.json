{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN,\n                                                80,\n                                                &data_generator, NULL, NULL);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nCalling strcmp(method, \"GET\") without ensuring 'method' is non-NULL and NUL-terminated can cause out-of-bounds access. For example, if method == NULL or method points to a buffer that is not NUL-terminated, strcmp will read beyond the object bounds (or dereference NULL), violating Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is not correct in this context. Rule 21.17 forbids passing pointers to <string.h> routines in a way that can lead to out\u2011of\u2011bounds accesses. strcmp(method, \"GET\") will only be problematic if 'method' is NULL or not NUL\u2011terminated (so strcmp would dereference NULL or read past the object bounds). In this case 'method' is an argument supplied by the MHD access\u2011handler callback (the libmicrohttpd API) and is documented/used as a NUL\u2011terminated method string (e.g. \"GET\"). The string literal \"GET\" is NUL\u2011terminated and obviously in bounds. Therefore, assuming the library API contract that provides a valid, NUL\u2011terminated method string, the call does not violate Rule 21.17. (If there were no such API guarantee, the code would need to check method != NULL and/or ensure termination before calling strcmp; a conservative static analyser might still flag this if it does not model the API preconditions.)"
}