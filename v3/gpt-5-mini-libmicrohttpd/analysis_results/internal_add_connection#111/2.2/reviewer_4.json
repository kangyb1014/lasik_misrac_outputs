{
  "user_message": "An agent A claimed that the following internal_add_connection code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of internal_add_connection.\n```c\nstatic enum MHD_Result\ninternal_add_connection (struct MHD_Daemon *daemon,\n                         MHD_socket client_socket,\n                         const struct sockaddr_storage *addr,\n                         socklen_t addrlen,\n                         bool external_add,\n                         bool non_blck,\n                         bool sk_spipe_supprs,\n                         enum MHD_tristate sk_is_nonip)\n{\n  struct MHD_Connection *connection;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Direct add to master daemon could never happen. */\n  mhd_assert (NULL == daemon->worker_pool);\n#endif\n\n  if (MHD_D_IS_USING_SELECT_ (daemon) &&\n      (! MHD_D_DOES_SCKT_FIT_FDSET_ (client_socket, daemon)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"New connection socket descriptor (%d) is not less \" \\\n                 \"than FD_SETSIZE (%d).\\n\"),\n              (int) client_socket,\n              (int) MHD_D_GET_FD_SETSIZE_ (daemon));\n#endif\n    MHD_socket_close_chk_ (client_socket);\n#if defined(ENFILE) && (ENFILE + 0 != 0)\n    errno = ENFILE;\n#endif\n    return MHD_NO;\n  }\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (! non_blck) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Epoll mode supports only non-blocking sockets\\n\"));\n#endif\n    MHD_socket_close_chk_ (client_socket);\n#if defined(EINVAL) && (EINVAL + 0 != 0)\n    errno = EINVAL;\n#endif\n    return MHD_NO;\n  }\n\n  connection = new_connection_prepare_ (daemon,\n                                        client_socket,\n                                        addr, addrlen,\n                                        external_add,\n                                        non_blck,\n                                        sk_spipe_supprs,\n                                        sk_is_nonip);\n  if (NULL == connection)\n    return MHD_NO;\n\n  if ((external_add) &&\n      MHD_D_IS_THREAD_SAFE_ (daemon))\n  {\n    /* Connection is added externally and MHD is thread safe mode. */\n    MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n    DLL_insert (daemon->new_connections_head,\n                daemon->new_connections_tail,\n                connection);\n    daemon->have_new = true;\n    MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n\n    /* The rest of connection processing must be handled in\n     * the daemon thread. */\n    if ((MHD_ITC_IS_VALID_ (daemon->itc)) &&\n        (! MHD_itc_activate_ (daemon->itc, \"n\")))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal new connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n    return MHD_YES;\n  }\n\n  return new_connection_process_ (daemon, connection);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is implemented as a diagnostic/assertion macro that is compiled out or defined as a no-op in production builds (for example when NDEBUG is set), then the statement mhd_assert(NULL == daemon->worker_pool); only reads a field (no side-effects) and its removal would not affect program behaviour. In that configuration the assertion is dead code and thus violates MISRA C 2023 Rule 2.2. (If, however, mhd_assert performs observable actions such as logging or aborting on failure, it would not be dead code.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb893c0 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8a670 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8a8c0 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8ab10 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8ad60 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8afb0 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b200 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_connection: at assertion site: daemon=0x560b5fb888d0, daemon->worker_pool=(nil)\n[1112] internal_add_connection: processing connection 0x560b5fb8b450 in-line\n[1112] internal_add_conne\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough information is provided to conclude a definite MISRA 2.2 violation. Whether the single mhd_assert call is \u201cdead code\u201d depends entirely on how mhd_assert is defined in the project:\n\n- If mhd_assert expands to an expression with observable behaviour (logging, raising a diagnostic, aborting, calling a handler, etc.), then it is not dead code and there is no Rule 2.2 violation.\n- If mhd_assert expands to ((void)0) (completely compiled out), the statement is not present in the compiled program and thus is not executed \u2014 again not a dead-code violation as defined by Rule 2.2 (dead code is an operation that is executed but removable without effect).\n- If mhd_assert is defined so that it evaluates the expression (reads daemon->worker_pool) but otherwise has no observable effect (for example (void)(condition)), then that executed read would be an operation whose removal would not change program behaviour and would meet the definition of dead code \u2014 in that specific configuration it would violate Rule 2.2.\n\nThe provided execution log actually shows the assertion producing diagnostics (it logs the assertion site and values), which indicates mhd_assert in that build is not a no-op. Given the code excerpt and log, Agent A\u2019s claim (that this specific assertion is dead code) is therefore not demonstrated: it may be true under some hypothetical mhd_assert implementations, but it is not generally true for the project without further evidence of mhd_assert being implemented as an executed, side-effect-free read.\n\nConclusion: the reported violation is not proven; it may be possible in some configurations, but the report as stated is not correct absent confirmation of a side-effect-free mhd_assert implementation."
}