{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a pointer parameter 'struct MHD_Connection *c' but only reads from the object (accesses c->suspended, c->connection_timeout_ms, c->last_activity and c->daemon) and never modifies *c. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible. The parameter should be declared as 'const struct MHD_Connection *c' (e.g. static bool connection_check_timedout(const struct MHD_Connection *c)).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_check_timedout code that contains useful probe functions that print useful logs to a file \"/tmp/logs/313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_check_timedout as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_check_timedout:\n```c\nstatic bool\nconnection_check_timedout (struct MHD_Connection *c)\n{\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t now;\n  uint64_t since_actv;\n\n  if (c->suspended)\n    return false;\n  if (0 == timeout)\n    return false;\n  now = MHD_monotonic_msec_counter ();\n  since_actv = now - c->last_activity;\n  /* Keep the next lines in sync with #connection_get_wait() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (c->daemon,\n                  _ (\"Detected system clock %u milliseconds jump back.\\n\"),\n                  (unsigned int) jump_back);\n#endif\n        return false;\n      }\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (c->daemon,\n                _ (\"Detected too large system clock %\" PRIu64 \" milliseconds \"\n                   \"jump back.\\n\"),\n                jump_back);\n#endif\n    }\n    return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified connection_check_timedout code.\n",
  "test_code": "static void connection_check_log(const struct MHD_Connection *c,\n                                     const char *stage,\n                                     unsigned long long timeout,\n                                     unsigned long long now,\n                                     unsigned long long since_actv,\n                                     unsigned long long jump_back)\n{\n  FILE *f = fopen(\"/tmp/logs/313.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"[connection_check_timedout] stage=%s\\n\", stage);\n    fprintf(f, \"  suspended=%d timeout=%llu now=%llu last_activity=%llu since_actv=%llu\\n\",\n            c->suspended ? 1 : 0,\n            timeout,\n            now,\n            (unsigned long long)c->last_activity,\n            since_actv);\n    fprintf(f, \"  daemon=%p jump_back=%llu\\n\", (void *)c->daemon, jump_back);\n    fclose(f);\n  }\n}\n\nstatic bool\nconnection_check_timedout (struct MHD_Connection *c)\n{\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t now;\n  uint64_t since_actv;\n\n  /* Log entry state */\n  connection_check_log(c, \"entry\", (unsigned long long)timeout, 0U, 0U, 0U);\n\n  if (c->suspended)\n  {\n    connection_check_log(c, \"suspended_return_false\", (unsigned long long)timeout, 0U, 0U, 0U);\n    return false;\n  }\n  if (0 == timeout)\n  {\n    connection_check_log(c, \"timeout_zero_return_false\", (unsigned long long)timeout, 0U, 0U, 0U);\n    return false;\n  }\n  now = MHD_monotonic_msec_counter ();\n  since_actv = now - c->last_activity;\n\n  /* Log after computing now and since_actv */\n  connection_check_log(c, \"computed_now_since_actv\", (unsigned long long)timeout, (unsigned long long)now, (unsigned long long)since_actv, 0U);\n\n  /* Keep the next lines in sync with #connection_get_wait() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    /* Log branch: timed out candidate */\n    connection_check_log(c, \"timedout_branch_enter\", (unsigned long long)timeout, (unsigned long long)now, (unsigned long long)since_actv, 0U);\n\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n\n      /* Log possible jump back value */\n      connection_check_log(c, \"possible_jump_back\", (unsigned long long)timeout, (unsigned long long)now, (unsigned long long)since_actv, (unsigned long long)jump_back);\n\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (c->daemon,\n                  _ (\"Detected system clock %u milliseconds jump back.\\n\"),\n                  (unsigned int) jump_back);\n#endif\n        connection_check_log(c, \"jump_back_small_return_false\", (unsigned long long)timeout, (unsigned long long)now, (unsigned long long)since_actv, (unsigned long long)jump_back);\n        return false;\n      }\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (c->daemon,\n                _ (\"Detected too large system clock %\" PRIu64 \" milliseconds \"\n                   \"jump back.\\n\"),\n                jump_back);\n#endif\n      /* Log that we detected a too large clock jump back and will continue to return true */\n      connection_check_log(c, \"jump_back_large_continue\", (unsigned long long)timeout, (unsigned long long)now, (unsigned long long)since_actv, (unsigned long long)jump_back);\n    }\n    connection_check_log(c, \"timedout_return_true\", (unsigned long long)timeout, (unsigned long long)now, (unsigned long long)since_actv, 0U);\n    return true;\n  }\n\n  connection_check_log(c, \"no_timeout_return_false\", (unsigned long long)timeout, (unsigned long long)now, (unsigned long long)since_actv, 0U);\n  return false;\n}\n"
}