{
  "user_message": "An agent A claimed that the following connection_check_timedout code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of connection_check_timedout.\n```c\nstatic bool\nconnection_check_timedout (struct MHD_Connection *c)\n{\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t now;\n  uint64_t since_actv;\n\n  if (c->suspended)\n    return false;\n  if (0 == timeout)\n    return false;\n  now = MHD_monotonic_msec_counter ();\n  since_actv = now - c->last_activity;\n  /* Keep the next lines in sync with #connection_get_wait() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (c->daemon,\n                  _ (\"Detected system clock %u milliseconds jump back.\\n\"),\n                  (unsigned int) jump_back);\n#endif\n        return false;\n      }\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (c->daemon,\n                _ (\"Detected too large system clock %\" PRIu64 \" milliseconds \"\n                   \"jump back.\\n\"),\n                jump_back);\n#endif\n    }\n    return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes a string literal (the result of the _() translation macro) to MHD_DLOG. If either the _() macro/gettext returns a plain char * or MHD_DLOG's corresponding parameter is declared as char * (non-const), then a pointer to a non-const-qualified type is being used when a const-qualified pointer is appropriate (string literals and translation literals should be treated as const char *). In that situation Rule 8.13 is violated. If, however, MHD_DLOG's prototype accepts a const char * (and _() yields const char *), there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter: conn=0x55c3b3d531e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d531e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d531e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d531e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d531e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d531e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d531e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d531e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d531e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d54490 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d54490 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d54490 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d54490 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d54490 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d54490 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d54490 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d54490 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d54490 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d546e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d546e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d546e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d546e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d546e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d546e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d546e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d546e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d546e0 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d54930 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d54930 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d54930 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d54930 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d54930 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nwill_return_false: conn=0x55c3b3d54930 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=379 since_actv=0\nenter: conn=0x55c3b3d54930 daemon=0x55c3b3d528d0 suspended=0 timeout=5000 last_activity=379 now=0 since_actv=0\ntime_computed: conn=0x55c3b3d54930 daemon=0x55c3b3d528d0 s\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 8.13 requires that pointer types should be const-qualified whenever the pointed-to object is not modified through that pointer. In the provided function the parameter is declared as\n  struct MHD_Connection *c\nbut the function only reads members of *c and does not modify the object. Therefore the parameter should be declared as\n  const struct MHD_Connection *c\nand the current declaration violates Rule 8.13.\n\nAgent A\u2019s scenario about passing a translated string (_()) to MHD_DLOG is only a secondary, speculative possibility: if _() or MHD_DLOG are declared to return/take non-const char * where a const char * would be appropriate, that could also be a Rule 8.13 concern. However nothing in the snippet proves that \u2014 the definite and local violation is the non-const pointer parameter. In short: there is a Rule 8.13 violation, but not necessarily for the reason Agent A emphasized (the string literal/gettext issue is possible but not shown)."
}