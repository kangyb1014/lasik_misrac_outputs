{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of connection_check_timedout:\n```c\nstatic bool\nconnection_check_timedout (struct MHD_Connection *c)\n{\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t now;\n  uint64_t since_actv;\n\n  if (c->suspended)\n    return false;\n  if (0 == timeout)\n    return false;\n  now = MHD_monotonic_msec_counter ();\n  since_actv = now - c->last_activity;\n  /* Keep the next lines in sync with #connection_get_wait() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (c->daemon,\n                  _ (\"Detected system clock %u milliseconds jump back.\\n\"),\n                  (unsigned int) jump_back);\n#endif\n        return false;\n      }\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (c->daemon,\n                _ (\"Detected too large system clock %\" PRIu64 \" milliseconds \"\n                   \"jump back.\\n\"),\n                jump_back);\n#endif\n    }\n    return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment modifies the function parameter 'c' (the pointer itself). The function only reads members of *c (e.g., c->connection_timeout_ms, c->suspended, c->last_activity, c->daemon) and passes c to logging macros; there are no assignments to 'c' (no 'c =', '++c', '--c', or similar), nor is the pointer stored into or altered. Local variables (timeout, now, since_actv, jump_back) are assigned and manipulated, which is allowed. Modifying the object pointed to by the parameter would be permitted by Rule 17.8, and no such modifications occur here either. Therefore there are no fragments that need investigation for violation of MISRA C 2023 Rule 17.8."
}