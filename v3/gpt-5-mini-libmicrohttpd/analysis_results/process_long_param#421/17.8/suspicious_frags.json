{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of process_long_param:\n```c\nstatic enum PerfRepl_param_result\nprocess_long_param (const char *param, const char *next_param)\n{\n  const size_t param_len = strlen (param);\n\n  if ((MHD_STATICSTR_LEN_ (\"all-cpus\") == param_len) &&\n      (0 == memcmp (param, \"all-cpus\", MHD_STATICSTR_LEN_ (\"all-cpus\"))))\n    return process_param__all_cpus (\"--all-cpus\");\n  else if ((MHD_STATICSTR_LEN_ (\"threads\") <= param_len) &&\n           (0 == memcmp (param, \"threads\", MHD_STATICSTR_LEN_ (\"threads\"))))\n    return process_param__threads (\"--threads\",\n                                   param + MHD_STATICSTR_LEN_ (\"threads\"),\n                                   next_param);\n  else if ((MHD_STATICSTR_LEN_ (\"thread-per-conn\") == param_len) &&\n           (0 == memcmp (param, \"thread-per-conn\",\n                         MHD_STATICSTR_LEN_ (\"thread-per-conn\"))))\n    return process_param__thread_per_conn (\"--thread-per-conn\");\n  else if ((MHD_STATICSTR_LEN_ (\"epoll\") == param_len) &&\n           (0 == memcmp (param, \"epoll\", MHD_STATICSTR_LEN_ (\"epoll\"))))\n    return process_param__epoll (\"--epoll\");\n  else if ((MHD_STATICSTR_LEN_ (\"poll\") == param_len) &&\n           (0 == memcmp (param, \"poll\", MHD_STATICSTR_LEN_ (\"poll\"))))\n    return process_param__poll (\"--poll\");\n  else if ((MHD_STATICSTR_LEN_ (\"select\") == param_len) &&\n           (0 == memcmp (param, \"select\", MHD_STATICSTR_LEN_ (\"select\"))))\n    return process_param__select (\"--select\");\n  else if ((MHD_STATICSTR_LEN_ (\"empty\") == param_len) &&\n           (0 == memcmp (param, \"empty\", MHD_STATICSTR_LEN_ (\"empty\"))))\n    return process_param__empty (\"--empty\");\n  else if ((MHD_STATICSTR_LEN_ (\"tiny\") == param_len) &&\n           (0 == memcmp (param, \"tiny\", MHD_STATICSTR_LEN_ (\"tiny\"))))\n    return process_param__tiny (\"--tiny\");\n  else if ((MHD_STATICSTR_LEN_ (\"medium\") == param_len) &&\n           (0 == memcmp (param, \"medium\", MHD_STATICSTR_LEN_ (\"medium\"))))\n    return process_param__medium (\"--medium\");\n  else if ((MHD_STATICSTR_LEN_ (\"large\") == param_len) &&\n           (0 == memcmp (param, \"large\", MHD_STATICSTR_LEN_ (\"large\"))))\n    return process_param__large (\"--large\");\n  else if ((MHD_STATICSTR_LEN_ (\"shared\") == param_len) &&\n           (0 == memcmp (param, \"shared\", MHD_STATICSTR_LEN_ (\"shared\"))))\n    return process_param__shared (\"--shared\");\n  else if ((MHD_STATICSTR_LEN_ (\"single\") == param_len) &&\n           (0 == memcmp (param, \"single\", MHD_STATICSTR_LEN_ (\"single\"))))\n    return process_param__single (\"--single\");\n  else if ((MHD_STATICSTR_LEN_ (\"unique\") == param_len) &&\n           (0 == memcmp (param, \"unique\", MHD_STATICSTR_LEN_ (\"unique\"))))\n    return process_param__unique (\"--unique\");\n  else if ((MHD_STATICSTR_LEN_ (\"connections\") <= param_len) &&\n           (0 == memcmp (param, \"connections\",\n                         MHD_STATICSTR_LEN_ (\"connections\"))))\n    return process_param__connections (\"--connections\",\n                                       param\n                                       + MHD_STATICSTR_LEN_ (\"connections\"),\n                                       next_param);\n  else if ((MHD_STATICSTR_LEN_ (\"timeout\") <= param_len) &&\n           (0 == memcmp (param, \"timeout\",\n                         MHD_STATICSTR_LEN_ (\"timeout\"))))\n    return process_param__timeout (\"--timeout\",\n                                   param + MHD_STATICSTR_LEN_ (\"timeout\"),\n                                   next_param);\n  else if ((MHD_STATICSTR_LEN_ (\"date-header\") == param_len) &&\n           (0 == memcmp (param, \"date-header\",\n                         MHD_STATICSTR_LEN_ (\"date-header\"))))\n    return process_param__date_header (\"--date-header\");\n  else if ((MHD_STATICSTR_LEN_ (\"help\") == param_len) &&\n           (0 == memcmp (param, \"help\", MHD_STATICSTR_LEN_ (\"help\"))))\n    return process_param__help (\"--help\");\n  else if ((MHD_STATICSTR_LEN_ (\"version\") == param_len) &&\n           (0 == memcmp (param, \"version\", MHD_STATICSTR_LEN_ (\"version\"))))\n    return process_param__version (\"--version\");\n\n  fprintf (stderr, \"Unrecognised parameter: --%s.\\n\", param);\n  return PERF_RPL_PARAM_ERROR;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code in process_long_param modifies the function parameters. The parameters are declared as const char *param and const char *next_param and are only: read (strlen, memcmp), used in pointer arithmetic expressions (param + ...), or passed to other functions. Pointer arithmetic (creating param + N) does not assign to or change the parameter variable itself. There are no assignments (e.g., param = ...), increments/decrements (param++/--), or modifications of next_param in this function. Therefore there are no fragments here that violate MISRA C 2023 Rule 17.8 (a function parameter should not be modified)."
}