{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64s:\n```c\n_MHD_EXTERN int64_t\nMHD_get_timeout64s (struct MHD_Daemon *daemon)\n{\n  uint64_t utimeout;\n  if (MHD_NO == MHD_get_timeout64 (daemon, &utimeout))\n    return -1;\n  if (INT64_MAX < utimeout)\n    return INT64_MAX;\n\n  return (int64_t) utimeout;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (MHD_NO == MHD_get_timeout64 (daemon, &utimeout))\n    return -1;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The conditional return is reachable whenever MHD_get_timeout64(daemon,&utimeout) returns MHD_NO. There is no evidence in the fragment that the call is a compile-time constant or that MHD_NO can never be returned, so the return statement is not unreachable. (A violation would occur only if MHD_get_timeout64 were known at compile time to always return a value not equal to MHD_NO, e.g. a macro or inline function that expands to a constant expression, making the if-body dead code.)"
}