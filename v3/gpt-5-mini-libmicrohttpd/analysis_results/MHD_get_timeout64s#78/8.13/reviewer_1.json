{
  "user_message": "An agent A claimed that the following MHD_get_timeout64s code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_timeout64s.\n```c\n_MHD_EXTERN int64_t\nMHD_get_timeout64s (struct MHD_Daemon *daemon)\n{\n  uint64_t utimeout;\n  if (MHD_NO == MHD_get_timeout64 (daemon, &utimeout))\n    return -1;\n  if (INT64_MAX < utimeout)\n    return INT64_MAX;\n\n  return (int64_t) utimeout;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MHD_Daemon *daemon' is not const-qualified even though the function body does not modify the daemon object (it only passes it to MHD_get_timeout64 and uses it read-only). According to MISRA C 2023 Rule 8.13, the parameter should be declared as 'const struct MHD_Daemon *daemon' when the pointed-to object is not modified.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not sufficiently justified. Rule 8.13 advises that a pointer parameter should be to a const-qualified type when the pointed-to object is not modified, but you cannot determine that from the shown code alone because the daemon pointer is forwarded to MHD_get_timeout64(daemon, &utimeout). If MHD_get_timeout64\u2018s parameter is non-const or may modify the daemon (or the function is part of a public API whose signature must remain non-const), then the non-const parameter here is appropriate. In short: A\u2019s claim assumes the pointed object is never modified, but that assumption is not established by the snippet; therefore the report cannot be concluded correct without examining MHD_get_timeout64\u2019s declaration/semantics or API constraints."
}