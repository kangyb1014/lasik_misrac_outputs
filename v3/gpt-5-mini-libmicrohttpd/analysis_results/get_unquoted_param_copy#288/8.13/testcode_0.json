{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy source is param->value.str accessed via a const struct pointer, but the member itself is not const-qualified (likely declared as char *str). The code reads from that buffer only, so the pointer should point to a const-qualified type (const char *) to show the data is not modified. Passing a non-const char * as memcpy source thus violates MISRA C 2023 Rule 8.13. Suggested fix: declare the member as const char *str (or use a local const char *src = param->value.str) so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param_copy code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_unquoted_param_copy as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param_copy:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL == unquoted->str)\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  if (! param->quoted)\n  {\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\nPlease provide the modified get_unquoted_param_copy code.\n",
  "test_code": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: write up to max_print bytes from buffer to log in both\n   hex and printable ASCII form. Does not modify the buffer. */\nstatic void probe_log_buffer(FILE *f, const char *label, const char *buf, size_t len, size_t max_print)\n{\n  size_t i, n = len < max_print ? len : max_print;\n\n  fprintf(f, \"%s: len=%zu, show=%zu\\n\", label, len, n);\n  fprintf(f, \"%s: hex=\", label);\n  for (i = 0; i < n; ++i)\n  {\n    fprintf(f, \"%02x\", (unsigned char)buf[i]);\n    if ((i + 1) % 32 == 0 && (i + 1) < n)\n      fprintf(f, \" \");\n  }\n  fprintf(f, \"\\n\");\n\n  fprintf(f, \"%s: ascii=\\\"\", label);\n  for (i = 0; i < n; ++i)\n  {\n    int c = (unsigned char)buf[i];\n    fputc(isprint(c) ? c : '.', f);\n  }\n  if (n < len)\n    fprintf(f, \"... (truncated)\");\n  fprintf(f, \"\\\"\\n\");\n}\n\nstatic void probe_log_open_and_prefix(FILE **pf, const char *stage)\n{\n  *pf = fopen(\"/tmp/logs/2883.txt\", \"a\");\n  if (NULL != *pf)\n  {\n    fprintf(*pf, \"--- %s ---\\n\", stage);\n  }\n}\n\nstatic void probe_log_close(FILE *f)\n{\n  if (NULL != f)\n  {\n    fprintf(f, \"--- end ---\\n\\n\");\n    fclose(f);\n  }\n}\n\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  FILE *logf = NULL;\n\n  /* Preserve original assertions */\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  probe_log_open_and_prefix(&logf, \"enter get_unquoted_param_copy\");\n  if (NULL != logf)\n  {\n    /* Log key pointers and flags to capture control flow information */\n    fprintf(logf, \"param=%p, &param->value=%p, param->value.str=%p, param->value.len=%zu, param->quoted=%d\\n\",\n            (const void *)param,\n            (const void *)&param->value,\n            (const void *)param->value.str,\n            (size_t)param->value.len,\n            (int)param->quoted);\n    fprintf(logf, \"tmp1=%p, ptmp2=%p, ptmp2_size=%p, unquoted=%p\\n\",\n            (void *)tmp1,\n            (void *)ptmp2,\n            (void *)ptmp2_size,\n            (void *)unquoted);\n\n    /* Log a short sample of the source buffer (do not assume NUL-termination). */\n    probe_log_buffer(logf, \"param->value.str (sample)\", param->value.str, param->value.len, 128);\n  }\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL == unquoted->str)\n  {\n    enum _MHD_GetUnqResult ret = (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n    if (NULL != logf)\n    {\n      fprintf(logf, \"get_buffer_for_size returned NULL; requested_size=%zu, returning=%d\\n\",\n              (size_t)(param->value.len + 1), (int)ret);\n      probe_log_close(logf);\n    }\n    return ret;\n  }\n\n  if (! param->quoted)\n  {\n    /* Copy without unquoting. Use a local const pointer to emphasize that the\n       source is only read (evidence for const-qualification requirement). */\n    const char *src = param->value.str;\n\n    if (NULL != logf)\n    {\n      fprintf(logf, \"branch: not quoted -> memcpy path\\n\");\n      fprintf(logf, \"unquoted->str=%p (dest), src=%p, len=%zu\\n\",\n              (void *)unquoted->str, (const void *)src, (size_t)param->value.len);\n      probe_log_buffer(logf, \"copy source (sample)\", src, param->value.len, 256);\n    }\n\n    memcpy (unquoted->str, src, param->value.len);\n    unquoted->len = param->value.len;\n\n    if (NULL != logf)\n    {\n      probe_log_buffer(logf, \"dest after memcpy (sample)\", unquoted->str, unquoted->len, 256);\n      fprintf(logf, \"returning _MHD_UNQ_OK (not quoted), unquoted->len=%zu\\n\", unquoted->len);\n      probe_log_close(logf);\n    }\n\n    return _MHD_UNQ_OK;\n  }\n\n  if (NULL != logf)\n    fprintf(logf, \"branch: quoted -> unquote path\\n\");\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"MHD_str_unquote returned len=%zu\\n\", unquoted->len);\n    probe_log_buffer(logf, \"unquoted->str (sample)\", unquoted->str, unquoted->len, 256);\n  }\n\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"returning _MHD_UNQ_OK (quoted), unquoted->len=%zu\\n\", unquoted->len);\n    probe_log_close(logf);\n  }\n\n  return _MHD_UNQ_OK;\n}\n"
}