{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member param->value.str is declared as 'char *' (not 'const char *') and it is used only as an input to MHD_str_unquote (i.e. the function does not modify the source), then Rule 8.13 is violated: the pointer should be to a const-qualified type (const char *) because the data is only read. For example, with struct MHD_RqDAuthParam { char *str; size_t len; } and MHD_str_unquote(src, len, dst) reading from src, passing param->value.str should use const char * to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param_copy code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_unquoted_param_copy as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param_copy:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL == unquoted->str)\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  if (! param->quoted)\n  {\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\nPlease provide the modified get_unquoted_param_copy code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append a text log to /tmp/logs/2883.txt with key state info. */\nstatic void\n_mhd_log_unq_state (const char *stage,\n                     const void *param_ptr,\n                     const void *value_str_ptr,\n                     size_t value_len,\n                     int quoted,\n                     const void *tmp1_ptr,\n                     const void *ptmp2_ptr,\n                     const void *ptmp2_deref,\n                     const void *ptmp2_size_ptr,\n                     size_t ptmp2_size_val,\n                     const void *unq_str_ptr,\n                     size_t unq_len)\n{\n  FILE *f = fopen(\"/tmp/logs/2883.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[get_unquoted_param_copy] stage=%s\\n\", stage);\n  fprintf (f, \"  param=%p value.str=%p value.len=%zu quoted=%d\\n\",\n           param_ptr, value_str_ptr, value_len, quoted);\n  fprintf (f, \"  tmp1=%p ptmp2=%p (*ptmp2)=%p ptmp2_size_ptr=%p (*ptmp2_size)=%zu\\n\",\n           tmp1_ptr, ptmp2_ptr, ptmp2_deref, ptmp2_size_ptr, ptmp2_size_val);\n  fprintf (f, \"  unquoted->str=%p unquoted->len=%zu\\n\",\n           unq_str_ptr, unq_len);\n\n  /* If value_str_ptr is non-NULL, print up to first 32 bytes in hex (safe read). */\n  if (NULL != value_str_ptr && value_len > 0)\n    {\n      const unsigned char *s = (const unsigned char *) value_str_ptr;\n      size_t to_print = value_len < 32u ? value_len : 32u;\n      fprintf (f, \"  value.str first %zu bytes (hex):\", to_print);\n      for (size_t i = 0; i < to_print; ++i)\n        fprintf (f, \" %02x\", (unsigned) s[i]);\n      fprintf (f, \"\\n\");\n    }\n\n  fflush (f);\n  fclose (f);\n}\n\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  /* Log entry state */\n  _mhd_log_unq_state (\"entry\",\n                      (const void *) param,\n                      (const void *) param->value.str,\n                      param->value.len,\n                      (int) param->quoted,\n                      (const void *) tmp1,\n                      (const void *) ptmp2,\n                      (const void *) ((NULL != ptmp2) ? (void *) *ptmp2 : NULL),\n                      (const void *) ptmp2_size,\n                      (NULL != ptmp2_size) ? *ptmp2_size : 0u,\n                      (const void *) (unquoted ? unquoted->str : NULL),\n                      (unquoted ? unquoted->len : 0u));\n\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  /* Log after buffer allocation */\n  _mhd_log_unq_state (\"after_get_buffer_for_size\",\n                      (const void *) param,\n                      (const void *) param->value.str,\n                      param->value.len,\n                      (int) param->quoted,\n                      (const void *) tmp1,\n                      (const void *) ptmp2,\n                      (const void *) ((NULL != ptmp2) ? (void *) *ptmp2 : NULL),\n                      (const void *) ptmp2_size,\n                      (NULL != ptmp2_size) ? *ptmp2_size : 0u,\n                      (const void *) unquoted->str,\n                      unquoted->len);\n\n  if (NULL == unquoted->str)\n    {\n      /* Log reason for failure and return */\n      _mhd_log_unq_state (\"alloc_failed\",\n                          (const void *) param,\n                          (const void *) param->value.str,\n                          param->value.len,\n                          (int) param->quoted,\n                          (const void *) tmp1,\n                          (const void *) ptmp2,\n                          (const void *) ((NULL != ptmp2) ? (void *) *ptmp2 : NULL),\n                          (const void *) ptmp2_size,\n                          (NULL != ptmp2_size) ? *ptmp2_size : 0u,\n                          (const void *) unquoted->str,\n                          unquoted->len);\n\n      return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n             _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n    }\n\n  if (! param->quoted)\n    {\n      memcpy (unquoted->str, param->value.str, param->value.len);\n      unquoted->len = param->value.len;\n\n      /* Log the non-quoted fast path */\n      _mhd_log_unq_state (\"non_quoted_copied\",\n                          (const void *) param,\n                          (const void *) param->value.str,\n                          param->value.len,\n                          (int) param->quoted,\n                          (const void *) tmp1,\n                          (const void *) ptmp2,\n                          (const void *) ((NULL != ptmp2) ? (void *) *ptmp2 : NULL),\n                          (const void *) ptmp2_size,\n                          (NULL != ptmp2_size) ? *ptmp2_size : 0u,\n                          (const void *) unquoted->str,\n                          unquoted->len);\n\n      return _MHD_UNQ_OK;\n    }\n\n  /* Quoted: unquote into the allocated buffer */\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n\n  /* Log after unquoting */\n  _mhd_log_unq_state (\"after_unquote\",\n                      (const void *) param,\n                      (const void *) param->value.str,\n                      param->value.len,\n                      (int) param->quoted,\n                      (const void *) tmp1,\n                      (const void *) ptmp2,\n                      (const void *) ((NULL != ptmp2) ? (void *) *ptmp2 : NULL),\n                      (const void *) ptmp2_size,\n                      (NULL != ptmp2_size) ? *ptmp2_size : 0u,\n                      (const void *) unquoted->str,\n                      unquoted->len);\n\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n"
}