{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 potential out-of-bounds when memcpy copies param->value.len bytes. The code allocates unquoted->str using get_buffer_for_size(..., param->value.len + 1) but does not check for size_t overflow of (param->value.len + 1). If param->value.len is SIZE_MAX (or otherwise large enough to cause wraparound), the requested size can wrap to a much smaller value (even 0), causing get_buffer_for_size to return a buffer smaller than param->value.len. The subsequent memcpy(unquoted->str, param->value.str, param->value.len) would then write beyond the destination buffer (and/or read beyond the source), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param_copy code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2889.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_unquoted_param_copy as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param_copy:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL == unquoted->str)\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  if (! param->quoted)\n  {\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\nPlease provide the modified get_unquoted_param_copy code.\n",
  "test_code": "static void mhd_probe_log(const char *stage,\n                              const struct MHD_RqDAuthParam *param,\n                              char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                              char **ptmp2, size_t *ptmp2_size,\n                              struct _MHD_mstr_w_len *unquoted,\n                              const char *note)\n{\n  /* declare stdio prototypes to avoid implicit declaration warnings */\n  FILE *(*fp_open)(const char *, const char *) = (FILE *(*)(const char *, const char *)) fopen;\n  int (*fp_printf)(FILE *, const char *, ...) = (int (*)(FILE *, const char *, ...)) fprintf;\n  int (*fp_close)(FILE *) = (int (*)(FILE *)) fclose;\n\n  FILE *f = NULL;\n  if (fp_open != NULL)\n    f = fp_open(\"/tmp/logs/2889.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Safe prints: cast pointers to void*; guard optional pointers */\n  void *valstr = (void *)(param ? param->value.str : NULL);\n  size_t vallen = (param ? param->value.len : (size_t)0);\n  int quoted = (param ? (int)param->quoted : 0);\n  void *ubuf = (void *)(unquoted ? unquoted->str : NULL);\n  size_t ulen = (unquoted ? unquoted->len : (size_t)0);\n  void *p2 = (ptmp2 && *ptmp2) ? (void *)(*ptmp2) : NULL;\n  size_t p2s = (ptmp2_size && ptmp2_size) ? *ptmp2_size : (size_t)0;\n\n  fp_printf(f,\n            \"[mhd_probe] stage=%s note=%s param->value.str=%p param->value.len=%zu param->quoted=%d tmp1=%p unquoted->str=%p unquoted->len=%zu *ptmp2=%p *ptmp2_size=%zu\\n\",\n            stage ? stage : \"(null)\", note ? note : \"(none)\", valstr, vallen, quoted,\n            (void *)tmp1, ubuf, ulen, p2, p2s);\n\n  fp_close(f);\n}\n\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* Log entry state */\n  mhd_probe_log(\"entry\", param, tmp1, ptmp2, ptmp2_size, unquoted, \"function entry\");\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n\n  /* Detect potential size_t overflow for logging */\n  if (param->value.len == (size_t)-1)\n    mhd_probe_log(\"pre_alloc\", param, tmp1, ptmp2, ptmp2_size, unquoted, \"param->value.len == SIZE_MAX (overflow likely when +1)\");\n\n  /* Log before allocation with requested size (may wrap) */\n  {\n    size_t requested = param->value.len + 1u;\n    char notebuf[128];\n    /* note: snprintf may be available in TU; keep note brief */\n    (void) snprintf(notebuf, sizeof(notebuf), \"requested=%zu (param->value.len+1)\", requested);\n    mhd_probe_log(\"before_alloc\", param, tmp1, ptmp2, ptmp2_size, unquoted, notebuf);\n  }\n\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  /* Log after allocation attempt */\n  mhd_probe_log(\"after_alloc\", param, tmp1, ptmp2, ptmp2_size, unquoted, \"after get_buffer_for_size\");\n\n  if (NULL == unquoted->str)\n  {\n    /* Log failure path with the same requested size (wrap-around visible here) */\n    size_t requested = param->value.len + 1u;\n    char notebuf[128];\n    (void) snprintf(notebuf, sizeof(notebuf), \"allocation failed requested=%zu\", requested);\n    mhd_probe_log(\"alloc_failed\", param, tmp1, ptmp2, ptmp2_size, unquoted, notebuf);\n\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n  }\n\n  if (! param->quoted)\n  {\n    /* Log about to copy unquoted non-quoted value */\n    {\n      char notebuf[128];\n      (void) snprintf(notebuf, sizeof(notebuf), \"about to memcpy len=%zu\", param->value.len);\n      mhd_probe_log(\"pre_memcpy\", param, tmp1, ptmp2, ptmp2_size, unquoted, notebuf);\n    }\n\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n\n    /* Log after memcpy */\n    mhd_probe_log(\"post_memcpy\", param, tmp1, ptmp2, ptmp2_size, unquoted, \"copied non-quoted value\");\n\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n\n  mhd_probe_log(\"after_unquote\", param, tmp1, ptmp2, ptmp2_size, unquoted, \"after MHD_str_unquote\");\n\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n"
}