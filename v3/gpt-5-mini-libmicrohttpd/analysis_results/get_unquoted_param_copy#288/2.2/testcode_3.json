{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion is executed solely to check a condition that is already guaranteed by the function contract or earlier checks. If param->value.str is always non-NULL in normal operation, the mhd_assert(NULL != param->value.str); has no side effects and its removal would not affect program behaviour \u2014 therefore it is dead code. (Also, if mhd_assert is a debug-only macro that expands to no code in production, the check is redundant in builds where it is enabled and has no effect on program state when the condition is true.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param_copy code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2882.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_unquoted_param_copy as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param_copy:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL == unquoted->str)\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  if (! param->quoted)\n  {\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\nPlease provide the modified get_unquoted_param_copy code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Lightweight probe logger: append textual logs to /tmp/logs/2882.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2882.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n\n  fclose(f);\n}\n\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  /* Log entry and incoming parameter state */\n  probe_log(\"ENTER get_unquoted_param_copy: param=%p, tmp1=%p, ptmp2=%p, ptmp2_size=%p, unquoted=%p\",\n            (void *)param, (void *)tmp1, (void *)ptmp2, (void *)ptmp2_size, (void *)unquoted);\n\n  if (NULL != param)\n  {\n    probe_log(\"param->value.str=%p, param->value.len=%zu, param->quoted=%d\",\n              (void *)param->value.str, (size_t)param->value.len, (int)param->quoted);\n  }\n  else\n  {\n    probe_log(\"param is NULL\");\n  }\n\n  /* Preserve original assertions but log their expected conditions first */\n  probe_log(\"ABOUT TO ASSERT: NULL != param->value.str (current: %p)\", (void *)param->value.str);\n  mhd_assert (NULL != param->value.str);\n  probe_log(\"ASSERT PASSED: param->value.str is non-NULL: %p\", (void *)param->value.str);\n\n  probe_log(\"ABOUT TO ASSERT: 0 != param->value.len (current: %zu)\", (size_t)param->value.len);\n  mhd_assert (0 != param->value.len);\n  probe_log(\"ASSERT PASSED: param->value.len is non-zero: %zu\", (size_t)param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  probe_log(\"get_buffer_for_size requested=%zu returned=%p ptmp2=%p ptmp2_size=%zu\",\n            (size_t)(param->value.len + 1), (void *)unquoted->str,\n            (void *)ptmp2, (ptmp2_size ? *ptmp2_size : 0));\n\n  if (NULL == unquoted->str)\n  {\n    enum _MHD_GetUnqResult r = (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n                               _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n    probe_log(\"BUFFER ALLOCATION FAILED: result=%d (len+1=%zu)\", (int)r, (size_t)(param->value.len + 1));\n    return r;\n  }\n\n  if (! param->quoted)\n  {\n    probe_log(\"NOT QUOTED PATH: copying %zu bytes from %p to %p\",\n              (size_t)param->value.len, (void *)param->value.str, (void *)unquoted->str);\n\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n\n    /* Null-terminate the copied buffer for safer logging/inspection */\n    unquoted->str[unquoted->len] = '\\0';\n    probe_log(\"NOT QUOTED DONE: unquoted->len=%zu, sample='%s'\",\n              (size_t)unquoted->len, unquoted->str);\n\n    probe_log(\"RETURN _MHD_UNQ_OK (not quoted)\");\n    return _MHD_UNQ_OK;\n  }\n\n  probe_log(\"QUOTED PATH: calling MHD_str_unquote on %p len=%zu -> dest %p\",\n            (void *)param->value.str, (size_t)param->value.len, (void *)unquoted->str);\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n\n  /* Ensure null-termination for logging convenience (get_buffer_for_size allocated +1) */\n  if (unquoted->str)\n  {\n    size_t safe_len = (unquoted->len < param->value.len) ? unquoted->len : param->value.len;\n    unquoted->str[safe_len] = '\\0';\n    probe_log(\"MHD_str_unquote returned len=%zu (param len=%zu), sample='%s'\",\n              (size_t)unquoted->len, (size_t)param->value.len, unquoted->str);\n  }\n  else\n  {\n    probe_log(\"MHD_str_unquote returned with NULL destination (unexpected)\");\n  }\n\n  probe_log(\"ABOUT TO ASSERT: 0 != unquoted->len (current: %zu)\", (size_t)unquoted->len);\n  mhd_assert (0 != unquoted->len);\n  probe_log(\"ASSERT PASSED: unquoted->len is non-zero: %zu\", (size_t)unquoted->len);\n\n  probe_log(\"ABOUT TO ASSERT: unquoted->len < param->value.len (current: %zu < %zu)\",\n            (size_t)unquoted->len, (size_t)param->value.len);\n  mhd_assert (unquoted->len < param->value.len);\n  probe_log(\"ASSERT PASSED: unquoted->len < param->value.len: %zu < %zu\",\n            (size_t)unquoted->len, (size_t)param->value.len);\n\n  probe_log(\"RETURN _MHD_UNQ_OK (quoted)\");\n  return _MHD_UNQ_OK;\n}\n"
}