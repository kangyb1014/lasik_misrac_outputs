{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function returns a non-const pointer to an object (struct MHD_Daemon *). If the returned daemon pointer refers to internal state that callers must not modify (e.g. an opaque daemon instance managed by the library), then the pointer should be to a const-qualified type (const struct MHD_Daemon *) to prevent inadvertent modification. In that common API case the declaration violates MISRA C 2023 Rule 8.13. If, however, callers are expected to modify the returned structure, then const would be inappropriate and the rule would not apply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_start_daemon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/993.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_start_daemon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_start_daemon:\n```c\n_MHD_EXTERN struct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n\n  va_start (ap,\n            dh_cls);\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n  va_end (ap);\n  return daemon;\n}\n```\n</target_code>\nPlease provide the modified MHD_start_daemon code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <time.h>\n\n_MHD_EXTERN struct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n  FILE *logf = fopen(\"/tmp/logs/993.txt\", \"a\");\n  if (logf != NULL)\n  {\n    time_t now = time(NULL);\n    fprintf(logf, \"\\n[ENTRY] MHD_start_daemon called: time=%ld\\n\", (long)now);\n    fprintf(logf, \"  flags=0x%X, port=%u\\n\", flags, (unsigned)port);\n    fprintf(logf, \"  apc=%p, apc_cls=%p\\n\", (void *)apc, apc_cls);\n    fprintf(logf, \"  dh=%p, dh_cls=%p\\n\", (void *)dh, dh_cls);\n    fflush(logf);\n    /* Note: Do not inspect or consume variadic arguments here; they are\n       forwarded to MHD_start_daemon_va. */\n  }\n\n  va_start (ap,\n            dh_cls);\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"  va_list started, about to call MHD_start_daemon_va\\n\");\n    fflush(logf);\n  }\n\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n\n  va_end (ap);\n\n  if (logf != NULL)\n  {\n    if (daemon != NULL)\n    {\n      fprintf(logf, \"  returned daemon pointer = %p\\n\", (void *)daemon);\n      fprintf(logf, \"  NOTE: Returned pointer is non-const; callers may be able to modify internal state.\\n\");\n    }\n    else\n    {\n      fprintf(logf, \"  returned daemon pointer = NULL\\n\");\n    }\n    fflush(logf);\n    fclose(logf);\n  }\n\n  return daemon;\n}\n"
}