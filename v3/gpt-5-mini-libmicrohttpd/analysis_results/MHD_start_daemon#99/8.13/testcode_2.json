{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_start_daemon does not modify the object pointed to by apc_cls (it only stores and forwards it to callbacks), then apc_cls should be declared as 'const void *apc_cls'. In that case the current declaration 'void *apc_cls' violates MISRA C 2023 Rule 8.13 because the pointer could/should point to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_start_daemon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/993.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_start_daemon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_start_daemon:\n```c\n_MHD_EXTERN struct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n\n  va_start (ap,\n            dh_cls);\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n  va_end (ap);\n  return daemon;\n}\n```\n</target_code>\nPlease provide the modified MHD_start_daemon code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Minimal forward declarations to make this translation unit compilable.\n   In the real project these types are defined elsewhere; we avoid changing\n   the original API surface here. */\n\nstruct MHD_Daemon; /* opaque */\n\ntypedef int (*MHD_AcceptPolicyCallback)(void);\ntypedef int (*MHD_AccessHandlerCallback)(void);\n\n/* Prototype for the va-variants used by the original implementation. */\nextern struct MHD_Daemon *\nMHD_start_daemon_va (unsigned int flags,\n                     uint16_t port,\n                     MHD_AcceptPolicyCallback apc,\n                     void *apc_cls,\n                     MHD_AccessHandlerCallback dh,\n                     void *dh_cls,\n                     va_list ap);\n\n/* Simple probe logger that appends to /tmp/logs/993.txt.\n   Keeps the original function logic but records control flow and state. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/993.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* Best-effort: if logging fails, do not alter program behavior. */\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n/* The modified MHD_start_daemon with inserted probes. The original\n   control flow and calls are preserved exactly; logging is added only\n   to observe parameters passed (including apc_cls) and the returned\n   daemon pointer. */\nstruct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n\n  /* Log entry and parameter state. apc_cls is the pointer under\n     inspection for MISRA Rule 8.13 (should be const-qualified if\n     it is not modified). We log its value (address) and related\n     callback pointers to allow reproducing the forwarding behavior. */\n  probe_log(\"ENTER MHD_start_daemon: flags=%u, port=%\" PRIu16 \", apc=%p, apc_cls=%p, dh=%p, dh_cls=%p\",\n            flags, port, (void *) apc, (void *) apc_cls, (void *) dh, (void *) dh_cls);\n\n  va_start (ap, dh_cls);\n\n  /* Record a snapshot of apc_cls before forwarding into the va variant. */\n  probe_log(\"Before call: apc_cls=%p\", (void *) apc_cls);\n\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n\n  /* After the call, log the returned daemon pointer and re-check apc_cls.\n     This demonstrates that this wrapper function does not modify apc_cls\n     (it simply forwards it). The logged identical values are evidence\n     to inspect whether apc_cls should have been declared const-qualified. */\n  probe_log(\"After call: daemon=%p\", (void *) daemon);\n  probe_log(\"After call: apc_cls=%p\", (void *) apc_cls);\n\n  va_end (ap);\n\n  probe_log(\"EXIT MHD_start_daemon: returning daemon=%p\", (void *) daemon);\n  return daemon;\n}\n"
}