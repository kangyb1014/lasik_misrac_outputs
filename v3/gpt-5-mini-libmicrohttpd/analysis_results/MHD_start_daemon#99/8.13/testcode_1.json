{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter declaration 'void *dh_cls' is not const-qualified. If the daemon and any callbacks treat the object pointed-to by dh_cls as read-only (i.e. they do not modify the pointee), then this violates MISRA C 2023 Rule 8.13. The compliant fix is to declare the parameter as 'const void *dh_cls' and propagate the const qualifier to any related callback types and forwarding functions (e.g. MHD_start_daemon_va). If the pointee must be modified, then the current declaration is acceptable but a documented justification is required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_start_daemon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/993.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_start_daemon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_start_daemon:\n```c\n_MHD_EXTERN struct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n\n  va_start (ap,\n            dh_cls);\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n  va_end (ap);\n  return daemon;\n}\n```\n</target_code>\nPlease provide the modified MHD_start_daemon code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Minimal forward declarations so this translation unit compiles. */\nstruct MHD_Daemon;\n\ntypedef int (*MHD_AcceptPolicyCallback)(void);\ntypedef int (*MHD_AccessHandlerCallback)(void);\n\n/* External variadic-va_list entrypoint provided by the original library. */\nextern struct MHD_Daemon *\nMHD_start_daemon_va (unsigned int flags,\n                     uint16_t port,\n                     MHD_AcceptPolicyCallback apc,\n                     void *apc_cls,\n                     MHD_AccessHandlerCallback dh,\n                     void *dh_cls,\n                     va_list ap);\n\n/* Helper: append a log line to /tmp/logs/993.txt capturing control flow and state.\n   Uses const-qualified pointer parameters where possible to avoid introducing\n   new pointer-to-non-const issues. */\nstatic void\nmhd_log_state(const char *stage,\n              unsigned int flags,\n              uint16_t port,\n              MHD_AcceptPolicyCallback apc,\n              const void *apc_cls,\n              MHD_AccessHandlerCallback dh,\n              const void *dh_cls,\n              const char *extra)\n{\n  FILE *fp = fopen(\"/tmp/logs/993.txt\", \"a\");\n  if (fp == NULL)\n  {\n    /* If logging fails, do not alter program flow. */\n    return;\n  }\n\n  /* Timestamp for easier correlation. */\n  time_t t = time(NULL);\n  struct tm tm_buf;\n  (void)localtime_r(&t, &tm_buf);\n\n  fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d: %s\\n\",\n          tm_buf.tm_year + 1900,\n          tm_buf.tm_mon + 1,\n          tm_buf.tm_mday,\n          tm_buf.tm_hour,\n          tm_buf.tm_min,\n          tm_buf.tm_sec,\n          stage);\n\n  /* Log key state values relevant to the reported violation scenario. */\n  fprintf(fp, \"  flags=%u port=%\" PRIu16 \"\\n\", flags, port);\n\n  /* Print callback and closure pointer addresses. Cast to uintptr_t for safe printing. */\n  fprintf(fp, \"  apc=%p apc_cls=%#\" PRIxPTR \"\\n\",\n          (void *)apc, (uintptr_t)apc_cls);\n  fprintf(fp, \"  dh=%p dh_cls=%#\" PRIxPTR \"\\n\",\n          (void *)dh, (uintptr_t)dh_cls);\n\n  /* Note whether dh_cls is NULL and whether it is likely treated read-only (observed here as not-modified by logger).\n     This is observational: the logger doesn't modify dh_cls; it only records its value. */\n  fprintf(fp, \"  dh_cls_is_null=%s\\n\", (dh_cls == NULL) ? \"yes\" : \"no\");\n\n  if (extra != NULL)\n    fprintf(fp, \"  extra=%s\\n\", extra);\n\n  fprintf(fp, \"---\\n\");\n  fclose(fp);\n}\n\n/* Modified MHD_start_daemon with logging probes inserted.  The original logic is preserved;\n   we only add logging before and after the call to MHD_start_daemon_va. */\nstruct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n\n  /* Log entry state: incoming parameters and pointer values. */\n  mhd_log_state(\"enter MHD_start_daemon\",\n                flags,\n                port,\n                apc,\n                apc_cls,\n                dh,\n                dh_cls,\n                \"About to start va_list and forward to MHD_start_daemon_va\");\n\n  va_start (ap,\n            dh_cls);\n\n  /* Log that we've started handling variadic args. We do not attempt to inspect ap (it's opaque),\n     but record the transition so control flow is evident in logs. */\n  mhd_log_state(\"after va_start (before MHD_start_daemon_va)\",\n                flags,\n                port,\n                apc,\n                apc_cls,\n                dh,\n                dh_cls,\n                \"va_list initialized\");\n\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n\n  va_end (ap);\n\n  /* Log return value and final state. */\n  {\n    char extra_buf[128];\n    (void)snprintf(extra_buf, sizeof(extra_buf), \"MHD_start_daemon_va returned=%p\", (void *)daemon);\n    mhd_log_state(\"exit MHD_start_daemon\",\n                  flags,\n                  port,\n                  apc,\n                  apc_cls,\n                  dh,\n                  dh_cls,\n                  extra_buf);\n  }\n\n  return daemon;\n}\n"
}