{
  "user_message": "An agent A claimed that the following run_usock code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of run_usock.\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct MyData *md = cls;\n  struct MHD_UpgradeResponseHandle *urh = md->urh;\n  char buf[128];\n  ssize_t got;\n\n  make_blocking (md->sock);\n  /* start by sending extra data MHD may have already read, if any */\n  if (0 != md->extra_in_size)\n  {\n    send_all (md->sock,\n              md->extra_in,\n              md->extra_in_size);\n    free (md->extra_in);\n  }\n  /* now echo in a loop */\n  while (1)\n  {\n    got = recv (md->sock,\n                buf,\n                sizeof (buf),\n                0);\n    if (0 >= got)\n      break;\n    send_all (md->sock,\n              buf,\n              (size_t) got);\n  }\n  free (md);\n  MHD_upgrade_action (urh,\n                      MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the definition/prototype of send_all is something like send_all(int sock, void *buf, size_t len) or send_all(int sock, char *buf, size_t len) then Rule 8.13 is violated: the buffer is only being read by send_all and so its pointer parameter should be const-qualified (e.g. const void * or const char *) and callers should pass a pointer to const. If, however, send_all actually modifies the buffer, no violation occurs. In the absence of a const-qualified prototype for send_all, this call shows a likely violation (change send_all to take a const-qualified pointer).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's observation is a plausible and helpful *potential* MISRA 8.13 finding, but it cannot be confirmed from the code shown. MISRA C 2023 Rule 8.13 asks that pointer types be const-qualified when the pointed-to object is not modified. In run_usock the two calls\n  send_all(md->sock, md->extra_in, md->extra_in_size);\n  send_all(md->sock, buf, (size_t)got);\npass buffers that are only read by the caller. If the prototype/definition of send_all is e.g. send_all(int, void *, size_t) or send_all(int, char *, size_t) and send_all itself does not modify the data, then that prototype violates 8.13 and the report is correct: send_all should take a const-qualified pointer (const void * or const char *). However, if send_all does modify the provided buffer, then the non-const parameter is appropriate and there is no violation. Because the send_all declaration/definition is not provided, you cannot definitively say the shown run_usock code violates Rule 8.13 \u2014 only that there is a likely violation to be investigated. Recommended action: inspect the send_all prototype/definition and, if it does not modify the buffer, change its parameter to a const-qualified pointer and update callers."
}