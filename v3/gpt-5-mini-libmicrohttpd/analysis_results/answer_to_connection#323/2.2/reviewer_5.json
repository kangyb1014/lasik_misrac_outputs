{
  "user_message": "An agent A claimed that the following answer_to_connection code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of answer_to_connection.\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls,\n                      struct MHD_Connection *connection,\n                      const char *url,\n                      const char *method,\n                      const char *version,\n                      const char *upload_data,\n                      size_t *upload_data_size,\n                      void **req_cls)\n{\n  const char *page = \"<html><body>Hello timeout!</body></html>\";\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  (void) req_cls;           /* Unused. Silent compiler warning. */\n\n  response = MHD_create_response_from_buffer_static (strlen (page),\n                                                     (const void *) page);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               \"text/html\"))\n  {\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement '(void) cls;' is an executed no-op (an expression statement with no side-effects). Removing it would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2. (Same applies to the other '(void) ...' statements used solely to silence compiler warnings.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's literal argument \u2014 that the '(void) param;' statements are executed no-ops whose removal would not change program behaviour and therefore are dead code under Rule 2.2 \u2014 is not a correct characterization for MISRA compliance purposes. Those casts are an established, intentional idiom to document and suppress unused-parameter warnings. Although removing such an expression statement typically would not change observable behaviour (and so, by a purely literal reading of the rule wording, could be considered redundant), MISRA's intent is to forbid truly redundant/unused executable code that affects maintenance, reliability or timing. The '(void) param;' lines are harmless annotations with no side-effects for non-volatile parameters and are widely accepted as the correct way to document unused parameters (or else the parameter name can be omitted in the function prototype). If you need to be strictly pedantic for a particular MISRA enforcement tool, you can remove the parameter names (leave them unnamed in the signature), document the reason, or file a deviation. Overall: the report that these lines violate MISRA C 2023 Rule 2.2 is not correct."
}