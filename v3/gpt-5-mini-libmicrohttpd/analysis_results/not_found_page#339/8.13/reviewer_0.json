{
  "user_message": "An agent A claimed that the following not_found_page code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of not_found_page.\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct Session *session' is not const-qualified even though the function does not use or modify it (it is cast away with '(void) session;'). Per MISRA C 2023 Rule 8.13 it should be declared 'const struct Session *session' unless the function signature must match an external callback/API that requires a non-const pointer.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 indeed asks that pointers should point to const-qualified types whenever possible. However the rule recognises the practical exception where a function signature must match an external API or callback prototype (you cannot change the parameter type if the upstream API requires a non-const pointer). In this snippet the code calls MHD_* functions and the name not_found_page strongly suggests it is an HTTP handler/callback supplied to libmicrohttpd (or a similar API) whose required prototype likely declares that parameter as a non-const struct Session *. Given that, leaving the parameter as struct Session * is appropriate and the (void) session; is the correct way to mark it unused. If, contrary to that likely situation, this function is not constrained by any external prototype, then making the parameter const struct Session *session would satisfy Rule 8.13. But on the evidence shown (use of MHD API and typical handler pattern) the report is not correct: the API constraint exception applies."
}