{
  "user_message": "An agent A claimed that the following not_found_page code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of not_found_page.\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'session' is declared as 'struct Session *session' but is not used or modified in the function ((void) session). According to Rule 8.13 it should be const-qualified (e.g. 'const struct Session *session') when possible. (The other pointer parameters are already const where appropriate; 'connection' likely must remain non-const because it is passed to APIs that expect a modifiable connection.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Rule 8.13 requires pointers to be const\u2011qualified when the pointed object is not modified. In the shown function the parameter \"struct Session *session\" is not used (it is explicitly cast to void) and is not modified \u2014 so, absent other constraints, it should be declared as \"const struct Session *session\" to satisfy 8.13. Casting to void to silence an unused\u2011parameter warning does not satisfy the rule.\n\nOne important caveat: if this function must match an external callback or function\u2011pointer type that requires a non\u2011const \"struct Session *\" parameter, then you cannot change the signature and the apparent violation is justified. With only the snippet given, no such constraint is visible, so Agent A\u2019s report is correct in this context."
}