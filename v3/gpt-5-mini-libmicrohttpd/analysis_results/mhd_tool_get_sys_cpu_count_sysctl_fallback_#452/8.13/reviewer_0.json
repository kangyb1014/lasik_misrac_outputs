{
  "user_message": "An agent A claimed that the following mhd_tool_get_sys_cpu_count_sysctl_fallback_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of mhd_tool_get_sys_cpu_count_sysctl_fallback_.\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_sysctl_fallback_ (void)\n{\n  int ret = -1;\n  /* Do not use sysctl() function on GNU/Linux even if\n     sysctl() is available */\n#ifndef __linux__\n#ifdef HAVE_SYSCTLBYNAME\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    if ((0 != sysctlbyname (\"hw.ncpu\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTLBYNAME */\n#if defined(HAVE_SYSCTL) && \\\n  defined(HAS_DECL_CTL_HW) && \\\n  defined(HAS_DECL_HW_NCPU)\n  if (0 >= ret)\n  {\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    int mib[2] = {CTL_HW, HW_NCPU};\n    size_t value_size = sizeof (ret);\n    if ((0 != sysctl (mib, 2, &ret, &value_size, NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTL && HAS_DECL_CTL_HW && HAS_DECL_HW_NCPU */\n#endif /* ! __linux__ */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe array 'mib' is declared as 'int mib[2]' and passed to sysctl which has signature int sysctl(const int *name, u_int namelen, void *oldp, size_t *oldlenp, const void *newp, size_t newlen). 'mib' could and should be declared const int mib[2] since sysctl does not modify it, so the pointer should point to a const-qualified type.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 R8.13 concerns pointer types pointing to const-qualified targets where possible. In this code 'mib' is an array object (int mib[2]) that decays to a pointer when passed to sysctl. On many systems sysctl is declared as int sysctl(const int *name, ...), so passing a non-const array is allowed (an int * can convert to const int * for the call). However, on some platforms sysctl historically has a non-const prototype (int *name), so making the array const int mib[2] would be incorrect or force a cast to match that older prototype. Thus declaring mib as const is not universally \u201cpossible\u201d across the conditional portability context of this code and could break compatibility or require casts (which would themselves violate other MISRA rules). Also R8.13 targets pointer declarations (and use), not necessarily every array initializer that decays to a pointer. For these reasons the claim of a R8.13 violation is incorrect."
}