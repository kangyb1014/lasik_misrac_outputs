{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  enum MHD_Result comp;\n  size_t body_len;\n  char *body_str;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO; /* unexpected method */\n  if (! *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n\n  body_str = strdup (PAGE);\n  if (NULL == body_str)\n  {\n    return MHD_NO;\n  }\n  body_len = strlen (body_str);\n  /* try to compress the body */\n  comp = MHD_NO;\n  if (MHD_YES ==\n      can_compress (connection))\n    comp = body_compress ((void **) &body_str,\n                          &body_len);\n  response =\n    MHD_create_response_from_buffer_with_free_callback (body_len,\n                                                        body_str,\n                                                        &free);\n\n  if (NULL == response)\n  {\n    free (body_str);\n    return MHD_NO;\n  }\n\n  if (MHD_YES == comp)\n  {\n    /* Need to indicate to client that body is compressed */\n    if (MHD_NO ==\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_ENCODING,\n                                 \"deflate\"))\n    {\n      MHD_destroy_response (response);\n      return MHD_NO;\n    }\n  }\n  ret = MHD_queue_response (connection,\n                            200,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. The function has pointer parameters that are not modified and could be const-qualified. For example, the unused parameter 'void *cls' should be declared as 'const void *cls' and the unused 'size_t *upload_data_size' could be 'const size_t *upload_data_size'. (The 'void **req_cls' is modified so it cannot be const-qualified; 'struct MHD_Connection *connection' appears only as an input and could be const-qualified if the called APIs accept a const connection pointer, but that depends on their prototypes.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The ahc_echo function is a callback with a fixed signature imposed by the microhttpd API (the MHD_* callback prototype). Parameters such as void *cls and size_t *upload_data_size must use the types required by that API and cannot be changed locally to const without breaking the required prototype. In particular:\n- void **req_cls is intentionally modified by the callback and must not be const.\n- size_t *upload_data_size is part of the callback protocol (the library may inspect or expect the pointer to be writable) and therefore must remain non-const even if this implementation does not use it.\n- void *cls is an API-specified context pointer passed by the caller; its type must match the API, so it cannot be freely changed to const void * here.\n- struct MHD_Connection *connection is passed to library functions that expect a non-const pointer; you cannot promote it to const unless the library prototype permits it.\nMISRA Rule 8.13\u2019s intent is to prefer const where possible, but \u2018\u2018possible\u2019\u2019 does not require changing externally specified interfaces or breaking required callback prototypes. Given the function must match the external API, there is no violation here."
}