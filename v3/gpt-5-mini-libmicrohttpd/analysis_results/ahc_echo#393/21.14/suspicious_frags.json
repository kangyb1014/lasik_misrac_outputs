{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  enum MHD_Result comp;\n  size_t body_len;\n  char *body_str;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO; /* unexpected method */\n  if (! *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n\n  body_str = strdup (PAGE);\n  if (NULL == body_str)\n  {\n    return MHD_NO;\n  }\n  body_len = strlen (body_str);\n  /* try to compress the body */\n  comp = MHD_NO;\n  if (MHD_YES ==\n      can_compress (connection))\n    comp = body_compress ((void **) &body_str,\n                          &body_len);\n  response =\n    MHD_create_response_from_buffer_with_free_callback (body_len,\n                                                        body_str,\n                                                        &free);\n\n  if (NULL == response)\n  {\n    free (body_str);\n    return MHD_NO;\n  }\n\n  if (MHD_YES == comp)\n  {\n    /* Need to indicate to client that body is compressed */\n    if (MHD_NO ==\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_ENCODING,\n                                 \"deflate\"))\n    {\n      MHD_destroy_response (response);\n      return MHD_NO;\n    }\n  }\n  ret = MHD_queue_response (connection,\n                            200,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of memcmp in the provided function. The code compares strings with strcmp (method vs \"GET\"), which is the correct way to compare null\u2011terminated strings; there are no raw byte comparisons or memcmp calls that could violate MISRA C 2023 Rule 21.14. Other library calls (MHD_*, body_compress, can_compress) are external and not part of this translation unit; if those implementations use memcmp on null\u2011terminated strings that would need separate review, but within the given code fragment there are no suspicious memcmp usages to investigate."
}