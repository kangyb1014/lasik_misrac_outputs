{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mhd_assert macro evaluates the boolean expression at run-time but performs no action on success (no abort, no logging, no side-effects), then the call is executed yet its removal would not change program behaviour \u2014 the assertion merely checks a condition with no effect. In that configuration (mp_ptr_le_ has no side-effects and mhd_assert does not alter program state), the statement is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1382.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reset:\n```c\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n  return pool->memory;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_reset code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Helper probe function: append log entries to /tmp/logs/1382.txt. */\nstatic void\n_mhd_probe_log_assert(const char *label,\n                      const void *memory,\n                      const struct MemoryPool *pool,\n                      const void *keep,\n                      size_t copy_bytes,\n                      size_t new_size,\n                      int result,\n                      const char *expr_text)\n{\n  FILE *f = fopen(\"/tmp/logs/1382.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f,\n          \"%s: expr=(%s) result=%d pool=%p pool->pos=%zu pool->end=%zu pool->size=%zu keep=%p copy_bytes=%zu new_size=%zu\\n\",\n          label,\n          expr_text ? expr_text : \"\",\n          result,\n          (const void *) memory,\n          (size_t) (pool ? pool->pos : 0),\n          (size_t) (pool ? pool->end : 0),\n          (size_t) (pool ? pool->size : 0),\n          keep,\n          copy_bytes,\n          new_size);\n  fclose(f);\n}\n\nstatic void\n_mhd_probe_log_event(const char *label,\n                      const void *memory,\n                      const struct MemoryPool *pool,\n                      const void *keep,\n                      size_t copy_bytes,\n                      size_t new_size,\n                      const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/1382.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f,\n          \"%s: %s pool=%p pool->pos=%zu pool->end=%zu pool->size=%zu keep=%p copy_bytes=%zu new_size=%zu\\n\",\n          label,\n          msg ? msg : \"\",\n          (const void *) memory,\n          (size_t) (pool ? pool->pos : 0),\n          (size_t) (pool ? pool->end : 0),\n          (size_t) (pool ? pool->size : 0),\n          keep,\n          copy_bytes,\n          new_size);\n  fclose(f);\n}\n\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  /* Evaluate and log assertions (evaluate each expression only once). */\n  int __a1 = (pool->end >= pool->pos);\n  _mhd_probe_log_assert(\"MHD_ASSERT_1\", pool->memory, pool, keep, copy_bytes, new_size, __a1, \"pool->end >= pool->pos\");\n  mhd_assert(__a1);\n\n  int __a2 = (pool->size >= pool->end - pool->pos);\n  _mhd_probe_log_assert(\"MHD_ASSERT_2\", pool->memory, pool, keep, copy_bytes, new_size, __a2, \"pool->size >= pool->end - pool->pos\");\n  mhd_assert(__a2);\n\n  int __a3 = (copy_bytes <= new_size);\n  _mhd_probe_log_assert(\"MHD_ASSERT_3\", pool->memory, pool, keep, copy_bytes, new_size, __a3, \"copy_bytes <= new_size\");\n  mhd_assert(__a3);\n\n  int __a4 = (copy_bytes <= pool->size);\n  _mhd_probe_log_assert(\"MHD_ASSERT_4\", pool->memory, pool, keep, copy_bytes, new_size, __a4, \"copy_bytes <= pool->size\");\n  mhd_assert(__a4);\n\n  int __a5 = (keep != NULL || copy_bytes == 0);\n  _mhd_probe_log_assert(\"MHD_ASSERT_5\", pool->memory, pool, keep, copy_bytes, new_size, __a5, \"keep != NULL || copy_bytes == 0\");\n  mhd_assert(__a5);\n\n  /* mp_ptr_le_ may be an external predicate; evaluate once. */\n  int __mp_le = 0;\n  if (keep != NULL)\n    __mp_le = mp_ptr_le_ (pool->memory, keep);\n  else\n    __mp_le = 1; /* keep == NULL implies true for the assertion keep == NULL || mp_ptr_le_(...) */\n  int __a6 = (keep == NULL || __mp_le);\n  _mhd_probe_log_assert(\"MHD_ASSERT_6\", pool->memory, pool, keep, copy_bytes, new_size, __a6, \"keep == NULL || mp_ptr_le_(pool->memory, keep)\");\n  mhd_assert(__a6);\n\n  /* compute mp_ptr_diff_ only if needed and safe */\n  size_t __diff = 0;\n  if (keep != NULL)\n    __diff = mp_ptr_diff_ (keep, pool->memory);\n  int __a7 = ((keep == NULL) || (pool->size >= __diff + copy_bytes));\n  _mhd_probe_log_assert(\"MHD_ASSERT_7\", pool->memory, pool, keep, copy_bytes, new_size, __a7, \"(keep == NULL) || (pool->size >= mp_ptr_diff_(keep, pool->memory) + copy_bytes)\");\n  mhd_assert(__a7);\n\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  {\n    int __asan_ok = (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n    _mhd_probe_log_assert(\"MHD_ASSERT_ASAN\", pool->memory, pool, keep, copy_bytes, new_size, __asan_ok, \"NULL == __asan_region_is_poisoned(keep, copy_bytes)\");\n    mhd_assert(__asan_ok);\n  }\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n    {\n      _mhd_probe_log_event(\"MHD_EVENT\", pool->memory, pool, keep, copy_bytes, new_size, \"about to memmove\");\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n      _mhd_probe_log_event(\"MHD_EVENT\", pool->memory, pool, keep, copy_bytes, new_size, \"memmove done\");\n    }\n  }\n\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n\n        _mhd_probe_log_event(\"MHD_EVENT\", pool->memory, pool, keep, copy_bytes, new_size, \"VirtualFree/VirtualAlloc recommit succeeded\");\n      }\n      else\n      {\n        _mhd_probe_log_event(\"MHD_EVENT\", pool->memory, pool, keep, copy_bytes, new_size, \"VirtualFree failed or returned false\");\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n    _mhd_probe_log_event(\"MHD_EVENT\", pool->memory, pool, keep, copy_bytes, new_size, \"memset zero done\");\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n  _mhd_probe_log_event(\"MHD_EVENT\", pool->memory, pool, keep, copy_bytes, new_size, \"returning pool->memory\");\n  return pool->memory;\n}\n"
}