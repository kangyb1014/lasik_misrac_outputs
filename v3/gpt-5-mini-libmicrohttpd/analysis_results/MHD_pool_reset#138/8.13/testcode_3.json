{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'keep' is declared as void * but is only used for read-only operations (pointer comparisons, pointer-difference checks and as the source argument to memmove). It could and should be declared as const void *keep; therefore the code fragment violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reset:\n```c\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n  return pool->memory;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_reset code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper for MHD_pool_reset. Writes append-only logs to /tmp/logs/1383.txt */\nstatic void\nmhd_pool_reset_log_state (const char *stage,\n                           struct MemoryPool *pool,\n                           void *keep,\n                           size_t copy_bytes,\n                           size_t new_size)\n{\n  FILE *log = fopen(\"/tmp/logs/1383.txt\", \"a\");\n  if (NULL == log)\n    return; /* best-effort logging, do not alter program flow on error */\n\n  fprintf (log, \"[MHD_pool_reset] %s\\n\", stage);\n  fprintf (log, \"  pool=%p\\n\", (void *) pool);\n  if (pool != NULL)\n  {\n    fprintf (log, \"  pool->memory=%p\\n\", (void *) pool->memory);\n    fprintf (log, \"  pool->size=%zu\\n\", (size_t) pool->size);\n    fprintf (log, \"  pool->pos=%zu\\n\", (size_t) pool->pos);\n    fprintf (log, \"  pool->end=%zu\\n\", (size_t) pool->end);\n  }\n  fprintf (log, \"  keep=%p\\n\", (void *) keep);\n  fprintf (log, \"  copy_bytes=%zu\\n\", copy_bytes);\n  fprintf (log, \"  new_size=%zu\\n\", new_size);\n\n  /* Log some boolean conditions relevant to the reported violation */\n  fprintf (log, \"  condition: keep==NULL -> %s\\n\", (keep == NULL) ? \"true\" : \"false\");\n  fprintf (log, \"  condition: pool!=NULL && keep==pool->memory -> %s\\n\",\n           (pool != NULL && keep == pool->memory) ? \"true\" : \"false\");\n  if (pool != NULL && keep != NULL)\n  {\n    uintptr_t pool_mem = (uintptr_t) pool->memory;\n    uintptr_t keep_addr = (uintptr_t) keep;\n    if (keep_addr >= pool_mem)\n      fprintf (log, \"  pointer diff (keep - pool->memory) = %zu\\n\",\n               (size_t) (keep_addr - pool_mem));\n    else\n      fprintf (log, \"  pointer diff (keep - pool->memory) = negative (%td)\\n\",\n               (ptrdiff_t) (keep_addr - pool_mem));\n  }\n\n  fprintf (log, \"\\n\");\n  fclose (log);\n}\n\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  /* Log entry state before assertions so callers can reproduce conditions */\n  mhd_pool_reset_log_state (\"entry\", pool, keep, copy_bytes, new_size);\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n\n  /* Log just before the memmove decision is evaluated */\n  mhd_pool_reset_log_state (\"before_memmove_check\", pool, keep, copy_bytes, new_size);\n\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n    {\n      /* Log the memmove action and its parameters for reproducibility */\n      FILE *log = fopen(\"/tmp/logs/1383.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf (log, \"[MHD_pool_reset] calling memmove: dest=%p src=%p bytes=%zu\\n\",\n                 (void *) pool->memory, (void *) keep, copy_bytes);\n        fclose (log);\n      }\n\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n\n      /* Log after memmove to capture any state changes (though memmove is read-only on keep) */\n      mhd_pool_reset_log_state (\"after_memmove\", pool, keep, copy_bytes, new_size);\n    }\n  }\n\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n\n      /* Log VirtualFree attempt */\n      FILE *log = fopen(\"/tmp/logs/1383.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf (log, \"[MHD_pool_reset] Windows mmap branch: is_mmap=%d to_recommit=%zu recommit_addr=%p\\n\",\n                 (int) pool->is_mmap, to_recommit, (void *) recommit_addr);\n        fclose (log);\n      }\n\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n\n    /* Log after zeroing memory */\n    mhd_pool_reset_log_state (\"after_memset\", pool, keep, copy_bytes, new_size);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n\n  /* Final state log before return */\n  mhd_pool_reset_log_state (\"exit\", pool, keep, copy_bytes, new_size);\n  return pool->memory;\n}\n"
}