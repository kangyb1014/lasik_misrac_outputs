{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'keep' is declared as void *keep in MHD_pool_reset but is only used as a read-only pointer (passed to __asan_region_is_poisoned and used as the source in memmove). It could and should be declared const void *keep. Leaving it non-const therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reset:\n```c\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n  return pool->memory;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_reset code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state for MHD_pool_reset. */\nstatic void\nmhd_pool_reset_log_probe (struct MemoryPool *pool,\n                           void *keep,\n                           size_t copy_bytes,\n                           size_t new_size,\n                           const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/1383.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[MHD_POOL_RESET] stage=%s\\n\", stage);\n  fprintf (f, \"  pool=%p, pool->memory=%p, pool->pos=%zu, pool->end=%zu, pool->size=%zu\\n\",\n           (void *) pool, (void *) pool->memory, (size_t) pool->pos, (size_t) pool->end, (size_t) pool->size);\n  fprintf (f, \"  keep=%p, copy_bytes=%zu, new_size=%zu\\n\",\n           keep, copy_bytes, new_size);\n  fprintf (f, \"  keep_is_null=%s, keep_is_pool_memory=%s\\n\",\n           (keep == NULL) ? \"true\" : \"false\",\n           (keep == pool->memory) ? \"true\" : \"false\");\n\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  /* Log the ASAN region check result if available. */\n  void *asan_res = __asan_region_is_poisoned (keep, copy_bytes);\n  fprintf (f, \"  __asan_region_is_poisoned(keep, copy_bytes)=%p\\n\", asan_res);\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  fflush (f);\n  fclose (f);\n}\n\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  /* Log entry and initial state */\n  mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"entry\");\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  /* Log ASAN check before asserting */\n  mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"asan_check_before_assert\");\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n\n  /* Log right before potential memmove */\n  mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"before_memmove_check\");\n\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes) {\n      /* Log that memmove will be invoked */\n      mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"memmove_invoking\");\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n      /* Log after memmove completed */\n      mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"memmove_done\");\n    }\n  }\n\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n\n    /* Log the zeroing range */\n    mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"before_unpoison_zero\");\n\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        /* Log decommit success and intended recommit */\n        mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"virtualfree_succeeded\");\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n        /* Log recommit success */\n        mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"virtualalloc_succeeded\");\n      } else {\n        /* Log decommit failure */\n        mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"virtualfree_failed\");\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n\n    /* Log after zeroing */\n    mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"zero_done\");\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n\n  /* Final state log before returning */\n  mhd_pool_reset_log_probe (pool, keep, copy_bytes, new_size, \"return\");\n  return pool->memory;\n}\n"
}