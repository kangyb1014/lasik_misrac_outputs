{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'keep' is declared as void * but is only used as a read-only source (checked by assertions and passed as the source to memmove). It is never modified in this function, so it could (and should) be declared as const void *keep. Declaring it non-const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_reset as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reset:\n```c\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n  return pool->memory;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_reset code.\n",
  "test_code": "typedef struct __FILE FILE;\nextern FILE *fopen(const char *pathname, const char *mode);\nextern int fprintf(FILE *stream, const char *format, ...);\nextern int fclose(FILE *stream);\n\nstatic void\nmhd_log_pool_state(const char *stage,\n                   struct MemoryPool *pool,\n                   void *keep,\n                   size_t copy_bytes,\n                   size_t new_size,\n                   int memmove_taken,\n                   size_t to_zero)\n{\n  FILE *f = fopen(\"/tmp/logs/1383.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log control point and key state values useful to reproduce the violation */\n  fprintf(f, \"[MHD_pool_reset] %s\\n\", stage);\n  fprintf(f, \"  pool=%p\\n\", (void *) pool);\n  fprintf(f, \"  pool->memory=%p\\n\", (void *) pool->memory);\n  fprintf(f, \"  pool->pos=%zu\\n\", (size_t) pool->pos);\n  fprintf(f, \"  pool->end=%zu\\n\", (size_t) pool->end);\n  fprintf(f, \"  pool->size=%zu\\n\", (size_t) pool->size);\n  fprintf(f, \"  keep=%p\\n\", keep);\n  fprintf(f, \"  copy_bytes=%zu\\n\", copy_bytes);\n  fprintf(f, \"  new_size=%zu\\n\", new_size);\n  fprintf(f, \"  condition keep!=NULL -> %d\\n\", (keep != NULL));\n  fprintf(f, \"  condition keep==pool->memory -> %d\\n\", (keep == pool->memory));\n  fprintf(f, \"  memmove_taken=%d\\n\", memmove_taken);\n  fprintf(f, \"  to_zero=%zu\\n\", to_zero);\n  fprintf(f, \"----------------------------------------\\n\");\n\n  fclose(f);\n}\n\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  /* Log entry state */\n  mhd_log_pool_state(\"entry\", pool, keep, copy_bytes, new_size, 0, 0);\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes) {\n      /* Log that we are about to memmove from keep to pool->memory */\n      mhd_log_pool_state(\"before_memmove\", pool, keep, copy_bytes, new_size, 0, 0);\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n      /* Log after memmove (evidence that keep was used as source only) */\n      mhd_log_pool_state(\"after_memmove\", pool, keep, copy_bytes, new_size, 1, 0);\n    }\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n\n    /* Log before memset so we know the zeroing step is about to happen */\n    mhd_log_pool_state(\"before_memset\", pool, keep, copy_bytes, new_size, 0, to_zero);\n\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n\n    /* Log after memset */\n    mhd_log_pool_state(\"after_memset\", pool, keep, copy_bytes, new_size, 0, to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n\n  /* Log exit state */\n  mhd_log_pool_state(\"exit\", pool, keep, copy_bytes, new_size, 0, 0);\n\n  return pool->memory;\n}\n"
}