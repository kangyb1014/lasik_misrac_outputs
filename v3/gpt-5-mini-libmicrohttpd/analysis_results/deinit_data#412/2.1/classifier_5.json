{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of deinit_data:\n```c\nstatic void\ndeinit_data (void)\n{\n  if (NULL != resp_single)\n    MHD_destroy_response (resp_single);\n  resp_single = NULL;\n  if (NULL != resps)\n  {\n    unsigned int i;\n    for (i = 0; i < num_resps; ++i)\n      MHD_destroy_response (resps[i]);\n    num_resps = 0;\n    free (resps);\n  }\n  resps = NULL;\n  if (NULL != body_dyn)\n    free (body_dyn);\n  body_dyn = NULL;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfree (body_dyn);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment free(body_dyn); is executed only when body_dyn != NULL due to the enclosing if. As written it is conditionally reachable at runtime and therefore does not violate MISRA C 2023 Rule 2.1. A concrete violation scenario would be if body_dyn is provably always NULL (for example: a static/global pointer initialized to NULL and never modified anywhere in the project, or body_dyn defined as a compile-time constant NULL/macro). In that case the if (NULL != body_dyn) branch (and thus the free call) would be unreachable and would violate Rule 2.1."
}