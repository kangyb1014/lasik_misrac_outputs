{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of deinit_data:\n```c\nstatic void\ndeinit_data (void)\n{\n  if (NULL != resp_single)\n    MHD_destroy_response (resp_single);\n  resp_single = NULL;\n  if (NULL != resps)\n  {\n    unsigned int i;\n    for (i = 0; i < num_resps; ++i)\n      MHD_destroy_response (resps[i]);\n    num_resps = 0;\n    free (resps);\n  }\n  resps = NULL;\n  if (NULL != body_dyn)\n    free (body_dyn);\n  body_dyn = NULL;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_destroy_response (resps[i]);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call MHD_destroy_response(resps[i]) is executed when resps != NULL and num_resps > 0, so in normal use it is reachable (e.g. allocate resps and set num_resps to N>0). Therefore, based on the provided snippet alone, there is no MISRA 2.1 violation. A specific violation scenario would be if, by project-wide invariant, resps is never non-NULL at the same time num_resps > 0 (for example, resps is allocated but num_resps is always left as 0 and never updated anywhere in the project). In that case the loop body could never be executed and the call would be unreachable, which would violate Rule 2.1."
}