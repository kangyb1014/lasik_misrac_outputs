{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of deinit_data:\n```c\nstatic void\ndeinit_data (void)\n{\n  if (NULL != resp_single)\n    MHD_destroy_response (resp_single);\n  resp_single = NULL;\n  if (NULL != resps)\n  {\n    unsigned int i;\n    for (i = 0; i < num_resps; ++i)\n      MHD_destroy_response (resps[i]);\n    num_resps = 0;\n    free (resps);\n  }\n  resps = NULL;\n  if (NULL != body_dyn)\n    free (body_dyn);\n  body_dyn = NULL;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nresps = NULL;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The single assignment 'resps = NULL;' does not by itself violate MISRA C 2023 Rule 8.13. Whether the rule is violated depends on how 'resps' is declared and used. A concrete violation would be if 'resps' is declared as a pointer-to-non-const (for example: 'struct MHD_Response **resps;') while the code never modifies the pointed-to response objects through that pointer \u2014 in that case it should be const\u2011qualified (for example: 'const struct MHD_Response * const *resps;')."
}