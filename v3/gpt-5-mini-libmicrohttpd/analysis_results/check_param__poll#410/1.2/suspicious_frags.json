{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of check_param__poll:\n```c\nstatic int\ncheck_param__poll (void)\n{\n  if (! tool_params.poll)\n    return ! 0;\n  if (MHD_NO == MHD_is_feature_supported (MHD_FEATURE_POLL))\n  {\n    fprintf (stderr, \"poll() was requested, but this MHD build does not \"\n             \"support polling by poll().\\n\");\n    return 0;\n  }\n  return ! 0;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler-specific language extensions are used in the provided code fragment. Specifically:\n- There are no vendor-specific keywords or builtins (for example __attribute__, __asm, __builtin_*, typeof, __vector*, or other compiler intrinsics).\n- There is no inline assembly or use of non-standard pragmas.\n- The string literal adjacency (\"...\" \"...\") is standard C concatenation, not an extension.\n- The use of the logical not operator with a literal (return ! 0;) is plain standard C, not a compiler extension.\n- Macro names and external symbols (MHD_NO, MHD_is_feature_supported, MHD_FEATURE_POLL, tool_params) appear to be user/library identifiers; their usage here does not introduce a language extension.\n- The function name containing a double underscore (check_param__poll) is a stylistic/namespace concern but is not itself a documented compiler extension; the user instruction requested only explicit compiler-documented language extensions.\n\nGiven the above, there are no fragments in this code that match the requirement to report compiler language extensions."
}