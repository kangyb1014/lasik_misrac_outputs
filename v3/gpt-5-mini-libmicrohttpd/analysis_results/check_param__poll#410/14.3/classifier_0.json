{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_param__poll:\n```c\nstatic int\ncheck_param__poll (void)\n{\n  if (! tool_params.poll)\n    return ! 0;\n  if (MHD_NO == MHD_is_feature_supported (MHD_FEATURE_POLL))\n  {\n    fprintf (stderr, \"poll() was requested, but this MHD build does not \"\n             \"support polling by poll().\\n\");\n    return 0;\n  }\n  return ! 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n  if (! tool_params.poll)\n    return ! 0;\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not inherently violated. The controlling expression '!tool_params.poll' is non\u2011invariant at run time if tool_params.poll is a regular (mutable) object and thus does not violate Rule 14.3. A violation would occur if tool_params.poll is invariant (e.g. a macro or a compile\u2011time constant such as '#define tool_params.poll 1' or a const object that cannot change during execution, e.g. 'static const int tool_params_poll = 1;' or if tool_params is a const structure with a constant poll member). In that case the condition is invariant and would violate Rule 14.3."
}