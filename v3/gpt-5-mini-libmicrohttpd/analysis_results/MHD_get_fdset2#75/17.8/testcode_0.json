{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe non-pointer function parameter 'fd_setsize' is assigned a new value in the fragment: 'fd_setsize = (unsigned int) INT_MAX;'. This modifies a function parameter (not a pointee), which violates MISRA C 2023 Rule 17.8. (Use a local copy instead to comply.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_fdset2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/757.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_fdset2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_fdset2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset2 (struct MHD_Daemon *daemon,\n                fd_set *read_fd_set,\n                fd_set *write_fd_set,\n                fd_set *except_fd_set,\n                MHD_socket *max_fd,\n                unsigned int fd_setsize)\n{\n  if ( (NULL == daemon) ||\n       (NULL == read_fd_set) ||\n       (NULL == write_fd_set) ||\n       MHD_D_IS_USING_THREADS_ (daemon) ||\n       MHD_D_IS_USING_POLL_ (daemon))\n    return MHD_NO;\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_get_fdset2() called with except_fd_set \"\n                 \"set to NULL. Such behavior is unsupported.\\n\"));\n  }\n#endif\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_get_fdset2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (daemon->shutdown)\n      return MHD_YES;\n\n    /* we're in epoll mode, use the epoll FD as a stand-in for\n       the entire event set */\n\n    return MHD_add_to_fd_set_ (daemon->epoll_fd,\n                               read_fd_set,\n                               max_fd,\n                               (int) fd_setsize) ? MHD_YES : MHD_NO;\n  }\n#endif\n\n  return internal_get_fdset2 (daemon,\n                              read_fd_set,\n                              write_fd_set,\n                              except_fd_set,\n                              max_fd,\n                              (int) fd_setsize);\n}\n```\n</target_code>\nPlease provide the modified MHD_get_fdset2 code.\n",
  "test_code": "#include <stdio.h>\n#include <limits.h>\n\n/* Probe logging helper: append compact state and control-path info to /tmp/logs/757.txt */\nstatic void MHD_log_probe(const char *tag,\n                          struct MHD_Daemon *daemon,\n                          fd_set *read_fd_set,\n                          fd_set *write_fd_set,\n                          fd_set *except_fd_set,\n                          MHD_socket *max_fd,\n                          unsigned int fd_setsize)\n{\n  FILE *f = fopen(\"/tmp/logs/757.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"%s: daemon=%p read_fd_set=%p write_fd_set=%p except_fd_set=%p max_fd=%p fd_setsize=%u\\n\",\n            tag,\n            (void *) daemon,\n            (void *) read_fd_set,\n            (void *) write_fd_set,\n            (void *) except_fd_set,\n            (void *) max_fd,\n            fd_setsize);\n#ifdef HAVE_MESSAGES\n    if (daemon != NULL)\n    {\n      /* best-effort extra daemon info (fields used elsewhere in this function) */\n      fprintf(f, \"  daemon->fdset_size=%d fdset_size_set_by_app=%d shutdown=%d epoll_fd=%d\\n\",\n              daemon->fdset_size,\n              daemon->fdset_size_set_by_app,\n              daemon->shutdown,\n              daemon->epoll_fd);\n    }\n#endif\n    fclose(f);\n  }\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset2 (struct MHD_Daemon *daemon,\n                fd_set *read_fd_set,\n                fd_set *write_fd_set,\n                fd_set *except_fd_set,\n                MHD_socket *max_fd,\n                unsigned int fd_setsize)\n{\n  /* Log entry and initial parameter values */\n  MHD_log_probe(\"enter\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n\n  if ( (NULL == daemon) ||\n       (NULL == read_fd_set) ||\n       (NULL == write_fd_set) ||\n       MHD_D_IS_USING_THREADS_ (daemon) ||\n       MHD_D_IS_USING_POLL_ (daemon))\n  {\n    MHD_log_probe(\"early_return_invalid_args_or_mode\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n    return MHD_NO;\n  }\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_get_fdset2() called with except_fd_set \"\n                 \"set to NULL. Such behavior is unsupported.\\n\"));\n    MHD_log_probe(\"except_fd_set_null\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n  }\n#endif\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n  {\n    MHD_log_probe(\"fd_setsize_zero_return\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n    return MHD_NO;\n  }\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n  {\n    /* Log before modification */\n    MHD_log_probe(\"fd_setsize_exceeds_INT_MAX_before_assign\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n\n    fd_setsize = (unsigned int) INT_MAX;  /* <-- original parameter modification (violation) */\n\n    /* Log after modification so the trace clearly shows the change */\n    MHD_log_probe(\"fd_setsize_exceeds_INT_MAX_after_assign\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n  }\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n      MHD_log_probe(\"fd_setsize_less_than_app_set_by_app\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n      MHD_log_probe(\"fd_setsize_less_than_default\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_get_fdset2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    MHD_log_probe(\"fd_setsize_less_than_platform_fd_setsize_return\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n    return MHD_NO;\n  }\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n  /* Log that we assigned fd_setsize to FD_SETSIZE (kept original behaviour) */\n  MHD_log_probe(\"fd_setsize_assigned_to_FD_SETSIZE\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (daemon->shutdown)\n    {\n      MHD_log_probe(\"epoll_shutdown_return_yes\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n      return MHD_YES;\n    }\n\n    /* we're in epoll mode, use the epoll FD as a stand-in for\n       the entire event set */\n\n    MHD_log_probe(\"epoll_mode_call_add_to_fd_set\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n    {\n      enum MHD_Result res = MHD_add_to_fd_set_ (daemon->epoll_fd,\n                                                read_fd_set,\n                                                max_fd,\n                                                (int) fd_setsize) ? MHD_YES : MHD_NO;\n      MHD_log_probe(res == MHD_YES ? \"epoll_add_to_fd_set_return_yes\" : \"epoll_add_to_fd_set_return_no\",\n                    daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n      return res;\n    }\n  }\n#endif\n\n  /* Log before delegating to internal_get_fdset2 */\n  MHD_log_probe(\"before_internal_get_fdset2\", daemon, read_fd_set, write_fd_set, except_fd_set, max_fd, fd_setsize);\n\n  return internal_get_fdset2 (daemon,\n                              read_fd_set,\n                              write_fd_set,\n                              except_fd_set,\n                              max_fd,\n                              (int) fd_setsize);\n}\n"
}