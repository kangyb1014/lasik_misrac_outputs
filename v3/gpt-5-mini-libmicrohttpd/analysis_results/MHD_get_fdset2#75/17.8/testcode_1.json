{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'fd_setsize = (int) FD_SETSIZE;' writes to the value of the parameter fd_setsize (a non-pointer function parameter), thus modifying a function parameter and violating MISRA C 2023 Rule 17.8. Use a local variable (e.g., int local_fd_setsize = (int)FD_SETSIZE;) instead to avoid modifying the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_fdset2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/757.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_fdset2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_fdset2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset2 (struct MHD_Daemon *daemon,\n                fd_set *read_fd_set,\n                fd_set *write_fd_set,\n                fd_set *except_fd_set,\n                MHD_socket *max_fd,\n                unsigned int fd_setsize)\n{\n  if ( (NULL == daemon) ||\n       (NULL == read_fd_set) ||\n       (NULL == write_fd_set) ||\n       MHD_D_IS_USING_THREADS_ (daemon) ||\n       MHD_D_IS_USING_POLL_ (daemon))\n    return MHD_NO;\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_get_fdset2() called with except_fd_set \"\n                 \"set to NULL. Such behavior is unsupported.\\n\"));\n  }\n#endif\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_get_fdset2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (daemon->shutdown)\n      return MHD_YES;\n\n    /* we're in epoll mode, use the epoll FD as a stand-in for\n       the entire event set */\n\n    return MHD_add_to_fd_set_ (daemon->epoll_fd,\n                               read_fd_set,\n                               max_fd,\n                               (int) fd_setsize) ? MHD_YES : MHD_NO;\n  }\n#endif\n\n  return internal_get_fdset2 (daemon,\n                              read_fd_set,\n                              write_fd_set,\n                              except_fd_set,\n                              max_fd,\n                              (int) fd_setsize);\n}\n```\n</target_code>\nPlease provide the modified MHD_get_fdset2 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <limits.h>\n\n/* Probe logging helper: append logs to /tmp/logs/757.txt */\nstatic void MHD_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/757.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset2 (struct MHD_Daemon *daemon,\n                fd_set *read_fd_set,\n                fd_set *write_fd_set,\n                fd_set *except_fd_set,\n                MHD_socket *max_fd,\n                unsigned int fd_setsize)\n{\n  MHD_probe_log(\"ENTER MHD_get_fdset2: daemon=%p read_fd_set=%p write_fd_set=%p except_fd_set=%p max_fd=%p fd_setsize=%u\",\n                (void *)daemon,\n                (void *)read_fd_set,\n                (void *)write_fd_set,\n                (void *)except_fd_set,\n                (void *)max_fd,\n                fd_setsize);\n\n  if ( (NULL == daemon) ||\n       (NULL == read_fd_set) ||\n       (NULL == write_fd_set) ||\n       MHD_D_IS_USING_THREADS_ (daemon) ||\n       MHD_D_IS_USING_POLL_ (daemon))\n  {\n    MHD_probe_log(\"EARLY RETURN MHD_NO: invalid args or unsupported mode (daemon=%p, read=%p, write=%p, threads=%d, poll=%d)\",\n                  (void *)daemon,\n                  (void *)read_fd_set,\n                  (void *)write_fd_set,\n                  (int)MHD_D_IS_USING_THREADS_(daemon),\n                  (int)MHD_D_IS_USING_POLL_(daemon));\n    return MHD_NO;\n  }\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_get_fdset2() called with except_fd_set \"\n                 \"set to NULL. Such behavior is unsupported.\\n\"));\n    MHD_probe_log(\"NOTE: except_fd_set is NULL (daemon=%p)\", (void *)daemon);\n  }\n#endif\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n  {\n    MHD_probe_log(\"HAS_FD_SETSIZE_OVERRIDABLE: fd_setsize==0 -> return MHD_NO\");\n    return MHD_NO;\n  }\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n  {\n    MHD_probe_log(\"HAS_FD_SETSIZE_OVERRIDABLE: fd_setsize (%u) > INT_MAX -> clamp to INT_MAX\", fd_setsize);\n    fd_setsize = (unsigned int) INT_MAX;\n  }\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n      MHD_probe_log(\"HAS_FD_SETSIZE_OVERRIDABLE: fd_setsize (%u) less than daemon->fdset_size (%d) and set by app\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n      MHD_probe_log(\"HAS_FD_SETSIZE_OVERRIDABLE: fd_setsize (%u) less than daemon->fdset_size (%d) (not set by app)\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_get_fdset2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    MHD_probe_log(\"!HAS_FD_SETSIZE_OVERRIDABLE: fd_setsize (%u) less than FD_SETSIZE (%d) -> return MHD_NO\", fd_setsize, (int)FD_SETSIZE);\n    return MHD_NO;\n  }\n\n  /* Evidence logging: show fd_setsize before assignment to parameter */\n  {\n    unsigned int old_fd_setsize = fd_setsize;\n    MHD_probe_log(\"!HAS_FD_SETSIZE_OVERRIDABLE: before assignment fd_setsize=%u, FD_SETSIZE=(int)%d\", old_fd_setsize, (int)FD_SETSIZE);\n\n    fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n\n    MHD_probe_log(\"!HAS_FD_SETSIZE_OVERRIDABLE: after assignment fd_setsize=%u (was %u) -- parameter was modified\", fd_setsize, old_fd_setsize);\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (daemon->shutdown)\n    {\n      MHD_probe_log(\"EPOLL_SUPPORT: daemon->shutdown -> return MHD_YES\");\n      return MHD_YES;\n    }\n\n    /* we're in epoll mode, use the epoll FD as a stand-in for\n       the entire event set */\n    MHD_probe_log(\"EPOLL_SUPPORT: calling MHD_add_to_fd_set_ with epoll_fd=%d, fd_setsize=%u\", daemon->epoll_fd, fd_setsize);\n\n    return MHD_add_to_fd_set_ (daemon->epoll_fd,\n                               read_fd_set,\n                               max_fd,\n                               (int) fd_setsize) ? MHD_YES : MHD_NO;\n  }\n#endif\n\n  MHD_probe_log(\"FINAL: calling internal_get_fdset2 with fd_setsize=(int)%u\", fd_setsize);\n\n  return internal_get_fdset2 (daemon,\n                              read_fd_set,\n                              write_fd_set,\n                              except_fd_set,\n                              max_fd,\n                              (int) fd_setsize);\n}\n"
}