{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_fdset2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset2 (struct MHD_Daemon *daemon,\n                fd_set *read_fd_set,\n                fd_set *write_fd_set,\n                fd_set *except_fd_set,\n                MHD_socket *max_fd,\n                unsigned int fd_setsize)\n{\n  if ( (NULL == daemon) ||\n       (NULL == read_fd_set) ||\n       (NULL == write_fd_set) ||\n       MHD_D_IS_USING_THREADS_ (daemon) ||\n       MHD_D_IS_USING_POLL_ (daemon))\n    return MHD_NO;\n\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_get_fdset2() called with except_fd_set \"\n                 \"set to NULL. Such behavior is unsupported.\\n\"));\n  }\n#endif\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_get_fdset2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_get_fdset2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    if (daemon->shutdown)\n      return MHD_YES;\n\n    /* we're in epoll mode, use the epoll FD as a stand-in for\n       the entire event set */\n\n    return MHD_add_to_fd_set_ (daemon->epoll_fd,\n                               read_fd_set,\n                               max_fd,\n                               (int) fd_setsize) ? MHD_YES : MHD_NO;\n  }\n#endif\n\n  return internal_get_fdset2 (daemon,\n                              read_fd_set,\n                              write_fd_set,\n                              except_fd_set,\n                              max_fd,\n                              (int) fd_setsize);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code. The function uses standard C constructs only: enum return type, casts, conditional compilation (#ifdef/#else), macros, fd_set APIs and ordinary function calls. There are no instances of compiler-specific extensions such as __attribute__, __declspec, typeof, __builtin_*, asm (inline assembly), nested functions, statement-expressions ({: ... :}) or the GCC/Clang __extension__ token. The use of identifiers beginning with underscores (e.g. _MHD_EXTERN, MHD_D_IS_USING_THREADS_) and the _() localization macro are ordinary identifiers/macros and not compiler extensions. The backslash line-continuation and adjacent string literal concatenation shown are standard C preprocessing behaviour. Therefore no fragments need investigation for MISRA C 2023 Rule 1.2 (language extensions)."
}