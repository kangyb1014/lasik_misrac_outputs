{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nIf sizeof(uint64_t) is not greater than sizeof(off_t) (i.e. sizeof(uint64_t) <= sizeof(off_t)), the left operand (sizeof(uint64_t) > sizeof(off_t)) is a compile\u2011time constant false, which makes the whole if controlling expression a compile\u2011time invariant false (the right\u2011hand side is unreachable). That yields an invariant controlling expression and thus violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_fd_at_offset64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2055.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_from_fd_at_offset64 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_fd_at_offset64:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n    return NULL;\n#endif\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n    return NULL;\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n    return NULL;\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n  return response;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_from_fd_at_offset64 code.\n",
  "test_code": "_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n  /* Probe log file to record control flow and state for MISRA Rule 14.3 analysis */\n  FILE *logf = fopen(\"/tmp/logs/2055.txt\", \"a\");\n  if (logf)\n    {\n      fprintf(logf, \"MHD_create_response_from_fd_at_offset64 called\\n\");\n      fprintf(logf, \"  args: size=%llu offset=%llu fd=%d\\n\",\n              (unsigned long long) size,\n              (unsigned long long) offset,\n              fd);\n      fprintf(logf, \"  sizeof(uint64_t)=%zu sizeof(off_t)=%zu\\n\",\n              sizeof(uint64_t), sizeof(off_t));\n    }\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  /* Capture evaluation of the controlling expression parts */\n  if (logf)\n    {\n      int left = (sizeof(uint64_t) > sizeof(off_t)) ? 1 : 0;\n      int rhs = ( (size > (uint64_t) INT32_MAX) ||\n                  (offset > (uint64_t) INT32_MAX) ||\n                  ((size + offset) >= (uint64_t) INT32_MAX) ) ? 1 : 0;\n      fprintf(logf, \"  check1: (sizeof(uint64_t) > sizeof(off_t)) = %d\\n\", left);\n      fprintf(logf, \"  check2: ((size > INT32_MAX) || (offset > INT32_MAX) || (size+offset >= INT32_MAX)) = %d\\n\", rhs);\n      fprintf(logf, \"  combined condition = %d\\n\", left && rhs);\n      fflush(logf);\n    }\n\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n    {\n      if (logf)\n        {\n          fprintf(logf, \"  Returning NULL due to 32-bit limit checks\\n\");\n          fclose(logf);\n        }\n      return NULL;\n    }\n#endif\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n    {\n      if (logf)\n        {\n          fprintf(logf, \"  Returning NULL due to negative value after cast to int64_t\\n\");\n          fprintf(logf, \"    (int64_t)size=%lld (int64_t)offset=%lld (int64_t)(size+offset)=%lld\\n\",\n                  (long long) (int64_t) size,\n                  (long long) (int64_t) offset,\n                  (long long) (int64_t) (size + offset));\n          fclose(logf);\n        }\n      return NULL;\n    }\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n    {\n      if (logf)\n        {\n          fprintf(logf, \"  MHD_create_response_from_callback returned NULL\\n\");\n          fclose(logf);\n        }\n      return NULL;\n    }\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n\n  if (logf)\n    {\n      fprintf(logf, \"  Success: response created. fd=%d fd_off=%llu is_pipe=%d\\n\",\n              response->fd,\n              (unsigned long long) response->fd_off,\n              (int) response->is_pipe);\n      fclose(logf);\n    }\n  return response;\n}\n"
}