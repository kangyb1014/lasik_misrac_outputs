{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member crc_cls is declared as a non-const pointer (e.g. 'struct MHD_Response *crc_cls;') and it is only used to read from the pointed-at response (no modifications are required), then the assignment 'response->crc_cls = response;' violates MISRA C 2023 Rule 8.13 because the pointer should be to a const-qualified type (e.g. 'const struct MHD_Response *crc_cls;'). If crc_cls is already declared as a pointer to const or the code later needs to modify the response via crc_cls, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_fd_at_offset64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2053.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_from_fd_at_offset64 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_fd_at_offset64:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n    return NULL;\n#endif\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n    return NULL;\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n    return NULL;\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n  return response;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_from_fd_at_offset64 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdbool.h>\n#include <limits.h>\n#include <time.h>\n\n/* Probe logging helper: appends human-readable log lines to /tmp/logs/2053.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2053.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    /* simple timestamp */\n    time_t t = time(NULL);\n    if (t != (time_t)(-1))\n    {\n        struct tm *tm = localtime(&t);\n        if (tm != NULL)\n            fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n                    tm->tm_year + 1900,\n                    tm->tm_mon + 1,\n                    tm->tm_mday,\n                    tm->tm_hour,\n                    tm->tm_min,\n                    tm->tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\n/*\n * Original function preserved as much as possible. Added logging probes to\n * record control flow and state relevant to the crc_cls assignment.\n */\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n\n  log_probe(\"ENTER: size=%\" PRIu64 \" fd=%d offset=%\" PRIu64, size, fd, offset);\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n  {\n    log_probe(\"EXIT early: 64-bit size/offset exceed off_t limits; returning NULL\");\n    return NULL;\n  }\n#endif\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n  {\n    log_probe(\"EXIT early: negative size/offset values after cast; returning NULL\");\n    return NULL;\n  }\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n  {\n    log_probe(\"EXIT: MHD_create_response_from_callback returned NULL\");\n    return NULL;\n  }\n\n  /* Log the response pointer before modifications */\n  log_probe(\"response allocated at %p\", (void *) response);\n\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n\n  /* Log state just before the crc_cls assignment */\n  log_probe(\"About to assign response->crc_cls = response; response=%p fd=%d is_pipe=%d fd_off=%\" PRIu64,\n            (void *) response, response->fd, (int) response->is_pipe, response->fd_off);\n\n  response->crc_cls = response;\n\n  /* Log state after assignment to give concrete evidence of the assignment\n     and show the pointer value stored in crc_cls. This is the core evidence\n     for the scenario where a pointer to the same response object is stored. */\n  log_probe(\"Assigned: response->crc_cls = %p (response=%p)\", (void *) response->crc_cls, (void *) response);\n\n  log_probe(\"EXIT success: returning response %p\", (void *) response);\n  return response;\n}\n"
}