{
  "user_message": "An agent A claimed that the following MHD_set_connection_value code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf 'value' points to a non-NULL char array that is not NUL-terminated (for example: char buf[3] = {'a','b','c'}; value = buf;), strlen(value) will scan past the bounds looking for '\\0' and thus access memory beyond the object. The NULL check does not guarantee a valid NUL-terminated string, so this use of strlen can lead to out-of-bounds access.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. strlen scans for a terminating '\\0' and will read past the end of a non\u2011NUL\u2011terminated array, so calling strlen(value) solely guarded by a NULL check can result in out\u2011of\u2011bounds accesses. MISRA C 2023 Rule 21.17 forbids uses of <string.h> functions that can result in accesses beyond the bounds of the referenced objects unless the program can guarantee the pointer actually refers to a NUL\u2011terminated string. The shown code does not enforce or document such a guarantee, so as presented it violates Rule 21.17. (If elsewhere in the program/API there is an explicit, enforced contract that key and value are always NUL\u2011terminated, then the use could be acceptable; absent that, it is a violation. Recommended fixes: accept explicit lengths, use a bounded length function like strnlen with a known maximum bound, or validate termination before calling strlen.)"
}