{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter is declared as 'struct MHD_Connection *connection' even though the shown implementation only forwards the pointer and does not modify the pointed object. If the function (and the callee MHD_set_connection_value_n_nocheck_) do not modify *connection, the parameter should be 'const struct MHD_Connection *connection' to express read\u2011only intent. As written, this is a violation of MISRA C 2023 Rule 8.13 unless the connection is actually modified elsewhere.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append a structured log entry to /tmp/logs/173.txt. */\nstatic void mhd_log_probe(const void *connection,\n                          int kind,\n                          const char *key,\n                          size_t key_len,\n                          const char *value,\n                          size_t value_len,\n                          const char *stage,\n                          int has_result,\n                          int result)\n{\n  /* Try to ensure the directory exists; ignore errors except EEXIST. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  FILE *fp = fopen(\"/tmp/logs/173.txt\", \"a\");\n  if (fp == NULL)\n  {\n    /* If we cannot open the designated log file, silently return to avoid\n       affecting program logic. */\n    return;\n  }\n\n  /* Write an entry describing the control point and state. */\n  fprintf(fp, \"[MHD_probe] stage=%s connection=%p kind=%d key=%s key_len=%zu value=%s value_len=%zu\\n\",\n          (stage != NULL) ? stage : \"(null)\",\n          connection,\n          kind,\n          (NULL != key) ? key : \"(null)\",\n          key_len,\n          (NULL != value) ? value : \"(null)\",\n          value_len);\n\n  if (has_result)\n  {\n    fprintf(fp, \"[MHD_probe] stage=%s result=%d\\n\", stage, result);\n  }\n\n  fclose(fp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  /* Preserve original logic: compute lengths as before. */\n  size_t key_len = (NULL != key) ? strlen(key) : 0U;\n  size_t value_len = (NULL != value) ? strlen(value) : 0U;\n\n  /* Log entry before forwarding the pointer. This documents that the\n     function only forwards the connection pointer and does not modify it. */\n  mhd_log_probe((const void *) connection,\n                (int) kind,\n                key,\n                key_len,\n                value,\n                value_len,\n                \"enter\",\n                0,\n                0);\n\n  /* Call the original implementation (preserve exact forwarding). */\n  enum MHD_Result result = MHD_set_connection_value_n_nocheck_ (connection,\n                                                               kind,\n                                                               key,\n                                                               key_len,\n                                                               value,\n                                                               value_len);\n\n  /* Log the result and exit. */\n  mhd_log_probe((const void *) connection,\n                (int) kind,\n                key,\n                key_len,\n                value,\n                value_len,\n                \"exit\",\n                1,\n                (int) result);\n\n  return result;\n}\n"
}