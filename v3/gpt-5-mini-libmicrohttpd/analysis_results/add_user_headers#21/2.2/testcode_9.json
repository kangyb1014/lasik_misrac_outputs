{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a debug-only assertion macro that expands to a no-op in production builds (for example when NDEBUG or equivalent is defined), the statement mhd_assert(initial_pos + el_size == (*ppos)); becomes an executed operation with no effect \u2014 removal would not change program behaviour. In that configuration this is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/212.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "static void\nadd_user_headers_log_entry(const char *stage,\n                           const struct MHD_Response *r,\n                           const struct MHD_HTTP_Res_Header *hdr,\n                           size_t initial_pos,\n                           size_t el_size,\n                           size_t ppos_before,\n                           size_t ppos_after,\n                           bool add_close,\n                           bool add_keep_alive,\n                           bool filter_transf_enc,\n                           bool filter_content_len)\n{\n  FILE *f = fopen(\"/tmp/logs/212.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"[add_user_headers] stage=%s r=%p hdr=%p initial_pos=%zu el_size=%zu ppos_before=%zu ppos_after=%zu add_close=%d add_keep_alive=%d filter_transf_enc=%d filter_content_len=%d\\n\",\n          stage, (const void *)r, (const void *)hdr,\n          initial_pos, el_size, ppos_before, ppos_after,\n          (int)add_close, (int)add_keep_alive,\n          (int)filter_transf_enc, (int)filter_content_len);\n\n  if (hdr != NULL)\n  {\n    /* header and value may not be NUL-terminated; print lengths and a best-effort sting */\n    fprintf(f, \"  header_size=%zu value_size=%zu header='\",\n            hdr->header_size, hdr->value_size);\n    if (hdr->header != NULL && hdr->header_size > 0)\n      fprintf(f, \"%.*s\", (int)hdr->header_size, hdr->header);\n    fprintf(f, \"' value='\");\n    if (hdr->value != NULL && hdr->value_size > 0)\n      fprintf(f, \"%.*s\", (int)hdr->value_size, hdr->value);\n    fprintf(f, \"'\\n\");\n  }\n\n  fflush(f);\n  fclose(f);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Log entry to capture initial state */\n  add_user_headers_log_entry(\"entry\", r, NULL, 0, 0, *ppos, *ppos, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n\n    /* Log per-header entry */\n    add_user_headers_log_entry(\"header_start\", r, hdr, initial_pos, 0, *ppos, *ppos, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        add_user_headers_log_entry(\"filter_transfer_encoding_matched\", r, hdr, initial_pos, 0, *ppos, *ppos, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        add_user_headers_log_entry(\"filter_content_length_matched\", r, hdr, initial_pos, 0, *ppos, *ppos, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      add_user_headers_log_entry(\"oom_before_copy\", r, hdr, initial_pos, el_size, *ppos, *ppos, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          add_user_headers_log_entry(\"oom_before_close\", r, hdr, initial_pos, el_size, *ppos, *ppos, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          add_user_headers_log_entry(\"oom_before_keepalive\", r, hdr, initial_pos, el_size, *ppos, *ppos, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n\n      /* Log after adding the connection token */\n      add_user_headers_log_entry(\"after_connection_token\", r, hdr, initial_pos, el_size, *ppos, *ppos, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n\n    /* Probe the assertion condition and record it explicitly. This mirrors the\n       asserted condition so that logs will show the relation between the\n       computed el_size, initial_pos and the advanced *ppos. If the assertion\n       macro becomes a no-op in production builds, this explicit log still\n       provides evidence about the state and the fact that removing the\n       assertion would not change program behavior. */\n    {\n      size_t ppos_after = *ppos;\n      size_t ppos_before = initial_pos; /* the pos at start of this header */\n      bool cond = (initial_pos + el_size == ppos_after);\n\n      add_user_headers_log_entry(\"assert_probe\", r, hdr, initial_pos, el_size, ppos_before, ppos_after, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n      /* Also write an explicit single-line summary for easy grepping. */\n      {\n        FILE *f = fopen(\"/tmp/logs/212.txt\", \"a\");\n        if (f)\n        {\n          fprintf(f, \"[add_user_headers] assert_probe_result initial_pos=%zu el_size=%zu ppos_after=%zu cond=%d\\n\",\n                  initial_pos, el_size, ppos_after, (int)cond);\n          fflush(f);\n          fclose(f);\n        }\n      }\n\n    }\n\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  add_user_headers_log_entry(\"exit_success\", r, NULL, 0, 0, *ppos, *ppos, add_close, add_keep_alive, filter_transf_enc, filter_content_len);\n  return true;\n}\n"
}