{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local iterator is declared as 'struct MHD_HTTP_Res_Header *hdr;' but within add_user_headers hdr is only used to read the pointed-to structure (hdr->kind, hdr->header_size, hdr->header, hdr->value_size, hdr->value, hdr->next). No writes to the pointed-to object occur in this function, so the pointer should be to a const-qualified type (e.g. 'const struct MHD_HTTP_Res_Header *hdr;') per MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/213.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe logging helper: append-only logging to /tmp/logs/213.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/213.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic void probe_log_header_state(const char *tag,\n                                   struct MHD_HTTP_Res_Header *hdr,\n                                   size_t initial_pos,\n                                   size_t cur_ppos,\n                                   size_t buf_size,\n                                   struct MHD_Response *r,\n                                   bool filter_transf_enc,\n                                   bool filter_content_len,\n                                   bool add_close,\n                                   bool add_keep_alive)\n{\n  if (hdr == NULL)\n  {\n    probe_log(\"%s: hdr=NULL, initial_pos=%zu, ppos=%zu, buf_size=%zu, flags_auto=0x%08x, filter_transf_enc=%d, filter_content_len=%d, add_close=%d, add_keep_alive=%d\",\n              tag, initial_pos, cur_ppos, buf_size,\n              (unsigned int)(r ? r->flags_auto : 0u),\n              filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n    return;\n  }\n\n  /* hdr->header and hdr->value may not be NUL-terminated; use %.*s */\n  probe_log(\"%s: hdr=%p, kind=%d, header_size=%zu, header='%.*s', value_size=%zu, value='%.*s', initial_pos=%zu, ppos=%zu, buf_size=%zu, flags_auto=0x%08x, filter_transf_enc=%d, filter_content_len=%d, add_close=%d, add_keep_alive=%d\",\n            tag,\n            (void *)hdr,\n            (int)hdr->kind,\n            hdr->header_size, (int)hdr->header_size, hdr->header ? hdr->header : \"\",\n            hdr->value_size, (int)hdr->value_size, hdr->value ? hdr->value : \"\",\n            initial_pos,\n            cur_ppos,\n            buf_size,\n            (unsigned int)(r ? r->flags_auto : 0u),\n            filter_transf_enc,\n            filter_content_len,\n            add_close,\n            add_keep_alive);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  probe_log(\"add_user_headers ENTRY: response=%p, ppos=%zu, buf_size=%zu, filter_transf_enc=%d, filter_content_len=%d, add_close=%d, add_keep_alive=%d, flags_auto=0x%08x\",\n            (void *)response, *ppos, buf_size, filter_transf_enc, filter_content_len, add_close, add_keep_alive,\n            (unsigned int)(r ? r->flags_auto : 0u));\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  probe_log(\"add_user_headers PRE-LOOP: ppos=%zu, filter_transf_enc=%d, filter_content_len=%d, add_close=%d, add_keep_alive=%d\", *ppos, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n\n    probe_log_header_state(\"LOOP_START\", hdr, initial_pos, *ppos, buf_size, r, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n    {\n      probe_log(\"SKIP: header kind mismatch: hdr=%p kind=%d\", (void *)hdr, (int)hdr->kind);\n      continue;\n    }\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        probe_log_header_state(\"FILTERED_TRANSFER_ENCODING\", hdr, initial_pos, *ppos, buf_size, r, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        probe_log_header_state(\"FILTERED_CONTENT_LENGTH\", hdr, initial_pos, *ppos, buf_size, r, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      probe_log_header_state(\"RETURN_FALSE_BUF_TOO_SMALL_PRE_COPY\", hdr, initial_pos, *ppos, buf_size, r, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          probe_log_header_state(\"RETURN_FALSE_BUF_TOO_SMALL_ADD_CLOSE\", hdr, initial_pos, *ppos, buf_size, r, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n        probe_log(\"ADDED_TOKEN: 'close, ' to header %p at pos %zu\", (void *)hdr, *ppos);\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          probe_log_header_state(\"RETURN_FALSE_BUF_TOO_SMALL_ADD_KEEP_ALIVE\", hdr, initial_pos, *ppos, buf_size, r, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        probe_log(\"ADDED_TOKEN: 'Keep-Alive, ' to header %p at pos %zu\", (void *)hdr, *ppos);\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n\n    probe_log_header_state(\"LOOP_END_ADDED\", hdr, initial_pos, *ppos, buf_size, r, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  probe_log(\"add_user_headers RETURN_TRUE: final ppos=%zu\", *ppos);\n  return true;\n}\n"
}