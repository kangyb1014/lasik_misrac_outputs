{
  "user_message": "An agent A claimed that the following add_user_headers code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_user_headers.\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes hdr->header as the source to memcpy (and only reads from hdr->header elsewhere). If the struct member is declared as a non-const pointer (e.g. char *header), that is a violation of MISRA C 2023 Rule 8.13 because the pointer should be const-qualified (const char *header) when only read. For example, if struct MHD_HTTP_Res_Header contains: char *header; then this use should be const char *header to comply.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nadd_user_headers ENTRY: buf=0x5570a50f50d0 ppos_ptr=0x7fff3d715f90 ppos_val=71 buf_size=32576 response=0x5570a50fd0c0 flags_auto=0x1 flags=0x0 filter_transf_enc=1 filter_content_len=1 add_close=0 add_keep_alive=0\nHEADER ITER: hdr=0x5570a50fd1a0 kind=1 header_ptr=0x5570a50fd1e0 header_size=10 value_ptr=0x5570a50fd180 value_size=7 next=0x5570a50fd240 initial_pos=71\nBEFORE memcpy(header): dest=0x5570a50f5117 src=0x5570a50fd1e0 header_size=10 ppos=71 initial_pos=71 buf_size=32576\nAFTER memcpy(header): new_ppos=81\nBEFORE memcpy(value): dest=0x5570a50f5123 src=0x5570a50fd180 value_size=7 ppos=83\nAFTER memcpy(value): advanced_by=7 new_ppos=90\nHEADER ADDED: hdr=0x5570a50fd1a0 final_ppos=92 expected_final=92\nHEADER ITER: hdr=0x5570a50fd240 kind=1 header_ptr=0x5570a50fd200 header_size=7 value_ptr=0x5570a50fd220 value_size=20 next=(nil) initial_pos=92\nBEFORE memcpy(header): dest=0x5570a50f512c src=0x5570a50fd200 header_size=7 ppos=92 initial_pos=92 buf_size=32576\nAFTER memcpy(header): new_ppos=99\nBEFORE memcpy(value): dest=0x5570a50f5135 src=0x5570a50fd220 value_size=20 ppos=101\nAFTER memcpy(value): advanced_by=20 new_ppos=121\nHEADER ADDED: hdr=0x5570a50fd240 final_ppos=123 expected_final=123\nadd_user_headers EXIT: returning true final_ppos=123\nadd_user_headers ENTRY: buf=0x5570a50f50d0 ppos_ptr=0x7fff3d7159c0 ppos_val=71 buf_size=32576 response=0x5570a50fdcd0 flags_auto=0x1 flags=0x0 filter_transf_enc=1 filter_content_len=1 add_close=0 add_keep_alive=0\nHEADER ITER: hdr=0x5570a50fdd90 kind=1 header_ptr=0x5570a50fd200 header_size=10 value_ptr=0x5570a50fd220 value_size=7 next=0x5570a50fddd0 initial_pos=71\nBEFORE memcpy(header): dest=0x5570a50f5117 src=0x5570a50fd200 header_size=10 ppos=71 initial_pos=71 buf_size=32576\nAFTER memcpy(header): new_ppos=81\nBEFORE memcpy(value): dest=0x5570a50f5123 src=0x5570a50fd220 value_size=7 ppos=83\nAFTER memcpy(value): advanced_by=7 new_ppos=90\nHEADER ADDED: hdr=0x5570a50fdd90 final_ppos=92 expected_final=92\nHEADER ITER: hdr=0x5570a50fddd0 kind=1 header_ptr=0x5570a50fd180 header_size=7 value_ptr=0x5570a50fd1e0 value_size=20 next=(nil) initial_pos=92\nBEFORE memcpy(header): dest=0x5570a50f512c src=0x5570a50fd180 header_size=7 ppos=92 initial_pos=92 buf_size=32576\nAFTER memcpy(header): new_ppos=99\nBEFORE memcpy(value): dest=0x5570a50f5135 src=0x5570a50fd1e0 value_size=20 ppos=101\nAFTER memcpy(value): advanced_by=20 new_ppos=121\nHEADER ADDED: hdr=0x5570a50fddd0 final_ppos=123 expected_final=123\nadd_user_headers EXIT: returning true final_ppos=123\nadd_user_headers ENTRY: buf=0x5570a50fe4f0 ppos_ptr=0x7fff3d7159c0 ppos_val=71 buf_size=32576 response=0x5570a50fe290 flags_auto=0x1 flags=0x0 filter_transf_enc=1 filter_content_len=1 add_close=0 add_keep_alive=0\nHEADER ITER: hdr=0x5570a50fe350 kind=1 header_ptr=0x5570a50fd180 header_size=10 value_ptr=0x5570a50fd1e0 value_size=7 next=0x5570a50fe390 initial_pos=71\nBEFORE memcpy(header): dest=0x5570a50fe537 src=0x5570a50fd180 header_size=10 ppos=71 initial_pos=71 buf_size=32576\nAFTER memcpy(header): new_ppos=81\nBEFORE memcpy(value): dest=0x5570a50fe543 src=0x5570a50fd1e0 value_size=7 ppos=83\nAFTER memcpy(value): advanced_by=7 new_ppos=90\nHEADER ADDED: hdr=0x5570a50fe350 final_ppos=92 expected_final=92\nHEADER ITER: hdr=0x5570a50fe390 kind=1 header_ptr=0x5570a50fd220 header_size=7 value_ptr=0x5570a50fd200 value_size=20 next=(nil) initial_pos=92\nBEFORE memcpy(header): dest=0x5570a50fe54c src=0x5570a50fd220 header_size=7 ppos=92 initial_pos=92 buf_size=32576\nAFTER memcpy(header): new_ppos=99\nBEFORE memcpy(value): dest=0x5570a50fe555 src=0x5570a50fd200 value_size=20 ppos=101\nAFTER memcpy(value): advanced_by=20 new_ppos=121\nHEADER ADDED: hdr=0x5570a50fe390 final_ppos=123 expected_final=123\nadd_user_headers EXIT: returning true final_ppos=123\nadd_user_headers ENTRY: buf=0x7f8050000e50 ppos_ptr=0x7f805f5d8a80 ppos_val=71 buf_size=32576 response=0x7f8058000b90 flags_auto=0x1 flags=0x0 filter_transf_enc=1 filter_content_len=1 add_close=0 add_keep_alive=0\nHEADER ITER: hdr=0x7f8058000c50 kind=1 header_ptr=0x7f8058000c90 header_size=10 value_ptr=0x7f8058000b70 value_size=7 nex\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 requires pointer types to point to const-qualified types when the pointed-to object is not modified. In the shown function, hdr->header and hdr->value are only read (used as sources to memcpy and compared), so if the struct MHD_HTTP_Res_Header actually declares these members as non-const (e.g. char *header; char *value;), then that declaration would be flagged by Rule 8.13 and should be changed to const char *header and const char *value where possible. However, the provided code does not include the definition of struct MHD_HTTP_Res_Header, so there is no direct evidence in the snippet that the members are non-const. The rule applies to the declaration of the pointer types, not to each use site; therefore from the code shown alone we cannot conclude a definite violation. If the struct members are already const-qualified, there is no violation; if they are not, then the report is correct. Given only the code shown, the claim that the code violates Rule 8.13 cannot be confirmed."
}