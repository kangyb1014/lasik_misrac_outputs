{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'response' is declared as 'struct MHD_Response *response' but the function only reads from the object it points to. It should be declared as a pointer to const (e.g. 'const struct MHD_Response *response') so the pointee is const-qualified. The local alias 'struct MHD_Response *const r = response;' only makes the pointer itself const, not the pointed-to type. 'buf' and 'ppos' are legitimately non-const because they are modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/213.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stddef.h>\n\n/* Probe helper to log state to /tmp/logs/213.txt. */\nstatic void\nmhd_probe_log_state(const struct MHD_Response *r,\n                    const char *phase,\n                    size_t ppos,\n                    size_t buf_size,\n                    bool filter_transf_enc,\n                    bool filter_content_len,\n                    bool add_close,\n                    bool add_keep_alive)\n{\n  FILE *f = fopen(\"/tmp/logs/213.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[add_user_headers] phase=%s\\n\", phase);\n  if (r != NULL)\n  {\n    /* Print numeric flags and pointer to first_header to help reproduce scenario */\n    fprintf(f, \" r=%p flags_auto=0x%lx flags=0x%lx first_header=%p\\n\",\n            (void *)r,\n            (unsigned long) r->flags_auto,\n            (unsigned long) r->flags,\n            (void *) r->first_header);\n  }\n  else\n  {\n    fprintf(f, \" r=(NULL)\\n\");\n  }\n  fprintf(f, \" ppos=%zu buf_size=%zu\\n\", ppos, buf_size);\n  fprintf(f, \" filter_transf_enc=%d filter_content_len=%d add_close=%d add_keep_alive=%d\\n\",\n          filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\nstatic void\nmhd_probe_log_header(const struct MHD_HTTP_Res_Header *hdr,\n                      size_t initial_pos,\n                      size_t ppos)\n{\n  FILE *f = fopen(\"/tmp/logs/213.txt\", \"a\");\n  if (NULL == f)\n    return;\n  if (hdr != NULL)\n  {\n    /* Print header meta-info and a best-effort textual dump of header & value */\n    fprintf(f, \" header=%p kind=%d header_size=%zu value_size=%zu initial_pos=%zu ppos=%zu next=%p\\n\",\n            (void *)hdr,\n            hdr->kind,\n            hdr->header_size,\n            hdr->value_size,\n            initial_pos,\n            ppos,\n            (void *)hdr->next);\n    /* Use %.*s to limit prints to declared sizes; if not printable, it's still useful raw data */\n    if (hdr->header != NULL && hdr->header_size > 0)\n      fprintf(f, \"  header_text='%.*s'\\n\", (int)hdr->header_size, hdr->header);\n    if (hdr->value != NULL && hdr->value_size > 0)\n      fprintf(f, \"  value_text='%.*s'\\n\", (int)hdr->value_size, hdr->value);\n  }\n  else\n  {\n    fprintf(f, \" header=(NULL)\\n\");\n  }\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Log entry state. Note: we intentionally log using a const pointer to show that we only read. */\n  mhd_probe_log_state((const struct MHD_Response *)r, \"entry\", *ppos, buf_size,\n                      filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  /* Log after initial flag adjustments */\n  mhd_probe_log_state((const struct MHD_Response *)r, \"after_init_flags\", *ppos, buf_size,\n                      filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n\n    /* Log header about to be processed */\n    mhd_probe_log_header(hdr, initial_pos, *ppos);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        /* Log that Transfer-Encoding was filtered */\n        mhd_probe_log_state((const struct MHD_Response *)r, \"filtered_transfer_encoding\",\n                            *ppos, buf_size, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        /* Log that Content-Length was filtered and new transfer filter state */\n        mhd_probe_log_state((const struct MHD_Response *)r, \"filtered_content_length\",\n                            *ppos, buf_size, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      mhd_probe_log_state((const struct MHD_Response *)r, \"buffer_overflow_before_write\",\n                          *ppos, buf_size, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_probe_log_state((const struct MHD_Response *)r, \"buffer_overflow_connection_close\",\n                              *ppos, buf_size, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_probe_log_state((const struct MHD_Response *)r, \"buffer_overflow_connection_keep_alive\",\n                              *ppos, buf_size, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n\n    /* Log after header appended */\n    mhd_probe_log_header(hdr, initial_pos, *ppos);\n\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  mhd_probe_log_state((const struct MHD_Response *)r, \"exit_success\", *ppos, buf_size,\n                      filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n  return true;\n}\n"
}