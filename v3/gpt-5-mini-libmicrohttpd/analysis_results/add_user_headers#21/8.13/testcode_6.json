{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nhdr is declared as a non-const pointer (struct MHD_HTTP_Res_Header *hdr) but is only used for reading fields while iterating r->first_header. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible, so hdr should be declared as const struct MHD_HTTP_Res_Header *hdr (or equivalent) to avoid violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/213.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Probe helper: log information about a header to /tmp/logs/213.txt */\nstatic void\nmhd_probe_log_header(FILE *logf,\n                     struct MHD_HTTP_Res_Header *hdr,\n                     size_t index,\n                     size_t initial_pos,\n                     size_t ppos_before)\n{\n  if (NULL == logf || NULL == hdr)\n    return;\n\n  /* Print basic fields; header/value may not be NUL-terminated, so use %.*s */\n  fprintf(logf,\n          \"  header[%zu] addr=%p kind=%u header_size=%zu value_size=%zu initial_pos=%zu ppos_before=%zu\\n\",\n          index, (void *)hdr, (unsigned)hdr->kind, hdr->header_size, hdr->value_size, initial_pos, ppos_before);\n\n  /* Print header name truncated to a reasonable length */\n  if (hdr->header_size > 0)\n  {\n    size_t print_len = hdr->header_size > 200 ? 200U : hdr->header_size;\n    fprintf(logf, \"    header_name(len=%zu): '\", print_len);\n    fprintf(logf, \"%.*s\", (int)print_len, hdr->header);\n    if (hdr->header_size > print_len) fprintf(logf, \"... (truncated)\");\n    fprintf(logf, \"'\\n\");\n  }\n  else\n    fprintf(logf, \"    header_name(len=0)\\n\");\n\n  if (hdr->value_size > 0)\n  {\n    size_t print_len = hdr->value_size > 200 ? 200U : hdr->value_size;\n    fprintf(logf, \"    header_value(len=%zu): '\", print_len);\n    fprintf(logf, \"%.*s\", (int)print_len, hdr->value);\n    if (hdr->value_size > print_len) fprintf(logf, \"... (truncated)\");\n    fprintf(logf, \"'\\n\");\n  }\n  else\n    fprintf(logf, \"    header_value(len=0)\\n\");\n}\n\nstatic void\nmhd_probe_log_enter(FILE *logf,\n                    struct MHD_Response *const r,\n                    size_t *ppos,\n                    size_t buf_size,\n                    bool filter_transf_enc,\n                    bool filter_content_len,\n                    bool add_close,\n                    bool add_keep_alive)\n{\n  if (NULL == logf)\n    return;\n  fprintf(logf, \"add_user_headers ENTER: response=%p r->first_header=%p ppos=%zu buf_size=%zu\\n\",\n          (void *)r, (void *)r->first_header, (ppos ? *ppos : (size_t)0), buf_size);\n  fprintf(logf, \"  filters: filter_transf_enc=%d filter_content_len=%d add_close=%d add_keep_alive=%d\\n\",\n          (int)filter_transf_enc, (int)filter_content_len, (int)add_close, (int)add_keep_alive);\n  fprintf(logf, \"  flags_auto=0x%lx flags=0x%lx\\n\", (unsigned long)r->flags_auto, (unsigned long)r->flags);\n}\n\nstatic void\nmhd_probe_log_exit(FILE *logf, bool result, size_t final_ppos)\n{\n  if (NULL == logf)\n    return;\n  fprintf(logf, \"add_user_headers EXIT: result=%d final_ppos=%zu\\n\\n\", (int)result, final_ppos);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  FILE *logf = fopen(\"/tmp/logs/213.txt\", \"a\");\n  if (logf)\n    mhd_probe_log_enter(logf, r, ppos, buf_size, filter_transf_enc, filter_content_len, add_close, add_keep_alive);\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  size_t hdr_index = 0;\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (logf)\n      mhd_probe_log_header(logf, hdr, hdr_index++, initial_pos, *ppos);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        if (logf) fprintf(logf, \"  Skipping Transfer-Encoding header at hdr=%p\\n\", (void *)hdr);\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        if (logf) fprintf(logf, \"  Skipping Content-Length header at hdr=%p, reset transf_enc=%d\\n\",\n                         (void *)hdr, (int)filter_transf_enc);\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      if (logf) fprintf(logf, \"  Buffer overflow: buf_size=%zu *ppos=%zu needed=%zu -> returning false\\n\",\n                       buf_size, *ppos, el_size);\n      if (logf)\n      {\n        mhd_probe_log_exit(logf, false, *ppos);\n        fclose(logf);\n      }\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          if (logf) fprintf(logf, \"  Buffer overflow when adding 'close, ': buf_size=%zu initial_pos=%zu needed=%zu -> returning false\\n\",\n                           buf_size, initial_pos, el_size);\n          if (logf)\n          {\n            mhd_probe_log_exit(logf, false, *ppos);\n            fclose(logf);\n          }\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          if (logf) fprintf(logf, \"  Buffer overflow when adding 'Keep-Alive, ': buf_size=%zu initial_pos=%zu needed=%zu -> returning false\\n\",\n                           buf_size, initial_pos, el_size);\n          if (logf)\n          {\n            mhd_probe_log_exit(logf, false, *ppos);\n            fclose(logf);\n          }\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  if (logf)\n  {\n    mhd_probe_log_exit(logf, true, *ppos);\n    fclose(logf);\n  }\n  return true;\n}\n"
}