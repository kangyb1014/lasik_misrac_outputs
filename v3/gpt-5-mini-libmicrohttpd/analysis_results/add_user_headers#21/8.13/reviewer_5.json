{
  "user_message": "An agent A claimed that the following add_user_headers code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_user_headers.\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes hdr->value (which appears to be a non-const pointer member of struct MHD_HTTP_Res_Header) to memcpy while only reading from it. According to MISRA C 2023 Rule 8.13, pointers that are not modified should be declared to point to const-qualified types. If hdr->value is declared as char *value (or otherwise non-const), that declaration violates Rule 8.13 \u2014 it should be declared as const char *value (and similarly hdr->header should be const) because the data is only read.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER add_user_headers: buf=0x55e1e75810d0 *ppos=71 buf_size=32576 response=0x55e1e75890c0 filter_transf_enc=1 filter_content_len=1 add_close=0 add_keep_alive=0\nr flags_auto=0x00000001 flags=0x00000000 after adjustments filter_transf_enc=0 filter_content_len=0 add_close=0 add_keep_alive=0\n-- header iteration: hdr=0x55e1e75891a0 kind=1 header_size=10 value_size=7 header_addr=0x55e1e75891e0 value_addr=0x55e1e7589180\n   header.name: addr=0x55e1e75891e0 len=10 data=\"Connection\"\n   copying header name to buf+71 (target=0x55e1e7581117) size=10\n   header.value: addr=0x55e1e7589180 len=7 data=\"Upgrade\"\n   copying header value to buf+83 (target=0x55e1e7581123) size=7 src=0x55e1e7589180\n   finished header iteration hdr=0x55e1e75891a0 new *ppos=92 expected_end=92\n-- header iteration: hdr=0x55e1e7589240 kind=1 header_size=7 value_size=20 header_addr=0x55e1e7589200 value_addr=0x55e1e7589220\n   header.name: addr=0x55e1e7589200 len=7 data=\"Upgrade\"\n   copying header name to buf+92 (target=0x55e1e758112c) size=7\n   header.value: addr=0x55e1e7589220 len=20 data=\"Hello World Protocol\"\n   copying header value to buf+101 (target=0x55e1e7581135) size=20 src=0x55e1e7589220\n   finished header iteration hdr=0x55e1e7589240 new *ppos=123 expected_end=123\nEXIT add_user_headers success: final *ppos=123\nENTER add_user_headers: buf=0x55e1e75810d0 *ppos=71 buf_size=32576 response=0x55e1e7589cd0 filter_transf_enc=1 filter_content_len=1 add_close=0 add_keep_alive=0\nr flags_auto=0x00000001 flags=0x00000000 after adjustments filter_transf_enc=0 filter_content_len=0 add_close=0 add_keep_alive=0\n-- header iteration: hdr=0x55e1e7589d90 kind=1 header_size=10 value_size=7 header_addr=0x55e1e7589200 value_addr=0x55e1e7589220\n   header.name: addr=0x55e1e7589200 len=10 data=\"Connection\"\n   copying header name to buf+71 (target=0x55e1e7581117) size=10\n   header.value: addr=0x55e1e7589220 len=7 data=\"Upgrade\"\n   copying header value to buf+83 (target=0x55e1e7581123) size=7 src=0x55e1e7589220\n   finished header iteration hdr=0x55e1e7589d90 new *ppos=92 expected_end=92\n-- header iteration: hdr=0x55e1e7589dd0 kind=1 header_size=7 value_size=20 header_addr=0x55e1e7589180 value_addr=0x55e1e75891e0\n   header.name: addr=0x55e1e7589180 len=7 data=\"Upgrade\"\n   copying header name to buf+92 (target=0x55e1e758112c) size=7\n   header.value: addr=0x55e1e75891e0 len=20 data=\"Hello World Protocol\"\n   copying header value to buf+101 (target=0x55e1e7581135) size=20 src=0x55e1e75891e0\n   finished header iteration hdr=0x55e1e7589dd0 new *ppos=123 expected_end=123\nEXIT add_user_headers success: final *ppos=123\nENTER add_user_headers: buf=0x55e1e758a4f0 *ppos=71 buf_size=32576 response=0x55e1e758a290 filter_transf_enc=1 filter_content_len=1 add_close=0 add_keep_alive=0\nr flags_auto=0x00000001 flags=0x00000000 after adjustments filter_transf_enc=0 filter_content_len=0 add_close=0 add_keep_alive=0\n-- header iteration: hdr=0x55e1e758a350 kind=1 header_size=10 value_size=7 header_addr=0x55e1e7589180 value_addr=0x55e1e75891e0\n   header.name: addr=0x55e1e7589180 len=10 data=\"Connection\"\n   copying header name to buf+71 (target=0x55e1e758a537) size=10\n   header.value: addr=0x55e1e75891e0 len=7 data=\"Upgrade\"\n   copying header value to buf+83 (target=0x55e1e758a543) size=7 src=0x55e1e75891e0\n   finished header iteration hdr=0x55e1e758a350 new *ppos=92 expected_end=92\n-- header iteration: hdr=0x55e1e758a390 kind=1 header_size=7 value_size=20 header_addr=0x55e1e7589220 value_addr=0x55e1e7589200\n   header.name: addr=0x55e1e7589220 len=7 data=\"Upgrade\"\n   copying header name to buf+92 (target=0x55e1e758a54c) size=7\n   header.value: addr=0x55e1e7589200 len=20 data=\"Hello World Protocol\"\n   copying header value to buf+101 (target=0x55e1e758a555) size=20 src=0x55e1e7589200\n   finished header iteration hdr=0x55e1e758a390 new *ppos=123 expected_end=123\nEXIT add_user_headers success: final *ppos=123\nENTER add_user_headers: buf=0x7f6ca0000e50 *ppos=71 buf_size=32576 response=0x7f6ca8000b90 filter_transf_enc=1 filter_content_len=1 add_close=0 add_keep_alive=0\nr flags_auto=0x00000001 flags=0x00000000 after \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough evidence to conclude a definite MISRA 8.13 violation. Rule 8.13 requires that pointers be declared to point to const-qualified types when that is possible. In the shown function hdr and r are only used for read access, and hdr->header and hdr->value are only read here, so it would be possible (and arguably better) to declare the local pointer as pointing to const (e.g. const struct MHD_HTTP_Res_Header *hdr) or to have the struct members declared as const char *. However, the snippet does not include the definition of struct MHD_HTTP_Res_Header (nor the wider usage of those members elsewhere). If those members (or the pointed-to struct instances) are modified elsewhere in the program, they cannot be declared const; in that case the current declarations would be required and no violation is present. Because the agent A based the claim on an assumed non-const declaration of the struct members but provided no declaration or project-wide analysis demonstrating that they could be const, the report is not proven correct. Recommended action: inspect the declaration of struct MHD_HTTP_Res_Header and all uses of header/value and of MHD_Response to determine whether they are never modified; if they are never modified, change their types (or the local hdr/r pointer types) to point to const to comply with MISRA 8.13."
}