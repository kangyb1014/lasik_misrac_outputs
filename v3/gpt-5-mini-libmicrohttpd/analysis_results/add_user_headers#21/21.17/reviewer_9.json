{
  "user_message": "An agent A claimed that the following add_user_headers code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of add_user_headers.\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. The memcpy can write beyond buf when the prior bounds checks are bypassed by size_t overflow. The code relies on the test \"if (buf_size < *ppos + el_size) return false;\" (and later \"if (buf_size < initial_pos + el_size) return false;\") to guarantee space for hdr->value_size, but the sums *ppos + el_size or initial_pos + el_size can overflow size_t. If that addition wraps, the comparison can succeed incorrectly and the subsequent memcpy(buf + *ppos, hdr->value, hdr->value_size) will write past the end of buf. Example: buf_size = 1024, *ppos = SIZE_MAX - 10, hdr->header_size = 0, hdr->value_size = 20 \u2192 el_size = 24; *ppos + el_size wraps to a small value (< buf_size), the check passes, and memcpy writes 20 bytes outside the buffer. Therefore Rule 21.17 is violated.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[add_user_headers] entry: buf_size=32576, *ppos=71, initial_pos=0, el_size=0, header_size=0, value_size=0, add_close=0, add_keep_alive=0, extra=function entry\n[add_user_headers] start_header: buf_size=32576, *ppos=71, initial_pos=71, el_size=0, header_size=10, value_size=7, add_close=0, add_keep_alive=0, extra=processing header\n[add_user_headers] before first_size_check: *ppos=71, el_size=21, sum=92, wrapped=0, buf_size=32576\n[add_user_headers] about to copy value: dest_offset=83, value_size=7, buf_size=32576\n[add_user_headers] after_header: initial_pos=71, expected_final=92, actual_final=92\n[add_user_headers] start_header: buf_size=32576, *ppos=92, initial_pos=92, el_size=0, header_size=7, value_size=20, add_close=0, add_keep_alive=0, extra=processing header\n[add_user_headers] before first_size_check: *ppos=92, el_size=31, sum=123, wrapped=0, buf_size=32576\n[add_user_headers] about to copy value: dest_offset=101, value_size=20, buf_size=32576\n[add_user_headers] after_header: initial_pos=92, expected_final=123, actual_final=123\n[add_user_headers] exit: final *ppos=123\n[add_user_headers] entry: buf_size=32576, *ppos=71, initial_pos=0, el_size=0, header_size=0, value_size=0, add_close=0, add_keep_alive=0, extra=function entry\n[add_user_headers] start_header: buf_size=32576, *ppos=71, initial_pos=71, el_size=0, header_size=10, value_size=7, add_close=0, add_keep_alive=0, extra=processing header\n[add_user_headers] before first_size_check: *ppos=71, el_size=21, sum=92, wrapped=0, buf_size=32576\n[add_user_headers] about to copy value: dest_offset=83, value_size=7, buf_size=32576\n[add_user_headers] after_header: initial_pos=71, expected_final=92, actual_final=92\n[add_user_headers] start_header: buf_size=32576, *ppos=92, initial_pos=92, el_size=0, header_size=7, value_size=20, add_close=0, add_keep_alive=0, extra=processing header\n[add_user_headers] before first_size_check: *ppos=92, el_size=31, sum=123, wrapped=0, buf_size=32576\n[add_user_headers] about to copy value: dest_offset=101, value_size=20, buf_size=32576\n[add_user_headers] after_header: initial_pos=92, expected_final=123, actual_final=123\n[add_user_headers] exit: final *ppos=123\n[add_user_headers] entry: buf_size=32576, *ppos=71, initial_pos=0, el_size=0, header_size=0, value_size=0, add_close=0, add_keep_alive=0, extra=function entry\n[add_user_headers] start_header: buf_size=32576, *ppos=71, initial_pos=71, el_size=0, header_size=10, value_size=7, add_close=0, add_keep_alive=0, extra=processing header\n[add_user_headers] before first_size_check: *ppos=71, el_size=21, sum=92, wrapped=0, buf_size=32576\n[add_user_headers] about to copy value: dest_offset=83, value_size=7, buf_size=32576\n[add_user_headers] after_header: initial_pos=71, expected_final=92, actual_final=92\n[add_user_headers] start_header: buf_size=32576, *ppos=92, initial_pos=92, el_size=0, header_size=7, value_size=20, add_close=0, add_keep_alive=0, extra=processing header\n[add_user_headers] before first_size_check: *ppos=92, el_size=31, sum=123, wrapped=0, buf_size=32576\n[add_user_headers] about to copy value: dest_offset=101, value_size=20, buf_size=32576\n[add_user_headers] after_header: initial_pos=92, expected_final=123, actual_final=123\n[add_user_headers] exit: final *ppos=123\n[add_user_headers] entry: buf_size=32576, *ppos=71, initial_pos=0, el_size=0, header_size=0, value_size=0, add_close=0, add_keep_alive=0, extra=function entry\n[add_user_headers] start_header: buf_size=32576, *ppos=71, initial_pos=71, el_size=0, header_size=10, value_size=7, add_close=0, add_keep_alive=0, extra=processing header\n[add_user_headers] before first_size_check: *ppos=71, el_size=21, sum=92, wrapped=0, buf_size=32576\n[add_user_headers] about to copy value: dest_offset=83, value_size=7, buf_size=32576\n[add_user_headers] after_header: initial_pos=71, expected_final=92, actual_final=92\n[add_user_headers] start_header: buf_size=32576, *ppos=92, initial_pos=92, el_size=0, header_size=7, value_size=20, add_close=0, add_keep_alive=0, extra=processing header\n[add_user_headers] before first_size_check: *ppos=92, el_size=31, sum=1\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code performs bounds checks like \"if (buf_size < *ppos + el_size) return false;\" and \"if (buf_size < initial_pos + el_size) return false;\" where *ppos, initial_pos and el_size are size_t. If the sum (*ppos + el_size) (or initial_pos + el_size) overflows the size_t range it wraps (unsigned modulo arithmetic), the comparison can be fooled and the function will proceed to memcpy calls that write beyond buf. The memcpy calls (memcpy(buf + *ppos, hdr->header, hdr->header_size) and memcpy(buf + *ppos, hdr->value, hdr->value_size)) therefore can access out of bounds when the checks are bypassed by overflow, violating MISRA C 2023 Rule 21.17.\n\nThe code does not document or enforce a prior invariant that *ppos <= buf_size and that el_size cannot push the sum past SIZE_MAX, and it relies on mhd_assert which may be disabled. To fix, perform overflow-safe checks before the additions, e.g. check *ppos <= buf_size and el_size <= buf_size - *ppos (or use a checked_add helper) and similarly for initial_pos, so that the comparisons cannot be bypassed by wrap-around."
}