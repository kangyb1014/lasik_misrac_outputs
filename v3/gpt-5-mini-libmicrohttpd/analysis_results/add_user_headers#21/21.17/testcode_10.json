{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe comparison uses addition which can overflow size_t. If hdr->header_size, hdr->value_size or *ppos are large enough that initial_pos + el_size (or earlier *ppos + el_size) wraps around, the test buf_size < initial_pos + el_size can be false even though there is not enough space. In that case the subsequent memcpy calls (e.g. memcpy(buf + *ppos, \"close, \", ...) or memcpy(buf + *ppos, hdr->value, ...)) can write past the end of buf, violating Rule 21.17. For example, if el_size is crafted to cause initial_pos + el_size to overflow, the bounds check is bypassed and an out-of-bounds access occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "static void\nprobe_log(const char *stage,\n          struct MHD_Response *r,\n          struct MHD_HTTP_Res_Header *hdr,\n          size_t buf_size,\n          size_t *ppos,\n          size_t initial_pos,\n          size_t el_size,\n          bool add_close,\n          bool add_keep_alive)\n{\n  FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"[add_user_headers] %s\\n\", stage);\n  if (r)\n    fprintf(f, \"  response=%p flags_auto=0x%zx flags=0x%zx\\n\",\n            (void *)r, (size_t)r->flags_auto, (size_t)r->flags);\n  if (hdr)\n    fprintf(f, \"  hdr=%p header_size=%zu value_size=%zu kind=%d\\n\",\n            (void *)hdr, hdr->header_size, hdr->value_size,\n            (int)hdr->kind);\n  fprintf(f, \"  buf_size=%zu *ppos=%zu initial_pos=%zu el_size=%zu add_close=%d add_keep_alive=%d\\n\",\n          buf_size, (ppos ? *ppos : (size_t)0), initial_pos, el_size,\n          (int)add_close, (int)add_keep_alive);\n\n  /* If ppos is valid, try to log the sum (may wrap) to evidence overflow */\n  if (ppos)\n  {\n    size_t sum = *ppos + el_size;\n    size_t sum_init = initial_pos + el_size;\n    fprintf(f, \"  computed: *ppos + el_size = %zu (may have wrapped), initial_pos + el_size = %zu\\n\",\n            sum, sum_init);\n  }\n\n  fclose(f);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  /* Log entry state */\n  probe_log(\"entry\", r, NULL, buf_size, ppos, 0, 0, add_close, add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n\n    /* Log header iteration start */\n    probe_log(\"hdr_loop_start\", r, hdr, buf_size, ppos, initial_pos, 0, add_close, add_keep_alive);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n\n    /* Log just after computing el_size */\n    probe_log(\"computed_el_size\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n\n    /* Original bounds check (may be bypassed if overflow occurs) */\n    probe_log(\"before_first_bounds_check\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n    if (buf_size < *ppos + el_size)\n    {\n      probe_log(\"return_false_first_bounds\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n      return false;\n    }\n\n    /* Log memcpy about to copy header name */\n    probe_log(\"before_memcpy_header\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n\n        /* Log before second bounds check that uses initial_pos */\n        probe_log(\"before_bounds_check_add_close\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n        if (buf_size < initial_pos + el_size)\n        {\n          probe_log(\"return_false_second_bounds_close\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n          return false;\n        }\n\n        probe_log(\"before_memcpy_close\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n\n        /* Log before second bounds check that uses initial_pos */\n        probe_log(\"before_bounds_check_add_keepalive\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n        if (buf_size < initial_pos + el_size)\n        {\n          probe_log(\"return_false_second_bounds_keepalive\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n          return false;\n        }\n\n        probe_log(\"before_memcpy_keepalive\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n\n    if (0 != hdr->value_size)\n    {\n      probe_log(\"before_memcpy_value\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    }\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n\n    /* Log after finishing this header */\n    probe_log(\"after_header_written\", r, hdr, buf_size, ppos, initial_pos, el_size, add_close, add_keep_alive);\n\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  probe_log(\"exit_true\", r, NULL, buf_size, ppos, 0, 0, add_close, add_keep_alive);\n  return true;\n}\n"
}