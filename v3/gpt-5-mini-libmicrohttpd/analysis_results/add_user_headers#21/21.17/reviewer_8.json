{
  "user_message": "An agent A claimed that the following add_user_headers code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of add_user_headers.\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. While the code ensures the destination (buf + *ppos) has enough space (it checks buf_size < *ppos + el_size), it does not validate that hdr->header actually points to an object of at least hdr->header_size bytes. If hdr->header_size is larger than the actual allocated/valid size of hdr->header (for example due to a corrupted or maliciously crafted header struct, truncated allocation, or an inconsistent/invariant violation elsewhere), memcpy(buf + *ppos, hdr->header, hdr->header_size) will read beyond the bounds of hdr->header and thus violate MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nadd_user_headers: entry: r=0x55c572fb00c0, buf=0x55c572fa80d0, *ppos=71, buf_size=32576, filter_transf_enc=1, filter_content_len=1, add_close=0, add_keep_alive=0\nadd_user_headers: resolved r->flags=0x0, r->flags_auto=0x1\niter header: hdr=0x55c572fb01a0, hdr->kind=1, hdr->header=0x55c572fb01e0, hdr->header_size=10, hdr->value=0x55c572fb0180, hdr->value_size=7, initial_pos=71\ncomputed sizes: hdr=0x55c572fb01a0, header_size=10, value_size=7, el_size=21, buf_size=32576, *ppos=71\nabout to memcpy header name: dest=0x55c572fa8117, dest_offset=71, src=0x55c572fb01e0, src_size=10\nabout to memcpy header value: dest=0x55c572fa8123, dest_offset=83, src=0x55c572fb0180, src_size=7\nafter writing header: hdr=0x55c572fb01a0, new *ppos=92, expected_end=92\niter header: hdr=0x55c572fb0240, hdr->kind=1, hdr->header=0x55c572fb0200, hdr->header_size=7, hdr->value=0x55c572fb0220, hdr->value_size=20, initial_pos=92\ncomputed sizes: hdr=0x55c572fb0240, header_size=7, value_size=20, el_size=31, buf_size=32576, *ppos=92\nabout to memcpy header name: dest=0x55c572fa812c, dest_offset=92, src=0x55c572fb0200, src_size=7\nabout to memcpy header value: dest=0x55c572fa8135, dest_offset=101, src=0x55c572fb0220, src_size=20\nafter writing header: hdr=0x55c572fb0240, new *ppos=123, expected_end=123\nadd_user_headers: exit true, final *ppos=123\nadd_user_headers: entry: r=0x55c572fb0cd0, buf=0x55c572fa80d0, *ppos=71, buf_size=32576, filter_transf_enc=1, filter_content_len=1, add_close=0, add_keep_alive=0\nadd_user_headers: resolved r->flags=0x0, r->flags_auto=0x1\niter header: hdr=0x55c572fb0d90, hdr->kind=1, hdr->header=0x55c572fb0200, hdr->header_size=10, hdr->value=0x55c572fb0220, hdr->value_size=7, initial_pos=71\ncomputed sizes: hdr=0x55c572fb0d90, header_size=10, value_size=7, el_size=21, buf_size=32576, *ppos=71\nabout to memcpy header name: dest=0x55c572fa8117, dest_offset=71, src=0x55c572fb0200, src_size=10\nabout to memcpy header value: dest=0x55c572fa8123, dest_offset=83, src=0x55c572fb0220, src_size=7\nafter writing header: hdr=0x55c572fb0d90, new *ppos=92, expected_end=92\niter header: hdr=0x55c572fb0dd0, hdr->kind=1, hdr->header=0x55c572fb0180, hdr->header_size=7, hdr->value=0x55c572fb01e0, hdr->value_size=20, initial_pos=92\ncomputed sizes: hdr=0x55c572fb0dd0, header_size=7, value_size=20, el_size=31, buf_size=32576, *ppos=92\nabout to memcpy header name: dest=0x55c572fa812c, dest_offset=92, src=0x55c572fb0180, src_size=7\nabout to memcpy header value: dest=0x55c572fa8135, dest_offset=101, src=0x55c572fb01e0, src_size=20\nafter writing header: hdr=0x55c572fb0dd0, new *ppos=123, expected_end=123\nadd_user_headers: exit true, final *ppos=123\nadd_user_headers: entry: r=0x55c572fb1290, buf=0x55c572fb14f0, *ppos=71, buf_size=32576, filter_transf_enc=1, filter_content_len=1, add_close=0, add_keep_alive=0\nadd_user_headers: resolved r->flags=0x0, r->flags_auto=0x1\niter header: hdr=0x55c572fb1350, hdr->kind=1, hdr->header=0x55c572fb0180, hdr->header_size=10, hdr->value=0x55c572fb01e0, hdr->value_size=7, initial_pos=71\ncomputed sizes: hdr=0x55c572fb1350, header_size=10, value_size=7, el_size=21, buf_size=32576, *ppos=71\nabout to memcpy header name: dest=0x55c572fb1537, dest_offset=71, src=0x55c572fb0180, src_size=10\nabout to memcpy header value: dest=0x55c572fb1543, dest_offset=83, src=0x55c572fb01e0, src_size=7\nafter writing header: hdr=0x55c572fb1350, new *ppos=92, expected_end=92\niter header: hdr=0x55c572fb1390, hdr->kind=1, hdr->header=0x55c572fb0220, hdr->header_size=7, hdr->value=0x55c572fb0200, hdr->value_size=20, initial_pos=92\ncomputed sizes: hdr=0x55c572fb1390, header_size=7, value_size=20, el_size=31, buf_size=32576, *ppos=92\nabout to memcpy header name: dest=0x55c572fb154c, dest_offset=92, src=0x55c572fb0220, src_size=7\nabout to memcpy header value: dest=0x55c572fb1555, dest_offset=101, src=0x55c572fb0200, src_size=20\nafter writing header: hdr=0x55c572fb1390, new *ppos=123, expected_end=123\nadd_user_headers: exit true, final *ppos=123\nadd_user_headers: entry: r=0x7ff458000b90, buf=0x7ff450000e50, *ppos=71, buf_size=32576, filter_transf_enc=1, filter_content_le\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The code checks destination bounds (buf + *ppos) but does not perform any runtime validation that hdr->header and hdr->value actually point to objects at least hdr->header_size and hdr->value_size bytes long. The memcpy calls therefore rely on an external invariant (that the header/value pointers and their associated sizes are consistent). If that invariant is ever violated (corruption, malformed input, or a bug elsewhere), the memcpy source accesses could read beyond the bounds of the objects referenced by hdr->header or hdr->value and thus violate MISRA C 2023 Rule 21.17. To comply unambiguously with 21.17 the function must either (a) establish/verify the invariant here (validate the pointers/sizes or their provenance), or (b) rely on a provable library invariant documented and enforced at construction time. Absent such proof in the shown code, the reported violation is valid."
}