{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The memcpy can write beyond buf when the prior bounds checks are bypassed by size_t overflow. The code relies on the test \"if (buf_size < *ppos + el_size) return false;\" (and later \"if (buf_size < initial_pos + el_size) return false;\") to guarantee space for hdr->value_size, but the sums *ppos + el_size or initial_pos + el_size can overflow size_t. If that addition wraps, the comparison can succeed incorrectly and the subsequent memcpy(buf + *ppos, hdr->value, hdr->value_size) will write past the end of buf. Example: buf_size = 1024, *ppos = SIZE_MAX - 10, hdr->header_size = 0, hdr->value_size = 20 \u2192 el_size = 24; *ppos + el_size wraps to a small value (< buf_size), the check passes, and memcpy writes 20 bytes outside the buffer. Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "static void logf(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic void log_state(const char *stage,\n                      size_t buf_size,\n                      size_t ppos,\n                      size_t initial_pos,\n                      size_t el_size,\n                      size_t header_size,\n                      size_t value_size,\n                      int add_close,\n                      int add_keep_alive,\n                      const char *extra)\n{\n  /* Log a structured line so reproducer can inspect the condition that leads to overflow */\n  logf(\"[add_user_headers] %s: buf_size=%zu, *ppos=%zu, initial_pos=%zu, el_size=%zu, header_size=%zu, value_size=%zu, add_close=%d, add_keep_alive=%d, extra=%s\\n\",\n       stage, buf_size, ppos, initial_pos, el_size, header_size, value_size, add_close, add_keep_alive, (extra ? extra : \"(null)\"));\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  /* Log entry state */\n  log_state(\"entry\", buf_size, *ppos, (size_t)0, (size_t)0, (size_t)0, (size_t)0, (int)add_close, (int)add_keep_alive, \"function entry\");\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n\n    /* Log header meta at start of processing this header */\n    log_state(\"start_header\", buf_size, *ppos, initial_pos, (size_t)0,\n              hdr->header_size, hdr->value_size, (int)add_close, (int)add_keep_alive,\n              \"processing header\");\n\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        logf(\"[add_user_headers] skipped transfer-encoding header at pos=%zu\\n\", *ppos);\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        logf(\"[add_user_headers] skipped content-length header at pos=%zu\\n\", *ppos);\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n\n    /* Compute sum and detect potential wrap for the first check */\n    {\n      size_t sum = *ppos + el_size;\n      int wrapped = (sum < *ppos) || (sum < el_size);\n      logf(\"[add_user_headers] before first_size_check: *ppos=%zu, el_size=%zu, sum=%zu, wrapped=%d, buf_size=%zu\\n\",\n           *ppos, el_size, sum, wrapped, buf_size);\n      if (buf_size < sum)\n      {\n        log_state(\"return_false_first_check\", buf_size, *ppos, initial_pos, el_size,\n                  hdr->header_size, hdr->value_size, (int)add_close, (int)add_keep_alive,\n                  wrapped ? \"sum wrapped (overflow)\" : \"not enough space\");\n        return false;\n      }\n    }\n\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        {\n          size_t sum2 = initial_pos + el_size;\n          int wrapped2 = (sum2 < initial_pos) || (sum2 < el_size);\n          logf(\"[add_user_headers] before add_close_check: initial_pos=%zu, el_size=%zu, sum2=%zu, wrapped2=%d, buf_size=%zu\\n\",\n               initial_pos, el_size, sum2, wrapped2, buf_size);\n          if (buf_size < sum2)\n          {\n            log_state(\"return_false_add_close\", buf_size, *ppos, initial_pos, el_size,\n                      hdr->header_size, hdr->value_size, (int)add_close, (int)add_keep_alive,\n                      wrapped2 ? \"sum2 wrapped (overflow)\" : \"not enough space for close token\");\n            return false;\n          }\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        {\n          size_t sum2 = initial_pos + el_size;\n          int wrapped2 = (sum2 < initial_pos) || (sum2 < el_size);\n          logf(\"[add_user_headers] before add_keep_alive_check: initial_pos=%zu, el_size=%zu, sum2=%zu, wrapped2=%d, buf_size=%zu\\n\",\n               initial_pos, el_size, sum2, wrapped2, buf_size);\n          if (buf_size < sum2)\n          {\n            log_state(\"return_false_add_keep_alive\", buf_size, *ppos, initial_pos, el_size,\n                      hdr->header_size, hdr->value_size, (int)add_close, (int)add_keep_alive,\n                      wrapped2 ? \"sum2 wrapped (overflow)\" : \"not enough space for keep-alive token\");\n            return false;\n          }\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n    {\n      logf(\"[add_user_headers] about to copy value: dest_offset=%zu, value_size=%zu, buf_size=%zu\\n\",\n           *ppos, hdr->value_size, buf_size);\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    }\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n\n    /* Log post-condition and assert expectation */\n    logf(\"[add_user_headers] after_header: initial_pos=%zu, expected_final=%zu, actual_final=%zu\\n\",\n         initial_pos, (size_t)(initial_pos + el_size), *ppos);\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  logf(\"[add_user_headers] exit: final *ppos=%zu\\n\", *ppos);\n  return true;\n}\n"
}