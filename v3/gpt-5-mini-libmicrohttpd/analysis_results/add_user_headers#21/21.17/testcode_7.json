{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: el_size is computed by adding hdr->header_size, hdr->value_size and several small constants into a size_t. These additions can overflow (wrap-around). Example: if hdr->header_size = SIZE_MAX - 3 and hdr->value_size = 0 then el_size becomes (SIZE_MAX - 3) + 2 + 0 + 2 = SIZE_MAX + 1 -> wraps to 0. The subsequent check if (buf_size < *ppos + el_size) can therefore pass incorrectly and the following memcpy calls (which copy hdr->header_size and hdr->value_size bytes) will write beyond buf bounds. Thus Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <limits.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <inttypes.h>\n\nstatic void\nlog_hdr_state(const char *stage,\n              size_t initial_pos,\n              size_t ppos,\n              size_t buf_size,\n              size_t header_size,\n              size_t value_size,\n              size_t el_size,\n              unsigned long flags_auto,\n              unsigned long flags,\n              int add_close,\n              int add_keep_alive,\n              int overflow_predicted)\n{\n  FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n  if (f == NULL)\n    return; /* Best-effort logging; do not alter program flow */\n  fprintf(f, \"[%s] initial_pos=%zu ppos=%zu buf_size=%zu header_size=%zu value_size=%zu el_size=%zu flags_auto=0x%lx flags=0x%lx add_close=%d add_keep_alive=%d overflow_predicted=%d\\n\",\n          stage, initial_pos, ppos, buf_size, header_size, value_size, el_size,\n          flags_auto, flags, add_close, add_keep_alive, overflow_predicted);\n  fclose(f);\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n\n    /* Log entry to this header iteration */\n    log_hdr_state(\"loop-start\",\n                  initial_pos,\n                  *ppos,\n                  buf_size,\n                  hdr->header_size,\n                  hdr->value_size,\n                  0u,\n                  (unsigned long) r->flags_auto,\n                  (unsigned long) r->flags,\n                  add_close ? 1 : 0,\n                  add_keep_alive ? 1 : 0,\n                  0);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Probe: predict whether additions will overflow size_t */\n    {\n      int overflow_predicted = 0;\n      size_t tmp1, tmp2;\n      /* Compute in safe steps using SIZE_MAX checks */\n      if (hdr->header_size > SIZE_MAX - 2)\n        overflow_predicted = 1;\n      else\n      {\n        tmp1 = hdr->header_size + 2;\n        if (hdr->value_size > SIZE_MAX - 2 - tmp1)\n          overflow_predicted = 1;\n      }\n\n      /* Log predicted overflow before performing the actual computation */\n      log_hdr_state(\"before-el_size-compute\",\n                    initial_pos,\n                    *ppos,\n                    buf_size,\n                    hdr->header_size,\n                    hdr->value_size,\n                    0u,\n                    (unsigned long) r->flags_auto,\n                    (unsigned long) r->flags,\n                    add_close ? 1 : 0,\n                    add_keep_alive ? 1 : 0,\n                    overflow_predicted);\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n\n    /* Log the computed el_size */\n    log_hdr_state(\"after-el_size-compute\",\n                  initial_pos,\n                  *ppos,\n                  buf_size,\n                  hdr->header_size,\n                  hdr->value_size,\n                  el_size,\n                  (unsigned long) r->flags_auto,\n                  (unsigned long) r->flags,\n                  add_close ? 1 : 0,\n                  add_keep_alive ? 1 : 0,\n                  0);\n\n    if (buf_size < *ppos + el_size)\n    {\n      /* Log the failing condition and context so the violation can be reproduced */\n      log_hdr_state(\"return-false-insufficient-buffer\",\n                    initial_pos,\n                    *ppos,\n                    buf_size,\n                    hdr->header_size,\n                    hdr->value_size,\n                    el_size,\n                    (unsigned long) r->flags_auto,\n                    (unsigned long) r->flags,\n                    add_close ? 1 : 0,\n                    add_keep_alive ? 1 : 0,\n                    0);\n      return false;\n    }\n\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          log_hdr_state(\"return-false-insufficient-buffer-after-close\",\n                        initial_pos,\n                        *ppos,\n                        buf_size,\n                        hdr->header_size,\n                        hdr->value_size,\n                        el_size,\n                        (unsigned long) r->flags_auto,\n                        (unsigned long) r->flags,\n                        1,\n                        add_keep_alive ? 1 : 0,\n                        0);\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          log_hdr_state(\"return-false-insufficient-buffer-after-keepalive\",\n                        initial_pos,\n                        *ppos,\n                        buf_size,\n                        hdr->header_size,\n                        hdr->value_size,\n                        el_size,\n                        (unsigned long) r->flags_auto,\n                        (unsigned long) r->flags,\n                        0,\n                        1,\n                        0);\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n\n    /* Final state log for this header */\n    log_hdr_state(\"loop-end\",\n                  initial_pos,\n                  *ppos,\n                  buf_size,\n                  hdr->header_size,\n                  hdr->value_size,\n                  el_size,\n                  (unsigned long) r->flags_auto,\n                  (unsigned long) r->flags,\n                  add_close ? 1 : 0,\n                  add_keep_alive ? 1 : 0,\n                  0);\n\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n"
}