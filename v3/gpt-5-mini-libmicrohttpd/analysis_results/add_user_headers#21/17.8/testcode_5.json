{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'add_keep_alive = false;' assigns to the parameter add_keep_alive, which is a non\u2011pointer function parameter passed by value. Modifying a value parameter violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/217.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "static void\nmhd_log_probe(const char *where,\n              const char *extra,\n              bool add_keep_alive,\n              bool add_close,\n              bool filter_transf_enc,\n              bool filter_content_len,\n              size_t ppos_val,\n              size_t buf_size_val,\n              size_t initial_pos,\n              size_t hdr_header_size,\n              size_t hdr_value_size,\n              unsigned long flags_auto,\n              unsigned long flags)\n{\n  FILE *f = fopen(\"/tmp/logs/217.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f,\n            \"LOC=%s EXTRA=%s add_keep_alive=%d add_close=%d filter_transf_enc=%d filter_content_len=%d ppos=%zu buf_size=%zu initial_pos=%zu hdr_h_size=%zu hdr_v_size=%zu flags_auto=0x%lx flags=0x%lx\\n\",\n            where,\n            (extra != NULL) ? extra : \"\",\n            (int) add_keep_alive,\n            (int) add_close,\n            (int) filter_transf_enc,\n            (int) filter_content_len,\n            ppos_val,\n            buf_size_val,\n            initial_pos,\n            hdr_header_size,\n            hdr_value_size,\n            flags_auto,\n            flags);\n    fclose(f);\n  }\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Log entry state */\n  mhd_log_probe(\"enter\", \"function entry\",\n                add_keep_alive, add_close,\n                filter_transf_enc, filter_content_len,\n                (ppos != NULL) ? *ppos : 0U,\n                buf_size,\n                0U, 0U, 0U,\n                (unsigned long) (r ? r->flags_auto : 0U),\n                (unsigned long) (r ? r->flags : 0U));\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n  {\n    mhd_log_probe(\"filter_transf_enc_reset\", \"no TRANS_ENC_CHUNKED flag\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, 0U, 0U, 0U,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n    filter_transf_enc = false;   /* No such header */\n\n    mhd_log_probe(\"filter_transf_enc_reset_after\", \"filter_transf_enc set false\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, 0U, 0U, 0U,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  {\n    mhd_log_probe(\"filter_content_len_reset\", \"no CONTENT_LENGTH flag\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, 0U, 0U, 0U,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n    filter_content_len = false;  /* No such header */\n\n    mhd_log_probe(\"filter_content_len_reset_after\", \"filter_content_len set false\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, 0U, 0U, 0U,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    mhd_log_probe(\"no_connection_hdr_before\", \"about to clear add_close/add_keep_alive\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, 0U, 0U, 0U,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n\n    mhd_log_probe(\"no_connection_hdr_after\", \"cleared add_close/add_keep_alive\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, 0U, 0U, 0U,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_log_probe(\"has_connection_close_before\", \"about to clear add_close\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, 0U, 0U, 0U,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n    add_close = false;          /* \"close\" token was already set */\n\n    mhd_log_probe(\"has_connection_close_after\", \"cleared add_close\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, 0U, 0U, 0U,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n  }\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n\n    /* Log start of iteration */\n    mhd_log_probe(\"loop_iter_start\", \"header iteration start\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, initial_pos,\n                  hdr ? hdr->header_size : 0U,\n                  hdr ? hdr->value_size : 0U,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        mhd_log_probe(\"filter_transf_enc_found\", \"found Transfer-Encoding header\",\n                      add_keep_alive, add_close,\n                      filter_transf_enc, filter_content_len,\n                      *ppos, buf_size, initial_pos,\n                      hdr->header_size, hdr->value_size,\n                      (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n        filter_transf_enc = false; /* There is the only one such header */\n\n        mhd_log_probe(\"filter_transf_enc_after\", \"skipping Transfer-Encoding\",\n                      add_keep_alive, add_close,\n                      filter_transf_enc, filter_content_len,\n                      *ppos, buf_size, initial_pos,\n                      hdr->header_size, hdr->value_size,\n                      (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        mhd_log_probe(\"filter_content_len_found\", \"found Content-Length header\",\n                      add_keep_alive, add_close,\n                      filter_transf_enc, filter_content_len,\n                      *ppos, buf_size, initial_pos,\n                      hdr->header_size, hdr->value_size,\n                      (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n\n        mhd_log_probe(\"filter_content_len_after\", \"skipping Content-Length\",\n                      add_keep_alive, add_close,\n                      filter_transf_enc, filter_content_len,\n                      *ppos, buf_size, initial_pos,\n                      hdr->header_size, hdr->value_size,\n                      (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      mhd_log_probe(\"return_false_buffer_small_before_copy\", \"insufficient buffer before adding header\",\n                    add_keep_alive, add_close,\n                    filter_transf_enc, filter_content_len,\n                    *ppos, buf_size, initial_pos,\n                    hdr->header_size, hdr->value_size,\n                    (unsigned long) r->flags_auto, (unsigned long) r->flags);\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_log_probe(\"return_false_buffer_small_before_close\", \"insufficient buffer for close token\",\n                        add_keep_alive, add_close,\n                        filter_transf_enc, filter_content_len,\n                        *ppos, buf_size, initial_pos,\n                        hdr->header_size, hdr->value_size,\n                        (unsigned long) r->flags_auto, (unsigned long) r->flags);\n          return false;\n        }\n\n        mhd_log_probe(\"add_close_before\", \"about to append \\\"close, \\\"\",\n                      add_keep_alive, add_close,\n                      filter_transf_enc, filter_content_len,\n                      *ppos, buf_size, initial_pos,\n                      hdr->header_size, hdr->value_size,\n                      (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n\n        mhd_log_probe(\"add_close_after\", \"appended \\\"close, \\\"\",\n                      add_keep_alive, add_close,\n                      filter_transf_enc, filter_content_len,\n                      *ppos, buf_size, initial_pos,\n                      hdr->header_size, hdr->value_size,\n                      (unsigned long) r->flags_auto, (unsigned long) r->flags);\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_log_probe(\"return_false_buffer_small_before_keepalive\", \"insufficient buffer for Keep-Alive token\",\n                        add_keep_alive, add_close,\n                        filter_transf_enc, filter_content_len,\n                        *ppos, buf_size, initial_pos,\n                        hdr->header_size, hdr->value_size,\n                        (unsigned long) r->flags_auto, (unsigned long) r->flags);\n          return false;\n        }\n\n        mhd_log_probe(\"add_keep_alive_before\", \"about to append \\\"Keep-Alive, \\\"\",\n                      add_keep_alive, add_close,\n                      filter_transf_enc, filter_content_len,\n                      *ppos, buf_size, initial_pos,\n                      hdr->header_size, hdr->value_size,\n                      (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n\n        mhd_log_probe(\"add_keep_alive_after\", \"appended \\\"Keep-Alive, \\\"\",\n                      add_keep_alive, add_close,\n                      filter_transf_enc, filter_content_len,\n                      *ppos, buf_size, initial_pos,\n                      hdr->header_size, hdr->value_size,\n                      (unsigned long) r->flags_auto, (unsigned long) r->flags);\n      }\n      add_close = false;\n      add_keep_alive = false;\n\n      mhd_log_probe(\"after_clear_tokens\", \"cleared add_close and add_keep_alive after adding token\",\n                    add_keep_alive, add_close,\n                    filter_transf_enc, filter_content_len,\n                    *ppos, buf_size, initial_pos,\n                    hdr->header_size, hdr->value_size,\n                    (unsigned long) r->flags_auto, (unsigned long) r->flags);\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n\n    mhd_assert (initial_pos + el_size == (*ppos));\n\n    /* Log end of iteration */\n    mhd_log_probe(\"loop_iter_end\", \"header iteration end\",\n                  add_keep_alive, add_close,\n                  filter_transf_enc, filter_content_len,\n                  *ppos, buf_size, initial_pos,\n                  hdr->header_size, hdr->value_size,\n                  (unsigned long) r->flags_auto, (unsigned long) r->flags);\n  }\n\n  mhd_log_probe(\"exit\", \"function exit returning true\",\n                add_keep_alive, add_close,\n                filter_transf_enc, filter_content_len,\n                *ppos, buf_size, 0U, 0U, 0U,\n                (unsigned long) r->flags_auto, (unsigned long) r->flags);\n\n  return true;\n}\n"
}