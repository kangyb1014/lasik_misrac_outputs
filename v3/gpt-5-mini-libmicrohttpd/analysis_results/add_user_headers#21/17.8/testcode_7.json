{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe local assignment modifies the scalar parameter 'filter_transf_enc' (a function parameter passed by value). The statement\nfilter_transf_enc = (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\nreassigns the parameter inside the function, which violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/217.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_user_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified add_user_headers code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper to record control flow and state for debugging. */\nstatic void\nmhd_probe_log_state(const char *tag,\n                    struct MHD_Response *r,\n                    bool filter_transf_enc,\n                    bool filter_content_len,\n                    bool add_close,\n                    bool add_keep_alive,\n                    size_t *ppos)\n{\n  FILE *f = fopen(\"/tmp/logs/217.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Print key state values. Cast flags to unsigned for safe printing. */\n    fprintf(f, \"%s: r=%p flags_auto=0x%08x flags=0x%08x filter_transf_enc=%d filter_content_len=%d add_close=%d add_keep_alive=%d *ppos=%zu\\n\",\n            tag,\n            (void *) r,\n            (unsigned int) r->flags_auto,\n            (unsigned int) r->flags,\n            filter_transf_enc ? 1 : 0,\n            filter_content_len ? 1 : 0,\n            add_close ? 1 : 0,\n            add_keep_alive ? 1 : 0,\n            (ppos != NULL) ? *ppos : (size_t)0);\n    fclose(f);\n  }\n}\n\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Log entry state */\n  mhd_probe_log_state(\"ENTRY\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n  {\n    mhd_probe_log_state(\"Before clear filter_transf_enc (no trans enc chunked)\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n    filter_transf_enc = false;   /* No such header */\n    mhd_probe_log_state(\"After clear filter_transf_enc (no trans enc chunked)\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  {\n    mhd_probe_log_state(\"Before clear filter_content_len (no content length)\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n    filter_content_len = false;  /* No such header */\n    mhd_probe_log_state(\"After clear filter_content_len (no content length)\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    mhd_probe_log_state(\"Before clear connection tokens (no connection header)\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n    mhd_probe_log_state(\"After clear connection tokens (no connection header)\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_probe_log_state(\"Before clear add_close (connection close already set)\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n    add_close = false;          /* \"close\" token was already set */\n    mhd_probe_log_state(\"After clear add_close (connection close already set)\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n  }\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Log the moment before we shadow the parameter by assigning false */\n        {\n          FILE *f = fopen(\"/tmp/logs/217.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \"Hit Transfer-Encoding header: hdr=%p header_size=%zu. filter_transf_enc before=1. Setting to false and continuing.\\n\",\n                    (void *) hdr, hdr->header_size);\n            fclose(f);\n          }\n        }\n\n        filter_transf_enc = false; /* There is the only one such header */\n        mhd_probe_log_state(\"After clear filter_transf_enc (found Transfer-Encoding)\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        mhd_probe_log_state(\"Before resetting filter_transf_enc due to Content-Length handling\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n\n        /* This is the potentially problematic reassignment of the parameter */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n\n        {\n          FILE *f = fopen(\"/tmp/logs/217.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \"Reset filter_transf_enc due to Content-Length header: r->flags=0x%08x new_filter_transf_enc=%d\\n\",\n                    (unsigned int) r->flags,\n                    filter_transf_enc ? 1 : 0);\n            fclose(f);\n          }\n        }\n\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      mhd_probe_log_state(\"BUFFER_TOO_SMALL before returning false\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header,\n                                             MHD_HTTP_HEADER_CONNECTION,\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_probe_log_state(\"BUFFER_TOO_SMALL for close token before returning false\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          mhd_probe_log_state(\"BUFFER_TOO_SMALL for Keep-Alive token before returning false\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n      mhd_probe_log_state(\"After handling connection token\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  mhd_probe_log_state(\"EXIT returning true\", r, filter_transf_enc, filter_content_len, add_close, add_keep_alive, ppos);\n  return true;\n}\n"
}