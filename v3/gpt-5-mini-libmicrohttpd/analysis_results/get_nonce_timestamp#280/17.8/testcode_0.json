{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns to the parameter 'noncelen' (noncelen = strlen(nonce);). MISRA C 2023 Rule 17.8 prohibits modifying function parameters. Although the pointer parameters are const, 'noncelen' is a value parameter and is being modified by assignment, which violates the rule. Fix: introduce a local variable (e.g. size_t len = noncelen; if (len == 0) len = strlen(nonce);) and use that local variable instead of modifying the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2807.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe helper: log when the parameter 'noncelen' is assigned. */\nstatic void\nprobe_log_assignment(const char *nonce, size_t old_noncelen, size_t new_noncelen)\n{\n  FILE *f = fopen(\"/tmp/logs/2807.txt\", \"a\");\n  if (f)\n    {\n      fprintf(f, \"[probe] get_nonce_timestamp: assignment observed: nonce=\\\"%s\\\", noncelen_old=%zu, noncelen_new=%zu\\n\",\n              nonce ? nonce : \"(null)\", old_noncelen, new_noncelen);\n      fclose(f);\n    }\n}\n\n/* Probe helper: log generic events and state. */\nstatic void\nprobe_log_event(const char *event, const char *nonce, size_t noncelen, uint64_t timestamp, int have_timestamp)\n{\n  FILE *f = fopen(\"/tmp/logs/2807.txt\", \"a\");\n  if (f)\n    {\n      if (have_timestamp)\n        fprintf(f, \"[probe] get_nonce_timestamp: %s: nonce=\\\"%s\\\", noncelen=%zu, timestamp=%\" PRIu64 \"\\n\",\n                event, nonce ? nonce : \"(null)\", noncelen, timestamp);\n      else\n        fprintf(f, \"[probe] get_nonce_timestamp: %s: nonce=\\\"%s\\\", noncelen=%zu\\n\",\n                event, nonce ? nonce : \"(null)\", noncelen);\n      fclose(f);\n    }\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    {\n      /* Log that we entered the branch where the parameter is modified. */\n      probe_log_event(\"noncelen==0_before_assignment\", nonce, noncelen, 0, 0);\n\n      /* The original code assigns to the parameter 'noncelen' here. Keep that\n         behavior to preserve original logic and to capture the violation. */\n      size_t old_noncelen = noncelen;\n      noncelen = strlen (nonce);\n\n      /* Log the assignment (evidence for the violation scenario). */\n      probe_log_assignment(nonce, old_noncelen, noncelen);\n    }\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    {\n      probe_log_event(\"length_mismatch\", nonce, noncelen, 0, 0);\n      return false;\n    }\n\n  /* Preserve original parsing call but capture its result for logging. */\n  size_t parsed = MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                                         TIMESTAMP_CHARS_LEN,\n                                         ptimestamp);\n\n  if (TIMESTAMP_CHARS_LEN != parsed)\n    {\n      probe_log_event(\"timestamp_parse_failed\", nonce, noncelen, 0, 0);\n      return false;\n    }\n\n  /* Log successful parse and the parsed timestamp value. */\n  probe_log_event(\"timestamp_parse_success\", nonce, noncelen, *ptimestamp, 1);\n  return true;\n}\n"
}