{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler-specific language extensions are used in the provided code fragment. Specifically:\n- No vendor-specific keywords or builtins (e.g. __attribute__, __asm, __builtin_*, __typeof__, typeof, __extension__) appear.\n- The use of bool/true/false and fixed-width integer types (uint64_t) are standard C (C99) facilities (stdbool.h/stdint.h), not compiler extensions.\n- The preprocessor conditionals (#ifdef / #if defined / #endif) and macro invocations (NONCE_STD_LEN(...), MHD_MD5_SUPPORT, etc.) are standard preprocessor features, not language extensions.\n- Pointer and const usage (const char *const) is standard C syntax.\n- Function declaration/definition style (static bool get_nonce_timestamp(...)) is standard.\n- The code does not use nested functions, statement expressions, variable-length arrays, or other known compiler-specific constructs.\n\nTherefore there are no fragments that need investigation for MISRA C 2023 Rule 1.2 (Language extensions should not be used). If you want, I can also check for inclusion of required standard headers (stdbool.h/stdint.h/string.h) or inspect other files for use of compiler-specific macros or attributes that could make these symbols compiler extensions."
}