{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf noncelen == 0 the code calls strlen(nonce) without checking that nonce is non-NULL and that the object pointed to by nonce is NUL-terminated within its accessible bounds. For example, if the caller passes noncelen == 0 and nonce points to a buffer that is not NUL-terminated (or is NULL), strlen will read past the buffer bounds (or dereference NULL), causing an out-of-bounds access and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2809.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *fp = fopen(\"/tmp/logs/2809.txt\", \"a\");\n  if (fp == NULL)\n  {\n    return;\n  }\n  va_start (ap, fmt);\n  (void)vfprintf (fp, fmt, ap);\n  va_end (ap);\n  (void)fclose (fp);\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Log entry with pointer value and initial length */\n  probe_log(\"ENTER get_nonce_timestamp: nonce=%p, noncelen=%zu\\n\", (void *)nonce, noncelen);\n\n  if (0 == noncelen)\n  {\n    /* Log that strlen will be called (this mirrors original behavior).\n       We do NOT attempt to dereference nonce here except to print its address. */\n    probe_log(\"noncelen == 0: about to call strlen(nonce). nonce pointer=%p\\n\", (void *)nonce);\n\n    /* Preserve original logic: may cause out-of-bounds read or NULL dereference\n       if nonce is NULL or not NUL-terminated. This is intentional for repro. */\n    noncelen = strlen (nonce);\n\n    probe_log(\"After strlen: noncelen=%zu\\n\", noncelen);\n  }\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n  {\n    probe_log(\"Early return (first check): noncelen=%zu -> returning false\\n\", noncelen);\n    return false;\n  }\n\n  /* Compute pointer used for timestamp extraction. Log pointer and lengths. */\n  const char *timestamp_ptr = nonce + noncelen - TIMESTAMP_CHARS_LEN;\n  probe_log(\"About to call MHD_strx_to_uint64_n_: timestamp_ptr=%p, noncelen=%zu, TIMESTAMP_CHARS_LEN=%zu\\n\",\n            (void *)timestamp_ptr, noncelen, (size_t)TIMESTAMP_CHARS_LEN);\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (timestamp_ptr,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n  {\n    probe_log(\"MHD_strx_to_uint64_n_ failed: timestamp_ptr=%p, TIMESTAMP_CHARS_LEN=%zu -> returning false\\n\",\n              (void *)timestamp_ptr, (size_t)TIMESTAMP_CHARS_LEN);\n    return false;\n  }\n\n  probe_log(\"Success: parsed timestamp=%llu from timestamp_ptr=%p\\n\",\n            (unsigned long long)(*ptimestamp), (void *)timestamp_ptr);\n  return true;\n}\n"
}