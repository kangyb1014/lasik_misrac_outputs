{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf neither MHD_MD5_SUPPORT nor MHD_SHA256_SUPPORT nor MHD_SHA512_256_SUPPORT is defined, the preprocessor removes the && clauses and the fragment becomes 'if (true) return false;'. That makes the subsequent statements in the function unreachable (unconditional return), violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2801.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n#include <inttypes.h>\n\n/* Probe logging helpers: write compact state and control-flow logs to /tmp/logs/2801.txt */\nstatic void\nprobe_log_simple (const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/2801.txt\", \"a\");\n  if (f != NULL)\n    {\n      fprintf (f, \"%s\\n\", msg);\n      fclose (f);\n    }\n}\n\nstatic void\nprobe_log_state (const char *phase,\n                 const char *const nonce,\n                 size_t noncelen,\n                 const uint64_t *const ptimestamp)\n{\n  FILE *f = fopen(\"/tmp/logs/2801.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf (f, \"phase=%s nonce=%p noncelen=%zu ptimestamp=%p\\n\",\n           phase, (void *) nonce, noncelen, (void *) ptimestamp);\n  fclose (f);\n}\n\nstatic void\nprobe_log_macros_and_decision (const char *decision)\n{\n  /* Build a small compile-time string describing which support macros are present. */\n  const char *macro_info = \n#ifdef MHD_MD5_SUPPORT\n    \"MHD_MD5_SUPPORT=1 \"\n#else\n    \"MHD_MD5_SUPPORT=0 \"\n#endif\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n    \"SHA256_OR_SHA512_256_SUPPORT=1\"\n#else\n    \"SHA256_OR_SHA512_256_SUPPORT=0\"\n#endif\n    ;\n\n  FILE *f = fopen(\"/tmp/logs/2801.txt\", \"a\");\n  if (f != NULL)\n    {\n      fprintf (f, \"macros=[%s] decision=%s\\n\", macro_info, decision);\n      fclose (f);\n    }\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Log entry and initial state. */\n  probe_log_state (\"entry\", nonce, noncelen, ptimestamp);\n\n  if (0 == noncelen)\n    {\n      /* Log that we will compute length from the string. */\n      probe_log_simple (\"noncelen==0: computing length with strlen(nonce)\");\n      /* Preserve original logic: compute and assign. */\n      noncelen = strlen (nonce);\n      probe_log_state (\"after_strlen\", nonce, noncelen, ptimestamp);\n    }\n\n  /* Log the macro configuration and that we are about to evaluate the early-return condition. */\n  probe_log_macros_and_decision (\"evaluating early-return condition\");\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    {\n      /* Log that we are taking the early return branch. This is crucial evidence when\n         the preprocessor reduces the condition to 'if (true)'. */\n      probe_log_macros_and_decision (\"early-return: returning false\");\n      return false;\n    }\n\n  probe_log_macros_and_decision (\"passed early-return check: proceeding to parse timestamp\");\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    {\n      probe_log_simple (\"timestamp parse failed: returning false\");\n      return false;\n    }\n\n  probe_log_simple (\"timestamp parse succeeded: returning true\");\n  return true;\n}\n"
}