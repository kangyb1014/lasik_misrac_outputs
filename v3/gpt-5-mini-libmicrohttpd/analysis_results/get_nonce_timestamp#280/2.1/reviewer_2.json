{
  "user_message": "An agent A claimed that the following get_nonce_timestamp code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_nonce_timestamp.\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf neither MHD_MD5_SUPPORT nor MHD_SHA256_SUPPORT nor MHD_SHA512_256_SUPPORT is defined, the preprocessor removes the && clauses and the fragment becomes 'if (true) return false;'. That makes the subsequent statements in the function unreachable (unconditional return), violating MISRA C 2023 Rule 2.1.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. If none of MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT or MHD_SHA512_256_SUPPORT is defined the preprocessor removes the && clauses and the condition becomes `if (true) return false;`. That makes the remainder of the function (the following `if (...) return false;` and the final `return true;`) unreachable in that translation unit. MISRA C 2023 Rule 2.1 prohibits unreachable code in the project; thus, for a build configuration where none of those macros is defined this code violates Rule 2.1. (If at least one of the macros is defined the condition is meaningful and the code may be reachable.)"
}