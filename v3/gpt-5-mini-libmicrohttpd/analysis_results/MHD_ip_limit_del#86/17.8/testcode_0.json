{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'daemon = MHD_get_master(daemon);' reassigns the function parameter 'daemon', thereby modifying the pointer parameter itself. MISRA C 2023 Rule 17.8 forbids modifying function parameters (the object pointed to may be modified, but not the pointer parameter). To conform, the code should use a local variable, e.g. 'struct MHD_Daemon *master = MHD_get_master(daemon);' and use 'master' thereafter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_limit_del code that contains useful probe functions that print useful logs to a file \"/tmp/logs/867.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_limit_del as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_limit_del:\n```c\nstatic void\nMHD_ip_limit_del (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount search_key;\n  struct MHD_IPCount *found_key;\n  void **nodep;\n\n  daemon = MHD_get_master (daemon);\n  /* Ignore if no connection limit assigned */\n  if (0 == daemon->per_ip_connection_limit)\n    return;\n  /* Initialize search key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    &search_key))\n    return;\n\n  MHD_ip_count_lock (daemon);\n\n  /* Search for the IP address */\n  if (NULL == (nodep = tfind (&search_key,\n                              &daemon->per_ip_connection_count,\n                              &MHD_ip_addr_compare)))\n  {\n    /* Something's wrong if we couldn't find an IP address\n     * that was previously added */\n    MHD_PANIC (_ (\"Failed to find previously-added IP address.\\n\"));\n  }\n  found_key = (struct MHD_IPCount *) *nodep;\n  /* Validate existing count for IP address */\n  if (0 == found_key->count)\n  {\n    MHD_PANIC (_ (\"Previously-added IP address had counter of zero.\\n\"));\n  }\n  /* Remove the node entirely if count reduces to 0 */\n  if (0 == --found_key->count)\n  {\n    tdelete (found_key,\n             &daemon->per_ip_connection_count,\n             &MHD_ip_addr_compare);\n    MHD_ip_count_unlock (daemon);\n    free (found_key);\n  }\n  else\n    MHD_ip_count_unlock (daemon);\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_limit_del code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/867.txt */\nstatic void\nMHD_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/867.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Timestamp for easier tracing */\n  time_t t = time(NULL);\n  struct tm tmbuf;\n  if (NULL != localtime_r(&t, &tmbuf))\n  {\n    char timestr[64];\n    if (0 < strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmbuf))\n      fprintf(f, \"%s - \", timestr);\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Keep the original function signature and logic; only add probes. */\nstatic void\nMHD_ip_limit_del (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount search_key;\n  struct MHD_IPCount *found_key;\n  void **nodep;\n\n  /* Log pointer value before master lookup */\n  MHD_probe_log(\"enter MHD_ip_limit_del: daemon param=%p, addr=%p, addrlen=%u\",\n                (void *)daemon, (const void *)addr, (unsigned)addrlen);\n\n  daemon = MHD_get_master (daemon);\n\n  /* Log pointer value after master lookup to show the parameter was reassigned */\n  MHD_probe_log(\"after MHD_get_master: daemon=%p\", (void *)daemon);\n\n  /* Ignore if no connection limit assigned */\n  MHD_probe_log(\"per_ip_connection_limit=%u\", (unsigned)daemon->per_ip_connection_limit);\n  if (0 == daemon->per_ip_connection_limit)\n  {\n    MHD_probe_log(\"exiting: no per-IP connection limit assigned\");\n    return;\n  }\n\n  /* Initialize search key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    &search_key))\n  {\n    MHD_probe_log(\"MHD_ip_addr_to_key failed for addr=%p, addrlen=%u\", (const void *)addr, (unsigned)addrlen);\n    return;\n  }\n\n  MHD_probe_log(\"search_key initialized\");\n\n  MHD_ip_count_lock (daemon);\n  MHD_probe_log(\"acquired ip count lock\");\n\n  /* Search for the IP address */\n  if (NULL == (nodep = tfind (&search_key,\n                              &daemon->per_ip_connection_count,\n                              &MHD_ip_addr_compare)))\n  {\n    /* Something's wrong if we couldn't find an IP address\n     * that was previously added */\n    MHD_probe_log(\"tfind returned NULL for search_key at daemon=%p\", (void *)daemon);\n    MHD_PANIC (_ (\"Failed to find previously-added IP address.\\n\"));\n  }\n\n  found_key = (struct MHD_IPCount *) *nodep;\n  MHD_probe_log(\"found_key=%p, count(before)=%u\", (void *)found_key, (unsigned)found_key->count);\n\n  /* Validate existing count for IP address */\n  if (0 == found_key->count)\n  {\n    MHD_probe_log(\"panic: found_key count is zero (unexpected)\");\n    MHD_PANIC (_ (\"Previously-added IP address had counter of zero.\\n\"));\n  }\n\n  /* Remove the node entirely if count reduces to 0 */\n  if (0 == --found_key->count)\n  {\n    MHD_probe_log(\"decremented count -> now zero, removing node and freeing: found_key=%p\", (void *)found_key);\n    tdelete (found_key,\n             &daemon->per_ip_connection_count,\n             &MHD_ip_addr_compare);\n    MHD_ip_count_unlock (daemon);\n    free (found_key);\n    MHD_probe_log(\"node removed and memory freed\");\n  }\n  else\n  {\n    MHD_probe_log(\"decremented count -> now %u, not removing\", (unsigned)found_key->count);\n    MHD_ip_count_unlock (daemon);\n  }\n\n  MHD_probe_log(\"exit MHD_ip_limit_del: daemon=%p\", (void *)daemon);\n}\n"
}