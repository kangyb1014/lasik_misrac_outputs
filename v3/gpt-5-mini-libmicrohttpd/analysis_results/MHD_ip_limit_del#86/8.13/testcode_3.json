{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable nodep is declared as \"void **nodep\" but it is only used to read the stored pointer returned by tfind (it is assigned from tfind and dereferenced only to read *nodep). Since *nodep is not modified through nodep, the pointed-to type could be const-qualified (e.g. declare as \"void * const *nodep\"). Therefore this use violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_limit_del code that contains useful probe functions that print useful logs to a file \"/tmp/logs/863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_limit_del as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_limit_del:\n```c\nstatic void\nMHD_ip_limit_del (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount search_key;\n  struct MHD_IPCount *found_key;\n  void **nodep;\n\n  daemon = MHD_get_master (daemon);\n  /* Ignore if no connection limit assigned */\n  if (0 == daemon->per_ip_connection_limit)\n    return;\n  /* Initialize search key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    &search_key))\n    return;\n\n  MHD_ip_count_lock (daemon);\n\n  /* Search for the IP address */\n  if (NULL == (nodep = tfind (&search_key,\n                              &daemon->per_ip_connection_count,\n                              &MHD_ip_addr_compare)))\n  {\n    /* Something's wrong if we couldn't find an IP address\n     * that was previously added */\n    MHD_PANIC (_ (\"Failed to find previously-added IP address.\\n\"));\n  }\n  found_key = (struct MHD_IPCount *) *nodep;\n  /* Validate existing count for IP address */\n  if (0 == found_key->count)\n  {\n    MHD_PANIC (_ (\"Previously-added IP address had counter of zero.\\n\"));\n  }\n  /* Remove the node entirely if count reduces to 0 */\n  if (0 == --found_key->count)\n  {\n    tdelete (found_key,\n             &daemon->per_ip_connection_count,\n             &MHD_ip_addr_compare);\n    MHD_ip_count_unlock (daemon);\n    free (found_key);\n  }\n  else\n    MHD_ip_count_unlock (daemon);\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_limit_del code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe helper: append diagnostic lines to /tmp/logs/863.txt. */\nstatic void\nMHD_log_write (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/863.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  time_t t = time(NULL);\n  struct tm *lt = localtime(&t);\n  if (lt != NULL)\n    fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n            lt->tm_year + 1900, lt->tm_mon + 1, lt->tm_mday,\n            lt->tm_hour, lt->tm_min, lt->tm_sec);\n  else\n    fprintf(f, \"[no-time] \");\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic void\nMHD_log_ipcount_state(const char *stage, struct MHD_Daemon *daemon, void **nodep, struct MHD_IPCount *found_key)\n{\n  /* Log only the information we can without depending on full type definitions. */\n  if (daemon != NULL)\n    MHD_log_write(\"%s: daemon=%p per_ip_connection_limit=%d per_ip_connection_count=%p\",\n                  stage, (void *)daemon, (int)daemon->per_ip_connection_limit,\n                  (void *)&daemon->per_ip_connection_count);\n  else\n    MHD_log_write(\"%s: daemon=NULL\", stage);\n\n  MHD_log_write(\"%s: nodep=%p\", stage, (void *)nodep);\n  if (nodep != NULL)\n    MHD_log_write(\"%s: *nodep=%p\", stage, (void *)*nodep);\n  if (found_key != NULL)\n    MHD_log_write(\"%s: found_key=%p count=%d\", stage, (void *)found_key, found_key->count);\n}\n\nstatic void\nMHD_ip_limit_del (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount search_key;\n  struct MHD_IPCount *found_key;\n  void **nodep;\n\n  MHD_log_write(\"enter MHD_ip_limit_del: daemon_in=%p addr=%p addrlen=%u\",\n                (void *)daemon, (const void *)addr, (unsigned)addrlen);\n\n  daemon = MHD_get_master (daemon);\n  MHD_log_write(\"after MHD_get_master: daemon=%p per_ip_connection_limit=%d\",\n                (void *)daemon,\n                (daemon != NULL) ? (int)daemon->per_ip_connection_limit : -1);\n\n  /* Ignore if no connection limit assigned */\n  if (0 == daemon->per_ip_connection_limit)\n  {\n    MHD_log_write(\"no per-ip limit (0) -> return\");\n    return;\n  }\n\n  /* Initialize search key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    &search_key))\n  {\n    MHD_log_write(\"MHD_ip_addr_to_key returned MHD_NO -> return (addr=%p addrlen=%u)\",\n                  (const void *)addr, (unsigned)addrlen);\n    return;\n  }\n\n  MHD_log_write(\"search_key initialized at %p\", (void *)&search_key);\n\n  MHD_ip_count_lock (daemon);\n  MHD_log_write(\"locked ip count for daemon=%p\", (void *)daemon);\n\n  /* Search for the IP address */\n  if (NULL == (nodep = tfind (&search_key,\n                              &daemon->per_ip_connection_count,\n                              &MHD_ip_addr_compare)))\n  {\n    /* Something's wrong if we couldn't find an IP address\n     * that was previously added */\n    MHD_log_write(\"tfind returned NULL for search_key=%p per_ip_connection_count=%p\",\n                  (void *)&search_key, (void *)&daemon->per_ip_connection_count);\n    MHD_PANIC (_ (\"Failed to find previously-added IP address.\\n\"));\n  }\n\n  found_key = (struct MHD_IPCount *) *nodep;\n\n  /* Log state right after finding the node. This captures the pointer chain\n     that is relevant to the violation scenario: nodep (void **), *nodep (void *),\n     and found_key (struct MHD_IPCount *). */\n  MHD_log_ipcount_state(\"after_tfind\", daemon, nodep, found_key);\n\n  /* Validate existing count for IP address */\n  if (0 == found_key->count)\n  {\n    MHD_log_write(\"found_key->count is zero for found_key=%p -> panic\", (void *)found_key);\n    MHD_PANIC (_ (\"Previously-added IP address had counter of zero.\\n\"));\n  }\n\n  /* Remove the node entirely if count reduces to 0 */\n  if (0 == --found_key->count)\n  {\n    MHD_log_write(\"decremented count, now zero for found_key=%p; calling tdelete\", (void *)found_key);\n    tdelete (found_key,\n             &daemon->per_ip_connection_count,\n             &MHD_ip_addr_compare);\n    MHD_ip_count_unlock (daemon);\n    MHD_log_write(\"unlocked and will free found_key=%p\", (void *)found_key);\n    free (found_key);\n    MHD_log_write(\"freed found_key=%p and exit\", (void *)found_key);\n  }\n  else\n  {\n    MHD_log_write(\"decremented count, still positive for found_key=%p count=%d\",\n                  (void *)found_key, found_key->count);\n    MHD_ip_count_unlock (daemon);\n    MHD_log_write(\"unlocked (count not zero) for daemon=%p\", (void *)daemon);\n  }\n\n  MHD_log_write(\"exit MHD_ip_limit_del: daemon=%p\", (void *)daemon);\n}\n"
}