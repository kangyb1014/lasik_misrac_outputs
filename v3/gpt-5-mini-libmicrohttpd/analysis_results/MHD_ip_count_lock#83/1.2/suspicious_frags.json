{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code fragment. The code only employs: standard C function definition and linkage specifier (static), a normal pointer parameter (struct MHD_Daemon *daemon), standard preprocessor conditionals (#if defined ... #else #endif), a cast-to-void to suppress unused-parameter warnings ((void) daemon;), and calls/macros with ordinary identifiers (mhd_assert, MHD_mutex_lock_chk_). There are no occurrences of compiler-specific/extended-language constructs such as __attribute__, __declspec, __asm / inline assembly, typeof, statement-expressions ({ ... }), nested functions, GCC/Clang builtins (e.g. __builtin_*), or other documented compiler extensions. The platform-selection macros (MHD_USE_POSIX_THREADS, MHD_USE_W32_THREADS) only control which standard code path is compiled and are not language extensions themselves. Therefore nothing in this snippet needs further investigation for MISRA C 2023 Rule 1.2."
}