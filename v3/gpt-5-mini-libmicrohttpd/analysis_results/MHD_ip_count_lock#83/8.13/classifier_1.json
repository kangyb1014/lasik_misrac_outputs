{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No. The call MHD_mutex_lock_chk_(&daemon->per_ip_connection_mutex) is not a violation in normal use because a mutex lock function necessarily modifies the mutex state and therefore must take a pointer to a non-const object. This satisfies Rule 8.13. A violation would occur only if the function actually does not modify the mutex (i.e. its prototype could be void MHD_mutex_lock_chk_(const mhd_mutex_t *m) but is declared to take a non-const pointer) or if the function parameter could be const-qualified but is declared non-const \u2014 in that case the pointer should be to a const-qualified type."
}