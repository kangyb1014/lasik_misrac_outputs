{
  "user_message": "An agent A claimed that the following request_completed_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of request_completed_callback.\n```c\nstatic void\nrequest_completed_callback (void *cls,\n                            struct MHD_Connection *connection,\n                            void **req_cls,\n                            enum MHD_RequestTerminationCode toe)\n{\n  struct Request *request = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == request)\n    return;\n  if (NULL != request->session)\n    request->session->rc--;\n  if (NULL != request->pp)\n    MHD_destroy_post_processor (request->pp);\n  free (request);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'connection' is declared as 'struct MHD_Connection *connection' but the callback never modifies it (it is unused). Per MISRA C 2023 Rule 8.13 the pointer should be declared to point to a const-qualified type when possible \u2014 e.g. 'const struct MHD_Connection *connection'. If this function must match an external library callback prototype that requires a non-const pointer, then changing it is not possible; otherwise the current declaration is a violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 8.13 recommends that pointers should point to const-qualified types when possible. However, that recommendation must be balanced against the requirement to match an externally-specified function prototype. The shown function signature exactly matches the libmicrohttpd request-completed callback prototype (void (*)(void *cls, struct MHD_Connection *connection, void **con_cls, enum MHD_RequestTerminationCode)), so the implementation cannot change the type of the connection parameter to const without violating the required callback signature. In addition, note that req_cls is a void** because the callback obtains and frees the pointed Request object (so the pointee is modified/freed), which prevents making that parameter const-qualified. Therefore, absent evidence that this function is not a required callback or part of an API that allows a const-qualified parameter, the report of a Rule 8.13 violation is not correct. If the function were not constrained by an external API, then changing unused pointer parameters to point to const-qualified types would be the correct remediation."
}