{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes ERR_MSG_REQUEST_HEADER_TOO_BIG (a string literal) to transmit_error_response_static. If the prototype of transmit_error_response_static declares the parameter as a non-const pointer (e.g. char *msg or void *msg), this violates MISRA C 2023 Rule 8.13 because a pointer should point to a const-qualified type when possible. The correct declaration would be e.g. transmit_error_response_static(struct MHD_Connection *c, unsigned int code, const char *msg). If the function already declares the parameter as const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified handle_req_headers_no_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of handle_req_headers_no_space as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of handle_req_headers_no_space:\n```c\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n```\n</target_code>\nPlease provide the modified handle_req_headers_no_space code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe logging function to capture control flow and state.\n   Writes to /tmp/logs/473.txt so other agents can reproduce the scenario.\n   Uses const-qualified pointers where possible to avoid introducing new violations.\n*/\nstatic void\nprobe_log_state(const struct MHD_Connection *c,\n                const char *add_header,\n                size_t add_header_size,\n                unsigned int err_code,\n                const char *err_msg,\n                const char *stage)\n{\n  FILE *fp = fopen(\"/tmp/logs/473.txt\", \"a\");\n  if (fp == NULL)\n  {\n    return;\n  }\n\n  time_t t = time(NULL);\n  /* Log pointer values using %p and relevant scalar values. */\n  fprintf(fp, \"[%ld] %s: connection=%p add_header=%p add_header_size=%zu err_code=%u err_msg=%p\\n\",\n          (long)t,\n          (stage != NULL) ? stage : \"(null)\",\n          (const void *)c,\n          (const void *)add_header,\n          add_header_size,\n          err_code,\n          (const void *)err_msg);\n\n  /* Also log the textual message if available to show that a string literal\n     (possibly const) is being passed. Keep safe by checking for NULL. */\n  if (err_msg != NULL)\n  {\n    fprintf(fp, \"[%ld] %s: err_msg_text=\\\"%s\\\"\\n\",\n            (long)t,\n            (stage != NULL) ? stage : \"(null)\",\n            err_msg);\n  }\n\n  fclose(fp);\n}\n\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  /* Log entry with incoming header state. */\n  probe_log_state(c, add_header, add_header_size, 0u, NULL, \"ENTER_handle_req_headers_no_space\");\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n\n  /* Log computed error code and the error message pointer/text before transmit. */\n  probe_log_state(c, add_header, add_header_size, err_code, ERR_MSG_REQUEST_HEADER_TOO_BIG, \"BEFORE_TRANSMIT_ERROR_RESPONSE\");\n\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n\n  /* Log after transmit to confirm the call was made with the same values. */\n  probe_log_state(c, add_header, add_header_size, err_code, ERR_MSG_REQUEST_HEADER_TOO_BIG, \"AFTER_TRANSMIT_ERROR_RESPONSE\");\n}\n"
}