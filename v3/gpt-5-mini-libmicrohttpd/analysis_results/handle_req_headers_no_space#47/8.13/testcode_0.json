{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct MHD_Connection *c' is not const-qualified even though within handle_req_headers_no_space it is only forwarded to get_no_space_err_status_code(...) and transmit_error_response_static(...). If neither of those functions modify the connection object, the parameter should be declared as 'const struct MHD_Connection *c'. Leaving it non-const when it can be const violates MISRA C 2023 Rule 8.13. (If the called functions require a non-const pointer because they modify the connection, then making it const would be impossible and no violation would occur.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified handle_req_headers_no_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of handle_req_headers_no_space as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of handle_req_headers_no_space:\n```c\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n```\n</target_code>\nPlease provide the modified handle_req_headers_no_space code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n/* Forward declarations from the surrounding project. */\nstruct MHD_Connection;\n\nextern unsigned int get_no_space_err_status_code (struct MHD_Connection *c,\n                                                  int proc,\n                                                  const char *add_header,\n                                                  size_t add_header_size);\nextern void transmit_error_response_static (struct MHD_Connection *c,\n                                           unsigned int err_code,\n                                           const char *msg);\n\n/*\n * Probe helper: append diagnostic information to /tmp/logs/473.txt.\n * Keeps logging concise and avoids dereferencing pointers that may be NULL.\n */\nstatic void\nprobe_log_event (const char *phase,\n                 struct MHD_Connection *c,\n                 const char *add_header,\n                 size_t add_header_size,\n                 int have_err_code,\n                 unsigned int err_code)\n{\n  FILE *fp = fopen(\"/tmp/logs/473.txt\", \"a\");\n  if (fp == NULL)\n  {\n    /* If logging is not possible, do not alter program logic. */\n    return;\n  }\n\n  time_t now = time(NULL);\n  fprintf (fp, \"%ld %s: conn=%p add_header=%p add_header_size=%zu\",\n           (long) now,\n           phase,\n           (void *) c,\n           (void *) add_header,\n           add_header_size);\n\n  if (add_header != NULL)\n  {\n    /* Log a small prefix of the header contents to avoid large logs. */\n    size_t prefix_len = add_header_size;\n    if (prefix_len > 128U)\n    {\n      prefix_len = 128U;\n    }\n    /* Use %.*s with an int length; ensure no negative value is passed. */\n    fprintf (fp, \" add_hdr_prefix=\\\"\");\n    if (prefix_len > 0U)\n    {\n      fprintf (fp, \"%.*s\", (int) prefix_len, add_header);\n    }\n    fprintf (fp, \"\\\"\");\n  }\n\n  if (have_err_code)\n  {\n    fprintf (fp, \" err_code=%u\", err_code);\n  }\n\n  fprintf (fp, \"\\n\");\n  fclose (fp);\n}\n\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  /* Log entry and incoming state */\n  probe_log_event (\"enter_handle_req_headers_no_space\",\n                   c,\n                   add_header,\n                   add_header_size,\n                   0,\n                   0U);\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n\n  /* Log result of status-code determination */\n  probe_log_event (\"after_get_no_space_err_status_code\",\n                   c,\n                   add_header,\n                   add_header_size,\n                   1,\n                   err_code);\n\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n\n  /* Log completion of transmit */\n  probe_log_event (\"after_transmit_error_response_static\",\n                   c,\n                   add_header,\n                   add_header_size,\n                   1,\n                   err_code);\n}\n"
}