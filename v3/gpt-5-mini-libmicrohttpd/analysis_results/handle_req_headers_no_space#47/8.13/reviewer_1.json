{
  "user_message": "An agent A claimed that the following handle_req_headers_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_headers_no_space.\n```c\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nhandle_req_headers_no_space declares its parameter as 'struct MHD_Connection *c' and passes it to get_no_space_err_status_code. If get_no_space_err_status_code only inspects the connection (does not modify it), then the pointer should be const-qualified (const struct MHD_Connection *). In that case the use of a non-const pointer here violates MISRA C 2023 Rule 8.13. The fix is to change the parameter(s) and call site to use 'const struct MHD_Connection *'. Note: if the callee actually modifies the connection, then no violation occurs.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s reasoning is plausible but not verifiable from the snippet alone. MISRA C 2023 Rule 8.13 does require using a pointer-to-const when the pointed-at object is not modified, so if handle_req_headers_no_space and all callees it passes c to (e.g. get_no_space_err_status_code and transmit_error_response_static) only inspect the connection, then the parameter should be declared as const struct MHD_Connection * and the report would be correct. However, the provided code does not show the prototypes or implementations of those callees; if any of them (or this function) legitimately modify the connection or require a non-const pointer, then there is no violation. Because the necessary information to prove a violation is missing, the claim cannot be confirmed as correct based on the given code."
}