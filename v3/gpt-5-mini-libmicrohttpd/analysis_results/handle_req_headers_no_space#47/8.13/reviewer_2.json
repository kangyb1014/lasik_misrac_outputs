{
  "user_message": "An agent A claimed that the following handle_req_headers_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_headers_no_space.\n```c\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes ERR_MSG_REQUEST_HEADER_TOO_BIG (a string literal) to transmit_error_response_static. If the prototype of transmit_error_response_static declares the parameter as a non-const pointer (e.g. char *msg or void *msg), this violates MISRA C 2023 Rule 8.13 because a pointer should point to a const-qualified type when possible. The correct declaration would be e.g. transmit_error_response_static(struct MHD_Connection *c, unsigned int code, const char *msg). If the function already declares the parameter as const char *, there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's reasoning is technically correct in principle but not verifiable from the snippet alone. MISRA C:2023 Rule 8.13 requires pointers to be const-qualified when possible \u2014 this is a property of the function declaration, not of the call site. If transmit_error_response_static is declared with a non-const pointer parameter (e.g. char *msg), and that parameter does not need to be mutable, then that declaration would violate Rule 8.13 and passing a string literal would illustrate the problem. However, the code shown does not include the prototype of transmit_error_response_static, so you cannot conclude a violation from this snippet alone. If the function is already declared as taking a const char * (recommended), there is no violation. Recommended action: ensure transmit_error_response_static's prototype uses const char * for read-only message parameters."
}