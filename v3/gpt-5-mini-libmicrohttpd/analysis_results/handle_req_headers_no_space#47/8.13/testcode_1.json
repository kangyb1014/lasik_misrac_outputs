{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nhandle_req_headers_no_space declares its parameter as 'struct MHD_Connection *c' and passes it to get_no_space_err_status_code. If get_no_space_err_status_code only inspects the connection (does not modify it), then the pointer should be const-qualified (const struct MHD_Connection *). In that case the use of a non-const pointer here violates MISRA C 2023 Rule 8.13. The fix is to change the parameter(s) and call site to use 'const struct MHD_Connection *'. Note: if the callee actually modifies the connection, then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified handle_req_headers_no_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of handle_req_headers_no_space as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of handle_req_headers_no_space:\n```c\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n```\n</target_code>\nPlease provide the modified handle_req_headers_no_space code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stddef.h>\n\n/* External functions exist elsewhere in the program. Keep signatures\n   consistent with existing declarations/definitions to avoid changing\n   program behavior. */\nextern unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              int proc_flag,\n                              const char *add_header,\n                              size_t add_header_size);\n\nextern void\ntransmit_error_response_static (struct MHD_Connection *c,\n                                unsigned int err_code,\n                                const char *msg);\n\n/* Small helper to append a timestamped log line to /tmp/logs/473.txt. */\nstatic void\nlog_append (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/473.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  /* Timestamp */\n  time_t now = time(NULL);\n  struct tm tm_buf;\n  if (localtime_r(&now, &tm_buf) != NULL)\n  {\n    char tbuf[64];\n    if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n      fprintf(f, \"%s \", tbuf);\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Probe to log relevant state before and after calling the function\n   suspected of not being const-correct. We avoid dereferencing the\n   internals of 'struct MHD_Connection' to prevent unintended side\n   effects; we log pointer addresses and the header data instead. */\nstatic void\nprobe_log_before_call (struct MHD_Connection *c,\n                       const char *add_header,\n                       size_t add_header_size)\n{\n  /* Log pointer values and a safe, truncated preview of add_header. */\n  char header_preview[129] = {0};\n  if (add_header != NULL)\n  {\n    /* Copy at most 128 bytes to keep logs bounded. */\n    strncpy(header_preview, add_header, sizeof(header_preview) - 1);\n  }\n\n  log_append(\"ENTER handle_req_headers_no_space: connection=%p, add_header=%p, add_header_size=%zu, header_preview=\\\"%s\\\"\",\n             (void *)c,\n             (void *)add_header,\n             add_header_size,\n             header_preview);\n}\n\nstatic void\nprobe_log_after_call (struct MHD_Connection *c,\n                      unsigned int err_code)\n{\n  /* Log the returned error code and the connection pointer again for\n     comparison (to detect pointer changes). */\n  log_append(\"AFTER get_no_space_err_status_code: connection=%p, err_code=%u\",\n             (void *)c,\n             (unsigned int)err_code);\n}\n\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  /* Probe: log entry state. */\n  probe_log_before_call (c, add_header, add_header_size);\n\n  /* Original logic preserved: obtain the error status code. */\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n\n  /* Probe: log after calling the function under inspection. */\n  probe_log_after_call (c, err_code);\n\n  /* Original logic preserved: transmit the error response. */\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n\n  log_append(\"EXIT handle_req_headers_no_space: connection=%p, transmitted_err=%u\",\n             (void *)c,\n             (unsigned int)err_code);\n}\n"
}