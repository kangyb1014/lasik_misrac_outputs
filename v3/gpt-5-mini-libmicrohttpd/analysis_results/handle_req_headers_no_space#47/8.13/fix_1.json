{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nextern void\ntransmit_error_response_static (struct MHD_Connection *c,\n                                unsigned int err_code,\n                                const char *msg);\nstatic void\nlog_append (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/473.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  /* Timestamp */\n  time_t now = time(NULL);\n  struct tm tm_buf;\n  if (localtime_r(&now, &tm_buf) != NULL)\n  {\n    char tbuf[64];\n    if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n      fprintf(f, \"%s \", tbuf);\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\nstatic void\nprobe_log_before_call (struct MHD_Connection *c,\n                       const char *add_header,\n                       size_t add_header_size)\n{\n  /* Log pointer values and a safe, truncated preview of add_header. */\n  char header_preview[129] = {0};\n  if (add_header != NULL)\n  {\n    /* Copy at most 128 bytes to keep logs bounded. */\n    strncpy(header_preview, add_header, sizeof(header_preview) - 1);\n  }\n\n  log_append(\"ENTER handle_req_headers_no_space: connection=%p, add_header=%p, add_header_size=%zu, header_preview=\\\"%s\\\"\",\n             (void *)c,\n             (void *)add_header,\n             add_header_size,\n             header_preview);\n}\nstatic void\nprobe_log_after_call (struct MHD_Connection *c,\n                      unsigned int err_code)\n{\n  /* Log the returned error code and the connection pointer again for\n     comparison (to detect pointer changes). */\n  log_append(\"AFTER get_no_space_err_status_code: connection=%p, err_code=%u\",\n             (void *)c,\n             (unsigned int)err_code);\n}\n\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  /* Probe: log entry state. */\n  probe_log_before_call (c, add_header, add_header_size);\n\n  /* Original logic preserved: obtain the error status code. */\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n\n  /* Probe: log after calling the function under inspection. */\n  probe_log_after_call (c, err_code);\n\n  /* Original logic preserved: transmit the error response. */\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n\n  log_append(\"EXIT handle_req_headers_no_space: connection=%p, transmitted_err=%u\",\n             (void *)c,\n             (unsigned int)err_code);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nconnection.c:3301:1: error: expected ')'\n 3301 | transmit_error_response_static (struct MHD_Connection *c,\n      | ^\nconnection.c:2946:37: note: expanded from macro 'transmit_error_response_static'\n 2946 |                                msg, MHD_STATICSTR_LEN_ (msg), \\\n      |                                     ^\n./mhd_str_types.h:33:36: note: expanded from macro 'MHD_STATICSTR_LEN_'\n   33 | #define MHD_STATICSTR_LEN_(macro) (sizeof(macro) / sizeof(char) - 1)\n      |                                    ^\nconnection.c:3301:1: note: to match this '('\nconnection.c:2946:37: note: expanded from macro 'transmit_error_response_static'\n 2946 |                                msg, MHD_STATICSTR_LEN_ (msg), \\\n      |                                     ^\n./mhd_str_types.h:33:35: note: expanded from macro 'MHD_STATICSTR_LEN_'\n   33 | #define MHD_STATICSTR_LEN_(macro) (sizeof(macro) / sizeof(char) - 1)\n      |                                   ^\nconnection.c:3301:1: error: type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int [-Wimplicit-int]\n 3301 | transmit_error_response_static (struct MHD_Connection *c,\n      | ^\nconnection.c:2946:37: note: expanded from macro 'transmit_error_response_static'\n 2946 |                                msg, MHD_STATICSTR_LEN_ (msg), \\\n      |                                     ^\n./mhd_str_types.h:33:36: note: expanded from macro 'MHD_STATICSTR_LEN_'\n   33 | #define MHD_STATICSTR_LEN_(macro) (sizeof(macro) / sizeof(char) - 1)\n      |                                    ^\nconnection.c:3301:1: error: expected ')'\nconnection.c:2947:32: note: expanded from macro 'transmit_error_response_static'\n 2947 |                                NULL, 0, NULL, 0)\n      |                                ^\n/usr/lib/llvm-20/lib/clang/20/include/__stddef_null.h:26:22: note: expanded from macro 'NULL'\n   26 | #define NULL ((void*)0)\n      |                      ^\nconnection.c:3301:1: note: to match this '('\nconnection.c:2947:32: note: expanded from macro 'transmit_error_response_static'\n 2947 |                                NULL, 0, NULL, 0)\n      |                                ^\n/usr/lib/llvm-20/lib/clang/20/include/__stddef_null.h:26:14: note: expanded from macro 'NULL'\n   26 | #define NULL ((void*)0)\n      |              ^\nconnection.c:3301:1: error: type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int [-Wimplicit-int]\n 3301 | transmit_error_response_static (struct MHD_Connection *c,\n      | ^\nconnection.c:2947:32: note: expanded from macro 'transmit_error_response_static'\n 2947 |                                NULL, 0, NULL, 0)\n      |                                ^\n/usr/lib/llvm-20/lib/clang/20/include/__stddef_null.h:26:16: note: expanded from macro 'NULL'\n   26 | #define NULL ((void*)0)\n      |                ^\nconnection.c:3301:1: error: expected parameter declarator\nconnection.c:2947:38: note: expanded from macro 'transmit_error_response_static'\n 2947 |                                NULL, 0, NULL, 0)\n      |                                      ^\nconnection.c:3301:1: error: expected ')'\nconnection.c:2947:38: note: expanded from macro 'transmit_error_response_static'\n 2947 |                                NULL, 0, NULL, 0)\n      |                                      ^\nconnection.c:3301:1: note: to match this '('\nconnection.c:2945:31: note: expanded from macro 'transmit_error_response_static'\n 2945 |   transmit_error_response_len (c, code, \\\n      |                               ^\nconnection.c:3301:1: error: conflicting types for 'transmit_error_response_len'\n 3301 | transmit_error_response_static (struct MHD_Connection *c,\n      | ^\nconnection.c:2945:3: note: expanded from macro 'transmit_error_response_static'\n 2945 |   transmit_error_response_len (c, code, \\\n      |   ^\nconnection.c:2785:1: note: previous definition is here\n 2785 | transmit_error_response_len (struct MHD_Connection *connection,\n      | ^\n7 errors generated.\nmake[3]: *** [Makefile:2098: libmicrohttpd_la-connection.lo] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of handle_req_headers_no_space as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void\nlog_append (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/473.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  /* Timestamp */\n  time_t now = time(NULL);\n  struct tm tm_buf;\n  if (localtime_r(&now, &tm_buf) != NULL)\n  {\n    char tbuf[64];\n    if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n      fprintf(f, \"%s \", tbuf);\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\nstatic void\nprobe_log_before_call (struct MHD_Connection *c,\n                       const char *add_header,\n                       size_t add_header_size)\n{\n  /* Log pointer values and a safe, truncated preview of add_header. */\n  char header_preview[129] = {0};\n  if (add_header != NULL)\n  {\n    /* Copy at most 128 bytes to keep logs bounded. */\n    strncpy(header_preview, add_header, sizeof(header_preview) - 1);\n  }\n\n  log_append(\"ENTER handle_req_headers_no_space: connection=%p, add_header=%p, add_header_size=%zu, header_preview=\\\"%s\\\"\",\n             (void *)c,\n             (void *)add_header,\n             add_header_size,\n             header_preview);\n}\nstatic void\nprobe_log_after_call (struct MHD_Connection *c,\n                      unsigned int err_code)\n{\n  /* Log the returned error code and the connection pointer again for\n     comparison (to detect pointer changes). */\n  log_append(\"AFTER get_no_space_err_status_code: connection=%p, err_code=%u\",\n             (void *)c,\n             (unsigned int)err_code);\n}\n\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  /* Probe: log entry state. */\n  probe_log_before_call (c, add_header, add_header_size);\n\n  /* Original logic preserved: obtain the error status code. */\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n\n  /* Probe: log after calling the function under inspection. */\n  probe_log_after_call (c, err_code);\n\n  /* Original logic preserved: transmit the error response. */\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n\n  log_append(\"EXIT handle_req_headers_no_space: connection=%p, transmitted_err=%u\",\n             (void *)c,\n             (unsigned int)err_code);\n}\n",
  "explanation": "The build error was caused by a name collision between the extern prototype and a preprocessor macro named transmit_error_response_static. The prototype line was being macro-expanded, producing invalid tokens and parse errors. I removed the conflicting extern declaration at the top. The macro provided by the library will still expand correctly at the call site, so the original behavior is preserved while avoiding the syntax error."
}