{
  "user_message": "An agent A claimed that the following handle_req_headers_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_headers_no_space.\n```c\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct MHD_Connection *c' is not const-qualified even though within handle_req_headers_no_space it is only forwarded to get_no_space_err_status_code(...) and transmit_error_response_static(...). If neither of those functions modify the connection object, the parameter should be declared as 'const struct MHD_Connection *c'. Leaving it non-const when it can be const violates MISRA C 2023 Rule 8.13. (If the called functions require a non-const pointer because they modify the connection, then making it const would be impossible and no violation would occur.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim cannot be confirmed from the snippet alone. MISRA C 2023 Rule 8.13 says pointers should point to const-qualified types whenever possible \u2014 i.e. when the pointed-to object is not modified. In handle_req_headers_no_space the parameter c is only forwarded to two other functions, but whether it can be const depends on those functions' behaviour and prototypes: - If get_no_space_err_status_code(...) and transmit_error_response_static(...) both take a const struct MHD_Connection * (or otherwise do not modify the connection) then handle_req_headers_no_space should also declare c as const and A\u2019s report would be correct. - If either callee requires a non-const struct MHD_Connection * because it modifies the connection (or because its prototype is non-const and cannot be changed), then making c const is not possible and there is no violation. Because the snippet does not show the prototypes or implementations of the called functions (nor the const-qualification of struct MHD_Connection in those prototypes), you cannot decide that a Rule 8.13 violation actually occurs. Recommendation: inspect the prototypes/implementations of get_no_space_err_status_code and transmit_error_response_static; if they do not modify the connection and could accept a const pointer, change their parameter types (and then this function\u2019s parameter) to const. Do not silence by casting away const."
}