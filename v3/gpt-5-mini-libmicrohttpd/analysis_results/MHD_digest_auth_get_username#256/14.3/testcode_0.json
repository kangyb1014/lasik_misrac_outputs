{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression 'if (1)' is an invariant (always true). This is not an infinite-loop use and is not the permitted do-while (0) exception, so it violates MISRA C 2023 Rule 14.3. Remediation: remove the if (1) and use a simple compound statement ({ ... }) or, if a single-use loop idiom is required, replace it with the permitted do { ... } while (0) form.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_get_username code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2565.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_get_username as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_get_username:\n```c\n_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  uname_type = get_rq_uname_type (params);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n    return NULL;\n\n  buf_size = get_rq_unames_size (params, uname_type);\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  if (NULL == username)\n    return NULL;\n\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    memset (&uname_strct, 0, sizeof(uname_strct));\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      free (username);\n      return NULL;\n    }\n    (void) used; /* Mute compiler warning for non-debug builds */\n    mhd_assert (buf_size >= used);\n  }\n\n  return username;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_get_username code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append human-readable traces to the required log file. */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  f = fopen(\"/tmp/logs/2565.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_start (ap, fmt);\n  (void) vfprintf (f, fmt, ap);\n  va_end (ap);\n\n  (void) fclose (f);\n}\n\n_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n\n  mhd_probe_log (\"MHD_digest_auth_get_username: entry connection=%p\\n\",\n                 (void *) connection);\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n  {\n    mhd_probe_log (\"MHD_digest_auth_get_username: params == NULL -> return NULL\\n\");\n    return NULL;\n  }\n\n  mhd_probe_log (\"MHD_digest_auth_get_username: params=%p\\n\", (void *) params);\n\n  uname_type = get_rq_uname_type (params);\n  mhd_probe_log (\"MHD_digest_auth_get_username: uname_type=%d\\n\",\n                 (int) uname_type);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n  {\n    mhd_probe_log (\"MHD_digest_auth_get_username: unsupported uname_type -> return NULL\\n\");\n    return NULL;\n  }\n\n  buf_size = get_rq_unames_size (params, uname_type);\n  mhd_probe_log (\"MHD_digest_auth_get_username: buf_size=%zu\\n\", buf_size);\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  if (NULL == username)\n  {\n    mhd_probe_log (\"MHD_digest_auth_get_username: calloc failed -> return NULL\\n\");\n    return NULL;\n  }\n\n  mhd_probe_log (\"MHD_digest_auth_get_username: username allocated at %p (buf_size=%zu)\\n\",\n                 (void *) username, buf_size);\n\n  /* Original code contains an invariant controlling expression 'if (1)'.\n     We explicitly log entry to this block so agents can observe that it is\n     taken unconditionally (evidence of the invariant controlling\n     expression). */\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    memset (&uname_strct, 0, sizeof (uname_strct));\n    mhd_probe_log (\"MHD_digest_auth_get_username: entered if(1) block; uname_strct zeroed; initial uname_strct.uname_type=%d\\n\",\n                   (int) uname_strct.uname_type);\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n\n    mhd_probe_log (\"MHD_digest_auth_get_username: get_rq_uname returned used=%zu, uname_strct.uname_type=%d\\n\",\n                   used, (int) uname_strct.uname_type);\n\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      mhd_probe_log (\"MHD_digest_auth_get_username: uname_type mismatch (expected %d, got %d) -> freeing username and return NULL\\n\",\n                     (int) uname_type, (int) uname_strct.uname_type);\n      free (username);\n      return NULL;\n    }\n    (void) used; /* Mute compiler warning for non-debug builds */\n    mhd_assert (buf_size >= used);\n  }\n\n  mhd_probe_log (\"MHD_digest_auth_get_username: success -> returning username=%p\\n\",\n                 (void *) username);\n\n  return username;\n}\n"
}