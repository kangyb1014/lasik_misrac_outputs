{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. The constant conditional if (1) and the no-op cast (void) used are executed operations whose removal would not affect program behaviour. The evaluation of the constant condition and the void-expression are dead operations (they have no effect at runtime); therefore Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_get_username code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2562.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_get_username as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_get_username:\n```c\n_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  uname_type = get_rq_uname_type (params);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n    return NULL;\n\n  buf_size = get_rq_unames_size (params, uname_type);\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  if (NULL == username)\n    return NULL;\n\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    memset (&uname_strct, 0, sizeof(uname_strct));\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      free (username);\n      return NULL;\n    }\n    (void) used; /* Mute compiler warning for non-debug builds */\n    mhd_assert (buf_size >= used);\n  }\n\n  return username;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_get_username code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <errno.h>\n\nstatic void ensure_log_dir(void)\n{\n  /* Try to create the directory; ignore errors except when it's a real problem */\n  if (mkdir(\"/tmp/logs\", 0777) != 0) {\n    if (errno == EEXIST) {\n      return;\n    }\n    /* If the directory cannot be created for another reason, we still proceed\n       and let fopen report errors. Do not change program behavior. */\n  }\n}\n\nstatic void write_log(const char *fmt, ...)\n{\n  ensure_log_dir();\n  FILE *f = fopen(\"/tmp/logs/2562.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t t = time(NULL);\n  struct tm tm_buf;\n  if (NULL != localtime_r(&t, &tm_buf)) {\n    char timestr[64];\n    if (0 < strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf))\n      fprintf(f, \"[%s] \", timestr);\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n/* Probe-enabled version of the original function. Preserves original logic. */\n_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n\n  write_log(\"ENTER: MHD_digest_auth_get_username; connection=%p\", (void *)connection);\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  write_log(\"params lookup -> %p\", (void *)params);\n  if (NULL == params) {\n    write_log(\"EXIT: params == NULL -> returning NULL\");\n    return NULL;\n  }\n\n  uname_type = get_rq_uname_type (params);\n  write_log(\"uname_type resolved -> %d\", (int) uname_type);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n  {\n    write_log(\"EXIT: uname_type invalid (%d) -> returning NULL\", (int) uname_type);\n    return NULL;\n  }\n\n  buf_size = get_rq_unames_size (params, uname_type);\n  write_log(\"buf_size determined -> %zu\", buf_size);\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  write_log(\"allocated username buffer -> %p\", (void *)username);\n  if (NULL == username) {\n    write_log(\"EXIT: allocation failed -> returning NULL\");\n    return NULL;\n  }\n\n  /* The original code contained a constant conditional 'if (1)' here. We keep\n     that construct and log its execution so observers can see that the branch\n     is always taken (demonstrating the constant condition behavior). */\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    /* Log that we entered the constant-true branch */\n    write_log(\"ENTER: constant 'if (1)' branch (always executed)\");\n\n    memset (&uname_strct, 0, sizeof(uname_strct));\n    write_log(\"uname_strct after memset: uname_type=%d (expected %d)\",\n              (int) uname_strct.uname_type, (int) uname_type);\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n    write_log(\"get_rq_uname returned used=%zu; uname_strct.uname_type=%d\",\n              used, (int) uname_strct.uname_type);\n\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      write_log(\"Broken encoding: uname_type (%d) != uname_strct.uname_type (%d); freeing username and returning NULL\",\n                (int) uname_type, (int) uname_strct.uname_type);\n      free (username);\n      write_log(\"EXIT: broken encoding -> returned NULL\");\n      return NULL;\n    }\n\n    /* The original code had the no-op cast (void) used; we log its semantic\n       equivalence (mute compiler warning) but do not change behavior. */\n    (void) used; /* Mute compiler warning for non-debug builds */\n    write_log(\"Executed no-op cast '(void) used' (used=%zu) to mute compiler warning\", used);\n\n    mhd_assert (buf_size >= used);\n    write_log(\"Post-condition: buf_size (%zu) >= used (%zu)\", buf_size, used);\n  }\n\n  write_log(\"EXIT: returning username pointer %p\", (void *)username);\n  return username;\n}\n"
}