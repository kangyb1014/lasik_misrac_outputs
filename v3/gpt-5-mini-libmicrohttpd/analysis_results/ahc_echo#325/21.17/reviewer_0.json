{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  FILE *file;\n  int fd;\n  DIR *dir;\n  struct stat buf;\n  char emsg[1024];\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, MHD_HTTP_METHOD_GET))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  file = fopen (&url[1], \"rb\");\n  if (NULL != file)\n  {\n    fd = fileno (file);\n    if (-1 == fd)\n    {\n      (void) fclose (file);\n      return MHD_NO;     /* internal error */\n    }\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      fclose (file);\n      file = NULL;\n    }\n  }\n\n  if (NULL == file)\n  {\n    dir = opendir (\".\");\n    if (NULL == dir)\n    {\n      /* most likely cause: more concurrent requests than\n         available file descriptors / 2 */\n      snprintf (emsg,\n                sizeof (emsg),\n                \"Failed to open directory `.': %s\\n\",\n                strerror (errno));\n      response = MHD_create_response_from_buffer (strlen (emsg),\n                                                  emsg,\n                                                  MHD_RESPMEM_MUST_COPY);\n      if (NULL == response)\n        return MHD_NO;\n      ret = MHD_queue_response (connection,\n                                MHD_HTTP_SERVICE_UNAVAILABLE,\n                                response);\n      MHD_destroy_response (response);\n    }\n    else\n    {\n      response = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN,\n                                                    32 * 1024,\n                                                    &dir_reader,\n                                                    dir,\n                                                    &dir_free_callback);\n      if (NULL == response)\n      {\n        closedir (dir);\n        return MHD_NO;\n      }\n      ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n      MHD_destroy_response (response);\n    }\n  }\n  else\n  {\n    response = MHD_create_response_from_callback ((size_t) buf.st_size,\n                                                  32 * 1024, /* 32k page size */\n                                                  &file_reader,\n                                                  file,\n                                                  &file_free_callback);\n    if (NULL == response)\n    {\n      fclose (file);\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nCalling strcmp(method, MHD_HTTP_METHOD_GET) without validating that 'method' is non-NULL and that it points to a null-terminated string can cause strcmp to read past the bounds of the object. Example violation: if method == NULL (or method points to a buffer lacking a terminating '\\0' within accessible memory), strcmp will dereference/read beyond the object \u2014 violating MISRA C 2023 Rule 21.17. Mitigation: verify method != NULL and that it is null-terminated (or use a bounded comparison with a known maximum length).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 21.17 forbids uses of string.h functions that can read beyond the bounds of the pointed objects (including dereferencing a NULL pointer). Calling strcmp with a NULL pointer or with a non\u2011terminated buffer would indeed violate the rule. However, in this code the strcmp call is to compare the HTTP method provided by libmicrohttpd via the access\u2011handler callback parameter 'method'. The libmicrohttpd callback contract guarantees that 'method' is a valid, null\u2011terminated C string (e.g. \"GET\"), so the strcmp invocation cannot legally read out of bounds in normal operation. Therefore, given the documented API precondition that 'method' is non\u2011NULL and null\u2011terminated, the reported violation is not correct. If, however, the caller cannot rely on that external API contract (or a static analysis tool does not know it), adding an explicit method != NULL (and/or a bounded comparison) would be a defensive change to satisfy MISRA/tooling."
}