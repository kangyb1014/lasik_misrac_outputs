{
  "user_message": "An agent A claimed that the following answer_single_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_single_response.\n```c\nstatic enum MHD_Result\nanswer_single_response (void *cls,\n                        struct MHD_Connection *connection,\n                        const char *url,\n                        const char *method,\n                        const char *version,\n                        const char *upload_data,\n                        size_t *upload_data_size,\n                        void **req_cls)\n{\n  static int marker = 0;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n  return MHD_queue_response (connection, MHD_HTTP_OK, resp_single);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe address of marker is stored in a pointer ( *req_cls = (void *)&marker; ) but marker is declared as a non-const int even though it is used only as an immutable token. According to MISRA C 2023 R.8.13, the pointed-to object should be const-qualified whenever possible. The fix is to declare the object as const (e.g. static const int marker = 0;) and propagate const through the pointer type (use const void * or a const-qualified pointer) instead of using a non-const int and casting away/losing constness.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. Rule 8.13 requires that pointers should point to const-qualified types whenever possible. In this function a static object (marker) is used only as an immutable token, yet it is declared as a non-const int and its address is stored in a non-const void * via *req_cls = (void *)&marker. That loses the const intent: the pointed-to object could and should be const-qualified. The proper fix is to make the object const (for example: static const int marker = 0) and propagate const through the pointer types (e.g. use const void * / const void ** as appropriate) so that the const-qualification is not discarded. If the external API (here the callback signature) prevents changing the pointer type, then a documented MISRA deviation is required \u2014 casting away const to match void ** would itself be non-compliant. Therefore the agent A\u2019s reported violation is correct."
}