{
  "user_message": "An agent A claimed that the following answer_single_response code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of answer_single_response.\n```c\nstatic enum MHD_Result\nanswer_single_response (void *cls,\n                        struct MHD_Connection *connection,\n                        const char *url,\n                        const char *method,\n                        const char *version,\n                        const char *upload_data,\n                        size_t *upload_data_size,\n                        void **req_cls)\n{\n  static int marker = 0;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n  return MHD_queue_response (connection, MHD_HTTP_OK, resp_single);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nCalling strcmp(method, MHD_HTTP_METHOD_GET) and strcmp(method, MHD_HTTP_METHOD_HEAD) without validating 'method' can access memory out of bounds. For example, if 'method' is NULL the strcmp implementation will dereference a NULL pointer, or if 'method' is not NUL-terminated the strcmp call may read past the end of the buffer.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.17 requires that uses of string.h functions must not cause accesses beyond the bounds of the objects referenced by their pointer parameters. strcmp requires non-NULL pointers to NUL-terminated strings; if 'method' is NULL the call is undefined (likely a NULL dereference), and if 'method' is not NUL-terminated strcmp may read past the buffer. The shown code calls strcmp(method, ...) without validating that 'method' is non-NULL and points to a NUL-terminated object, so it can violate Rule 21.17 unless there is a documented, verifiable guarantee from the caller that 'method' is always non-NULL and NUL-terminated. To comply, the code should at minimum check method != NULL (and, if necessary, ensure termination or use a safe bounded comparison with a known maximum length)."
}