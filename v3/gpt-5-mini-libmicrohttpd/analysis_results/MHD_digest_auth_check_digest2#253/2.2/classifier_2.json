{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_check_digest2:\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check_digest2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *username,\n                               const uint8_t *digest,\n                               size_t digest_size,\n                               unsigned int nonce_timeout,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check_digest3 (connection,\n                                       realm,\n                                       username,\n                                       digest,\n                                       digest_size,\n                                       nonce_timeout,\n                                       0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                       malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The fragment returns different values depending on the value of 'res'; each return affects program behaviour. There are no executed operations whose removal would not change behaviour. (Note: unreachable code is not considered dead code per MISRA; this fragment\u2019s branches are reachable depending on 'res'.)"
}