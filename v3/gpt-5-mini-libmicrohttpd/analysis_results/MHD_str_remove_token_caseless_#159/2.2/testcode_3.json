{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion mhd_assert(s2 >= buf); is dead code because s2 is initialized to buf and is only ever incremented (s2 = buf; then only s2++ or s2 += copy_size are used). Therefore s2 < buf can never occur at this program point, so the check has no effect on program behaviour. Removing the assertion (or the comparison) would not change program behaviour, which constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_remove_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1592.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_remove_token_caseless_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_remove_token_caseless_:\n```c\nbool\nMHD_str_remove_token_caseless_ (const char *str,\n                                size_t str_len,\n                                const char *const token,\n                                const size_t token_len,\n                                char *buf,\n                                ssize_t *buf_size)\n{\n  const char *s1; /**< the \"input\" string / character */\n  char *s2;       /**< the \"output\" string / character */\n  size_t t_pos;   /**< position of matched character in the token */\n  bool token_removed;\n\n  mhd_assert (NULL == memchr (token, 0, token_len));\n  mhd_assert (NULL == memchr (token, ' ', token_len));\n  mhd_assert (NULL == memchr (token, '\\t', token_len));\n  mhd_assert (NULL == memchr (token, ',', token_len));\n  mhd_assert (0 <= *buf_size);\n\n  if (SSIZE_MAX <= ((str_len / 2) * 3 + 3))\n  {\n    /* The return value may overflow, refuse */\n    *buf_size = (ssize_t) -1;\n    return false;\n  }\n  s1 = str;\n  s2 = buf;\n  token_removed = false;\n\n  while ((size_t) (s1 - str) < str_len)\n  {\n    const char *cur_token; /**< the first char of current token */\n    size_t copy_size;\n\n    /* Skip any initial whitespaces and empty tokens */\n    while ( ((size_t) (s1 - str) < str_len) &&\n            ((' ' == *s1) || ('\\t' == *s1) || (',' == *s1)) )\n      s1++;\n\n    /* 's1' points to the first char of token in the input string or\n     * points just beyond the end of the input string */\n\n    if ((size_t) (s1 - str) >= str_len)\n      break; /* Nothing to copy, end of the input string */\n\n    /* 's1' points to the first char of token in the input string */\n\n    cur_token = s1; /* the first char of input token */\n\n    /* Check the token with case-insensetive match */\n    t_pos = 0;\n    while ( ((size_t) (s1 - str) < str_len) && (token_len > t_pos) &&\n            (charsequalcaseless (*s1, token[t_pos])) )\n    {\n      s1++;\n      t_pos++;\n    }\n    /* s1 may point just beyond the end of the input string */\n    if ( (token_len == t_pos) && (0 != token_len) )\n    {\n      /* 'token' matched, check that current input token does not have\n       * any suffixes */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n      /* 's1' points to the first non-whitespace char after the token matched\n       * requested token or points just beyond the end of the input string after\n       * the requested token */\n      if (((size_t) (s1 - str) == str_len) || (',' == *s1))\n      {/* full token match, do not copy current token to the output */\n        token_removed = true;\n        continue;\n      }\n    }\n\n    /* 's1' points to first non-whitespace char, to some char after\n     * first non-whitespace char in the token in the input string, to\n     * the ',', or just beyond the end of the input string */\n    /* The current token in the input string does not match the token\n     * to exclude, it must be copied to the output string */\n    /* the current token size excluding leading whitespaces and current char */\n    copy_size = (size_t) (s1 - cur_token);\n    if (buf == s2)\n    { /* The first token to copy to the output */\n      if ((size_t) *buf_size < copy_size)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n    }\n    else\n    { /* Some token was already copied to the output buffer */\n      mhd_assert (s2 > buf);\n      if ((size_t) *buf_size < ((size_t) (s2 - buf)) + copy_size + 2)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n      *(s2++) = ',';\n      *(s2++) = ' ';\n    }\n    /* Copy non-matched token to the output */\n    if (0 != copy_size)\n    {\n      memcpy (s2, cur_token, copy_size);\n      s2 += copy_size;\n    }\n\n    while ( ((size_t) (s1 - str) < str_len) && (',' != *s1))\n    {\n      /* 's1' points to first non-whitespace char, to some char after\n       * first non-whitespace char in the token in the input string */\n      /* Copy all non-whitespace chars from the current token in\n       * the input string */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              (',' != *s1) && (' ' != *s1) && ('\\t' != *s1) )\n      {\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = *(s1++);\n      }\n      /* 's1' points to some whitespace char in the token in the input\n       * string, to the ',', or just beyond the end of the input string */\n      /* Skip all whitespaces */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n\n      /* 's1' points to the first non-whitespace char in the input string\n       * after whitespace chars, to the ',', or just beyond the end of\n       * the input string */\n      if (((size_t) (s1 - str) < str_len) && (',' != *s1))\n      { /* Not the end of the current token */\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = ' ';\n      }\n    }\n  }\n  mhd_assert (((ssize_t) (s2 - buf)) <= *buf_size);\n  *buf_size = (ssize_t) (s2 - buf);\n  return token_removed;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_remove_token_caseless_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stdint.h>\n#include <sys/types.h>\n#include <limits.h>\n\n/* Probe logging helper - appends a line with relevant state to /tmp/logs/1592.txt */\nstatic void mhd_probe_log(const char *event,\n                          const char *note,\n                          const char *str, size_t str_len,\n                          const char *token, size_t token_len,\n                          char *buf, ssize_t buf_size,\n                          const char *s1, char *s2,\n                          size_t t_pos, size_t copy_size,\n                          bool token_removed)\n{\n  FILE *f = fopen(\"/tmp/logs/1592.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging only */\n  fprintf(f, \"EVENT=%s NOTE=%s\\n\", event, note ? note : \"\");\n  fprintf(f, \"  str=%p str_len=%zu token=%p token_len=%zu\\n\",\n          (const void *)str, str_len, (const void *)token, token_len);\n  fprintf(f, \"  buf=%p buf_size=%zd\\n\", (void *)buf, buf_size);\n  fprintf(f, \"  s1=%p s1_off=%td s2=%p s2_off=%td\\n\",\n          (const void *)s1, (s1 && str) ? (ptrdiff_t)(s1 - str) : (ptrdiff_t)-1,\n          (void *)s2, (s2 && buf) ? (ptrdiff_t)(s2 - buf) : (ptrdiff_t)-1);\n  fprintf(f, \"  t_pos=%zu copy_size=%zu token_removed=%d\\n\",\n          t_pos, copy_size, token_removed ? 1 : 0);\n  fprintf(f, \"----------------------------------------\\n\");\n  fclose(f);\n}\n\n/* Original function augmented with probe calls. */\nbool\nMHD_str_remove_token_caseless_ (const char *str,\n                                size_t str_len,\n                                const char *const token,\n                                const size_t token_len,\n                                char *buf,\n                                ssize_t *buf_size)\n{\n  const char *s1; /**< the \"input\" string / character */\n  char *s2;       /**< the \"output\" string / character */\n  size_t t_pos;   /**< position of matched character in the token */\n  bool token_removed;\n\n  mhd_assert (NULL == memchr (token, 0, token_len));\n  mhd_assert (NULL == memchr (token, ' ', token_len));\n  mhd_assert (NULL == memchr (token, '\\t', token_len));\n  mhd_assert (NULL == memchr (token, ',', token_len));\n  mhd_assert (0 <= *buf_size);\n\n  mhd_probe_log(\"entry\", \"after_asserts\", str, str_len, token, token_len,\n                buf, *buf_size, NULL, NULL, 0, 0, false);\n\n  if (SSIZE_MAX <= ((str_len / 2) * 3 + 3))\n  {\n    /* The return value may overflow, refuse */\n    *buf_size = (ssize_t) -1;\n    mhd_probe_log(\"overflow_refuse\", \"SSIZE_MAX check triggered\",\n                  str, str_len, token, token_len, buf, *buf_size, NULL, NULL, 0, 0, false);\n    return false;\n  }\n  s1 = str;\n  s2 = buf;\n  token_removed = false;\n\n  mhd_probe_log(\"init\", \"s1 and s2 initialized\",\n                str, str_len, token, token_len, buf, *buf_size, s1, s2, 0, 0, token_removed);\n\n  while ((size_t) (s1 - str) < str_len)\n  {\n    const char *cur_token; /**< the first char of current token */\n    size_t copy_size;\n\n    /* Skip any initial whitespaces and empty tokens */\n    while ( ((size_t) (s1 - str) < str_len) &&\n            ((' ' == *s1) || ('\\t' == *s1) || (',' == *s1)) )\n      s1++;\n\n    /* 's1' points to the first char of token in the input string or\n     * points just beyond the end of the input string */\n\n    if ((size_t) (s1 - str) >= str_len)\n      break; /* Nothing to copy, end of the input string */\n\n    /* 's1' points to the first char of token in the input string */\n\n    cur_token = s1; /* the first char of input token */\n\n    /* Check the token with case-insensetive match */\n    t_pos = 0;\n    while ( ((size_t) (s1 - str) < str_len) && (token_len > t_pos) &&\n            (charsequalcaseless (*s1, token[t_pos])) )\n    {\n      s1++;\n      t_pos++;\n    }\n    /* s1 may point just beyond the end of the input string */\n    if ( (token_len == t_pos) && (0 != token_len) )\n    {\n      /* 'token' matched, check that current input token does not have\n       * any suffixes */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n      /* 's1' points to the first non-whitespace char after the token matched\n       * requested token or points just beyond the end of the input string after\n       * the requested token */\n      if (((size_t) (s1 - str) == str_len) || (',' == *s1))\n      {/* full token match, do not copy current token to the output */\n        token_removed = true;\n        mhd_probe_log(\"token_removed\", \"full match, skipping token\",\n                      str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, 0, token_removed);\n        continue;\n      }\n    }\n\n    /* 's1' points to first non-whitespace char, to some char after\n     * first non-whitespace char in the token in the input string, to\n     * the ',', or just beyond the end of the input string */\n    /* The current token in the input string does not match the token\n     * to exclude, it must be copied to the output string */\n    /* the current token size excluding leading whitespaces and current char */\n    copy_size = (size_t) (s1 - cur_token);\n    if (buf == s2)\n    { /* The first token to copy to the output */\n      if ((size_t) *buf_size < copy_size)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        mhd_probe_log(\"buf_overflow\", \"first token not enough space\",\n                      str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n        return false;\n      }\n    }\n    else\n    { /* Some token was already copied to the output buffer */\n      mhd_assert (s2 > buf);\n      mhd_probe_log(\"before_else_assert\", \"about to check s2 > buf\",\n                    str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n      if ((size_t) *buf_size < ((size_t) (s2 - buf)) + copy_size + 2)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        mhd_probe_log(\"buf_overflow\", \"subsequent token not enough space\",\n                      str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n        return false;\n      }\n      *(s2++) = ',';\n      *(s2++) = ' ';\n      mhd_probe_log(\"after_separator\", \"wrote separator, advanced s2\",\n                    str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n    }\n    /* Copy non-matched token to the output */\n    if (0 != copy_size)\n    {\n      memcpy (s2, cur_token, copy_size);\n      s2 += copy_size;\n      mhd_probe_log(\"copied_token\", \"copied non-matching token\",\n                    str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n    }\n\n    while ( ((size_t) (s1 - str) < str_len) && (',' != *s1))\n    {\n      /* 's1' points to first non-whitespace char, to some char after\n       * first non-whitespace char in the token in the input string */\n      /* Copy all non-whitespace chars from the current token in\n       * the input string */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              (',' != *s1) && (' ' != *s1) && ('\\t' != *s1) )\n      {\n        mhd_probe_log(\"loop_before_assert\", \"about to assert s2 >= buf\",\n                      str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          mhd_probe_log(\"buf_overflow\", \"not enough space while copying chars\",\n                        str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n          return false;\n        }\n        *(s2++) = *(s1++);\n        mhd_probe_log(\"copied_char\", \"copied one char\",\n                      str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n      }\n      /* 's1' points to some whitespace char in the token in the input\n       * string, to the ',', or just beyond the end of the input string */\n      /* Skip all whitespaces */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n\n      /* 's1' points to the first non-whitespace char in the input string\n       * after whitespace chars, to the ',', or just beyond the end of\n       * the input string */\n      if (((size_t) (s1 - str) < str_len) && (',' != *s1))\n      { /* Not the end of the current token */\n        mhd_probe_log(\"space_before_append\", \"about to assert s2 >= buf before appending space\",\n                      str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          mhd_probe_log(\"buf_overflow\", \"not enough space before appending space\",\n                        str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n          return false;\n        }\n        *(s2++) = ' ';\n        mhd_probe_log(\"appended_space\", \"appended space between words\",\n                      str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, copy_size, token_removed);\n      }\n    }\n  }\n  mhd_probe_log(\"before_final_assert\", \"about to assert final size relation\",\n                str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, 0, token_removed);\n  mhd_assert (((ssize_t) (s2 - buf)) <= *buf_size);\n  *buf_size = (ssize_t) (s2 - buf);\n  mhd_probe_log(\"exit\", \"function exiting\",\n                str, str_len, token, token_len, buf, *buf_size, s1, s2, t_pos, 0, token_removed);\n  return token_removed;\n}\n"
}