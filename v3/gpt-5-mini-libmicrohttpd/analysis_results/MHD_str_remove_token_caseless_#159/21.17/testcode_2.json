{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(token, 0, token_len) can read token_len bytes starting at token. If token does not point to at least token_len bytes (for example: char token_arr[4] = \"abc\"; but token_len == 10), memchr will access beyond the bounds of the token object (undefined behavior). Likewise, if token is NULL, the call is invalid. Unless the code elsewhere guarantees token points to at least token_len bytes, this use can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_remove_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1599.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_remove_token_caseless_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_remove_token_caseless_:\n```c\nbool\nMHD_str_remove_token_caseless_ (const char *str,\n                                size_t str_len,\n                                const char *const token,\n                                const size_t token_len,\n                                char *buf,\n                                ssize_t *buf_size)\n{\n  const char *s1; /**< the \"input\" string / character */\n  char *s2;       /**< the \"output\" string / character */\n  size_t t_pos;   /**< position of matched character in the token */\n  bool token_removed;\n\n  mhd_assert (NULL == memchr (token, 0, token_len));\n  mhd_assert (NULL == memchr (token, ' ', token_len));\n  mhd_assert (NULL == memchr (token, '\\t', token_len));\n  mhd_assert (NULL == memchr (token, ',', token_len));\n  mhd_assert (0 <= *buf_size);\n\n  if (SSIZE_MAX <= ((str_len / 2) * 3 + 3))\n  {\n    /* The return value may overflow, refuse */\n    *buf_size = (ssize_t) -1;\n    return false;\n  }\n  s1 = str;\n  s2 = buf;\n  token_removed = false;\n\n  while ((size_t) (s1 - str) < str_len)\n  {\n    const char *cur_token; /**< the first char of current token */\n    size_t copy_size;\n\n    /* Skip any initial whitespaces and empty tokens */\n    while ( ((size_t) (s1 - str) < str_len) &&\n            ((' ' == *s1) || ('\\t' == *s1) || (',' == *s1)) )\n      s1++;\n\n    /* 's1' points to the first char of token in the input string or\n     * points just beyond the end of the input string */\n\n    if ((size_t) (s1 - str) >= str_len)\n      break; /* Nothing to copy, end of the input string */\n\n    /* 's1' points to the first char of token in the input string */\n\n    cur_token = s1; /* the first char of input token */\n\n    /* Check the token with case-insensetive match */\n    t_pos = 0;\n    while ( ((size_t) (s1 - str) < str_len) && (token_len > t_pos) &&\n            (charsequalcaseless (*s1, token[t_pos])) )\n    {\n      s1++;\n      t_pos++;\n    }\n    /* s1 may point just beyond the end of the input string */\n    if ( (token_len == t_pos) && (0 != token_len) )\n    {\n      /* 'token' matched, check that current input token does not have\n       * any suffixes */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n      /* 's1' points to the first non-whitespace char after the token matched\n       * requested token or points just beyond the end of the input string after\n       * the requested token */\n      if (((size_t) (s1 - str) == str_len) || (',' == *s1))\n      {/* full token match, do not copy current token to the output */\n        token_removed = true;\n        continue;\n      }\n    }\n\n    /* 's1' points to first non-whitespace char, to some char after\n     * first non-whitespace char in the token in the input string, to\n     * the ',', or just beyond the end of the input string */\n    /* The current token in the input string does not match the token\n     * to exclude, it must be copied to the output string */\n    /* the current token size excluding leading whitespaces and current char */\n    copy_size = (size_t) (s1 - cur_token);\n    if (buf == s2)\n    { /* The first token to copy to the output */\n      if ((size_t) *buf_size < copy_size)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n    }\n    else\n    { /* Some token was already copied to the output buffer */\n      mhd_assert (s2 > buf);\n      if ((size_t) *buf_size < ((size_t) (s2 - buf)) + copy_size + 2)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n      *(s2++) = ',';\n      *(s2++) = ' ';\n    }\n    /* Copy non-matched token to the output */\n    if (0 != copy_size)\n    {\n      memcpy (s2, cur_token, copy_size);\n      s2 += copy_size;\n    }\n\n    while ( ((size_t) (s1 - str) < str_len) && (',' != *s1))\n    {\n      /* 's1' points to first non-whitespace char, to some char after\n       * first non-whitespace char in the token in the input string */\n      /* Copy all non-whitespace chars from the current token in\n       * the input string */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              (',' != *s1) && (' ' != *s1) && ('\\t' != *s1) )\n      {\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = *(s1++);\n      }\n      /* 's1' points to some whitespace char in the token in the input\n       * string, to the ',', or just beyond the end of the input string */\n      /* Skip all whitespaces */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n\n      /* 's1' points to the first non-whitespace char in the input string\n       * after whitespace chars, to the ',', or just beyond the end of\n       * the input string */\n      if (((size_t) (s1 - str) < str_len) && (',' != *s1))\n      { /* Not the end of the current token */\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = ' ';\n      }\n    }\n  }\n  mhd_assert (((ssize_t) (s2 - buf)) <= *buf_size);\n  *buf_size = (ssize_t) (s2 - buf);\n  return token_removed;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_remove_token_caseless_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <sys/types.h>\n\n/* Probe helper: append a single log entry to /tmp/logs/1599.txt. */\nstatic void\nmhd_log_probe(const char *stage,\n              const void *str_ptr, size_t str_len,\n              const void *token_ptr, size_t token_len,\n              const void *buf_ptr, ssize_t buf_size,\n              size_t s1_offset, size_t t_pos, size_t copy_size,\n              const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/1599.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"[MHD_PROBE] stage=%s str=%p str_len=%zu token=%p token_len=%zu buf=%p buf_size=%zd s1_offset=%zu t_pos=%zu copy_size=%zu extra=%s\\n\",\n          stage,\n          (const void *) (uintptr_t) str_ptr, str_len,\n          (const void *) (uintptr_t) token_ptr, token_len,\n          buf_ptr, buf_size,\n          s1_offset, t_pos, copy_size,\n          (extra != NULL) ? extra : \"(null)\");\n  fclose(f);\n}\n\nbool\nMHD_str_remove_token_caseless_ (const char *str,\n                                size_t str_len,\n                                const char *const token,\n                                const size_t token_len,\n                                char *buf,\n                                ssize_t *buf_size)\n{\n  const char *s1; /**< the \"input\" string / character */\n  char *s2;       /**< the \"output\" string / character */\n  size_t t_pos;   /**< position of matched character in the token */\n  bool token_removed;\n\n  /* Log entry and key parameters before any potentially out-of-bounds checks */\n  mhd_log_probe(\"entry\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"entry\");\n\n  /* Log just before memchr-based assertions so reproducer has evidence */\n  mhd_log_probe(\"before_memchr_0\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"about to call memchr(token,0,token_len)\");\n  mhd_assert (NULL == memchr (token, 0, token_len));\n  mhd_log_probe(\"after_memchr_0\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"memchr(token,0,token_len) returned NULL\");\n\n  mhd_log_probe(\"before_memchr_space\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"about to call memchr(token,' ',token_len)\");\n  mhd_assert (NULL == memchr (token, ' ', token_len));\n  mhd_log_probe(\"after_memchr_space\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"memchr(token,' ',token_len) returned NULL\");\n\n  mhd_log_probe(\"before_memchr_tab\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"about to call memchr(token,'\\t',token_len)\");\n  mhd_assert (NULL == memchr (token, '\\t', token_len));\n  mhd_log_probe(\"after_memchr_tab\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"memchr(token,'\\t',token_len) returned NULL\");\n\n  mhd_log_probe(\"before_memchr_comma\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"about to call memchr(token,',',token_len)\");\n  mhd_assert (NULL == memchr (token, ',', token_len));\n  mhd_log_probe(\"after_memchr_comma\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"memchr(token,',',token_len) returned NULL\");\n\n  mhd_log_probe(\"before_bufsize_assert\", str, str_len, token, token_len, buf, (buf_size != NULL) ? *buf_size : -1, 0, 0, 0, \"about to assert buf_size >= 0\");\n  mhd_assert (0 <= *buf_size);\n  mhd_log_probe(\"after_bufsize_assert\", str, str_len, token, token_len, buf, *buf_size, 0, 0, 0, \"buf_size non-negative\");\n\n  if (SSIZE_MAX <= ((str_len / 2) * 3 + 3))\n  {\n    /* The return value may overflow, refuse */\n    mhd_log_probe(\"overflow_refuse\", str, str_len, token, token_len, buf, *buf_size, 0, 0, 0, \"overflow test failed, refusing\");\n    *buf_size = (ssize_t) -1;\n    return false;\n  }\n  s1 = str;\n  s2 = buf;\n  token_removed = false;\n\n  while ((size_t) (s1 - str) < str_len)\n  {\n    const char *cur_token; /**< the first char of current token */\n    size_t copy_size;\n\n    /* Log entering top of loop with current offset */\n    mhd_log_probe(\"loop_top\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), 0, 0, \"entering loop\");\n\n    /* Skip any initial whitespaces and empty tokens */\n    while ( ((size_t) (s1 - str) < str_len) &&\n            ((' ' == *s1) || ('\\t' == *s1) || (',' == *s1)) )\n      s1++;\n\n    /* 's1' points to the first char of token in the input string or\n     * points just beyond the end of the input string */\n\n    if ((size_t) (s1 - str) >= str_len)\n      break; /* Nothing to copy, end of the input string */\n\n    /* 's1' points to the first char of token in the input string */\n\n    cur_token = s1; /* the first char of input token */\n\n    /* Check the token with case-insensetive match */\n    t_pos = 0;\n    while ( ((size_t) (s1 - str) < str_len) && (token_len > t_pos) &&\n            (charsequalcaseless (*s1, token[t_pos])) )\n    {\n      s1++;\n      t_pos++;\n    }\n    /* s1 may point just beyond the end of the input string */\n    mhd_log_probe(\"after_token_cmp\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), t_pos, 0, \"after token compare loop\");\n    if ( (token_len == t_pos) && (0 != token_len) )\n    {\n      /* 'token' matched, check that current input token does not have\n       * any suffixes */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n      /* 's1' points to the first non-whitespace char after the token matched\n       * requested token or points just beyond the end of the input string after\n       * the requested token */\n      if (((size_t) (s1 - str) == str_len) || (',' == *s1))\n      {/* full token match, do not copy current token to the output */\n        token_removed = true;\n        mhd_log_probe(\"token_removed\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), t_pos, 0, \"token removed\");\n        continue;\n      }\n    }\n\n    /* 's1' points to first non-whitespace char, to some char after\n     * first non-whitespace char in the token in the input string, to\n     * the ',', or just beyond the end of the input string */\n    /* The current token in the input string does not match the token\n     * to exclude, it must be copied to the output string */\n    /* the current token size excluding leading whitespaces and current char */\n    copy_size = (size_t) (s1 - cur_token);\n    mhd_log_probe(\"prepare_copy\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), t_pos, copy_size, \"preparing to copy token\");\n    if (buf == s2)\n    { /* The first token to copy to the output */\n      if ((size_t) *buf_size < copy_size)\n      { /* Not enough space in the output buffer */\n        mhd_log_probe(\"buf_too_small_first\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), t_pos, copy_size, \"not enough space for first token\");\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n    }\n    else\n    { /* Some token was already copied to the output buffer */\n      mhd_assert (s2 > buf);\n      if ((size_t) *buf_size < ((size_t) (s2 - buf)) + copy_size + 2)\n      { /* Not enough space in the output buffer */\n        mhd_log_probe(\"buf_too_small_subsequent\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), t_pos, copy_size, \"not enough space for subsequent token\");\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n      *(s2++) = ',';\n      *(s2++) = ' ';\n    }\n    /* Copy non-matched token to the output */\n    if (0 != copy_size)\n    {\n      memcpy (s2, cur_token, copy_size);\n      s2 += copy_size;\n      mhd_log_probe(\"copied_token\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), t_pos, copy_size, \"copied non-matching token to output\");\n    }\n\n    while ( ((size_t) (s1 - str) < str_len) && (',' != *s1))\n    {\n      /* 's1' points to first non-whitespace char, to some char after\n       * first non-whitespace char in the token in the input string */\n      /* Copy all non-whitespace chars from the current token in\n       * the input string */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              (',' != *s1) && (' ' != *s1) && ('\\t' != *s1) )\n      {\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          mhd_log_probe(\"buf_too_small_during_copy\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), t_pos, copy_size, \"not enough space while copying chars\");\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = *(s1++);\n      }\n      /* 's1' points to some whitespace char in the token in the input\n       * string, to the ',', or just beyond the end of the input string */\n      /* Skip all whitespaces */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n\n      /* 's1' points to the first non-whitespace char in the input string\n       * after whitespace chars, to the ',', or just beyond the end of\n       * the input string */\n      if (((size_t) (s1 - str) < str_len) && (',' != *s1))\n      { /* Not the end of the current token */\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          mhd_log_probe(\"buf_too_small_space_insert\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), t_pos, copy_size, \"not enough space to insert space\");\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = ' ';\n      }\n    }\n  }\n  mhd_assert (((ssize_t) (s2 - buf)) <= *buf_size);\n  *buf_size = (ssize_t) (s2 - buf);\n  mhd_log_probe(\"exit\", str, str_len, token, token_len, buf, *buf_size, (size_t)(s1 - str), t_pos, 0, token_removed ? \"token_removed_true\" : \"token_removed_false\");\n  return token_removed;\n}\n"
}