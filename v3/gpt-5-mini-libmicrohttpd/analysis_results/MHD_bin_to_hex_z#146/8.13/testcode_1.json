{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of MHD_bin_to_hex is declared to take a non-const pointer (for example: size_t MHD_bin_to_hex(void *bin, size_t size, char *hex)), then passing the local parameter 'bin' of type 'const void *' to it discards the const qualification. That situation violates MISRA C 2023 Rule 8.13. (If, however, MHD_bin_to_hex is declared as taking a 'const void *' then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_bin_to_hex_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1463.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_bin_to_hex_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_bin_to_hex_z:\n```c\nsize_t\nMHD_bin_to_hex_z (const void *bin,\n                  size_t size,\n                  char *hex)\n{\n  size_t res;\n\n  res = MHD_bin_to_hex (bin, size, hex);\n  hex[res] = 0;\n\n  return res;\n}\n```\n</target_code>\nPlease provide the modified MHD_bin_to_hex_z code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging function: append control flow and state to /tmp/logs/1463.txt */\nstatic void MHD_log_bin_to_hex_z(const void *bin, size_t size, const char *hex, const char *stage, size_t res)\n{\n    FILE *f = fopen(\"/tmp/logs/1463.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"MHD_bin_to_hex_z: stage=%s\\n\", stage);\n    fprintf(f, \"  bin (pointer) = %p\\n\", bin);\n    fprintf(f, \"  size = %zu\\n\", size);\n    fprintf(f, \"  hex (pointer) = %p\\n\", (const void *)hex);\n    fprintf(f, \"  res = %zu\\n\", res);\n\n    /* Dump up to first 16 bytes of the binary input (if available) */\n    if (bin != NULL && size > 0)\n    {\n        const unsigned char *b = (const unsigned char *)bin;\n        size_t to_dump = size < 16U ? size : 16U;\n        fprintf(f, \"  bin[0..%zu) =\", to_dump);\n        for (size_t i = 0U; i < to_dump; ++i)\n        {\n            fprintf(f, \" %02x\", (unsigned) b[i]);\n        }\n        if (size > to_dump)\n        {\n            fprintf(f, \" ...\");\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    /* Dump a short view of the hex buffer content (null-terminated or limited by res) */\n    if (hex != NULL)\n    {\n        fprintf(f, \"  hex preview = '\");\n        /* Print up to 64 characters or until a NUL is found */\n        size_t printed = 0U;\n        while (printed < 64U && hex[printed] != '\\0')\n        {\n            unsigned char c = (unsigned char) hex[printed];\n            if (c >= 0x20 && c < 0x7f)\n            {\n                fputc(c, f);\n            }\n            else\n            {\n                fprintf(f, \"\\\\x%02x\", c);\n            }\n            ++printed;\n        }\n        if (printed == 64U)\n        {\n            fprintf(f, \"...\");\n        }\n        fprintf(f, \"'\\n\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original functionality preserved. Logging probes added before and after the call. */\nsize_t\nMHD_bin_to_hex_z (const void *bin,\n                  size_t size,\n                  char *hex)\n{\n  size_t res;\n\n  /* Log before calling MHD_bin_to_hex: capture that we are passing a const void * here */\n  MHD_log_bin_to_hex_z(bin, size, hex, \"before_call\", (size_t)0);\n\n  res = MHD_bin_to_hex (bin, size, hex);\n\n  /* Ensure NUL termination as in original logic */\n  hex[res] = 0;\n\n  /* Log after the call: record the return value and resulting hex buffer */\n  MHD_log_bin_to_hex_z(bin, size, hex, \"after_call\", res);\n\n  return res;\n}\n"
}