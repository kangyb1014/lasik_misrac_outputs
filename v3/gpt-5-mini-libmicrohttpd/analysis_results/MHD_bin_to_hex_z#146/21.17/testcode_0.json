{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_bin_to_hex writes N characters into the buffer pointed to by hex (for example, converting size bytes to 2*size hex characters) and returns N without NUL-terminating, then MHD_bin_to_hex_z executes hex[res] = 0. If the caller provided a buffer of exactly N bytes (e.g. 2*size) with no extra space for the terminating NUL, that write is one past the end of the object and thus an out\u2011of\u2011bounds access. Because the fragment does not ensure the hex buffer has room for the terminating NUL, this can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_bin_to_hex_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1469.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_bin_to_hex_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_bin_to_hex_z:\n```c\nsize_t\nMHD_bin_to_hex_z (const void *bin,\n                  size_t size,\n                  char *hex)\n{\n  size_t res;\n\n  res = MHD_bin_to_hex (bin, size, hex);\n  hex[res] = 0;\n\n  return res;\n}\n```\n</target_code>\nPlease provide the modified MHD_bin_to_hex_z code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/*\n * Instrumentation helpers for capturing control flow and state related to\n * MHD_bin_to_hex_z. Logs are appended to /tmp/logs/1469.txt.\n * This file intentionally preserves the original logic of MHD_bin_to_hex_z\n * and only adds probe points for observation.\n */\n\n/* Forward declaration of the original conversion function. */\nextern size_t MHD_bin_to_hex (const void *bin, size_t size, char *hex);\n\nstatic void mhd_log_probe(const char *stage,\n                          const void *bin,\n                          size_t size,\n                          const char *hex,\n                          size_t res)\n{\n    FILE *f = fopen(\"/tmp/logs/1469.txt\", \"a\");\n    if (f)\n    {\n        /* Log stage, pointers and numeric values in a simple, parseable form. */\n        fprintf(f, \"stage=%s bin=%p size=%zu hex=%p res=%zu\\n\",\n                stage, bin, size, (const void *)hex, res);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nsize_t\nMHD_bin_to_hex_z (const void *bin,\n                  size_t size,\n                  char *hex)\n{\n  size_t res;\n\n  /* Probe before calling the converter. res unknown at this point, use (size_t)-1. */\n  mhd_log_probe(\"before_convert\", bin, size, hex, (size_t)-1);\n\n  res = MHD_bin_to_hex (bin, size, hex);\n\n  /* Probe immediately after conversion returns to capture returned length. */\n  mhd_log_probe(\"after_convert\", bin, size, hex, res);\n\n  /* Probe right before the terminating NUL is written. This is the critical\n   * operation under scrutiny for out-of-bounds writes when the caller's\n   * buffer has exactly 'res' bytes and no extra space for the NUL. */\n  mhd_log_probe(\"before_null_termination\", bin, size, hex, res);\n\n  hex[res] = 0;\n\n  /* Probe after the terminating NUL write so any following verification can\n   * observe that the write occurred (or caused a fault during execution). */\n  mhd_log_probe(\"after_null_termination\", bin, size, hex, res);\n\n  return res;\n}\n"
}