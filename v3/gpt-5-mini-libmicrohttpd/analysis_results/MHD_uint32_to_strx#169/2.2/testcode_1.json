{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe final val <<= 4 in the do-while can be executed in the iteration where digit_pos becomes 0 but its result is never used: after the loop the code outputs the current 'digit' and immediately returns when digit_pos == 0, so the last shift of the local non-volatile variable 'val' has no effect on program behaviour and can be removed. Example: val == 0 (or any value where the loop reaches digit_pos == 0) \u2014 the loop performs the shift, exits, the digit is output and the function returns; removing that last shift does not change observable behaviour (aside from timing).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint32_to_strx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1692.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_uint32_to_strx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_uint32_to_strx:\n```c\nsize_t\nMHD_uint32_to_strx (uint32_t val,\n                    char *buf,\n                    size_t buf_size)\n{\n  size_t o_pos = 0; /**< position of the output character */\n  int digit_pos = 8; /** zero-based, digit position in @a 'val' */\n  int digit;\n\n  /* Skip leading zeros */\n  do\n  {\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  } while ((0 == digit) && (0 != digit_pos));\n\n  while (o_pos < buf_size)\n  {\n    buf[o_pos++] =\n      (char) ((digit <= 9) ?\n              ('0' + (char) digit) :\n              ('A' + (char) digit - 10));\n    if (0 == digit_pos)\n      return o_pos;\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\nPlease provide the modified MHD_uint32_to_strx code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper. Appends human-readable state to /tmp/logs/1692.txt */\nstatic void\nlog_event(const char *msg,\n          uint32_t val_before,\n          uint32_t val_after,\n          int digit_pos,\n          int digit,\n          size_t o_pos)\n{\n  FILE *f = fopen(\"/tmp/logs/1692.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s: val_before=%u val_after=%u digit_pos=%d digit=%d o_pos=%zu\\n\",\n            msg,\n            (unsigned int) val_before,\n            (unsigned int) val_after,\n            digit_pos,\n            digit,\n            o_pos);\n    fclose(f);\n  }\n}\n\nsize_t\nMHD_uint32_to_strx (uint32_t val,\n                    char *buf,\n                    size_t buf_size)\n{\n  size_t o_pos = 0; /**< position of the output character */\n  int digit_pos = 8; /** zero-based, digit position in @a 'val' */\n  int digit;\n\n  /* Log entry state */\n  log_event(\"enter\", val, val, digit_pos, -1, o_pos);\n\n  /* Skip leading zeros */\n  do\n  {\n    digit_pos--;\n    uint32_t val_before_shift = val;\n    digit = (int) (val >> 28);\n    val <<= 4;\n    /* Log the do-while iteration including pre- and post-shift values */\n    log_event(\"do_while_iter\", val_before_shift, val, digit_pos, digit, o_pos);\n  } while ((0 == digit) && (0 != digit_pos));\n\n  /* After finishing the skip-leading-zeros loop, record whether the\n     post-shift 'val' will be used: it will only be used if digit_pos != 0. */\n  log_event(\"after_do_while\", 0u, val, digit_pos, digit, o_pos);\n\n  while (o_pos < buf_size)\n  {\n    /* Log before writing the output character */\n    log_event(\"before_write_char\", 0u, val, digit_pos, digit, o_pos);\n\n    buf[o_pos++] =\n      (char) ((digit <= 9) ?\n              ('0' + (char) digit) :\n              ('A' + (char) digit - 10));\n\n    /* Log the write and the updated o_pos */\n    log_event(\"after_write_char\", 0u, val, digit_pos, digit, o_pos);\n\n    if (0 == digit_pos)\n    {\n      /* If digit_pos == 0 we will return immediately; the current 'val'\n         (which was shifted at the end of the last do-while iteration)\n         will not be used. Log this fact to provide evidence of the\n         potential dead operation described in the violation scenario. */\n      log_event(\"return_after_last_digit_val_unused\", 0u, val, digit_pos, digit, o_pos);\n      return o_pos;\n    }\n    digit_pos--;\n    uint32_t val_before_shift2 = val;\n    digit = (int) (val >> 28);\n    val <<= 4;\n    /* Log the state after preparing the next digit */\n    log_event(\"prepare_next_digit\", val_before_shift2, val, digit_pos, digit, o_pos);\n  }\n  log_event(\"buffer_too_small_return\", 0u, val, digit_pos, digit, o_pos);\n  return 0; /* The buffer is too small */\n}\n"
}