{
  "user_message": "An agent A claimed that the following MHD_uint32_to_strx code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_uint32_to_strx.\n```c\nsize_t\nMHD_uint32_to_strx (uint32_t val,\n                    char *buf,\n                    size_t buf_size)\n{\n  size_t o_pos = 0; /**< position of the output character */\n  int digit_pos = 8; /** zero-based, digit position in @a 'val' */\n  int digit;\n\n  /* Skip leading zeros */\n  do\n  {\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  } while ((0 == digit) && (0 != digit_pos));\n\n  while (o_pos < buf_size)\n  {\n    buf[o_pos++] =\n      (char) ((digit <= 9) ?\n              ('0' + (char) digit) :\n              ('A' + (char) digit - 10));\n    if (0 == digit_pos)\n      return o_pos;\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code performs a compound assignment on the function parameter 'val' (uint32_t) via 'val <<= 4;'. This modifies the parameter variable itself rather than using a separate local copy, which violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nSTAGE=entry: val=0x00000001 (1), digit_pos=8, digit=-1, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x00000001 (1), digit_pos=7, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x00000010 (16), digit_pos=7, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x00000010 (16), digit_pos=6, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x00000100 (256), digit_pos=6, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x00000100 (256), digit_pos=5, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x00001000 (4096), digit_pos=5, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x00001000 (4096), digit_pos=4, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x00010000 (65536), digit_pos=4, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x00010000 (65536), digit_pos=3, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x00100000 (1048576), digit_pos=3, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x00100000 (1048576), digit_pos=2, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x01000000 (16777216), digit_pos=2, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x01000000 (16777216), digit_pos=1, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x10000000 (268435456), digit_pos=1, digit=0, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x10000000 (268435456), digit_pos=0, digit=1, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x00000000 (0), digit_pos=0, digit=1, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=after-skip-leading-zeros: val=0x00000000 (0), digit_pos=0, digit=1, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=return-buffer-too-small: val=0x00000000 (0), digit_pos=0, digit=1, o_pos=0, buf_size=0, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=entry: val=0x00000001 (1), digit_pos=8, digit=-1, o_pos=0, buf_size=1, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x00000001 (1), digit_pos=7, digit=0, o_pos=0, buf_size=1, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x00000010 (16), digit_pos=7, digit=0, o_pos=0, buf_size=1, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x00000010 (16), digit_pos=6, digit=0, o_pos=0, buf_size=1, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-shift: val=0x00000100 (256), digit_pos=6, digit=0, o_pos=0, buf_size=1, buf=jrlkjssfhjfvrjntJHLJ$@%$#adsfdkj;k$##$%#$%FGDF%$#^FDFG%$#$D`;skjdhjfls\nSTAGE=do-after-digit-before-shift: val=0x00000100 (256), \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 forbids modifying function parameter variables. In the code the statement 'val <<= 4;' performs a compound assignment to the parameter 'val', so the function parameter is being modified. (The rule\u2019s note about pointer parameters is not relevant here \u2014 it only allows modifying the object pointed to, not the pointer parameter itself.) To comply, make a local copy (for example 'uint32_t tmp = val;') and operate on that copy instead of modifying the parameter."
}