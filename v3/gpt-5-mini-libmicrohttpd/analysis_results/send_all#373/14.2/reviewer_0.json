{
  "user_message": "An agent A claimed that the following send_all code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of send_all.\n```c\nstatic void\nsend_all (MHD_socket sock,\n          const char *buf,\n          size_t len)\n{\n  ssize_t ret;\n  size_t off;\n\n  make_blocking (sock);\n  for (off = 0; off < len; off += (size_t) ret)\n  {\n    ret = send (sock,\n                &buf[off],\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n                len - off,\n#else  /* Native W32 */\n                (int) (len - off),\n#endif /* Native W32 */\n                0);\n    if (0 > ret)\n    {\n      if (EAGAIN == errno)\n      {\n        ret = 0;\n        continue;\n      }\n      break;\n    }\n    if (0 == ret)\n      break;\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe fragment assigns to 'ret' inside the loop body (ret = 0;), and the for-loop's third clause is 'off += (size_t) ret'. Clause 3 of MISRA C 2023 Rule 14.2 forbids the third clause from using objects that are modified in the loop body. Because 'ret' is modified in the body (by the send return and by the shown 'ret = 0;'), the loop violates Rule 14.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The for loop third clause uses the object 'ret' (off += (size_t) ret) while 'ret' is assigned/modified in the loop body (ret = send(...); and ret = 0;). MISRA C 2023 Rule 14.2 explicitly requires that the third clause shall modify only the loop counter and shall not use objects that are modified in the loop body. Here the loop counter is 'off' but the third clause depends on 'ret', which is modified in the body, so the construct violates Rule 14.2.\n\nFixes: move the increment into the loop body or structure the loop differently. For example:\n- Use a while loop: for (off = 0; off < len; ) { ret = send(...); if (ret <= 0) break; off += (size_t) ret; }\n- Or perform the off update explicitly inside the body after determining ret, so the for third clause does not reference objects modified by the body.\nEither change removes the dependency of the third clause on an object modified in the body and conforms to the rule."
}