{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nWhen HTTPS_SUPPORT is not defined, tls_conn is defined as the constant false earlier in the function. Thus the runtime test if (tls_conn) is always false and the entire if-body is unreachable \u2014 in particular the #else branch expansion ret = MHD_ERR_NOTCONN_; nested inside that if can never execute. This constitutes unreachable code and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_data_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1751.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_send_data_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_send_data_:\n```c\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n  }\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n      return MHD_ERR_AGAIN_;\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n      return MHD_ERR_TLS_;\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n      return MHD_ERR_PIPE_;\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n      return MHD_ERR_CONNRESET_;\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n      return MHD_ERR_CONNRESET_;\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n      return MHD_ERR_NOMEM_;\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    ret = MHD_ERR_NOTCONN_;\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        return MHD_ERR_AGAIN_;\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n        return MHD_ERR_CONNRESET_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n        return MHD_ERR_PIPE_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n        return MHD_ERR_OPNOTSUPP_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n        return MHD_ERR_NOTCONN_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n        return MHD_ERR_INVAL_;\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n        return MHD_ERR_NOMEM_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n        return MHD_ERR_BADF_;\n      /* Treat any other error as a hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n    post_send_setopt (connection, (! tls_conn), push_data);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_send_data_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append a single line describing the current state. */\nstatic void mhd_log_probe(const char *stage,\n                          struct MHD_Connection *connection,\n                          long s_val,\n                          size_t buffer_size,\n                          bool push_data,\n                          bool tls_conn,\n                          ssize_t ret)\n{\n  FILE *f = fopen(\"/tmp/logs/1751.txt\", \"a\");\n  if (f)\n  {\n    /* Guard access to nested pointers */\n    int conn_state = -1;\n    unsigned long daemon_opts = 0ul;\n    if (connection)\n    {\n      conn_state = (int) connection->state;\n      if (connection->daemon)\n        daemon_opts = (unsigned long) connection->daemon->options;\n    }\n    fprintf(f,\n            \"stage=%s s=%ld conn_state=%d daemon_opts=0x%lx buffer_size=%zu push_data=%d tls_conn=%d ret=%zd\\n\",\n            stage,\n            s_val,\n            conn_state,\n            daemon_opts,\n            buffer_size,\n            (int) push_data,\n            (int) tls_conn,\n            (ssize_t) ret);\n    fclose(f);\n  }\n}\n\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret = (ssize_t) -1; /* initialize for logging safety */\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  /* Log entry after tls_conn determination */\n  mhd_log_probe(\"entry_after_tls_set\",\n                connection,\n                (long) s,\n                buffer_size,\n                push_data,\n                tls_conn,\n                ret);\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    mhd_log_probe(\"early_return_notconn\",\n                  connection,\n                  (long) s,\n                  buffer_size,\n                  push_data,\n                  tls_conn,\n                  (ssize_t) MHD_ERR_NOTCONN_);\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n    mhd_log_probe(\"buffer_trimmed_to_ssize_max\",\n                  connection,\n                  (long) s,\n                  buffer_size,\n                  push_data,\n                  tls_conn,\n                  ret);\n  }\n\n  mhd_log_probe(\"before_tls_check\",\n                connection,\n                (long) s,\n                buffer_size,\n                push_data,\n                tls_conn,\n                ret);\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    mhd_log_probe(\"enter_tls_branch\",\n                  connection,\n                  (long) s,\n                  buffer_size,\n                  push_data,\n                  tls_conn,\n                  ret);\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    mhd_log_probe(\"after_gnutls_record_send\",\n                  connection,\n                  (long) s,\n                  buffer_size,\n                  push_data,\n                  tls_conn,\n                  ret);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      mhd_log_probe(\"tls_gnutls_e_again\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    (ssize_t) MHD_ERR_AGAIN_);\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n    {\n      mhd_log_probe(\"tls_gnutls_interrupted\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    (ssize_t) MHD_ERR_AGAIN_);\n      return MHD_ERR_AGAIN_;\n    }\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n    {\n      mhd_log_probe(\"tls_gnutls_tls_err\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    (ssize_t) MHD_ERR_TLS_);\n      return MHD_ERR_TLS_;\n    }\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n    {\n      mhd_log_probe(\"tls_gnutls_pipe_err\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    (ssize_t) MHD_ERR_PIPE_);\n      return MHD_ERR_PIPE_;\n    }\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n    {\n      mhd_log_probe(\"tls_gnutls_connreset_premature\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    (ssize_t) MHD_ERR_CONNRESET_);\n      return MHD_ERR_CONNRESET_;\n    }\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n    {\n      mhd_log_probe(\"tls_gnutls_connreset_unexpected_len\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    (ssize_t) MHD_ERR_CONNRESET_);\n      return MHD_ERR_CONNRESET_;\n    }\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n    {\n      mhd_log_probe(\"tls_gnutls_nomem\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    (ssize_t) MHD_ERR_NOMEM_);\n      return MHD_ERR_NOMEM_;\n    }\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      mhd_log_probe(\"tls_gnutls_other_error\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    (ssize_t) MHD_ERR_NOTCONN_);\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    /* This assignment is in the original code under the TLS branch's\n     * #else. When HTTPS_SUPPORT is not defined, tls_conn is also false,\n     * making the whole if (tls_conn) body unreachable. We still keep the\n     * original assignment and add a log just in case it is ever reached. */\n    ret = MHD_ERR_NOTCONN_;\n    mhd_log_probe(\"tls_branch_no_https_support_assigned_ret\",\n                  connection,\n                  (long) s,\n                  buffer_size,\n                  push_data,\n                  tls_conn,\n                  ret);\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    mhd_log_probe(\"enter_plaintext_branch\",\n                  connection,\n                  (long) s,\n                  buffer_size,\n                  push_data,\n                  tls_conn,\n                  ret);\n\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n      mhd_log_probe(\"plaintext_trim_to_send_max\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    ret);\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    mhd_log_probe(\"after_plain_send\",\n                  connection,\n                  (long) s,\n                  buffer_size,\n                  push_data,\n                  tls_conn,\n                  ret);\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        mhd_log_probe(\"plaintext_eagain\",\n                      connection,\n                      (long) s,\n                      buffer_size,\n                      push_data,\n                      tls_conn,\n                      (ssize_t) MHD_ERR_AGAIN_);\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      {\n        mhd_log_probe(\"plaintext_eintr\",\n                      connection,\n                      (long) s,\n                      buffer_size,\n                      push_data,\n                      tls_conn,\n                      (ssize_t) MHD_ERR_AGAIN_);\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      {\n        mhd_log_probe(\"plaintext_connreset\",\n                      connection,\n                      (long) s,\n                      buffer_size,\n                      push_data,\n                      tls_conn,\n                      (ssize_t) MHD_ERR_CONNRESET_);\n        return MHD_ERR_CONNRESET_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n      {\n        mhd_log_probe(\"plaintext_pipe\",\n                      connection,\n                      (long) s,\n                      buffer_size,\n                      push_data,\n                      tls_conn,\n                      (ssize_t) MHD_ERR_PIPE_);\n        return MHD_ERR_PIPE_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      {\n        mhd_log_probe(\"plaintext_opnotsupp\",\n                      connection,\n                      (long) s,\n                      buffer_size,\n                      push_data,\n                      tls_conn,\n                      (ssize_t) MHD_ERR_OPNOTSUPP_);\n        return MHD_ERR_OPNOTSUPP_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      {\n        mhd_log_probe(\"plaintext_notconn\",\n                      connection,\n                      (long) s,\n                      buffer_size,\n                      push_data,\n                      tls_conn,\n                      (ssize_t) MHD_ERR_NOTCONN_);\n        return MHD_ERR_NOTCONN_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      {\n        mhd_log_probe(\"plaintext_inval\",\n                      connection,\n                      (long) s,\n                      buffer_size,\n                      push_data,\n                      tls_conn,\n                      (ssize_t) MHD_ERR_INVAL_);\n        return MHD_ERR_INVAL_;\n      }\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      {\n        mhd_log_probe(\"plaintext_low_resources\",\n                      connection,\n                      (long) s,\n                      buffer_size,\n                      push_data,\n                      tls_conn,\n                      (ssize_t) MHD_ERR_NOMEM_);\n        return MHD_ERR_NOMEM_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      {\n        mhd_log_probe(\"plaintext_badf\",\n                      connection,\n                      (long) s,\n                      buffer_size,\n                      push_data,\n                      tls_conn,\n                      (ssize_t) MHD_ERR_BADF_);\n        return MHD_ERR_BADF_;\n      }\n      /* Treat any other error as a hard error. */\n      mhd_log_probe(\"plaintext_other_error\",\n                    connection,\n                    (long) s,\n                    buffer_size,\n                    push_data,\n                    tls_conn,\n                    (ssize_t) MHD_ERR_NOTCONN_);\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n  {\n    mhd_log_probe(\"before_post_send_setopt\",\n                  connection,\n                  (long) s,\n                  buffer_size,\n                  push_data,\n                  tls_conn,\n                  ret);\n    post_send_setopt (connection, (! tls_conn), push_data);\n  }\n\n  mhd_log_probe(\"function_exit\",\n                connection,\n                (long) s,\n                buffer_size,\n                push_data,\n                tls_conn,\n                ret);\n\n  return ret;\n}\n"
}