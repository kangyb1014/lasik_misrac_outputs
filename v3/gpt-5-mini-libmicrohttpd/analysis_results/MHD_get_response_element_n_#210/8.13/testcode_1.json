{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct MHD_HTTP_Res_Header declares header as a non-const pointer (e.g. 'char *header') but the member is only ever read (as here, passed to MHD_str_equal_caseless_bin_n_), then Rule 8.13 is violated \u2014 header should be declared 'const char *header'. (Note: key is already const; if header is intentionally mutable elsewhere, then no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_element_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *logf = NULL;\n  time_t t = time(NULL);\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  /* Open log file (append). We tolerate failure to open and continue normal logic. */\n  logf = fopen(\"/tmp/logs/2103.txt\", \"a\");\n  if (NULL != logf)\n    {\n      fprintf(logf, \"\\n--- MHD_get_response_element_n_ entry: %ld ---\\n\", (long)t);\n      fprintf(logf, \"response=%p, kind=%d, key=%p, key_len=%zu\\n\",\n              (void *)response, (int)kind, (const void *)key, key_len);\n      /* Print key safely (not NUL-terminated guaranteed). */\n      fprintf(logf, \"key (len=%zu): \\\"\", key_len);\n      fwrite(key, 1, key_len, logf);\n      fprintf(logf, \"\\\"\\n\");\n      fflush(logf);\n    }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log iteration start and header metadata. */\n    if (NULL != logf)\n      {\n        fprintf(logf, \"iter: pos=%p, header=%p, header_size=%zu, pos->kind=%d\\n\",\n                (void *)pos, (void *)pos->header, (size_t)pos->header_size, (int)pos->kind);\n        if (NULL != pos->header)\n          {\n            fprintf(logf, \"pos->header (len=%zu): \\\"\", (size_t)pos->header_size);\n            /* header may not be NUL-terminated; print exactly header_size bytes */\n            fwrite(pos->header, 1, pos->header_size, logf);\n            fprintf(logf, \"\\\"\\n\");\n          }\n        fflush(logf);\n      }\n\n    /* Preserve original short-circuit behavior: only call MHD_str_equal_caseless_bin_n_\n       when header_size and kind match. Log decisions and whether the string compare\n       was invoked and its result. */\n    int size_equal = (pos->header_size == key_len);\n    int kind_equal = (kind == pos->kind);\n    int caseless_equal = 0; /* unknown until possibly tested */\n\n    if (NULL != logf)\n      fprintf(logf, \"cmp: size_equal=%d, kind_equal=%d\\n\", size_equal, kind_equal);\n\n    if (size_equal && kind_equal)\n      {\n        /* Now perform the case-insensitive binary comparison as in original code. */\n        caseless_equal = MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size);\n        if (NULL != logf)\n          fprintf(logf, \"MHD_str_equal_caseless_bin_n_ called, result=%d\\n\", caseless_equal);\n      }\n    else\n      {\n        if (NULL != logf)\n          fprintf(logf, \"MHD_str_equal_caseless_bin_n_ not called due to size/kind mismatch\\n\");\n      }\n\n    if (size_equal && kind_equal && caseless_equal)\n      {\n        if (NULL != logf)\n          {\n            fprintf(logf, \"MATCH found at pos=%p -- returning.\\n\", (void *)pos);\n            fclose(logf);\n          }\n        return pos;\n      }\n  }\n\n  if (NULL != logf)\n    {\n      fprintf(logf, \"No matching header found. Returning NULL.\\n\");\n      fclose(logf);\n    }\n  return NULL;\n}\n"
}