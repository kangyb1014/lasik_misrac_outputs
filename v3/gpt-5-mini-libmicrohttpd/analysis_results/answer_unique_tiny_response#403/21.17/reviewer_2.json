{
  "user_message": "An agent A claimed that the following answer_unique_tiny_response code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of answer_unique_tiny_response.\n```c\nstatic enum MHD_Result\nanswer_unique_tiny_response (void *cls,\n                             struct MHD_Connection *connection,\n                             const char *url,\n                             const char *method,\n                             const char *version,\n                             const char *upload_data,\n                             size_t *upload_data_size,\n                             void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                              tiny_body);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                       (void *) tiny_body,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nCalling strcmp(method, MHD_HTTP_METHOD_GET) without validating method can dereference a null or non-null-terminated pointer. For example, if the caller supplies method == NULL (or a pointer to a non NUL-terminated buffer), strcmp will read through the pointer parameter and access memory beyond the referenced object, causing undefined behavior and violating MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 21.17 prohibits uses of <string.h> functions that can read past the bounds of the objects supplied. It is true that calling strcmp on a NULL pointer or on a non-NUL-terminated buffer would cause out-of-bounds reads and undefined behaviour. However, whether that constitutes a violation in this code depends on the calling contract for the callback. In this case the function is a libmicrohttpd request callback whose 'method' parameter is provided by the library and is documented/implemented as a pointer to a valid NUL-terminated HTTP method string (e.g. \"GET\", \"HEAD\"). Given that precondition, the strcmp calls cannot read beyond the referenced objects and do not violate Rule 21.17.\n\nSo the agent A's hypothetical (caller supplies method == NULL or a non NUL-terminated buffer) describes undefined behaviour in general, but it does not demonstrate a real violation here because the library API guarantees a valid NUL-terminated string for 'method'. If you do not trust that external guarantee, a defensive check (e.g. verify method != NULL before strcmp, or otherwise validate input) would be appropriate to satisfy MISRA requirements in contexts without such a contract."
}