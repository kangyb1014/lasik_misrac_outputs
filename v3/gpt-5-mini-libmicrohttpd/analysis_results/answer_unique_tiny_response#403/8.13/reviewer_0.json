{
  "user_message": "An agent A claimed that the following answer_unique_tiny_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_unique_tiny_response.\n```c\nstatic enum MHD_Result\nanswer_unique_tiny_response (void *cls,\n                             struct MHD_Connection *connection,\n                             const char *url,\n                             const char *method,\n                             const char *version,\n                             const char *upload_data,\n                             size_t *upload_data_size,\n                             void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                              tiny_body);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                       (void *) tiny_body,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code stores the address of a (effectively read-only) sentinel into a non-const void pointer: *req_cls = (void *) &marker;. The object at &marker is not intended to be modified via this pointer, so the pointer should point to a const-qualified type (e.g. const void * / const int *) but the code assigns to plain void * (casting hides the qualification). This violates MISRA C 2023 Rule 8.13 unless an API constraint forces the use of void ** (in which case the deviation must be documented).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 8.13 recommends that pointers should point to const-qualified types where possible, but in the posted code there is no const qualifier on the object being pointed at: marker is declared as a plain static int, so &marker has type int *, not const int *. Thus there is no const-qualification being discarded by the assignment *req_cls = (void *) &marker; \u2014 the cast merely converts int * to void *, which is the API-required form. Moreover, the function signature (req_cls is a void **) is an external/API constraint (this is the libmicrohttpd callback pattern), so you cannot change the parameter to a const-qualified pointer without changing the API. If marker were made const to reflect its intended read-only use, storing its address into a void ** would necessarily discard const qualification and would require a cast; that would need to be documented as a justified deviation. As written, however, there is no direct 8.13 violation. Therefore the agent A's claim is not correct."
}