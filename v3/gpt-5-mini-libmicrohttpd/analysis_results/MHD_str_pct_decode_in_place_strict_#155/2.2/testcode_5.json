{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe nested casts in the expression are redundant and can be removed without changing behaviour. Specifically, ((unsigned int) h), the surrounding ((uint8_t) ((unsigned int) h)), and similar casts on l do not affect the result because h and l are non\u2011negative small integers (checked earlier) and C integer promotions make the shift and bitwise OR behave the same without those casts. Those cast operations are executed but removable without changing program behaviour, so they constitute dead code and violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_pct_decode_in_place_strict_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1552.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_pct_decode_in_place_strict_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_pct_decode_in_place_strict_:\n```c\nsize_t\nMHD_str_pct_decode_in_place_strict_ (char *str)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t res;\n  bool broken;\n\n  res = MHD_str_pct_decode_in_place_lenient_ (str, &broken);\n  if (broken)\n  {\n    res = 0;\n    str[0] = 0;\n  }\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n        return 0;\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n          return 0;\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n            return 0;\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n        }\n      }\n    }\n    else\n      str[w++] = chr;\n  }\n  str[w] = 0;\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n```\n</target_code>\nPlease provide the modified MHD_str_pct_decode_in_place_strict_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append logs to the requested file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1552.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function with probes inserted to capture control flow and state. */\nsize_t\nMHD_str_pct_decode_in_place_strict_ (char *str)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t res;\n  bool broken;\n\n  probe_log(\"entry: MHD_FAVOR_SMALL_CODE branch called\");\n  res = MHD_str_pct_decode_in_place_lenient_ (str, &broken);\n  probe_log(\"after lenient decode: res=%zu, broken=%d\", res, broken);\n  if (broken)\n  {\n    probe_log(\"broken flag true: zeroing output and returning 0\");\n    res = 0;\n    str[0] = 0;\n  }\n  probe_log(\"exit: returning %zu\", res);\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n\n  probe_log(\"entry: non-small-code branch. starting decode\");\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    probe_log(\"loop: r=%zu, w=%zu, chr=0x%02x ('%c')\", r, w, (unsigned char)chr, (chr >= 32 && chr < 127) ? chr : '?');\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n      {\n        probe_log(\"early return: first hex digit (d1) is NUL at r=%zu\", r);\n        return 0;\n      }\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n        {\n          probe_log(\"early return: second hex digit (d2) is NUL at r=%zu\", r);\n          return 0;\n        }\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n\n          probe_log(\"parsed hex digits: d1='%c' (0x%02x), d2='%c' (0x%02x), h=%d, l=%d\",\n                    (d1 >= 32 && d1 < 127) ? d1 : '?', (unsigned char)d1,\n                    (d2 >= 32 && d2 < 127) ? d2 : '?', (unsigned char)d2,\n                    h, l);\n\n          if ((0 > h) || (0 > l))\n          {\n            probe_log(\"invalid hex digit value: h=%d, l=%d -> returning 0\", h, l);\n            return 0;\n          }\n\n          /* Preserve the original complex cast expression exactly as in the target\n             code, but compute intermediate values for logging so the probes can\n             capture how the nested casts transform the values. */\n          uint8_t cast_inner_h_uint = (uint8_t) ((unsigned int) h);\n          uint8_t cast_shifted_h = (uint8_t) (cast_inner_h_uint << 4);\n          uint8_t cast_inner_l_uint = (uint8_t) ((unsigned int) l);\n\n          probe_log(\"cast intermediates: ((unsigned int)h) -> 0x%02x, ((uint8_t)((unsigned int)h)) -> 0x%02x, shifted -> 0x%02x, ((uint8_t)((unsigned int)l)) -> 0x%02x\",\n                    (unsigned int)h, (unsigned int)cast_inner_h_uint, (unsigned int)cast_shifted_h, (unsigned int)cast_inner_l_uint);\n\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n\n          probe_log(\"computed out: 0x%02x (as unsigned char %u)\", (unsigned int)out, (unsigned int)out);\n\n          str[w++] = (char) out;\n          probe_log(\"w incremented to %zu, wrote byte 0x%02x\", w, (unsigned char) out);\n        }\n      }\n    }\n    else\n    {\n      str[w++] = chr;\n      probe_log(\"copied non-percent chr to output, w now %zu\", w);\n    }\n  }\n  str[w] = 0;\n  probe_log(\"done decoding: final length w=%zu\", w);\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n"
}