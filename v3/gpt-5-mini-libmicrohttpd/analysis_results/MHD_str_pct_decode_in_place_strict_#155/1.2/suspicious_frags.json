{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_str_pct_decode_in_place_strict_:\n```c\nsize_t\nMHD_str_pct_decode_in_place_strict_ (char *str)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t res;\n  bool broken;\n\n  res = MHD_str_pct_decode_in_place_lenient_ (str, &broken);\n  if (broken)\n  {\n    res = 0;\n    str[0] = 0;\n  }\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n        return 0;\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n          return 0;\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n            return 0;\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n        }\n      }\n    }\n    else\n      str[w++] = chr;\n  }\n  str[w] = 0;\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided code fragment. I checked for common vendor extensions that are explicitly documented as extensions, including: __attribute__ / __declspec, __asm / asm, __builtin_* intrinsics, typeof, statement-expressions ({ ... }) (GCC extension), inline assembly, long long (if treated as extension by some old compilers), compiler-specific keywords like __inline, __forceinline, or leading double-underscore identifiers that indicate extensions. The code only uses standard C constructs: preprocessor conditionals (MHD_FAVOR_SMALL_CODE), standard types (size_t, bool, uint8_t) which are from standard headers (stddef.h/stdbool.h/stdint.h) rather than compiler extensions, ordinary casts, and normal control flow. No vendor-specific pragmas or attributes are present. Therefore there are no code fragments that need investigation under MISRA C 2023 Rule 1.2."
}