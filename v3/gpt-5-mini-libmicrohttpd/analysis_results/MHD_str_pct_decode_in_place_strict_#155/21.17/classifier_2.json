{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_str_pct_decode_in_place_strict_:\n```c\nsize_t\nMHD_str_pct_decode_in_place_strict_ (char *str)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t res;\n  bool broken;\n\n  res = MHD_str_pct_decode_in_place_lenient_ (str, &broken);\n  if (broken)\n  {\n    res = 0;\n    str[0] = 0;\n  }\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n        return 0;\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n          return 0;\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n            return 0;\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n        }\n      }\n    }\n    else\n      str[w++] = chr;\n  }\n  str[w] = 0;\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstr[w] = 0;\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The assignment str[w] = 0 itself does not invoke any <string.h> function, and in the shown logic w is always <= r where r indexes the original NUL-terminated string. Therefore, when the caller provides a valid NUL-terminated buffer the write is within the original string bounds and does not violate MISRA C 2023 Rule 21.17. However, if the caller provides a buffer that is not NUL-terminated within its allocated size (for example an array of length N with no '\\0' in the first N bytes), the loop can read past the allocated object until a distant NUL is found and then str[w] = 0 can write beyond the allocated bounds. That caller-misuse scenario would result in an out-of-bounds access."
}