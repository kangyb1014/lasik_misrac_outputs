{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(hdr->value, \"close\", MHD_STATICSTR_LEN_(\"close\")) where hdr->value was explicitly null-terminated earlier (hdr->value[hdr->value_size] = 0). This uses memcmp to compare null-terminated strings, which violates MISRA C 2023 Rule 21.14. Replace with a string comparison function such as strcmp/strncmp (or otherwise compare raw non-null-terminated buffers) to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified del_response_header_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2208.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of del_response_header_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of del_response_header_connection:\n```c\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n    return MHD_NO;\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n    return MHD_NO;\n  if (0 == hdr->value_size)\n  {\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n  }\n  else\n  {\n    hdr->value[hdr->value_size] = 0; /* Null-terminate the result */\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    }\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified del_response_header_connection code.\n",
  "test_code": "static void\nmhd_log_conn_debug(const char *note,\n                   struct MHD_Response *response,\n                   struct MHD_HTTP_Res_Header *hdr,\n                   const char *value,\n                   size_t cmp_len,\n                   int cmp_result)\n{\n  /* Log to a persistent file for later inspection. Open in append mode. */\n  FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"NOTE: %s\\n\", note ? note : \"(null)\");\n  fprintf(f, \"response=%p flags_auto=0x%llx\\n\",\n          (void *) response,\n          (unsigned long long) (response ? response->flags_auto : 0ULL));\n\n  if (NULL == hdr)\n  {\n    fprintf(f, \"hdr=NULL\\n\");\n  }\n  else\n  {\n    fprintf(f, \"hdr=%p header=%p value_ptr=%p value_size=%zu\\n\",\n            (void *) hdr, (void *) hdr->header, (void *) hdr->value,\n            (size_t) hdr->value_size);\n    if (hdr->value != NULL)\n    {\n      /* Print the buffer safely using a precision specifier; do not assume\n         it's NUL-terminated except we purposely limit to value_size. */\n      fprintf(f, \"value (len %zu): '%.*s'\\n\",\n              (size_t) hdr->value_size,\n              hdr->value_size > INT_MAX ? INT_MAX : (int) hdr->value_size,\n              hdr->value);\n    }\n  }\n\n  if (value != NULL)\n    fprintf(f, \"token_to_remove='%s' strlen=%zu\\n\", value, strlen(value));\n\n  if (cmp_len != 0)\n    fprintf(f, \"cmp_len=%zu cmp_result=%d\\n\", cmp_len, cmp_result);\n\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n  {\n    mhd_log_conn_debug(\"no connection header\", response, hdr, value, 0, 0);\n    return MHD_NO;\n  }\n\n  mhd_log_conn_debug(\"before token removal\", response, hdr, value, 0, 0);\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n  {\n    mhd_log_conn_debug(\"token removal failed\", response, hdr, value, 0, 0);\n    return MHD_NO;\n  }\n\n  mhd_log_conn_debug(\"after token removal\", response, hdr, value, 0, 0);\n\n  if (0 == hdr->value_size)\n  {\n    mhd_log_conn_debug(\"value_size==0: removing header\", response, hdr, value, 0, 0);\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n  }\n  else\n  {\n    /* Null-terminate the result */\n    hdr->value[hdr->value_size] = 0;\n    mhd_log_conn_debug(\"after null-terminate\", response, hdr, value, 0, 0);\n\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        int cmp_r = memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n        mhd_log_conn_debug(\"cmp branch: exact 'close' length\",\n                           response, hdr, value,\n                           (size_t) MHD_STATICSTR_LEN_ (\"close\"), cmp_r);\n        if (0 != cmp_r)\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        int cmp_r = memcmp (hdr->value, \"close, \",\n                             MHD_STATICSTR_LEN_ (\"close, \"));\n        mhd_log_conn_debug(\"cmp branch: prefix 'close, '\",\n                           response, hdr, value,\n                           (size_t) MHD_STATICSTR_LEN_ (\"close, \"), cmp_r);\n        if (0 != cmp_r)\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n      {\n        mhd_log_conn_debug(\"cmp branch: other (shorter) value\", response, hdr, value, 0, 0);\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n    }\n  }\n\n  mhd_log_conn_debug(\"exit returning MHD_YES\", response, hdr, value, 0, 0);\n  return MHD_YES;\n}\n"
}