{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nIn del_response_header_connection, after null-terminating hdr->value (hdr->value[hdr->value_size] = 0), the code calls memcmp(hdr->value, \"close, \", MHD_STATICSTR_LEN_(\"close, \")). This uses memcmp to compare null-terminated strings (a string literal vs hdr->value), which violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified del_response_header_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2208.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of del_response_header_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of del_response_header_connection:\n```c\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n    return MHD_NO;\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n    return MHD_NO;\n  if (0 == hdr->value_size)\n  {\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n  }\n  else\n  {\n    hdr->value[hdr->value_size] = 0; /* Null-terminate the result */\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    }\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified del_response_header_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe logging helpers. These write append-only logs to /tmp/logs/2208.txt\n * They are intentionally simple so they can be used in the target environment.\n */\nstatic void\nprobe_log (const char *tag,\n           struct MHD_Response *response,\n           struct MHD_HTTP_Res_Header *hdr,\n           const char *value)\n{\n  FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[%s] response=%p hdr=%p value_param=%p value_str=\\\"%s\\\" hdr_value_size=%zu flags_auto=0x%lx\\n\",\n           tag,\n           (void *) response,\n           (void *) hdr,\n           (const void *) value,\n           (hdr && hdr->value) ? hdr->value : \"(null)\",\n           (hdr ? hdr->value_size : (size_t)0),\n           (unsigned long) (response ? response->flags_auto : 0UL));\n  fclose (f);\n}\n\nstatic void\nprobe_log_cmp (const char *tag,\n               struct MHD_Response *response,\n               struct MHD_HTTP_Res_Header *hdr,\n               const char *cmpstr,\n               size_t cmp_len,\n               int cmpres)\n{\n  FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[%s] cmpstr=\\\"%s\\\" cmp_len=%zu cmpres=%d hdr_value=\\\"%s\\\" hdr_value_size=%zu flags_auto=0x%lx\\n\",\n           tag,\n           cmpstr,\n           cmp_len,\n           cmpres,\n           (hdr && hdr->value) ? hdr->value : \"(null)\",\n           (hdr ? hdr->value_size : (size_t)0),\n           (unsigned long) (response ? response->flags_auto : 0UL));\n  fclose (f);\n}\n\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n\n  probe_log (\"entry_after_get\", response, hdr, value);\n\n  if (NULL == hdr)\n    return MHD_NO;\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n  {\n    probe_log (\"remove_tokens_failed\", response, hdr, value);\n    return MHD_NO;\n  }\n  if (0 == hdr->value_size)\n  {\n    probe_log (\"value_size_zero_before_remove\", response, hdr, value);\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n  }\n  else\n  {\n    /* Null-terminate the result */\n    hdr->value[hdr->value_size] = 0;\n\n    probe_log (\"after_null_term\", response, hdr, value);\n\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        /* Call memcmp once and record result for logging without changing logic */\n        int cmp = memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n        probe_log_cmp (\"cmp_close\", response, hdr, \"close\",\n                       (size_t) MHD_STATICSTR_LEN_ (\"close\"), cmp);\n        if (0 != cmp)\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        /* This is the reported violation scenario: memcmp comparing null-terminated strings */\n        int cmp = memcmp (hdr->value, \"close, \",\n                          MHD_STATICSTR_LEN_ (\"close, \"));\n        probe_log_cmp (\"cmp_close_comma\", response, hdr, \"close, \",\n                       (size_t) MHD_STATICSTR_LEN_ (\"close, \"), cmp);\n        if (0 != cmp)\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    }\n  }\n  probe_log (\"exit\", response, hdr, value);\n  return MHD_YES;\n}\n"
}