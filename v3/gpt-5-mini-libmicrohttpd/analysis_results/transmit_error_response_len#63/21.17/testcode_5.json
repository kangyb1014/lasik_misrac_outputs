{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe logging call passes 'message' (a buffer with an associated length parameter) to a formatted %s conversion. If 'message' is not NUL-terminated (the function receives message_len separately and later treats the buffer as length-delimited), the formatting/logging implementation will read the buffer as a C string (e.g. calling strlen or otherwise scanning for '\\0') and thus perform accesses beyond the buffer bounds. If the logging macro/function uses any <string.h> functions (for example strlen/strcpy) internally to handle the %s argument, those calls can read past the object referenced by 'message'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified transmit_error_response_len code that contains useful probe functions that print useful logs to a file \"/tmp/logs/639.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of transmit_error_response_len as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of transmit_error_response_len:\n```c\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n}\n```\n</target_code>\nPlease provide the modified transmit_error_response_len code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Probe logging helper: write state to /tmp/logs/639.txt without treating\n * 'message' as a NUL-terminated string. All inspections of 'message' are\n * performed using the explicit message_len parameter. */\nstatic void\nprobe_log_state (const char *event,\n                 struct MHD_Connection *connection,\n                 unsigned int status_code,\n                 const char *message,\n                 size_t message_len,\n                 char *header_name,\n                 size_t header_name_len,\n                 char *header_value,\n                 size_t header_value_len)\n{\n  FILE *f = fopen (\"/tmp/logs/639.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"=== EVENT: %s ===\\n\", event ? event : \"(null)\");\n  fprintf (f, \"connection=%p\\n\", (void *) connection);\n  /* Print some known connection fields used in the function (safe as the\n   * original code used them). Print as integers to avoid format issues. */\n  fprintf (f, \" state=%d stop_with_error=%d discard_request=%d in_access_handler=%d keepalive=%d\\n\",\n           (int) connection->state,\n           (int) connection->stop_with_error,\n           (int) connection->discard_request,\n           (int) connection->in_access_handler,\n           (int) connection->keepalive);\n  fprintf (f, \"status_code=%u\\n\", status_code);\n  fprintf (f, \"message_ptr=%p message_len=%zu\\n\",\n           (const void *) message, message_len);\n  fprintf (f, \"header_name_ptr=%p header_name_len=%zu\\n\",\n           (void *) header_name, header_name_len);\n  fprintf (f, \"header_value_ptr=%p header_value_len=%zu\\n\",\n           (void *) header_value, header_value_len);\n\n  /* Check whether the message buffer contains a NUL byte within the\n   * explicit bounds (message_len). This is the critical check for the\n   * violation scenario: formatting with \"%s\" would read beyond the\n   * buffer if there is no NUL inside message_len. */\n  size_t i;\n  ssize_t nul_index = -1;\n  for (i = 0; i < message_len; ++i)\n  {\n    if (message[i] == '\\0')\n    {\n      nul_index = (ssize_t) i;\n      break;\n    }\n  }\n  if (nul_index >= 0)\n    fprintf (f, \"NUL_FOUND_AT=%zd (within message_len)\\n\", nul_index);\n  else\n    fprintf (f, \"NUL_FOUND_AT=NONE within message_len (no NUL in bounded buffer)\\n\");\n\n  /* Dump a hex + ASCII preview of the message buffer up to a reasonable\n   * limit to avoid huge log entries. This uses message_len directly and\n   * does not rely on NUL termination. */\n  size_t dump_len = message_len;\n  const size_t max_dump = 256;\n  if (dump_len > max_dump)\n    dump_len = max_dump;\n  fprintf (f, \"message_dump_len=%zu\\n\", dump_len);\n  if (dump_len > 0)\n  {\n    fprintf (f, \"message_hex=\");\n    for (i = 0; i < dump_len; ++i)\n      fprintf (f, \"%02x\", (unsigned char) message[i]);\n    fprintf (f, \"\\n\");\n\n    fprintf (f, \"message_ascii=\");\n    for (i = 0; i < dump_len; ++i)\n    {\n      unsigned char c = (unsigned char) message[i];\n      if (c >= 32 && c <= 126)\n        fputc (c, f);\n      else\n        fputc ('.', f);\n    }\n    fprintf (f, \"\\n\");\n  }\n\n  fprintf (f, \"=== END EVENT: %s ===\\n\\n\", event ? event : \"(null)\");\n  fclose (f);\n}\n\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  /* Log entry into the function and initial parameter/state snapshot. */\n  probe_log_state (\"entry\",\n                   connection,\n                   status_code,\n                   message,\n                   message_len,\n                   header_name,\n                   header_name_len,\n                   header_value,\n                   header_value_len);\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    probe_log_state (\"early_return_already_stopped\",\n                     connection,\n                     status_code,\n                     message,\n                     message_len,\n                     header_name,\n                     header_name_len,\n                     header_value,\n                     header_value_len);\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  /* Probe just before the logging call that previously used a formatted\n   * \"%s\" conversion on 'message'. We capture the buffer contents and\n   * NUL presence to allow reproducing the violation scenario. */\n  probe_log_state (\"before_MHD_DLOG_initial\",\n                   connection,\n                   status_code,\n                   message,\n                   message_len,\n                   header_name,\n                   header_name_len,\n                   header_value,\n                   header_value_len);\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    probe_log_state (\"before_MHD_DLOG_too_late\",\n                     connection,\n                     status_code,\n                     message,\n                     message_len,\n                     header_name,\n                     header_name_len,\n                     header_value,\n                     header_value_len);\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n\n  /* Log just before calling MHD_create_response_from_buffer_static so the\n   * exact pointer and length passed are captured. */\n  probe_log_state (\"before_MHD_create_response_from_buffer_static\",\n                   connection,\n                   status_code,\n                   message,\n                   message_len,\n                   header_name,\n                   header_name_len,\n                   header_value,\n                   header_value_len);\n\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n\n  /* Log result of create: response pointer and whether message contained a\n   * NUL within the provided length. */\n  probe_log_state (\"after_MHD_create_response_from_buffer_static\",\n                   connection,\n                   status_code,\n                   message,\n                   message_len,\n                   header_name,\n                   header_name_len,\n                   header_value,\n                   header_value_len);\n\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    probe_log_state (\"before_MHD_DLOG_failed_create_response\",\n                     connection,\n                     status_code,\n                     message,\n                     message_len,\n                     header_name,\n                     header_name_len,\n                     header_value,\n                     header_value_len);\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n\n    /* Log just before queuing the response. */\n    probe_log_state (\"before_MHD_queue_response\",\n                     connection,\n                     status_code,\n                     message,\n                     message_len,\n                     header_name,\n                     header_name_len,\n                     header_value,\n                     header_value_len);\n\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n\n    /* Log after queue attempt. */\n    probe_log_state (\"after_MHD_queue_response\",\n                     connection,\n                     status_code,\n                     message,\n                     message_len,\n                     header_name,\n                     header_name_len,\n                     header_value,\n                     header_value_len);\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n\n  /* Log before building header response. */\n  probe_log_state (\"before_build_header_response\",\n                   connection,\n                   status_code,\n                   message,\n                   message_len,\n                   header_name,\n                   header_name_len,\n                   header_value,\n                   header_value_len);\n\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n\n  /* Final log before exit */\n  probe_log_state (\"exit\",\n                   connection,\n                   status_code,\n                   message,\n                   message_len,\n                   header_name,\n                   header_name_len,\n                   header_value,\n                   header_value_len);\n}\n"
}