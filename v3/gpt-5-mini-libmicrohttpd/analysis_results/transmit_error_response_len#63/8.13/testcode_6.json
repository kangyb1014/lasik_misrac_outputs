{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameters header_name and header_value are declared as char * but in this function they are only inspected (e.g. by the assertion) and not modified. According to MISRA C 2023 Rule 8.13 they should be const-qualified (const char *) when possible \u2014 e.g. if they point to immutable string data or are only read. Thus the use of non-const pointers here violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified transmit_error_response_len code that contains useful probe functions that print useful logs to a file \"/tmp/logs/633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of transmit_error_response_len as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of transmit_error_response_len:\n```c\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n}\n```\n</target_code>\nPlease provide the modified transmit_error_response_len code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Probe logging helper. Appends human-readable trace to /tmp/logs/633.txt. */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *fp = fopen (\"/tmp/logs/633.txt\", \"a\");\n  if (NULL == fp)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (fp, fmt, ap);\n  fprintf (fp, \"\\n\");\n  va_end (ap);\n  fclose (fp);\n}\n\nstatic void\nmhd_log_buf (const char *label, const char *buf, size_t len)\n{\n  FILE *fp = fopen (\"/tmp/logs/633.txt\", \"a\");\n  if (NULL == fp)\n    return;\n  if (NULL == buf)\n    fprintf (fp, \"%s: (null)\\n\", label);\n  else if (len == 0)\n    fprintf (fp, \"%s: (empty, len=0) ptr=%p\\n\", label, (const void *) buf);\n  else\n  {\n    /* Print up to a reasonable amount to avoid huge logs */\n    size_t show = (len > 256u) ? 256u : len;\n    fprintf (fp, \"%s: ptr=%p len=%zu (showing %zu bytes): \", label, (const void *) buf, len, show);\n    fwrite (buf, 1, show, fp);\n    if (len > show)\n      fprintf (fp, \"...(truncated)\");\n    fprintf (fp, \"\\n\");\n  }\n  fclose (fp);\n}\n\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_log_probe (\"enter transmit_error_response_len: conn=%p status=%u message=%p message_len=%zu header_name=%p header_name_len=%zu header_value=%p header_value_len=%zu\",\n                 (void *) connection,\n                 status_code,\n                 (const void *) message,\n                 message_len,\n                 (void *) header_name,\n                 header_name_len,\n                 (void *) header_value,\n                 header_value_len);\n  if (message != NULL && message_len > 0)\n    mhd_log_buf (\"message\", message, message_len);\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    mhd_log_probe (\"early-return: connection->stop_with_error is true, state=%d\", connection->state);\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    mhd_log_probe (\"freed header_name and header_value before returning (stop_with_error)\");\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n  mhd_log_probe (\"marked stop_with_error and discard_request (state now=%d)\", connection->state);\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    mhd_log_probe (\"too-late branch: state=%d, closing connection for error response\", connection->state);\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    mhd_log_probe (\"freed header_name and header_value before returning (too late)\");\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  mhd_log_probe (\"set connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED (%d)\", connection->state);\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    mhd_log_probe (\"deallocating read_buffer: ptr=%p size=%zu offset=%zu\",\n                   (void *) connection->read_buffer,\n                   connection->read_buffer_size,\n                   connection->read_buffer_offset);\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    mhd_log_probe (\"destroying existing rp.response=%p\", (void *) connection->rp.response);\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    mhd_log_probe (\"MHD_create_response_from_buffer_static returned NULL (message_len=%zu)\", message_len);\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    mhd_log_probe (\"freed header_name and header_value before returning (no response)\");\n    return;\n  }\n  mhd_log_probe (\"created response=%p\", (void *) response);\n  mhd_log_probe (\"assert checks for headers: header_name=%p header_name_len=%zu header_value=%p header_value_len=%zu\",\n                 (void *) header_name, header_name_len, (void *) header_value, header_value_len);\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    mhd_log_buf (\"header_name\", header_name, header_name_len);\n    mhd_log_buf (\"header_value\", header_value, header_value_len);\n\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    mhd_log_probe (\"MHD_add_response_entry_no_alloc_ returned iret=%d\", (int) iret);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n      mhd_log_probe (\"MHD_add_response_entry_no_alloc_ failed, freed header_name and header_value\");\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    mhd_log_probe (\"queueing response: before in_access_handler=%d\", (int) before);\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n    mhd_log_probe (\"after queue_response: iret=%d in_access_handler restored to=%d\", (int) iret, (int) before);\n  }\n  MHD_destroy_response (response);\n  mhd_log_probe (\"destroyed local response object\");\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    mhd_log_probe (\"failed to queue response (iret == MHD_NO), closing connection\");\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  mhd_log_probe (\"set keepalive=MHD_CONN_MUST_CLOSE\");\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    mhd_log_probe (\"build_header_response failed first attempt, releasing buffers and retrying\");\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      mhd_log_probe (\"build_header_response failed second attempt, closing connection\");\n      return;\n    }\n    mhd_log_probe (\"build_header_response retry succeeded\");\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n  mhd_log_probe (\"exit transmit_error_response_len: connection->state set to MHD_CONNECTION_HEADERS_SENDING (%d)\", connection->state);\n}\n"
}