{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_timeout_millisec_:\n```c\nstatic int64_t\nget_timeout_millisec_ (struct MHD_Daemon *daemon,\n                       int32_t max_timeout)\n{\n  uint64_t d_timeout;\n  mhd_assert (0 <= max_timeout || -1 == max_timeout);\n  if (0 == max_timeout)\n    return 0;\n\n  if (MHD_NO == MHD_get_timeout64 (daemon, &d_timeout))\n    return max_timeout;\n\n  if ((0 < max_timeout) && ((uint64_t) max_timeout < d_timeout))\n    return max_timeout;\n\n  if (INT64_MAX <= d_timeout)\n    return INT64_MAX;\n\n  return (int64_t) d_timeout;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No language/compiler extensions are used in the provided code fragment. Reasons:\n- int64_t, int32_t and uint64_t are standard fixed-width integer types from ISO C (C99 stdint.h), not compiler extensions.\n- The casts ((uint64_t) max_timeout) and (int64_t) d_timeout are standard C casts.\n- Use of static linkage, struct parameter (struct MHD_Daemon *), integer literals (0, -1), and return statements are standard C.\n- INT64_MAX is the standard limit macro for int64_t (from stdint.h/limits), not an extension.\n- Identifiers such as mhd_assert, MHD_get_timeout64 and MHD_NO are user/library macros or functions; their use here does not itself constitute a language extension. Their definitions are not shown \u2014 if those macro/function definitions (outside this snippet) contain compiler-specific extensions (for example, __attribute__, asm, typeof, statement-expressions, or other vendor-specific keywords), those should be reported, but they are not present in the shown code.\n\nTherefore, based on the visible code alone, there are no explicit compiler language extensions to report for MISRA C 2023 Rule 1.2."
}