{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_timeout_millisec_:\n```c\nstatic int64_t\nget_timeout_millisec_ (struct MHD_Daemon *daemon,\n                       int32_t max_timeout)\n{\n  uint64_t d_timeout;\n  mhd_assert (0 <= max_timeout || -1 == max_timeout);\n  if (0 == max_timeout)\n    return 0;\n\n  if (MHD_NO == MHD_get_timeout64 (daemon, &d_timeout))\n    return max_timeout;\n\n  if ((0 < max_timeout) && ((uint64_t) max_timeout < d_timeout))\n    return max_timeout;\n\n  if (INT64_MAX <= d_timeout)\n    return INT64_MAX;\n\n  return (int64_t) d_timeout;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No controlling expressions in this function are invariant. Explanation by fragment:\n\n- mhd_assert (0 <= max_timeout || -1 == max_timeout);\n  - This is an assertion macro, not a controlling expression for selection/iteration in the function. Even if it expands to an if/abort in some builds, it depends on the runtime value of max_timeout and therefore is not an invariant expression. In release builds the macro typically compiles away, so it cannot produce an invariant controlling expression here.\n\n- if (0 == max_timeout)\n  - Depends on the runtime parameter max_timeout; not invariant.\n\n- if (MHD_NO == MHD_get_timeout64 (daemon, &d_timeout))\n  - The call to MHD_get_timeout64 is a runtime function call whose return value is not a compile-time constant. The controlling expression is not invariant.\n\n- if ((0 < max_timeout) && ((uint64_t) max_timeout < d_timeout))\n  - Both max_timeout and d_timeout are runtime values (d_timeout is set by the preceding function call). The conjunction is not a constant expression.\n\n- if (INT64_MAX <= d_timeout)\n  - d_timeout is a runtime value (uint64_t); the comparison against the constant INT64_MAX is not an invariant.\n\nNo loops are present except implicit function flow; none of the conditional controlling expressions are constant/invariant, and the two permitted exceptions (infinite loops and the do-while integer-constant false case) are not applicable. Therefore there are no code fragments that need investigation for Rule 14.3 in this function."
}