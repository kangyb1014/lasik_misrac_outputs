{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_timeout_millisec_:\n```c\nstatic int64_t\nget_timeout_millisec_ (struct MHD_Daemon *daemon,\n                       int32_t max_timeout)\n{\n  uint64_t d_timeout;\n  mhd_assert (0 <= max_timeout || -1 == max_timeout);\n  if (0 == max_timeout)\n    return 0;\n\n  if (MHD_NO == MHD_get_timeout64 (daemon, &d_timeout))\n    return max_timeout;\n\n  if ((0 < max_timeout) && ((uint64_t) max_timeout < d_timeout))\n    return max_timeout;\n\n  if (INT64_MAX <= d_timeout)\n    return INT64_MAX;\n\n  return (int64_t) d_timeout;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (0 <= max_timeout || -1 == max_timeout);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The mhd_assert call is not inherently dead: if the assertion can fail it changes behaviour (abort or diagnostic), so its removal would affect program behaviour. Therefore the fragment does not automatically violate MISRA C 2023 Rule 2.2. However, a violation scenario exists: if the asserted condition is provably always true (i.e. the invariant is guaranteed by the surrounding code or static analysis) and the assertion is executed, then it is dead code because removing it would not affect behaviour. Conversely, if mhd_assert is compiled out in all production builds (expands to ((void)0)) then it is not executed and so not \"dead code\" per the Rule definition. In short: not inherently violated; violation occurs only when the assertion is executed but provably redundant."
}