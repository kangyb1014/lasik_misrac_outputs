{
  "user_message": "An agent A claimed that the following answer_shared_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_shared_response.\n```c\nstatic enum MHD_Result\nanswer_shared_response (void *cls,\n                        struct MHD_Connection *connection,\n                        const char *url,\n                        const char *method,\n                        const char *version,\n                        const char *upload_data,\n                        size_t *upload_data_size,\n                        void **req_cls)\n{\n  static int marker = 0;\n  unsigned int resp_index;\n  static volatile unsigned int last_index = 0;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n  /* This kind of operation does not guarantee that numbers are not reused\n     in parallel threads, when processed simultaneously, but this should not\n     be a big problem, as it just slow down replies a bit due to\n     responses locking. */\n  resp_index = (last_index++) % num_resps;\n  return MHD_queue_response (connection, MHD_HTTP_OK, resps[resp_index]);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter is declared as size_t *upload_data_size but the function does not modify the pointed-to object (it casts it to void: (void) upload_data_size). According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so this parameter could be declared const size_t *upload_data_size. The current non-const declaration therefore violates Rule 8.13 unless an external API signature forces the non-const type (in which case the violation is caused by the need to match that API).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct in this context. MISRA C:2023 Rule 8.13 indeed recommends that pointers point to const-qualified types when possible, but that guidance is subject to practical constraints such as matching an external API. answer_shared_response implements a callback with a signature defined by the libmicrohttpd API (the upload_data_size parameter is declared as size_t * in that API). Because the function must match that external interface, the parameter cannot be changed to const size_t * without breaking the required prototype. The code explicitly marks the parameter unused ((void) upload_data_size), which documents that this implementation does not modify it; this is an acceptable approach when the declaration is dictated by an external API. Therefore there is no MISRA violation here attributable to Rule 8.13."
}