{
  "user_message": "An agent A claimed that the following answer_shared_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_shared_response.\n```c\nstatic enum MHD_Result\nanswer_shared_response (void *cls,\n                        struct MHD_Connection *connection,\n                        const char *url,\n                        const char *method,\n                        const char *version,\n                        const char *upload_data,\n                        size_t *upload_data_size,\n                        void **req_cls)\n{\n  static int marker = 0;\n  unsigned int resp_index;\n  static volatile unsigned int last_index = 0;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n  /* This kind of operation does not guarantee that numbers are not reused\n     in parallel threads, when processed simultaneously, but this should not\n     be a big problem, as it just slow down replies a bit due to\n     responses locking. */\n  resp_index = (last_index++) % num_resps;\n  return MHD_queue_response (connection, MHD_HTTP_OK, resps[resp_index]);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe object 'marker' is declared as 'static int marker = 0;' but is only used/read via a pointer (its address is stored in *req_cls) and never modified. According to MISRA C 2023 Rule 8.13 it should be const-qualified (e.g. 'static const int marker = 0') so that pointers point to const-qualified data whenever possible. Thus the current declaration violates Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The local static object marker is only used as an opaque address (a cookie) and is never modified in the shown code, so it should be const-qualified per the intent of MISRA C:2023 Rule 8.13 (prefer pointing to const-qualified data when possible). Making it 'static const int marker = 0;' better expresses that it is immutable. Note that the MHD API uses void* (and req_cls is a void**), so you will still need the existing cast when storing the address (you would be discarding the const qualifier via that cast), but that is a consequence of the API; the object itself should nonetheless be const if it is not modified. Ensure no other code in the translation unit modifies marker before adopting the change."
}