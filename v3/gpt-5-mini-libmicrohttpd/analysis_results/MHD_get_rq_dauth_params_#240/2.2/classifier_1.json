{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_get_rq_dauth_params_:\n```c\nconst struct MHD_RqDAuth *\nMHD_get_rq_dauth_params_ (struct MHD_Connection *connection)\n{\n  struct _MHD_str_w_len h_auth_value;\n  struct MHD_RqDAuth *dauth;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n\n  if (connection->rq.dauth_tried)\n    return connection->rq.dauth;\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > connection->state)\n    return NULL;\n\n  if (! find_auth_rq_header_ (connection, MHD_AUTHTYPE_DIGEST, &h_auth_value))\n  {\n    connection->rq.dauth_tried = true;\n    connection->rq.dauth = NULL;\n    return NULL;\n  }\n\n  dauth =\n    (struct MHD_RqDAuth *)\n    MHD_connection_alloc_memory_ (connection, sizeof (struct MHD_RqDAuth));\n\n  if (NULL == dauth)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection's pool to allocate \" \\\n                 \"for Digest Authorization header parsing.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return NULL;\n  }\n\n  memset (dauth, 0, sizeof(struct MHD_RqDAuth));\n  if (parse_dauth_params (h_auth_value.str, h_auth_value.len, dauth))\n    connection->rq.dauth = dauth;\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The Digest Authorization client's header has \"\n                 \"incorrect format.\\n\"));\n#endif /* HAVE_MESSAGES */\n    connection->rq.dauth = NULL;\n    /* Memory in the pool remains allocated until next request */\n  }\n  connection->rq.dauth_tried = true;\n  return connection->rq.dauth;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The mhd_assert performs a runtime check that may change program behaviour (typically abort/log) if the condition fails. In this function the assertion is evaluated before the subsequent if that returns NULL when the condition is false, so removing the assertion could change behaviour in the case connection->state < MHD_CONNECTION_HEADERS_PROCESSED (assert may abort while the later code would return NULL). Therefore the assertion is not dead code and Rule 2.2 is not violated."
}