{
  "user_message": "An agent A claimed that the following add_response_header_connection code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of add_response_header_connection.\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to MHD_get_response_element_n_ is used only inside mhd_assert: mhd_assert (NULL == MHD_get_response_element_n_(response, MHD_HEADER_KIND, key, key_len));. If the assert macro is disabled in production builds (typical), this call (and the comparison) will be removed. The call appears to have no side-effects and exists purely for diagnostics; removing it would not change program behaviour (aside from timing/diagnostics). Therefore the executed operation is dead code and violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"a,b,c,d,e\")\nBRANCH: response has NO connection header; about to assert lookup (may be compiled out in production)\nSTATE: after assert (if present): hdr=(nil) already_has_close=0 flags_auto=0x0\nEXIT: inserted new header new_hdr=0x55798e9c5c00 value=\"a, b, c, d, e\"\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"i,k,l,m,n,o,p,close\")\nBRANCH: response has NO connection header; about to assert lookup (may be compiled out in production)\nSTATE: after assert (if present): hdr=(nil) already_has_close=0 flags_auto=0x0\nEXIT: inserted new header new_hdr=0x55798e9c5c70 value=\"close, i, k, l, m, n, o, p\"\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"1,2,3,4,5,6,7,close\")\nBRANCH: response has NO connection header; about to assert lookup (may be compiled out in production)\nSTATE: after assert (if present): hdr=(nil) already_has_close=0 flags_auto=0x0\nEXIT: inserted new header new_hdr=0x55798e9c5cb0 value=\"close, 1, 2, 3, 4, 5, 6, 7\"\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"8,9,close\")\nBRANCH: response has connection header; calling lookup\nTRACE: entering MHD_get_response_element_n_(response=0x55798e9c5820, kind=1, key=\"Connection\", key_len=10, flags_auto=0x3)\nTRACE: MHD_get_response_element_n_ returned 0x55798e9c5cb0\nSTATE: hdr=0x55798e9c5cb0 already_has_close=1 flags_auto=0x3\nEXIT: updated existing header hdr=0x55798e9c5cb0 new_value=\"close, 1, 2, 3, 4, 5, 6, 7, 8, 9\" flags_auto=0x3\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"10,12\")\nBRANCH: response has connection header; calling lookup\nTRACE: entering MHD_get_response_element_n_(response=0x55798e9c5820, kind=1, key=\"Connection\", key_len=10, flags_auto=0x3)\nTRACE: MHD_get_response_element_n_ returned 0x55798e9c5cb0\nSTATE: hdr=0x55798e9c5cb0 already_has_close=1 flags_auto=0x3\nEXIT: updated existing header hdr=0x55798e9c5cb0 new_value=\"close, 2, 4, 6, 8, 10, 12\" flags_auto=0x3\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"close\")\nBRANCH: response has connection header; calling lookup\nTRACE: entering MHD_get_response_element_n_(response=0x55798e9c5820, kind=1, key=\"Connection\", key_len=10, flags_auto=0x1)\nTRACE: MHD_get_response_element_n_ returned 0x55798e9c5cb0\nSTATE: hdr=0x55798e9c5cb0 already_has_close=0 flags_auto=0x1\nEXIT: updated existing header hdr=0x55798e9c5cb0 new_value=\"close, 2, 4, 6\" flags_auto=0x3\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"close\")\nBRANCH: response has connection header; calling lookup\nTRACE: entering MHD_get_response_element_n_(response=0x55798e9c5820, kind=1, key=\"Connection\", key_len=10, flags_auto=0x3)\nTRACE: MHD_get_response_element_n_ returned 0x55798e9c5cb0\nSTATE: hdr=0x55798e9c5cb0 already_has_close=1 flags_auto=0x3\nEXIT: already_has_close true; nothing to modify\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"close\")\nBRANCH: response has NO connection header; about to assert lookup (may be compiled out in production)\nSTATE: after assert (if present): hdr=(nil) already_has_close=0 flags_auto=0x0\nEXIT: inserted new header new_hdr=0x55798e9c5d10 value=\"close\"\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"close\")\nBRANCH: response has connection header; calling lookup\nTRACE: entering MHD_get_response_element_n_(response=0x55798e9c5820, kind=1, key=\"Connection\", key_len=10, flags_auto=0x3)\nTRACE: MHD_get_response_element_n_ returned 0x55798e9c5d10\nSTATE: hdr=0x55798e9c5d10 already_has_close=1 flags_auto=0x3\nEXIT: already_has_close true; nothing to modify\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"close,other-token\")\nBRANCH: response has NO connection header; about to assert lookup (may be compiled out in production)\nSTATE: after assert (if present): hdr=(nil) already_has_close=0 flags_auto=0x0\nEXIT: inserted new header new_hdr=0x55798e9c5d50 value=\"close, other-token\"\nENTRY: add_response_header_connection(response=0x55798e9c5820, value=\"close, new-token\")\nBRANCH: \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA 2.2 forbids executed operations whose removal would not affect program behaviour. The call to MHD_get_response_element_n_ in the else-branch appears only inside mhd_assert, so it may be omitted in builds where assertions are disabled; that alone does not make it \"dead code\" under the rule because (a) it is executed in assertion-enabled builds and its removal in those builds would change behaviour (assert diagnostics and possibly program termination/timing), and (b) the rule\u2019s notion of behaviour includes timing/diagnostics (see note 1), so removing a diagnostic check can change observable behaviour. In short, the expression inside mhd_assert is not an executed, redundant operation in all builds \u2014 it is an active diagnostic in debug/assert builds \u2014 therefore it is not a MISRA 2.2 violation. (Also the function is used elsewhere in the function when response->flags_auto indicates a connection header, so the operation is not purely a no-op in the project.)"
}