{
  "user_message": "An agent A claimed that the following add_response_header_connection code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of add_response_header_connection.\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe mhd_assert call is used solely to check an invariant and has no side effects; in production builds the mhd_assert macro is typically compiled out (e.g. expands to ((void)0) or nothing). The assert expression (buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1) is executed only for diagnostics and, when removed/compiled out, does not change normal program behaviour. Therefore the assertion constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nadd_response_header_connection: entry response=0x56059b334820 value=a,b,c,d,e\nadd_response_header_connection: no existing Connection header; hdr set to NULL, already_has_close=false\nold_value_len=0 (hdr=(nil))\nvalue_len=9\nnorm_len (initial)=14\nbuf_size=14 (old_value_len=0 + norm_len=14)\nmalloc succeeded: buf=0x56059b3348e0\nafter MHD_str_remove_token_caseless_: value_has_close=0, norm_len_s=13\nnorm_len (after removal)=13\nafter removing keep-alive: norm_len=13\nabout to assert position invariant: value_has_close=0 already_has_close=0 pos=0 old_value_len=0 norm_len=13\nafter adding new value tokens: pos=13\nfinal buffer (pos=13): a, b, c, d, e\ninserted new header: new_hdr=0x56059b334c00 header=Connection value=a, b, c, d, e flags_auto=0x1\nadd_response_header_connection: entry response=0x56059b334820 value=i,k,l,m,n,o,p,close\nadd_response_header_connection: no existing Connection header; hdr set to NULL, already_has_close=false\nold_value_len=0 (hdr=(nil))\nvalue_len=19\nnorm_len (initial)=29\nbuf_size=29 (old_value_len=0 + norm_len=29)\nmalloc succeeded: buf=0x56059b334c40\nafter MHD_str_remove_token_caseless_: value_has_close=1, norm_len_s=19\nnorm_len (after removal)=19\nafter removing keep-alive: norm_len=19\nadding close token: buf_size=29 old_value_len=0 norm_len=19\nafter inserting close: pos=5\nabout to assert position invariant: value_has_close=1 already_has_close=0 pos=7 old_value_len=0 norm_len=19\nafter adding new value tokens: pos=26\nfinal buffer (pos=26): close, i, k, l, m, n, o, p\ninserted new header: new_hdr=0x56059b334c70 header=Connection value=close, i, k, l, m, n, o, p flags_auto=0x3\nadd_response_header_connection: entry response=0x56059b334820 value=1,2,3,4,5,6,7,close\nadd_response_header_connection: no existing Connection header; hdr set to NULL, already_has_close=false\nold_value_len=0 (hdr=(nil))\nvalue_len=19\nnorm_len (initial)=29\nbuf_size=29 (old_value_len=0 + norm_len=29)\nmalloc succeeded: buf=0x56059b334c40\nafter MHD_str_remove_token_caseless_: value_has_close=1, norm_len_s=19\nnorm_len (after removal)=19\nafter removing keep-alive: norm_len=19\nadding close token: buf_size=29 old_value_len=0 norm_len=19\nafter inserting close: pos=5\nabout to assert position invariant: value_has_close=1 already_has_close=0 pos=7 old_value_len=0 norm_len=19\nafter adding new value tokens: pos=26\nfinal buffer (pos=26): close, 1, 2, 3, 4, 5, 6, 7\ninserted new header: new_hdr=0x56059b334cb0 header=Connection value=close, 1, 2, 3, 4, 5, 6, 7 flags_auto=0x3\nadd_response_header_connection: entry response=0x56059b334820 value=8,9,close\nflags_auto has CONNECTION_HDR, hdr=0x56059b334cb0, hdr->value=close, 1, 2, 3, 4, 5, 6, 7, hdr->value_size=26, already_has_close=1, memcmp_is_close=1\nadd_response_header_connection: asserting already_has_close == (0 == memcmp(...)) and hdr != NULL (original code asserts)\nold_value_len=28 (hdr=0x56059b334cb0)\nvalue_len=9\nnorm_len (initial)=14\nbuf_size=42 (old_value_len=28 + norm_len=14)\nmalloc succeeded: buf=0x56059b334c70\nafter MHD_str_remove_token_caseless_: value_has_close=1, norm_len_s=4\nnorm_len (after removal)=4\nafter removing keep-alive: norm_len=4\nadded old value: new pos=26\nabout to assert position invariant: value_has_close=1 already_has_close=1 pos=28 old_value_len=28 norm_len=4\nafter adding new value tokens: pos=32\nfinal buffer (pos=32): close, 1, 2, 3, 4, 5, 6, 7, 8, 9\nupdating existing header hdr=0x56059b334cb0 old_value=close, 1, 2, 3, 4, 5, 6, 7 old_size=26 -> new buf=0x56059b334c70 new_size=32\nupdated header done: hdr=0x56059b334cb0 new_value=close, 1, 2, 3, 4, 5, 6, 7, 8, 9 new_size=32 flags_auto=0x3\nadd_response_header_connection: entry response=0x56059b334820 value=10,12\nflags_auto has CONNECTION_HDR, hdr=0x56059b334cb0, hdr->value=close, 2, 4, 6, 8, hdr->value_size=17, already_has_close=1, memcmp_is_close=1\nadd_response_header_connection: asserting already_has_close == (0 == memcmp(...)) and hdr != NULL (original code asserts)\nold_value_len=19 (hdr=0x56059b334cb0)\nvalue_len=5\nnorm_len (initial)=8\nbuf_size=27 (old_value_len=19 + norm_len=8)\nmalloc succeeded: buf=0x56059b334c40\nafter MHD_str_rem\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Agent A\u2019s argument rests on assuming that the mhd_assert macro is always compiled out and that the asserted expression has no effect; that assumption is not safe and, more importantly, it misreads the intent of MISRA Rule 2.2.\n\nWhy this is not a Rule 2.2 violation:\n- MISRA 2.2 forbids operations that are executed but whose removal would not affect program behaviour. An assertion macro is not intrinsically a side\u2011effect\u2011free no\u2011op: typical assert implementations perform diagnostics (logging, abort/terminate, hooks, etc.), and even if some builds omit the diagnostics, removal can change behaviour in the presence of an invariant violation (program termination versus continuing). Thus the assertion may affect program behaviour in some builds (and on error paths) and so is not necessarily \u201cdead code\u201d.\n- Even when an assert expression is side\u2011effect free, MISRA considers diagnostic checks significant because they can change behaviour (timing, error handling) and are intended to detect faults. The presence/absence of diagnostics can therefore change observable behaviour for some inputs, so the operation is not guaranteed to be removable without effect.\n- Finally, Rule 2.2 applies to the project as a whole. It is not sufficient to point to one compilation configuration where the macro expands to ((void)0). You must show that in all project configurations the operation is executed but removable without effect. That is not shown here.\n\nIf, however, the project defines mhd_assert as a compile\u2011time no\u2011op in all configurations and the asserted expression has no side effects and cannot influence timing or error handling in any build, a static analysis could flag that diagnostic code as unnecessary. But that is a different, build\u2011configuration specific situation and is not demonstrated by Agent A\u2019s scenario.\n\nConclusion: the claim that this particular mhd_assert constitutes dead code and therefore violates MISRA C 2023 Rule 2.2 is not correct based on the information given."
}