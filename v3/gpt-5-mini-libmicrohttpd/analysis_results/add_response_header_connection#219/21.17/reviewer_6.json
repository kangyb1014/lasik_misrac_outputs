{
  "user_message": "An agent A claimed that the following add_response_header_connection code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of add_response_header_connection.\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to strlen(value) can read past the bounds of the object referenced by value if the caller passes a NULL pointer or if value does not point to a NUL-terminated buffer. The function does not check value != NULL nor otherwise guarantee NUL-termination before calling strlen, so passing NULL or a non-terminated char array would cause strlen to access memory beyond the object.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[probe] entry: response=0x559dd6648820, value=0x559da7121101\n[probe] before_strchr: response=0x559dd6648820, value=0x559da7121101\n[probe] before_strlen: response=0x559dd6648820, value=0x559da7121101\n[probe] after_strlen: response=0x559dd6648820, value=0x559da7121101, value_len=9\n[probe] inserted_new_header: response=0x559dd6648820, value=0x559da7121101\n[probe] entry: response=0x559dd6648820, value=0x559da712118e\n[probe] before_strchr: response=0x559dd6648820, value=0x559da712118e\n[probe] before_strlen: response=0x559dd6648820, value=0x559da712118e\n[probe] after_strlen: response=0x559dd6648820, value=0x559da712118e, value_len=19\n[probe] inserted_new_header: response=0x559dd6648820, value=0x559da712118e\n[probe] entry: response=0x559dd6648820, value=0x559da7121240\n[probe] before_strchr: response=0x559dd6648820, value=0x559da7121240\n[probe] before_strlen: response=0x559dd6648820, value=0x559da7121240\n[probe] after_strlen: response=0x559dd6648820, value=0x559da7121240, value_len=19\n[probe] inserted_new_header: response=0x559dd6648820, value=0x559da7121240\n[probe] entry: response=0x559dd6648820, value=0x559da712126f\n[probe] before_strchr: response=0x559dd6648820, value=0x559da712126f\n[probe] before_strlen: response=0x559dd6648820, value=0x559da712126f\n[probe] after_strlen: response=0x559dd6648820, value=0x559da712126f, value_len=9\n[probe] updated_existing_header: response=0x559dd6648820, value=0x559da712126f\n[probe] entry: response=0x559dd6648820, value=0x559da712133c\n[probe] before_strchr: response=0x559dd6648820, value=0x559da712133c\n[probe] before_strlen: response=0x559dd6648820, value=0x559da712133c\n[probe] after_strlen: response=0x559dd6648820, value=0x559da712133c, value_len=5\n[probe] updated_existing_header: response=0x559dd6648820, value=0x559da712133c\n[probe] entry: response=0x559dd6648820, value=0x559da712195d\n[probe] before_strchr: response=0x559dd6648820, value=0x559da712195d\n[probe] before_strlen: response=0x559dd6648820, value=0x559da712195d\n[probe] after_strlen: response=0x559dd6648820, value=0x559da712195d, value_len=5\n[probe] updated_existing_header: response=0x559dd6648820, value=0x559da712195d\n[probe] entry: response=0x559dd6648820, value=0x559da712195d\n[probe] before_strchr: response=0x559dd6648820, value=0x559da712195d\n[probe] before_strlen: response=0x559dd6648820, value=0x559da712195d\n[probe] after_strlen: response=0x559dd6648820, value=0x559da712195d, value_len=5\n[probe] entry: response=0x559dd6648820, value=0x559da712195d\n[probe] before_strchr: response=0x559dd6648820, value=0x559da712195d\n[probe] before_strlen: response=0x559dd6648820, value=0x559da712195d\n[probe] after_strlen: response=0x559dd6648820, value=0x559da712195d, value_len=5\n[probe] inserted_new_header: response=0x559dd6648820, value=0x559da712195d\n[probe] entry: response=0x559dd6648820, value=0x559da712195d\n[probe] before_strchr: response=0x559dd6648820, value=0x559da712195d\n[probe] before_strlen: response=0x559dd6648820, value=0x559da712195d\n[probe] after_strlen: response=0x559dd6648820, value=0x559da712195d, value_len=5\n[probe] entry: response=0x559dd6648820, value=0x559da7121570\n[probe] before_strchr: response=0x559dd6648820, value=0x559da7121570\n[probe] before_strlen: response=0x559dd6648820, value=0x559da7121570\n[probe] after_strlen: response=0x559dd6648820, value=0x559da7121570, value_len=17\n[probe] inserted_new_header: response=0x559dd6648820, value=0x559da7121570\n[probe] entry: response=0x559dd6648820, value=0x559da7121595\n[probe] before_strchr: response=0x559dd6648820, value=0x559da7121595\n[probe] before_strlen: response=0x559dd6648820, value=0x559da7121595\n[probe] after_strlen: response=0x559dd6648820, value=0x559da7121595, value_len=16\n[probe] updated_existing_header: response=0x559dd6648820, value=0x559da7121595\n[probe] entry: response=0x559dd6648820, value=0x559da71215ed\n[probe] before_strchr: response=0x559dd6648820, value=0x559da71215ed\n[probe] before_strlen: response=0x559dd6648820, value=0x559da71215ed\n[probe] after_strlen: response=0x559dd6648820, value=0x559da71215ed, value_len=21\n[probe] inserted_new_header: response=0x\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The function calls string.h functions (strchr and strlen, later memmove/memcpy) on the pointer value without checking value != NULL or otherwise guaranteeing that value points to a NUL-terminated buffer. strchr(value, ...) is invoked immediately at the top, so a NULL value would cause undefined behaviour; likewise strlen(value) assumes a terminating '\\0' and would read beyond the object if the buffer isn't NUL-terminated. That is exactly the kind of out\u2011of\u2011bounds access that MISRA C 2023 Rule 21.17 forbids unless the precondition (non\u2011NULL, NUL\u2011terminated string) is externally guaranteed and documented. Because the function itself does not enforce or document such guarantees here, the reported violation is valid."
}