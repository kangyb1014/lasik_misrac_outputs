{
  "user_message": "An agent A claimed that the following add_response_header_connection code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_response_header_connection.\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code assigns malloc'd storage to new_hdr->header (used to hold the value copied from key, where key is declared as 'const char *'). new_hdr->header is apparently a non-const pointer (char *). Because the header text originates from a const-qualified source and is not intended to be modified, the pointer should be declared to point to a const-qualified type (e.g. 'const char *header') instead of 'char *'. The assignment 'new_hdr->header = malloc (key_len + 1);' therefore indicates a violation of MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER add_response_header_connection: response=0x556a85680820, value=0x556a5e606101, value_str=\"a,b,c,d,e\", key=0x7ff0da483cb2, key_str=\"Connection\", key_len=10\nNo existing header: hdr=NULL, already_has_close=false\nComputed lengths: value_len=9, old_value_len=0\nAllocating buf of size 14\nAfter remove_token: value_has_close=0, norm_len=13, buf+old_value_len=0x556a856808e0\nRemoving keep-alive tokens from normalized part at 0x556a856808e0\nAfter remove_tokens: norm_len=13\nAppended normalized tokens: norm_len=13, pos=13\nFinal assembled buf (size 14, used 13): a, b, c, d, e\nAllocated new_hdr=0x556a85680c00 (calloc)\nAllocated new_hdr->header (malloc) size=11 -> ptr=0x556a85680900\nCopied key into new_hdr->header: key_ptr=0x7ff0da483cb2 key_str=\"Connection\" key_len=10 new_hdr->header=0x556a85680900 header_str=\"Connection\"\nInserted new header: new_hdr=0x556a85680c00, header_size=10, value=0x556a856808e0, value_size=13, response->flags_auto=0x1\nENTER add_response_header_connection: response=0x556a85680820, value=0x556a5e60618e, value_str=\"i,k,l,m,n,o,p,close\", key=0x7ff0da483cb2, key_str=\"Connection\", key_len=10\nNo existing header: hdr=NULL, already_has_close=false\nComputed lengths: value_len=19, old_value_len=0\nAllocating buf of size 29\nAfter remove_token: value_has_close=1, norm_len=19, buf+old_value_len=0x556a85680c40\nRemoving keep-alive tokens from normalized part at 0x556a85680c40\nAfter remove_tokens: norm_len=19\nInserted 'close' token at start, pos now 5\nAppended normalized tokens: norm_len=19, pos=26\nFinal assembled buf (size 29, used 26): close, i, k, l, m, n, o, p\nAllocated new_hdr=0x556a85680c70 (calloc)\nAllocated new_hdr->header (malloc) size=11 -> ptr=0x556a85680900\nCopied key into new_hdr->header: key_ptr=0x7ff0da483cb2 key_str=\"Connection\" key_len=10 new_hdr->header=0x556a85680900 header_str=\"Connection\"\nInserted new header: new_hdr=0x556a85680c70, header_size=10, value=0x556a85680c40, value_size=26, response->flags_auto=0x3\nENTER add_response_header_connection: response=0x556a85680820, value=0x556a5e606240, value_str=\"1,2,3,4,5,6,7,close\", key=0x7ff0da483cb2, key_str=\"Connection\", key_len=10\nNo existing header: hdr=NULL, already_has_close=false\nComputed lengths: value_len=19, old_value_len=0\nAllocating buf of size 29\nAfter remove_token: value_has_close=1, norm_len=19, buf+old_value_len=0x556a85680c40\nRemoving keep-alive tokens from normalized part at 0x556a85680c40\nAfter remove_tokens: norm_len=19\nInserted 'close' token at start, pos now 5\nAppended normalized tokens: norm_len=19, pos=26\nFinal assembled buf (size 29, used 26): close, 1, 2, 3, 4, 5, 6, 7\nAllocated new_hdr=0x556a85680cb0 (calloc)\nAllocated new_hdr->header (malloc) size=11 -> ptr=0x556a85680900\nCopied key into new_hdr->header: key_ptr=0x7ff0da483cb2 key_str=\"Connection\" key_len=10 new_hdr->header=0x556a85680900 header_str=\"Connection\"\nInserted new header: new_hdr=0x556a85680cb0, header_size=10, value=0x556a85680c40, value_size=26, response->flags_auto=0x3\nENTER add_response_header_connection: response=0x556a85680820, value=0x556a5e60626f, value_str=\"8,9,close\", key=0x7ff0da483cb2, key_str=\"Connection\", key_len=10\nExisting header found: hdr=0x556a85680cb0, hdr->value=0x556a85680c40, hdr->value_size=26, already_has_close=1\nComputed lengths: value_len=9, old_value_len=28\nAllocating buf of size 42\nAfter remove_token: value_has_close=1, norm_len=4, buf+old_value_len=0x556a85680c8c\nRemoving keep-alive tokens from normalized part at 0x556a85680c8c\nAfter remove_tokens: norm_len=4\nAppended old header value: hdr->value=0x556a85680c40, hdr->value_size=26, pos=26\nAppended normalized tokens: norm_len=4, pos=32\nFinal assembled buf (size 42, used 32): close, 1, 2, 3, 4, 5, 6, 7, 8, 9\nUpdating existing header hdr=0x556a85680cb0: freeing old value 0x556a85680c40 and installing new buf 0x556a85680c70 (size 32)\nUpdated existing header hdr=0x556a85680cb0: value=0x556a85680c70, value_size=32, response->flags_auto=0x3\nENTER add_response_header_connection: response=0x556a85680820, value=0x556a5e60633c, value_str=\"10,12\", key=0x7ff0da483cb2, key_str=\"Connection\", key_len=10\nExis\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim cannot be confirmed from the snippet alone. MISRA C:2023 Rule 8.13 indeed recommends that pointers should point to const-qualified types when possible, but to demonstrate a violation you must show that the pointer could have been declared const without breaking the rest of the program. The report assumes the struct member new_hdr->header is declared as char * and that the pointed-at contents are never modified and not required by other code to be a modifiable pointer. However the provided code allocates mutable storage and copies into it, and we do not have the definition of struct MHD_HTTP_Res_Header nor the rest of the codebase to know whether hdr->header is later modified or used in contexts that require a non-const pointer (for example, passed to APIs that take char * or freed without a cast). If hdr->header is in fact modified elsewhere or used where a non-const pointer is required, declaring it const would be incorrect. Therefore, based on the available code and execution log, there is insufficient evidence to conclude a definite MISRA 8.13 violation. If, in the full codebase, hdr->header is never modified and is only used read-only, then the struct member should be const char * and the current declaration would be nonconforming; but that is not established here."
}