{
  "result": "success",
  "message": "add_response_header_connection: enter value='a,b,c,d,e'\nno existing header present\nvalue_len=9, old_value_len=0\nbuf_size=14, norm_len=14\nabout to evaluate controlling expression of 'if (1)' (invariant true) to introduce local scope\ninside local scope (if (1)): value_has_close=0, norm_len_s=13\nafter normalisation: norm_len=13\nadded new normalized tokens, pos=13\nfinal header string='a, b, c, d, e', final pos=13, buf_size=14\ninserted new header, value_has_close=0, flags_auto=0x1\nadd_response_header_connection: enter value='i,k,l,m,n,o,p,close'\nno existing header present\nvalue_len=19, old_value_len=0\nbuf_size=29, norm_len=29\nabout to evaluate controlling expression of 'if (1)' (invariant true) to introduce local scope\ninside local scope (if (1)): value_has_close=1, norm_len_s=19\nafter normalisation: norm_len=19\ninserted 'close' token: pos=5\nadded new normalized tokens, pos=26\nfinal header string='close, i, k, l, m, n, o, p', final pos=26, buf_size=29\ninserted new header, value_has_close=1, flags_auto=0x3\nadd_response_header_connection: enter value='1,2,3,4,5,6,7,close'\nno existing header present\nvalue_len=19, old_value_len=0\nbuf_size=29, norm_len=29\nabout to evaluate controlling expression of 'if (1)' (invariant true) to introduce local scope\ninside local scope (if (1)): value_has_close=1, norm_len_s=19\nafter normalisation: norm_len=19\ninserted 'close' token: pos=5\nadded new normalized tokens, pos=26\nfinal header string='close, 1, 2, 3, 4, 5, 6, 7', final pos=26, buf_size=29\ninserted new header, value_has_close=1, flags_auto=0x3\nadd_response_header_connection: enter value='8,9,close'\nexisting header present: already_has_close=1, hdr=0x55bae5d6fcb0\nvalue_len=9, old_value_len=28\nbuf_size=42, norm_len=14\nabout to evaluate controlling expression of 'if (1)' (invariant true) to introduce local scope\ninside local scope (if (1)): value_has_close=1, norm_len_s=4\nafter normalisation: norm_len=4\nadded old header tokens, pos=26\nadded new normalized tokens, pos=32\nfinal header string='close, 1, 2, 3, 4, 5, 6, 7, 8, 9', final pos=32, buf_size=42\nupdating existing header (hdr=0x55bae5d6fcb0)\nupdated existing header complete, flags_auto=0x3\nadd_response_header_connection: enter value='10,12'\nexisting header present: already_has_close=1, hdr=0x55bae5d6fcb0\nvalue_len=5, old_value_len=19\nbuf_size=27, norm_len=8\nabout to evaluate controlling expression of 'if (1)' (invariant true) to introduce local scope\ninside local scope (if (1)): value_has_close=0, norm_len_s=6\nafter normalisation: norm_len=6\nadded old header tokens, pos=17\nadded new normalized tokens, pos=25\nfinal header string='close, 2, 4, 6, 8, 10, 12', final pos=25, buf_size=27\nupdating existing header (hdr=0x55bae5d6fcb0)\nupdated existing header complete, flags_auto=0x3\nadd_response_header_connection: enter value='close'\nexisting header present: already_has_close=0, hdr=0x55bae5d6fcb0\nvalue_len=5, old_value_len=9\nbuf_size=17, norm_len=8\nabout to evaluate controlling expression of 'if (1)' (invariant true) to introduce local scope\ninside local scope (if (1)): value_has_close=1, norm_len_s=0\nafter normalisation: norm_len=0\ninserted 'close' token: pos=5\nadded old header tokens, pos=14\nfinal header string='close, 2, 4, 6', final pos=14, buf_size=17\nupdating existing header (hdr=0x55bae5d6fcb0)\nupdated existing header complete, flags_auto=0x3\nadd_response_header_connection: enter value='close'\nexisting header present: already_has_close=1, hdr=0x55bae5d6fcb0\nvalue_len=5, old_value_len=10\nbuf_size=18, norm_len=8\nabout to evaluate controlling expression of 'if (1)' (invariant true) to introduce local scope\ninside local scope (if (1)): value_has_close=1, norm_len_s=0\nafter normalisation: norm_len=0\n'close' already present - freeing buf and returning MHD_YES\nadd_response_header_connection: enter value='close'\nno existing header present\nvalue_len=5, old_value_len=0\nbuf_size=8, norm_len=8\nabout to evaluate controlling expression of 'if (1)' (invariant true) to introduce local scope\ninside local scope (if (1)): value_has_close=1, norm_len_s=0\nafter normalisation: norm_len=0\ninserted 'close' token"
}