{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_default_logger_:\n```c\nstatic void\nMHD_default_logger_ (void *cls,\n                     const char *fm,\n                     va_list ap)\n{\n  vfprintf ((FILE *) cls, fm, ap);\n#ifdef _DEBUG\n  fflush ((FILE *) cls);\n#endif /* _DEBUG */\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void\nMHD_default_logger_ (void *cls,\n                     const char *fm,\n                     va_list ap)\n{\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Cannot determine a violation from the fragment alone. The snippet is only a function header; there is no evidence here of an executed operation that could be removed without changing program behaviour. If the function is never called it is unreachable (note 2) not dead code. A concrete violation scenario would be: elsewhere in the project MHD_default_logger_ is called at runtime but its implementation has been compiled out or reduced to a no\u2011op (for example the body is removed by conditional compilation or replaced with an empty function), so the calls are executed but have no observable effect \u2014 that would violate Rule 2.2."
}