{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'daemon' is declared as 'struct MHD_Daemon *daemon = connection->daemon;' but in this function it is only used for read-only access (checking daemon->notify_completed, testing thread status via a macro, and reading notify_completed_cls). There are no modifications to the pointed-to MHD_Daemon object, so the pointer could and should be declared as 'const struct MHD_Daemon *daemon' to satisfy MISRA C 2023 Rule 8.13. (If any macros or called functions require a non-const pointer, that would be the only legitimate reason to keep it non-const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/13.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_close_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_close_:\n```c\nvoid\nMHD_connection_close_ (struct MHD_Connection *connection,\n                       enum MHD_RequestTerminationCode termination_code)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  struct MHD_Response *resp = connection->rp.response;\n\n  mhd_assert (! connection->suspended);\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n#endif /* MHD_USE_THREADS */\n  if ( (NULL != daemon->notify_completed) &&\n       (connection->rq.client_aware) )\n    daemon->notify_completed (daemon->notify_completed_cls,\n                              connection,\n                              &connection->rq.client_context,\n                              termination_code);\n  connection->rq.client_aware = false;\n  if (NULL != resp)\n  {\n    connection->rp.response = NULL;\n    MHD_destroy_response (resp);\n  }\n  if (NULL != connection->pool)\n  {\n    MHD_pool_destroy (connection->pool);\n    connection->pool = NULL;\n  }\n\n  MHD_connection_mark_closed_ (connection);\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_close_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe logging helper. Keeps the daemon parameter const to emphasize\n   that we only read from it in the probe. */\nstatic void\nMHD_connection_close_probe_log_ (const struct MHD_Connection *connection,\n                                const struct MHD_Daemon *daemon,\n                                struct MHD_Response *resp,\n                                enum MHD_RequestTerminationCode termination_code,\n                                const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/13.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[MHD_connection_close_] stage=%s\\n\", stage);\n  fprintf (f, \"  connection=%p\\n\", (void *) connection);\n  fprintf (f, \"  daemon=%p\\n\", (void *) daemon);\n  fprintf (f, \"  resp=%p\\n\", (void *) resp);\n  fprintf (f, \"  termination_code=%d\\n\", (int) termination_code);\n\n  /* Safely log known fields used by the function. If fields are not\n     available in some build, this probe relies on the same layout as\n     the original function. */\n  fprintf (f, \"  connection->rq.client_aware=%d\\n\",\n           (int) connection->rq.client_aware);\n\n  /* If daemon is present, log pointers relevant to notify callback. */\n  if (NULL != daemon)\n    {\n      fprintf (f, \"  daemon->notify_completed=%p\\n\",\n               (void *) daemon->notify_completed);\n      fprintf (f, \"  daemon->notify_completed_cls=%p\\n\",\n               (void *) daemon->notify_completed_cls);\n    }\n\n  fprintf (f, \"  connection->pool=%p\\n\", (void *) connection->pool);\n\n  fprintf (f, \"---\\n\");\n  fclose (f);\n}\n\nvoid\nMHD_connection_close_ (struct MHD_Connection *connection,\n                       enum MHD_RequestTerminationCode termination_code)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  struct MHD_Response *resp = connection->rp.response;\n\n  /* Log initial state right after extracting pointers. */\n  MHD_connection_close_probe_log_ (connection, daemon, resp,\n                                   termination_code, \"entry\");\n\n  mhd_assert (! connection->suspended);\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  /* If the thread check assertion passed, emit a log indicating the\n     code path reached thread-checked section. If the assertion fails\n     the program aborts and this log won't be produced, which is the\n     expected behavior. */\n  MHD_connection_close_probe_log_ (connection, daemon, resp,\n                                   termination_code, \"thread_check_passed\");\n#endif /* MHD_USE_THREADS */\n\n  if ( (NULL != daemon->notify_completed) &&\n       (connection->rq.client_aware) )\n    {\n      /* Log before invoking notify_completed. */\n      MHD_connection_close_probe_log_ (connection, daemon, resp,\n                                       termination_code, \"before_notify\");\n\n      daemon->notify_completed (daemon->notify_completed_cls,\n                                connection,\n                                &connection->rq.client_context,\n                                termination_code);\n\n      /* Log after notify_completed returns. */\n      MHD_connection_close_probe_log_ (connection, daemon, resp,\n                                       termination_code, \"after_notify\");\n    }\n  connection->rq.client_aware = false;\n  if (NULL != resp)\n  {\n    /* Log that we will destroy the response object and clear the\n       pointer. */\n    MHD_connection_close_probe_log_ (connection, daemon, resp,\n                                     termination_code, \"before_destroy_response\");\n\n    connection->rp.response = NULL;\n    MHD_destroy_response (resp);\n  }\n  if (NULL != connection->pool)\n  {\n    /* Log that we will destroy the pool. */\n    MHD_connection_close_probe_log_ (connection, daemon, resp,\n                                     termination_code, \"before_destroy_pool\");\n\n    MHD_pool_destroy (connection->pool);\n    connection->pool = NULL;\n  }\n\n  MHD_connection_mark_closed_ (connection);\n\n  /* Final log indicating connection was marked closed. */\n  MHD_connection_close_probe_log_ (connection, daemon, resp,\n                                   termination_code, \"end\");\n}\n"
}