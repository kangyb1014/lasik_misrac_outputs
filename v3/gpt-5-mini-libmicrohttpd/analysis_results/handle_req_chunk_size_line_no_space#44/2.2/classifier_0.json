{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of handle_req_chunk_size_line_no_space:\n```c\nstatic void\nhandle_req_chunk_size_line_no_space (struct MHD_Connection *c,\n                                     const char *chunk_size_line,\n                                     size_t chunk_size_line_size)\n{\n  unsigned int err_code;\n\n  if (NULL != chunk_size_line)\n  {\n    const char *semicol;\n    /* Check for chunk extension */\n    semicol = memchr (chunk_size_line, ';', chunk_size_line_size);\n    if (NULL != semicol)\n    { /* Chunk extension present. It could be removed without any loss of the\n         details of the request. */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      ERR_MSG_REQUEST_CHUNK_LINE_EXT_TOO_BIG);\n    }\n  }\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_BODY_CHUNKED,\n                                           chunk_size_line,\n                                           chunk_size_line_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_CHUNK_LINE_TOO_BIG);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nsemicol = memchr (chunk_size_line, ';', chunk_size_line_size);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The memchr call is used to detect a ';' in chunk_size_line and its result (semicol) controls a conditional that transmits a specific error response. Removing the memchr (and thus the conditional action) would change program behaviour because that early, distinct error transmission would not occur. Therefore the operation is not dead code and Rule 2.2 is not violated."
}