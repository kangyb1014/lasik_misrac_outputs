{
  "user_message": "An agent A claimed that the following handle_req_chunk_size_line_no_space code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_chunk_size_line_no_space.\n```c\nstatic void\nhandle_req_chunk_size_line_no_space (struct MHD_Connection *c,\n                                     const char *chunk_size_line,\n                                     size_t chunk_size_line_size)\n{\n  unsigned int err_code;\n\n  if (NULL != chunk_size_line)\n  {\n    const char *semicol;\n    /* Check for chunk extension */\n    semicol = memchr (chunk_size_line, ';', chunk_size_line_size);\n    if (NULL != semicol)\n    { /* Chunk extension present. It could be removed without any loss of the\n         details of the request. */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      ERR_MSG_REQUEST_CHUNK_LINE_EXT_TOO_BIG);\n    }\n  }\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_BODY_CHUNKED,\n                                           chunk_size_line,\n                                           chunk_size_line_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_CHUNK_LINE_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes chunk_size_line and chunk_size_line_size to get_no_space_err_status_code without ensuring the pointer is valid or that the size matches the actual object bounds. If chunk_size_line is NULL (or chunk_size_line_size is larger than the actual buffer) and get_no_space_err_status_code uses string.h functions (e.g. strlen, memchr, strcpy, memcpy) on that pointer/size, those functions can access memory beyond the object (or dereference NULL). For example, if chunk_size_line == NULL and the callee calls strlen(chunk_size_line) or memchr(chunk_size_line, ..., chunk_size_line_size), this causes undefined behavior and thus violates MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as written. MISRA 21.17 governs actual uses of the <string.h> routines such that those calls cannot access beyond the bounds of the referenced objects. In the shown function the only direct use of a <string.h> routine is memchr, and that call is protected by an explicit NULL check (if (NULL != chunk_size_line) { semicol = memchr(...); }), so this function itself does not invoke a string.h routine with a guaranteed-invalid pointer.\n\nAgent A\u2019s scenario is speculative: it assumes get_no_space_err_status_code will call string.h functions on a possibly-NULL or out-of-bounds pointer. If get_no_space_err_status_code does perform such unsafe uses then that callee would be the location of a MISRA 21.17 violation, not handle_req_chunk_size_line_no_space. The caller could, however, make its contract clearer (e.g. guarantee that chunk_size_line is non-NULL when chunk_size_line_size>0, or pass a size of 0 when pointer is NULL) or ensure the callee documents/validates its parameters. But on the basis of the code shown, there is no proven 21.17 violation in this function.\n\nRecommendation: verify the implementation (or contract) of get_no_space_err_status_code \u2014 it must validate its pointer/size parameters before using any <string.h> functions. Alternatively, change this function so it does not forward a potentially-NULL pointer with a non-zero size unless that is the intended contract."
}