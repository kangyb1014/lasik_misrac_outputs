{
  "user_message": "An agent A claimed that the following handle_req_chunk_size_line_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_chunk_size_line_no_space.\n```c\nstatic void\nhandle_req_chunk_size_line_no_space (struct MHD_Connection *c,\n                                     const char *chunk_size_line,\n                                     size_t chunk_size_line_size)\n{\n  unsigned int err_code;\n\n  if (NULL != chunk_size_line)\n  {\n    const char *semicol;\n    /* Check for chunk extension */\n    semicol = memchr (chunk_size_line, ';', chunk_size_line_size);\n    if (NULL != semicol)\n    { /* Chunk extension present. It could be removed without any loss of the\n         details of the request. */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      ERR_MSG_REQUEST_CHUNK_LINE_EXT_TOO_BIG);\n    }\n  }\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_BODY_CHUNKED,\n                                           chunk_size_line,\n                                           chunk_size_line_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_CHUNK_LINE_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct MHD_Connection *c' is not modified in handle_req_chunk_size_line_no_space \u2014 it is only passed to transmit_error_response_static and get_no_space_err_status_code. If those callees do not modify the connection, the pointer should be declared as pointing to a const-qualified type (const struct MHD_Connection *c). As written (non-const), this likely violates MISRA C 2023 Rule 8.13 unless the referenced callees require a non-const pointer.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not proven. MISRA C 2023 R8.13 advises using pointers to const where the pointed-to object is not modified, but whether the parameter should be const depends on how it is used across function boundaries. In handle_req_chunk_size_line_no_space the parameter c is not modified locally, but it is passed to transmit_error_response_static and get_no_space_err_status_code. If those callees require a non-const pointer (i.e. their prototypes take struct MHD_Connection *), then this function cannot safely change its parameter to const without changing the callees (or inserting a cast, which would itself need justification). Agent A\u2019s claim assumes the callees do not modify the connection but provides no evidence (no prototypes or source of those functions). Therefore you cannot conclude a MISRA violation from the snippet alone. Recommended action: inspect the prototypes of transmit_error_response_static and get_no_space_err_status_code \u2014 if they accept const struct MHD_Connection *, change this function\u2019s parameter to const; if they currently take non-const but do not actually modify the object, update those prototypes (and implementations) to const. Avoid adding casts that drop const qualification unless justified and documented."
}