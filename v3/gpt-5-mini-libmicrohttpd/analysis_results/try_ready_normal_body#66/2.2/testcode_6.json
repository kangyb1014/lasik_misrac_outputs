{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'mhd_assert(connection->rp.props.send_reply_body);' is a diagnostic assertion macro that typically expands to code only in debug builds and to nothing in release builds. When the asserted condition is true the call has no effect, so its execution can be removed without changing program behaviour \u2014 i.e. it constitutes dead code per MISRA C 2023 Rule 2.2. If the macro is compiled out (no-op) in some configurations the operation is effectively dead in the builds where it is present only for diagnostics.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_ready_normal_body code that contains useful probe functions that print useful logs to a file \"/tmp/logs/662.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_ready_normal_body as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_ready_normal_body:\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified try_ready_normal_body code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper. Writes a compact snapshot of connection/response\n * state and control flow annotations to /tmp/logs/662.txt. This is intended\n * only to aid reproduction/evidence gathering and preserves original logic. */\nstatic void\nmhd_probe_log_connection (const struct MHD_Connection *connection,\n                          const char *where)\n{\n  FILE *f = fopen(\"/tmp/logs/662.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"=== try_ready_normal_body: %s ===\\n\", where);\n  fprintf (f, \"connection=%p\\n\", (void *) connection);\n  if (NULL == connection)\n  {\n    fprintf (f, \"(null connection)\\n\\n\");\n    fclose (f);\n    return;\n  }\n  {\n    struct MHD_Response *response = connection->rp.response;\n    fprintf (f, \"rp.rsp_write_position=%llu\\n\",\n             (unsigned long long) connection->rp.rsp_write_position);\n    fprintf (f, \"rp.props.send_reply_body=%d\\n\",\n             (int) connection->rp.props.send_reply_body);\n    fprintf (f, \"rp.resp_sender=%p\\n\", (void *) connection->rp.resp_sender);\n    if (NULL == response)\n    {\n      fprintf (f, \"response=(null)\\n\\n\");\n      fclose (f);\n      return;\n    }\n    fprintf (f, \"response=%p total_size=%llu\\n\",\n             (void *) response,\n             (unsigned long long) response->total_size);\n    fprintf (f, \"response->data_iov=%p data_iovcnt=%zu\\n\",\n             (void *) response->data_iov,\n             (size_t) response->data_iovcnt);\n    fprintf (f, \"response->crc=%p\\n\", (void *) response->crc);\n    fprintf (f, \"response->data_start=%llu data_size=%zu data_buffer_size=%zu\\n\",\n             (unsigned long long) response->data_start,\n             (size_t) response->data_size,\n             (size_t) response->data_buffer_size);\n    fprintf (f, \"rp.resp_iov.iov=%p rp.resp_iov.cnt=%zu rp.resp_iov.sent=%zu\\n\",\n             (void *) connection->rp.resp_iov.iov,\n             (size_t) connection->rp.resp_iov.cnt,\n             (size_t) connection->rp.resp_iov.sent);\n  }\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log_event (const char *event)\n{\n  FILE *f = fopen(\"/tmp/logs/662.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf (f, \"event: %s\\n\\n\", event);\n  fclose (f);\n}\n\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  /* Log entry state */\n  mhd_probe_log_connection (connection, \"entry\");\n\n  response = connection->rp.response;\n  mhd_probe_log_event (\"before mhd_assert\");\n  mhd_assert (connection->rp.props.send_reply_body);\n  mhd_probe_log_event (\"after mhd_assert\");\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n  {\n    mhd_probe_log_event (\"early exit: 0-byte response or already written all bytes -> MHD_YES\");\n    mhd_probe_log_connection (connection, \"exit: early 0-byte/complete\");\n    return MHD_YES;  /* 0-byte response is always ready */\n  }\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n    {\n      mhd_probe_log_event (\"resp_iov already present -> MHD_YES\");\n      mhd_probe_log_connection (connection, \"exit: resp_iov exists\");\n      return MHD_YES;\n    }\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    mhd_probe_log_event (\"after alloc for resp_iov\");\n    mhd_probe_log_connection (connection, \"after alloc attempt\");\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      mhd_probe_log_event (\"alloc failed for resp_iov -> out of memory\");\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      mhd_probe_log_connection (connection, \"exit: alloc failed -> MHD_NO\");\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    mhd_probe_log_event (\"copied data_iov into resp_iov -> MHD_YES\");\n    mhd_probe_log_connection (connection, \"exit: populated resp_iov\");\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n  {\n    mhd_probe_log_event (\"no crc -> MHD_YES\");\n    mhd_probe_log_connection (connection, \"exit: no crc\");\n    return MHD_YES;\n  }\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n  {\n    mhd_probe_log_event (\"response already ready -> MHD_YES\");\n    mhd_probe_log_connection (connection, \"exit: already ready\");\n    return MHD_YES; /* response already ready */\n  }\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    mhd_probe_log_event (\"using sendfile -> MHD_YES\");\n    mhd_probe_log_connection (connection, \"exit: sendfile sender\");\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  mhd_probe_log_event (\"about to call response->crc\");\n  mhd_probe_log_connection (connection, \"before crc call\");\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  mhd_probe_log_event (\"returned from response->crc\");\n  {\n    FILE *f = fopen(\"/tmp/logs/662.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf (f, \"crc returned ret=%lld\\n\\n\", (long long) ret);\n      fclose (f);\n    }\n  }\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n    {\n      mhd_probe_log_event (\"crc indicated end of stream -> closing connection completed ok\");\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    }\n    else\n    {\n      mhd_probe_log_event (\"crc reported error generating data -> CONNECTION_CLOSE_ERROR\");\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    }\n    mhd_probe_log_connection (connection, \"exit: crc error -> MHD_NO\");\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    mhd_probe_log_event (\"crc returned 0 -> set state to UNREADY and MHD_NO\");\n    mhd_probe_log_connection (connection, \"exit: crc returned 0 -> MHD_NO\");\n    return MHD_NO;\n  }\n  mhd_probe_log_event (\"crc produced data -> MHD_YES\");\n  mhd_probe_log_connection (connection, \"exit: crc produced data -> MHD_YES\");\n  return MHD_YES;\n}\n"
}