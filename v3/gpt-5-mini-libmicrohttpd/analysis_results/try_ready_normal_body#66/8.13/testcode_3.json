{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code copies from response->data_iov as a read-only source (memcpy destination = connection->rp.resp_iov.iov, source = response->data_iov). If response->data_iov is declared as a non-const pointer (e.g. MHD_iovec_ *data_iov) but is only used for reading, it should be declared const (e.g. const MHD_iovec_ *data_iov). Therefore this usage indicates a violation of MISRA C 2023 Rule 8.13 unless response->data_iov is already declared const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_ready_normal_body code that contains useful probe functions that print useful logs to a file \"/tmp/logs/663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_ready_normal_body as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_ready_normal_body:\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified try_ready_normal_body code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logger: append textual logs to /tmp/logs/663.txt. */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/663.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  /* Log entry state */\n  probe_log (\"try_ready_normal_body: entry: connection=%p response=%p total_size=%llu rsp_write_position=%llu\",\n             (void *) connection,\n             (void *) response,\n             (unsigned long long) (response ? response->total_size : 0ULL),\n             (unsigned long long) connection->rp.rsp_write_position);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n  {\n    probe_log (\"try_ready_normal_body: returning MHD_YES (0-byte response or already fully written): total_size=%llu rsp_write_position=%llu\",\n               (unsigned long long) response->total_size,\n               (unsigned long long) connection->rp.rsp_write_position);\n    return MHD_YES;  /* 0-byte response is always ready */\n  }\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    probe_log (\"try_ready_normal_body: response->data_iov != NULL: data_iov=%p data_iovcnt=%zu sizeof(MHD_iovec_)=%zu\",\n               (void *) response->data_iov,\n               (size_t) response->data_iovcnt,\n               (size_t) sizeof (MHD_iovec_));\n\n    if (NULL != connection->rp.resp_iov.iov)\n    {\n      probe_log (\"try_ready_normal_body: resp_iov.iov already set (%p), returning MHD_YES\",\n                 (void *) connection->rp.resp_iov.iov);\n      return MHD_YES;\n    }\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    probe_log (\"try_ready_normal_body: allocating resp_iov.iov: size=%zu\",\n               copy_size);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    probe_log (\"try_ready_normal_body: after alloc resp_iov.iov=%p\",\n               (void *) connection->rp.resp_iov.iov);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      probe_log (\"try_ready_normal_body: allocation failed (out of memory) for size=%zu\", copy_size);\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      probe_log (\"try_ready_normal_body: returning MHD_NO (alloc failure)\");\n      return MHD_NO;\n    }\n\n    probe_log (\"try_ready_normal_body: about to memcpy dest=%p src=%p size=%zu\",\n               (void *) connection->rp.resp_iov.iov,\n               (void *) response->data_iov,\n               copy_size);\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    probe_log (\"try_ready_normal_body: memcpy completed dest=%p src=%p size=%zu\",\n               (void *) connection->rp.resp_iov.iov,\n               (void *) response->data_iov,\n               copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    probe_log (\"try_ready_normal_body: set resp_iov.cnt=%zu sent=%u returning MHD_YES\",\n               (size_t) connection->rp.resp_iov.cnt,\n               (unsigned) connection->rp.resp_iov.sent);\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n  {\n    probe_log (\"try_ready_normal_body: response->crc == NULL, returning MHD_YES\");\n    return MHD_YES;\n  }\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n  {\n    probe_log (\"try_ready_normal_body: response already ready (data_start=%llu data_size=%zu rsp_write_position=%llu), returning MHD_YES\",\n               (unsigned long long) response->data_start,\n               (size_t) response->data_size,\n               (unsigned long long) connection->rp.rsp_write_position);\n    return MHD_YES; /* response already ready */\n  }\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    probe_log (\"try_ready_normal_body: using sendfile sender, returning MHD_YES\");\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  probe_log (\"try_ready_normal_body: invoking response->crc: crc_cls=%p rsp_write_position=%llu data=%p data_buffer_size=%zu total_size=%llu\",\n             (void *) response->crc_cls,\n             (unsigned long long) connection->rp.rsp_write_position,\n             (void *) response->data,\n             (size_t) response->data_buffer_size,\n             (unsigned long long) response->total_size);\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  probe_log (\"try_ready_normal_body: response->crc returned %lld\",\n             (long long) ret);\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n    {\n      probe_log (\"try_ready_normal_body: crc signalled end of stream, closing connection completed ok\");\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    }\n    else\n    {\n      probe_log (\"try_ready_normal_body: crc returned error (%lld), closing connection with error\",\n                 (long long) ret);\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    }\n    probe_log (\"try_ready_normal_body: returning MHD_NO (crc error)\");\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  probe_log (\"try_ready_normal_body: crc produced data_size=%zu data_start=%llu\",\n             (size_t) response->data_size,\n             (unsigned long long) response->data_start);\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    probe_log (\"try_ready_normal_body: crc returned 0, set state to UNREADY, returning MHD_NO\");\n    return MHD_NO;\n  }\n  probe_log (\"try_ready_normal_body: returning MHD_YES (data available)\");\n  return MHD_YES;\n}\n"
}