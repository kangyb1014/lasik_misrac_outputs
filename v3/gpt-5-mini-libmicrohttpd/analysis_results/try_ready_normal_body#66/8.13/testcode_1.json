{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression casts away const-qualification: response->data is (implicitly) a const-qualified pointer (e.g. const void * or const char *), but the code does (char *)response->data to pass it to response->crc, removing the const. This casts away const and therefore violates MISRA C 2023 Rule 8.13. Remedy: make the crc() parameter accept a pointer to const (e.g. const char * or const void *) and remove the cast.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_ready_normal_body code that contains useful probe functions that print useful logs to a file \"/tmp/logs/663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_ready_normal_body as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_ready_normal_body:\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified try_ready_normal_body code.\n",
  "test_code": "static void\nmhd_probe_log_state (const char *stage,\n                     struct MHD_Connection *connection,\n                     struct MHD_Response *response)\n{\n  FILE *f = fopen(\"/tmp/logs/663.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Log key control-flow points and relevant state. Avoid casting away const. */\n  fprintf (f,\n           \"STAGE=%s conn=%p resp=%p total_size=%llu rsp_write_pos=%lld \"\n           \"data_buffer_size=%llu data_start=%llu data_size=%llu crc_nonnull=%d \"\n           \"data_ptr=%p data_iov=%p data_iovcnt=%zu\\n\",\n           stage,\n           (void *) connection,\n           (void *) response,\n           (unsigned long long) response->total_size,\n           (long long) connection->rp.rsp_write_position,\n           (unsigned long long) response->data_buffer_size,\n           (unsigned long long) response->data_start,\n           (unsigned long long) response->data_size,\n           (int) (NULL != response->crc),\n           (const void *) response->data,\n           (void *) response->data_iov,\n           response->data_iovcnt);\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log_crc_call (struct MHD_Connection *connection,\n                        struct MHD_Response *response,\n                        size_t call_size)\n{\n  FILE *f = fopen(\"/tmp/logs/663.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Record the (textual) fact that the code will cast away const when calling\n     * the crc function, and the parameters that will be used. We do NOT\n     * actually perform any cast here for logging; the cast in the original\n     * code remains unchanged. */\n  fprintf (f,\n           \"CALL_CRC about to invoke response->crc(..., rsp_write_pos=%lld, (char *)response->data, call_size=%zu)\\n\",\n           (long long) connection->rp.rsp_write_position,\n           call_size);\n  fclose (f);\n}\n\nstatic void\nmhd_probe_log_crc_result (struct MHD_Connection *connection,\n                          struct MHD_Response *response,\n                          ssize_t ret)\n{\n  FILE *f = fopen(\"/tmp/logs/663.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf (f,\n           \"CRC_RESULT ret=%lld (MHD_CONTENT_READER_END_OF_STREAM=%d)\\n\",\n           (long long) ret,\n           (int) MHD_CONTENT_READER_END_OF_STREAM);\n  /* Also log state after crc call */\n  fprintf (f,\n           \"POST_CRC total_size=%llu data_start=%llu data_size=%llu\\n\",\n           (unsigned long long) response->total_size,\n           (unsigned long long) response->data_start,\n           (unsigned long long) response->data_size);\n  fclose (f);\n}\n\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  mhd_probe_log_state (\"entry\", connection, response);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n  {\n    mhd_probe_log_state (\"early_return_zero_size\", connection, response);\n    return MHD_YES;  /* 0-byte response is always ready */\n  }\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    mhd_probe_log_state (\"enter_data_iov\", connection, response);\n\n    if (NULL != connection->rp.resp_iov.iov)\n    {\n      mhd_probe_log_state (\"resp_iov_already_set\", connection, response);\n      return MHD_YES;\n    }\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      mhd_probe_log_state (\"alloc_failed_resp_iov\", connection, response);\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    mhd_probe_log_state (\"resp_iov_set\", connection, response);\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n  {\n    mhd_probe_log_state (\"no_crc\", connection, response);\n    return MHD_YES;\n  }\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n  {\n    mhd_probe_log_state (\"already_ready\", connection, response);\n    return MHD_YES; /* response already ready */\n  }\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    mhd_probe_log_state (\"sendfile_path\", connection, response);\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  /* Log parameters that will be used when invoking the CRC function. */\n  mhd_probe_log_state (\"before_crc_check\", connection, response);\n  mhd_probe_log_crc_call (connection, response,\n                          (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                            response->total_size\n                                            - connection->rp.rsp_write_position));\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n\n  mhd_probe_log_crc_result (connection, response, ret);\n\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    mhd_probe_log_state (\"crc_returned_zero\", connection, response);\n    return MHD_NO;\n  }\n  mhd_probe_log_state (\"crc_returned_positive\", connection, response);\n  return MHD_YES;\n}"
}