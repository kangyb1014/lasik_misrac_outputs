{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts response->data to (char *) when calling response->crc. If response->data is declared with a const-qualified type (for example const void * or const char *), this cast discards the const qualifier and passes a non-const pointer into crc, violating MISRA C 2023 Rule 8.13. The correct fix is to avoid casting away const and, if crc does not modify the buffer, change the crc function signature to accept a pointer to const (e.g. const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_ready_normal_body code that contains useful probe functions that print useful logs to a file \"/tmp/logs/663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_ready_normal_body as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_ready_normal_body:\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified try_ready_normal_body code.\n",
  "test_code": "static void\nlog_probe(const char *stage,\n          struct MHD_Connection *connection,\n          struct MHD_Response *response,\n          ssize_t ret,\n          size_t crc_len)\n{\n  FILE *f = fopen(\"/tmp/logs/663.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log the key control-flow decisions and state relevant to the crc call */\n  fprintf(f, \"STAGE: %s\\n\", stage);\n  fprintf(f, \" connection=%p, response=%p\\n\",\n          (void *) connection, (void *) response);\n  if (NULL != response)\n  {\n    fprintf(f, \" response->total_size=%llu\\n\",\n            (unsigned long long) response->total_size);\n    fprintf(f, \" response->data_start=%llu\\n\",\n            (unsigned long long) response->data_start);\n    fprintf(f, \" response->data_size=%zu\\n\",\n            response->data_size);\n    fprintf(f, \" response->data_buffer_size=%zu\\n\",\n            response->data_buffer_size);\n    fprintf(f, \" response->data_iov=%p, data_iovcnt=%zu\\n\",\n            (void *) response->data_iov, response->data_iovcnt);\n    /* Log the data pointer without discarding const qualifier */\n    fprintf(f, \" response->data(pointer)=%p\\n\",\n            (const void *) response->data);\n    fprintf(f, \" response->crc(function ptr)=%p, crc_cls=%p\\n\",\n            (void *) response->crc, (void *) response->crc_cls);\n  }\n  fprintf(f, \" connection->rp.rsp_write_position=%llu\\n\",\n          (unsigned long long) connection->rp.rsp_write_position);\n  if (ret != (ssize_t) -1)\n    fprintf(f, \" crc returned ret=%lld\\n\", (long long) ret);\n  fprintf(f, \" crc will be asked for up to %zu bytes\\n\", crc_len);\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  log_probe(\"entry\", connection, response, (ssize_t)-1, 0);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    log_probe(\"data_iov branch\", connection, response, (ssize_t)-1, 0);\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      log_probe(\"out of memory\", connection, response, (ssize_t)-1, copy_size);\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    log_probe(\"data_iov copied\", connection, response, (ssize_t)-1, copy_size);\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n  {\n    log_probe(\"no crc, ready\", connection, response, (ssize_t)-1, 0);\n    return MHD_YES;\n  }\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n  {\n    log_probe(\"already ready\", connection, response, (ssize_t)-1, 0);\n    return MHD_YES; /* response already ready */\n  }\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    log_probe(\"sendfile sender, skipping crc\", connection, response, (ssize_t)-1, 0);\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  /* Calculate the length we will ask crc to process and log it */\n  {\n    size_t crc_len = (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                       response->total_size\n                                       - connection->rp.rsp_write_position);\n    log_probe(\"before crc call (about to cast response->data to char *)\",\n              connection, response, (ssize_t)-1, crc_len);\n\n    /* Original call preserved (including the cast that discards const).\n     * We log the state right before it so that reproduction/evidence is\n     * available in /tmp/logs/663.txt. */\n    ret = response->crc (response->crc_cls,\n                         connection->rp.rsp_write_position,\n                         (char *) response->data,\n                         crc_len);\n\n    log_probe(\"after crc call\", connection, response, ret, crc_len);\n  }\n\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    log_probe(\"crc reported error/EOF\", connection, response, ret, 0);\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  log_probe(\"crc accepted data\", connection, response, ret, response->data_size);\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    log_probe(\"crc returned 0, unready\", connection, response, ret, 0);\n    return MHD_NO;\n  }\n  log_probe(\"ready after crc\", connection, response, ret, response->data_size);\n  return MHD_YES;\n}\n"
}