{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe format string / message strings are passed as pointers that are likely not const-qualified. In particular, common implementations of gettext\u2019s _() return char * and many state-to-string helpers return char * even though they point at static string literals. If either MHD_state_to_string or the _() macro (gettext) is declared to return a non-const pointer (char *), then a pointer is pointing to a non-const-qualified string literal or static text and Rule 8.13 is violated. To comply, these functions should return const char * (e.g. const char *MHD_state_to_string(...)) so the pointers point to const-qualified types.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_update_event_loop_info code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_update_event_loop_info as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_update_event_loop_info:\n```c\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_update_event_loop_info code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe helpers: write logs to /tmp/logs/83.txt. Use const-qualified string\n   parameters to avoid introducing pointer-to-non-const issues. */\nstatic void\nprobe_log_str_ptr (const char *label, const char *s)\n{\n  FILE *f = fopen (\"/tmp/logs/83.txt\", \"a\");\n  if (f)\n    {\n      fprintf (f, \"%s: ptr=%p content=\\\"%s\\\"\\n\", label,\n               (const void *) s, s ? s : \"(null)\");\n      fclose (f);\n    }\n}\n\nstatic void\nprobe_log_conn (struct MHD_Connection *connection, const char *where)\n{\n  FILE *f = fopen (\"/tmp/logs/83.txt\", \"a\");\n  if (! f)\n    return;\n\n  /* Log a compact snapshot of relevant connection fields. */\n  fprintf (f, \"--- %s: connection=%p\\n\", where, (void *) connection);\n  if (connection)\n    {\n      fprintf (f,\n               \"  suspended=%d tls_state=%d tls_session=%p state=%d event_loop_info=0x%x\\n\",\n               (int) connection->suspended,\n               (int) connection->tls_state,\n               (void *) connection->tls_session,\n               (int) connection->state,\n               (unsigned) connection->event_loop_info);\n\n      /* Some request-related fields used in the function logic. */\n      fprintf (f, \"  read_buffer_offset=%zu read_buffer_size=%zu discard_request=%d\\n\",\n               (size_t) connection->read_buffer_offset,\n               (size_t) connection->read_buffer_size,\n               (int) connection->discard_request);\n\n      /* rq is a sub-structure used heavily; print fields we rely on. */\n      fprintf (f,\n               \"  rq.some_payload_processed=%d rq.have_chunked_upload=%d rq.remaining_upload_size=%zu\\n\",\n               (int) connection->rq.some_payload_processed,\n               (int) connection->rq.have_chunked_upload,\n               (size_t) connection->rq.remaining_upload_size);\n\n      /* Attempt to log the textual state via MHD_state_to_string if available. */\n      {\n        const char *st = MHD_state_to_string (connection->state);\n        fprintf (f, \"  state_str_ptr=%p state_str=\\\"%s\\\"\\n\",\n                 (const void *) st, st ? st : \"(null)\");\n      }\n    }\n  fclose (f);\n}\n\nstatic void\nprobe_log_event_loop_info_change (struct MHD_Connection *connection,\n                                   const char *where)\n{\n  FILE *f = fopen (\"/tmp/logs/83.txt\", \"a\");\n  if (! f)\n    return;\n  fprintf (f, \"event_loop_info change at %s: connection=%p new_event_loop_info=0x%x\\n\",\n           where, (void *) connection, (unsigned) connection->event_loop_info);\n  fclose (f);\n}\n\nstatic void\nprobe_log_check_and_grow_result (struct MHD_Connection *connection, int result)\n{\n  FILE *f = fopen (\"/tmp/logs/83.txt\", \"a\");\n  if (! f)\n    return;\n  fprintf (f, \"check_and_grow_read_buffer_space returned %d for connection=%p\\n\",\n           result, (void *) connection);\n  fclose (f);\n}\n\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    {\n      probe_log_conn (connection, \"early_return_suspended\");\n      return; /* States will be updated after resume. */\n    }\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    probe_log_conn (connection, \"tls_branch_entry\");\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      probe_log_event_loop_info_change (connection, \"MHD_TLS_CONN_INIT\");\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      probe_log_event_loop_info_change (connection, \"MHD_TLS_CONN_HANDSHAKING_or_WR_CLOSING\");\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      probe_log_conn (connection, \"MHD_TLS_CONN_CONNECTED_continue_normal_processing\");\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      probe_log_event_loop_info_change (connection, \"MHD_TLS_CONN_WR_CLOSED_or_TLS_FAILED\");\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      /* Log the literal passed to MHD_PANIC so we can inspect the pointer and\n         content at runtime (helps reproduce pointer const-qualification issues). */\n      probe_log_str_ptr (\"MHD_PANIC_msg\", _ (\"Invalid TLS state value.\\n\"));\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    /* Always probe the connection state at loop entry so logs capture the\n       textual state pointer and numeric state even if DEBUG_STATES is off. */\n    probe_log_conn (connection, \"state_loop_entry\");\n    probe_log_str_ptr (\"state_to_string\",\n                        MHD_state_to_string (connection->state));\n\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      probe_log_event_loop_info_change (connection, \"REQ_LINE_RECEIVING_or_INIT\");\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      probe_log_event_loop_info_change (connection, \"REQ_HEADERS_RECEIVING\");\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      probe_log_event_loop_info_change (connection, \"CONTINUE_SENDING\");\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          probe_log_event_loop_info_change (connection, \"BODY_RECEIVING_non_chunked\");\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          probe_log_event_loop_info_change (connection, \"BODY_RECEIVING_chunked\");\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      probe_log_event_loop_info_change (connection, \"FOOTERS_RECEIVING\");\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      probe_log_event_loop_info_change (connection, \"FULL_REQ_RECEIVED\");\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      probe_log_event_loop_info_change (connection, \"HEADERS_SENDING\");\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      probe_log_event_loop_info_change (connection, \"NORMAL_BODY_UNREADY\");\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      probe_log_event_loop_info_change (connection, \"NORMAL_BODY_READY\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      probe_log_event_loop_info_change (connection, \"CHUNKED_BODY_UNREADY\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      probe_log_event_loop_info_change (connection, \"CHUNKED_BODY_READY\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      probe_log_event_loop_info_change (connection, \"FOOTERS_SENDING\");\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      probe_log_event_loop_info_change (connection, \"CONNECTION_CLOSED\");\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      int grow_ok = check_and_grow_read_buffer_space (connection);\n      probe_log_check_and_grow_result (connection, grow_ok);\n      if (! grow_ok)\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n"
}