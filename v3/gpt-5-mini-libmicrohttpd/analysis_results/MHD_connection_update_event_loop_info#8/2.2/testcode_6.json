{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf assertions are compiled out (e.g. mhd_assert is defined empty in release builds), the call mhd_assert(0) becomes a no-op and the case body reduces to just 'break;'. That operation (the assertion) is executed in that configuration but its removal would not affect program behaviour, so it constitutes dead code. Therefore the rule is violated in builds where mhd_assert is a no-op.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_update_event_loop_info code that contains useful probe functions that print useful logs to a file \"/tmp/logs/82.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_update_event_loop_info as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_update_event_loop_info:\n```c\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_update_event_loop_info code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function: append human-readable traces to /tmp/logs/82.txt */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/82.txt\", \"a\");\n  if (! f)\n    return;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Log entry and key connection fields so we can reproduce the scenario. */\n  mhd_log_probe (\"ENTRY: suspended=%d, state=%d, tls_state=%d, read_buffer_offset=%zu, read_buffer_size=%zu, rq_some_payload_processed=%d, have_chunked_upload=%d, remaining_upload_size=%zu, discard_request=%d\",\n                 (int)connection->suspended,\n                 (int)connection->state,\n                 (int)connection->tls_state,\n                 (size_t)connection->read_buffer_offset,\n                 (size_t)connection->read_buffer_size,\n                 (int)connection->rq.some_payload_processed,\n                 (int)connection->rq.have_chunked_upload,\n                 (size_t)connection->rq.remaining_upload_size,\n                 (int)connection->discard_request);\n\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n  {\n    mhd_log_probe (\"EXIT: connection suspended -> no update (will be updated after resume)\");\n    return; /* States will be updated after resume. */\n  }\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    mhd_log_probe (\"TLS branch: tls_state=%d\", (int)connection->tls_state);\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      mhd_log_probe (\"TLS: MHD_TLS_CONN_INIT -> event_loop_info=READ; returning\");\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n      {\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n        mhd_log_probe (\"TLS: HANDSHAKING/WR_CLOSING -> direction=READ -> event_loop_info=READ; returning\");\n      }\n      else\n      {\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n        mhd_log_probe (\"TLS: HANDSHAKING/WR_CLOSING -> direction=WRITE -> event_loop_info=WRITE; returning\");\n      }\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      mhd_log_probe (\"TLS: CONNECTED -> fall through to normal processing\");\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      mhd_log_probe (\"TLS: WR_CLOSED/TLS_FAILED -> event_loop_info=CLEANUP; returning\");\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      mhd_log_probe (\"TLS: invalid/default -> PANIC about invalid TLS state\");\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    mhd_log_probe (\"STATE DISPATCH: state=%d\", (int)connection->state);\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      mhd_log_probe (\"Case: REQ_LINE_RECEIVING/INIT -> event_loop_info=READ\");\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_log_probe (\"Case: REQ_LINE_RECEIVED -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: REQ_LINE_RECEIVED -> after mhd_assert(0) (if compiled out, this is reached)\");\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      mhd_log_probe (\"Case: REQ_HEADERS_RECEIVING -> event_loop_info=READ\");\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_log_probe (\"Case: HEADERS_RECEIVED/PROCESSED -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: HEADERS_RECEIVED/PROCESSED -> after mhd_assert(0)\");\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      mhd_log_probe (\"Case: CONTINUE_SENDING -> event_loop_info=WRITE\");\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      mhd_log_probe (\"Case: BODY_RECEIVING -> some_payload_processed=%d, has_unprocessed=%d\",\n                     (int)connection->rq.some_payload_processed,\n                     (int)has_unprocessed_upload_body_data_in_buffer (connection));\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_log_probe (\"BODY_RECEIVING: payload processed and buffer has unprocessed data; read_buffer_offset=%zu, read_buffer_size=%zu\",\n                       (size_t)connection->read_buffer_offset,\n                       (size_t)connection->read_buffer_size);\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        mhd_log_probe (\"BODY_RECEIVING: after read buffer assertion\");\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n          {\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n            mhd_log_probe (\"BODY_RECEIVING: non-chunked and remaining_upload_size >= read_buffer_offset -> PROCESS\");\n          }\n          else\n          {\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n            mhd_log_probe (\"BODY_RECEIVING: non-chunked and remaining_upload_size < read_buffer_offset -> PROCESS_READ\");\n          }\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          mhd_log_probe (\"BODY_RECEIVING: chunked upload -> PROCESS_READ\");\n        }\n      }\n      else\n      {\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n        mhd_log_probe (\"BODY_RECEIVING: else branch -> event_loop_info=READ\");\n      }\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_log_probe (\"Case: BODY_RECEIVED -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: BODY_RECEIVED -> after mhd_assert(0)\");\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      mhd_log_probe (\"Case: FOOTERS_RECEIVING -> event_loop_info=READ\");\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_log_probe (\"Case: FOOTERS_RECEIVED -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: FOOTERS_RECEIVED -> after mhd_assert(0)\");\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      mhd_log_probe (\"Case: FULL_REQ_RECEIVED -> event_loop_info=PROCESS\");\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_log_probe (\"Case: START_REPLY -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: START_REPLY -> after mhd_assert(0)\");\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      mhd_log_probe (\"Case: HEADERS_SENDING -> event_loop_info=WRITE\");\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_log_probe (\"Case: HEADERS_SENT -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: HEADERS_SENT -> after mhd_assert(0)\");\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      mhd_log_probe (\"Case: NORMAL_BODY_UNREADY -> event_loop_info=PROCESS\");\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      mhd_log_probe (\"Case: NORMAL_BODY_READY -> event_loop_info=WRITE\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      mhd_log_probe (\"Case: CHUNKED_BODY_UNREADY -> event_loop_info=PROCESS\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      mhd_log_probe (\"Case: CHUNKED_BODY_READY -> event_loop_info=WRITE\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_log_probe (\"Case: CHUNKED_BODY_SENT -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: CHUNKED_BODY_SENT -> after mhd_assert(0)\");\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      mhd_log_probe (\"Case: FOOTERS_SENDING -> event_loop_info=WRITE\");\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_log_probe (\"Case: FULL_REPLY_SENT -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: FULL_REPLY_SENT -> after mhd_assert(0)\");\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      mhd_log_probe (\"Case: CLOSED -> event_loop_info=CLEANUP; returning\");\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_log_probe (\"Case: UPGRADE -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: UPGRADE -> after mhd_assert(0)\");\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_log_probe (\"Case: default -> about to invoke mhd_assert(0)\");\n      mhd_assert (0);\n      mhd_log_probe (\"Case: default -> after mhd_assert(0)\");\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      mhd_log_probe (\"Post-dispatch: READ flag set -> check_and_grow_read_buffer_space()\");\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_log_probe (\"check_and_grow_read_buffer_space returned false -> discard_request=%d\", (int)connection->discard_request);\n        mhd_assert (connection->discard_request);\n        mhd_log_probe (\"After discard assert -> continuing loop\");\n        continue;\n      }\n    }\n    mhd_log_probe (\"All processed -> breaking out of state loop, event_loop_info=%d\", (int)connection->event_loop_info);\n    break; /* Everything was processed. */\n  }\n  mhd_log_probe (\"EXIT: finalized event_loop_info=%d\", (int)connection->event_loop_info);\n}\n"
}