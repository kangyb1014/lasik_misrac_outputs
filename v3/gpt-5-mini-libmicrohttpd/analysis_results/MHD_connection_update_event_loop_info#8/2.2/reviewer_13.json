{
  "user_message": "An agent A claimed that the following MHD_connection_update_event_loop_info code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_connection_update_event_loop_info.\n```c\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe default: mhd_assert(0); branch can be dead code when mhd_assert is compiled out (for example when configured like assert() under NDEBUG to ((void)0)) and all valid enum states are handled by the case labels. In that build the default label executes but performs no observable action, so removing it would not change program behaviour \u2014 this constitutes dead code under MISRA C 2023 Rule 2.2. (If mhd_assert performs a runtime action such as logging/abort in all builds, then the default is not dead.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct as stated but it is conditional. MISRA C:2023 Rule 2.2 forbids executed operations whose removal would not change program behaviour. The default: mhd_assert(0); arm can become such an executed no\u2011op if mhd_assert is defined to nothing (as assert() under NDEBUG commonly is). In that build, if the default label can be reached (e.g. an unexpected enum value occurs at runtime), the code will execute an operation that has no observable effect \u2014 removing the default clause would not change behaviour \u2014 which matches the definition of dead code and therefore violates Rule 2.2. Conversely, if mhd_assert always performs an observable action (logging/abort) in all builds, or if the default label is provably unreachable in the whole project, then there is no Rule 2.2 violation. In short: A\u2019s report is correct for builds/configurations where mhd_assert is a no\u2011op and the default path can execute; it is not correct in configurations where mhd_assert has a runtime effect or the default is unreachable. Recommended fixes: give the default a real, non\u2011strippable handler (e.g. call an internal panic routine that cannot be compiled out), or make the code structure such that the compiler can prove the default is unreachable."
}