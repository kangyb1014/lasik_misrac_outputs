{
  "user_message": "An agent A claimed that the following MHD_connection_update_event_loop_info code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_connection_update_event_loop_info.\n```c\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement mhd_assert(0); is intended as a diagnostic for an unreachable/invalid state. If the mhd_assert macro is a no-op in production builds (e.g. compiled out under NDEBUG or similar), then when the MHD_CONNECTION_START_REPLY case is reached the executed operation has no effect \u2014 removing it would not change program behaviour. In that build configuration this constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. (If mhd_assert actually performs a non\u2011trivial action such as aborting/logging, then removal would change behaviour and there is no violation.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1756197825] probe: enter MHD_connection_update_event_loop_info; conn=0x55f4319a41e0; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: while-loop top; conn=0x55f4319a41e0; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: REQ_LINE_RECEIVING/INIT -> READ; conn=0x55f4319a41e0; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: about to check_and_grow_read_buffer_space; conn=0x55f4319a41e0; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: break out of while: everything processed; conn=0x55f4319a41e0; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: enter MHD_connection_update_event_loop_info; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: while-loop top; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: REQ_LINE_RECEIVING/INIT -> READ; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: about to check_and_grow_read_buffer_space; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: break out of while: everything processed; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: enter MHD_connection_update_event_loop_info; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: while-loop top; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: REQ_LINE_RECEIVING/INIT -> READ; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: about to check_and_grow_read_buffer_space; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: break out of while: everything processed; conn=0x55f4319a41e0; suspended=0; state=1; event_loop_info=0x00000001; read_offset=1; read_size=16384; discard_request=0;\n[1756197825] probe: enter MHD_connection_update_event_loop_info; conn=0x55f4319a5490; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: while-loop top; conn=0x55f4319a5490; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: REQ_LINE_RECEIVING/INIT -> READ; conn=0x55f4319a5490; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: about to check_and_grow_read_buffer_space; conn=0x55f4319a5490; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: break out of while: everything processed; conn=0x55f4319a5490; suspended=0; state=0; event_loop_info=0x00000001; read_offset=0; read_size=16384; discard_request=0;\n[1756197825] probe: enter MHD_connection_update_event_loop_info; conn=0x55f4319a5490; suspended=0; state=1; event_loop_info=0x00000001; read_offset=2; read_size=16384; discard_request=0;\n[1756197825] probe: while-loop top; conn=0x55f4319a5490; suspended=0; state=1; event_loop_info=0x00000001; read_offset=2; read_size=16384; discard_request=0;\n[1756197825] probe: REQ_LINE_RECEIVING/INIT -> READ; conn=0x55f4319a5490; suspended=0; state=1; event_loop_info=0x00000001; read_offset=2; read_size=16384; discard_request=0;\n[1756197825] probe: \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's reasoning is correct given the scenario they described. MISRA C 2023 Rule 2.2 forbids operations whose removal would not affect program behaviour (dead code). The statements mhd_assert(0); are operations. If, in the production build configuration, the mhd_assert macro expands to nothing (i.e. is compiled out), then those statements will be executed on the corresponding switch case paths but have no effect; removing them would not change program behaviour in that build. That matches the definition of dead code and therefore breaches Rule 2.2.\n\nIf, however, mhd_assert is implemented so that it performs a visible action in the production build (logging, abort, diagnostics, etc.), then removing it would change behaviour and there is no Rule 2.2 violation. Thus the report is conditionally correct \u2014 it is a true violation under the stated build configuration where mhd_assert is a no-op."
}