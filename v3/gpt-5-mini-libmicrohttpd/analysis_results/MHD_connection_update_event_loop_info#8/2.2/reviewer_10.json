{
  "user_message": "An agent A claimed that the following MHD_connection_update_event_loop_info code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_connection_update_event_loop_info.\n```c\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThis fragment becomes dead code in builds where the assertion macro is a no-op (e.g. mhd_assert(0) expands to nothing in release builds) or when the MHD_CONNECTION_UPGRADE state cannot occur: the case body then performs no observable action (only an assertion and a break). In that configuration the operation(s) executed by this case can be removed without changing program behaviour, which constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter MHD_connection_update_event_loop_info: conn=0x5607a3e671e0 state=0 suspended=0 event_loop_info=1 read_buffer_offset=0 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\ncase: REQ_LINE_RECEIVING -> READ: conn=0x5607a3e671e0 state=0 suspended=0 event_loop_info=1 read_buffer_offset=0 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nabout to break out of while - everything processed: conn=0x5607a3e671e0 state=0 suspended=0 event_loop_info=1 read_buffer_offset=0 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nexit MHD_connection_update_event_loop_info: conn=0x5607a3e671e0 state=0 suspended=0 event_loop_info=1 read_buffer_offset=0 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nenter MHD_connection_update_event_loop_info: conn=0x5607a3e671e0 state=1 suspended=0 event_loop_info=1 read_buffer_offset=1 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\ncase: REQ_LINE_RECEIVING -> READ: conn=0x5607a3e671e0 state=1 suspended=0 event_loop_info=1 read_buffer_offset=1 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nabout to break out of while - everything processed: conn=0x5607a3e671e0 state=1 suspended=0 event_loop_info=1 read_buffer_offset=1 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nexit MHD_connection_update_event_loop_info: conn=0x5607a3e671e0 state=1 suspended=0 event_loop_info=1 read_buffer_offset=1 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nenter MHD_connection_update_event_loop_info: conn=0x5607a3e671e0 state=1 suspended=0 event_loop_info=1 read_buffer_offset=1 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\ncase: REQ_LINE_RECEIVING -> READ: conn=0x5607a3e671e0 state=1 suspended=0 event_loop_info=1 read_buffer_offset=1 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nabout to break out of while - everything processed: conn=0x5607a3e671e0 state=1 suspended=0 event_loop_info=1 read_buffer_offset=1 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nexit MHD_connection_update_event_loop_info: conn=0x5607a3e671e0 state=1 suspended=0 event_loop_info=1 read_buffer_offset=1 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nenter MHD_connection_update_event_loop_info: conn=0x5607a3e68490 state=0 suspended=0 event_loop_info=1 read_buffer_offset=0 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\ncase: REQ_LINE_RECEIVING -> READ: conn=0x5607a3e68490 state=0 suspended=0 event_loop_info=1 read_buffer_offset=0 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nabout to break out of while - everything processed: conn=0x5607a3e68490 state=0 suspended=0 event_loop_info=1 read_buffer_offset=0 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nexit MHD_connection_update_event_loop_info: conn=0x5607a3e68490 state=0 suspended=0 event_loop_info=1 read_buffer_offset=0 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nenter MHD_connection_update_event_loop_info: conn=0x5607a3e68490 state=1 suspended=0 event_loop_info=1 read_buffer_offset=2 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\ncase: REQ_LINE_RECEIVING -> READ: conn=0x5607a3e68490 state=1 suspended=0 event_loop_info=1 read_buffer_offset=2 read_buffer_size=16384 rq_some_payload_processed=0 have_chunked_upload=0 remaining_upload_size=0\nabout to break out of while - everything processed: conn=0x5607a3e68490 state=1 suspended=0 event_loop_info=1 read_buffer_offset=2 read_buffer_size=1\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The agent points to cases that only contain mhd_assert(0) (and then a break) and claims they become dead when the assertion macro is a no-op. However: \n\n- In those switch labels the break (or the control-flow effect of the case) remains in the generated code. The break is an observable operation (it controls switch flow) and cannot be removed without changing behaviour (it prevents fall-through into the next case). Therefore the case bodies are not operations whose removal would not affect program behaviour. \n\n- mhd_assert expanding to nothing simply means the assertion call is absent in the release build; that does not make the remaining case body (the break or other statements) dead code. The assertion itself, when present in debug builds, is meaningful (it can alter behaviour on failure), so the source is not gratuitously dead across configurations. \n\n- The MISRA 2.2 definition targets operations that are executed but removable without effect. Here there is an executed control-flow operation (break) and/or other meaningful statements (assignments, returns) in the various cases; those are not removable without changing behaviour. \n\nThe only subtle point is the default/assert-only pattern: if a default label contains only an assertion that is a no-op in a particular build, then there is no generated operation for the assertion \u2014 but that simply means nothing was generated for that statement in that configuration; it is not an executed operation that could be removed without effect. Overall, the code as shown does not constitute dead code in the sense of MISRA C 2023 Rule 2.2, so the reported violation is incorrect."
}