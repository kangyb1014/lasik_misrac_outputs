{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "buf [param->value.len] = 0;",
    "buf[len] = 0;",
    "mhd_assert (len < param->value.len);",
    "len = MHD_str_unquote (param->value.str, param->value.len, buf);",
    "memcpy (buf, param->value.str, param->value.len);"
  ],
  "explanation": "Items not listed as suspicious do not directly perform pointer-based reads/writes from/to buffers or calls to <string.h> functions and therefore do not by themselves present an obvious risk under MISRA C 2023 Rule 21.17. Specifically: the function signature and 'size_t len;' declaration are inert; the initial 'mhd_assert (NULL != param->value.str);' checks for a non-NULL source pointer (though it does not guarantee buffer sizing and so the memcpy and other lines above are flagged); the conditional 'if (! param->quoted) { ... }' and return statements merely control flow; the 'mhd_assert (0 != len);' only asserts a non-zero result from MHD_str_unquote but is not by itself a buffer access. The flagged fragments cover the direct memory-copy and buffer-write operations and the unquote call whose behavior with respect to the provided buf must be verified to ensure no access beyond object bounds."
}