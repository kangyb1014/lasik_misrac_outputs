{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: memcpy copies param->value.len bytes into buf without any information or check of buf\u2019s allocated size (the function has no buf length parameter). If the caller provides a buffer smaller than param->value.len + 1, the memcpy (and the subsequent buf[param->value.len] = 0) will write beyond buf. Likewise, if param->value.str is shorter than param->value.len, memcpy will read beyond the source. Because bounds are not guaranteed/checked, this use can result in out-of-bounds accesses.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_param_unquoted_copy_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2839.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_param_unquoted_copy_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\nPlease provide the modified get_rq_param_unquoted_copy_z code.\n",
  "test_code": "static size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  /* Probe: log entry into function and key parameter/state values */\n  {\n    FILE *f = fopen(\"/tmp/logs/2839.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ENTER: get_rq_param_unquoted_copy_z: param=%p value.str=%p value.len=%zu quoted=%d buf=%p\\n\",\n              (const void *) param,\n              (const void *) param->value.str,\n              (size_t) param->value.len,\n              (int) param->quoted,\n              (void *) buf);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    /* Log that we are about to perform the unquoted memcpy branch */\n    {\n      FILE *f = fopen(\"/tmp/logs/2839.txt\", \"a\");\n      if (NULL != f)\n      {\n        fprintf(f, \"BRANCH: unquoted: about to memcpy(buf, value.str, value.len) with value.len=%zu\\n\",\n                (size_t) param->value.len);\n        fclose(f);\n      }\n    }\n\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n\n    /* Log the fact we performed the copy and wrote the terminator. Do not read buf contents to avoid further out-of-bounds reads. */\n    {\n      FILE *f = fopen(\"/tmp/logs/2839.txt\", \"a\");\n      if (NULL != f)\n      {\n        fprintf(f, \"ACTION: memcpy done: attempted copy_len=%zu wrote_nul_at_index=%zu returning=%zu\\n\",\n                (size_t) param->value.len,\n                (size_t) param->value.len,\n                (size_t) param->value.len);\n        fclose(f);\n      }\n    }\n\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n\n  /* Log result from unquote routine before assertions/terminator */\n  {\n    FILE *f = fopen(\"/tmp/logs/2839.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"BRANCH: quoted: MHD_str_unquote returned len=%zu (input_len=%zu)\\n\",\n              (size_t) len,\n              (size_t) param->value.len);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n\n  /* Final log before return */\n  {\n    FILE *f = fopen(\"/tmp/logs/2839.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"RETURN: quoted branch: returned_len=%zu wrote_nul_at_index=%zu\\n\",\n              (size_t) len,\n              (size_t) len);\n      fclose(f);\n    }\n  }\n\n  return len;\n}\n"
}