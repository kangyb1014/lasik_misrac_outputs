{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller provides buf sized only to param->value.len bytes (i.e. no room for a terminating NUL), the assignment buf[len] = 0 writes one past the buffer. In the non-quoted path memcpy(buf, param->value.str, param->value.len) copies exactly param->value.len bytes and the subsequent buf[param->value.len] = 0 requires buf to be at least param->value.len + 1 bytes. The function signature does not guarantee that and the code relies on asserts (which may be disabled) rather than validating the destination size, so an out\u2011of\u2011bounds access is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_param_unquoted_copy_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2839.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_param_unquoted_copy_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\nPlease provide the modified get_rq_param_unquoted_copy_z code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: append a timestamped message to /tmp/logs/2839.txt */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  static int dir_created = 0;\n  FILE *f;\n  va_list ap;\n\n  if (!dir_created)\n  {\n    /* best-effort create directory; ignore errors */\n    (void) mkdir(\"/tmp/logs\", 0700);\n    dir_created = 1;\n  }\n\n  f = fopen(\"/tmp/logs/2839.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* timestamp */\n  {\n    time_t t = time(NULL);\n    struct tm tm;\n    if (NULL == localtime_r(&t, &tm))\n      fprintf(f, \"[time:unknown]\");\n    else\n    {\n      char buf[64];\n      if (0 < strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm))\n        fprintf(f, \"[%s] \", buf);\n    }\n  }\n\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/*\n * Modified function with logging probes. Original logic preserved.\n * Logs control flow and relevant state so callers and testers can reproduce\n * the out-of-bounds termination write scenario described.\n */\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n\n  /* Log entry and key state: pointers and length */\n  mhd_log_probe(\n    \"enter get_rq_param_unquoted_copy_z: param=%p, value.str=%p, value.len=%zu, quoted=%d, buf=%p\",\n    (void *) param,\n    (param ? (void *) param->value.str : (void *) NULL),\n    (param ? param->value.len : (size_t)0),\n    (param ? param->quoted : 0),\n    (void *) buf\n  );\n\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    /* Log the planned copy and the required buffer size for safety */\n    mhd_log_probe(\n      \"non-quoted path: will memcpy %zu bytes from %p to %p; will write terminating NUL at index %zu. Caller must provide at least %zu bytes (len+1).\",\n      param->value.len,\n      (void *) param->value.str,\n      (void *) buf,\n      param->value.len,\n      (param->value.len + 1)\n    );\n\n    /* Preserve original behavior */\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n\n    mhd_log_probe(\n      \"non-quoted path: completed memcpy and termination write at index %zu; returning %zu\",\n      param->value.len,\n      param->value.len\n    );\n\n    return param->value.len;\n  }\n\n  /* Quoted path */\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n\n  mhd_log_probe(\n    \"quoted path: MHD_str_unquote returned len=%zu (original param->value.len=%zu); buffer=%p\",\n    len,\n    param->value.len,\n    (void *) buf\n  );\n\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n\n  mhd_log_probe(\n    \"quoted path: will write terminating NUL at index %zu; caller must provide at least %zu bytes for buf (len+1).\",\n    len,\n    (len + 1)\n  );\n\n  buf[len] = 0;\n\n  mhd_log_probe(\n    \"quoted path: completed termination write at index %zu; returning %zu\",\n    len,\n    len\n  );\n\n  return len;\n}\n"
}