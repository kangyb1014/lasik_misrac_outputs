{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "len = MHD_str_unquote (param->value.str, param->value.len, buf);",
    "mhd_assert (NULL != param->value.str);",
    "memcpy (buf, param->value.str, param->value.len);"
  ],
  "explanation": "The only potential Rule 8.13 concern is that param->value.str is used purely as a read-only source here but is not const-qualified; those lines that dereference or pass param->value.str should be investigated to see if the pointed-to type could be changed to const char *. Other fragments do not need investigation: the function parameter is already a pointer to a const struct (const struct MHD_RqDAuthParam *param), buf is written to (so it must be a non-const char *), and the remaining statements (the function signature, the checks/assignments of len, the zero-termination buf[...] and the returns) are consistent with intended modification of buf or are unrelated to the const-qualification of pointed-to data."
}