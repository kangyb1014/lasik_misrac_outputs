{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nparam->value.str is used only for reading (passed to memcpy and MHD_str_unquote) but is likely declared as char * (pointer to non-const data). The MISRA rule 8.13 requires pointers to point to const-qualified types whenever possible, so the struct field should be declared as const char * (or equivalent) to show the pointee is not modified. Passing param->value.str as shown indicates the pointee is not const-qualified \u2014 violation: change the field to const char * so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_param_unquoted_copy_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_param_unquoted_copy_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\nPlease provide the modified get_rq_param_unquoted_copy_z code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe: append logs about control flow and state to /tmp/logs/2833.txt\n * This helper intentionally keeps side-effects minimal and does not\n * alter program logic. It only reads from param->value.str up to\n * param->value.len and writes diagnostic information to a file. */\nstatic void\nmhd_probe_log_rq_param(const struct MHD_RqDAuthParam *param,\n                       const char *location,\n                       size_t result_len)\n{\n  FILE *f = fopen(\"/tmp/logs/2833.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* If logging fails, don't impede normal execution. */\n    return;\n  }\n\n  /* Log basic pointers and flags */\n  fprintf(f, \"[mhd_probe] location=%s param=%p value.str=%p quoted=%d value.len=%zu result_len=%zu\\n\",\n          location,\n          (const void *) param,\n          (const void *) param->value.str,\n          (int) param->quoted,\n          (size_t) param->value.len,\n          (size_t) result_len);\n\n  /* Safely sample up to 48 bytes from the value (no write, only read). */\n  {\n    char sample[49];\n    size_t n = (param->value.len < (sizeof(sample) - 1u)) ? param->value.len : (sizeof(sample) - 1u);\n    if (n > 0u && param->value.str != NULL)\n    {\n      /* Copy raw bytes; the value may not be NUL-terminated. */\n      memcpy(sample, param->value.str, n);\n      sample[n] = '\\0';\n      /* Print both as a quoted string (may contain binary) and hex bytes for clarity. */\n      fprintf(f, \"[mhd_probe] sample_str=\\\"%s\\\" sample_len=%zu\\n\", sample, n);\n\n      fprintf(f, \"[mhd_probe] sample_hex=\");\n      for (size_t i = 0u; i < n; ++i)\n      {\n        fprintf(f, \"%02X\", (unsigned char) sample[i]);\n        if (i + 1u < n) fprintf(f, \" \");\n      }\n      fprintf(f, \"\\n\");\n    }\n    else\n    {\n      fprintf(f, \"[mhd_probe] sample_len=0 or value.str is NULL\\n\");\n    }\n  }\n\n  fclose(f);\n}\n\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n\n  /* Log entry and initial state */\n  mhd_probe_log_rq_param(param, \"entry\", 0);\n\n  mhd_assert (NULL != param->value.str);\n\n  if (! param->quoted)\n  {\n    /* Log branch decision */\n    mhd_probe_log_rq_param(param, \"branch_unquoted_before_memcpy\", 0);\n\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n\n    /* Log result state */\n    mhd_probe_log_rq_param(param, \"branch_unquoted_after_memcpy\", param->value.len);\n\n    return param->value.len;\n  }\n\n  /* Quoted branch: call unquote helper and log around it */\n  mhd_probe_log_rq_param(param, \"branch_quoted_before_unquote\", 0);\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n\n  /* Log the length returned by unquote and some post-call state */\n  mhd_probe_log_rq_param(param, \"branch_quoted_after_unquote\", len);\n\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n\n  /* Final log before return */\n  mhd_probe_log_rq_param(param, \"exit\", len);\n\n  return len;\n}\n"
}