{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nparam->value.str is used only as a read-only source (passed to memcpy and MHD_str_unquote) but is not const-qualified in its declaration. The function parameter is const struct MHD_RqDAuthParam *param, yet the member value.str appears to be declared as char * (non-const). According to MISRA C 2023 Rule 8.13, the pointer should be declared to point to a const-qualified type (e.g. const char *) when the data is not to be modified. Therefore the use of param->value.str here constitutes a violation unless the struct member is actually declared as const char *.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_param_unquoted_copy_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_param_unquoted_copy_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\nPlease provide the modified get_rq_param_unquoted_copy_z code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe helpers: write small, self-contained logs to /tmp/logs/2833.txt. */\nstatic void\nlog_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2833.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void\nlog_hex_blob(const char *label, const void *data, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)data;\n    size_t i, limit = (len > 64U) ? 64U : len; /* limit amount logged */\n    FILE *f = fopen(\"/tmp/logs/2833.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n    fprintf(f, \"%s: len=%zu bytes, first=%zu bytes:\\n\", label, len, limit);\n    for (i = 0U; i < limit; ++i)\n    {\n        fprintf(f, \"%02X \", p[i]);\n        if ((i & 0xF) == 0xF)\n            fprintf(f, \"\\n\");\n    }\n    if (limit && ((limit & 0xF) != 0xF))\n        fprintf(f, \"\\n\");\n    if (len > limit)\n        fprintf(f, \"... (truncated)\\n\");\n    fclose(f);\n}\n\n/* Forward declaration of the structures used by the project. The real\n   definitions are expected to be available at link/compile time. */\nstruct MHD_RqDAuthValue\n{\n    char *str;\n    size_t len;\n};\n\nstruct MHD_RqDAuthParam\n{\n    int quoted; /* boolean-like */\n    struct MHD_RqDAuthValue value;\n};\n\n/* Modified function with probes inserted. Original logic preserved. */\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n\n  /* Log entry and parameter summary */\n  log_write(\"ENTER get_rq_param_unquoted_copy_z: param=%p, buf=%p\", (const void *)param, (const void *)buf);\n  if (param != NULL)\n  {\n      /* Safe to dereference for logging based on original code's usage */\n      log_write(\"param->quoted=%d, param->value.len=%zu, param->value.str=%p\", (int)param->quoted, param->value.len, (const void *)param->value.str);\n      if (param->value.str != NULL)\n      {\n          /* Log a hex preview of the source bytes (non-destructive) */\n          log_hex_blob(\"param->value.str (hex preview)\", param->value.str, param->value.len);\n      }\n      else\n      {\n          log_write(\"param->value.str is NULL\");\n      }\n  }\n  else\n  {\n      log_write(\"param is NULL\");\n  }\n\n  mhd_assert (NULL != param->value.str);\n\n  if (! param->quoted)\n  {\n    log_write(\"Branch: not quoted. Copying raw bytes: len=%zu\", param->value.len);\n\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n\n    /* Log result buffer preview (as hex, limited) */\n    log_hex_blob(\"output buf after memcpy (hex preview)\", buf, param->value.len + 1U);\n    log_write(\"EXIT get_rq_param_unquoted_copy_z (not quoted): returning %zu\", param->value.len);\n\n    return param->value.len;\n  }\n\n  log_write(\"Branch: quoted. Calling MHD_str_unquote with len=%zu\", param->value.len);\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n\n  log_write(\"MHD_str_unquote returned len=%zu\", len);\n  if (len == 0U)\n  {\n      log_write(\"Assertion about to fail: unquoted length is 0\");\n  }\n\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n\n  buf[len] = 0;\n\n  /* Log result buffer preview (as hex, limited) */\n  log_hex_blob(\"output buf after unquote (hex preview)\", buf, len + 1U);\n  log_write(\"EXIT get_rq_param_unquoted_copy_z (quoted): returning %zu\", len);\n\n  return len;\n}\n"
}