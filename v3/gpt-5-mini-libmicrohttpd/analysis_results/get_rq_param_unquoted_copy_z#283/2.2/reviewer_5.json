{
  "user_message": "An agent A claimed that the following get_rq_param_unquoted_copy_z code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_param_unquoted_copy_z.\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the mhd_assert macro is defined as a no-op in the build used (for example when assertions are disabled and it expands to ((void)0) or nothing), then the statement mhd_assert(len < param->value.len); becomes an executed no-effect operation whose removal would not change program behaviour \u2014 this meets the definition of dead code and thus violates MISRA C 2023 Rule 2.2. (If, conversely, mhd_assert performs an active runtime check that can abort or otherwise change behaviour on failure, then the assertion is not dead code.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. If mhd_assert is defined as a no-op (for example expands to ((void)0) or nothing) then the statement mhd_assert(len < param->value.len); becomes an executed no-effect statement whose removal would not change program behaviour. That matches the provided definition of dead code in MISRA C 2023 Rule 2.2, so the code would violate that rule in a build where assertions are disabled. (Conversely, if mhd_assert performs an active runtime action on failure, then it is not dead code.)"
}