{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the function pointer type MHD_KeyValueIterator is declared without const for the pointed-to data (for example: typedef int (*MHD_KeyValueIterator)(void *cls, enum MHD_ValueKind kind, char *header, char *value); or if iterator_cls is declared as void * but the iterator only reads from it), then this call violates MISRA C 2023 Rule 8.13. The iterator parameters that point to header and value (and iterator_cls if it is not modified) should be const-qualified (e.g. const char *header, const char *value, const void *cls) whenever possible.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's point is valid in principle but cannot be confirmed from the snippet alone. MISRA C:2023 Rule 8.13 requires pointers to point to const-qualified types whenever the pointed-to object is not modified. In MHD_get_connection_values the function passes iterator_cls, pos->header and pos->value to the callback. If the typedef for MHD_KeyValueIterator or the intended use of iterator_cls allows modification (i.e. the callback is expected to change those objects), then the non-const pointer types are intentional and there is no Rule 8.13 violation. If, however, the callback never modifies iterator_cls, header or value, then the API should declare them as pointers-to-const (for example const void *cls, const char *header, const char *value) and the current non-const declaration would violate Rule 8.13.\n\nSo agent A's scenario describing a violation is correct as a potential/conditional violation, but the code as shown does not provide the typedef or semantics needed to decide definitively. To eliminate the potential violation, change the callback prototype and iterator_cls to use const-qualified pointer types when the data are not mutated by the iterator."
}