{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'iterator_cls' is declared as void * but is never modified in MHD_get_connection_values (it is only forwarded to the iterator callback). According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type when possible \u2014 e.g. declare it as const void * (and adjust the MHD_KeyValueIterator callback type to accept a const void * if the callback does not need to modify the context).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as stated. MISRA 8.13 does require that pointers be const-qualified when possible, but \u201cwhen possible\u201d excludes cases where the pointer is forwarded to an interface that expects a non-const pointer. In this function iterator_cls is not only forwarded unchanged to the MHD_KeyValueIterator callback, that callback (per the provided scenario) is declared to take a void * (non-const). Declaring iterator_cls as const void * here would be incompatible with passing it to a function that expects void * (it would drop const and cause a type mismatch) unless the callback type is also changed. Thus, given the current callback type, it is not possible to make iterator_cls const without changing the API; so flagging this function alone as violating 8.13 is not correct. (If the callback were already declared to accept const void * or the API could be changed, then qualifying const would be appropriate.)"
}