{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe member headers_received is accessed via connection->rq.headers_received and assigned to a non-const pointer (struct MHD_HTTP_Req_Header *pos) but only read from. Since the data is not modified in this function, the pointer type should be const-qualified (e.g. const struct MHD_HTTP_Req_Header *) and/or the member declared as a pointer to const. This usage therefore violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In MHD_get_connection_values the local pointer pos is only used to read the linked list (pos->kind, pos->header, pos->value) and is never used to modify the pointed objects. According to MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible, so pos should be declared as const struct MHD_HTTP_Req_Header *pos. Assigning connection->rq.headers_received (type struct MHD_HTTP_Req_Header *) to a const-qualified pointer is allowed (adding const), and subsequent assignments pos = pos->next are likewise valid because they convert from non-const pointer to pointer-to-const. The calls that pass pos->header and pos->value are unaffected by making pos a pointer-to-const (the members remain the same element types; the const applies to the containing object), so changing pos to const does not prevent the current usage. Therefore the code as written violates Rule 8.13 and the agent A report is correct."
}