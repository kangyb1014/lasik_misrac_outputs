{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos' but is only used for read-only access (pos->kind, pos->header, pos->value, pos->next). It could and should be declared as a pointer to a const-qualified type, e.g. 'const struct MHD_HTTP_Req_Header *pos', so the current code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Minimal supporting type declarations so this translation unit compiles\n   and the function can be exercised in isolation. These mirror the\n   structures used in the target function. */\n\ntypedef unsigned int enum_MHD_ValueKind;\n\n/* Iterator type: returns int; original code compares to MHD_NO. */\ntypedef int (*MHD_KeyValueIterator)(void *cls,\n                                   unsigned kind,\n                                   const char *key,\n                                   const char *value);\n\n/* Symbol used in original code to indicate iterator result. */\nconst int MHD_NO = 0;\n\nstruct MHD_HTTP_Req_Header\n{\n  unsigned kind;\n  const char *header;\n  const char *value;\n  struct MHD_HTTP_Req_Header *next;\n};\n\nstruct request_struct\n{\n  struct MHD_HTTP_Req_Header *headers_received;\n};\n\nstruct MHD_Connection\n{\n  struct request_struct rq;\n};\n\n/* Lightweight logging helper that appends to the requested log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\n\n/* Modified function with probes added. Original logic preserved. */\nint\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum_MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  int idx = 0;\n\n  probe_log(\"ENTER: MHD_get_connection_values connection=%p kind=%u iterator=%p iterator_cls=%p\\n\",\n            (void *)connection, (unsigned)kind, (void *)iterator, iterator_cls);\n\n  if (NULL == connection)\n  {\n    probe_log(\"EXIT: connection is NULL -> return -1\\n\");\n    return -1;\n  }\n\n  ret = 0;\n  probe_log(\"initial ret=%d, starting headers traversal at %p\\n\",\n            ret, (void *)connection->rq.headers_received);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    probe_log(\"loop idx=%d pos=%p kind=%u header=%s value=%s\\n\",\n              idx,\n              (void *)pos,\n              (unsigned)pos->kind,\n              (NULL != pos->header) ? pos->header : \"(null)\",\n              (NULL != pos->value) ? pos->value : \"(null)\");\n\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      probe_log(\"  MATCH at idx=%d -> incremented ret=%d\\n\", idx, ret);\n\n      if (NULL != iterator)\n      {\n        int itres = iterator (iterator_cls,\n                              pos->kind,\n                              pos->header,\n                              pos->value);\n        probe_log(\"  iterator called -> result=%d\\n\", itres);\n\n        if (MHD_NO == itres)\n        {\n          probe_log(\"  iterator returned MHD_NO -> early return ret=%d\\n\", ret);\n          return ret;\n        }\n      }\n    }\n\n    idx++;\n  }\n\n  probe_log(\"EXIT: finished traversal -> returning ret=%d\\n\", ret);\n  return ret;\n}\n"
}