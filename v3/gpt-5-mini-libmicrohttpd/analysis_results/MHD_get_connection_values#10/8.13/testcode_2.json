{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function MHD_get_connection_values takes a non-const pointer parameter 'struct MHD_Connection *connection' but only reads from the object (accesses connection->rq.headers_received and does not modify the connection). According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type (i.e. 'const struct MHD_Connection *connection') when the pointee is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/103.txt\", \"a\");\n\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_get_connection_values: entry. connection=%p, kind=%d, iterator=%p, iterator_cls=%p\\n\",\n            (void *)connection, (int)kind, (void *)iterator, iterator_cls);\n    fflush(log);\n  }\n\n  if (NULL == connection)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"MHD_get_connection_values: connection is NULL -> returning -1\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    return -1;\n  }\n\n  ret = 0;\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_get_connection_values: starting header iteration. headers_received=%p\\n\",\n            (void *)connection->rq.headers_received);\n    fflush(log);\n  }\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"MHD_get_connection_values: visiting header node %p: kind=%d, header=%s, value=%s, next=%p\\n\",\n              (void *)pos,\n              (int)pos->kind,\n              (pos->header ? pos->header : \"(null)\"),\n              (pos->value ? pos->value : \"(null)\"),\n              (void *)pos->next);\n      fflush(log);\n    }\n\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if (log != NULL)\n      {\n        fprintf(log, \"MHD_get_connection_values: header matched kind mask (pos->kind & kind) != 0 -> incremented ret to %d\\n\",\n                ret);\n        fflush(log);\n      }\n\n      if ((NULL != iterator))\n      {\n        int it_res = iterator (iterator_cls,\n                               pos->kind,\n                               pos->header,\n                               pos->value);\n        if (log != NULL)\n        {\n          fprintf(log, \"MHD_get_connection_values: iterator called, result=%d\\n\", it_res);\n          fflush(log);\n        }\n        if (MHD_NO == it_res)\n        {\n          if (log != NULL)\n          {\n            fprintf(log, \"MHD_get_connection_values: iterator returned MHD_NO -> returning %d\\n\", ret);\n            fflush(log);\n            fclose(log);\n          }\n          return ret;\n        }\n      }\n    }\n  }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_get_connection_values: finished iteration -> returning %d\\n\", ret);\n    fflush(log);\n    fclose(log);\n  }\n  return ret;\n}\n"
}