{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'iterator_cls' is declared as void * but is never modified in MHD_get_connection_values (it is only forwarded to the iterator callback). According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type when possible \u2014 e.g. declare it as const void * (and adjust the MHD_KeyValueIterator callback type to accept a const void * if the callback does not need to modify the context).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append logs to /tmp/logs/103.txt */\nstatic void MHD_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  /* Log entry and input state */\n  MHD_probe_log(\"MHD_get_connection_values ENTER: connection=%p, kind=%d, iterator=%p, iterator_cls=%p\",\n                (void *)connection, (int)kind, (void *)iterator, (void *)iterator_cls);\n\n  if (NULL == connection)\n  {\n    MHD_probe_log(\"MHD_get_connection_values: connection is NULL, returning -1\");\n    return -1;\n  }\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      MHD_probe_log(\"header match #%d: pos=%p, pos->kind=%d, header='%s', value='%s'\",\n                    ret, (void *)pos, (int)pos->kind,\n                    (NULL != pos->header) ? pos->header : \"(null)\",\n                    (NULL != pos->value) ? pos->value : \"(null)\");\n\n      if (NULL != iterator)\n      {\n        MHD_probe_log(\"Invoking iterator callback: iterator=%p, iterator_cls=%p, pos=%p\",\n                      (void *)iterator, (void *)iterator_cls, (void *)pos);\n\n        int it_res = iterator (iterator_cls,\n                               pos->kind,\n                               pos->header,\n                               pos->value);\n\n        MHD_probe_log(\"Iterator returned: %d (MHD_NO expected to be non-zero to stop)\", it_res);\n\n        if (MHD_NO == it_res)\n        {\n          MHD_probe_log(\"Iterator requested stop; returning ret=%d\", ret);\n          return ret;\n        }\n      }\n    }\n\n  MHD_probe_log(\"MHD_get_connection_values EXIT: total_matches=%d\", ret);\n  return ret;\n}\n"
}