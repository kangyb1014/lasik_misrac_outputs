{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member headers_received is accessed via connection->rq.headers_received and assigned to a non-const pointer (struct MHD_HTTP_Req_Header *pos) but only read from. Since the data is not modified in this function, the pointer type should be const-qualified (e.g. const struct MHD_HTTP_Req_Header *) and/or the member declared as a pointer to const. This usage therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/103.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"MHD_get_connection_values called: connection=%p kind=%d iterator=%p iterator_cls=%p\\n\",\n            (void *)connection, (int)kind, (void *)iterator, iterator_cls);\n  }\n\n  if (NULL == connection)\n  {\n    if (log)\n    {\n      fprintf(log, \"connection is NULL -> returning -1\\n\");\n      fclose(log);\n    }\n    return -1;\n  }\n\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log)\n    {\n      fprintf(log,\n              \"iterate header node: pos=%p kind=0x%X header_ptr=%p value_ptr=%p header_str=\\\"%s\\\" value_str=\\\"%s\\\"\\n\",\n              (void *)pos,\n              (unsigned int)pos->kind,\n              (void *)pos->header,\n              (void *)pos->value,\n              (pos->header != NULL) ? pos->header : \"(null)\",\n              (pos->value != NULL) ? pos->value : \"(null)\");\n    }\n\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if (log)\n        fprintf(log, \" header matched kind mask -> incremented ret=%d\\n\", ret);\n\n      if ((NULL != iterator) &&\n          (MHD_NO == iterator (iterator_cls,\n                               pos->kind,\n                               pos->header,\n                               pos->value)))\n      {\n        if (log)\n        {\n          fprintf(log, \" iterator returned MHD_NO -> early return ret=%d\\n\", ret);\n          fclose(log);\n        }\n        return ret;\n      }\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"loop finished -> final ret=%d\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n"
}