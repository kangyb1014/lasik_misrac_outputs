{
  "user_message": "An agent A claimed that the following send_upgrade_required code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of send_upgrade_required.\n```c\nstatic enum MHD_Result\nsend_upgrade_required (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (UPGRADE_REQUIRED_PAGE),\n                                            (const void *)\n                                            UPGRADE_REQUIRED_PAGE);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION,\n                               WS_SEC_WEBSOCKET_VERSION))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_UPGRADE_REQUIRED, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf UPGRADE_REQUIRED_PAGE is not a NUL-terminated C string (for example: char UPGRADE_REQUIRED_PAGE[10] = {'H','i'}; or a pointer into a buffer whose valid length does not include a '\\0'), calling strlen(UPGRADE_REQUIRED_PAGE) will scan past the object bounds and can read beyond the object \u2014 violating MISRA C 2023 Rule 21.17. If, however, UPGRADE_REQUIRED_PAGE is a string literal or otherwise guaranteed NUL-terminated (e.g. static const char UPGRADE_REQUIRED_PAGE[] = \"...\"), then strlen is safe and no violation occurs.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. strlen scans memory until a NUL byte, so if UPGRADE_REQUIRED_PAGE is not guaranteed to be NUL-terminated (for example: a char array initialized without a trailing '\\0', or a pointer into a buffer whose valid region does not include a terminator), calling strlen(UPGRADE_REQUIRED_PAGE) can read past the object bounds and thus violates MISRA C 2023 Rule 21.17. If UPGRADE_REQUIRED_PAGE is a string literal or a char array that is guaranteed NUL-terminated (e.g. static const char UPGRADE_REQUIRED_PAGE[] = \"...\"), then strlen is safe and no violation occurs. To ensure compliance in all cases, pass an explicit length (e.g. a separate length constant), or use sizeof(UPGRADE_REQUIRED_PAGE) - 1 when UPGRADE_REQUIRED_PAGE is a string literal/array, or otherwise guarantee the object is NUL-terminated before calling strlen."
}