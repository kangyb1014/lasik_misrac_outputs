{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code conditionally calls __asan_region_is_poisoned, which is an AddressSanitizer/compiler-provided runtime hook (a compiler/toolchain-specific extension). Using this ASan-specific symbol constitutes use of a compiler/toolchain extension and thus violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_reallocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_reallocate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reallocate:\n```c\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n          return NULL;                /* No space */\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      return old;\n    }\n    if (shrinking)\n      return old;   /* Resized in-place, freed part remains allocated */\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n    return NULL;\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n  }\n  return new_blc;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_reallocate code.\n",
  "test_code": "void *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  /* Minimal forward declarations for logging without including stdio.h */\n  typedef struct FILE FILE;\n  extern FILE *fopen(const char *path, const char *mode);\n  extern int fprintf(FILE *stream, const char *format, ...);\n  extern int fclose(FILE *stream);\n\n  /* Helper to append a single log line. Keep it inline here to avoid\n     adding new functions at file scope. */\n  {\n    FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_reallocate ENTRY: pool=%p old=%p old_size=%zu new_size=%zu pos=%zu end=%zu size=%zu\\n\",\n              (void *) pool, (void *) old, old_size, new_size,\n              (size_t) pool->pos, (size_t) pool->end, (size_t) pool->size);\n      fclose(f);\n    }\n  }\n\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  /* Expose the ASan check result into the log for reproducible evidence. */\n  {\n    extern const void *__asan_region_is_poisoned (const void *, size_t);\n    const void *asan_ret = __asan_region_is_poisoned (old, old_size);\n    FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"ASAN CHECK: __asan_region_is_poisoned(old=%p, old_size=%zu) => %p\\n\",\n              (void *) old, old_size, asan_ret);\n      fclose(f);\n    }\n  }\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    /* Log branch and key local variables */\n    {\n      FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"BRANCH: old!=NULL old=%p old_offset=%zu shrinking=%d pool->pos=%zu pool->end=%zu\\n\",\n                (void *) old, old_offset, (int) shrinking, (size_t) pool->pos, (size_t) pool->end);\n        fclose(f);\n      }\n    }\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n        {\n          FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \"RETURN NULL: cannot grow in-place new_apos=%zu pool->end=%zu pool->pos=%zu\\n\",\n                    new_apos, (size_t) pool->end, (size_t) pool->pos);\n            fclose(f);\n          }\n          return NULL;                /* No space */\n        }\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n\n      {\n        FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n        if (f)\n        {\n          fprintf(f, \"RETURN old (resized in-place): old=%p new_size=%zu new_pos=%zu\\n\",\n                  (void *) old, new_size, (size_t) pool->pos);\n          fclose(f);\n        }\n      }\n\n      return old;\n    }\n    if (shrinking)\n    {\n      FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"RETURN old (shrinking, not last block): old=%p\\n\", (void *) old);\n        fclose(f);\n      }\n      return old;   /* Resized in-place, freed part remains allocated */\n    }\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n  {\n    FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"RETURN NULL: cannot allocate new block asize=%zu available=%zu\\n\",\n              asize, (size_t) (pool->end - pool->pos));\n      fclose(f);\n    }\n    return NULL;\n  }\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n\n    {\n      FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MOVED: new_blc=%p old=%p old_size=%zu\\n\",\n                (void *) new_blc, (void *) old, old_size);\n        fclose(f);\n      }\n    }\n  }\n\n  {\n    FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"RETURN new_blc=%p new_size=%zu pos=%zu\\n\",\n              (void *) new_blc, new_size, (size_t) pool->pos);\n      fclose(f);\n    }\n  }\n  return new_blc;\n}\n"
}