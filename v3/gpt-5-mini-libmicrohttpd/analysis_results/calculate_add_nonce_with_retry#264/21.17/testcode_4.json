{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcpy(nonce, nonce2, NONCE_STD_LEN(digest_size)) without any local check of the destination buffer length. If the caller supplied nonce points to a buffer smaller than NONCE_STD_LEN(digest_size) bytes, this memcpy will write beyond the bounds of nonce. (A second possible overflow is if digest_size > MAX_DIGEST so NONCE_STD_LEN(digest_size) > NONCE_STD_LEN(MAX_DIGEST), which would allow the copy size to exceed the storage of the local nonce2 array declared as NONCE_STD_LEN(MAX_DIGEST) + 1.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce_with_retry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2649.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_add_nonce_with_retry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce_with_retry:\n```c\nstatic bool\ncalculate_add_nonce_with_retry (struct MHD_Connection *const connection,\n                                const char *realm,\n                                struct DigestAlgorithm *da,\n                                char *nonce)\n{\n  const uint64_t timestamp1 = MHD_monotonic_msec_counter ();\n  const size_t realm_len = strlen (realm);\n  mhd_assert (! da->hashing);\n\n#ifdef HAVE_MESSAGES\n  if (0 == MHD_get_master (connection->daemon)->digest_auth_rand_size)\n    MHD_DLOG (connection->daemon,\n              _ (\"Random value was not initialised by \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM or \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM_COPY, generated nonces \" \\\n                 \"are predictable.\\n\"));\n#endif\n\n  if (! calculate_add_nonce (connection, timestamp1, realm, realm_len, da,\n                             nonce))\n  {\n    /* Either:\n     * 1. The same nonce was already generated. If it will be used then one\n     * of the clients will fail (as no initial 'nc' value could be given to\n     * the client, the second client which will use 'nc=00000001' will fail).\n     * 2. Another nonce uses the same slot, and this nonce never has been\n     * used by the client and this nonce is still fresh enough.\n     */\n    const size_t digest_size = digest_get_size (da);\n    char nonce2[NONCE_STD_LEN (MAX_DIGEST) + 1];\n    uint64_t timestamp2;\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (da))\n      return false; /* No need to re-try */\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    if (0 == MHD_get_master (connection->daemon)->nonce_nc_size)\n      return false; /* No need to re-try */\n\n    timestamp2 = MHD_monotonic_msec_counter ();\n    if (timestamp1 == timestamp2)\n    {\n      /* The timestamps are equal, need to generate some arbitrary\n       * difference for nonce. */\n      /* As the number is needed only to differentiate clients, weak\n       * pseudo-random generators could be used. Seeding is not needed. */\n      uint64_t base1;\n      uint32_t base2;\n      uint16_t base3;\n      uint8_t base4;\n#ifdef HAVE_RANDOM\n      base1 = ((uint64_t) random ()) ^ UINT64_C (0x54a5acff5be47e63);\n      base4 = 0xb8;\n#elif defined(HAVE_RAND)\n      base1 = ((uint64_t) rand ()) ^ UINT64_C (0xc4bcf553b12f3965);\n      base4 = 0x92;\n#else\n      /* Monotonic msec counter alone does not really help here as it is already\n         known that this value is not unique. */\n      base1 = ((uint64_t) (uintptr_t) nonce2) ^ UINT64_C (0xf2e1b21bc6c92655);\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTR32 (base2, 4);\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      base1 = ((uint64_t) MHD_monotonic_msec_counter ())\n              ^ UINT64_C (0xccab93f72cf5b15);\n#endif\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTL32 (base2, (((base4 >> 4) ^ base4) % 32));\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      /* Use up to 127 ms difference */\n      timestamp2 -= (base4 & DAUTH_JUMPBACK_MAX);\n      if (timestamp1 == timestamp2)\n        timestamp2 -= 2; /* Fallback value */\n    }\n    digest_reset (da);\n    if (! calculate_add_nonce (connection, timestamp2, realm, realm_len, da,\n                               nonce2))\n    {\n      /* No free slot has been found. Re-tries are expensive, just use\n       * the generated nonce. As it is not stored in nonce-nc map array,\n       * the next request of the client will be recognized as valid, but 'stale'\n       * so client should re-try automatically. */\n      return false;\n    }\n    memcpy (nonce, nonce2, NONCE_STD_LEN (digest_size));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified calculate_add_nonce_with_retry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append a log message to /tmp/logs/2649.txt */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *fp = fopen (\"/tmp/logs/2649.txt\", \"a\");\n  if (!fp)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (fp, fmt, ap);\n  fprintf (fp, \"\\n\");\n  va_end (ap);\n  fclose (fp);\n}\n\n/* Probe helper: dump buffer bytes in hex (limited) */\nstatic void\nmhd_log_hex (const char *label, const unsigned char *buf, size_t len, size_t max_print)\n{\n  size_t i, to_print = (len < max_print) ? len : max_print;\n  FILE *fp = fopen (\"/tmp/logs/2649.txt\", \"a\");\n  if (!fp)\n    return;\n  fprintf (fp, \"%s: addr=%p len=%zu (showing up to %zu bytes):\", label, (const void *) buf, len, to_print);\n  for (i = 0; i < to_print; ++i)\n    fprintf (fp, \" %02x\", buf[i]);\n  if (len > to_print)\n    fprintf (fp, \" ...\");\n  fprintf (fp, \"\\n\");\n  fclose (fp);\n}\n\nstatic bool\ncalculate_add_nonce_with_retry (struct MHD_Connection *const connection,\n                                const char *realm,\n                                struct DigestAlgorithm *da,\n                                char *nonce)\n{\n  const uint64_t timestamp1 = MHD_monotonic_msec_counter ();\n  const size_t realm_len = strlen (realm);\n  mhd_assert (! da->hashing);\n\n  mhd_log_probe (\"ENTER calculate_add_nonce_with_retry: connection=%p realm=%p realm_len=%zu timestamp1=%\" PRIu64,\n                 (void *) connection, (void *) realm, realm_len, timestamp1);\n\n#ifdef HAVE_MESSAGES\n  if (0 == MHD_get_master (connection->daemon)->digest_auth_rand_size)\n    MHD_DLOG (connection->daemon,\n              _ (\"Random value was not initialised by \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM or \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM_COPY, generated nonces \" \\\n                 \"are predictable.\\n\"));\n#endif\n\n  if (! calculate_add_nonce (connection, timestamp1, realm, realm_len, da,\n                             nonce))\n  {\n    mhd_log_probe (\"First calculate_add_nonce returned false: connection=%p timestamp1=%\" PRIu64,\n                   (void *) connection, timestamp1);\n\n    /* Either:\n     * 1. The same nonce was already generated. If it will be used then one\n     * of the clients will fail (as no initial 'nc' value could be given to\n     * the client, the second client which will use 'nc=00000001' will fail).\n     * 2. Another nonce uses the same slot, and this nonce never has been\n     * used by the client and this nonce is still fresh enough.\n     */\n    const size_t digest_size = digest_get_size (da);\n    char nonce2[NONCE_STD_LEN (MAX_DIGEST) + 1];\n    uint64_t timestamp2;\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (da))\n    {\n      mhd_log_probe (\"digest_ext_error returned true: aborting retry\");\n      return false; /* No need to re-try */\n    }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n    mhd_log_probe (\"digest_size=%zu NONCE_STD_LEN(digest_size)=%zu nonce2_capacity=%zu\",\n                   digest_size, (size_t) NONCE_STD_LEN (digest_size), (size_t) (sizeof (nonce2)));\n\n    if (0 == MHD_get_master (connection->daemon)->nonce_nc_size)\n    {\n      mhd_log_probe (\"nonce_nc_size is 0: no need to re-try, aborting\");\n      return false; /* No need to re-try */\n    }\n\n    timestamp2 = MHD_monotonic_msec_counter ();\n    mhd_log_probe (\"timestamp2 initial=%\" PRIu64, timestamp2);\n    if (timestamp1 == timestamp2)\n    {\n      mhd_log_probe (\"timestamp1 == timestamp2 branch entered: timestamp1=%\" PRIu64,\n                     timestamp1);\n      /* The timestamps are equal, need to generate some arbitrary\n       * difference for nonce. */\n      /* As the number is needed only to differentiate clients, weak\n       * pseudo-random generators could be used. Seeding is not needed. */\n      uint64_t base1;\n      uint32_t base2;\n      uint16_t base3;\n      uint8_t base4;\n#ifdef HAVE_RANDOM\n      base1 = ((uint64_t) random ()) ^ UINT64_C (0x54a5acff5be47e63);\n      base4 = 0xb8;\n#elif defined(HAVE_RAND)\n      base1 = ((uint64_t) rand ()) ^ UINT64_C (0xc4bcf553b12f3965);\n      base4 = 0x92;\n#else\n      /* Monotonic msec counter alone does not really help here as it is already\n         known that this value is not unique. */\n      base1 = ((uint64_t) (uintptr_t) nonce2) ^ UINT64_C (0xf2e1b21bc6c92655);\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTR32 (base2, 4);\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      base1 = ((uint64_t) MHD_monotonic_msec_counter ())\n              ^ UINT64_C (0xccab93f72cf5b15);\n#endif\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTL32 (base2, (((base4 >> 4) ^ base4) % 32));\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      /* Use up to 127 ms difference */\n      timestamp2 -= (base4 & DAUTH_JUMPBACK_MAX);\n      if (timestamp1 == timestamp2)\n      {\n        timestamp2 -= 2; /* Fallback value */\n        mhd_log_probe (\"timestamp1 still equals timestamp2 after jitter: new timestamp2=%\" PRIu64,\n                       timestamp2);\n      }\n      else\n      {\n        mhd_log_probe (\"timestamp2 changed after jitter: new timestamp2=%\" PRIu64,\n                       timestamp2);\n      }\n    }\n    digest_reset (da);\n    mhd_log_probe (\"Calling second calculate_add_nonce with timestamp2=%\" PRIu64,\n                   timestamp2);\n    if (! calculate_add_nonce (connection, timestamp2, realm, realm_len, da,\n                               nonce2))\n    {\n      /* No free slot has been found. Re-tries are expensive, just use\n       * the generated nonce. As it is not stored in nonce-nc map array,\n       * the next request of the client will be recognized as valid, but 'stale'\n       * so client should re-try automatically. */\n      mhd_log_probe (\"Second calculate_add_nonce returned false: no free slot found, aborting retry\");\n      /* Log nonce2 contents up to a reasonable amount for forensics. */\n      mhd_log_hex (\"nonce2 (post-generate)\", (const unsigned char *) nonce2,\n                   (size_t) (sizeof (nonce2)), 32);\n      return false;\n    }\n\n    {\n      size_t copy_len = (size_t) NONCE_STD_LEN (digest_size);\n      size_t nonce2_capacity = sizeof (nonce2);\n      mhd_log_probe (\"About to memcpy: dest_nonce=%p src_nonce2=%p copy_len=%zu nonce2_capacity=%zu\",\n                     (void *) nonce, (void *) nonce2, copy_len, nonce2_capacity);\n\n      /* Log a short prefix of nonce2 for evidence (safe: within nonce2 capacity) */\n      mhd_log_hex (\"nonce2 (before memcpy)\", (const unsigned char *) nonce2, nonce2_capacity, 32);\n\n      memcpy (nonce, nonce2, NONCE_STD_LEN (digest_size));\n\n      mhd_log_probe (\"memcpy completed: copied %zu bytes from nonce2 to nonce\", copy_len);\n      /* Log prefix of destination nonce to show result (only up to copy_len) */\n      mhd_log_hex (\"nonce (after memcpy)\", (const unsigned char *) nonce, copy_len, 32);\n    }\n  }\n  mhd_log_probe (\"EXIT calculate_add_nonce_with_retry: returning true\");\n  return true;\n}\n"
}