{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as a const pointer to a mutable object: 'struct MHD_Connection *const connection'. Rule 8.13 expects the pointee to be const-qualified when possible (e.g. 'const struct MHD_Connection * const connection'). In the shown body this function only reads from connection (accessing connection->daemon and passing connection to helper functions); there is no direct modification of the pointee. If the helper functions called (calculate_add_nonce, MHD_get_master, etc.) also do not require a mutable MHD_Connection, the pointee could and should be const-qualified. Therefore this declaration violates MISRA C 2023 Rule 8.13 unless one of the called functions requires a non-const pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce_with_retry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2643.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calculate_add_nonce_with_retry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce_with_retry:\n```c\nstatic bool\ncalculate_add_nonce_with_retry (struct MHD_Connection *const connection,\n                                const char *realm,\n                                struct DigestAlgorithm *da,\n                                char *nonce)\n{\n  const uint64_t timestamp1 = MHD_monotonic_msec_counter ();\n  const size_t realm_len = strlen (realm);\n  mhd_assert (! da->hashing);\n\n#ifdef HAVE_MESSAGES\n  if (0 == MHD_get_master (connection->daemon)->digest_auth_rand_size)\n    MHD_DLOG (connection->daemon,\n              _ (\"Random value was not initialised by \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM or \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM_COPY, generated nonces \" \\\n                 \"are predictable.\\n\"));\n#endif\n\n  if (! calculate_add_nonce (connection, timestamp1, realm, realm_len, da,\n                             nonce))\n  {\n    /* Either:\n     * 1. The same nonce was already generated. If it will be used then one\n     * of the clients will fail (as no initial 'nc' value could be given to\n     * the client, the second client which will use 'nc=00000001' will fail).\n     * 2. Another nonce uses the same slot, and this nonce never has been\n     * used by the client and this nonce is still fresh enough.\n     */\n    const size_t digest_size = digest_get_size (da);\n    char nonce2[NONCE_STD_LEN (MAX_DIGEST) + 1];\n    uint64_t timestamp2;\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (da))\n      return false; /* No need to re-try */\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    if (0 == MHD_get_master (connection->daemon)->nonce_nc_size)\n      return false; /* No need to re-try */\n\n    timestamp2 = MHD_monotonic_msec_counter ();\n    if (timestamp1 == timestamp2)\n    {\n      /* The timestamps are equal, need to generate some arbitrary\n       * difference for nonce. */\n      /* As the number is needed only to differentiate clients, weak\n       * pseudo-random generators could be used. Seeding is not needed. */\n      uint64_t base1;\n      uint32_t base2;\n      uint16_t base3;\n      uint8_t base4;\n#ifdef HAVE_RANDOM\n      base1 = ((uint64_t) random ()) ^ UINT64_C (0x54a5acff5be47e63);\n      base4 = 0xb8;\n#elif defined(HAVE_RAND)\n      base1 = ((uint64_t) rand ()) ^ UINT64_C (0xc4bcf553b12f3965);\n      base4 = 0x92;\n#else\n      /* Monotonic msec counter alone does not really help here as it is already\n         known that this value is not unique. */\n      base1 = ((uint64_t) (uintptr_t) nonce2) ^ UINT64_C (0xf2e1b21bc6c92655);\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTR32 (base2, 4);\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      base1 = ((uint64_t) MHD_monotonic_msec_counter ())\n              ^ UINT64_C (0xccab93f72cf5b15);\n#endif\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTL32 (base2, (((base4 >> 4) ^ base4) % 32));\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      /* Use up to 127 ms difference */\n      timestamp2 -= (base4 & DAUTH_JUMPBACK_MAX);\n      if (timestamp1 == timestamp2)\n        timestamp2 -= 2; /* Fallback value */\n    }\n    digest_reset (da);\n    if (! calculate_add_nonce (connection, timestamp2, realm, realm_len, da,\n                               nonce2))\n    {\n      /* No free slot has been found. Re-tries are expensive, just use\n       * the generated nonce. As it is not stored in nonce-nc map array,\n       * the next request of the client will be recognized as valid, but 'stale'\n       * so client should re-try automatically. */\n      return false;\n    }\n    memcpy (nonce, nonce2, NONCE_STD_LEN (digest_size));\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified calculate_add_nonce_with_retry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/2643.txt\", \"a\");\n  if (!f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic bool\ncalculate_add_nonce_with_retry (struct MHD_Connection *const connection,\n                                const char *realm,\n                                struct DigestAlgorithm *da,\n                                char *nonce)\n{\n  const uint64_t timestamp1 = MHD_monotonic_msec_counter ();\n  const size_t realm_len = strlen (realm);\n\n  mhd_probe_log (\"ENTER: calculate_add_nonce_with_retry: connection=%p, connection->daemon=%p, realm=%p, realm_len=%zu, da=%p, nonce=%p\",\n                 (void *) connection, (void *) (connection ? connection->daemon : NULL), (const void *) realm, realm_len, (void *) da, (void *) nonce);\n\n  mhd_assert (! da->hashing);\n\n#ifdef HAVE_MESSAGES\n  /* Probe the master state used in the original condition */\n  {\n    size_t rand_size = MHD_get_master (connection->daemon)->digest_auth_rand_size;\n    mhd_probe_log (\"HAVE_MESSAGES: digest_auth_rand_size=%zu\", rand_size);\n    if (0 == rand_size)\n      MHD_DLOG (connection->daemon,\n                _ (\"Random value was not initialised by \" \\\n                   \"MHD_OPTION_DIGEST_AUTH_RANDOM or \" \\\n                   \"MHD_OPTION_DIGEST_AUTH_RANDOM_COPY, generated nonces \" \\\n                   \"are predictable.\\n\"));\n  }\n#endif\n\n  mhd_probe_log (\"Calling calculate_add_nonce with timestamp1=%llu\", (unsigned long long) timestamp1);\n  if (! calculate_add_nonce (connection, timestamp1, realm, realm_len, da,\n                             nonce))\n  {\n    mhd_probe_log (\"First calculate_add_nonce failed for timestamp1=%llu\", (unsigned long long) timestamp1);\n    /* Either:\n     * 1. The same nonce was already generated. If it will be used then one\n     * of the clients will fail (as no initial 'nc' value could be given to\n     * the client, the second client which will use 'nc=00000001' will fail).\n     * 2. Another nonce uses the same slot, and this nonce never has been\n     * used by the client and this nonce is still fresh enough.\n     */\n    const size_t digest_size = digest_get_size (da);\n    char nonce2[NONCE_STD_LEN (MAX_DIGEST) + 1];\n    uint64_t timestamp2;\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (da))\n    {\n      mhd_probe_log (\"digest_ext_error returned true -> returning false (no retry)\");\n      return false; /* No need to re-try */\n    }\n    mhd_probe_log (\"digest_ext_error returned false -> may retry\");\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n    /* Probe nonce_nc_size used in original condition */\n    {\n      size_t nc_size = MHD_get_master (connection->daemon)->nonce_nc_size;\n      mhd_probe_log (\"nonce_nc_size=%zu\", nc_size);\n      if (0 == nc_size)\n      {\n        mhd_probe_log (\"nonce_nc_size is 0 -> returning false (no retry)\");\n        return false; /* No need to re-try */\n      }\n    }\n\n    timestamp2 = MHD_monotonic_msec_counter ();\n    mhd_probe_log (\"timestamp1=%llu, timestamp2(before)=%llu\", (unsigned long long) timestamp1, (unsigned long long) timestamp2);\n    if (timestamp1 == timestamp2)\n    {\n      mhd_probe_log (\"timestamp1 == timestamp2, entering jitter branch to produce timestamp2 difference\");\n      /* The timestamps are equal, need to generate some arbitrary\n       * difference for nonce. */\n      /* As the number is needed only to differentiate clients, weak\n       * pseudo-random generators could be used. Seeding is not needed. */\n      uint64_t base1;\n      uint32_t base2;\n      uint16_t base3;\n      uint8_t base4;\n#ifdef HAVE_RANDOM\n      base1 = ((uint64_t) random ()) ^ UINT64_C (0x54a5acff5be47e63);\n      base4 = 0xb8;\n      mhd_probe_log (\"HAVE_RANDOM: base1=%llu, base4=0x%02x\", (unsigned long long) base1, (unsigned) base4);\n#elif defined(HAVE_RAND)\n      base1 = ((uint64_t) rand ()) ^ UINT64_C (0xc4bcf553b12f3965);\n      base4 = 0x92;\n      mhd_probe_log (\"HAVE_RAND: base1=%llu, base4=0x%02x\", (unsigned long long) base1, (unsigned) base4);\n#else\n      /* Monotonic msec counter alone does not really help here as it is already\n         known that this value is not unique. */\n      base1 = ((uint64_t) (uintptr_t) nonce2) ^ UINT64_C (0xf2e1b21bc6c92655);\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTR32 (base2, 4);\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      base1 = ((uint64_t) MHD_monotonic_msec_counter ())\n              ^ UINT64_C (0xccab93f72cf5b15);\n      mhd_probe_log (\"No RAND/RAND: base1=%llu, base2=0x%08x, base3=0x%04x, base4=0x%02x\",\n                     (unsigned long long) base1, (unsigned) base2, (unsigned) base3, (unsigned) base4);\n#endif\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTL32 (base2, (((base4 >> 4) ^ base4) % 32));\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      /* Use up to 127 ms difference */\n      timestamp2 -= (base4 & DAUTH_JUMPBACK_MAX);\n      mhd_probe_log (\"timestamp2(after jitter)=%llu (base4=0x%02x)\", (unsigned long long) timestamp2, (unsigned) base4);\n      if (timestamp1 == timestamp2)\n      {\n        timestamp2 -= 2; /* Fallback value */\n        mhd_probe_log (\"timestamp1 still equals timestamp2, applied fallback -> timestamp2=%llu\", (unsigned long long) timestamp2);\n      }\n    }\n    digest_reset (da);\n    mhd_probe_log (\"Calling calculate_add_nonce with timestamp2=%llu\", (unsigned long long) timestamp2);\n    if (! calculate_add_nonce (connection, timestamp2, realm, realm_len, da,\n                               nonce2))\n    {\n      /* No free slot has been found. Re-tries are expensive, just use\n       * the generated nonce. As it is not stored in nonce-nc map array,\n       * the next request of the client will be recognized as valid, but 'stale'\n       * so client should re-try automatically. */\n      mhd_probe_log (\"Second calculate_add_nonce failed for timestamp2=%llu -> returning false (use generated nonce)\", (unsigned long long) timestamp2);\n      return false;\n    }\n    memcpy (nonce, nonce2, NONCE_STD_LEN (digest_size));\n    mhd_probe_log (\"Second calculate_add_nonce succeeded, copied nonce2 into nonce (digest_size=%zu)\", digest_size);\n  }\n  mhd_probe_log (\"Exiting calculate_add_nonce_with_retry -> returning true\");\n  return true;\n}\n"
}