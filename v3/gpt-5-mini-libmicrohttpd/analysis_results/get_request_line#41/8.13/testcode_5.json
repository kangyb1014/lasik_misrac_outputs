{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment only reads from the buffer (pointer subtraction to compute an offset) but the pointers used appear as non-const. If struct members are declared like\n  char *version;\n  char *read_buffer;\nthen Rule 8.13 is violated because these pointers should be const-qualified (e.g. const char *version; const char *read_buffer;) since the object is not modified here. Change the member types to point to const-qualified types to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_request_line code that contains useful probe functions that print useful logs to a file \"/tmp/logs/413.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_request_line as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_request_line:\n```c\nstatic bool\nget_request_line (struct MHD_Connection *c)\n{\n  const int discp_lvl = c->daemon->client_discipline;\n  /* Parse whitespace in URI, special parsing of the request line */\n  const bool wsp_in_uri = (0 >= discp_lvl);\n  /* Keep whitespace in URI, give app URI with whitespace instead of\n     automatic redirect to fixed URI */\n  const bool wsp_in_uri_keep = (-2 >= discp_lvl);\n\n  if (! get_request_line_inner (c))\n  {\n    /* End of the request line has not been found yet */\n    mhd_assert ((! wsp_in_uri) || NULL == c->rq.version);\n    if ((NULL != c->rq.version) &&\n        (HTTP_VER_LEN <\n         (c->rq.hdrs.rq_line.proc_pos\n          - (size_t) (c->rq.version - c->read_buffer))))\n    {\n      c->rq.http_ver = MHD_HTTP_VER_INVALID;\n      transmit_error_response_static (c,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_MALFORMED);\n      return true; /* Error in the request */\n    }\n    return false;\n  }\n  if (MHD_CONNECTION_REQ_LINE_RECEIVING < c->state)\n    return true; /* Error in the request */\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  if (0 != c->rq.hdrs.rq_line.num_ws_in_uri)\n  {\n    if (! wsp_in_uri)\n    {\n      transmit_error_response_static (c,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      RQ_TARGET_INVALID_CHAR);\n      return true; /* Error in the request */\n    }\n    if (! wsp_in_uri_keep)\n    {\n      send_redirect_fixed_rq_target (c);\n      return true; /* Error in the request */\n    }\n  }\n  if (! process_request_target (c))\n    return true; /* Error in processing */\n\n  c->state = MHD_CONNECTION_REQ_LINE_RECEIVED;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_request_line code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nstatic bool\nget_request_line (struct MHD_Connection *c)\n{\n  const int discp_lvl = c->daemon->client_discipline;\n  /* Parse whitespace in URI, special parsing of the request line */\n  const bool wsp_in_uri = (0 >= discp_lvl);\n  /* Keep whitespace in URI, give app URI with whitespace instead of\n     automatic redirect to fixed URI */\n  const bool wsp_in_uri_keep = (-2 >= discp_lvl);\n\n  /* --- Logging probe: entry and initial state --- */\n  {\n    FILE *log = fopen(\"/tmp/logs/413.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"enter get_request_line: conn=%p\\n\", (void *) c);\n      fprintf(log, \"discp_lvl=%d, wsp_in_uri=%d, wsp_in_uri_keep=%d\\n\",\n              discp_lvl, (int) wsp_in_uri, (int) wsp_in_uri_keep);\n      fprintf(log, \"state=%d\\n\", c->state);\n      fprintf(log, \"read_buffer=%p, rq.version=%p, hdrs.rq_line.proc_pos=%zu\\n\",\n              (void *) c->read_buffer,\n              (void *) c->rq.version,\n              c->rq.hdrs.rq_line.proc_pos);\n      fclose(log);\n    }\n  }\n\n  if (! get_request_line_inner (c))\n  {\n    /* End of the request line has not been found yet */\n    mhd_assert ((! wsp_in_uri) || NULL == c->rq.version);\n\n    /* --- Logging probe: get_request_line_inner returned false --- */\n    {\n      FILE *log = fopen(\"/tmp/logs/413.txt\", \"a\");\n      if (log)\n      {\n        long long ver_off = -1LL;\n        if (NULL != c->rq.version && NULL != c->read_buffer)\n          ver_off = (long long) (c->rq.version - c->read_buffer);\n        fprintf(log, \"get_request_line_inner: version=%p, read_buffer=%p, version_offset=%lld\\n\",\n                (void *) c->rq.version, (void *) c->read_buffer, ver_off);\n        fprintf(log, \"proc_pos=%zu, HTTP_VER_LEN=%d\\n\",\n                c->rq.hdrs.rq_line.proc_pos, HTTP_VER_LEN);\n        fclose(log);\n      }\n    }\n\n    if ((NULL != c->rq.version) &&\n        (HTTP_VER_LEN <\n         (c->rq.hdrs.rq_line.proc_pos\n          - (size_t) (c->rq.version - c->read_buffer))))\n    {\n      /* --- Logging probe: detected http version length overflow scenario --- */\n      {\n        FILE *log = fopen(\"/tmp/logs/413.txt\", \"a\");\n        if (log)\n        {\n          long long ver_off = (long long) (c->rq.version - c->read_buffer);\n          fprintf(log, \"HTTP version overflow: version_offset=%lld, proc_pos=%zu, HTTP_VER_LEN=%d\\n\",\n                  ver_off,\n                  c->rq.hdrs.rq_line.proc_pos,\n                  HTTP_VER_LEN);\n          fclose(log);\n        }\n      }\n\n      c->rq.http_ver = MHD_HTTP_VER_INVALID;\n      transmit_error_response_static (c,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_MALFORMED);\n\n      /* --- Logging probe: transmitted bad request (malformed) --- */\n      {\n        FILE *log = fopen(\"/tmp/logs/413.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"action: transmit_error_response_static -> REQUEST_MALFORMED\\n\");\n          fclose(log);\n        }\n      }\n\n      return true; /* Error in the request */\n    }\n    return false;\n  }\n\n  if (MHD_CONNECTION_REQ_LINE_RECEIVING < c->state)\n    return true; /* Error in the request */\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  if (0 != c->rq.hdrs.rq_line.num_ws_in_uri)\n  {\n    /* --- Logging probe: whitespace in URI detected --- */\n    {\n      FILE *log = fopen(\"/tmp/logs/413.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"num_ws_in_uri=%d\\n\", c->rq.hdrs.rq_line.num_ws_in_uri);\n        fclose(log);\n      }\n    }\n\n    if (! wsp_in_uri)\n    {\n      transmit_error_response_static (c,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      RQ_TARGET_INVALID_CHAR);\n\n      /* --- Logging probe: transmitted bad request (invalid char) --- */\n      {\n        FILE *log = fopen(\"/tmp/logs/413.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"action: transmit_error_response_static -> RQ_TARGET_INVALID_CHAR\\n\");\n          fclose(log);\n        }\n      }\n\n      return true; /* Error in the request */\n    }\n    if (! wsp_in_uri_keep)\n    {\n      send_redirect_fixed_rq_target (c);\n\n      /* --- Logging probe: sent redirect for fixed request target --- */\n      {\n        FILE *log = fopen(\"/tmp/logs/413.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"action: send_redirect_fixed_rq_target\\n\");\n          fclose(log);\n        }\n      }\n\n      return true; /* Error in the request */\n    }\n  }\n  if (! process_request_target (c))\n  {\n    /* --- Logging probe: process_request_target failed --- */\n    {\n      FILE *log = fopen(\"/tmp/logs/413.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"process_request_target returned false\\n\");\n        fclose(log);\n      }\n    }\n    return true; /* Error in processing */\n  }\n\n  c->state = MHD_CONNECTION_REQ_LINE_RECEIVED;\n\n  /* --- Logging probe: successfully received request line --- */\n  {\n    FILE *log = fopen(\"/tmp/logs/413.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"state set to MHD_CONNECTION_REQ_LINE_RECEIVED for conn=%p\\n\", (void *) c);\n      fprintf(log, \"final: rq.version=%p, read_buffer=%p, url=%p, url_len=%zu\\n\",\n              (void *) c->rq.version,\n              (void *) c->read_buffer,\n              (void *) c->rq.url,\n              c->rq.url_len);\n      fclose(log);\n    }\n  }\n\n  return true;\n}\n"
}