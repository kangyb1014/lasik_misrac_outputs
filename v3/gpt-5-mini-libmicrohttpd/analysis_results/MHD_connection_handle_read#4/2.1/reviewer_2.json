{
  "user_message": "An agent A claimed that the following MHD_connection_handle_read code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_connection_handle_read.\n```c\nvoid\nMHD_connection_handle_read (struct MHD_Connection *connection,\n                            bool socket_error)\n{\n  ssize_t bytes_read;\n\n  if ( (MHD_CONNECTION_CLOSED == connection->state) ||\n       (connection->suspended) )\n    return;\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    if (MHD_TLS_CONN_CONNECTED > connection->tls_state)\n    {\n      if (! MHD_run_tls_handshake_ (connection))\n        return;\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n\n  mhd_assert (NULL != connection->read_buffer);\n  if (connection->read_buffer_size == connection->read_buffer_offset)\n    return; /* No space for receiving data. */\n\n  bytes_read = connection->recv_cls (connection,\n                                     &connection->read_buffer\n                                     [connection->read_buffer_offset],\n                                     connection->read_buffer_size\n                                     - connection->read_buffer_offset);\n  if ((bytes_read < 0) || socket_error)\n  {\n    if ((MHD_ERR_AGAIN_ == bytes_read) && ! socket_error)\n      return;     /* No new data to process. */\n    if ((bytes_read > 0) && connection->sk_nonblck)\n    { /* Try to detect the socket error */\n      int dummy;\n      bytes_read = connection->recv_cls (connection, &dummy, sizeof (dummy));\n    }\n    if (MHD_ERR_CONNRESET_ == bytes_read)\n    {\n      if ( (MHD_CONNECTION_INIT < connection->state) &&\n           (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"Socket has been disconnected when reading request.\\n\"));\n#endif\n        connection->discard_request = true;\n      }\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n      return;\n    }\n\n#ifdef HAVE_MESSAGES\n    if (MHD_CONNECTION_INIT != connection->state)\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection socket is closed when reading \" \\\n                   \"request due to the error: %s\\n\"),\n                (bytes_read < 0) ? str_conn_error_ (bytes_read) :\n                \"detected connection closure\");\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            NULL);\n    return;\n  }\n\n  if (0 == bytes_read)\n  {   /* Remote side closed connection. */\n    connection->read_closed = true;\n    if ( (MHD_CONNECTION_INIT < connection->state) &&\n         (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection was closed by remote side with incomplete \"\n                   \"request.\\n\"));\n#endif\n      connection->discard_request = true;\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_CLIENT_ABORT);\n    }\n    else if (MHD_CONNECTION_INIT == connection->state)\n      /* This termination code cannot be reported to the application\n       * because application has not been informed yet about this request */\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_WITH_ERROR);\n    return;\n  }\n  connection->read_buffer_offset += (size_t) bytes_read;\n  MHD_update_last_activity_ (connection);\n#if DEBUG_STATES\n  MHD_DLOG (connection->daemon,\n            _ (\"In function %s handling connection at state: %s\\n\"),\n            MHD_FUNC_,\n            MHD_state_to_string (connection->state));\n#endif\n  /* TODO: check whether the next 'switch()' really needed */\n  switch (connection->state)\n  {\n  case MHD_CONNECTION_INIT:\n  case MHD_CONNECTION_REQ_LINE_RECEIVING:\n  case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n  case MHD_CONNECTION_BODY_RECEIVING:\n  case MHD_CONNECTION_FOOTERS_RECEIVING:\n  case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    /* nothing to do but default action */\n    if (connection->read_closed)\n    {\n      /* TODO: check whether this really needed */\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n    }\n    return;\n  case MHD_CONNECTION_CLOSED:\n    return;\n#ifdef UPGRADE_SUPPORT\n  case MHD_CONNECTION_UPGRADE:\n    mhd_assert (0);\n    return;\n#endif /* UPGRADE_SUPPORT */\n  case MHD_CONNECTION_START_REPLY:\n    /* shrink read buffer to how much is actually used */\n    /* TODO: remove shrink as it handled in special function */\n    if ((0 != connection->read_buffer_size) &&\n        (connection->read_buffer_size != connection->read_buffer_offset))\n    {\n      mhd_assert (NULL != connection->read_buffer);\n      connection->read_buffer =\n        MHD_pool_reallocate (connection->pool,\n                             connection->read_buffer,\n                             connection->read_buffer_size,\n                             connection->read_buffer_offset);\n      connection->read_buffer_size = connection->read_buffer_offset;\n    }\n    break;\n  case MHD_CONNECTION_REQ_LINE_RECEIVED:\n  case MHD_CONNECTION_HEADERS_RECEIVED:\n  case MHD_CONNECTION_HEADERS_PROCESSED:\n  case MHD_CONNECTION_BODY_RECEIVED:\n  case MHD_CONNECTION_FOOTERS_RECEIVED:\n    /* Milestone state, no data should be read */\n    mhd_assert (0); /* Should not be possible */\n    break;\n  case MHD_CONNECTION_CONTINUE_SENDING:\n  case MHD_CONNECTION_HEADERS_SENDING:\n  case MHD_CONNECTION_HEADERS_SENT:\n  case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n  case MHD_CONNECTION_NORMAL_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n  case MHD_CONNECTION_CHUNKED_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_SENT:\n  case MHD_CONNECTION_FOOTERS_SENDING:\n  case MHD_CONNECTION_FULL_REPLY_SENT:\n  default:\n    mhd_assert (0); /* Should not be possible */\n    break;\n  }\n  return;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the connection->state is of an enum type whose enumerators are exactly the MHD_CONNECTION_* values that are all explicitly handled by the switch (including the long list of cases above and the optional UPGRADE_SUPPORT case when configured), then there is no possible value that will fall through to the default label. In that situation the default branch (containing mhd_assert(0); /* Should not be possible */) is unreachable code.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTRY: conn=0x55ae3b7b61e0 state=0 suspended=0 read_buffer_size=16384 read_buffer_offset=0 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=1 socket_error=0\nBEFORE SWITCH: state=0 read_buffer_offset=1 read_buffer_size=16384\nRETURN after handling read for receiving states (state=0)\nENTRY: conn=0x55ae3b7b61e0 state=1 suspended=0 read_buffer_size=16384 read_buffer_offset=1 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=0 socket_error=0\nRemote side closed connection: state=1\nRETURN after client abort handling (incomplete request)\nENTRY: conn=0x55ae3b7b7490 state=0 suspended=0 read_buffer_size=16384 read_buffer_offset=0 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=2 socket_error=0\nBEFORE SWITCH: state=0 read_buffer_offset=2 read_buffer_size=16384\nRETURN after handling read for receiving states (state=0)\nENTRY: conn=0x55ae3b7b7490 state=1 suspended=0 read_buffer_size=16384 read_buffer_offset=2 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=0 socket_error=0\nRemote side closed connection: state=1\nRETURN after client abort handling (incomplete request)\nENTRY: conn=0x55ae3b7b76e0 state=0 suspended=0 read_buffer_size=16384 read_buffer_offset=0 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=3 socket_error=0\nBEFORE SWITCH: state=0 read_buffer_offset=3 read_buffer_size=16384\nRETURN after handling read for receiving states (state=0)\nENTRY: conn=0x55ae3b7b76e0 state=1 suspended=0 read_buffer_size=16384 read_buffer_offset=3 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=0 socket_error=0\nRemote side closed connection: state=1\nRETURN after client abort handling (incomplete request)\nENTRY: conn=0x55ae3b7b7930 state=0 suspended=0 read_buffer_size=16384 read_buffer_offset=0 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=4 socket_error=0\nBEFORE SWITCH: state=0 read_buffer_offset=4 read_buffer_size=16384\nRETURN after handling read for receiving states (state=0)\nENTRY: conn=0x55ae3b7b7930 state=1 suspended=0 read_buffer_size=16384 read_buffer_offset=4 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=0 socket_error=0\nRemote side closed connection: state=1\nRETURN after client abort handling (incomplete request)\nENTRY: conn=0x55ae3b7b7b80 state=0 suspended=0 read_buffer_size=16384 read_buffer_offset=0 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=5 socket_error=0\nBEFORE SWITCH: state=0 read_buffer_offset=5 read_buffer_size=16384\nRETURN after handling read for receiving states (state=0)\nENTRY: conn=0x55ae3b7b7b80 state=1 suspended=0 read_buffer_size=16384 read_buffer_offset=5 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=0 socket_error=0\nRemote side closed connection: state=1\nRETURN after client abort handling (incomplete request)\nENTRY: conn=0x55ae3b7b7dd0 state=0 suspended=0 read_buffer_size=16384 read_buffer_offset=0 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=6 socket_error=0\nBEFORE SWITCH: state=0 read_buffer_offset=6 read_buffer_size=16384\nRETURN after handling read for receiving states (state=0)\nENTRY: conn=0x55ae3b7b7dd0 state=1 suspended=0 read_buffer_size=16384 read_buffer_offset=6 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=0 socket_error=0\nRemote side closed connection: state=1\nRETURN after client abort handling (incomplete request)\nENTRY: conn=0x55ae3b7b8020 state=0 suspended=0 read_buffer_size=16384 read_buffer_offset=0 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=7 socket_error=0\nBEFORE SWITCH: state=0 read_buffer_offset=7 read_buffer_size=16384\nRETURN after handling read for receiving states (state=0)\nENTRY: conn=0x55ae3b7b8020 state=1 suspended=0 read_buffer_size=16384 read_buffer_offset=7 read_closed=0 discard_request=0\nENTRY: socket_error=0\nAFTER recv_cls: bytes_read=0 socket_error=0\nRemot\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's specific claim \u2014 that the default label is unreachable because every possible enumerator value is handled by the switch \u2014 is not correct in general. First, the function returns early if connection->state == MHD_CONNECTION_CLOSED, so the switch's case MHD_CONNECTION_CLOSED can never be reached; that case label (and its empty body) is therefore itself unreachable code. Second, the default branch may still be reachable in real builds: C enum objects can contain values not equal to any enumerator value, some case labels are under conditional compilation (e.g. UPGRADE_SUPPORT), and build configurations may omit some case labels \u2014 in those situations the default is required as a defensive catch-all. Therefore the agent's scenario (that the default is necessarily unreachable) is not generally correct. Note also that there is an actual unreachable construct in the code (the MHD_CONNECTION_CLOSED case inside the switch), so there is a different potential Rule 2.1 concern, but Agent A's reported unreachable default is not reliably correct."
}