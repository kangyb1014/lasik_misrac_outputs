{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'pos' is declared as 'struct MHD_Connection *pos' and is assigned from 'daemon->normal_timeout_tail'. In this function 'pos' (and 'earliest_tmot_conn') are only used for read-only access (reading fields like last_activity and connection_timeout_ms) and are never used to modify the pointed-to MHD_Connection objects. Therefore they could legally be declared as pointers to const (e.g. 'const struct MHD_Connection *pos'), but they are not. This fails to qualify the pointer as pointing-to-const where possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_timeout64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/773.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_timeout64 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    *timeout64 = connection_get_wait (earliest_tmot_conn);\n    return MHD_YES;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_timeout64 code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/773.txt. */\nstatic void\nmhd_log_probe(const char *tag,\n              struct MHD_Daemon *daemon,\n              struct MHD_Connection *pos,\n              struct MHD_Connection *earliest,\n              uint64_t earliest_deadline,\n              uint64_t timeout64_val)\n{\n  FILE *f = fopen(\"/tmp/logs/773.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t now = time(NULL);\n  fprintf(f, \"[%ld] %s: daemon=%p\\n\", (long) now, tag, (void *) daemon);\n  if (pos != NULL)\n  {\n    fprintf(f, \"  pos=%p\", (void *) pos);\n    /* Safely attempt to print fields that are used in this function. */\n    fprintf(f, \" last_activity=%llu connection_timeout_ms=%llu\\n\",\n            (unsigned long long) pos->last_activity,\n            (unsigned long long) pos->connection_timeout_ms);\n  }\n  else\n  {\n    fprintf(f, \"  pos=NULL\\n\");\n  }\n\n  if (earliest != NULL)\n  {\n    fprintf(f, \"  earliest=%p earliest_deadline=%llu\\n\",\n            (void *) earliest,\n            (unsigned long long) earliest_deadline);\n  }\n  else\n  {\n    fprintf(f, \"  earliest=NULL earliest_deadline=%llu\\n\",\n            (unsigned long long) earliest_deadline);\n  }\n\n  /* If caller provided a timeout value, log it. A value of UINT64_MAX indicates \"not set\". */\n  fprintf(f, \"  timeout64_val=%llu\\n\", (unsigned long long) timeout64_val);\n\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  /* Log entry to function. */\n  mhd_log_probe(\"enter\", daemon, NULL, NULL, 0ULL, (uint64_t) UINT64_MAX);\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    mhd_log_probe(\"thread_per_conn_illegal_call\", daemon, NULL, NULL, 0ULL, (uint64_t) UINT64_MAX);\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    mhd_log_probe(\"early_return_data_or_status_pending\", daemon, NULL, NULL, 0ULL, 0ULL);\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    *timeout64 = 0;\n    mhd_log_probe(\"early_return_epoll_ready\", daemon, NULL, NULL, 0ULL, 0ULL);\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n\n  /* Log the initial normal_timeout_tail probe. */\n  mhd_log_probe(\"probe_normal_timeout_tail_before_check\", daemon, pos, earliest_tmot_conn, earliest_deadline, (uint64_t) UINT64_MAX);\n\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n\n    /* Log when we set earliest from normal_timeout_tail. */\n    mhd_log_probe(\"set_earliest_from_normal_tail\", daemon, pos, earliest_tmot_conn, earliest_deadline, (uint64_t) UINT64_MAX);\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    /* Log each manual timeout probe. */\n    mhd_log_probe(\"probe_manual_timeout_tail_iteration\", daemon, pos, earliest_tmot_conn, earliest_deadline, (uint64_t) UINT64_MAX);\n\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n\n        /* Log updates to earliest_tmot_conn during manual timeout scanning. */\n        mhd_log_probe(\"update_earliest_from_manual\", daemon, pos, earliest_tmot_conn, earliest_deadline, (uint64_t) UINT64_MAX);\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    /* Call the original helper, but capture and log the computed wait. */\n    uint64_t wait = connection_get_wait (earliest_tmot_conn);\n    mhd_log_probe(\"selected_earliest_and_computed_wait\", daemon, earliest_tmot_conn, earliest_tmot_conn, earliest_deadline, wait);\n    *timeout64 = wait;\n    return MHD_YES;\n  }\n\n  mhd_log_probe(\"no_earliest_found_return_no\", daemon, NULL, NULL, 0ULL, (uint64_t) UINT64_MAX);\n  return MHD_NO;\n}\n"
}