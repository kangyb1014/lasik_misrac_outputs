{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression can be invariant when the macro expands to a compile-time constant. For example, if threading support is disabled (e.g. MHD_USE_THREADS not defined) the macro MHD_D_IS_USING_THREAD_PER_CONN_(daemon) may be defined to 0 (or 1) regardless of the runtime 'daemon' argument, making the if (MHD_D_IS_USING_THREAD_PER_CONN_(daemon)) an invariant controlling expression (if (0) or if (1)). In that compilation/configuration case Rule 14.3 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_timeout64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/775.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_timeout64 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    *timeout64 = connection_get_wait (earliest_tmot_conn);\n    return MHD_YES;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_timeout64 code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n  /* Probe/logging helper: append human readable diagnostic info to file. */\n  static void mhd_get_timeout64_log(const char *stage,\n                                    struct MHD_Daemon *d,\n                                    int thread_per_conn_flag,\n                                    int using_epoll_macro)\n  {\n    FILE *f = fopen(\"/tmp/logs/775.txt\", \"a\");\n    if (!f)\n      return;\n    fprintf(f, \"MHD_get_timeout64: %s\\n\", stage);\n    fprintf(f, \"  daemon=%p thread_per_conn=%d using_epoll_macro=%d\\n\",\n            (void *)d, thread_per_conn_flag, using_epoll_macro);\n    if (d)\n    {\n      fprintf(f, \"  data_already_pending=%d cleanup_head=%p resuming=%d have_new=%d shutdown=%d\\n\",\n              (int)d->data_already_pending,\n              (void *)d->cleanup_head,\n              (int)d->resuming,\n              (int)d->have_new,\n              (int)d->shutdown);\n#ifdef EPOLL_SUPPORT\n      fprintf(f, \"  eready_head=%p\",\n              (void *)d->eready_head);\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n      fprintf(f, \" eready_urh_head=%p\",\n              (void *)d->eready_urh_head);\n#endif\n      fprintf(f, \"\\n\");\n#endif\n      fprintf(f, \"  normal_timeout_tail=%p manual_timeout_tail=%p\\n\",\n              (void *)d->normal_timeout_tail,\n              (void *)d->manual_timeout_tail);\n    }\n    fflush(f);\n    fclose(f);\n  }\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  /* Evaluate the potentially invariant macro into a local variable and log it. */\n  int thread_per_conn_flag = MHD_D_IS_USING_THREAD_PER_CONN_ (daemon);\n  mhd_get_timeout64_log(\"after_thread_per_conn_eval\", daemon, thread_per_conn_flag, -1);\n\n  if (thread_per_conn_flag)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    /* Log the fact we're taking the early return due to thread-per-conn mode. */\n    mhd_get_timeout64_log(\"return_due_to_thread_per_conn\", daemon, thread_per_conn_flag, -1);\n    return MHD_NO;\n  }\n\n  mhd_get_timeout64_log(\"before_pending_checks\", daemon, thread_per_conn_flag, -1);\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    mhd_get_timeout64_log(\"return_due_to_pending_data_or_states\", daemon, thread_per_conn_flag, -1);\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  {\n    int using_epoll_macro = MHD_D_IS_USING_EPOLL_ (daemon);\n    mhd_get_timeout64_log(\"before_epoll_check\", daemon, thread_per_conn_flag, using_epoll_macro);\n    if (using_epoll_macro &&\n        ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n         || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n       ) )\n    {\n      /* Some connection(s) already have some data pending. */\n      *timeout64 = 0;\n      mhd_get_timeout64_log(\"return_due_to_epoll_ready\", daemon, thread_per_conn_flag, using_epoll_macro);\n      return MHD_YES;\n    }\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n    /* Log initial earliest candidate from normal_timeout_tail */\n    {\n      FILE *f = fopen(\"/tmp/logs/775.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"initial earliest from normal_timeout_tail: pos=%p connection_timeout_ms=%llu last_activity=%llu earliest_deadline=%llu\\n\",\n                (void *)pos,\n                (unsigned long long)pos->connection_timeout_ms,\n                (unsigned long long)pos->last_activity,\n                (unsigned long long)earliest_deadline);\n        fclose(f);\n      }\n    }\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      /* Log each manual timeout candidate we inspect. */\n      {\n        FILE *f = fopen(\"/tmp/logs/775.txt\", \"a\");\n        if (f)\n        {\n          fprintf(f, \"inspect manual pos=%p connection_timeout_ms=%llu last_activity=%llu\\n\",\n                  (void *)pos,\n                  (unsigned long long)pos->connection_timeout_ms,\n                  (unsigned long long)pos->last_activity);\n          fclose(f);\n        }\n      }\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n        /* Log whenever we update the earliest. */\n        {\n          FILE *f = fopen(\"/tmp/logs/775.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \"update earliest to pos=%p earliest_deadline=%llu\\n\",\n                    (void *)earliest_tmot_conn,\n                    (unsigned long long)earliest_deadline);\n            fclose(f);\n          }\n        }\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    *timeout64 = connection_get_wait (earliest_tmot_conn);\n    {\n      FILE *f = fopen(\"/tmp/logs/775.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"final: earliest_tmot_conn=%p timeout64=%llu\\n\",\n                (void *)earliest_tmot_conn,\n                (unsigned long long)*timeout64);\n        fclose(f);\n      }\n    }\n    mhd_get_timeout64_log(\"return_with_timeout\", daemon, thread_per_conn_flag, -1);\n    return MHD_YES;\n  }\n  mhd_get_timeout64_log(\"return_no_timeout\", daemon, thread_per_conn_flag, -1);\n  return MHD_NO;\n}\n"
}