{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment performs a bitwise OR of the same macro with itself: (MHD_DIGEST_AUTH_ALGO3_NON_SESSION | MHD_DIGEST_AUTH_ALGO3_NON_SESSION). This is redundant because X | X == X, so the duplicate operand (and the redundant OR) can be removed without changing program behaviour. Therefore this constitutes dead (redundant) code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_base_digest_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2782.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_base_digest_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_base_digest_algo:\n```c\n_MHD_static_inline enum MHD_DigestBaseAlgo\nget_base_digest_algo (enum MHD_DigestAuthAlgo3 algo3)\n{\n  unsigned int base_algo;\n\n  base_algo =\n    ((unsigned int) algo3)\n    & ~((unsigned int)\n        (MHD_DIGEST_AUTH_ALGO3_NON_SESSION\n         | MHD_DIGEST_AUTH_ALGO3_NON_SESSION));\n  return (enum MHD_DigestBaseAlgo) base_algo;\n}\n```\n</target_code>\nPlease provide the modified get_base_digest_algo code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: write a single-line log entry for each call. */\nstatic void mhd_log_probe(unsigned int algo3_u, unsigned int mask_u,\n                          unsigned int before_u, unsigned int after_u)\n{\n  FILE *f = fopen(\"/tmp/logs/2782.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log input value, intermediate values and result to help reproduce the\n       redundant-operand scenario reported (duplicate OR operand). */\n    fprintf(f,\n            \"get_base_digest_algo: algo3=0x%X, before_mask=0x%X, mask=0x%X, after_mask=0x%X\\n\",\n            (unsigned) algo3_u, before_u, mask_u, after_u);\n    fclose(f);\n  }\n}\n\n_MHD_static_inline enum MHD_DigestBaseAlgo\nget_base_digest_algo (enum MHD_DigestAuthAlgo3 algo3)\n{\n  unsigned int base_algo;\n\n  /* Preserve original calculation including the duplicated OR operand\n     so the behaviour is identical to the original code under test. */\n  unsigned int before = (unsigned int) algo3;\n  unsigned int mask = ~((unsigned int)\n                         (MHD_DIGEST_AUTH_ALGO3_NON_SESSION\n                          | MHD_DIGEST_AUTH_ALGO3_NON_SESSION));\n\n  base_algo = before & mask;\n\n  /* Probe: record values so other agents can see the redundant operand\n     effect (or lack thereof) and the control/state flow. */\n  mhd_log_probe((unsigned int) algo3, mask, before, base_algo);\n\n  return (enum MHD_DigestBaseAlgo) base_algo;\n}\n"
}