{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nMHD_lookup_connection_value_n is called with &enc and NULL for the length. If that lookup returns a pointer to a header value that is not NUL-terminated (or whose validity length is not reported because the length argument was NULL), then the subsequent call MHD_str_equal_caseless_(enc, \"chunked\") may internally use standard <string.h> functions that assume NUL-terminated strings (e.g. strcmp/strcasecmp/strlen) and thus read past the end of the object referenced by enc. That would be an out-of-bounds access and therefore a violation of MISRA C 2023 Rule 21.17. To avoid the violation, the code should obtain the value length and use a length-aware comparison or ensure the returned string is NUL-terminated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_connection_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/529.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_connection_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_connection_headers:\n```c\nstatic void\nparse_connection_headers (struct MHD_Connection *connection)\n{\n  const char *clen;\n  const char *enc;\n  size_t val_len;\n\n#ifdef COOKIE_SUPPORT\n  if (MHD_PARSE_COOKIE_NO_MEMORY == parse_cookie_header (connection))\n  {\n    handle_req_cookie_no_space (connection);\n    return;\n  }\n#endif /* COOKIE_SUPPORT */\n  if ( (-3 < connection->daemon->client_discipline) &&\n       (MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver)) &&\n       (MHD_NO ==\n        MHD_lookup_connection_value_n (connection,\n                                       MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_HOST,\n                                       MHD_STATICSTR_LEN_ (\n                                         MHD_HTTP_HEADER_HOST),\n                                       NULL,\n                                       NULL)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Received HTTP/1.1 request without `Host' header.\\n\"));\n#endif\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_BAD_REQUEST,\n                                    REQUEST_LACKS_HOST);\n    return;\n  }\n\n  /* The presence of the request body is indicated by \"Content-Length:\" or\n     \"Transfer-Encoding:\" request headers.\n     Unless one of these two headers is used, the request has no request body.\n     See RFC9112, Section 6, paragraph 4. */\n  connection->rq.remaining_upload_size = 0;\n  if (MHD_NO !=\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_TRANSFER_ENCODING),\n                                     &enc,\n                                     NULL))\n  {\n    if (! MHD_str_equal_caseless_ (enc,\n                                   \"chunked\"))\n    {\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_UNSUPPORTED_TR_ENCODING);\n      return;\n    }\n    else if (MHD_NO !=\n             MHD_lookup_connection_value_n (connection,\n                                            MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                            MHD_STATICSTR_LEN_ ( \\\n                                              MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                            NULL,\n                                            NULL))\n    {\n      /* TODO: add individual settings */\n      if (1 <= connection->daemon->client_discipline)\n      {\n        transmit_error_response_static (connection,\n                                        MHD_HTTP_BAD_REQUEST,\n                                        REQUEST_LENGTH_WITH_TR_ENCODING);\n        return;\n      }\n      else\n      {\n        /* Must close connection after reply to prevent potential attack */\n        connection->keepalive = MHD_CONN_MUST_CLOSE;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The 'Content-Length' request header is ignored \"\n                     \"as chunked Transfer-Encoding is used \"\n                     \"for this request.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n    }\n    connection->rq.have_chunked_upload = true;\n    connection->rq.remaining_upload_size = MHD_SIZE_UNKNOWN;\n  }\n  else if (MHD_NO !=\n           MHD_lookup_connection_value_n (connection,\n                                          MHD_HEADER_KIND,\n                                          MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          MHD_STATICSTR_LEN_ (\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                          &clen,\n                                          &val_len))\n  {\n    size_t num_digits;\n\n    num_digits = MHD_str_to_uint64_n_ (clen,\n                                       val_len,\n                                       &connection->rq.remaining_upload_size);\n\n    if (((0 == num_digits) &&\n         (0 != val_len) &&\n         ('0' <= clen[0]) && ('9' >= clen[0]))\n        || (MHD_SIZE_UNKNOWN == connection->rq.remaining_upload_size))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Too large value of 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      REQUEST_CONTENTLENGTH_TOOLARGE);\n    }\n    else if ((val_len != num_digits) ||\n             (0 == num_digits))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to parse 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_CONTENTLENGTH_MALFORMED);\n    }\n  }\n}\n```\n</target_code>\nPlease provide the modified parse_connection_headers code.\n",
  "test_code": "static void\nparse_connection_headers (struct MHD_Connection *connection)\n{\n  const char *clen;\n  const char *enc;\n  size_t val_len;\n  int rc_te;\n\n  /* Local lightweight logging: include headers inside the function scope so\n     this snippet remains self-contained when inserted into different files. */\n#include <stdio.h>\n\n  /* Log function entry and basic connection info. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (logf)\n    {\n      fprintf (logf, \"parse_connection_headers: entry: connection=%p daemon=%p rq.http_ver=%d client_discipline=%d\\n\",\n               (void *) connection,\n               (void *) (connection ? connection->daemon : NULL),\n               (int) (connection ? connection->rq.http_ver : 0),\n               (int) (connection && connection->daemon ? connection->daemon->client_discipline : 0));\n      fclose (logf);\n    }\n  }\n\n#ifdef COOKIE_SUPPORT\n  if (MHD_PARSE_COOKIE_NO_MEMORY == parse_cookie_header (connection))\n  {\n    handle_req_cookie_no_space (connection);\n    return;\n  }\n#endif /* COOKIE_SUPPORT */\n  if ( (-3 < connection->daemon->client_discipline) &&\n       (MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver)) &&\n       (MHD_NO ==\n        MHD_lookup_connection_value_n (connection,\n                                       MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_HOST,\n                                       MHD_STATICSTR_LEN_ (\n                                         MHD_HTTP_HEADER_HOST),\n                                       NULL,\n                                       NULL)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Received HTTP/1.1 request without `Host' header.\\n\"));\n#endif\n    {\n      FILE *logf = fopen(\"/tmp/logs/529.txt\", \"a\");\n      if (logf)\n      {\n        fprintf (logf, \"parse_connection_headers: missing Host header -> send 400.\\n\");\n        fclose (logf);\n      }\n    }\n\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_BAD_REQUEST,\n                                    REQUEST_LACKS_HOST);\n    return;\n  }\n\n  /* The presence of the request body is indicated by \"Content-Length:\" or\n     \"Transfer-Encoding:\" request headers.\n     Unless one of these two headers is used, the request has no request body.\n     See RFC9112, Section 6, paragraph 4. */\n  connection->rq.remaining_upload_size = 0;\n\n  /* Call the lookup once and log the result to capture the scenario where\n     length is not requested (NULL) and the returned value may not be NUL\n     terminated. */\n  rc_te = MHD_lookup_connection_value_n (connection,\n                                         MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                         MHD_STATICSTR_LEN_ (\n                                           MHD_HTTP_HEADER_TRANSFER_ENCODING),\n                                         &enc,\n                                         NULL);\n  {\n    FILE *logf = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (logf)\n    {\n      fprintf (logf, \"parse_connection_headers: lookup Transfer-Encoding rc=%d enc_ptr=%p length_requested=%s\\n\",\n               rc_te,\n               (void *) enc,\n               \"NULL\");\n      fclose (logf);\n    }\n  }\n\n  if (MHD_NO != rc_te)\n  {\n    /* Log just before calling the caseless comparison. This mirrors the\n       original behavior; the comparison itself may read the value pointed to\n       by `enc` and (if not NUL-terminated) can trigger the out-of-bounds\n       behavior reported by the other agent. */\n    {\n      FILE *logf = fopen(\"/tmp/logs/529.txt\", \"a\");\n      if (logf)\n      {\n        fprintf (logf, \"parse_connection_headers: found Transfer-Encoding header; about to compare enc to \\\"chunked\\\"\\n\");\n        fclose (logf);\n      }\n    }\n\n    if (! MHD_str_equal_caseless_ (enc,\n                                   \"chunked\"))\n    {\n      {\n        FILE *logf = fopen(\"/tmp/logs/529.txt\", \"a\");\n        if (logf)\n        {\n          fprintf (logf, \"parse_connection_headers: Transfer-Encoding != chunked -> send 400. enc_ptr=%p\\n\",\n                   (void *) enc);\n          fclose (logf);\n        }\n      }\n\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_UNSUPPORTED_TR_ENCODING);\n      return;\n    }\n    else if (MHD_NO !=\n             MHD_lookup_connection_value_n (connection,\n                                            MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                            MHD_STATICSTR_LEN_ ( \\\n                                              MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                            NULL,\n                                            NULL))\n    {\n      /* TODO: add individual settings */\n      if (1 <= connection->daemon->client_discipline)\n      {\n        transmit_error_response_static (connection,\n                                        MHD_HTTP_BAD_REQUEST,\n                                        REQUEST_LENGTH_WITH_TR_ENCODING);\n        return;\n      }\n      else\n      {\n        /* Must close connection after reply to prevent potential attack */\n        connection->keepalive = MHD_CONN_MUST_CLOSE;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The 'Content-Length' request header is ignored \"\n                     \"as chunked Transfer-Encoding is used \"\n                     \"for this request.\\n\"));\n#endif /* HAVE_MESSAGES */\n        {\n          FILE *logf = fopen(\"/tmp/logs/529.txt\", \"a\");\n          if (logf)\n          {\n            fprintf (logf, \"parse_connection_headers: chunked + Content-Length present -> ignoring Content-Length and marking connection to close\\n\");\n            fclose (logf);\n          }\n        }\n      }\n    }\n    connection->rq.have_chunked_upload = true;\n    connection->rq.remaining_upload_size = MHD_SIZE_UNKNOWN;\n  }\n  else if (MHD_NO !=\n           MHD_lookup_connection_value_n (connection,\n                                          MHD_HEADER_KIND,\n                                          MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          MHD_STATICSTR_LEN_ (\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                          &clen,\n                                          &val_len))\n  {\n    size_t num_digits;\n\n    {\n      FILE *logf = fopen(\"/tmp/logs/529.txt\", \"a\");\n      if (logf)\n      {\n        fprintf (logf, \"parse_connection_headers: found Content-Length header; clen_ptr=%p val_len=%zu\\n\",\n                 (void *) clen,\n                 val_len);\n        fclose (logf);\n      }\n    }\n\n    num_digits = MHD_str_to_uint64_n_ (clen,\n                                       val_len,\n                                       &connection->rq.remaining_upload_size);\n\n    if (((0 == num_digits) &&\n         (0 != val_len) &&\n         ('0' <= clen[0]) && ('9' >= clen[0]))\n        || (MHD_SIZE_UNKNOWN == connection->rq.remaining_upload_size))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Too large value of 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      REQUEST_CONTENTLENGTH_TOOLARGE);\n    }\n    else if ((val_len != num_digits) ||\n             (0 == num_digits))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to parse 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_CONTENTLENGTH_MALFORMED);\n    }\n  }\n\n  /* Log function exit state relevant to upload parsing. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (logf)\n    {\n      fprintf (logf, \"parse_connection_headers: exit: have_chunked_upload=%d remaining_upload_size=%llu\\n\",\n               (int) connection->rq.have_chunked_upload,\n               (unsigned long long) connection->rq.remaining_upload_size);\n      fclose (logf);\n    }\n  }\n}\n"
}