{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_footer:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_footer (struct MHD_Response *response,\n                         const char *footer,\n                         const char *content)\n{\n  return add_response_entry (response,\n                             MHD_FOOTER_KIND,\n                             footer,\n                             content);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_add_response_footer (struct MHD_Response *response,\n                         const char *footer,\n                         const char *content)\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The shown function is just a thin wrapper that forwards the pointers 'footer' and 'content' to add_response_entry and does not itself call any <string.h> functions. Therefore the fragment does not by itself violate MISRA C:2023 Rule 21.17. A specific violation scenario would be: if add_response_entry implemented something like strcpy(dest_fixed_buf, footer) or memcpy(dest_fixed_buf, content, len) where dest_fixed_buf is a fixed-size buffer and no bounds check is performed (or len exceeds the destination size or the source is not null-terminated), that use would result in accesses beyond object bounds and thus violate Rule 21.17."
}