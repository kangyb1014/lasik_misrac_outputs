{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes c->read_buffer (a mutable buffer pointer) to handle_req_headers_no_space. If that function only reads the buffer, its parameter should be declared as const char * and the pointer should therefore point to a const-qualified type. Without the function prototype we cannot prove the parameter is const; as shown this is a potential violation: a non-const pointer is used where a const-qualified pointer would be appropriate. If handle_req_headers_no_space already declares the parameter as const char * then there is no violation; otherwise this call (and/or the function's parameter type) violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified handle_recv_no_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/433.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of handle_recv_no_space as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of handle_recv_no_space:\n```c\nstatic void\nhandle_recv_no_space (struct MHD_Connection *c,\n                      enum MHD_ProcRecvDataStage stage)\n{\n  mhd_assert (MHD_PROC_RECV_INIT <= stage);\n  mhd_assert (MHD_PROC_RECV_FOOTERS >= stage);\n  mhd_assert (MHD_CONNECTION_FULL_REQ_RECEIVED > c->state);\n  mhd_assert ((MHD_PROC_RECV_INIT != stage) || \\\n              (MHD_CONNECTION_INIT == c->state));\n  mhd_assert ((MHD_PROC_RECV_METHOD != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_URI != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HTTPVER != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HEADERS != stage) || \\\n              (MHD_CONNECTION_REQ_HEADERS_RECEIVING == c->state));\n  mhd_assert (MHD_PROC_RECV_COOKIE != stage); /* handle_req_cookie_no_space() must be called directly */\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_FOOTERS != stage) || \\\n              (MHD_CONNECTION_FOOTERS_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (! c->rq.have_chunked_upload));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (c->rq.have_chunked_upload));\n  switch (stage)\n  {\n  case MHD_PROC_RECV_INIT:\n  case MHD_PROC_RECV_METHOD:\n    /* Some data has been received, but it is not clear yet whether\n     * the received data is an valid HTTP request */\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the initial part of \" \\\n                               \"the request line.\"));\n    return;\n  case MHD_PROC_RECV_URI:\n  case MHD_PROC_RECV_HTTPVER:\n    /* Some data has been received, but the request line is incomplete */\n    mhd_assert (MHD_HTTP_MTHD_NO_METHOD != c->rq.http_mthd);\n    mhd_assert (MHD_HTTP_VER_UNKNOWN == c->rq.http_ver);\n    /* A quick simple check whether the incomplete line looks\n     * like an HTTP request */\n    if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n        (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n    {\n      transmit_error_response_static (c,\n                                      MHD_HTTP_URI_TOO_LONG,\n                                      ERR_MSG_REQUEST_TOO_BIG);\n      return;\n    }\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the URI in \" \\\n                               \"the request line. \" \\\n                               \"The request uses non-standard HTTP request \" \\\n                               \"method token.\"));\n    return;\n  case MHD_PROC_RECV_HEADERS:\n    handle_req_headers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  case MHD_PROC_RECV_BODY_NORMAL:\n  case MHD_PROC_RECV_BODY_CHUNKED:\n    mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n                ! c->rq.some_payload_processed);\n    if (has_unprocessed_upload_body_data_in_buffer (c))\n    {\n      /* The connection must not be in MHD_EVENT_LOOP_INFO_READ state\n         when external polling is used and some data left unprocessed. */\n      mhd_assert (MHD_D_IS_USING_THREADS_ (c->daemon));\n      /* failed to grow the read buffer, and the\n         client which is supposed to handle the\n         received data in a *blocking* fashion\n         (in this mode) did not handle the data as\n         it was supposed to!\n         => we would either have to do busy-waiting\n         (on the client, which would likely fail),\n         or if we do nothing, we would just timeout\n         on the connection (if a timeout is even\n         set!).\n         Solution: we kill the connection with an error */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_INTERNAL_SERVER_ERROR,\n                                      ERROR_MSG_DATA_NOT_HANDLED_BY_APP);\n    }\n    else\n    {\n      if (MHD_PROC_RECV_BODY_NORMAL == stage)\n      {\n        /* A header probably has been added to a suspended connection and\n           it took precisely all the space in the buffer.\n           Very low probability. */\n        mhd_assert (! c->rq.have_chunked_upload);\n        handle_req_headers_no_space (c, NULL, 0);\n      }\n      else\n      {\n        mhd_assert (c->rq.have_chunked_upload);\n        if (c->rq.current_chunk_offset != c->rq.current_chunk_size)\n        { /* Receiving content of the chunk */\n          /* A header probably has been added to a suspended connection and\n             it took precisely all the space in the buffer.\n             Very low probability. */\n          handle_req_headers_no_space (c, NULL, 0);\n        }\n        else\n        {\n          if (0 != c->rq.current_chunk_size)\n          { /* Waiting for chunk-closing CRLF */\n            /* Not really possible as some payload should be\n               processed and the space used by payload should be available. */\n            handle_req_headers_no_space (c, NULL, 0);\n          }\n          else\n          { /* Reading the line with the chunk size */\n            handle_req_chunk_size_line_no_space (c,\n                                                 c->read_buffer,\n                                                 c->read_buffer_offset);\n          }\n        }\n      }\n    }\n    return;\n  case MHD_PROC_RECV_FOOTERS:\n    handle_req_footers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  /* The next cases should not be possible */\n  case MHD_PROC_RECV_COOKIE:\n  default:\n    break;\n  }\n  mhd_assert (0);\n}\n```\n</target_code>\nPlease provide the modified handle_recv_no_space code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe/log helper: append information to /tmp/logs/433.txt. */\nstatic void\nlog_probe_conn (const struct MHD_Connection *c,\n                enum MHD_ProcRecvDataStage stage,\n                const char *note,\n                const char *buf,\n                size_t buf_len)\n{\n  FILE *f = fopen(\"/tmp/logs/433.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* If logging cannot be performed, do nothing and preserve original behavior. */\n    return;\n  }\n\n  /* Basic control-flow/state information */\n  fprintf (f, \"handle_recv_no_space: stage=%d, state=%d, note=%s\\n\",\n           (int) stage,\n           (int) c->state,\n           (note != NULL) ? note : \"(null)\");\n\n  /* Important connection/request fields relevant to the scenario */\n  fprintf (f, \"  read_buffer=%p, read_buffer_offset=%zu, have_chunked_upload=%d\\n\",\n           (void *) c->read_buffer,\n           (size_t) c->read_buffer_offset,\n           (int) c->rq.have_chunked_upload);\n\n  fprintf (f, \"  http_mthd=%d, http_ver=%d, some_payload_processed=%d\\n\",\n           (int) c->rq.http_mthd,\n           (int) c->rq.http_ver,\n           (int) c->rq.some_payload_processed);\n\n  fprintf (f, \"  current_chunk_size=%zu, current_chunk_offset=%zu\\n\",\n           (size_t) c->rq.current_chunk_size,\n           (size_t) c->rq.current_chunk_offset);\n\n  /* If a buffer pointer is passed to helper functions, capture its address and\n     a short hex dump (safest option to avoid printing non-printable chars). */\n  if (buf != NULL)\n  {\n    size_t tolog = (buf_len < 64u) ? buf_len : 64u;\n    fprintf (f, \"  buffer_len=%zu, hex(first %zu bytes):\", buf_len, tolog);\n    for (size_t i = 0u; i < tolog; ++i)\n    {\n      fprintf (f, \"%02x\", (unsigned int) (unsigned char) buf[i]);\n    }\n    fprintf (f, \"\\n\");\n  }\n\n  fclose (f);\n}\n\nstatic void\nhandle_recv_no_space (struct MHD_Connection *c,\n                      enum MHD_ProcRecvDataStage stage)\n{\n  mhd_assert (MHD_PROC_RECV_INIT <= stage);\n  mhd_assert (MHD_PROC_RECV_FOOTERS >= stage);\n  mhd_assert (MHD_CONNECTION_FULL_REQ_RECEIVED > c->state);\n  mhd_assert ((MHD_PROC_RECV_INIT != stage) || \\\n              (MHD_CONNECTION_INIT == c->state));\n  mhd_assert ((MHD_PROC_RECV_METHOD != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_URI != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HTTPVER != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HEADERS != stage) || \\\n              (MHD_CONNECTION_REQ_HEADERS_RECEIVING == c->state));\n  mhd_assert (MHD_PROC_RECV_COOKIE != stage); /* handle_req_cookie_no_space() must be called directly */\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_FOOTERS != stage) || \\\n              (MHD_CONNECTION_FOOTERS_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (! c->rq.have_chunked_upload));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (c->rq.have_chunked_upload));\n\n  /* Log entry point with summary of state to help reproduce the reported scenario. */\n  log_probe_conn (c, stage, \"entry\", c->read_buffer, (size_t) c->read_buffer_offset);\n\n  switch (stage)\n  {\n  case MHD_PROC_RECV_INIT:\n  case MHD_PROC_RECV_METHOD:\n    /* Some data has been received, but it is not clear yet whether\n     * the received data is an valid HTTP request */\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the initial part of \" \\\n                               \"the request line.\"));\n    return;\n  case MHD_PROC_RECV_URI:\n  case MHD_PROC_RECV_HTTPVER:\n    /* Some data has been received, but the request line is incomplete */\n    mhd_assert (MHD_HTTP_MTHD_NO_METHOD != c->rq.http_mthd);\n    mhd_assert (MHD_HTTP_VER_UNKNOWN == c->rq.http_ver);\n    /* A quick simple check whether the incomplete line looks\n     * like an HTTP request */\n    if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n        (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n    {\n      transmit_error_response_static (c,\n                                      MHD_HTTP_URI_TOO_LONG,\n                                      ERR_MSG_REQUEST_TOO_BIG);\n      return;\n    }\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the URI in \" \\\n                               \"the request line. \" \\\n                               \"The request uses non-standard HTTP request \" \\\n                               \"method token.\"));\n    return;\n  case MHD_PROC_RECV_HEADERS:\n    /* Log the exact call site and buffer info that is relevant for the\n       reported Rule 8.13 scenario (non-const pointer passed to handler). */\n    log_probe_conn (c, stage, \"about to call handle_req_headers_no_space with current read_buffer\", c->read_buffer, (size_t) c->read_buffer_offset);\n    handle_req_headers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  case MHD_PROC_RECV_BODY_NORMAL:\n  case MHD_PROC_RECV_BODY_CHUNKED:\n    mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n                ! c->rq.some_payload_processed);\n    if (has_unprocessed_upload_body_data_in_buffer (c))\n    {\n      /* The connection must not be in MHD_EVENT_LOOP_INFO_READ state\n         when external polling is used and some data left unprocessed. */\n      mhd_assert (MHD_D_IS_USING_THREADS_ (c->daemon));\n      /* failed to grow the read buffer, and the\n         client which is supposed to handle the\n         received data in a *blocking* fashion\n         (in this mode) did not handle the data as\n         it was supposed to!\n         => we would either have to do busy-waiting\n         (on the client, which would likely fail),\n         or if we do nothing, we would just timeout\n         on the connection (if a timeout is even\n         set!).\n         Solution: we kill the connection with an error */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_INTERNAL_SERVER_ERROR,\n                                      ERROR_MSG_DATA_NOT_HANDLED_BY_APP);\n    }\n    else\n    {\n      if (MHD_PROC_RECV_BODY_NORMAL == stage)\n      {\n        /* A header probably has been added to a suspended connection and\n           it took precisely all the space in the buffer.\n           Very low probability. */\n        mhd_assert (! c->rq.have_chunked_upload);\n        log_probe_conn (c, stage, \"body_normal: about to call handle_req_headers_no_space with NULL buffer\", NULL, 0);\n        handle_req_headers_no_space (c, NULL, 0);\n      }\n      else\n      {\n        mhd_assert (c->rq.have_chunked_upload);\n        if (c->rq.current_chunk_offset != c->rq.current_chunk_size)\n        { /* Receiving content of the chunk */\n          /* A header probably has been added to a suspended connection and\n             it took precisely all the space in the buffer.\n             Very low probability. */\n          log_probe_conn (c, stage, \"chunked: receiving content, call handle_req_headers_no_space with NULL\", NULL, 0);\n          handle_req_headers_no_space (c, NULL, 0);\n        }\n        else\n        {\n          if (0 != c->rq.current_chunk_size)\n          { /* Waiting for chunk-closing CRLF */\n            /* Not really possible as some payload should be\n               processed and the space used by payload should be available. */\n            log_probe_conn (c, stage, \"chunked: waiting for CRLF, call handle_req_headers_no_space with NULL\", NULL, 0);\n            handle_req_headers_no_space (c, NULL, 0);\n          }\n          else\n          { /* Reading the line with the chunk size */\n            /* Log the scenario where the code passes the mutable read buffer\n               to the chunk size parser (another potential site of interest). */\n            log_probe_conn (c, stage, \"about to call handle_req_chunk_size_line_no_space with current read_buffer\", c->read_buffer, (size_t) c->read_buffer_offset);\n            handle_req_chunk_size_line_no_space (c,\n                                                 c->read_buffer,\n                                                 c->read_buffer_offset);\n          }\n        }\n      }\n    }\n    return;\n  case MHD_PROC_RECV_FOOTERS:\n    log_probe_conn (c, stage, \"about to call handle_req_footers_no_space with current read_buffer\", c->read_buffer, (size_t) c->read_buffer_offset);\n    handle_req_footers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  /* The next cases should not be possible */\n  case MHD_PROC_RECV_COOKIE:\n  default:\n    break;\n  }\n  mhd_assert (0);\n}\n"
}