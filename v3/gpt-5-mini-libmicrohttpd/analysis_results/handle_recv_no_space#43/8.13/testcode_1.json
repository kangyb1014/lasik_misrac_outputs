{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function handle_req_chunk_size_line_no_space is declared to accept a non-const pointer (e.g. char *buf) but does not actually modify the buffer contents, then this is a violation of MISRA C 2023 Rule 8.13: the pointer parameter should be const-qualified (e.g. const char *buf). In other words, passing c->read_buffer to a callee that could/should have taken const char * but is declared with a non-const pointer constitutes a rule violation. If, however, the function legitimately modifies the buffer, then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified handle_recv_no_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/433.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of handle_recv_no_space as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of handle_recv_no_space:\n```c\nstatic void\nhandle_recv_no_space (struct MHD_Connection *c,\n                      enum MHD_ProcRecvDataStage stage)\n{\n  mhd_assert (MHD_PROC_RECV_INIT <= stage);\n  mhd_assert (MHD_PROC_RECV_FOOTERS >= stage);\n  mhd_assert (MHD_CONNECTION_FULL_REQ_RECEIVED > c->state);\n  mhd_assert ((MHD_PROC_RECV_INIT != stage) || \\\n              (MHD_CONNECTION_INIT == c->state));\n  mhd_assert ((MHD_PROC_RECV_METHOD != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_URI != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HTTPVER != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HEADERS != stage) || \\\n              (MHD_CONNECTION_REQ_HEADERS_RECEIVING == c->state));\n  mhd_assert (MHD_PROC_RECV_COOKIE != stage); /* handle_req_cookie_no_space() must be called directly */\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_FOOTERS != stage) || \\\n              (MHD_CONNECTION_FOOTERS_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (! c->rq.have_chunked_upload));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (c->rq.have_chunked_upload));\n  switch (stage)\n  {\n  case MHD_PROC_RECV_INIT:\n  case MHD_PROC_RECV_METHOD:\n    /* Some data has been received, but it is not clear yet whether\n     * the received data is an valid HTTP request */\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the initial part of \" \\\n                               \"the request line.\"));\n    return;\n  case MHD_PROC_RECV_URI:\n  case MHD_PROC_RECV_HTTPVER:\n    /* Some data has been received, but the request line is incomplete */\n    mhd_assert (MHD_HTTP_MTHD_NO_METHOD != c->rq.http_mthd);\n    mhd_assert (MHD_HTTP_VER_UNKNOWN == c->rq.http_ver);\n    /* A quick simple check whether the incomplete line looks\n     * like an HTTP request */\n    if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n        (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n    {\n      transmit_error_response_static (c,\n                                      MHD_HTTP_URI_TOO_LONG,\n                                      ERR_MSG_REQUEST_TOO_BIG);\n      return;\n    }\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the URI in \" \\\n                               \"the request line. \" \\\n                               \"The request uses non-standard HTTP request \" \\\n                               \"method token.\"));\n    return;\n  case MHD_PROC_RECV_HEADERS:\n    handle_req_headers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  case MHD_PROC_RECV_BODY_NORMAL:\n  case MHD_PROC_RECV_BODY_CHUNKED:\n    mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n                ! c->rq.some_payload_processed);\n    if (has_unprocessed_upload_body_data_in_buffer (c))\n    {\n      /* The connection must not be in MHD_EVENT_LOOP_INFO_READ state\n         when external polling is used and some data left unprocessed. */\n      mhd_assert (MHD_D_IS_USING_THREADS_ (c->daemon));\n      /* failed to grow the read buffer, and the\n         client which is supposed to handle the\n         received data in a *blocking* fashion\n         (in this mode) did not handle the data as\n         it was supposed to!\n         => we would either have to do busy-waiting\n         (on the client, which would likely fail),\n         or if we do nothing, we would just timeout\n         on the connection (if a timeout is even\n         set!).\n         Solution: we kill the connection with an error */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_INTERNAL_SERVER_ERROR,\n                                      ERROR_MSG_DATA_NOT_HANDLED_BY_APP);\n    }\n    else\n    {\n      if (MHD_PROC_RECV_BODY_NORMAL == stage)\n      {\n        /* A header probably has been added to a suspended connection and\n           it took precisely all the space in the buffer.\n           Very low probability. */\n        mhd_assert (! c->rq.have_chunked_upload);\n        handle_req_headers_no_space (c, NULL, 0);\n      }\n      else\n      {\n        mhd_assert (c->rq.have_chunked_upload);\n        if (c->rq.current_chunk_offset != c->rq.current_chunk_size)\n        { /* Receiving content of the chunk */\n          /* A header probably has been added to a suspended connection and\n             it took precisely all the space in the buffer.\n             Very low probability. */\n          handle_req_headers_no_space (c, NULL, 0);\n        }\n        else\n        {\n          if (0 != c->rq.current_chunk_size)\n          { /* Waiting for chunk-closing CRLF */\n            /* Not really possible as some payload should be\n               processed and the space used by payload should be available. */\n            handle_req_headers_no_space (c, NULL, 0);\n          }\n          else\n          { /* Reading the line with the chunk size */\n            handle_req_chunk_size_line_no_space (c,\n                                                 c->read_buffer,\n                                                 c->read_buffer_offset);\n          }\n        }\n      }\n    }\n    return;\n  case MHD_PROC_RECV_FOOTERS:\n    handle_req_footers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  /* The next cases should not be possible */\n  case MHD_PROC_RECV_COOKIE:\n  default:\n    break;\n  }\n  mhd_assert (0);\n}\n```\n</target_code>\nPlease provide the modified handle_recv_no_space code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helpers: log to /tmp/logs/433.txt. Keep them static to limit scope. */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/433.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_dump_buffer(const char *tag, const char *buf, size_t len)\n{\n    if (buf == NULL)\n    {\n        probe_logf(\"%s: buf=NULL len=%zu\", tag, (unsigned long)len);\n        return;\n    }\n    size_t i, lim = len;\n    if (lim > 256U)\n        lim = 256U; /* limit amount logged */\n    probe_logf(\"%s: buf=%p len=%zu (showing up to %zu bytes):\", tag, (void *)buf, (unsigned long)len, (unsigned long)lim);\n    /* print hex and ascii summary */\n    {\n        char line[128 + 1];\n        size_t pos = 0;\n        for (i = 0; i < lim; ++i)\n        {\n            unsigned char ch = (unsigned char)buf[i];\n            pos += snprintf(line + pos, sizeof(line) > pos ? sizeof(line) - pos : 0, \"%02X \", ch);\n            if (pos + 5 > sizeof(line))\n            {\n                probe_logf(\"%s: %s\", tag, line);\n                pos = 0;\n            }\n        }\n        if (pos > 0)\n            probe_logf(\"%s: %s\", tag, line);\n    }\n}\n\nstatic int probe_compare_and_log(const char *label, const char *before, const char *after, size_t len)\n{\n    if (before == NULL || after == NULL)\n    {\n        probe_logf(\"%s: compare skipped (before=%p after=%p)\", label, (const void *)before, (const void *)after);\n        return 0;\n    }\n    size_t i, lim = len;\n    if (lim > 256U)\n        lim = 256U;\n    int changed = 0;\n    for (i = 0; i < lim; ++i)\n    {\n        if ((unsigned char)before[i] != (unsigned char)after[i])\n        {\n            probe_logf(\"%s: buffer changed at offset %zu: before=%02X after=%02X\", label, (unsigned long)i, (unsigned int)(unsigned char)before[i], (unsigned int)(unsigned char)after[i]);\n            changed = 1;\n            /* continue to find further differences, but avoid flooding */\n            if (i > 64)\n                break;\n        }\n    }\n    if (!changed)\n        probe_logf(\"%s: no differences found in first %zu bytes\", label, (unsigned long)lim);\n    return changed;\n}\n\n/* Modified handle_recv_no_space with probes inserted. Original logic preserved. */\nstatic void\nhandle_recv_no_space (struct MHD_Connection *c,\n                      enum MHD_ProcRecvDataStage stage)\n{\n  mhd_assert (MHD_PROC_RECV_INIT <= stage);\n  mhd_assert (MHD_PROC_RECV_FOOTERS >= stage);\n  mhd_assert (MHD_CONNECTION_FULL_REQ_RECEIVED > c->state);\n  mhd_assert ((MHD_PROC_RECV_INIT != stage) || \\\n              (MHD_CONNECTION_INIT == c->state));\n  mhd_assert ((MHD_PROC_RECV_METHOD != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_URI != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HTTPVER != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HEADERS != stage) || \\\n              (MHD_CONNECTION_REQ_HEADERS_RECEIVING == c->state));\n  mhd_assert (MHD_PROC_RECV_COOKIE != stage); /* handle_req_cookie_no_space() must be called directly */\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_FOOTERS != stage) || \\\n              (MHD_CONNECTION_FOOTERS_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (! c->rq.have_chunked_upload));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (c->rq.have_chunked_upload));\n\n  /* Log entry into handle_recv_no_space with key state info */\n  probe_logf(\"handle_recv_no_space: entry c=%p stage=%d state=%d read_buffer=%p read_buffer_offset=%zu have_chunked_upload=%d current_chunk_offset=%zu current_chunk_size=%zu\",\n             (void *)c,\n             (int)stage,\n             (int)c->state,\n             (void *)c->read_buffer,\n             (unsigned long)c->read_buffer_offset,\n             (int)c->rq.have_chunked_upload,\n             (unsigned long)c->rq.current_chunk_offset,\n             (unsigned long)c->rq.current_chunk_size);\n\n  switch (stage)\n  {\n  case MHD_PROC_RECV_INIT:\n  case MHD_PROC_RECV_METHOD:\n    /* Some data has been received, but it is not clear yet whether\n     * the received data is an valid HTTP request */\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the initial part of \" \\\n                               \"the request line.\"));\n    probe_logf(\"handle_recv_no_space: closed connection (INIT/METHOD)\");\n    return;\n  case MHD_PROC_RECV_URI:\n  case MHD_PROC_RECV_HTTPVER:\n    /* Some data has been received, but the request line is incomplete */\n    mhd_assert (MHD_HTTP_MTHD_NO_METHOD != c->rq.http_mthd);\n    mhd_assert (MHD_HTTP_VER_UNKNOWN == c->rq.http_ver);\n    /* A quick simple check whether the incomplete line looks\n     * like an HTTP request */\n    if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n        (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n    {\n      transmit_error_response_static (c,\n                                      MHD_HTTP_URI_TOO_LONG,\n                                      ERR_MSG_REQUEST_TOO_BIG);\n      probe_logf(\"handle_recv_no_space: transmitted URI_TOO_LONG\");\n      return;\n    }\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the URI in \" \\\n                               \"the request line. \" \\\n                               \"The request uses non-standard HTTP request \" \\\n                               \"method token.\"));\n    probe_logf(\"handle_recv_no_space: closed connection (URI/HTTPVER) non-standard method\");\n    return;\n  case MHD_PROC_RECV_HEADERS:\n    /* Log buffer contents before calling handler */\n    probe_dump_buffer(\"headers_before\", c->read_buffer, c->read_buffer_offset);\n    handle_req_headers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    /* Log after call to detect whether callee modified buffer */\n    probe_dump_buffer(\"headers_after\", c->read_buffer, c->read_buffer_offset);\n    probe_compare_and_log(\"headers_compare\", c->read_buffer, c->read_buffer, c->read_buffer_offset);\n    probe_logf(\"handle_recv_no_space: returned from handle_req_headers_no_space\");\n    return;\n  case MHD_PROC_RECV_BODY_NORMAL:\n  case MHD_PROC_RECV_BODY_CHUNKED:\n    mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n                ! c->rq.some_payload_processed);\n    if (has_unprocessed_upload_body_data_in_buffer (c))\n    {\n      /* The connection must not be in MHD_EVENT_LOOP_INFO_READ state\n         when external polling is used and some data left unprocessed. */\n      mhd_assert (MHD_D_IS_USING_THREADS_ (c->daemon));\n      /* failed to grow the read buffer, and the\n         client which is supposed to handle the\n         received data in a *blocking* fashion\n         (in this mode) did not handle the data as\n         it was supposed to!\n         => we would either have to do busy-waiting\n         (on the client, which would likely fail),\n         or if we do nothing, we would just timeout\n         on the connection (if a timeout is even\n         set!).\n         Solution: we kill the connection with an error */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_INTERNAL_SERVER_ERROR,\n                                      ERROR_MSG_DATA_NOT_HANDLED_BY_APP);\n      probe_logf(\"handle_recv_no_space: transmitted INTERNAL_SERVER_ERROR due to unprocessed upload data\");\n    }\n    else\n    {\n      if (MHD_PROC_RECV_BODY_NORMAL == stage)\n      {\n        /* A header probably has been added to a suspended connection and\n           it took precisely all the space in the buffer.\n           Very low probability. */\n        mhd_assert (! c->rq.have_chunked_upload);\n        probe_logf(\"handle_recv_no_space: BODY_NORMAL path calling handle_req_headers_no_space with NULL\");\n        handle_req_headers_no_space (c, NULL, 0);\n        probe_logf(\"handle_recv_no_space: returned from handle_req_headers_no_space (NULL)\");\n      }\n      else\n      {\n        mhd_assert (c->rq.have_chunked_upload);\n        if (c->rq.current_chunk_offset != c->rq.current_chunk_size)\n        { /* Receiving content of the chunk */\n          /* A header probably has been added to a suspended connection and\n             it took precisely all the space in the buffer.\n             Very low probability. */\n          probe_logf(\"handle_recv_no_space: CHUNKED content receiving, calling handle_req_headers_no_space(NULL)\");\n          handle_req_headers_no_space (c, NULL, 0);\n          probe_logf(\"handle_recv_no_space: returned from handle_req_headers_no_space (NULL) [chunk content]\");\n        }\n        else\n        {\n          if (0 != c->rq.current_chunk_size)\n          { /* Waiting for chunk-closing CRLF */\n            /* Not really possible as some payload should be\n               processed and the space used by payload should be available. */\n            probe_logf(\"handle_recv_no_space: CHUNKED waiting for CRLF, calling handle_req_headers_no_space(NULL)\");\n            handle_req_headers_no_space (c, NULL, 0);\n            probe_logf(\"handle_recv_no_space: returned from handle_req_headers_no_space (NULL) [waiting CRLF]\");\n          }\n          else\n          { /* Reading the line with the chunk size */\n            /* Probe buffer before calling the chunk-size-line handler */\n            probe_dump_buffer(\"chunk_size_line_before\", c->read_buffer, c->read_buffer_offset);\n            /* Save a local copy of the first bytes to detect modifications */\n            char local_copy[256];\n            size_t copy_len = c->read_buffer_offset;\n            if (copy_len > sizeof(local_copy))\n                copy_len = sizeof(local_copy);\n            if (c->read_buffer != NULL && copy_len > 0)\n            {\n                memcpy(local_copy, c->read_buffer, copy_len);\n            }\n\n            probe_logf(\"handle_recv_no_space: calling handle_req_chunk_size_line_no_space c=%p buf=%p offset=%zu\",\n                       (void *)c,\n                       (void *)c->read_buffer,\n                       (unsigned long)c->read_buffer_offset);\n\n            handle_req_chunk_size_line_no_space (c,\n                                                 c->read_buffer,\n                                                 c->read_buffer_offset);\n\n            probe_logf(\"handle_recv_no_space: returned from handle_req_chunk_size_line_no_space\");\n            /* Compare local copy with buffer after call to detect modifications */\n            if (c->read_buffer != NULL && copy_len > 0)\n            {\n                probe_compare_and_log(\"chunk_size_line_compare\", local_copy, c->read_buffer, copy_len);\n                probe_dump_buffer(\"chunk_size_line_after\", c->read_buffer, c->read_buffer_offset);\n            }\n          }\n        }\n      }\n    }\n    return;\n  case MHD_PROC_RECV_FOOTERS:\n    probe_dump_buffer(\"footers_before\", c->read_buffer, c->read_buffer_offset);\n    handle_req_footers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    probe_dump_buffer(\"footers_after\", c->read_buffer, c->read_buffer_offset);\n    probe_compare_and_log(\"footers_compare\", c->read_buffer, c->read_buffer, c->read_buffer_offset);\n    probe_logf(\"handle_recv_no_space: returned from handle_req_footers_no_space\");\n    return;\n  /* The next cases should not be possible */\n  case MHD_PROC_RECV_COOKIE:\n  default:\n    break;\n  }\n  mhd_assert (0);\n}\n"
}