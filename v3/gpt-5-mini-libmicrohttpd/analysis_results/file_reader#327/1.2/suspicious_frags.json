{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of file_reader:\n```c\nstatic ssize_t\nfile_reader (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  FILE *file = (FILE *) cls;\n  size_t bytes_read;\n\n  /* 'fseek' may not support files larger 2GiB, depending on platform.\n   * For production code, make sure that 'pos' has valid values, supported by\n   * 'fseek', or use 'fseeko' or similar function. */\n  if (0 != fseek (file, (long) pos, SEEK_SET))\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  bytes_read = fread (buf, 1, max, file);\n  if (0 == bytes_read)\n    return (0 != ferror (file)) ? MHD_CONTENT_READER_END_WITH_ERROR :\n           MHD_CONTENT_READER_END_OF_STREAM;\n  return (ssize_t) bytes_read;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (0 != fseek (file, (long) pos, SEEK_SET))",
    "static ssize_t\nfile_reader (void *cls, uint64_t pos, char *buf, size_t max)",
    "FILE *file = (FILE *) cls;",
    "return (ssize_t) bytes_read;"
  ],
  "explanation": "I selected fragments that may rely on non-ISO-C language or platform-specific types and casts that warrant investigation for compiler/standard support. Specifically, ssize_t is a POSIX type (not part of ISO C) and may be provided as a platform/compiler extension; uint64_t requires <stdint.h> (C99 and later) so its availability depends on the build environment; casting a 64-bit value to long for fseek may rely on platform-specific widths and may indicate use of fseek instead of fseeko (the comment already notes this). The explicit cast from void* to FILE* and the cast to (ssize_t) are standard C syntax but may hide portability issues on some platforms, so I included them for review. All other code constructs (use of size_t, FILE, fread, ferror, the MHD_* macros, comments and control flow) are standard library usage or application macros and do not themselves constitute language/compiler extensions (no use of compiler-specific keywords like __attribute__, __asm__, typeof, __builtin_*, or other documented compiler extensions was found)."
}