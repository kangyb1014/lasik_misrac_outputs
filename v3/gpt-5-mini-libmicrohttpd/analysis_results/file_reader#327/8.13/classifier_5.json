{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of file_reader:\n```c\nstatic ssize_t\nfile_reader (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  FILE *file = (FILE *) cls;\n  size_t bytes_read;\n\n  /* 'fseek' may not support files larger 2GiB, depending on platform.\n   * For production code, make sure that 'pos' has valid values, supported by\n   * 'fseek', or use 'fseeko' or similar function. */\n  if (0 != fseek (file, (long) pos, SEEK_SET))\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  bytes_read = fread (buf, 1, max, file);\n  if (0 == bytes_read)\n    return (0 != ferror (file)) ? MHD_CONTENT_READER_END_WITH_ERROR :\n           MHD_CONTENT_READER_END_OF_STREAM;\n  return (ssize_t) bytes_read;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfread (buf, 1, max, file);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: fread writes data into 'buf', so the buffer must be mutable (char *). Rule 8.13 requires pointers to be const-qualified when they can be, but here const is not possible because fread modifies the memory. A specific violation scenario would be if the buffer were actually never modified but declared as 'char *buf' (non-const) \u2014 it should instead be 'const char *buf', or if code cast away const (e.g. casting a 'const char *' to 'char *' and passing it to fread), which would violate const-correctness and the spirit of Rule 8.13."
}