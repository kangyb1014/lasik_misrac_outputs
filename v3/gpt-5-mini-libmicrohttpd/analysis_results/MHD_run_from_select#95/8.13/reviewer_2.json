{
  "user_message": "An agent A claimed that the following MHD_run_from_select code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_run_from_select.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select (struct MHD_Daemon *daemon,\n                     const fd_set *read_fd_set,\n                     const fd_set *write_fd_set,\n                     const fd_set *except_fd_set)\n{\n  return MHD_run_from_select2 (daemon,\n                               read_fd_set,\n                               write_fd_set,\n                               except_fd_set,\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n                               daemon->fdset_size_set_by_app ?\n                               ((unsigned int) daemon->fdset_size) :\n                               ((unsigned int) _MHD_SYS_DEFAULT_FD_SETSIZE)\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n                               ((unsigned int) _MHD_SYS_DEFAULT_FD_SETSIZE)\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n                               );\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter is declared as \"struct MHD_Daemon *daemon\" but the wrapper function simply forwards it to MHD_run_from_select2 without performing any modification. If neither MHD_run_from_select nor the callee modify the pointed-to object, the parameter should be declared as \"const struct MHD_Daemon *daemon\" so the pointer points to a const-qualified type. Thus, in the common case where the daemon is not modified, this declaration violates MISRA C 2023 Rule 8.13. (If the object is actually modified by this function or by MHD_run_from_select2, then the non-const is justified and there is no violation.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report as stated is not proven correct. MISRA C:2023 Rule 8.13 indeed advises that pointers should point to const-qualified types when possible, but whether a change is possible depends on the callee and the actual semantics. The wrapper simply forwards the daemon pointer to MHD_run_from_select2; if that callee (or any other code) expects or modifies a non-const struct MHD_Daemon * then the wrapper must also use a non-const parameter and there is no violation. The provided code fragment does not show the declaration or behavior of MHD_run_from_select2, so you cannot conclude the parameter should be const. If MHD_run_from_select2 (and all uses) truly do not modify the object and accept a const pointer, then changing the parameter to const would be appropriate \u2014 but that is a design/API change and must be confirmed. In short: the agent\u2019s claim lacks evidence (the callee\u2019s signature/behavior) and therefore the reported violation cannot be confirmed."
}