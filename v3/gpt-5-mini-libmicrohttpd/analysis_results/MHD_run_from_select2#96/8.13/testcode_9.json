{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe logging call passes a message string (via the _() macro) as a non-const char pointer to MHD_DLOG. If MHD_DLOG\u2019s prototype/macro accepts a plain char * (or otherwise the effective type of the argument is non-const char *), then the code violates MISRA C 2023 Rule 8.13 because the pointer should be to a const-qualified type (e.g. const char *) for an immutable format/message string. (If, however, MHD_DLOG is declared to take a const char * for the message, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run_from_select2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_run_from_select2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_run_from_select2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  if (MHD_D_IS_USING_POLL_ (daemon) ||\n      MHD_D_IS_USING_THREADS_ (daemon))\n    return MHD_NO;\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n    return MHD_NO;\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    resume_suspended_connections (daemon);\n\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n```\n</target_code>\nPlease provide the modified MHD_run_from_select2 code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append information to /tmp/logs/963.txt. */\nstatic void mhd_probe_log(const char *stage,\n                          const char *fmt_msg,\n                          const void *msg_ptr,\n                          struct MHD_Daemon *daemon,\n                          unsigned int fd_setsize,\n                          const char *extra1,\n                          int extra2)\n{\n  FILE *f = fopen(\"/tmp/logs/963.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] STAGE: %s\\n\", (long)t, stage);\n  fprintf(f, \"  daemon ptr: %p\\n\", (void *) daemon);\n  fprintf(f, \"  fd_setsize arg: %u\\n\", fd_setsize);\n  if (daemon != NULL)\n  {\n    /* Attempt to log daemon state used in branches (best-effort). */\n    /* Accessing fields that exist in the original file; if not present,\n       this will be optimized/handled by the compiler in the original TU. */\n    /* Use casts to avoid warnings if types differ. */\n    /* Note: We don't change daemon state here. */\n    /* We print extra1 (e.g. function name) and extra2 (e.g. daemon->fdset_size) */\n    fprintf(f, \"  extra1: %s\\n\", (extra1 != NULL) ? extra1 : \"(null)\");\n    fprintf(f, \"  extra2: %d\\n\", extra2);\n  }\n  fprintf(f, \"  message format pointer: %p\\n\", msg_ptr);\n  if (fmt_msg != NULL)\n    fprintf(f, \"  message format text: %s\\n\", fmt_msg);\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  if (MHD_D_IS_USING_POLL_ (daemon) ||\n      MHD_D_IS_USING_THREADS_ (daemon))\n    return MHD_NO;\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n    return MHD_NO;\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    /* Probe: capture the message format pointer and state before calling MHD_DLOG. */\n    const char *probe_msg = _ (\"MHD_run_from_select() called with except_fd_set \"\n                              \"set to NULL. Such behavior is deprecated.\\n\");\n    mhd_probe_log(\"except_fd_set_null\", probe_msg, (const void *) probe_msg,\n                  daemon, fd_setsize, NULL, 0);\n\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      const char *probe_msg = _ (\"%s() called with fd_setsize (%u) \" \\\n                               \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                               \"Some socket FDs may be not processed. \" \\\n                               \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\");\n      /* Log the format pointer and relevant parameters so detectors can see\n         the use of the format string (possibly non-const) being passed to\n         MHD_DLOG along with runtime state. */\n      mhd_probe_log(\"fdset_too_small_app_set\",\n                    probe_msg,\n                    (const void *) probe_msg,\n                    daemon,\n                    fd_setsize,\n                    \"MHD_run_from_select2\",\n                    daemon->fdset_size);\n\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      const char *probe_msg = _ (\"%s() called with fd_setsize (%u) \" \\\n                               \"less than FD_SETSIZE used by MHD (%d). \" \\\n                               \"Some socket FDs may be not processed. \" \\\n                               \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\");\n      mhd_probe_log(\"fdset_too_small_default\",\n                    probe_msg,\n                    (const void *) probe_msg,\n                    daemon,\n                    fd_setsize,\n                    \"MHD_run_from_select2\",\n                    daemon->fdset_size);\n\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    const char *probe_msg = _ (\"%s() called with fd_setsize (%u) \" \\\n                              \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                              \"platform.\\n\");\n    mhd_probe_log(\"fdset_less_than_fixed\",\n                  probe_msg,\n                  (const void *) probe_msg,\n                  daemon,\n                  fd_setsize,\n                  \"MHD_run_from_select2\",\n                  (int) FD_SETSIZE);\n\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    resume_suspended_connections (daemon);\n\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n"
}