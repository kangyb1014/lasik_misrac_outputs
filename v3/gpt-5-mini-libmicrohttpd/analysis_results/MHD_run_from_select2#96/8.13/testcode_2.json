{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment passes string literals (\"MHD_run_from_select2\") and the result of _(...) (a translation macro returning a char pointer) to MHD_DLOG. If MHD_DLOG\u2019s prototype (or the macros it expands to) declares these parameters as pointer-to-non-const (e.g. char *), then immutable string data is being referred to via non-const pointers \u2014 violating MISRA C 2023 Rule 8.13. To avoid the violation the logging API parameters (format and string arguments) should be declared as const char * (or the arguments cast to const char *), so pointers point to const-qualified types whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run_from_select2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_run_from_select2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_run_from_select2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  if (MHD_D_IS_USING_POLL_ (daemon) ||\n      MHD_D_IS_USING_THREADS_ (daemon))\n    return MHD_NO;\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n    return MHD_NO;\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    resume_suspended_connections (daemon);\n\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n```\n</target_code>\nPlease provide the modified MHD_run_from_select2 code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helpers: write logs to /tmp/logs/963.txt. These helpers are\n   kept minimal and use only standard C library calls. They do not\n   alter the logic of the instrumented function. */\nstatic void mhd_probe_log_simple(const char *tag, const char *msg, const void *ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/963.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f, \"%s: %s ptr=%p\\n\", tag, msg, ptr);\n    fclose(f);\n  }\n}\n\nstatic void mhd_probe_log_state(const char *tag,\n                                const void *daemon_ptr,\n                                const fd_set *r,\n                                const fd_set *w,\n                                const fd_set *e,\n                                unsigned int fd_setsize,\n                                int daemon_fdset_size,\n                                int daemon_fdset_size_set_by_app,\n                                int options)\n{\n  FILE *f = fopen(\"/tmp/logs/963.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f, \"%s: daemon=%p read_fd_set=%p write_fd_set=%p except_fd_set=%p fd_setsize=%u daemon_fdset_size=%d fdset_set_by_app=%d options=0x%08x\\n\",\n            tag, daemon_ptr, (const void *) r, (const void *) w, (const void *) e,\n            fd_setsize, daemon_fdset_size, daemon_fdset_size_set_by_app, options);\n    fclose(f);\n  }\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  /* Log entry and initial state */\n  if (NULL != daemon)\n  {\n    /* Capture daemon-related fields used below; avoid dereferencing daemon beyond known fields. */\n    int daemon_fdset_size = daemon->fdset_size;\n    int daemon_fdset_size_set_by_app = daemon->fdset_size_set_by_app;\n    int options = daemon->options;\n    mhd_probe_log_state(\"ENTRY\", (const void *) daemon, read_fd_set, write_fd_set, except_fd_set,\n                        fd_setsize, daemon_fdset_size, daemon_fdset_size_set_by_app, options);\n  }\n  else\n  {\n    mhd_probe_log_simple(\"ENTRY\", \"daemon is NULL\", (const void *) daemon);\n  }\n\n  if (MHD_D_IS_USING_POLL_ (daemon) ||\n      MHD_D_IS_USING_THREADS_ (daemon))\n  {\n    mhd_probe_log_simple(\"EARLY_EXIT\", \"using poll or threads -> MHD_NO\", NULL);\n    return MHD_NO;\n  }\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n  {\n    mhd_probe_log_simple(\"EARLY_EXIT\", \"read_fd_set or write_fd_set is NULL -> MHD_NO\", NULL);\n    return MHD_NO;\n  }\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    /* Probe the format literal and the pointer returned by _(\"\") if any */\n    const char *fmt1 = _ (\"MHD_run_from_select() called with except_fd_set \"\n                         \"set to NULL. Such behavior is deprecated.\\n\");\n    mhd_probe_log_simple(\"MHD_DLOG_CALL\", \"about to call MHD_DLOG with format (except_fd_set NULL)\", (const void *) fmt1);\n\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n  {\n    mhd_probe_log_simple(\"EARLY_EXIT\", \"fd_setsize == 0 -> MHD_NO\", (const void *) &fd_setsize);\n    return MHD_NO;\n  }\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      const char *fmt2 = _ (\"%s() called with fd_setsize (%u) \" \\\n                         \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                         \"Some socket FDs may be not processed. \" \\\n                         \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\");\n      /* Log state and the pointers to format and the literal function name */\n      mhd_probe_log_state(\"MHD_DLOG_CALL\",\n                          (const void *) daemon,\n                          read_fd_set, write_fd_set, except_fd_set,\n                          fd_setsize, daemon->fdset_size, daemon->fdset_size_set_by_app, daemon->options);\n      mhd_probe_log_simple(\"MHD_DLOG_ARG\", \"format pointer\", (const void *) fmt2);\n      mhd_probe_log_simple(\"MHD_DLOG_ARG\", \"function name literal\", (const void *) \"MHD_run_from_select2\");\n\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      const char *fmt3 = _ (\"%s() called with fd_setsize (%u) \" \\\n                         \"less than FD_SETSIZE used by MHD (%d). \" \\\n                         \"Some socket FDs may be not processed. \" \\\n                         \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\");\n      mhd_probe_log_state(\"MHD_DLOG_CALL\",\n                          (const void *) daemon,\n                          read_fd_set, write_fd_set, except_fd_set,\n                          fd_setsize, daemon->fdset_size, daemon->fdset_size_set_by_app, daemon->options);\n      mhd_probe_log_simple(\"MHD_DLOG_ARG\", \"format pointer\", (const void *) fmt3);\n      mhd_probe_log_simple(\"MHD_DLOG_ARG\", \"function name literal\", (const void *) \"MHD_run_from_select2\");\n\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    const char *fmt4 = _ (\"%s() called with fd_setsize (%u) \" \\\n                       \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                       \"platform.\\n\");\n    mhd_probe_log_state(\"MHD_DLOG_CALL\",\n                        (const void *) daemon,\n                        read_fd_set, write_fd_set, except_fd_set,\n                        fd_setsize, daemon->fdset_size, daemon->fdset_size_set_by_app, daemon->options);\n    mhd_probe_log_simple(\"MHD_DLOG_ARG\", \"format pointer\", (const void *) fmt4);\n    mhd_probe_log_simple(\"MHD_DLOG_ARG\", \"function name literal\", (const void *) \"MHD_run_from_select2\");\n\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    mhd_probe_log_simple(\"EARLY_EXIT\", \"fd_setsize less than FD_SETSIZE -> MHD_NO\", (const void *) &fd_setsize);\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    mhd_probe_log_simple(\"EPOLL_PATH\", \"used epoll, returning from MHD_run_from_select2\", (const void *) &ret);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    mhd_probe_log_simple(\"EPOLL_PATH\", \"epoll not supported -> MHD_NO\", NULL);\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    resume_suspended_connections (daemon);\n\n  mhd_probe_log_simple(\"CALL_INTERNAL\", \"about to call internal_run_from_select\", (const void *) &fd_setsize);\n\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n"
}