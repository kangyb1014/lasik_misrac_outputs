{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn the HAS_FD_SETSIZE_OVERRIDABLE branch the value parameter 'fd_setsize' is assigned to: 'fd_setsize = (unsigned int) INT_MAX;'. This modifies a function parameter (fd_setsize), violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run_from_select2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/967.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_run_from_select2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_run_from_select2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  if (MHD_D_IS_USING_POLL_ (daemon) ||\n      MHD_D_IS_USING_THREADS_ (daemon))\n    return MHD_NO;\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n    return MHD_NO;\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    resume_suspended_connections (daemon);\n\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n```\n</target_code>\nPlease provide the modified MHD_run_from_select2 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <limits.h>\n\n/* Probe logging helpers - append-only logging to /tmp/logs/967.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/967.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  /* Log entry and initial state */\n  probe_logf(\"MHD_run_from_select2: entry: daemon=%p, read_fd_set=%p, write_fd_set=%p, except_fd_set=%p, fd_setsize=%u\",\n             (void *) daemon, (void *) read_fd_set, (void *) write_fd_set, (void *) except_fd_set, fd_setsize);\n\n  if (MHD_D_IS_USING_POLL_ (daemon) ||\n      MHD_D_IS_USING_THREADS_ (daemon))\n  {\n    probe_logf(\"MHD_run_from_select2: using poll or threads -> early return MHD_NO\");\n    return MHD_NO;\n  }\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n  {\n    probe_logf(\"MHD_run_from_select2: read_fd_set or write_fd_set is NULL -> early return MHD_NO\");\n    return MHD_NO;\n  }\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    probe_logf(\"MHD_run_from_select2: except_fd_set is NULL (deprecated)\");\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  probe_logf(\"MHD_run_from_select2: HAS_FD_SETSIZE_OVERRIDABLE branch taken, initial fd_setsize=%u\", fd_setsize);\n  if (0 == fd_setsize)\n  {\n    probe_logf(\"MHD_run_from_select2: fd_setsize == 0 -> early return MHD_NO\");\n    return MHD_NO;\n  }\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n  {\n    probe_logf(\"MHD_run_from_select2: fd_setsize (%u) > INT_MAX; will assign fd_setsize = INT_MAX (was %u)\", fd_setsize, fd_setsize);\n    fd_setsize = (unsigned int) INT_MAX;\n    probe_logf(\"MHD_run_from_select2: fd_setsize after assignment = %u\", fd_setsize);\n  }\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    probe_logf(\"MHD_run_from_select2: daemon->fdset_size (%d) > fd_setsize (%u); fdset_size_set_by_app=%d\",\n               daemon->fdset_size, fd_setsize, daemon->fdset_size_set_by_app);\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  probe_logf(\"MHD_run_from_select2: !HAS_FD_SETSIZE_OVERRIDABLE branch taken, FD_SETSIZE=%d, fd_setsize=%u\", (int) FD_SETSIZE, fd_setsize);\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    probe_logf(\"MHD_run_from_select2: fd_setsize (%u) < FD_SETSIZE (%d) -> early return MHD_NO\", fd_setsize, (int) FD_SETSIZE);\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    probe_logf(\"MHD_run_from_select2: using epoll branch\");\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    probe_logf(\"MHD_run_from_select2: returning from epoll branch with result=%d\", (int) ret);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    probe_logf(\"MHD_run_from_select2: EPOLL_SUPPORT not available -> return MHD_NO\");\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n  {\n    probe_logf(\"MHD_run_from_select2: resuming suspended connections (options bit set)\");\n    resume_suspended_connections (daemon);\n  }\n\n  probe_logf(\"MHD_run_from_select2: calling internal_run_from_select with fd_setsize=%u\", fd_setsize);\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n"
}