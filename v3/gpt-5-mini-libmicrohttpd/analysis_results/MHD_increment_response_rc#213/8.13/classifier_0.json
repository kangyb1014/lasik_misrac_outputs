{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_increment_response_rc:\n```c\nvoid\nMHD_increment_response_rc (struct MHD_Response *response)\n{\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  (response->reference_count)++;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_mutex_lock_chk_ (&response->mutex);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated: passing &response->mutex to MHD_mutex_lock_chk_ is appropriate because locking a mutex necessarily modifies its internal state, so the function must take a pointer to a non-const mutex. A specific violation scenario would be if a function that only reads the pointed object were declared to take a non-const pointer (e.g. void f(MHD_mutex_t *m) but f only inspects m) \u2014 in that case the parameter should be const and Rule 8.13 would be violated."
}