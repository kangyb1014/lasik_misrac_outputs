{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 memcmp(m, MHD_HTTP_METHOD_HEAD, len) will read len bytes from the caller-supplied pointer m. The code only checks that len equals the length of the static literal, not that the object pointed to by method has at least len bytes. If the caller passes a method pointer whose accessible/storage size is smaller than len (for example method points to \"HE\\0\" but len==4), memcmp will read past the end of the object referenced by m and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/559.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_http_std_method as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\nPlease provide the modified parse_http_std_method code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe wrapper for memcmp that logs the parameters and the result to /tmp/logs/559.txt.\n   This preserves the original memcmp behavior but records the pointer, requested length,\n   expected literal pointer and its length, and the memcmp return value.\n*/\nstatic int\nprobe_memcmp (const char *m, const char *s, size_t len, const char *label)\n{\n  FILE *f = fopen(\"/tmp/logs/559.txt\", \"a\");\n  size_t s_len = 0u;\n\n  if (s != NULL)\n    s_len = strlen(s); /* safe: s is a static literal */\n\n  if (f)\n    {\n      fprintf (f, \"probe_memcmp: label=%s m=%p len=%zu exp_ptr=%p exp_len=%zu\\n\",\n               (label != NULL) ? label : \"(null)\", (const void *)m, len,\n               (const void *)s, s_len);\n    }\n\n  /* Call the original memcmp (this is the operation under test). */\n  int rc = memcmp (m, s, len);\n\n  if (f)\n    {\n      fprintf (f, \"probe_memcmp: label=%s memcmp_result=%d\\n\",\n               (label != NULL) ? label : \"(null)\", rc);\n      fclose (f);\n    }\n\n  return rc;\n}\n\n/* Probe function to log assignments of the parsed method. */\nstatic void\nprobe_log_assignment (const char *label, const char *m, size_t len, int assigned_value)\n{\n  FILE *f = fopen(\"/tmp/logs/559.txt\", \"a\");\n  if (f)\n    {\n      fprintf (f, \"parse_http_std_method: matched=%s m=%p len=%zu assigned=%d\\n\",\n               (label != NULL) ? label : \"(null)\", (const void *)m, len, assigned_value);\n      fclose (f);\n    }\n}\n\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == probe_memcmp (m, MHD_HTTP_METHOD_GET, len, \"GET\")))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n      probe_log_assignment (\"GET\", m, len, connection->rq.http_mthd);\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == probe_memcmp (m, MHD_HTTP_METHOD_HEAD, len, \"HEAD\")))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n      probe_log_assignment (\"HEAD\", m, len, connection->rq.http_mthd);\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == probe_memcmp (m, MHD_HTTP_METHOD_POST, len, \"POST\")))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n      probe_log_assignment (\"POST\", m, len, connection->rq.http_mthd);\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == probe_memcmp (m, MHD_HTTP_METHOD_PUT, len, \"PUT\")))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n      probe_log_assignment (\"PUT\", m, len, connection->rq.http_mthd);\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == probe_memcmp (m, MHD_HTTP_METHOD_DELETE, len, \"DELETE\")))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n      probe_log_assignment (\"DELETE\", m, len, connection->rq.http_mthd);\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == probe_memcmp (m, MHD_HTTP_METHOD_CONNECT, len, \"CONNECT\")))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n      probe_log_assignment (\"CONNECT\", m, len, connection->rq.http_mthd);\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == probe_memcmp (m, MHD_HTTP_METHOD_OPTIONS, len, \"OPTIONS\")))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n      probe_log_assignment (\"OPTIONS\", m, len, connection->rq.http_mthd);\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == probe_memcmp (m, MHD_HTTP_METHOD_TRACE, len, \"TRACE\")))\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n      probe_log_assignment (\"TRACE\", m, len, connection->rq.http_mthd);\n    }\n  else\n    {\n      connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n      probe_log_assignment (\"OTHER\", m, len, connection->rq.http_mthd);\n    }\n}\n"
}