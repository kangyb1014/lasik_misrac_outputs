{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmemcmp(m, MHD_HTTP_METHOD_DELETE, len) will read len bytes from both operands. While MHD_STATICSTR_LEN_(MHD_HTTP_METHOD_DELETE) ensures the string literal is at least len bytes, there is no guarantee in this function that the buffer pointed to by method (m) contains len bytes. If the caller provides a smaller buffer (or len is larger than the available bytes at m), memcmp will access beyond the bounds of m, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/559.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_http_std_method as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\nPlease provide the modified parse_http_std_method code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\nstatic void\nprobe_log(const char *tag,\n          const char *method_name,\n          const char *m,\n          size_t len,\n          size_t expected_len,\n          int did_memcmp,\n          int memcmp_res)\n{\n  FILE *f = fopen(\"/tmp/logs/559.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Log control point, pointer, lengths and memcmp outcome if performed. */\n  fprintf(f, \"%s: method=%s, m=%p, len=%zu, expected_len=%zu\",\n          tag, method_name, (void *)m, len, expected_len);\n  if (did_memcmp)\n    fprintf(f, \", memcmp_res=%d\\n\", memcmp_res);\n  else\n    fprintf(f, \", memcmp_skipped\\n\");\n  fclose(f);\n}\n\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  /* Entry log */\n  probe_log(\"entry\", \"(call)\", m, len, 0U, 0, 0);\n\n  {\n    size_t exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET);\n    probe_log(\"check\", \"GET\", m, len, exp_len, 0, 0);\n    if (exp_len == len)\n      {\n        int cmp = memcmp (m, MHD_HTTP_METHOD_GET, len);\n        probe_log(\"after_cmp\", \"GET\", m, len, exp_len, 1, cmp);\n        if (0 == cmp)\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n            probe_log(\"assign\", \"GET\", m, len, exp_len, 1, cmp);\n            return;\n          }\n      }\n  }\n\n  {\n    size_t exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD);\n    probe_log(\"check\", \"HEAD\", m, len, exp_len, 0, 0);\n    if (exp_len == len)\n      {\n        int cmp = memcmp (m, MHD_HTTP_METHOD_HEAD, len);\n        probe_log(\"after_cmp\", \"HEAD\", m, len, exp_len, 1, cmp);\n        if (0 == cmp)\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n            probe_log(\"assign\", \"HEAD\", m, len, exp_len, 1, cmp);\n            return;\n          }\n      }\n  }\n\n  {\n    size_t exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST);\n    probe_log(\"check\", \"POST\", m, len, exp_len, 0, 0);\n    if (exp_len == len)\n      {\n        int cmp = memcmp (m, MHD_HTTP_METHOD_POST, len);\n        probe_log(\"after_cmp\", \"POST\", m, len, exp_len, 1, cmp);\n        if (0 == cmp)\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n            probe_log(\"assign\", \"POST\", m, len, exp_len, 1, cmp);\n            return;\n          }\n      }\n  }\n\n  {\n    size_t exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT);\n    probe_log(\"check\", \"PUT\", m, len, exp_len, 0, 0);\n    if (exp_len == len)\n      {\n        int cmp = memcmp (m, MHD_HTTP_METHOD_PUT, len);\n        probe_log(\"after_cmp\", \"PUT\", m, len, exp_len, 1, cmp);\n        if (0 == cmp)\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n            probe_log(\"assign\", \"PUT\", m, len, exp_len, 1, cmp);\n            return;\n          }\n      }\n  }\n\n  {\n    size_t exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE);\n    probe_log(\"check\", \"DELETE\", m, len, exp_len, 0, 0);\n    if (exp_len == len)\n      {\n        int cmp = memcmp (m, MHD_HTTP_METHOD_DELETE, len);\n        probe_log(\"after_cmp\", \"DELETE\", m, len, exp_len, 1, cmp);\n        if (0 == cmp)\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n            probe_log(\"assign\", \"DELETE\", m, len, exp_len, 1, cmp);\n            return;\n          }\n      }\n  }\n\n  {\n    size_t exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT);\n    probe_log(\"check\", \"CONNECT\", m, len, exp_len, 0, 0);\n    if (exp_len == len)\n      {\n        int cmp = memcmp (m, MHD_HTTP_METHOD_CONNECT, len);\n        probe_log(\"after_cmp\", \"CONNECT\", m, len, exp_len, 1, cmp);\n        if (0 == cmp)\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n            probe_log(\"assign\", \"CONNECT\", m, len, exp_len, 1, cmp);\n            return;\n          }\n      }\n  }\n\n  {\n    size_t exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS);\n    probe_log(\"check\", \"OPTIONS\", m, len, exp_len, 0, 0);\n    if (exp_len == len)\n      {\n        int cmp = memcmp (m, MHD_HTTP_METHOD_OPTIONS, len);\n        probe_log(\"after_cmp\", \"OPTIONS\", m, len, exp_len, 1, cmp);\n        if (0 == cmp)\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n            probe_log(\"assign\", \"OPTIONS\", m, len, exp_len, 1, cmp);\n            return;\n          }\n      }\n  }\n\n  {\n    size_t exp_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE);\n    probe_log(\"check\", \"TRACE\", m, len, exp_len, 0, 0);\n    if (exp_len == len)\n      {\n        int cmp = memcmp (m, MHD_HTTP_METHOD_TRACE, len);\n        probe_log(\"after_cmp\", \"TRACE\", m, len, exp_len, 1, cmp);\n        if (0 == cmp)\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n            probe_log(\"assign\", \"TRACE\", m, len, exp_len, 1, cmp);\n            return;\n          }\n      }\n  }\n\n  /* Default case */\n  connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n  probe_log(\"assign\", \"OTHER\", m, len, 0U, 0, 0);\n}\n"
}