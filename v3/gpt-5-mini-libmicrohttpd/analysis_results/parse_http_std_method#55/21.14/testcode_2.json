{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp(m, MHD_HTTP_METHOD_CONNECT, len) to compare the request method against the string literal MHD_HTTP_METHOD_CONNECT. Although the comparison is limited to 'len' bytes (the static string length), MHD_HTTP_METHOD_CONNECT is a null\u2011terminated string literal and memcmp is being used to perform a string comparison. This use violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/558.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_http_std_method as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\nPlease provide the modified parse_http_std_method code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe function: append a line with relevant state to /tmp/logs/558.txt */\nstatic void\nlog_http_method_probe (const char *tag,\n                       const char *m,\n                       size_t len,\n                       const char *literal_name,\n                       const char *literal,\n                       size_t literal_len,\n                       int len_match,\n                       int cmp_result)\n{\n  FILE *f = fopen(\"/tmp/logs/558.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging; do not alter program control flow */\n\n  /* Log header: tag (which method check), length info and compare result */\n  fprintf (f, \"Probe: %s\\n\", tag);\n  fprintf (f, \"  method_ptr=%p len=%zu expected_len=%zu len_match=%d cmp_result=%d\\n\",\n           (const void *)m, len, literal_len, len_match, cmp_result);\n\n  /* Dump up to first 64 bytes of the provided method (not assuming NUL-termination) */\n  {\n    size_t i, dump = (len < 64u) ? len : 64u;\n    fprintf (f, \"  method_bytes=\");\n    for (i = 0u; i < dump; ++i)\n      fprintf (f, \"%02X\", (unsigned char)m[i]);\n    if (dump < len)\n      fprintf (f, \"..(truncated, total=%zu bytes)\", len);\n    fprintf (f, \"\\n\");\n  }\n\n  /* Also dump the literal (it is null-terminated, but only show literal_len bytes) */\n  {\n    size_t i, dump = (literal_len < 64u) ? literal_len : 64u;\n    fprintf (f, \"  literal_name=%s literal_bytes=\", literal_name);\n    for (i = 0u; i < dump; ++i)\n      fprintf (f, \"%02X\", (unsigned char)literal[i]);\n    if (dump < literal_len)\n      fprintf (f, \"..(truncated, total=%zu bytes)\", literal_len);\n    fprintf (f, \"\\n\");\n  }\n\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  /* Precompute length matches and memcmp results so that we can log every check\n     without changing the original control-flow semantics (the chain of\n     if/else if checks). */\n  size_t l_get = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET);\n  size_t l_head = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD);\n  size_t l_post = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST);\n  size_t l_put = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT);\n  size_t l_delete = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE);\n  size_t l_connect = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT);\n  size_t l_options = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS);\n  size_t l_trace = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE);\n\n  int cmp_get = 1;\n  int cmp_head = 1;\n  int cmp_post = 1;\n  int cmp_put = 1;\n  int cmp_delete = 1;\n  int cmp_connect = 1;\n  int cmp_options = 1;\n  int cmp_trace = 1;\n\n  if (l_get == len)\n    cmp_get = memcmp (m, MHD_HTTP_METHOD_GET, len);\n  log_http_method_probe (\"CHECK_GET\", m, len, \"MHD_HTTP_METHOD_GET\", MHD_HTTP_METHOD_GET, l_get, (int)(l_get == len), (l_get == len) ? cmp_get : 1);\n\n  if (l_head == len)\n    cmp_head = memcmp (m, MHD_HTTP_METHOD_HEAD, len);\n  log_http_method_probe (\"CHECK_HEAD\", m, len, \"MHD_HTTP_METHOD_HEAD\", MHD_HTTP_METHOD_HEAD, l_head, (int)(l_head == len), (l_head == len) ? cmp_head : 1);\n\n  if (l_post == len)\n    cmp_post = memcmp (m, MHD_HTTP_METHOD_POST, len);\n  log_http_method_probe (\"CHECK_POST\", m, len, \"MHD_HTTP_METHOD_POST\", MHD_HTTP_METHOD_POST, l_post, (int)(l_post == len), (l_post == len) ? cmp_post : 1);\n\n  if (l_put == len)\n    cmp_put = memcmp (m, MHD_HTTP_METHOD_PUT, len);\n  log_http_method_probe (\"CHECK_PUT\", m, len, \"MHD_HTTP_METHOD_PUT\", MHD_HTTP_METHOD_PUT, l_put, (int)(l_put == len), (l_put == len) ? cmp_put : 1);\n\n  if (l_delete == len)\n    cmp_delete = memcmp (m, MHD_HTTP_METHOD_DELETE, len);\n  log_http_method_probe (\"CHECK_DELETE\", m, len, \"MHD_HTTP_METHOD_DELETE\", MHD_HTTP_METHOD_DELETE, l_delete, (int)(l_delete == len), (l_delete == len) ? cmp_delete : 1);\n\n  if (l_connect == len)\n    cmp_connect = memcmp (m, MHD_HTTP_METHOD_CONNECT, len);\n  log_http_method_probe (\"CHECK_CONNECT\", m, len, \"MHD_HTTP_METHOD_CONNECT\", MHD_HTTP_METHOD_CONNECT, l_connect, (int)(l_connect == len), (l_connect == len) ? cmp_connect : 1);\n\n  if (l_options == len)\n    cmp_options = memcmp (m, MHD_HTTP_METHOD_OPTIONS, len);\n  log_http_method_probe (\"CHECK_OPTIONS\", m, len, \"MHD_HTTP_METHOD_OPTIONS\", MHD_HTTP_METHOD_OPTIONS, l_options, (int)(l_options == len), (l_options == len) ? cmp_options : 1);\n\n  if (l_trace == len)\n    cmp_trace = memcmp (m, MHD_HTTP_METHOD_TRACE, len);\n  log_http_method_probe (\"CHECK_TRACE\", m, len, \"MHD_HTTP_METHOD_TRACE\", MHD_HTTP_METHOD_TRACE, l_trace, (int)(l_trace == len), (l_trace == len) ? cmp_trace : 1);\n\n  /* Now perform the original chained checks using the precomputed values. */\n  if ((l_get == len) && (0 == cmp_get))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((l_head == len) && (0 == cmp_head))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((l_post == len) && (0 == cmp_post))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((l_put == len) && (0 == cmp_put))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((l_delete == len) && (0 == cmp_delete))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((l_connect == len) && (0 == cmp_connect))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((l_options == len) && (0 == cmp_options))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((l_trace == len) && (0 == cmp_trace))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n"
}