{
  "user_message": "An agent A claimed that the following parse_http_std_method code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of parse_http_std_method.\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code uses memcmp(m, MHD_HTTP_METHOD_CONNECT, len) to compare the request method against the string literal MHD_HTTP_METHOD_CONNECT. Although the comparison is limited to 'len' bytes (the static string length), MHD_HTTP_METHOD_CONNECT is a null\u2011terminated string literal and memcmp is being used to perform a string comparison. This use violates MISRA C 2023 Rule 21.14.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nProbe: CHECK_GET\n  method_ptr=0x5634145efb80 len=3 expected_len=3 len_match=1 cmp_result=9\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_GET literal_bytes=474554\n\nProbe: CHECK_HEAD\n  method_ptr=0x5634145efb80 len=3 expected_len=4 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_HEAD literal_bytes=48454144\n\nProbe: CHECK_POST\n  method_ptr=0x5634145efb80 len=3 expected_len=4 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_POST literal_bytes=504F5354\n\nProbe: CHECK_PUT\n  method_ptr=0x5634145efb80 len=3 expected_len=3 len_match=1 cmp_result=0\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_PUT literal_bytes=505554\n\nProbe: CHECK_DELETE\n  method_ptr=0x5634145efb80 len=3 expected_len=6 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_DELETE literal_bytes=44454C455445\n\nProbe: CHECK_CONNECT\n  method_ptr=0x5634145efb80 len=3 expected_len=7 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_CONNECT literal_bytes=434F4E4E454354\n\nProbe: CHECK_OPTIONS\n  method_ptr=0x5634145efb80 len=3 expected_len=7 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_OPTIONS literal_bytes=4F5054494F4E53\n\nProbe: CHECK_TRACE\n  method_ptr=0x5634145efb80 len=3 expected_len=5 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_TRACE literal_bytes=5452414345\n\nProbe: CHECK_GET\n  method_ptr=0x5634145f7d70 len=3 expected_len=3 len_match=1 cmp_result=9\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_GET literal_bytes=474554\n\nProbe: CHECK_HEAD\n  method_ptr=0x5634145f7d70 len=3 expected_len=4 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_HEAD literal_bytes=48454144\n\nProbe: CHECK_POST\n  method_ptr=0x5634145f7d70 len=3 expected_len=4 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_POST literal_bytes=504F5354\n\nProbe: CHECK_PUT\n  method_ptr=0x5634145f7d70 len=3 expected_len=3 len_match=1 cmp_result=0\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_PUT literal_bytes=505554\n\nProbe: CHECK_DELETE\n  method_ptr=0x5634145f7d70 len=3 expected_len=6 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_DELETE literal_bytes=44454C455445\n\nProbe: CHECK_CONNECT\n  method_ptr=0x5634145f7d70 len=3 expected_len=7 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_CONNECT literal_bytes=434F4E4E454354\n\nProbe: CHECK_OPTIONS\n  method_ptr=0x5634145f7d70 len=3 expected_len=7 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_OPTIONS literal_bytes=4F5054494F4E53\n\nProbe: CHECK_TRACE\n  method_ptr=0x5634145f7d70 len=3 expected_len=5 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_TRACE literal_bytes=5452414345\n\nProbe: CHECK_GET\n  method_ptr=0x5634145f7d70 len=3 expected_len=3 len_match=1 cmp_result=9\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_GET literal_bytes=474554\n\nProbe: CHECK_HEAD\n  method_ptr=0x5634145f7d70 len=3 expected_len=4 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_HEAD literal_bytes=48454144\n\nProbe: CHECK_POST\n  method_ptr=0x5634145f7d70 len=3 expected_len=4 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_POST literal_bytes=504F5354\n\nProbe: CHECK_PUT\n  method_ptr=0x5634145f7d70 len=3 expected_len=3 len_match=1 cmp_result=0\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_PUT literal_bytes=505554\n\nProbe: CHECK_DELETE\n  method_ptr=0x5634145f7d70 len=3 expected_len=6 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_DELETE literal_bytes=44454C455445\n\nProbe: CHECK_CONNECT\n  method_ptr=0x5634145f7d70 len=3 expected_len=7 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_CONNECT literal_bytes=434F4E4E454354\n\nProbe: CHECK_OPTIONS\n  method_ptr=0x5634145f7d70 len=3 expected_len=7 len_match=0 cmp_result=1\n  method_bytes=505554\n  literal_name=MHD_HTTP_METHOD_OPTIONS literal_bytes=4F5054494F4E53\n\nProbe: CHECK_T\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 21.14 states that the standard library function memcmp shall not be used to compare null\u2011terminated strings. In the shown code the MHD_HTTP_METHOD_* identifiers are string literals (null\u2011terminated C strings) and memcmp is used to compare them against the incoming method bytes (even though the call limits the comparison to len bytes). Because one operand is a null\u2011terminated string literal, this use of memcmp to perform a string comparison violates Rule 21.14. (If, contrary to the usual case, the MHD_HTTP_METHOD_* macros were defined as non\u2011null\u2011terminated arrays of known fixed length, then memcmp could be acceptable; but given the typical definition as string literals the report is correct.)"
}