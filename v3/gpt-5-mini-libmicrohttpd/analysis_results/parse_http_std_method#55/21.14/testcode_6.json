{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(m, MHD_HTTP_METHOD_OPTIONS, len) where MHD_HTTP_METHOD_OPTIONS is a null\u2011terminated string literal. Even though len is checked to equal the literal\u2019s length, memcmp is still being used to compare a null\u2011terminated string, which is forbidden by MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/558.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_http_std_method as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\nPlease provide the modified parse_http_std_method code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a formatted message to the log file. */\nstatic void\nlog_append (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/558.txt\", \"a\");\n  if (NULL == f)\n    {\n      return;\n    }\n  va_start (ap, fmt);\n  (void)vfprintf (f, fmt, ap);\n  va_end (ap);\n  (void)fclose (f);\n}\n\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  /* Log entry with pointer and length */\n  log_append (\"ENTRY parse_http_std_method: method_ptr=%p len=%zu\\n\",\n              (const void *)m, len);\n\n  /* For each check evaluate the expected length and the memcmp result once,\n     log them, and then use the same values in the condition to preserve\n     original behavior. */\n  {\n    size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET);\n    int cmp = 1;\n    if (expected_len == len)\n      cmp = memcmp (m, MHD_HTTP_METHOD_GET, len);\n    log_append (\"CHECK GET: expected_len=%zu len=%zu memcmp=%d\\n\",\n                expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n        log_append (\"SELECTED: GET\\n\");\n        return;\n      }\n  }\n\n  {\n    size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD);\n    int cmp = 1;\n    if (expected_len == len)\n      cmp = memcmp (m, MHD_HTTP_METHOD_HEAD, len);\n    log_append (\"CHECK HEAD: expected_len=%zu len=%zu memcmp=%d\\n\",\n                expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n        log_append (\"SELECTED: HEAD\\n\");\n        return;\n      }\n  }\n\n  {\n    size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST);\n    int cmp = 1;\n    if (expected_len == len)\n      cmp = memcmp (m, MHD_HTTP_METHOD_POST, len);\n    log_append (\"CHECK POST: expected_len=%zu len=%zu memcmp=%d\\n\",\n                expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n        log_append (\"SELECTED: POST\\n\");\n        return;\n      }\n  }\n\n  {\n    size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT);\n    int cmp = 1;\n    if (expected_len == len)\n      cmp = memcmp (m, MHD_HTTP_METHOD_PUT, len);\n    log_append (\"CHECK PUT: expected_len=%zu len=%zu memcmp=%d\\n\",\n                expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n        log_append (\"SELECTED: PUT\\n\");\n        return;\n      }\n  }\n\n  {\n    size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE);\n    int cmp = 1;\n    if (expected_len == len)\n      cmp = memcmp (m, MHD_HTTP_METHOD_DELETE, len);\n    log_append (\"CHECK DELETE: expected_len=%zu len=%zu memcmp=%d\\n\",\n                expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n        log_append (\"SELECTED: DELETE\\n\");\n        return;\n      }\n  }\n\n  {\n    size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT);\n    int cmp = 1;\n    if (expected_len == len)\n      cmp = memcmp (m, MHD_HTTP_METHOD_CONNECT, len);\n    log_append (\"CHECK CONNECT: expected_len=%zu len=%zu memcmp=%d\\n\",\n                expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n        log_append (\"SELECTED: CONNECT\\n\");\n        return;\n      }\n  }\n\n  /* THIS CHECK IS RELEVANT TO THE REPORTED VIOLATION SCENARIO */\n  {\n    size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS);\n    int cmp = 1;\n    if (expected_len == len)\n      cmp = memcmp (m, MHD_HTTP_METHOD_OPTIONS, len);\n    log_append (\"CHECK OPTIONS: expected_len=%zu len=%zu memcmp=%d\\n\",\n                expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n        log_append (\"SELECTED: OPTIONS (memcmp used against null-terminated literal)\\n\");\n        return;\n      }\n  }\n\n  {\n    size_t expected_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE);\n    int cmp = 1;\n    if (expected_len == len)\n      cmp = memcmp (m, MHD_HTTP_METHOD_TRACE, len);\n    log_append (\"CHECK TRACE: expected_len=%zu len=%zu memcmp=%d\\n\",\n                expected_len, len, cmp);\n    if ((expected_len == len) && (0 == cmp))\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n        log_append (\"SELECTED: TRACE\\n\");\n        return;\n      }\n  }\n\n  connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n  log_append (\"SELECTED: OTHER\\n\");\n}\n"
}