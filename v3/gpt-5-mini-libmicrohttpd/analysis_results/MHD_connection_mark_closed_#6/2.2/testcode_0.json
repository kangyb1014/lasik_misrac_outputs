{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the connection->state field is never read after this assignment (for example, the event loop decision uses connection->event_loop_info and the connection is cleaned up/freed without any subsequent reads of connection->state, or some other code always overwrites connection->state before any read), then the assignment has no effect on program behaviour. In that situation removing the assignment would not change the program and it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_mark_closed_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/62.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_connection_mark_closed_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_connection_mark_closed_:\n```c\nvoid\nMHD_connection_mark_closed_ (struct MHD_Connection *connection)\n{\n  const struct MHD_Daemon *daemon = connection->daemon;\n\n  if (0 == (daemon->options & MHD_USE_TURBO))\n  {\n#ifdef HTTPS_SUPPORT\n    /* For TLS connection use shutdown of TLS layer\n     * and do not shutdown TCP socket. This give more\n     * chances to send TLS closure data to remote side.\n     * Closure of TLS layer will be interpreted by\n     * remote side as end of transmission. */\n    if (0 != (daemon->options & MHD_USE_TLS))\n    {\n      if (! MHD_tls_connection_shutdown (connection))\n        shutdown (connection->socket_fd,\n                  SHUT_WR);\n    }\n    else   /* Combined with next 'shutdown()'. */\n#endif /* HTTPS_SUPPORT */\n    shutdown (connection->socket_fd,\n              SHUT_WR);\n  }\n  connection->state = MHD_CONNECTION_CLOSED;\n  connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n}\n```\n</target_code>\nPlease provide the modified MHD_connection_mark_closed_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/stat.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/62.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/62.txt\", \"a\");\n    if (NULL == f)\n    {\n        /* Try to create directory and retry once. */\n        if (errno == ENOENT)\n        {\n            (void)mkdir(\"/tmp/logs\", 0777);\n            f = fopen(\"/tmp/logs/62.txt\", \"a\");\n        }\n    }\n\n    if (NULL == f)\n    {\n        /* If logging fails, give up silently to avoid affecting logic. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\nvoid\nMHD_connection_mark_closed_ (struct MHD_Connection *connection)\n{\n  const struct MHD_Daemon *daemon = connection->daemon;\n\n  probe_log(\"ENTER MHD_connection_mark_closed_: connection=%p socket_fd=%d daemon=%p options=0x%08x state=%d event_loop_info=%d\\n\",\n            (void *)connection,\n            connection->socket_fd,\n            (void *)daemon,\n            (unsigned)daemon->options,\n            (int)connection->state,\n            (int)connection->event_loop_info);\n\n  if (0 == (daemon->options & MHD_USE_TURBO))\n  {\n#ifdef HTTPS_SUPPORT\n    /* For TLS connection use shutdown of TLS layer\n     * and do not shutdown TCP socket. This give more\n     * chances to send TLS closure data to remote side.\n     * Closure of TLS layer will be interpreted by\n     * remote side as end of transmission. */\n    if (0 != (daemon->options & MHD_USE_TLS))\n    {\n      probe_log(\"Branch: HTTPS_SUPPORT && MHD_USE_TLS set. Calling MHD_tls_connection_shutdown for connection=%p\\n\",\n                (void *)connection);\n      int tls_ok = MHD_tls_connection_shutdown (connection);\n      probe_log(\"MHD_tls_connection_shutdown returned %d for connection=%p\\n\",\n                tls_ok,\n                (void *)connection);\n      if (! tls_ok)\n      {\n        probe_log(\"Calling shutdown(socket_fd=%d, SHUT_WR) because TLS shutdown failed\\n\",\n                  connection->socket_fd);\n        shutdown (connection->socket_fd,\n                  SHUT_WR);\n        probe_log(\"shutdown returned for socket_fd=%d\\n\",\n                  connection->socket_fd);\n      }\n    }\n    else   /* Combined with next 'shutdown()'. */\n#endif /* HTTPS_SUPPORT */\n    {\n      /* This block corresponds to the unconditional shutdown in the original code. */\n      probe_log(\"Calling shutdown(socket_fd=%d, SHUT_WR) (no TLS or HTTPS_SUPPORT not defined)\\n\",\n                connection->socket_fd);\n      shutdown (connection->socket_fd,\n                SHUT_WR);\n      probe_log(\"shutdown returned for socket_fd=%d\\n\",\n                connection->socket_fd);\n    }\n  }\n\n  probe_log(\"Before assigning state/event_loop_info: current state=%d event_loop_info=%d\\n\",\n            (int)connection->state,\n            (int)connection->event_loop_info);\n\n  connection->state = MHD_CONNECTION_CLOSED;\n  connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n\n  probe_log(\"After assigning state/event_loop_info: new state=%d event_loop_info=%d\\n\",\n            (int)connection->state,\n            (int)connection->event_loop_info);\n\n  probe_log(\"EXIT MHD_connection_mark_closed_: connection=%p\\n\",\n            (void *)connection);\n}\n"
}