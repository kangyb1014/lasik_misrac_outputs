{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_connection_mark_closed_:\n```c\nvoid\nMHD_connection_mark_closed_ (struct MHD_Connection *connection)\n{\n  const struct MHD_Daemon *daemon = connection->daemon;\n\n  if (0 == (daemon->options & MHD_USE_TURBO))\n  {\n#ifdef HTTPS_SUPPORT\n    /* For TLS connection use shutdown of TLS layer\n     * and do not shutdown TCP socket. This give more\n     * chances to send TLS closure data to remote side.\n     * Closure of TLS layer will be interpreted by\n     * remote side as end of transmission. */\n    if (0 != (daemon->options & MHD_USE_TLS))\n    {\n      if (! MHD_tls_connection_shutdown (connection))\n        shutdown (connection->socket_fd,\n                  SHUT_WR);\n    }\n    else   /* Combined with next 'shutdown()'. */\n#endif /* HTTPS_SUPPORT */\n    shutdown (connection->socket_fd,\n              SHUT_WR);\n  }\n  connection->state = MHD_CONNECTION_CLOSED;\n  connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (! MHD_tls_connection_shutdown (connection))",
    "MHD_connection_mark_closed_ (struct MHD_Connection *connection)",
    "const struct MHD_Daemon *daemon = connection->daemon;"
  ],
  "explanation": "The rule concerns pointer declarations/uses that could or should point to const-qualified types. I selected: (1) the function parameter 'struct MHD_Connection *connection' because its declaration and use require inspection of the MHD_Connection type and of any callers to confirm whether parts of the pointee could be const-qualified (even if this function modifies members, some pointed-to subobjects might still be const). (2) the local 'const struct MHD_Daemon *daemon = connection->daemon;' assignment \u2014 although the local pointer is const-qualified, the actual member 'connection->daemon' (definition not shown here) must be checked: if that member is declared as a non-const pointer to MHD_Daemon, it may violate Rule 8.13. (3) the call 'MHD_tls_connection_shutdown (connection)' \u2014 the prototype of this function must be checked to see whether it could/should accept a pointer to const; passing a non-const pointer might mask a missed const qualification in the callee or the argument type. Other fragments in the function do not need investigation for Rule 8.13: shutdown(...) uses an integer file descriptor (no pointer-to-object), the assignments to connection->state and connection->event_loop_info demonstrate that this function intentionally modifies parts of the connection object (so the connection pointer cannot be wholly const here), and the local 'daemon' pointer is already const-qualified. Therefore they are not flagged for further investigation under Rule 8.13."
}