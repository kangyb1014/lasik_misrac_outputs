{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe single statement is a runtime-only check (mhd_assert(pp->xbuf_pos < sizeof(xbuf))); it has no side-effects when the condition holds, so in normal/expected executions its presence does not affect program behaviour. That means the call is executable but removable without changing program behaviour (i.e. dead code). Therefore Rule 2.2 is violated. (If the assertion macro can abort on failure, removal would change behaviour only in fault cases; but for the intended correct operation the assertion is redundant and constitutes dead code. Recommend removing or converting the check to a required runtime-safe check with defined effect, or to a static-analysis-only invariant.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2352.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_value:\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\nPlease provide the modified process_value code.\n",
  "test_code": "static void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  /* Probe helper: best-effort append-only logging. If the path doesn't\n     exist or fopen fails, we silently continue to avoid changing behaviour. */\n  static void probe_log_pp(const struct MHD_PostProcessor *pp,\n                           const char *stage,\n                           size_t xbuf_size,\n                           size_t xbuf_pos_local,\n                           const char *value_start_local,\n                           const char *value_end_local,\n                           const char *last_escape_local,\n                           size_t value_offset_local,\n                           size_t xoff_local)\n  {\n    FILE *f = fopen(\"/tmp/logs/2352.txt\", \"a\");\n    if (NULL == f)\n      return;\n    /* Print pointer values and relevant size/state fields. Use %p for\n       pointers and %zu for size_t. Cast boolean to int for printing. */\n    fprintf(f,\n            \"process_value: stage=%s pp=%p pp->xbuf_pos=%zu xbuf_size=%zu value_start=%p value_end=%p last_escape=%p value_offset=%zu xoff=%zu must_ikvi=%d state=%d\\n\",\n            stage,\n            (const void *) pp,\n            (size_t) xbuf_pos_local,\n            (size_t) xbuf_size,\n            (const void *) value_start_local,\n            (const void *) value_end_local,\n            (const void *) last_escape_local,\n            (size_t) value_offset_local,\n            (size_t) xoff_local,\n            (int) pp->must_ikvi,\n            (int) pp->state);\n    fclose(f);\n  }\n\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  /* Log state immediately before the runtime-only check of interest */\n  probe_log_pp(pp, \"pre_assert_pp_xbuf_pos_check\", sizeof(xbuf), pp->xbuf_pos,\n               value_start, value_end, last_escape, pp->value_offset, 0);\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n\n  /* Log state immediately after that assertion */\n  probe_log_pp(pp, \"post_assert_pp_xbuf_pos_check\", sizeof(xbuf), pp->xbuf_pos,\n               value_start, value_end, last_escape, pp->value_offset, 0);\n\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n  {\n    probe_log_pp(pp, \"pre_memcpy_move_remaining_input\", sizeof(xbuf), pp->xbuf_pos,\n                 value_start, value_end, last_escape, pp->value_offset, 0);\n\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n\n    probe_log_pp(pp, \"post_memcpy_move_remaining_input\", sizeof(xbuf), pp->xbuf_pos,\n                 value_start, value_end, last_escape, pp->value_offset, pp->xbuf_pos);\n  }\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n\n    probe_log_pp(pp, \"handled_last_escape\", sizeof(xbuf), pp->xbuf_pos,\n                 value_start, value_end, last_escape, pp->value_offset, xoff);\n  }\n\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    probe_log_pp(pp, \"loop_top\", sizeof(xbuf), pp->xbuf_pos,\n                 value_start, value_end, last_escape, pp->value_offset, xoff);\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n\n      probe_log_pp(pp, \"after_move_additional_input\", sizeof(xbuf), pp->xbuf_pos,\n                   value_start, value_end, last_escape, pp->value_offset, xoff);\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n\n        probe_log_pp(pp, \"found_single_percent_cut\", sizeof(xbuf), pp->xbuf_pos,\n                     value_start, value_end, last_escape, pp->value_offset, xoff);\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n\n        probe_log_pp(pp, \"found_single_percent_no_cut\", sizeof(xbuf), pp->xbuf_pos,\n                     value_start, value_end, last_escape, pp->value_offset, xoff);\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n\n        probe_log_pp(pp, \"found_double_percent_cut\", sizeof(xbuf), pp->xbuf_pos,\n                     value_start, value_end, last_escape, pp->value_offset, xoff);\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n\n        probe_log_pp(pp, \"found_double_percent_no_cut\", sizeof(xbuf), pp->xbuf_pos,\n                     value_start, value_end, last_escape, pp->value_offset, xoff);\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n\n      probe_log_pp(pp, \"after_unescape\", sizeof(xbuf), pp->xbuf_pos,\n                   value_start, value_end, last_escape, pp->value_offset, xoff);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n\n      probe_log_pp(pp, \"before_ikvi_callback\", sizeof(xbuf), pp->xbuf_pos,\n                   value_start, value_end, last_escape, pp->value_offset, xoff);\n\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        probe_log_pp(pp, \"ikvi_returned_no_set_error_and_return\", sizeof(xbuf), pp->xbuf_pos,\n                     value_start, value_end, last_escape, pp->value_offset, xoff);\n        return;\n      }\n\n      probe_log_pp(pp, \"after_ikvi_callback_success\", sizeof(xbuf), pp->xbuf_pos,\n                   value_start, value_end, last_escape, pp->value_offset + xoff, xoff);\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n\n      probe_log_pp(pp, \"after_clen_shift\", sizeof(xbuf), pp->xbuf_pos,\n                   value_start, value_end, last_escape, pp->value_offset, clen);\n    }\n    xoff = clen;\n\n    probe_log_pp(pp, \"loop_bottom\", sizeof(xbuf), pp->xbuf_pos,\n                 value_start, value_end, last_escape, pp->value_offset, xoff);\n  }\n\n  probe_log_pp(pp, \"function_exit\", sizeof(xbuf), pp->xbuf_pos,\n               value_start, value_end, last_escape, pp->value_offset, xoff);\n}\n"
}