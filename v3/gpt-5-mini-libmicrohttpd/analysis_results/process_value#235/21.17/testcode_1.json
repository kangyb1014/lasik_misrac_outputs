{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy call uses pp->xbuf_pos as the length but the function only asserts pp->xbuf_pos < sizeof(xbuf) (the local destination size). There is no check that pp->xbuf_pos <= sizeof(pp->xbuf) (the source buffer size). If pp->xbuf is smaller than xbuf or pp->xbuf_pos contains a value that is less than sizeof(xbuf) but greater than sizeof(pp->xbuf) (for example, pp->xbuf_pos has been set/corrupted to a value in the range sizeof(pp->xbuf)+1 .. sizeof(xbuf)-1), memcpy(xbuf, pp->xbuf, pp->xbuf_pos) will read beyond the bounds of pp->xbuf. Therefore Rule 21.17 can be violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_value:\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\nPlease provide the modified process_value code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/2359.txt */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2359.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  /* Log entry state */\n  probe_log (\"ENTRY: pp=%p, pp->xbuf_pos=%zu, sizeof(xbuf)=%zu, sizeof(pp->xbuf)=%zu, value_start=%p, value_end=%p, last_escape=%p\",\n             (void *) pp,\n             pp->xbuf_pos,\n             (size_t) sizeof (xbuf),\n             (size_t) sizeof (pp->xbuf),\n             (void *) value_start,\n             (void *) value_end,\n             (void *) last_escape);\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n  {\n    probe_log (\"PRE memcpy: copy from pp->xbuf -> xbuf len=%zu (pp->xbuf_pos), src_size=%zu, dst_size=%zu\",\n               pp->xbuf_pos,\n               (size_t) sizeof (pp->xbuf),\n               (size_t) sizeof (xbuf));\n\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n\n    probe_log (\"POST memcpy: copied %zu bytes from pp->xbuf to xbuf\", pp->xbuf_pos);\n  }\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n\n    probe_log (\"PRE memcpy last_escape -> pp->xbuf: len=%zu, sizeof(pp->xbuf)=%zu, last_escape=%p, value_end=%p\",\n               (size_t) (value_end - last_escape),\n               (size_t) sizeof (pp->xbuf),\n               (void *) last_escape,\n               (void *) value_end);\n\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n\n    probe_log (\"POST memcpy last_escape -> pp->xbuf: pp->xbuf_pos=%zu\", pp->xbuf_pos);\n    value_end = last_escape;\n  }\n\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    probe_log (\"LOOP START: value_start=%p, value_end=%p, delta(before)=%zu, xoff=%zu, must_ikvi=%d\",\n               (void *) value_start,\n               (void *) value_end,\n               delta,\n               xoff,\n               (int) pp->must_ikvi);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      probe_log (\"PRE memcpy input -> xbuf at offset %zu: delta=%zu, src=%p\",\n                 xoff,\n                 delta,\n                 (void *) value_start);\n\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n\n      xoff += delta;\n      value_start += delta;\n\n      probe_log (\"POST memcpy input -> xbuf: new xoff=%zu, new value_start=%p\",\n                 xoff,\n                 (void *) value_start);\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      probe_log (\"ESCAPE1 detected at end: cut=%d, xoff(after--)=%zu\", (int) cut, xoff);\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n        probe_log (\"MOVE escape into pp->xbuf: pp->xbuf_pos=%zu\", pp->xbuf_pos);\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n        probe_log (\"SKIP escape (1) for next iteration: delta=%zu, clen=%zu\", delta, clen);\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      probe_log (\"ESCAPE2 detected at end: cut=%d, xoff(after-=2)=%zu\", (int) cut, xoff);\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        probe_log (\"PRE memcpy escape(2) -> pp->xbuf: src=&xbuf[%zu], len=2\", xoff);\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n        probe_log (\"POST memcpy escape(2) -> pp->xbuf: pp->xbuf_pos=%zu\", pp->xbuf_pos);\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n        probe_log (\"SKIP escape (2) for next iteration: delta=%zu, clen=%zu\", delta, clen);\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    probe_log (\"BEFORE unescape: xoff=%zu, xbuf(@)=%p\", xoff, (void *) xbuf);\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n      probe_log (\"AFTER unescape: new xoff=%zu, xbuf(@)=%p\", xoff, (void *) xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      probe_log (\"CALL ikvi: pp->cls=%p, key=@%p, value_offset=%zu, xoff=%zu\",\n                 (void *) pp->cls,\n                 (void *) &pp[1],\n                 pp->value_offset,\n                 xoff);\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        probe_log (\"ikvi returned MHD_NO: setting pp->state=PP_Error and returning\");\n        pp->state = PP_Error;\n        return;\n      }\n      probe_log (\"ikvi returned success\");\n    }\n    pp->value_offset += xoff;\n    probe_log (\"AFTER handler: pp->value_offset=%zu\", pp->value_offset);\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      probe_log (\"PRE memmove: move remaining %zu bytes from &xbuf[%zu] to xbuf\", clen, delta);\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n      probe_log (\"POST memmove: xbuf now has %zu bytes, xbuf(@)=%p\", clen, (void *) xbuf);\n    }\n    xoff = clen;\n    probe_log (\"LOOP END: xoff=%zu, value_start=%p, value_end=%p\", xoff, (void *) value_start, (void *) value_end);\n  }\n\n  probe_log (\"EXIT: pp=%p, pp->xbuf_pos=%zu, pp->value_offset=%zu, state=%d\",\n             (void *) pp,\n             pp->xbuf_pos,\n             pp->value_offset,\n             (int) pp->state);\n}\n"
}