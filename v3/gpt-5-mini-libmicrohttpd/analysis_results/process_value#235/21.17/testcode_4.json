{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the preconditions implied by the mhd_asserts are not enforced at run time (for example, when asserts are disabled) a violation can occur. In particular: if value_start and value_end are both NULL but the loop is entered (because pp->must_ikvi is true or xoff > 0), the subtraction value_end - value_start is undefined and may produce a non\u2011zero delta; memcpy(&xbuf[xoff], value_start, delta) would then read from a NULL/invalid source pointer or copy more bytes than the source actually contains. This can result in accesses beyond the bounds of the objects referenced by the pointer parameters to memcpy.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_value:\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\nPlease provide the modified process_value code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends diagnostic lines to /tmp/logs/2359.txt */\nstatic void\nprobe_logf (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/2359.txt\", \"a\");\n  if (!f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc ('\\n', f);\n  fflush (f);\n  fclose (f);\n}\n\nstatic void\nprobe_dump_xbuf (const char *label, const char *buf, size_t len)\n{\n  FILE *f = fopen (\"/tmp/logs/2359.txt\", \"a\");\n  if (!f)\n    return;\n  size_t i, n = (len < 64) ? len : 64; /* limit bytes dumped */\n  fprintf (f, \"%s: len=%zu bytes [\", label, len);\n  for (i = 0; i < n; ++i)\n  {\n    unsigned char c = (unsigned char) buf[i];\n    if (c >= 32 && c < 127)\n      fputc (c, f);\n    else\n      fprintf (f, \"\\\\x%02x\", c);\n  }\n  if (len > n)\n    fprintf (f, \"...(%zu more bytes)\", len - n);\n  fprintf (f, \"]\\n\");\n  fflush (f);\n  fclose (f);\n}\n\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  /* Log entry and initial state */\n  probe_logf (\"process_value ENTRY: pp=%p, pp->xbuf_pos=%zu, pp->must_ikvi=%d, value_start=%p, value_end=%p, last_escape=%p\",\n              (void *) pp, pp->xbuf_pos, (int) pp->must_ikvi,\n              (const void *) value_start, (const void *) value_end,\n              (const void *) last_escape);\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n  {\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n    probe_dump_xbuf (\"copied_prior_xbuf\", xbuf, pp->xbuf_pos);\n  }\n  xoff = pp->xbuf_pos;\n  probe_logf (\"after_restore: xoff=%zu\", xoff);\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    probe_logf (\"handling last_escape: last_escape=%p, moved=%zu bytes to pp->xbuf\", (const void *) last_escape, pp->xbuf_pos);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    probe_dump_xbuf (\"pp->xbuf_after_last_escape\", pp->xbuf, pp->xbuf_pos);\n    value_end = last_escape;\n    probe_logf (\"value_end adjusted to last_escape -> value_end=%p\", (const void *) value_end);\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    /* Log loop entry conditions to help reproduce scenario where both\n       value_start and value_end are NULL but we still enter the loop. */\n    probe_logf (\"loop ITER: value_start=%p, value_end=%p, pp->must_ikvi=%d, xoff=%zu\",\n                (const void *) value_start, (const void *) value_end,\n                (int) pp->must_ikvi, xoff);\n\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    /* Log computed delta. Note: this mirrors the computation in the\n       original code; if value_start/value_end are NULL this mirrors the\n       same undefined behavior for diagnostic purposes. */\n    probe_logf (\"computed delta=%zu\", delta);\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      probe_logf (\"about to memcpy into xbuf: dest=&xbuf[%zu], src=%p, len=%zu\", xoff, (const void *) value_start, delta);\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      probe_dump_xbuf (\"xbuf_after_memcpy\", xbuf, xoff);\n      value_start += delta;\n      probe_logf (\"after memcpy: xoff=%zu, value_start=%p\", xoff, (const void *) value_start);\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      probe_logf (\"found single '%' at end: cut=%d, new_xoff=%zu\", (int) cut, xoff);\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n        probe_logf (\"moved '%' to pp->xbuf, pp->xbuf_pos=1\");\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n        probe_logf (\"skip single '%%' for next loop: delta=%zu, clen=%zu\", delta, clen);\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      probe_logf (\"found '%%' at -2: cut=%d, new_xoff=%zu\", (int) cut, xoff);\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n        probe_logf (\"moved two-byte escape to pp->xbuf, pp->xbuf_pos=2\");\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n        probe_logf (\"skip two-byte escape for next loop: delta=%zu, clen=%zu\", delta, clen);\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    probe_logf (\"before unescape: xoff=%zu\", xoff);\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n      probe_logf (\"after unescape: xoff=%zu\", xoff);\n      probe_dump_xbuf (\"unescaped_xbuf\", xbuf, xoff);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      probe_logf (\"calling ikvi: pp->cls=%p, key_buf=%p, value_off=%zu, xoff=%zu\",\n                  (void *) pp->cls, (void *) &pp[1], pp->value_offset, xoff);\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        probe_logf (\"ikvi returned MHD_NO, setting pp->state=PP_Error and returning\");\n        pp->state = PP_Error;\n        return;\n      }\n      probe_logf (\"ikvi returned OK\");\n    }\n    pp->value_offset += xoff;\n    probe_logf (\"updated pp->value_offset=%zu\", pp->value_offset);\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n      probe_logf (\"after memmove for clen=%zu, xoff set to clen\", clen);\n    }\n    xoff = clen;\n    probe_logf (\"end of loop iteration: xoff=%zu, pp->xbuf_pos=%zu, must_ikvi=%d, value_start=%p, value_end=%p\",\n                xoff, pp->xbuf_pos, (int) pp->must_ikvi,\n                (const void *) value_start, (const void *) value_end);\n  }\n\n  probe_logf (\"process_value EXIT: pp=%p, pp->xbuf_pos=%zu, pp->state=%d, value_start=%p, value_end=%p\",\n              (void *) pp, pp->xbuf_pos, (int) pp->state,\n              (const void *) value_start, (const void *) value_end);\n}\n"
}