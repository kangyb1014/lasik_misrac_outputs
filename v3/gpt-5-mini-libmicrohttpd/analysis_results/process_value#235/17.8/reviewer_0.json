{
  "user_message": "An agent A claimed that the following process_value code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of process_value.\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer parameter 'value_start' is modified with the statement 'value_start += delta;'. Rule 17.8 prohibits modifying a function parameter itself (the pointer); only the object pointed to may be modified. This direct increment of the parameter violates the rule.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER process_value: pp=0x5579c54b63e0, value_start=0x5579c518502b, value_end=0x5579c518502f, last_escape=(nil), pp->xbuf_pos=0, pp->value_offset=0\nLOOP START: value_start=0x5579c518502b, value_end=0x5579c518502f, raw_delta=4, xoff=0, must_ikvi=1\nAbout to memcpy 4 bytes from value_start=0x5579c518502b into xbuf+0\nAfter memcpy: xoff=4, value_start (advanced)=0x5579c518502f\nAfter unescape: xbuf (first bytes)='xxx', xoff=4\nCalling ikvi: cls=(nil), key=0x5579c54b6480, value_offset=0, xoff=4\nikvi returned success\nUpdated pp->value_offset=4\nEXIT process_value: pp=0x5579c54b63e0, final value_start=0x5579c518502f, value_end=0x5579c518502f, pp->xbuf_pos=0, pp->value_offset=4\nENTER process_value: pp=0x5579c54b63e0, value_start=0x5579c5185036, value_end=0x5579c518503a, last_escape=(nil), pp->xbuf_pos=0, pp->value_offset=0\nLOOP START: value_start=0x5579c5185036, value_end=0x5579c518503a, raw_delta=4, xoff=0, must_ikvi=1\nAbout to memcpy 4 bytes from value_start=0x5579c5185036 into xbuf+0\nAfter memcpy: xoff=4, value_start (advanced)=0x5579c518503a\nAfter unescape: xbuf (first bytes)='yyy', xoff=4\nCalling ikvi: cls=(nil), key=0x5579c54b6480, value_offset=0, xoff=4\nikvi returned success\nUpdated pp->value_offset=4\nEXIT process_value: pp=0x5579c54b63e0, final value_start=0x5579c518503a, value_end=0x5579c518503a, pp->xbuf_pos=0, pp->value_offset=4\nENTER process_value: pp=0x5579c54b63e0, value_start=0x5579c5185040, value_end=0x5579c5185040, last_escape=(nil), pp->xbuf_pos=0, pp->value_offset=0\nLOOP START: value_start=0x5579c5185040, value_end=0x5579c5185040, raw_delta=0, xoff=0, must_ikvi=1\nCalling ikvi: cls=(nil), key=0x5579c54b6480, value_offset=0, xoff=0\nikvi returned success\nUpdated pp->value_offset=0\nEXIT process_value: pp=0x5579c54b63e0, final value_start=0x5579c5185040, value_end=0x5579c5185040, pp->xbuf_pos=0, pp->value_offset=0\nENTER process_value: pp=0x5579c54b63e0, value_start=0x5579c518d08c, value_end=0x5579c518d08c, last_escape=(nil), pp->xbuf_pos=0, pp->value_offset=0\nLOOP START: value_start=0x5579c518d08c, value_end=0x5579c518d08c, raw_delta=0, xoff=0, must_ikvi=1\nCalling ikvi: cls=(nil), key=0x5579c54b6480, value_offset=0, xoff=0\nikvi returned success\nUpdated pp->value_offset=0\nEXIT process_value: pp=0x5579c54b63e0, final value_start=0x5579c518d08c, value_end=0x5579c518d08c, pp->xbuf_pos=0, pp->value_offset=0\nENTER process_value: pp=0x5579c54b63e0, value_start=0x5579c518504c, value_end=0x5579c5185052, last_escape=0x5579c5185050, pp->xbuf_pos=0, pp->value_offset=0\nLOOP START: value_start=0x5579c518504c, value_end=0x5579c5185052, raw_delta=6, xoff=0, must_ikvi=1\nAbout to memcpy 6 bytes from value_start=0x5579c518504c into xbuf+0\nAfter memcpy: xoff=6, value_start (advanced)=0x5579c5185052\nEscape at xbuf[xoff-2]: cut=1, adjusted xoff=4\nStored '%' and following byte into pp->xbuf for next invocation\nAfter unescape: xbuf (first bytes)='tex', xoff=4\nCalling ikvi: cls=(nil), key=0x5579c54b6480, value_offset=0, xoff=4\nikvi returned success\nUpdated pp->value_offset=4\nBreaking out of loop due to cut=true\nEXIT process_value: pp=0x5579c54b63e0, final value_start=0x5579c5185052, value_end=0x5579c5185052, pp->xbuf_pos=2, pp->value_offset=4\nENTER process_value: pp=0x5579c54b63e0, value_start=0x5579c5185053, value_end=0x5579c5185059, last_escape=(nil), pp->xbuf_pos=2, pp->value_offset=4\nLOOP START: value_start=0x5579c5185053, value_end=0x5579c5185059, raw_delta=6, xoff=2, must_ikvi=0\nAbout to memcpy 6 bytes from value_start=0x5579c5185053 into xbuf+2\nAfter memcpy: xoff=8, value_start (advanced)=0x5579c5185059\nAfter unescape: xbuf (first bytes)=', t', xoff=6\nCalling ikvi: cls=(nil), key=0x5579c54b6480, value_offset=4, xoff=6\nikvi returned success\nUpdated pp->value_offset=10\nEXIT process_value: pp=0x5579c54b63e0, final value_start=0x5579c5185059, value_end=0x5579c5185059, pp->xbuf_pos=0, pp->value_offset=10\nENTER process_value: pp=0x5579c54b63e0, value_start=0x5579c518505c, value_end=0x5579c518852d, last_escape=(nil), pp->xbuf_pos=0, pp->value_offset=0\nLOOP START: value_start=0x5579c518505c, value_end=0x5579c518852d, raw_delta=13521, xoff=0, mu\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 prohibits modifying function parameters themselves (the pointer value), even though the object pointed to may be modified. In process_value the pointer parameters are reassigned: value_start is advanced with value_start += delta; and value_end is reassigned with value_end = last_escape;. Both statements modify the pointer parameters and therefore violate Rule 17.8. (A compliant fix is to use local copy variables, e.g. const char *vs = value_start; const char *ve = value_end;, and modify those instead.)"
}