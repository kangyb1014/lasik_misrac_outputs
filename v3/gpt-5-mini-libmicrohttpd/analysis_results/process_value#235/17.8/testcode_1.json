{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'value_end = last_escape;' in the shown fragment modifies the pointer parameter 'value_end'. MISRA C 2023 Rule 17.8 prohibits modifying function parameter pointers themselves (the object they point to may be changed, but not the pointer). Thus this line violates Rule 17.8. (As a note, elsewhere in the function 'value_start += delta;' also modifies a pointer parameter and would likewise violate the rule.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2357.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_value:\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\nPlease provide the modified process_value code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void\nlog_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2357.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  /* Log entry and initial state */\n  log_probe(\"process_value ENTER: pp=%p, value_start=%p, value_end=%p, last_escape=%p, pp->xbuf_pos=%zu, pp->value_offset=%zu\",\n            (void *) pp, (void *) value_start, (void *) value_end, (void *) last_escape,\n            pp->xbuf_pos, pp->value_offset);\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n\n    /* Log about to modify pointer parameter 'value_end' */\n    log_probe(\"About to set value_end = last_escape; before: value_end=%p, last_escape=%p, distance=%zu\",\n              (void *) value_end, (void *) last_escape, (size_t) (value_end - last_escape));\n\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n\n    /* Log after modification of 'value_end' to capture the violation scenario */\n    log_probe(\"After assignment: value_end=%p (set to last_escape=%p), pp->xbuf_pos=%zu\",\n              (void *) value_end, (void *) last_escape, pp->xbuf_pos);\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    static int iter = 0; iter++;\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    /* Log loop iteration start and pointer state */\n    log_probe(\"Loop iter=%d start: value_start=%p, value_end=%p, delta=%zu, xoff=%zu, must_ikvi=%d\",\n              iter, (void *) value_start, (void *) value_end, delta, xoff, (int) pp->must_ikvi);\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      /* Log before advancing value_start (pointer parameter modification) */\n      log_probe(\"About to memcpy %zu bytes from value_start=%p to &xbuf[%zu]; xoff=%zu\",\n                delta, (void *) value_start, xoff, xoff);\n\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n\n      /* Log right before pointer parameter modification */\n      log_probe(\"Before advancing value_start: value_start=%p, delta=%zu\", (void *) value_start, delta);\n\n      value_start += delta;\n\n      /* Log after advancing value_start to capture the violation scenario */\n      log_probe(\"After advancing value_start: value_start=%p, value_end=%p, delta=%zu, xoff=%zu\",\n                (void *) value_start, (void *) value_end, delta, xoff);\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n\n      log_probe(\"Escaped-ending: cut=%d, xoff=%zu, clen=%zu, pp->xbuf_pos=%zu\",\n                (int) cut, xoff, clen, pp->xbuf_pos);\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n\n      log_probe(\"Escaped-penultimate: cut=%d, xoff=%zu, clen=%zu, pp->xbuf_pos=%zu\",\n                (int) cut, xoff, clen, pp->xbuf_pos);\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        /* Log ikvi error and state change before returning */\n        log_probe(\"ikvi returned MHD_NO: setting pp->state=PP_Error and returning; pp=%p, pp->value_offset=%zu, xoff=%zu\",\n                  (void *) pp, pp->value_offset, xoff);\n\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n    {\n      log_probe(\"Breaking loop due to cut=true at iter=%d, pp->value_offset=%zu\", iter, pp->value_offset);\n      break;\n    }\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n\n      log_probe(\"Adjusted buffer for clen=%zu, delta=%zu, new xoff will be=%zu\", clen, delta, clen);\n    }\n    xoff = clen;\n\n    log_probe(\"Loop iter=%d end: value_start=%p, value_end=%p, xoff=%zu, pp->value_offset=%zu\",\n              iter, (void *) value_start, (void *) value_end, xoff, pp->value_offset);\n  }\n\n  /* Log exit */\n  log_probe(\"process_value EXIT: pp=%p, final value_start=%p, value_end=%p, last_escape=%p, pp->xbuf_pos=%zu, pp->value_offset=%zu\",\n            (void *) pp, (void *) value_start, (void *) value_end, (void *) last_escape,\n            pp->xbuf_pos, pp->value_offset);\n}\n"
}