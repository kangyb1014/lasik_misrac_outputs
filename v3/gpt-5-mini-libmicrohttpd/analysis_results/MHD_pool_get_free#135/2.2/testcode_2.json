{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert invocation is dead code when it has no observable effect (e.g. the assert macro is a no-op in production builds or the condition is provably always true). Example: if mhd_assert expands to ((void)0) for non\u2011debug builds, or the expression pool->size >= pool->end - pool->pos is guaranteed by other code/analysis, then executing that assertion (or keeping it compiled in) has no effect on program behaviour and its removal would not change behaviour \u2014 this is dead code and thus violates MISRA C 2023 Rule 2.2. (If, however, mhd_assert can change behaviour \u2014 e.g. it can abort, log, or otherwise affect timing/state \u2014 then it would not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_get_free code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1352.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_get_free as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_get_free:\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_get_free code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Probe helpers: write logs to /tmp/logs/1352.txt. These helpers try not to\n   change program behaviour: the pointer-only probe does not dereference the\n   pool (so it does not introduce undefined behaviour earlier than the\n   original code). The detailed probe is only called after the original\n   assertions so it mirrors the original dereferences that would occur there. */\nstatic void\nmhd_log_pool_pointer(const char *stage, const struct MemoryPool *pool)\n{\n  FILE *f = fopen(\"/tmp/logs/1352.txt\", \"a\");\n  if (f != NULL)\n    {\n      fprintf(f, \"[MHD_POOL] %s: pool=%p\\n\", stage, (const void *) pool);\n      fclose(f);\n    }\n}\n\nstatic void\nmhd_log_pool_state(const char *stage, const struct MemoryPool *pool)\n{\n  FILE *f = fopen(\"/tmp/logs/1352.txt\", \"a\");\n  if (f != NULL)\n    {\n      size_t pos = pool->pos;\n      size_t end = pool->end;\n      size_t size = pool->size;\n      size_t raw_free = (end >= pos) ? (end - pos) : 0u;\n#ifdef _MHD_RED_ZONE_SIZE\n      size_t red_zone = _MHD_RED_ZONE_SIZE;\n#else\n      size_t red_zone = 0u; /* fallback if macro not available at parse time */\n#endif\n      bool cond1 = (end >= pos);\n      bool cond2 = (size >= raw_free);\n      bool cond3 = (pos == ROUND_TO_ALIGN (pos));\n\n      fprintf(f,\n              \"[MHD_POOL] %s: pool=%p pos=%zu end=%zu size=%zu raw_free=%zu red_zone=%zu cond1(end>=pos)=%d cond2(size>=raw_free)=%d cond3(pos==ROUND_TO_ALIGN)=%d\\n\",\n              stage, (const void *) pool, pos, end, size, raw_free, red_zone,\n              cond1 ? 1 : 0, cond2 ? 1 : 0, cond3 ? 1 : 0);\n      fclose(f);\n    }\n}\n\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  /* Log entry without dereferencing pool members (avoids changing behavior\n     if pool is invalid and the original code would assert first). */\n  mhd_log_pool_pointer(\"entry\", pool);\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  /* After the assertions it's safe to read pool fields \u2014 if an assert\n     aborted the process, the following logs won't be produced, which\n     reflects the original behaviour. */\n  mhd_log_pool_state(\"after_asserts\", pool);\n\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    {\n      mhd_log_pool_state(\"asan_return_zero\", pool);\n      return 0;\n    }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n\n  size_t result = (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n\n  /* Log final computed result just before returning. */\n  {\n    FILE *f = fopen(\"/tmp/logs/1352.txt\", \"a\");\n    if (f != NULL)\n      {\n        fprintf(f, \"[MHD_POOL] return: pool=%p free=%zu\\n\", (const void *) pool, result);\n        fclose(f);\n      }\n  }\n\n  return result;\n}\n"
}