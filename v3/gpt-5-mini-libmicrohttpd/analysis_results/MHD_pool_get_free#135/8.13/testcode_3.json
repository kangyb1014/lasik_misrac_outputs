{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MemoryPool *pool' is used only for read access (checking pool->end, pool->pos, pool->size and computing a size) and is never modified. According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible. Change the prototype to 'size_t MHD_pool_get_free(const struct MemoryPool *pool)' to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_get_free code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_get_free as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_get_free:\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_get_free code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Helper to log the pool state to /tmp/logs/1353.txt. Uses a const-qualified\n   pointer so logging does not attempt to modify the pool. Kept static to limit\n   linkage to this translation unit. */\nstatic void\nmhd_pool_log_state (const struct MemoryPool *pool, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/1353.txt\", \"a\");\n  if (f != NULL)\n    {\n      /* Log pointer and key fields used by MHD_pool_get_free. */\n      fprintf (f, \"MHD_pool_get_free: stage=%s, pool=%p, end=%zu, pos=%zu, size=%zu\\n\",\n               stage, (void *)pool,\n               (size_t) pool->end,\n               (size_t) pool->pos,\n               (size_t) pool->size);\n      fclose (f);\n    }\n}\n\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  /* Log state right after assertions to capture the values used for checks. */\n  mhd_pool_log_state (pool, \"after_asserts\");\n\n#ifdef MHD_ASAN_POISON_ACTIVE\n  {\n    size_t available = (pool->end - pool->pos);\n    /* Log branch decision and available size. */\n    mhd_pool_log_state (pool, (available <= _MHD_RED_ZONE_SIZE) ? \"asan_small\" : \"asan_large\");\n    if ((available) <= _MHD_RED_ZONE_SIZE)\n      {\n        FILE *f = fopen(\"/tmp/logs/1353.txt\", \"a\");\n        if (f != NULL)\n          {\n            fprintf (f, \"MHD_pool_get_free: taking ASAN branch, available=%zu, returning=0\\n\", available);\n            fclose (f);\n          }\n        return 0;\n      }\n  }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n\n  size_t result = (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n\n  /* Log the computed result just before returning. */\n  {\n    FILE *f = fopen(\"/tmp/logs/1353.txt\", \"a\");\n    if (f != NULL)\n      {\n        fprintf (f, \"MHD_pool_get_free: computed result=%zu\\n\", result);\n        fclose (f);\n      }\n  }\n\n  return result;\n}\n"
}