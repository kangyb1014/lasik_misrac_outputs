{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as 'struct MemoryPool *pool' but the fragment only reads members (pool->size, pool->end, pool->pos) and does not modify the object. Thus the pointer could and should be declared as 'const struct MemoryPool *pool' (mhd_assert does not perform modification).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_get_free code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_get_free as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_get_free:\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_get_free code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/*\n * Probe helper: log pool state and control path to the file /tmp/logs/1353.txt.\n * This helper reads the pool object only (takes a const pointer) and therefore\n * does not modify program state. It is implemented as a small, self-contained\n * function to minimize impact on the original logic.\n */\nstatic void\nprobe_pool_log (const struct MemoryPool *pool, const char *stage, int has_result, size_t result)\n{\n  FILE *f = fopen(\"/tmp/logs/1353.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  if (pool == NULL)\n  {\n    fprintf(f, \"Stage=%s: pool=NULL\\n\", stage);\n    fclose(f);\n    return;\n  }\n\n  /* compute a safe difference for logging (avoid unsigned underflow) */\n  size_t diff = 0U;\n  if (pool->end >= pool->pos)\n    diff = pool->end - pool->pos;\n\n  fprintf(f, \"Stage=%s\\n\", stage);\n  fprintf(f, \"  pool=%p size=%zu end=%zu pos=%zu diff(end-pos)=%zu\\n\",\n          (void *) pool, pool->size, pool->end, pool->pos, diff);\n#ifdef MHD_ASAN_POISON_ACTIVE\n  fprintf(f, \"  MHD_ASAN_POISON_ACTIVE=1\\n\");\n#else\n  fprintf(f, \"  MHD_ASAN_POISON_ACTIVE=0\\n\");\n#endif\n  if (has_result)\n    fprintf(f, \"  computed_result=%zu\\n\", result);\n\n  fclose(f);\n}\n\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  /* Log entry state */\n  probe_pool_log (pool, \"entry\", 0, 0);\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    {\n      /* Log the branch taken and state when returning 0 */\n      probe_pool_log (pool, \"asan:return0\", 1, 0);\n      return 0;\n    }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n\n  /* Compute and log the result just before returning */\n  size_t result = (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n  probe_pool_log (pool, \"return\", 1, result);\n  return result;\n}\n"
}