{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MemoryPool *pool' is only read (the fragment reads pool->end and pool->pos) and the function does not modify the pointee. The pointer should therefore be declared as 'const struct MemoryPool *pool'. Because the pointer is not const-qualified, Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_get_free code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_get_free as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_get_free:\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_get_free code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: logs pool state to /tmp/logs/1353.txt. Keeps parameter const to avoid accidental modification. */\nstatic void\nMHD_probe_pool_state (const struct MemoryPool *pool, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/1353.txt\", \"a\");\n  if (f)\n    {\n      /* Log pointer value and key fields. Casts to size_t for portable printing. */\n      fprintf (f, \"Stage: %s; pool=%p; end=%zu; pos=%zu; size=%zu; end-pos=%zu; red_zone=%zu\\n\",\n               stage,\n               (const void *) pool,\n               (size_t) pool->end,\n               (size_t) pool->pos,\n               (size_t) pool->size,\n               (size_t) (pool->end - pool->pos),\n               (size_t) _MHD_RED_ZONE_SIZE);\n      fclose (f);\n    }\n}\n\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  /* Preserve original assertions and logic. Logging is done after assertions so\n     original control flow and side-effects (if any) remain unchanged. */\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  /* Log state after assertions to capture the relevant values for the violation scenario. */\n  MHD_probe_pool_state (pool, \"after_asserts\");\n\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    {\n      MHD_probe_pool_state (pool, \"asan_return_0\");\n      return 0;\n    }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n\n  MHD_probe_pool_state (pool, \"before_return_non_zero\");\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n"
}