{
  "user_message": "An agent A claimed that the following MHD_pool_get_free code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_get_free.\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MemoryPool *pool' is only read (pool->end and pool->pos are accessed) and never modified; therefore it should be declared as 'const struct MemoryPool *pool'. The shown fragment (the conditional) only reads members, so using a non-const pointer here violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_pool_get_free: stage=normal_return pool=0x55cfe44b4060 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x55cfe44b4060 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x55cfe44b4060 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0474000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0474000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0474000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0474000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0474000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0474000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0474000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0474000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0474000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0478000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x7f0478000de0 pos=64 end=32640 size=32768 free_before=32576 result=32576\nMHD_pool_get_free: stage=normal_return pool=0x56017bfe6880 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x56017bfe6880 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x56017bfe6880 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f523c000de0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f523c000de0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f523c000de0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f523c000de0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f523c000de0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f5230000dc0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f5230000dc0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f523c000de0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f523c000de0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f5230000de0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x7f5230000de0 pos=64 end=3968 size=4096 free_before=3904 result=3904\nMHD_pool_get_free: stage=normal_return pool=0x55e7a3d0d080 pos=64 end=65408 size=65536 free_before=65344 result=65344\nMHD_pool_get_free: stage=normal_return pool=0x55e7a3d0d080 pos=64 end=65408 size=65536 free_before=65344 result=65344\nMHD_pool_get_free: stage=normal_return pool=0x55e7a3d0d080 pos=64 end=65408 size=65536 free_before=65344 result=65344\nMHD_pool_get_free: stage=normal_return pool=0x7f8ed4000de0 pos=64 end=65408 size=65536 free_before=65344 result=65344\nMHD_pool_get_free: stage=normal_return pool=0x7f8ed4000de0 pos=64 end=65408 size=65536 free_before=65344 result=65344\nMHD_pool_get_free: stage=normal_return pool=0x7f8ed4000de0 pos=64 end=65408 size=65536 free_before=65344 result=65344\nMHD_pool_get_free: stage=normal_return pool=0x7f8ed4000de0 pos=64 end=65408 size=65536 free_before=65344 result=65344\nMHD_pool_get_free: sta\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown implementation MHD_pool_get_free only reads members of *pool (pool->end, pool->pos, pool->size) and does not modify the pointed-to object. Under MISRA C 2023 Rule 8.13 a pointer parameter that is only used for reading should be declared to point to a const-qualified type, so the parameter should be declared as const struct MemoryPool *pool.\n\nNotes/possible justification for leaving it non-const: if the function must match an existing non-const function-pointer type or public API signature, changing the prototype might be intentionally avoided. Absent such a constraint, the safe fix is to change the parameter to const struct MemoryPool *pool and update any prototype/declarations accordingly."
}