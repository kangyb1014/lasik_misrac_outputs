{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_get_free:\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are used in the provided code fragment. I looked for common compiler-specific tokens/operators that are documented as extensions (examples: __attribute__, __asm, __builtin_*, typeof (GCC), __extension__, __declspec, inline asm syntax, _Pragma with compiler-specific pragmas, vendor-specific keywords, or other compiler-specific builtins). None appear in the function.\n\nNotes on other identifiers that are present but do not by themselves indicate a language extension:\n- mhd_assert, ROUND_TO_ALIGN, MHD_ASAN_POISON_ACTIVE, and _MHD_RED_ZONE_SIZE are preprocessor/macro identifiers. Their usage here is standard C; whether they expand to compiler-specific extensions cannot be determined from this fragment alone (their definitions would need to be inspected). Per the instruction, only explicit uses of documented compiler extensions in the shown code should be reported.\n- The leading underscore in _MHD_RED_ZONE_SIZE is an implementation-reserved identifier form, but that is a portability/reservation concern, not a compiler language extension per MISRA C Rule 1.2.\n- The #ifdef conditional compilation and use of size_t, struct, and return statements are standard C.\n\nBecause no explicit compiler extensions are present in the shown code, there are no fragments that need investigation under MISRA C 2023 Rule 1.2."
}