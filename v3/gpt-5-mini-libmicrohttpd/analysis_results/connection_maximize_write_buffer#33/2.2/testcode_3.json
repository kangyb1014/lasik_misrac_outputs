{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is an ordinary diagnostic/assertion macro that produces no observable side-effects (for example it expands to ((void)0) in production or only checks the condition and aborts/logs on failure), then the statement is a purely diagnostic operation whose removal would not change the normal program behaviour. In that case the assertion represents dead code and therefore violates MISRA C 2023 Rule 2.2. If, however, mhd_assert has observable side-effects in the deployed build (e.g. it logs, increments counters, changes state, or otherwise affects program behaviour), then this line would not be dead code and would not violate Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_maximize_write_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/332.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of connection_maximize_write_buffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of connection_maximize_write_buffer:\n```c\nstatic size_t\nconnection_maximize_write_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MemoryPool *const pool = connection->pool;\n  void *new_buf;\n  size_t new_size;\n  size_t free_size;\n\n  mhd_assert ((NULL != c->write_buffer) || (0 == c->write_buffer_size));\n  mhd_assert (c->write_buffer_append_offset >= c->write_buffer_send_offset);\n  mhd_assert (c->write_buffer_size >= c->write_buffer_append_offset);\n\n  free_size = MHD_pool_get_free (pool);\n  if (0 != free_size)\n  {\n    new_size = c->write_buffer_size + free_size;\n    /* This function must not move the buffer position.\n     * MHD_pool_reallocate () may return the new position only if buffer was\n     * allocated 'from_end' or is not the last allocation,\n     * which should not happen. */\n    mhd_assert ((NULL == c->write_buffer) || \\\n                MHD_pool_is_resizable_inplace (pool, c->write_buffer, \\\n                                               c->write_buffer_size));\n    new_buf = MHD_pool_reallocate (pool,\n                                   c->write_buffer,\n                                   c->write_buffer_size,\n                                   new_size);\n    mhd_assert ((c->write_buffer == new_buf) || (NULL == c->write_buffer));\n    c->write_buffer = new_buf;\n    c->write_buffer_size = new_size;\n    if (c->write_buffer_send_offset == c->write_buffer_append_offset)\n    {\n      /* All data have been sent, reset offsets to zero. */\n      c->write_buffer_send_offset = 0;\n      c->write_buffer_append_offset = 0;\n    }\n  }\n\n  return c->write_buffer_size - c->write_buffer_append_offset;\n}\n```\n</target_code>\nPlease provide the modified connection_maximize_write_buffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logger: append textual traces to \"/tmp/logs/332.txt\". */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  va_list ap;\n  char buf[512];\n  FILE *f;\n\n  va_start (ap, fmt);\n  vsnprintf (buf, sizeof (buf), fmt, ap);\n  va_end (ap);\n\n  f = fopen (\"/tmp/logs/332.txt\", \"a\");\n  if (NULL == f)\n    {\n      /* Try to create parent directory and reopen. */\n      (void) mkdir (\"/tmp/logs\", 0700);\n      f = fopen (\"/tmp/logs/332.txt\", \"a\");\n    }\n  if (NULL != f)\n    {\n      fprintf (f, \"%s\\n\", buf);\n      fclose (f);\n    }\n}\n\nstatic size_t\nconnection_maximize_write_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MemoryPool *const pool = connection->pool;\n  void *new_buf;\n  size_t new_size;\n  size_t free_size;\n\n  /* Log entry state */\n  mhd_probe_log (\"ENTER %s: connection=%p, pool=%p, write_buffer=%p, write_buffer_size=%zu, append_offset=%zu, send_offset=%zu\",\n                 __func__, (void *) c, (void *) pool,\n                 (void *) c->write_buffer,\n                 c->write_buffer_size,\n                 c->write_buffer_append_offset,\n                 c->write_buffer_send_offset);\n\n  /* Evaluate assertions to allow logging of the predicate results without\n   * changing their semantics (we still call mhd_assert with the same\n   * boolean value). */\n  int cond1 = ((NULL != c->write_buffer) || (0 == c->write_buffer_size));\n  mhd_probe_log (\"ASSERT1: (NULL != c->write_buffer) || (0 == c->write_buffer_size) => %s\",\n                 cond1 ? \"true\" : \"false\");\n  mhd_assert (cond1);\n\n  int cond2 = (c->write_buffer_append_offset >= c->write_buffer_send_offset);\n  mhd_probe_log (\"ASSERT2: c->write_buffer_append_offset >= c->write_buffer_send_offset => %s (append=%zu send=%zu)\",\n                 cond2 ? \"true\" : \"false\",\n                 c->write_buffer_append_offset,\n                 c->write_buffer_send_offset);\n  mhd_assert (cond2);\n\n  int cond3 = (c->write_buffer_size >= c->write_buffer_append_offset);\n  mhd_probe_log (\"ASSERT3: c->write_buffer_size >= c->write_buffer_append_offset => %s (size=%zu append=%zu)\",\n                 cond3 ? \"true\" : \"false\",\n                 c->write_buffer_size,\n                 c->write_buffer_append_offset);\n  mhd_assert (cond3);\n\n  free_size = MHD_pool_get_free (pool);\n  mhd_probe_log (\"MHD_pool_get_free => free_size=%zu\", free_size);\n  if (0 != free_size)\n    {\n      new_size = c->write_buffer_size + free_size;\n      mhd_probe_log (\"Resizing: old_size=%zu, free_size=%zu, new_size=%zu, old_buffer=%p\",\n                     c->write_buffer_size, free_size, new_size, (void *) c->write_buffer);\n\n      /* This function must not move the buffer position.\n       * MHD_pool_reallocate () may return the new position only if buffer was\n       * allocated 'from_end' or is not the last allocation,\n       * which should not happen. */\n      int cond4 = ((NULL == c->write_buffer) ||\n                   MHD_pool_is_resizable_inplace (pool, c->write_buffer, c->write_buffer_size));\n      mhd_probe_log (\"ASSERT4: (NULL == c->write_buffer) || MHD_pool_is_resizable_inplace => %s\",\n                     cond4 ? \"true\" : \"false\");\n      mhd_assert (cond4);\n\n      new_buf = MHD_pool_reallocate (pool,\n                                     c->write_buffer,\n                                     c->write_buffer_size,\n                                     new_size);\n\n      mhd_probe_log (\"MHD_pool_reallocate returned new_buf=%p (old=%p)\", new_buf, (void *) c->write_buffer);\n\n      mhd_assert ((c->write_buffer == new_buf) || (NULL == c->write_buffer));\n\n      c->write_buffer = new_buf;\n      c->write_buffer_size = new_size;\n\n      mhd_probe_log (\"After reallocation: write_buffer=%p, write_buffer_size=%zu\",\n                     (void *) c->write_buffer, c->write_buffer_size);\n\n      if (c->write_buffer_send_offset == c->write_buffer_append_offset)\n        {\n          /* All data have been sent, reset offsets to zero. */\n          mhd_probe_log (\"Offsets equal: resetting send_offset and append_offset to 0 (was send=%zu append=%zu)\",\n                         c->write_buffer_send_offset, c->write_buffer_append_offset);\n          c->write_buffer_send_offset = 0;\n          c->write_buffer_append_offset = 0;\n        }\n    }\n\n  size_t retval = c->write_buffer_size - c->write_buffer_append_offset;\n  mhd_probe_log (\"EXIT %s: return=%zu (write_buffer_size=%zu append=%zu)\", __func__, retval, c->write_buffer_size, c->write_buffer_append_offset);\n\n  return retval;\n}\n"
}