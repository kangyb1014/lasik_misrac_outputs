{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nMHD_digest_auth_check3 takes a connection pointer but does not modify it and simply forwards it to digest_auth_check_all. If digest_auth_check_all treats the connection as input-only (does not modify it), then the parameter should be declared const (i.e. const struct MHD_Connection *connection). Because the declaration uses struct MHD_Connection *connection without const even though it appears to be used read-only, this is a violation of MISRA C 2023 Rule 8.13. (If digest_auth_check_all or other callees actually need to modify the connection, then the non-const declaration would be justified and there would be no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_check3 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_check3 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_check3:\n```c\n_MHD_EXTERN enum MHD_DigestAuthResult\nMHD_digest_auth_check3 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        uint32_t max_nc,\n                        enum MHD_DigestAuthMultiQOP mqop,\n                        enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  mhd_assert (NULL != password);\n\n  return digest_auth_check_all (connection,\n                                realm,\n                                username,\n                                password,\n                                NULL,\n                                nonce_timeout,\n                                max_nc,\n                                mqop,\n                                malgo3);\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_check3 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helpers inserted to capture control flow and state for debugging. */\nstatic const char * mhd_safe_str(const char *s)\n{\n  return (s != NULL) ? s : \"(null)\";\n}\n\nstatic void mhd_log_digest_auth_check3_enter(const struct MHD_Connection *connection,\n                                             const char *realm,\n                                             const char *username,\n                                             const char *password,\n                                             unsigned int nonce_timeout,\n                                             uint32_t max_nc,\n                                             int mqop,\n                                             int malgo3)\n{\n  FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"ENTER MHD_digest_auth_check3\\n\");\n  fprintf(f, \"  connection=%p\\n\", (const void *)connection);\n  fprintf(f, \"  realm=%s\\n\", mhd_safe_str(realm));\n  fprintf(f, \"  username=%s\\n\", mhd_safe_str(username));\n  /* Do not print password contents; log pointer to avoid leaking secret data. */\n  fprintf(f, \"  password_ptr=%p (non-null=%s)\\n\",\n          (const void *)password,\n          (password != NULL) ? \"true\" : \"false\");\n  fprintf(f, \"  nonce_timeout=%u\\n\", nonce_timeout);\n  fprintf(f, \"  max_nc=%\" PRIu32 \"\\n\", max_nc);\n  fprintf(f, \"  mqop=%d\\n\", mqop);\n  fprintf(f, \"  malgo3=%d\\n\", malgo3);\n  fclose(f);\n}\n\nstatic void mhd_log_digest_auth_check3_exit(const struct MHD_Connection *connection,\n                                            int result)\n{\n  FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"EXIT MHD_digest_auth_check3\\n\");\n  fprintf(f, \"  connection=%p\\n\", (const void *)connection);\n  fprintf(f, \"  result=%d\\n\", result);\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_DigestAuthResult\nMHD_digest_auth_check3 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        uint32_t max_nc,\n                        enum MHD_DigestAuthMultiQOP mqop,\n                        enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult result;\n\n  /* preserve original behavior */\n  mhd_assert (NULL != password);\n\n  /* Log entry with the parameters (connection pointer, strings, numeric values).\n     We pass connection as const to the log helper because the helper does not\n     modify the connection; this documents read-only intent without changing\n     the original function signature. */\n  mhd_log_digest_auth_check3_enter((const struct MHD_Connection *)connection,\n                                   realm,\n                                   username,\n                                   password,\n                                   nonce_timeout,\n                                   max_nc,\n                                   (int)mqop,\n                                   (int)malgo3);\n\n  /* Call the original worker and capture the result. */\n  result = digest_auth_check_all (connection,\n                                  realm,\n                                  username,\n                                  password,\n                                  NULL,\n                                  nonce_timeout,\n                                  max_nc,\n                                  mqop,\n                                  malgo3);\n\n  /* Log exit including the same connection pointer and the returned result. */\n  mhd_log_digest_auth_check3_exit((const struct MHD_Connection *)connection,\n                                  (int)result);\n\n  return result;\n}\n"
}