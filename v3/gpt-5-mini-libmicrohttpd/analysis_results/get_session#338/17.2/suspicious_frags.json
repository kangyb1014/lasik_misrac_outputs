{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_session:\n```c\nstatic struct Session *\nget_session (struct MHD_Connection *connection)\n{\n  struct Session *ret;\n  const char *cookie;\n\n  cookie = MHD_lookup_connection_value (connection,\n                                        MHD_COOKIE_KIND,\n                                        COOKIE_NAME);\n  if (cookie != NULL)\n  {\n    /* find existing session */\n    ret = sessions;\n    while (NULL != ret)\n    {\n      if (0 == strcmp (cookie, ret->sid))\n        break;\n      ret = ret->next;\n    }\n    if (NULL != ret)\n    {\n      ret->rc++;\n      return ret;\n    }\n  }\n  /* create fresh session */\n  ret = calloc (1, sizeof (struct Session));\n  if (NULL == ret)\n  {\n    fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n    return NULL;\n  }\n  /* not a super-secure way to generate a random session ID,\n     but should do for a simple example... */\n  snprintf (ret->sid,\n            sizeof (ret->sid),\n            \"%X%X%X%X\",\n            (unsigned int) rand (),\n            (unsigned int) rand (),\n            (unsigned int) rand (),\n            (unsigned int) rand ());\n  ret->rc++;\n  ret->start = time (NULL);\n  ret->next = sessions;\n  sessions = ret;\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));",
    "strerror (errno)",
    "ret = calloc (1, sizeof (struct Session));",
    "(unsigned int) rand ()",
    "ret->start = time (NULL);",
    "if (0 == strcmp (cookie, ret->sid))",
    "snprintf (ret->sid, sizeof (ret->sid), \"%X%X%X%X\", (unsigned int) rand (), (unsigned int) rand (), (unsigned int) rand (), (unsigned int) rand ());",
    "cookie = MHD_lookup_connection_value (connection, MHD_COOKIE_KIND, COOKIE_NAME);"
  ],
  "explanation": "Only code fragments that contain function calls can possibly produce direct or indirect recursion per MISRA C:2023 Rule 17.2. The listed fragments include all function calls present in this function (library/API calls and standard C calls) and therefore should be investigated for potential indirect calls back into get_session. Other fragments in the function (assignments such as ret = sessions; pointer updates like ret->next = sessions; the loop and control flow statements, increments ret->rc++, comparisons, break/return statements, sizeof usage, and struct field accesses) do not invoke functions and therefore cannot by themselves cause the function to call itself; they do not need investigation for Rule 17.2."
}