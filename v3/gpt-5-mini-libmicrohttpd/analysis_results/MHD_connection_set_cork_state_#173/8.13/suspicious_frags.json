{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_connection_set_cork_state_:\n```c\nbool\nMHD_connection_set_cork_state_ (struct MHD_Connection *connection,\n                                bool cork_state)\n{\n#if defined(MHD_TCP_CORK_NOPUSH)\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n\n  if (_MHD_YES == connection->is_nonip)\n    return false;\n  if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       MHD_TCP_CORK_NOPUSH,\n                       (const void *) (cork_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n  {\n    connection->sk_corked = cork_state;\n    return true;\n  }\n\n  err_code = MHD_socket_get_error_ ();\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n  {\n    if (_MHD_UNKNOWN == connection->is_nonip)\n      connection->is_nonip = _MHD_YES;\n#ifdef HAVE_MESSAGES\n    else\n    {\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\"),\n#ifdef TCP_CORK\n                \"TCP_CORK\",\n#else  /* ! TCP_CORK */\n                \"TCP_NOPUSH\",\n#endif /* ! TCP_CORK */\n                cork_state ? _ (\"ON\") : _ (\"OFF\"),\n                (int) connection->socket_fd,\n                MHD_socket_strerr_ (err_code));\n    }\n#endif /* HAVE_MESSAGES */\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"Setting %s option to %s state failed: %s\\n\"),\n#ifdef TCP_CORK\n              \"TCP_CORK\",\n#else  /* ! TCP_CORK */\n              \"TCP_NOPUSH\",\n#endif /* ! TCP_CORK */\n              cork_state ? _ (\"ON\") : _ (\"OFF\"),\n              MHD_socket_strerr_ (err_code));\n  }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! MHD_TCP_CORK_NOPUSH */\n  (void) connection; (void) cork_state; /* Mute compiler warnings. */\n#endif /* ! MHD_TCP_CORK_NOPUSH */\n  return false;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "_ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\")",
    "(const void *) (cork_state ? &on_val : &off_val)",
    "cork_state ? _ (\"ON\") : _ (\"OFF\")",
    "struct MHD_Connection *connection",
    "\"TCP_CORK\"",
    "\"TCP_NOPUSH\"",
    "_ (\"Setting %s option to %s state failed: %s\\n\")",
    "MHD_socket_strerr_ (err_code)",
    "setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       MHD_TCP_CORK_NOPUSH,\n                       (const void *) (cork_state ? &on_val : &off_val),\n                       sizeof (off_val))",
    "cork_state ? &on_val : &off_val"
  ],
  "explanation": "I flagged fragments that involve pointers or pointer-like expressions that should be reviewed for const-qualification: the function parameter pointer to the connection object, the pointer argument passed to setsockopt (including the conditional that selects between &on_val and &off_val), the translation string expressions and the string literals passed to the logging function, and the call that returns an error-string pointer. These are the only places in this function where pointer types or pointer-returning expressions appear and thus are relevant to Rule 8.13. Other fragments do not need investigation for this rule because:\n\n- on_val and off_val are declared const (const MHD_SCKT_OPT_BOOL_ off_val/on_val), so taking their addresses yields pointers-to-const \u2014 acceptable for Rule 8.13.\n- The setsockopt call casts the argument to const void *, i.e. the socket API is being given a const-qualified pointer; no const is being removed there.\n- The (void) connection; (void) cork_state; lines are only to suppress unused-variable warnings and do not involve pointer constness.\n- The function legitimately modifies fields of *connection (connection->is_nonip, connection->sk_corked), so the connection parameter cannot be const-qualified \u2014 this is intended and not a violation of the rule.\n- Integer and enum usages (socket_fd, err_code, sizeof(off_val), the IPPROTO_TCP constant, etc.) do not involve pointer constness.\n\nIf further investigation shows that logging or string-returning APIs (e.g. MHD_DLOG, _() translation macro, MHD_socket_strerr_) accept non-const char * where a const char * would suffice, those API signatures should be reviewed/updated; hence the logging-string fragments and MHD_socket_strerr_ are included for review."
}