{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe 'if (1)' conditional is a constant-true test. The evaluation of that conditional (the runtime check/branch) is executed but removing the if and leaving the block would not change program behaviour, so the conditional is redundant and constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run_wait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/972.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_run_wait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_run_wait:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_wait (struct MHD_Daemon *daemon,\n              int32_t millisec)\n{\n  enum MHD_Result res;\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid));\n\n  if (0 > millisec)\n    millisec = -1;\n#ifdef HAVE_POLL\n  if (MHD_D_IS_USING_POLL_ (daemon))\n  {\n    res = MHD_poll_all (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    res = MHD_epoll (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif\n  if (1)\n  {\n    mhd_assert (MHD_D_IS_USING_SELECT_ (daemon));\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n#ifdef HAVE_MESSAGES\n    if (daemon->fdset_size_set_by_app\n        && (((int) FD_SETSIZE) < daemon->fdset_size))\n    {\n      MHD_DLOG (daemon,\n                _ (\"MHD_run()/MHD_run_wait() called for daemon started with \" \\\n                   \"MHD_OPTION_APP_FD_SETSIZE option (%d). \" \\\n                   \"The library was compiled with smaller FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_run_from_select2() instead of MHD_run() or \" \\\n                   \"do not use MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                daemon->fdset_size, (int) FD_SETSIZE);\n    }\n#endif /* HAVE_MESSAGES */\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n\n    res = MHD_select (daemon, millisec);\n    /* MHD_select does MHD_cleanup_connections already */\n  }\n  return res;\n}\n```\n</target_code>\nPlease provide the modified MHD_run_wait code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe helper: append a timestamped message to /tmp/logs/972.txt. */\nstatic void mhd_probe_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/972.txt\", \"a\");\n    if (!f)\n        return;\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Log a compact snapshot of daemon-related state useful to reproduce the branch decisions. */\nstatic void mhd_probe_state(struct MHD_Daemon *daemon, int32_t millisec, const char *stage)\n{\n    if (daemon == NULL)\n    {\n        mhd_probe_write(\"%s: daemon=NULL millisec=%d\", stage, (int) millisec);\n        return;\n    }\n\n    /* Safely print a set of fields that the original function consults. */\n    /* Cast to int where appropriate to avoid format warnings. */\n    mhd_probe_write(\n        \"%s: daemon=%p shutdown=%d tid=%p using_threads=%d millisec=%d\",\n        stage,\n        (void *) daemon,\n        (int) daemon->shutdown,\n        (void *) (intptr_t) daemon->tid,\n        (int) MHD_D_IS_USING_THREADS_ (daemon),\n        (int) millisec\n    );\n\n#ifdef HAVE_POLL\n    mhd_probe_write(\"%s: using_poll=%d\", stage, (int) MHD_D_IS_USING_POLL_ (daemon));\n#endif\n#ifdef EPOLL_SUPPORT\n    mhd_probe_write(\"%s: using_epoll=%d\", stage, (int) MHD_D_IS_USING_EPOLL_ (daemon));\n#endif\n    mhd_probe_write(\"%s: using_select=%d\", stage, (int) MHD_D_IS_USING_SELECT_ (daemon));\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n    /* If those fields exist, log them to show why the inner FD_SETSIZE warning may be triggered. */\n    mhd_probe_write(\"%s: fdset_size=%d fdset_size_set_by_app=%d\",\n                    stage,\n                    (int) daemon->fdset_size,\n                    (int) daemon->fdset_size_set_by_app);\n#endif\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_run_wait (struct MHD_Daemon *daemon,\n              int32_t millisec)\n{\n  enum MHD_Result res;\n\n  /* Log entry and initial state. */\n  mhd_probe_state(daemon, millisec, \"enter\");\n\n  /* Evaluate the early-return condition once and log it. */\n  int early_return = (daemon->shutdown) || MHD_D_IS_USING_THREADS_ (daemon);\n  mhd_probe_write(\"early_return_condition: shutdown=%d using_threads=%d => early_return=%d\",\n                  (int) daemon->shutdown,\n                  (int) MHD_D_IS_USING_THREADS_ (daemon),\n                  early_return);\n  if ( early_return )\n  {\n    mhd_probe_write(\"early_return taken: returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid));\n\n  if (0 > millisec)\n    millisec = -1;\n\n  mhd_probe_write(\"after_normalize_millisec: millisec=%d\", (int) millisec);\n#ifdef HAVE_POLL\n  if (MHD_D_IS_USING_POLL_ (daemon))\n  {\n    mhd_probe_write(\"branch: using_poll -> calling MHD_poll_all\");\n    res = MHD_poll_all (daemon, millisec);\n    mhd_probe_write(\"MHD_poll_all returned: %d\", (int) res);\n    MHD_cleanup_connections (daemon);\n    mhd_probe_write(\"MHD_cleanup_connections called after poll\");\n  }\n  else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    mhd_probe_write(\"branch: using_epoll -> calling MHD_epoll\");\n    res = MHD_epoll (daemon, millisec);\n    mhd_probe_write(\"MHD_epoll returned: %d\", (int) res);\n    MHD_cleanup_connections (daemon);\n    mhd_probe_write(\"MHD_cleanup_connections called after epoll\");\n  }\n  else\n#endif\n  if (1)\n  {\n    /* This is the constant-true branch reported as violating MISRA Rule 2.2. */\n    mhd_probe_write(\"entered constant-true branch: if (1) -> select path executed\");\n\n    mhd_assert (MHD_D_IS_USING_SELECT_ (daemon));\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n#ifdef HAVE_MESSAGES\n    if (daemon->fdset_size_set_by_app\n        && (((int) FD_SETSIZE) < daemon->fdset_size))\n    {\n      MHD_DLOG (daemon,\n                _ (\"MHD_run()/MHD_run_wait() called for daemon started with \" \\\n                   \"MHD_OPTION_APP_FD_SETSIZE option (%d). \" \\\n                   \"The library was compiled with smaller FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_run_from_select2() instead of MHD_run() or \" \\\n                   \"do not use MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                daemon->fdset_size, (int) FD_SETSIZE);\n      mhd_probe_write(\"fdset_size warning path: app_set=%d fdset_size=%d compiled_FD_SETSIZE=%d\",\n                      (int) daemon->fdset_size_set_by_app,\n                      (int) daemon->fdset_size,\n                      (int) FD_SETSIZE);\n    }\n#endif /* HAVE_MESSAGES */\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n\n    mhd_probe_write(\"calling MHD_select\");\n    res = MHD_select (daemon, millisec);\n    mhd_probe_write(\"MHD_select returned: %d\", (int) res);\n    /* MHD_select does MHD_cleanup_connections already */\n  }\n  mhd_probe_write(\"returning res=%d from MHD_run_wait\", (int) res);\n  return res;\n}\n"
}