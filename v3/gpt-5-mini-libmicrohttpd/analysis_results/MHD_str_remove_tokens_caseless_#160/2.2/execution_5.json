{
  "result": "success",
  "message": "[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='string'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='string'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='String'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='String'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=7, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='String'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=7, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=1\n[probe] token_found: tkn_len=6, tkn_prefix='String'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=10, memchr_found=NO\n[probe] start loop: initial_str_len=5, pt=0\n[probe] after skip: pt=3\n[probe] token_found: tkn_len=5, tkn_prefix='toKEN'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=5, memchr_found=NO\n[probe] start loop: initial_str_len=16, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=5, tkn_prefix='token'\n[probe] remove_loop_start: str_len=16, tkn_len=5\n[probe] before_assert pr_ge_pw: pr=0, pw=0, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_len=16, pr=0, tkn_len=5, cond=TRUE\n[probe] copied_token: new_pr=11, new_pw=9\n[probe] check_str0_space_tab: str0='n', cond=TRUE\n[probe] check_pr_vals: pr=11, cond_ge3_or_zero=TRUE\n[probe] check_pr_minus1_space: str[pr-1]=' ', cond=TRUE\n[probe] check_pr_minus2_comma: str[pr-2]=',', cond=TRUE\n[probe] before_assert pr_ge_pw: pr=11, pw=9, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_len=16, pr=11, tkn_len=5, cond=TRUE\n[probe] matched_token_norm_check: str_len=16, pr=11, tkn_len=5, next_char=OUT_OF_BOUNDS\n[probe] token matched and skipped: new_pr=18, token_removed=TRUE\n[probe] tail_too_small: final_str_len=9\n[probe] exit: token_removed=TRUE, final_str_len=9\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=25, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='token1'\n[probe] remove_loop_start: str_len=25, tkn_len=6\n[probe] before_assert pr_ge_pw: pr=0, pw=0, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_len=25, pr=0, tkn_len=6, cond=TRUE\n[probe] copied_token: new_pr=12, new_pw=10\n[probe] check_str0_space_tab: str0='n', cond=TRUE\n[probe] check_pr_vals: pr=12, cond_ge3_or_zero=TRUE\n[probe] check_pr_minus1_space: str[pr-1]=' ', cond=TRUE\n[probe] check_pr_minus2_comma: str[pr-2]=',', cond=TRUE\n[probe] before_assert pr_ge_pw: pr=12, pw=10, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_len=25, pr=12, tkn_len=6, cond=TRUE\n[probe] matched_token_norm_check: str_len=25, pr=12, tkn_len=6, next_char=' '\n[probe] token matched and skipped: new_pr=20, token_removed=TRUE\n[probe] tail_too_small: final_str_len=17\n[probe] exit: token_removed=TRUE, final_str_len=17\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=13, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='token1'\n[probe] remove_loop_start: str_len=13, tkn_len=6\n[probe] before_assert pr_ge_pw: pr=0, pw=0, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_"
}