{
  "user_message": "An agent A claimed that the following MHD_str_remove_tokens_caseless_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_str_remove_tokens_caseless_.\n```c\nbool\nMHD_str_remove_tokens_caseless_ (char *str,\n                                 size_t *str_len,\n                                 const char *const tokens,\n                                 const size_t tokens_len)\n{\n  const char *const t = tokens;   /**< a short alias for @a tokens */\n  size_t pt;                      /**< position in @a tokens */\n  bool token_removed;\n\n  mhd_assert (NULL == memchr (tokens, 0, tokens_len));\n\n  token_removed = false;\n  pt = 0;\n\n  while (pt < tokens_len && *str_len != 0)\n  {\n    const char *tkn; /**< the current token */\n    size_t tkn_len;\n\n    /* Skip any initial whitespaces and empty tokens in 'tokens' */\n    while ( (pt < tokens_len) &&\n            ((' ' == t[pt]) || ('\\t' == t[pt]) || (',' == t[pt])) )\n      pt++;\n\n    if (pt >= tokens_len)\n      break; /* No more tokens, nothing to remove */\n\n    /* Found non-whitespace char which is not a comma */\n    tkn = t + pt;\n    do\n    {\n      do\n      {\n        pt++;\n      } while (pt < tokens_len &&\n               (' ' != t[pt] && '\\t' != t[pt] && ',' != t[pt]));\n      /* Found end of the token string, space, tab, or comma */\n      tkn_len = pt - (size_t) (tkn - t);\n\n      /* Skip all spaces and tabs */\n      while (pt < tokens_len && (' ' == t[pt] || '\\t' == t[pt]))\n        pt++;\n      /* Found end of the token string or non-whitespace char */\n    } while (pt < tokens_len && ',' != t[pt]);\n\n    /* 'tkn' is the input token with 'tkn_len' chars */\n    mhd_assert (0 != tkn_len);\n\n    if (*str_len == tkn_len)\n    {\n      if (MHD_str_equal_caseless_bin_n_ (str, tkn, tkn_len))\n      {\n        *str_len = 0;\n        token_removed = true;\n      }\n      continue;\n    }\n    /* 'tkn' cannot match part of 'str' if length of 'tkn' is larger\n     * than length of 'str'.\n     * It's know that 'tkn' is not equal to the 'str' (was checked previously).\n     * As 'str' is normalized when 'tkn' is not equal to the 'str'\n     * it is required that 'str' to be at least 3 chars larger then 'tkn'\n     * (the comma, the space and at least one additional character for the next\n     * token) to remove 'tkn' from the 'str'. */\n    if (*str_len > tkn_len + 2)\n    { /* Remove 'tkn' from the input string */\n      size_t pr;    /**< the 'read' position in the @a str */\n      size_t pw;    /**< the 'write' position in the @a str */\n\n      pr = 0;\n      pw = 0;\n\n      do\n      {\n        mhd_assert (pr >= pw);\n        mhd_assert ((*str_len) >= (pr + tkn_len));\n        if ( ( ((*str_len) == (pr + tkn_len)) || (',' == str[pr + tkn_len]) ) &&\n             MHD_str_equal_caseless_bin_n_ (str + pr, tkn, tkn_len) )\n        {\n          /* current token in the input string matches the 'tkn', skip it */\n          mhd_assert ((*str_len == pr + tkn_len) || \\\n                      (' ' == str[pr + tkn_len + 1])); /* 'str' must be normalized */\n          token_removed = true;\n          /* Advance to the next token in the input string or beyond\n           * the end of the input string. */\n          pr += tkn_len + 2;\n        }\n        else\n        {\n          /* current token in the input string does not match the 'tkn',\n           * copy to the output */\n          if (0 != pw)\n          { /* not the first output token, add \", \" to separate */\n            if (pr != pw + 2)\n            {\n              str[pw++] = ',';\n              str[pw++] = ' ';\n            }\n            else\n              pw += 2; /* 'str' is not yet modified in this round */\n          }\n          do\n          {\n            if (pr != pw)\n              str[pw] = str[pr];\n            pr++;\n            pw++;\n          } while (pr < *str_len && ',' != str[pr]);\n          /* Advance to the next token in the input string or beyond\n           * the end of the input string. */\n          pr += 2;\n        }\n        /* 'pr' should point to the next token in the input string or beyond\n         * the end of the input string */\n        if ((*str_len) < (pr + tkn_len))\n        { /* The rest of the 'str + pr' is too small to match 'tkn' */\n          if ((*str_len) > pr)\n          { /* Copy the rest of the string */\n            size_t copy_size;\n            copy_size = *str_len - pr;\n            if (0 != pw)\n            { /* not the first output token, add \", \" to separate */\n              if (pr != pw + 2)\n              {\n                str[pw++] = ',';\n                str[pw++] = ' ';\n              }\n              else\n                pw += 2; /* 'str' is not yet modified in this round */\n            }\n            if (pr != pw)\n              memmove (str + pw, str + pr, copy_size);\n            pw += copy_size;\n          }\n          *str_len = pw;\n          break;\n        }\n        mhd_assert ((' ' != str[0]) && ('\\t' != str[0]));\n        mhd_assert ((0 == pr) || (3 <= pr));\n        mhd_assert ((0 == pr) || (' ' == str[pr - 1]));\n        mhd_assert ((0 == pr) || (',' == str[pr - 2]));\n      } while (1);\n    }\n  }\n\n  return token_removed;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe mhd_assert is a pure runtime check with no side effects (it only evaluates 'pr') and is typically implemented as a macro that can be compiled out (e.g. when assertions are disabled). In builds where mhd_assert expands to nothing the assertion statement does not execute and its presence has no effect on program behaviour \u2014 removal would not change behaviour. Therefore this line constitutes dead code in those builds.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='string'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='string'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='String'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='String'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=7, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='String'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=7, memchr_found=NO\n[probe] start loop: initial_str_len=6, pt=0\n[probe] after skip: pt=1\n[probe] token_found: tkn_len=6, tkn_prefix='String'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=10, memchr_found=NO\n[probe] start loop: initial_str_len=5, pt=0\n[probe] after skip: pt=3\n[probe] token_found: tkn_len=5, tkn_prefix='toKEN'\n[probe] exact match removed: new_str_len=0\n[probe] exit: token_removed=TRUE, final_str_len=0\n[probe] entry: tokens_len=5, memchr_found=NO\n[probe] start loop: initial_str_len=16, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=5, tkn_prefix='token'\n[probe] remove_loop_start: str_len=16, tkn_len=5\n[probe] before_assert pr_ge_pw: pr=0, pw=0, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_len=16, pr=0, tkn_len=5, cond=TRUE\n[probe] copied_token: new_pr=11, new_pw=9\n[probe] check_str0_space_tab: str0='n', cond=TRUE\n[probe] check_pr_vals: pr=11, cond_ge3_or_zero=TRUE\n[probe] check_pr_minus1_space: str[pr-1]=' ', cond=TRUE\n[probe] check_pr_minus2_comma: str[pr-2]=',', cond=TRUE\n[probe] before_assert pr_ge_pw: pr=11, pw=9, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_len=16, pr=11, tkn_len=5, cond=TRUE\n[probe] matched_token_norm_check: str_len=16, pr=11, tkn_len=5, next_char=OUT_OF_BOUNDS\n[probe] token matched and skipped: new_pr=18, token_removed=TRUE\n[probe] tail_too_small: final_str_len=9\n[probe] exit: token_removed=TRUE, final_str_len=9\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=25, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='token1'\n[probe] remove_loop_start: str_len=25, tkn_len=6\n[probe] before_assert pr_ge_pw: pr=0, pw=0, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_len=25, pr=0, tkn_len=6, cond=TRUE\n[probe] copied_token: new_pr=12, new_pw=10\n[probe] check_str0_space_tab: str0='n', cond=TRUE\n[probe] check_pr_vals: pr=12, cond_ge3_or_zero=TRUE\n[probe] check_pr_minus1_space: str[pr-1]=' ', cond=TRUE\n[probe] check_pr_minus2_comma: str[pr-2]=',', cond=TRUE\n[probe] before_assert pr_ge_pw: pr=12, pw=10, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_len=25, pr=12, tkn_len=6, cond=TRUE\n[probe] matched_token_norm_check: str_len=25, pr=12, tkn_len=6, next_char=' '\n[probe] token matched and skipped: new_pr=20, token_removed=TRUE\n[probe] tail_too_small: final_str_len=17\n[probe] exit: token_removed=TRUE, final_str_len=17\n[probe] entry: tokens_len=6, memchr_found=NO\n[probe] start loop: initial_str_len=13, pt=0\n[probe] after skip: pt=0\n[probe] token_found: tkn_len=6, tkn_prefix='token1'\n[probe] remove_loop_start: str_len=13, tkn_len=6\n[probe] before_assert pr_ge_pw: pr=0, pw=0, cond=TRUE\n[probe] before_assert len_ge_pr_plus_tkn: str_\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA\u2011C Rule 2.2 defines dead code as an operation that is executed but whose removal would not affect program behaviour. Two relevant points for the mhd_assert usages in the snippet:\n\n- If mhd_assert is truly compiled out so that the macro expands to nothing (no token in the translation unit), there is no operation generated/executed at all. Code that does not execute is not dead code under the rule (note 2 distinguishes unreachable code from dead code, and the rule\u2019s key predicate is that the operation is executed).\n\n- If mhd_assert is enabled (i.e. expands to code that performs a check and possibly aborts/logs), that operation can affect program behaviour (on assertion failure), so its removal could change behaviour \u2014 therefore it would not be dead code.\n\nCaveat: if mhd_assert is defined in the compiled configuration as a no\u2011op expression statement such as ((void)0) (i.e. it expands to an expression statement that is executed but has no effect), then strictly speaking that executed no\u2011op would meet the literal definition of dead code (executed but removable without effect). In practice, assertions are typically implemented either as completely omitted by the preprocessor or as code that has observable behaviour when enabled. Given the scenario as stated (mhd_assert \u201cexpands to nothing\u201d when assertions are disabled), the assertion lines are not executed and therefore do not constitute dead code under MISRA C 2023 Rule 2.2."
}