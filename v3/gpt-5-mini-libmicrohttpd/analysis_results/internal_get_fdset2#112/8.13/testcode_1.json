{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'pos' is declared as 'struct MHD_Connection *pos;' but in the function it is only used for read-only access (pos->prev, pos->socket_fd, pos->event_loop_info) and assigned to another loop pointer. It could be declared as 'const struct MHD_Connection *pos' (and similarly 'const struct MHD_Connection *posn') to reflect that the pointed-to object is not modified here. Therefore this declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified internal_get_fdset2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of internal_get_fdset2 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of internal_get_fdset2:\n```c\nstatic enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (daemon->shutdown)\n    return MHD_YES;\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    if (! itc_added)\n      result = MHD_NO;\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    if (MHD_add_to_fd_set_ (ls,\n                            read_fd_set,\n                            max_fd,\n                            fd_setsize))\n      ls = MHD_INVALID_SOCKET;   /* Already added */\n    else\n      result = MHD_NO;\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    posn = pos->prev;\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                write_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n      if ( (NULL == except_fd_set) ||\n           ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                 except_fd_set,\n                                 max_fd,\n                                 fd_setsize))\n        result = MHD_NO;\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    struct MHD_UpgradeResponseHandle *urh;\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      if (MHD_NO ==\n          urh_to_fdset (urh,\n                        read_fd_set,\n                        write_fd_set,\n                        except_fd_set,\n                        max_fd,\n                        fd_setsize))\n        result = MHD_NO;\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  return result;\n}\n```\n</target_code>\nPlease provide the modified internal_get_fdset2 code.\n",
  "test_code": "#include <stdio.h>\n\nstatic enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (daemon->shutdown)\n    return MHD_YES;\n\n  /* Log entry and initial daemon state for debugging/verification. */\n  {\n    FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"internal_get_fdset2 ENTRY: daemon=%p shutdown=%d listen_fd=%lld connections_tail=%p connection_limit=%d connections=%d at_limit=%d\\n\",\n              (void *) daemon,\n              (int) daemon->shutdown,\n              (long long) daemon->listen_fd,\n              (void *) daemon->connections_tail,\n              (int) daemon->connection_limit,\n              (int) daemon->connections,\n              (int) daemon->at_limit);\n      fclose(log);\n    }\n  }\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    if (! itc_added)\n      result = MHD_NO;\n\n    /* Log ITC handling */\n    {\n      FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"ITC check: daemon->itc=%p itc_added=%d result=%d\\n\",\n                (void *) daemon->itc,\n                (int) itc_added,\n                (int) result);\n        fclose(log);\n      }\n    }\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    if (MHD_add_to_fd_set_ (ls,\n                            read_fd_set,\n                            max_fd,\n                            fd_setsize))\n      ls = MHD_INVALID_SOCKET;   /* Already added */\n    else\n      result = MHD_NO;\n\n    /* Log listen FD attempt */\n    {\n      FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"Listen FD handling: ls=%lld added=%d result=%d\\n\",\n                (long long) daemon->listen_fd,\n                (int) (MHD_INVALID_SOCKET == ls),\n                (int) result);\n        fclose(log);\n      }\n    }\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    /* Capture the next pointer early as original logic */\n    posn = pos->prev;\n\n    /* Log each connection inspected: addresses and key fields */\n    {\n      FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n      if (NULL != log)\n      {\n        /* pos and posn addresses, socket_fd and event_loop_info values */\n        fprintf(log, \"LOOP connection: pos=%p pos->prev=%p posn=%p pos->socket_fd=%lld pos->event_loop_info=%d daemon->connections=%d\\n\",\n                (void *) pos,\n                (void *) pos->prev,\n                (void *) posn,\n                (long long) pos->socket_fd,\n                (int) pos->event_loop_info,\n                (int) daemon->connections);\n        fclose(log);\n      }\n    }\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n\n      /* Log action and potential failure */\n      {\n        FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"HANDLED READ: pos=%p socket_fd=%lld added_to_read=%d result=%d\\n\",\n                  (void *) pos,\n                  (long long) pos->socket_fd,\n                  (int) (result == MHD_YES),\n                  (int) result);\n          fclose(log);\n        }\n      }\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                write_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n\n      /* Log write handling */\n      {\n        FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"HANDLED WRITE: pos=%p socket_fd=%lld write_added=%d result=%d\\n\",\n                  (void *) pos,\n                  (long long) pos->socket_fd,\n                  (int) (result == MHD_YES),\n                  (int) result);\n          fclose(log);\n        }\n      }\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n      if ( (NULL == except_fd_set) ||\n           ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                 except_fd_set,\n                                 max_fd,\n                                 fd_setsize))\n        result = MHD_NO;\n\n      /* Log process handling */\n      {\n        FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"HANDLED PROCESS: pos=%p socket_fd=%lld except_added=%d result=%d\\n\",\n                  (void *) pos,\n                  (long long) pos->socket_fd,\n                  (int) (NULL == except_fd_set ? 0 : 1),\n                  (int) result);\n          fclose(log);\n        }\n      }\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      {\n        FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"UNEXPECTED: CLEANUP state encountered: pos=%p\\n\", (void *) pos);\n          fclose(log);\n        }\n      }\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n\n      /* Log WINSOCK extra except additions */\n      {\n        FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"WINSOCK except add: pos=%p socket_fd=%lld\\n\",\n                  (void *) pos,\n                  (long long) pos->socket_fd);\n          fclose(log);\n        }\n      }\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    struct MHD_UpgradeResponseHandle *urh;\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      if (MHD_NO ==\n          urh_to_fdset (urh,\n                        read_fd_set,\n                        write_fd_set,\n                        except_fd_set,\n                        max_fd,\n                        fd_setsize))\n        result = MHD_NO;\n\n      /* Log upgrade response handle iteration */\n      {\n        FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"URH iteration: urh=%p result=%d\\n\", (void *) urh, (int) result);\n          fclose(log);\n        }\n      }\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n\n      /* Log final listen socket decision */\n      {\n        FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"FINAL LISTEN: ls=%lld connections=%d connection_limit=%d at_limit=%d result=%d\\n\",\n                  (long long) ls,\n                  (int) daemon->connections,\n                  (int) daemon->connection_limit,\n                  (int) daemon->at_limit,\n                  (int) result);\n          fclose(log);\n        }\n      }\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n\n  /* Log exit and result */\n  {\n    FILE *log = fopen(\"/tmp/logs/1123.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"internal_get_fdset2 EXIT: result=%d max_fd=%p fd_setsize=%d\\n\",\n              (int) result,\n              (void *) max_fd,\n              fd_setsize);\n      fclose(log);\n    }\n  }\n\n  return result;\n}\n"
}