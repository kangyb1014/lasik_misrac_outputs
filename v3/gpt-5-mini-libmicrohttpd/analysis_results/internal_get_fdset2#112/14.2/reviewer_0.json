{
  "user_message": "An agent A claimed that the following internal_get_fdset2 code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of internal_get_fdset2.\n```c\nstatic enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (daemon->shutdown)\n    return MHD_YES;\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    if (! itc_added)\n      result = MHD_NO;\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    if (MHD_add_to_fd_set_ (ls,\n                            read_fd_set,\n                            max_fd,\n                            fd_setsize))\n      ls = MHD_INVALID_SOCKET;   /* Already added */\n    else\n      result = MHD_NO;\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    posn = pos->prev;\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                write_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n      if ( (NULL == except_fd_set) ||\n           ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                 except_fd_set,\n                                 max_fd,\n                                 fd_setsize))\n        result = MHD_NO;\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    struct MHD_UpgradeResponseHandle *urh;\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      if (MHD_NO ==\n          urh_to_fdset (urh,\n                        read_fd_set,\n                        write_fd_set,\n                        except_fd_set,\n                        max_fd,\n                        fd_setsize))\n        result = MHD_NO;\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  return result;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe for-loop uses 'pos' as the loop counter but the third clause is 'pos = posn'. The object 'posn' is assigned inside the loop body (posn = pos->prev), so the third clause reads an object that is modified in the loop body. This violates MISRA C 2023 Rule 14.2 (clause 3: the third clause shall not use objects that are modified in the for loop body).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninternal_get_fdset2: returning result=1\ninternal_get_fdset2: daemon=0x56076f6b7de0, connections_tail=(nil), connection_limit=1019, connections=0\nEntering first connections loop: initial pos=(nil)\nExited first connections loop: final pos=(nil)\ninter\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The for statement\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\nuses pos as the loop counter, but the third clause reads posn. Inside the loop body posn is assigned (posn = pos->prev), so posn is an object that is modified in the loop body. MISRA C 2023 Rule 14.2 (clause 3) requires that the third clause shall not use objects that are modified in the for loop body. Therefore this pattern violates Rule 14.2. \n\nPossible remedies include: (a) rewrite as a while loop and perform the update in the body (e.g. while (pos != NULL) { posn = pos->prev; ... pos = posn; }), or (b) use pos = pos->prev in the for third clause (for (pos = tail; pos != NULL; pos = pos->prev) { ... }) if that does not break other constraints. Either change avoids reading a variable that is modified inside the loop body in the for-update expression."
}