{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn this function unquoted->str is used to hold either param->value.str (from the const struct MHD_RqDAuthParam *param) or a mutable buffer (str). If the struct member unquoted->str is declared as a non-const char * then assigning the (logically) const source param->value.str to it drops a const qualifier \u2014 this violates MISRA C 2023 R8.13. The specific fragment unquoted->str = str; itself does not drop const, but together with the earlier assignment unquoted->str = param->value.str it shows that unquoted->str should be declared const char * (and remains usable with a mutable buffer) to comply with R8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2873.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_unquoted_param as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n    return (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\nPlease provide the modified get_unquoted_param code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n\n/* Probe logging helper: append compact information about control flow and state\n   to /tmp/logs/2873.txt. This helper intentionally keeps behavior side-effect free\n   other than the logging itself. */\nstatic void\n_mhd_probe_log(const char *event,\n               const struct MHD_RqDAuthParam *param,\n               const char *buf,\n               size_t buf_len,\n               size_t requested_len)\n{\n  FILE *f = fopen(\"/tmp/logs/2873.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Print pointers and sizes; keep strings as pointers to avoid attempting to\n     interpret potentially non-printable data. */\n  fprintf(f, \"EVENT=%s param=%p value.str=%p value.len=%lu quoted=%d buf=%p buf_len=%lu requested_len=%lu\\n\",\n          (event != NULL) ? event : \"(null)\",\n          (const void *)param,\n          (const void *)((param != NULL) ? param->value.str : NULL),\n          (unsigned long)((param != NULL) ? param->value.len : 0UL),\n          (param != NULL) ? (param->quoted ? 1 : 0) : 0,\n          (const void *)buf,\n          (unsigned long)buf_len,\n          (unsigned long)requested_len);\n  fclose(f);\n}\n\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n\n  /* Log entry and basic param info */\n  _mhd_probe_log(\"entry\", param, NULL, 0, 0);\n\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    /* Log branch where value is not quoted and will be referenced directly */\n    _mhd_probe_log(\"not_quoted_before_assign\", param, param->value.str, param->value.len, 0);\n\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n\n    /* Log after assignment so callers can see that unquoted->str points to the\n       original param->value.str (evidence relevant to const qualifier concerns). */\n    _mhd_probe_log(\"not_quoted_after_assign\", param, unquoted->str, unquoted->len, 0);\n\n    return _MHD_UNQ_OK;\n  }\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n\n  /* Log buffer allocation result and requested size */\n  _mhd_probe_log(\"buffer_alloc\", param, str, (str != NULL) ? *ptmp2_size : 0, param->value.len);\n\n  if (NULL == str)\n  {\n    /* Log reason for failure: too large vs out of memory */\n    if (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE)\n    {\n      _mhd_probe_log(\"alloc_failed_too_large\", param, NULL, 0, param->value.len);\n      return _MHD_UNQ_TOO_LARGE;\n    }\n    _mhd_probe_log(\"alloc_failed_out_of_mem\", param, NULL, 0, param->value.len);\n    return _MHD_UNQ_OUT_OF_MEM;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n\n  /* Log the result of unquoting: buffer pointer, produced length, and original length */\n  _mhd_probe_log(\"after_unquote\", param, str, len, param->value.len);\n\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n\n  /* Final state log before returning OK */\n  _mhd_probe_log(\"return_ok\", param, unquoted->str, unquoted->len, param->value.len);\n\n  return _MHD_UNQ_OK;\n}\n"
}