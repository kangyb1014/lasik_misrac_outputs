{
  "user_message": "An agent A claimed that the following get_unquoted_param code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_unquoted_param.\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n    return (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn this function unquoted->str is used to hold either param->value.str (from the const struct MHD_RqDAuthParam *param) or a mutable buffer (str). If the struct member unquoted->str is declared as a non-const char * then assigning the (logically) const source param->value.str to it drops a const qualifier \u2014 this violates MISRA C 2023 R8.13. The specific fragment unquoted->str = str; itself does not drop const, but together with the earlier assignment unquoted->str = param->value.str it shows that unquoted->str should be declared const char * (and remains usable with a mutable buffer) to comply with R8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nEVENT=entry param=0x7f9c74008b08 value.str=0x7f9c74000f61 value.len=8 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7f9c74008b08 value.str=0x7f9c74000f61 value.len=8 quoted=0 buf=0x7f9c74000f61 buf_len=8 requested_len=0\nEVENT=not_quoted_after_assign param=0x7f9c74008b08 value.str=0x7f9c74000f61 value.len=8 quoted=0 buf=0x7f9c74000f61 buf_len=8 requested_len=0\nEVENT=entry param=0x7f9c74008a30 value.str=0x7f9c74000ea9 value.len=44 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7f9c74008a30 value.str=0x7f9c74000ea9 value.len=44 quoted=0 buf=0x7f9c74000ea9 buf_len=44 requested_len=0\nEVENT=not_quoted_after_assign param=0x7f9c74008a30 value.str=0x7f9c74000ea9 value.len=44 quoted=0 buf=0x7f9c74000ea9 buf_len=44 requested_len=0\nEVENT=entry param=0x7f9c74008a60 value.str=0x7f9c74000f7f value.len=32 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7f9c74008a60 value.str=0x7f9c74000f7f value.len=32 quoted=0 buf=0x7f9c74000f7f buf_len=32 requested_len=0\nEVENT=not_quoted_after_assign param=0x7f9c74008a60 value.str=0x7f9c74000f7f value.len=32 quoted=0 buf=0x7f9c74000f7f buf_len=32 requested_len=0\nEVENT=entry param=0x7f9c74008a30 value.str=0x7f9c74000ea9 value.len=44 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7f9c74008a30 value.str=0x7f9c74000ea9 value.len=44 quoted=0 buf=0x7f9c74000ea9 buf_len=44 requested_len=0\nEVENT=not_quoted_after_assign param=0x7f9c74008a30 value.str=0x7f9c74000ea9 value.len=44 quoted=0 buf=0x7f9c74000ea9 buf_len=44 requested_len=0\nEVENT=entry param=0x7f9c74008b08 value.str=0x7f9c74000f61 value.len=8 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7f9c74008b08 value.str=0x7f9c74000f61 value.len=8 quoted=0 buf=0x7f9c74000f61 buf_len=8 requested_len=0\nEVENT=not_quoted_after_assign param=0x7f9c74008b08 value.str=0x7f9c74000f61 value.len=8 quoted=0 buf=0x7f9c74000f61 buf_len=8 requested_len=0\nEVENT=entry param=0x7f9c74008af0 value.str=0x7f9c74000f2f value.len=44 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7f9c74008af0 value.str=0x7f9c74000f2f value.len=44 quoted=0 buf=0x7f9c74000f2f buf_len=44 requested_len=0\nEVENT=not_quoted_after_assign param=0x7f9c74008af0 value.str=0x7f9c74000f2f value.len=44 quoted=0 buf=0x7f9c74000f2f buf_len=44 requested_len=0\nEVENT=entry param=0x7f9c74008ad8 value.str=0x7f9c74000f6f value.len=4 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7f9c74008ad8 value.str=0x7f9c74000f6f value.len=4 quoted=0 buf=0x7f9c74000f6f buf_len=4 requested_len=0\nEVENT=not_quoted_after_assign param=0x7f9c74008ad8 value.str=0x7f9c74000f6f value.len=4 quoted=0 buf=0x7f9c74000f6f buf_len=4 requested_len=0\nEVENT=entry param=0x7ff9c8008cc8 value.str=0x7ff9c8000f1b value.len=8 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7ff9c8008cc8 value.str=0x7ff9c8000f1b value.len=8 quoted=0 buf=0x7ff9c8000f1b buf_len=8 requested_len=0\nEVENT=not_quoted_after_assign param=0x7ff9c8008cc8 value.str=0x7ff9c8000f1b value.len=8 quoted=0 buf=0x7ff9c8000f1b buf_len=8 requested_len=0\nEVENT=entry param=0x7ff9c8008bf0 value.str=0x7ff9c8000e76 value.len=76 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7ff9c8008bf0 value.str=0x7ff9c8000e76 value.len=76 quoted=0 buf=0x7ff9c8000e76 buf_len=76 requested_len=0\nEVENT=not_quoted_after_assign param=0x7ff9c8008bf0 value.str=0x7ff9c8000e76 value.len=76 quoted=0 buf=0x7ff9c8000e76 buf_len=76 requested_len=0\nEVENT=entry param=0x7ff9c8008c20 value.str=0x7ff9c8000f39 value.len=64 quoted=0 buf=(nil) buf_len=0 requested_len=0\nEVENT=not_quoted_before_assign param=0x7ff9c8008c20 value.str=0x7ff9c8000f39 value.len=64 quoted=0 buf=0x7ff9c8000f39 buf_len=64 requested_len=0\nEVENT=not_quoted_after_assign param=0x7ff9c8008c20 value.str=0x7ff9c8000f39 value.len=64 quoted=0 buf=0x7ff9c8000f39 buf_len=64 requested_len=0\nEVENT=entry param=0x7ff9c8008bf0 value.str=0x7ff9c8000e76 value.le\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The mistaken assumption is that param->value.str is a const char * (i.e. the pointed-to characters are const). Because param is a pointer to a const struct, the const applies to the struct object (top-level), so the member expression param->value.str has type char * const (a const pointer to char), not const char *. In other words the pointer itself is const, but the pointee type is not const-qualified. Assigning param->value.str to an unquoted->str of type char * therefore does not drop const qualification of the pointed-to type.\n\nMISRA R8.13 asks that pointers point to a const-qualified type when possible, but the code shown does not demonstrate a drop of the pointee const qualifier. It would be appropriate to make unquoted->str a const char * only if the rest of the code never modifies the characters via that pointer; that change is a design decision, not provably required by the fragment shown. Given the information here, there is no clear R8.13 violation, so the agent A report is incorrect."
}