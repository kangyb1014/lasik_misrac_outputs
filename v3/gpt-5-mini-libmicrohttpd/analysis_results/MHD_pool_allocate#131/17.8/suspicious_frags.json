{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_allocate:\n```c\nvoid *\nMHD_pool_allocate (struct MemoryPool *pool,\n                   size_t size,\n                   bool from_end)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n    return NULL; /* size too close to SIZE_MAX */\n  if (asize > pool->end - pool->pos)\n    return NULL;\n  if (from_end)\n  {\n    ret = &pool->memory[pool->end - asize];\n    pool->end -= asize;\n  }\n  else\n  {\n    ret = &pool->memory[pool->pos];\n    pool->pos += asize;\n  }\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "pool->pos += asize;",
    "mhd_assert (pool->size >= pool->end - pool->pos);",
    "pool->end -= asize;",
    "_MHD_UNPOISON_MEMORY (ret, size);",
    "asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);",
    "mhd_assert (pool->end >= pool->pos);",
    "mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));"
  ],
  "explanation": "No parameter is directly reassigned in the body (there is no assignment to the parameter identifier 'pool', nor to 'size' or 'from_end'). The only modifications are to members of *pool (pool->end -= asize; pool->pos += asize;), which is allowed by Rule 17.8 (the object pointed to by a pointer parameter may be modified, the pointer itself must not be changed). Local variables ret and asize are only local temporaries and not parameters. All other uses of the parameters are reads (comparisons, returns, address-of). The remaining macro/function-like intrinsics (the mhd_assert and ROUND_TO_ALIGN_PLUS_RED_ZONE / _MHD_UNPOISON_MEMORY invocations) are included above because their expansions could potentially contain assignments that affect parameters; they therefore warrant investigation. Other code fragments do not modify parameters and so do not need further investigation for Rule 17.8."
}