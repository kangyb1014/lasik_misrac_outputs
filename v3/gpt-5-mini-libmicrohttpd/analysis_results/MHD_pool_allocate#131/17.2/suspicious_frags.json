{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_allocate:\n```c\nvoid *\nMHD_pool_allocate (struct MemoryPool *pool,\n                   size_t size,\n                   bool from_end)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n    return NULL; /* size too close to SIZE_MAX */\n  if (asize > pool->end - pool->pos)\n    return NULL;\n  if (from_end)\n  {\n    ret = &pool->memory[pool->end - asize];\n    pool->end -= asize;\n  }\n  else\n  {\n    ret = &pool->memory[pool->pos];\n    pool->pos += asize;\n  }\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "ret = &pool->memory[pool->end - asize];",
    "ret = &pool->memory[pool->pos];",
    "mhd_assert (pool->size >= pool->end - pool->pos);",
    "_MHD_UNPOISON_MEMORY (ret, size);",
    "asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);",
    "mhd_assert (pool->end >= pool->pos);",
    "mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));"
  ],
  "explanation": "Rule 17.2 concerns direct or indirect self-calls. The only places in this function that could lead to indirect recursion are calls or macros that might invoke other functions. Therefore the function-call-like fragments listed above should be examined to see whether any of those expand to, or call, MHD_pool_allocate (directly or through a chain). Other parts of the function do not perform function calls and hence cannot participate in a call cycle: the local variable declarations (void *ret; size_t asize;), the assertions of simple relational properties (aside from the call sites already listed), the arithmetic and pointer computations (pool->end - pool->pos, pool->memory[...] indexing), the assignments to pool->pos and pool->end, the conditional branches (if/else) and the plain return statements (return NULL; return ret;) are pure operations that cannot by themselves call MHD_pool_allocate and therefore do not need further investigation for recursive calls."
}