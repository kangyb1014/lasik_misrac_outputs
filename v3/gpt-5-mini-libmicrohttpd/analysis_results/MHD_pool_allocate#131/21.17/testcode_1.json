{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf pool->memory is an array of pool->size bytes but pool->end is not constrained to be \u2264 pool->size, the pointer returned can point into memory beyond the actual array. Example: pool->size == 50, pool->pos == 40, pool->end == 90 and asize == 20 (so asize <= pool->end - pool->pos holds and the function proceeds). The code sets ret = &pool->memory[40] and returns it; a subsequent call such as memcpy(ret, src, 20) would write bytes at indices 40..59, but valid indices are only 0..49, so accesses 50..59 are out-of-bounds. Therefore Rule 21.17 can be violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_allocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_allocate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_allocate:\n```c\nvoid *\nMHD_pool_allocate (struct MemoryPool *pool,\n                   size_t size,\n                   bool from_end)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n    return NULL; /* size too close to SIZE_MAX */\n  if (asize > pool->end - pool->pos)\n    return NULL;\n  if (from_end)\n  {\n    ret = &pool->memory[pool->end - asize];\n    pool->end -= asize;\n  }\n  else\n  {\n    ret = &pool->memory[pool->pos];\n    pool->pos += asize;\n  }\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_allocate code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Probe logging helper. Writes human-readable logs to /tmp/logs/1319.txt.\n   Keeps logging code non-intrusive and avoids pointer arithmetic that could\n   itself be undefined when pool->end is inconsistent with pool->size. */\nstatic void\nmhd_pool_log_probe(const struct MemoryPool *pool,\n                   const char *stage,\n                   size_t requested_size,\n                   size_t asize,\n                   bool from_end,\n                   size_t candidate_index)\n{\n  FILE *f = fopen(\"/tmp/logs/1319.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  if (pool)\n  {\n    fprintf(f,\n            \"[MHD_POOL] stage=%s pool=%p requested_size=%zu asize=%zu from_end=%d pool->size=%zu pool->pos=%zu pool->end=%zu candidate_index=%zu\\n\",\n            stage,\n            (void *)pool,\n            requested_size,\n            asize,\n            (int)from_end,\n            pool->size,\n            pool->pos,\n            pool->end,\n            candidate_index);\n  }\n  else\n  {\n    fprintf(f,\n            \"[MHD_POOL] stage=%s pool=NULL requested_size=%zu asize=%zu from_end=%d candidate_index=%zu\\n\",\n            stage,\n            requested_size,\n            asize,\n            (int)from_end,\n            candidate_index);\n  }\n\n  fclose(f);\n}\n\nvoid *\nMHD_pool_allocate (struct MemoryPool *pool,\n                   size_t size,\n                   bool from_end)\n{\n  void *ret;\n  size_t asize;\n\n  /* Preserve original assertions */\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  /* Log entry state (candidate_index unknown yet, use (size_t)-1) */\n  mhd_pool_log_probe(pool, \"entry\", size, (size_t)-1, from_end, (size_t)-1);\n\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n\n  /* Log after asize computed */\n  mhd_pool_log_probe(pool, \"after_asize\", size, asize, from_end, (size_t)-1);\n\n  if ( (0 == asize) && (0 != size) )\n  {\n    mhd_pool_log_probe(pool, \"return_null_size_too_close_to_MAX\", size, asize, from_end, (size_t)-1);\n    return NULL; /* size too close to SIZE_MAX */\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    mhd_pool_log_probe(pool, \"return_null_not_enough_space\", size, asize, from_end, (size_t)-1);\n    return NULL;\n  }\n\n  if (from_end)\n  {\n    /* compute candidate index without performing pointer arithmetic that\n       might be undefined if pool->end is inconsistent with the real\n       allocation backing pool->memory. */\n    size_t candidate_index = pool->end - asize;\n    mhd_pool_log_probe(pool, \"alloc_from_end_before_update\", size, asize, from_end, candidate_index);\n\n    ret = &pool->memory[candidate_index];\n    pool->end -= asize;\n\n    mhd_pool_log_probe(pool, \"alloc_from_end_after_update\", size, asize, from_end, candidate_index);\n  }\n  else\n  {\n    size_t candidate_index = pool->pos;\n    mhd_pool_log_probe(pool, \"alloc_from_front_before_update\", size, asize, from_end, candidate_index);\n\n    ret = &pool->memory[candidate_index];\n    pool->pos += asize;\n\n    mhd_pool_log_probe(pool, \"alloc_from_front_after_update\", size, asize, from_end, candidate_index);\n  }\n  _MHD_UNPOISON_MEMORY (ret, size);\n\n  /* Final log with returned pointer expressed as the candidate index to\n     avoid undefined pointer subtraction if the pool bookkeeping is invalid. */\n  /* Compute final candidate index for logging: if from_end we already logged it, but log again for completeness. */\n  if (from_end)\n    mhd_pool_log_probe(pool, \"returning_from_end\", size, asize, from_end, (size_t)(pool->pos /* placeholder */));\n  else\n    mhd_pool_log_probe(pool, \"returning_from_front\", size, asize, from_end, (size_t)(pool->pos /* placeholder */));\n\n  return ret;\n}\n"
}