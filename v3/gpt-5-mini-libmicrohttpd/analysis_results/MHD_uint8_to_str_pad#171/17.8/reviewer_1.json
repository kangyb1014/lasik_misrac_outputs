{
  "user_message": "An agent A claimed that the following MHD_uint8_to_str_pad code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_uint8_to_str_pad.\n```c\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n    return 0;\n\n  pos = 0;\n  digit = val / 100;\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 100;\n    min_digits = 2;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  digit = val / 10;\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 10;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  buf[pos++] = (char) ('0' + (char) val);\n  return pos;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'val' (type uint8_t) is modified in the function by the statement 'val %= 10;'. This directly alters a non\u2011pointer function parameter, which violates MISRA C 2023 Rule 17.8. To comply, use a local copy of the parameter and modify that instead.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: MHD_uint8_to_str_pad val=0, min_digits=0, buf=0x7ffd128de8f8, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER: MHD_uint8_to_str_pad val=0, min_digits=0, buf=0x7ffd128de8f8, buf_size=1\ncomputed digit = val/100 -> digit=0, val=0\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=0, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=0, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=0, min_digits=0, buf=0x7ffd128de8f8, buf_size=2\ncomputed digit = val/100 -> digit=0, val=0\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=0, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=0, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=1, min_digits=0, buf=0x7ffd128de8f8, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER: MHD_uint8_to_str_pad val=1, min_digits=0, buf=0x7ffd128de8f8, buf_size=1\ncomputed digit = val/100 -> digit=0, val=1\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=1, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=1, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=1, min_digits=0, buf=0x7ffd128de8f8, buf_size=2\ncomputed digit = val/100 -> digit=0, val=1\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=1, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=1, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=2, min_digits=0, buf=0x7ffd128de8f8, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER: MHD_uint8_to_str_pad val=2, min_digits=0, buf=0x7ffd128de8f8, buf_size=1\ncomputed digit = val/100 -> digit=0, val=2\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=2, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=2, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=2, min_digits=0, buf=0x7ffd128de8f8, buf_size=2\ncomputed digit = val/100 -> digit=0, val=2\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=2, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=2, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=3, min_digits=0, buf=0x7ffd128de8f8, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER: MHD_uint8_to_str_pad val=3, min_digits=0, buf=0x7ffd128de8f8, buf_size=1\ncomputed digit = val/100 -> digit=0, val=3\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=3, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=3, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=3, min_digits=0, buf=0x7ffd128de8f8, buf_size=2\ncomputed digit = val/100 -> digit=0, val=3\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=3, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=3, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=4, min_digits=0, buf=0x7ffd128de8f8, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER: MHD_uint8_to_str_pad val=4, min_digits=0, buf=0x7ffd128de8f8, buf_size=1\ncomputed digit = val/100 -> digit=0, val=4\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=4, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=4, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=4, min_digits=0, buf=0x7ffd128de8f8, buf_size=2\ncomputed digit = val/100 -> digit=0, val=4\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=4, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=4, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=5, min_digits=0, buf=0x7ffd128de8f8, buf_size=0\nEARLY RETURN: buf_size == 0 -> return 0\nENTER: MHD_uint8_to_str_pad val=5, min_digits=0, buf=0x7ffd128de8f8, buf_size=1\ncomputed digit = val/100 -> digit=0, val=5\nbranch: digit==0, pos=0\ncomputed digit = val/10 -> digit=0, val=5, pos=0\nbranch: digit==0 after tens check, pos=0\nFINAL: wrote last digit, final val=5, final pos=1, returning 1\nENTER: MHD_uint8_to_str_pad val=5, min_digits=0, buf=0x7ffd128de8f8, buf_siz\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In MHD_uint8_to_str_pad the value parameter 'val' is modified (e.g. 'val %= 100;' and 'val %= 10;'). The parameter 'min_digits' is also reassigned ('min_digits = 2;'), which is another violation of the same rule. (Modifying the object pointed to by 'buf' is allowed; what is forbidden is assigning to the parameter objects themselves.) To comply, introduce local copies (for example: 'uint8_t v = val;' and 'uint8_t md = min_digits;') and perform modifications on those locals, leaving the formal parameters unmodified."
}