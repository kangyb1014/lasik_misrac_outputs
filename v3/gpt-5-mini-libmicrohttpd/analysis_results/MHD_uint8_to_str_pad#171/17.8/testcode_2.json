{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'val %= 100;' modifies the function parameter 'val' (a scalar parameter passed by value). MISRA C 2023 Rule 17.8 forbids modifying function parameters; the pointer exception does not apply here, so this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint8_to_str_pad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1717.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_uint8_to_str_pad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_uint8_to_str_pad:\n```c\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n    return 0;\n\n  pos = 0;\n  digit = val / 100;\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 100;\n    min_digits = 2;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  digit = val / 10;\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 10;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  buf[pos++] = (char) ('0' + (char) val);\n  return pos;\n}\n```\n</target_code>\nPlease provide the modified MHD_uint8_to_str_pad code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/1717.txt */\nstatic void\nmhd_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1717.txt\", \"a\");\n  if (f == NULL)\n    return; /* best-effort logging; do not affect original logic */\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n\n  /* Log entry and initial state */\n  mhd_log (\"ENTER MHD_uint8_to_str_pad: val=%u, min_digits=%u, buf=%p, buf_size=%zu\",\n           (unsigned) val, (unsigned) min_digits, (void *) buf, buf_size);\n\n  if (0 == buf_size)\n  {\n    mhd_log (\"EARLY RETURN: buf_size == 0 -> return 0\");\n    return 0;\n  }\n\n  pos = 0;\n  digit = val / 100;\n  mhd_log (\"computed digit (hundreds) = %d\", digit);\n  if (0 == digit)\n  {\n    mhd_log (\"hundreds digit == 0 branch\");\n    if (3 <= min_digits)\n    {\n      buf[pos++] = '0';\n      mhd_log (\"wrote leading '0' for hundreds, pos=%zu\", pos);\n    }\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    mhd_log (\"wrote hundreds digit '%c' at pos=%zu\", (char)('0' + (char)digit), pos - 1);\n\n    /* Log state before modifying parameter 'val' */\n    mhd_log (\"about to modify parameter 'val': before val=%u, min_digits=%u\", (unsigned) val, (unsigned) min_digits);\n\n    val %= 100; /* <-- modification of function parameter reported as violation */\n\n    /* Log state after modifying 'val' and 'min_digits' */\n    min_digits = 2;\n    mhd_log (\"after modification: val=%u, min_digits=%u\", (unsigned) val, (unsigned) min_digits);\n  }\n\n  if (buf_size <= pos)\n  {\n    mhd_log (\"RETURN: buf_size <= pos (%zu <= %zu) -> return 0\", buf_size, pos);\n    return 0;\n  }\n  digit = val / 10;\n  mhd_log (\"computed digit (tens) = %d\", digit);\n  if (0 == digit)\n  {\n    mhd_log (\"tens digit == 0 branch\");\n    if (2 <= min_digits)\n    {\n      buf[pos++] = '0';\n      mhd_log (\"wrote leading '0' for tens, pos=%zu\", pos);\n    }\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    mhd_log (\"wrote tens digit '%c' at pos=%zu\", (char)('0' + (char)digit), pos - 1);\n\n    /* Log state before modifying parameter 'val' */\n    mhd_log (\"about to modify parameter 'val' (tens->remainder): before val=%u\", (unsigned) val);\n\n    val %= 10;\n\n    mhd_log (\"after modifying val (tens->remainder): val=%u\", (unsigned) val);\n  }\n\n  if (buf_size <= pos)\n  {\n    mhd_log (\"RETURN: buf_size <= pos (%zu <= %zu) -> return 0\", buf_size, pos);\n    return 0;\n  }\n  buf[pos++] = (char) ('0' + (char) val);\n  mhd_log (\"wrote units digit '%c' at pos=%zu, final pos=%zu\", (char)('0' + (char)val), pos - 1, pos);\n  mhd_log (\"EXIT MHD_uint8_to_str_pad: returning pos=%zu\", pos);\n  return pos;\n}\n"
}