{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'min_digits = 2;' assigns to the parameter min_digits (a non-pointer function parameter) inside MHD_uint8_to_str_pad. This modifies a function parameter and therefore violates MISRA C 2023 Rule 17.8. (Use a local copy, e.g. 'uint8_t min = min_digits;', and modify 'min' instead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint8_to_str_pad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1717.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_uint8_to_str_pad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_uint8_to_str_pad:\n```c\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n    return 0;\n\n  pos = 0;\n  digit = val / 100;\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 100;\n    min_digits = 2;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  digit = val / 10;\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 10;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  buf[pos++] = (char) ('0' + (char) val);\n  return pos;\n}\n```\n</target_code>\nPlease provide the modified MHD_uint8_to_str_pad code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdarg.h>\n\n/* Minimal stub for mhd_assert so this file is standalone-compileable. */\nvoid mhd_assert (int cond)\n{\n    (void) cond;\n}\n\nstatic void log1717(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1717.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n\n  /* Log function entry and initial parameters */\n  log1717(\"MHD_uint8_to_str_pad: entry val=%u min_digits=%u buf=%p buf_size=%zu\",\n           (unsigned) val, (unsigned) min_digits, (void *) buf, buf_size);\n\n  if (0 == buf_size)\n  {\n    log1717(\"MHD_uint8_to_str_pad: returning 0 because buf_size == 0\");\n    return 0;\n  }\n\n  pos = 0;\n  digit = val / 100;\n  log1717(\"computed digit (hundreds) = %d\", digit);\n  if (0 == digit)\n  {\n    log1717(\"hundreds digit is 0\");\n    if (3 <= min_digits)\n    {\n      buf[pos++] = '0';\n      log1717(\"wrote '0' for hundreds, pos=%zu\", pos);\n    }\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    log1717(\"wrote hundreds digit '%c', pos=%zu\", (char)('0' + (char)digit), pos);\n    val %= 100;\n    /* Violation scenario: assignment to parameter min_digits. Log before and after. */\n    log1717(\"about to assign to parameter min_digits: old=%u\", (unsigned) min_digits);\n    min_digits = 2;\n    log1717(\"assigned to parameter min_digits: new=%u\", (unsigned) min_digits);\n  }\n\n  if (buf_size <= pos)\n  {\n    log1717(\"MHD_uint8_to_str_pad: returning 0 because buf_size <= pos (buf_size=%zu pos=%zu)\", buf_size, pos);\n    return 0;\n  }\n  digit = val / 10;\n  log1717(\"computed digit (tens) = %d\", digit);\n  if (0 == digit)\n  {\n    log1717(\"tens digit is 0, min_digits=%u\", (unsigned) min_digits);\n    if (2 <= min_digits)\n    {\n      buf[pos++] = '0';\n      log1717(\"wrote '0' for tens, pos=%zu\", pos);\n    }\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    log1717(\"wrote tens digit '%c', pos=%zu\", (char)('0' + (char)digit), pos);\n    val %= 10;\n  }\n\n  if (buf_size <= pos)\n  {\n    log1717(\"MHD_uint8_to_str_pad: returning 0 because buf_size <= pos before units (buf_size=%zu pos=%zu)\", buf_size, pos);\n    return 0;\n  }\n  buf[pos++] = (char) ('0' + (char) val);\n  log1717(\"wrote units digit '%c', final pos=%zu\", (char)('0' + (char)val), pos);\n  log1717(\"MHD_uint8_to_str_pad: returning pos=%zu\", pos);\n  return pos;\n}\n"
}