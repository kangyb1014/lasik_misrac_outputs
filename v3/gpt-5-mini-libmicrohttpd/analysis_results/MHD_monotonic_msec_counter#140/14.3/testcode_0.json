{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression 'if (1)' is invariant (always true) in the code fragment. MISRA C 2023 Rule 14.3 forbids invariant controlling expressions; the provided exceptions (infinite loops or the specific do-while case) do not apply to an unconditional if. This therefore violates Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_monotonic_msec_counter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1405.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_monotonic_msec_counter as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_monotonic_msec_counter:\n```c\nuint64_t\nMHD_monotonic_msec_counter (void)\n{\n#if defined(HAVE_CLOCK_GETTIME) || defined(HAVE_TIMESPEC_GET)\n  struct timespec ts;\n#endif /* HAVE_CLOCK_GETTIME || HAVE_TIMESPEC_GET */\n\n#ifdef HAVE_CLOCK_GETTIME\n  if ( (_MHD_UNWANTED_CLOCK != mono_clock_id) &&\n       (0 == clock_gettime (mono_clock_id,\n                            &ts)) )\n    return (uint64_t) (((uint64_t) (ts.tv_sec - mono_clock_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_CLOCK_GET_TIME\n  if (_MHD_INVALID_CLOCK_SERV != mono_clock_service)\n  {\n    mach_timespec_t cur_time;\n\n    if (KERN_SUCCESS == clock_get_time (mono_clock_service,\n                                        &cur_time))\n      return (uint64_t) (((uint64_t) (cur_time.tv_sec - mono_clock_start))\n                         * 1000 + (uint64_t) (cur_time.tv_nsec / 1000000));\n  }\n#endif /* HAVE_CLOCK_GET_TIME */\n#if defined(_WIN32)\n#if _WIN32_WINNT >= 0x0600\n  if (1)\n    return (uint64_t) (GetTickCount64 () - tick_start);\n#else  /* _WIN32_WINNT < 0x0600 */\n  if (0 != perf_freq)\n  {\n    LARGE_INTEGER perf_counter;\n    uint64_t num_ticks;\n\n    QueryPerformanceCounter (&perf_counter);   /* never fail on XP and later */\n    num_ticks = (uint64_t) (perf_counter.QuadPart - perf_start);\n    return ((num_ticks / perf_freq) * 1000)\n           + ((num_ticks % perf_freq) / (perf_freq / 1000));\n  }\n#endif /* _WIN32_WINNT < 0x0600 */\n#endif /* _WIN32 */\n#ifdef HAVE_GETHRTIME\n  if (1)\n    return ((uint64_t) (gethrtime () - hrtime_start)) / 1000000;\n#endif /* HAVE_GETHRTIME */\n\n  /* Fallbacks, affected by system time change */\n#ifdef HAVE_TIMESPEC_GET\n  if (TIME_UTC == timespec_get (&ts, TIME_UTC))\n    return (uint64_t) (((uint64_t) (ts.tv_sec - gettime_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n#elif defined(HAVE_GETTIMEOFDAY)\n  if (1)\n  {\n    struct timeval tv;\n    if (0 == gettimeofday (&tv, NULL))\n      return (uint64_t) (((uint64_t) (tv.tv_sec - gettime_start)) * 1000\n                         + (uint64_t) (tv.tv_usec / 1000));\n  }\n#endif /* HAVE_GETTIMEOFDAY */\n\n  /* The last resort fallback with very low resolution */\n  return (uint64_t) (time (NULL) - sys_clock_start) * 1000;\n}\n```\n</target_code>\nPlease provide the modified MHD_monotonic_msec_counter code.\n",
  "test_code": "static void mhd_log_probe(const char *label, uint64_t value, const char *detail)\n{\n  FILE *f = fopen(\"/tmp/logs/1405.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"%s: %llu: %s\\n\", label, (unsigned long long) value, (detail != NULL) ? detail : \"\");\n    fclose(f);\n  }\n}\n\nuint64_t\nMHD_monotonic_msec_counter (void)\n{\n#if defined(HAVE_CLOCK_GETTIME) || defined(HAVE_TIMESPEC_GET)\n  struct timespec ts;\n#endif /* HAVE_CLOCK_GETTIME || HAVE_TIMESPEC_GET */\n\n#ifdef HAVE_CLOCK_GETTIME\n  mhd_log_probe(\"branch_check\", 0, \"Entering CLOCK_GETTIME check\");\n  if ( (_MHD_UNWANTED_CLOCK != mono_clock_id) &&\n       (0 == clock_gettime (mono_clock_id,\n                            &ts)) )\n  {\n    uint64_t ret = (uint64_t) (((uint64_t) (ts.tv_sec - mono_clock_start)) * 1000\n                               + (uint64_t) (ts.tv_nsec / 1000000));\n    mhd_log_probe(\"return\", ret, \"CLOCK_GETTIME branch taken; ts.tv_sec and ts.tv_nsec logged implicitly\");\n    return ret;\n  }\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_CLOCK_GET_TIME\n  mhd_log_probe(\"branch_check\", 0, \"Entering CLOCK_GET_TIME check\");\n  if (_MHD_INVALID_CLOCK_SERV != mono_clock_service)\n  {\n    mach_timespec_t cur_time;\n\n    if (KERN_SUCCESS == clock_get_time (mono_clock_service,\n                                        &cur_time))\n    {\n      uint64_t ret = (uint64_t) (((uint64_t) (cur_time.tv_sec - mono_clock_start))\n                                 * 1000 + (uint64_t) (cur_time.tv_nsec / 1000000));\n      mhd_log_probe(\"return\", ret, \"CLOCK_GET_TIME branch taken; cur_time.tv_sec and cur_time.tv_nsec logged implicitly\");\n      return ret;\n    }\n  }\n#endif /* HAVE_CLOCK_GET_TIME */\n#if defined(_WIN32)\n#if _WIN32_WINNT >= 0x0600\n  mhd_log_probe(\"branch_check\", 1, \"Evaluating if (1) for GetTickCount64\");\n  if (1)\n  {\n    uint64_t ret = (uint64_t) (GetTickCount64 () - tick_start);\n    mhd_log_probe(\"return\", ret, \"GetTickCount64 unconditional branch taken (if (1))\");\n    return ret;\n  }\n#else  /* _WIN32_WINNT < 0x0600 */\n  mhd_log_probe(\"branch_check\", 0, \"Entering performance counter check\");\n  if (0 != perf_freq)\n  {\n    LARGE_INTEGER perf_counter;\n    uint64_t num_ticks;\n\n    QueryPerformanceCounter (&perf_counter);   /* never fail on XP and later */\n    num_ticks = (uint64_t) (perf_counter.QuadPart - perf_start);\n    {\n      uint64_t ret = ((num_ticks / perf_freq) * 1000)\n           + ((num_ticks % perf_freq) / (perf_freq / 1000));\n      mhd_log_probe(\"return\", ret, \"Performance counter branch taken\");\n      return ret;\n    }\n  }\n#endif /* _WIN32_WINNT < 0x0600 */\n#endif /* _WIN32 */\n#ifdef HAVE_GETHRTIME\n  mhd_log_probe(\"branch_check\", 1, \"Evaluating if (1) for gethrtime\");\n  if (1)\n  {\n    uint64_t ret = ((uint64_t) (gethrtime () - hrtime_start)) / 1000000;\n    mhd_log_probe(\"return\", ret, \"gethrtime unconditional branch taken (if (1))\");\n    return ret;\n  }\n#endif /* HAVE_GETHRTIME */\n\n  /* Fallbacks, affected by system time change */\n#ifdef HAVE_TIMESPEC_GET\n  mhd_log_probe(\"branch_check\", 0, \"Entering timespec_get fallback\");\n  if (TIME_UTC == timespec_get (&ts, TIME_UTC))\n  {\n    uint64_t ret = (uint64_t) (((uint64_t) (ts.tv_sec - gettime_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n    mhd_log_probe(\"return\", ret, \"timespec_get fallback taken\");\n    return ret;\n  }\n#elif defined(HAVE_GETTIMEOFDAY)\n  mhd_log_probe(\"branch_check\", 1, \"Evaluating if (1) for gettimeofday fallback\");\n  if (1)\n  {\n    struct timeval tv;\n    if (0 == gettimeofday (&tv, NULL))\n    {\n      uint64_t ret = (uint64_t) (((uint64_t) (tv.tv_sec - gettime_start)) * 1000\n                         + (uint64_t) (tv.tv_usec / 1000));\n      mhd_log_probe(\"return\", ret, \"gettimeofday fallback taken (if (1))\");\n      return ret;\n    }\n    else\n    {\n      mhd_log_probe(\"info\", 0, \"gettimeofday failed in fallback (if (1))\");\n    }\n  }\n#endif /* HAVE_GETTIMEOFDAY */\n\n  /* The last resort fallback with very low resolution */\n  {\n    uint64_t ret = (uint64_t) (time (NULL) - sys_clock_start) * 1000;\n    mhd_log_probe(\"return\", ret, \"final time() fallback taken\");\n    return ret;\n  }\n}\n"
}