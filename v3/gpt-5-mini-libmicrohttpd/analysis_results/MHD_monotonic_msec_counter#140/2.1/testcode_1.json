{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nWhen the code is compiled so that one of the unconditional-return branches is active (for example on Windows with _WIN32 and _WIN32_WINNT >= 0x0600 the block with \"if (1) return (uint64_t) (GetTickCount64 () - tick_start);\" is included, or when HAVE_GETHRTIME is defined which contains \"if (1) return ...\"), that unconditional return will always transfer control out of the function and the final fallback statement\n    return (uint64_t) (time (NULL) - sys_clock_start) * 1000;\ncan never be reached. In such a build configuration the final return is unreachable, violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_monotonic_msec_counter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1401.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_monotonic_msec_counter as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_monotonic_msec_counter:\n```c\nuint64_t\nMHD_monotonic_msec_counter (void)\n{\n#if defined(HAVE_CLOCK_GETTIME) || defined(HAVE_TIMESPEC_GET)\n  struct timespec ts;\n#endif /* HAVE_CLOCK_GETTIME || HAVE_TIMESPEC_GET */\n\n#ifdef HAVE_CLOCK_GETTIME\n  if ( (_MHD_UNWANTED_CLOCK != mono_clock_id) &&\n       (0 == clock_gettime (mono_clock_id,\n                            &ts)) )\n    return (uint64_t) (((uint64_t) (ts.tv_sec - mono_clock_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_CLOCK_GET_TIME\n  if (_MHD_INVALID_CLOCK_SERV != mono_clock_service)\n  {\n    mach_timespec_t cur_time;\n\n    if (KERN_SUCCESS == clock_get_time (mono_clock_service,\n                                        &cur_time))\n      return (uint64_t) (((uint64_t) (cur_time.tv_sec - mono_clock_start))\n                         * 1000 + (uint64_t) (cur_time.tv_nsec / 1000000));\n  }\n#endif /* HAVE_CLOCK_GET_TIME */\n#if defined(_WIN32)\n#if _WIN32_WINNT >= 0x0600\n  if (1)\n    return (uint64_t) (GetTickCount64 () - tick_start);\n#else  /* _WIN32_WINNT < 0x0600 */\n  if (0 != perf_freq)\n  {\n    LARGE_INTEGER perf_counter;\n    uint64_t num_ticks;\n\n    QueryPerformanceCounter (&perf_counter);   /* never fail on XP and later */\n    num_ticks = (uint64_t) (perf_counter.QuadPart - perf_start);\n    return ((num_ticks / perf_freq) * 1000)\n           + ((num_ticks % perf_freq) / (perf_freq / 1000));\n  }\n#endif /* _WIN32_WINNT < 0x0600 */\n#endif /* _WIN32 */\n#ifdef HAVE_GETHRTIME\n  if (1)\n    return ((uint64_t) (gethrtime () - hrtime_start)) / 1000000;\n#endif /* HAVE_GETHRTIME */\n\n  /* Fallbacks, affected by system time change */\n#ifdef HAVE_TIMESPEC_GET\n  if (TIME_UTC == timespec_get (&ts, TIME_UTC))\n    return (uint64_t) (((uint64_t) (ts.tv_sec - gettime_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n#elif defined(HAVE_GETTIMEOFDAY)\n  if (1)\n  {\n    struct timeval tv;\n    if (0 == gettimeofday (&tv, NULL))\n      return (uint64_t) (((uint64_t) (tv.tv_sec - gettime_start)) * 1000\n                         + (uint64_t) (tv.tv_usec / 1000));\n  }\n#endif /* HAVE_GETTIMEOFDAY */\n\n  /* The last resort fallback with very low resolution */\n  return (uint64_t) (time (NULL) - sys_clock_start) * 1000;\n}\n```\n</target_code>\nPlease provide the modified MHD_monotonic_msec_counter code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: append messages to /tmp/logs/1401.txt (fallback to /tmp/1401.txt).\n   Keeps original logic unchanged; only records control path and some state values. */\nstatic void mhd_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1401.txt\", \"a\");\n    if (f == NULL)\n        f = fopen(\"/tmp/1401.txt\", \"a\");\n    if (f == NULL)\n        return; /* best-effort logging, don't affect behavior */\n\n    /* timestamp for easier ordering */\n    time_t now = time(NULL);\n    if (now != (time_t)-1)\n        fprintf(f, \"[%ld] \", (long) now);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nuint64_t\nMHD_monotonic_msec_counter (void)\n{\n#if defined(HAVE_CLOCK_GETTIME) || defined(HAVE_TIMESPEC_GET)\n  struct timespec ts;\n#endif /* HAVE_CLOCK_GETTIME || HAVE_TIMESPEC_GET */\n\n#ifdef HAVE_CLOCK_GETTIME\n  if ( (_MHD_UNWANTED_CLOCK != mono_clock_id) &&\n       (0 == clock_gettime (mono_clock_id,\n                            &ts)) )\n  {\n    uint64_t result = (uint64_t) (((uint64_t) (ts.tv_sec - mono_clock_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n    /* Log control path and key state */\n    mhd_logf(\"path=HAVE_CLOCK_GETTIME; mono_clock_id=%llu; _MHD_UNWANTED_CLOCK=%llu; ts.tv_sec=%lld; ts.tv_nsec=%ld; mono_clock_start=%lld; result=%llu\",\n             (unsigned long long) mono_clock_id,\n             (unsigned long long) _MHD_UNWANTED_CLOCK,\n             (long long) ts.tv_sec,\n             (long) ts.tv_nsec,\n             (long long) mono_clock_start,\n             (unsigned long long) result);\n    return result;\n  }\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_CLOCK_GET_TIME\n  if (_MHD_INVALID_CLOCK_SERV != mono_clock_service)\n  {\n    mach_timespec_t cur_time;\n\n    if (KERN_SUCCESS == clock_get_time (mono_clock_service,\n                                        &cur_time))\n    {\n      uint64_t result = (uint64_t) (((uint64_t) (cur_time.tv_sec - mono_clock_start))\n                         * 1000 + (uint64_t) (cur_time.tv_nsec / 1000000));\n      mhd_logf(\"path=HAVE_CLOCK_GET_TIME; mono_clock_service=%p; cur_time.tv_sec=%lld; cur_time.tv_nsec=%ld; mono_clock_start=%lld; result=%llu\",\n               (void *) mono_clock_service,\n               (long long) cur_time.tv_sec,\n               (long) cur_time.tv_nsec,\n               (long long) mono_clock_start,\n               (unsigned long long) result);\n      return result;\n    }\n  }\n#endif /* HAVE_CLOCK_GET_TIME */\n#if defined(_WIN32)\n#if _WIN32_WINNT >= 0x0600\n  if (1)\n  {\n    /* Compute result into a local variable so we can log before returning */\n    uint64_t tick_now = (uint64_t) GetTickCount64 ();\n    uint64_t result = (uint64_t) (tick_now - tick_start);\n    mhd_logf(\"path=_WIN32_GetTickCount64; tick_now=%llu; tick_start=%llu; result=%llu\",\n             (unsigned long long) tick_now,\n             (unsigned long long) tick_start,\n             (unsigned long long) result);\n    return result;\n  }\n#else  /* _WIN32_WINNT < 0x0600 */\n  if (0 != perf_freq)\n  {\n    LARGE_INTEGER perf_counter;\n    uint64_t num_ticks;\n\n    QueryPerformanceCounter (&perf_counter);   /* never fail on XP and later */\n    num_ticks = (uint64_t) (perf_counter.QuadPart - perf_start);\n    uint64_t result = ((num_ticks / perf_freq) * 1000)\n           + ((num_ticks % perf_freq) / (perf_freq / 1000));\n    mhd_logf(\"path=_WIN32_QPC; perf_counter=%lld; perf_start=%lld; perf_freq=%llu; num_ticks=%llu; result=%llu\",\n             (long long) perf_counter.QuadPart,\n             (long long) perf_start,\n             (unsigned long long) perf_freq,\n             (unsigned long long) num_ticks,\n             (unsigned long long) result);\n    return result;\n  }\n#endif /* _WIN32_WINNT < 0x0600 */\n#endif /* _WIN32 */\n#ifdef HAVE_GETHRTIME\n  if (1)\n  {\n    uint64_t now_hr = (uint64_t) gethrtime ();\n    uint64_t result = ((uint64_t) (now_hr - hrtime_start)) / 1000000;\n    mhd_logf(\"path=HAVE_GETHRTIME; now_hr=%llu; hrtime_start=%llu; result=%llu\",\n             (unsigned long long) now_hr,\n             (unsigned long long) hrtime_start,\n             (unsigned long long) result);\n    return result;\n  }\n#endif /* HAVE_GETHRTIME */\n\n  /* Fallbacks, affected by system time change */\n#ifdef HAVE_TIMESPEC_GET\n  if (TIME_UTC == timespec_get (&ts, TIME_UTC))\n  {\n    uint64_t result = (uint64_t) (((uint64_t) (ts.tv_sec - gettime_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n    mhd_logf(\"path=HAVE_TIMESPEC_GET; ts.tv_sec=%lld; ts.tv_nsec=%ld; gettime_start=%lld; result=%llu\",\n             (long long) ts.tv_sec,\n             (long) ts.tv_nsec,\n             (long long) gettime_start,\n             (unsigned long long) result);\n    return result;\n  }\n#elif defined(HAVE_GETTIMEOFDAY)\n  if (1)\n  {\n    struct timeval tv;\n    if (0 == gettimeofday (&tv, NULL))\n    {\n      uint64_t result = (uint64_t) (((uint64_t) (tv.tv_sec - gettime_start)) * 1000\n                         + (uint64_t) (tv.tv_usec / 1000));\n      mhd_logf(\"path=HAVE_GETTIMEOFDAY; tv.tv_sec=%ld; tv.tv_usec=%ld; gettime_start=%lld; result=%llu\",\n               (long) tv.tv_sec,\n               (long) tv.tv_usec,\n               (long long) gettime_start,\n               (unsigned long long) result);\n      return result;\n    }\n  }\n#endif /* HAVE_GETTIMEOFDAY */\n\n  /* The last resort fallback with very low resolution */\n  {\n    uint64_t tnow = (uint64_t) time (NULL);\n    uint64_t result = (uint64_t) (tnow - sys_clock_start) * 1000;\n    mhd_logf(\"path=LAST_RESORT; time_now=%llu; sys_clock_start=%llu; result=%llu\",\n             (unsigned long long) tnow,\n             (unsigned long long) sys_clock_start,\n             (unsigned long long) result);\n    return result;\n  }\n}\n"
}