{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop assigns connection->rq.headers_received (accessed via a const struct MHD_Connection * parameter) to a non-const pointer variable pos (declared as struct MHD_HTTP_Req_Header *). The code only reads members of the headers list (pos->kind, pos->header_size, pos->header, pos->value, pos->next) and never modifies the pointed objects, so pos should be declared as a pointer to const (const struct MHD_HTTP_Req_Header *pos). Assigning a pointer to non-const when a const-qualified target is possible violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_header_token_ci code that contains useful probe functions that print useful logs to a file \"/tmp/logs/143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_header_token_ci code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/143.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log,\n            \"ENTER: MHD_lookup_header_token_ci conn=%p header_len=%zu token_len=%zu header=\\\"%.*s\\\" token=\\\"%.*s\\\"\\n\",\n            (void *)connection,\n            header_len,\n            token_len,\n            (int)header_len, (header != NULL) ? header : \"\",\n            (int)token_len, (token != NULL) ? token : \"\");\n    fflush(log);\n  }\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY-EXIT: invalid input parameters\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log)\n    {\n      fprintf(log,\n              \"ITER: pos=%p kind=0x%X header_size=%zu header_ptr=%p value_ptr=%p\\n\",\n              (void *)pos,\n              (unsigned int)pos->kind,\n              pos->header_size,\n              (void *)pos->header,\n              (void *)pos->value);\n      if (pos->header)\n        fprintf(log, \"      header=(%zu bytes) \\\"%.*s\\\"\\n\", pos->header_size, (int)pos->header_size, pos->header);\n      if (pos->value)\n        fprintf(log, \"      value=\\\"%s\\\"\\n\", pos->value);\n      fflush(log);\n    }\n\n    /* Evaluate individual sub-conditions once so we can log them */\n    int cond_kind = (0 != (pos->kind & MHD_HEADER_KIND));\n    int cond_size = (header_len == pos->header_size);\n    int cond_hdr = ((header == pos->header) ||\n                    (MHD_str_equal_caseless_bin_n_ (header,\n                                                    pos->header,\n                                                    header_len)));\n    int cond_token = MHD_str_has_token_caseless_ (pos->value, token, token_len);\n\n    if (log)\n    {\n      fprintf(log, \"      cond_kind=%d cond_size=%d cond_hdr=%d cond_token=%d\\n\",\n              cond_kind, cond_size, cond_hdr, cond_token);\n      fflush(log);\n    }\n\n    if (cond_kind && cond_size && cond_hdr && cond_token)\n    {\n      if (log)\n      {\n        fprintf(log, \"MATCH: at pos=%p\\n\", (void *)pos);\n        fclose(log);\n      }\n      return true;\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"NO-MATCH: scanned all headers\\n\");\n    fclose(log);\n  }\n  return false;\n}\n"
}