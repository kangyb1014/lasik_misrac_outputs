{
  "user_message": "An agent A claimed that the following MHD_lookup_header_token_ci code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_lookup_header_token_ci.\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf header_len does not reflect the actual number of bytes available at pointer header (for example header_len is larger than the storage or the true length of the buffer pointed to by header), the call to MHD_str_equal_caseless_bin_n_(header, pos->header, header_len) can cause the function to read header_len bytes from header. If MHD_str_equal_caseless_bin_n_ uses a <string.h> routine such as memcmp/strncasecmp internally, that will access beyond header's bounds. Note: the code only checks header != NULL and header[0] != 0 and compares header_len to pos->header_size (protecting pos->header), but it does not validate that header actually has header_len bytes, so an out-of-bounds access is possible.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct that this code can violate MISRA C 2023 Rule 21.17 under a realistic scenario. Explanation:\n\n- The function does not call any <string.h> functions directly, but it calls helper routines MHD_str_equal_caseless_bin_n_ and MHD_str_has_token_caseless_. If those helpers use standard string routines (e.g. memcmp, strncasecmp, etc.), the rule applies to those uses as well.\n- The condition in the loop checks header_len == pos->header_size, which ensures that pos->header can be safely accessed for header_len bytes. It does not ensure that the caller-supplied pointer header actually points to a buffer at least header_len bytes long. The only checks on header are header != NULL and header[0] != 0, which only prove the buffer is non-NULL and not empty \u2014 they do not bound its length.\n- If header_len is larger than the actual storage accessible through header, a subsequent call MHD_str_equal_caseless_bin_n_(header, pos->header, header_len) that internally uses a <string.h> routine that reads header_len bytes (e.g. memcmp) would read beyond header\u2019s bounds \u2014 exactly the situation Rule 21.17 forbids.\n\nTherefore, unless it is guaranteed (by the API contract) that header_len always correctly reflects the available storage at header, or unless the helper MHD_str_equal_caseless_bin_n_ performs its own checks to prevent out-of-bounds accesses without invoking unsafe string.h calls, the reported violation is valid. The safe remedies are to validate header_len against the actual buffer length before passing it to helpers, or to have the helpers perform bounds-checked comparisons that cannot read past the supplied pointers."
}