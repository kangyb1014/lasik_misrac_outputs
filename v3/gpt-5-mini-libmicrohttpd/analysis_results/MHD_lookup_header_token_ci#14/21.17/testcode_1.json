{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call may violate Rule 21.17 if the helper MHD_str_has_token_caseless_ uses string.h routines (e.g. memcmp/memcpy/strlen) without ensuring its pointer/length arguments are within the actual object bounds. Example violation: token points to a 4\u2011byte buffer (\"abc\\0\") but token_len==10, and MHD_str_has_token_caseless_ calls memcmp(..., token, token_len) or otherwise reads token_len bytes \u2014 this would access beyond the token object. Similarly, if pos->value is shorter than token_len and the helper reads token_len bytes from pos->value, that also overruns the buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_header_token_ci code that contains useful probe functions that print useful logs to a file \"/tmp/logs/149.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified MHD_lookup_header_token_ci code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Forward declarations for helpers used by the original code. */\nextern bool MHD_str_equal_caseless_bin_n_ (const char *a, const char *b, size_t n);\nextern bool MHD_str_has_token_caseless_ (const char *value, const char *token, size_t token_len);\n\n/*\n * Probe logger: append a line to /tmp/logs/149.txt. Keep this minimal and\n * safe: do not dereference pointers passed in (other than printing their\n * addresses) to avoid introducing new out-of-bounds accesses.\n */\nstatic void\nmhd_log_probe(const char *stage,\n              const struct MHD_Connection *connection,\n              const char *header, size_t header_len,\n              const char *token, size_t token_len,\n              const void *pos_ptr,\n              unsigned long pos_kind,\n              const char *pos_header, size_t pos_header_size,\n              const char *pos_value)\n{\n  FILE *f = fopen(\"/tmp/logs/149.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"STAGE: %s\\n\", stage);\n  fprintf(f, \"  connection=%p header=%p header_len=%zu token=%p token_len=%zu\\n\",\n          (void *)connection, (void *)header, header_len, (void *)token, token_len);\n  fprintf(f, \"  pos=%p pos->kind=0x%lx pos->header=%p pos->header_size=%zu pos->value=%p\\n\",\n          pos_ptr, pos_kind, (void *)pos_header, pos_header_size, (void *)pos_value);\n  fclose(f);\n}\n\n/*\n * Modified function: preserves original control flow and logic but adds\n * logging probes to capture the parameters and decision points leading to\n * calls that may trigger Rule 21.17 violations.\n */\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  /* Log initial call parameters */\n  mhd_log_probe(\"entry\", connection, header, header_len, token, token_len,\n                NULL, 0UL, NULL, 0UL, NULL);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Prepare some safe-to-evaluate diagnostics for logging (do not dereference buffers!). */\n    unsigned long pos_kind = (unsigned long) pos->kind;\n    size_t pos_header_size = pos->header_size;\n\n    /* Log the examined header position and its metadata before evaluating helpers. */\n    mhd_log_probe(\"examining_pos\", connection, header, header_len, token, token_len,\n                  (const void *)pos, pos_kind, pos->header, pos_header_size, pos->value);\n\n    /* Preserve the exact original logic for condition evaluation. */\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        /* Log just before calling the token helper so the call site is captured. */\n        ( (mhd_log_probe(\"about_to_call_MHD_str_has_token_caseless\",\n                          connection, header, header_len, token, token_len,\n                          (const void *)pos, pos_kind, pos->header, pos_header_size, pos->value), 0),\n          MHD_str_has_token_caseless_ (pos->value, token, token_len) ) )\n    {\n      /* Record the successful match and return (same behavior as original). */\n      mhd_log_probe(\"match_found_return_true\", connection, header, header_len, token, token_len,\n                    (const void *)pos, pos_kind, pos->header, pos_header_size, pos->value);\n      return true;\n    }\n    else\n    {\n      /* Log that this pos did not result in a match. */\n      mhd_log_probe(\"pos_no_match\", connection, header, header_len, token, token_len,\n                    (const void *)pos, pos_kind, pos->header, pos_header_size, pos->value);\n    }\n  }\n\n  mhd_log_probe(\"no_match_return_false\", connection, header, header_len, token, token_len,\n                NULL, 0UL, NULL, 0UL, NULL);\n  return false;\n}\n"
}