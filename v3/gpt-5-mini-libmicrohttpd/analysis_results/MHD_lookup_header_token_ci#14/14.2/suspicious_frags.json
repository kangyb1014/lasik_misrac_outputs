{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "pos = connection->rq.headers_received",
    "MHD_str_has_token_caseless_ (pos->value, token, token_len)",
    "NULL != pos",
    "MHD_str_equal_caseless_bin_n_ (header, pos->header, header_len)",
    "for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)",
    "pos = pos->next"
  ],
  "explanation": "Rule 14.2 concerns the for-statement clauses and any objects those clauses use that might be modified by the loop body (including functions called from the body). The for-loop header and its three sub-expressions (initialization, condition, iteration) must be checked, and any function calls in the loop body that could have side effects or modify objects used in those clauses must be investigated. Other fragments are not relevant to Rule 14.2 because they do not appear in the for-statement clauses and are simple, read-only checks or local declarations: - The initial null/empty checks and early return are outside the loop and do not affect loop counters or loop control objects. - The local declaration of pos is just the loop counter declaration and is part of normal initialization. - The boolean/bitmask and equality comparisons inside the loop body (e.g., header_len == pos->header_size, header == pos->header, 0 != (pos->kind & MHD_HEADER_KIND)) are read-only expressions that do not modify objects used by the for-clause expressions. - The final return false; is outside the loop. Therefore only the listed for-clause expressions and the two function calls that access members of the loop counter object need investigation for possible side effects or modifications that would violate Rule 14.2."
}