{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(str) without first ensuring that 'str' points to a valid, null\u2011terminated object can read beyond the object bounds. For example, if the caller passes (a) str == NULL or (b) a buffer that is not NUL\u2011terminated (or shorter than the intended length), strlen will scan past the buffer and thus access out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_pct_decode_in_place_lenient_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1549.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_pct_decode_in_place_lenient_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_pct_decode_in_place_lenient_:\n```c\nsize_t\nMHD_str_pct_decode_in_place_lenient_ (char *str,\n                                      bool *broken_encoding)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t len;\n  size_t res;\n\n  len = strlen (str);\n  res = MHD_str_pct_decode_lenient_n_ (str, len, str, len, broken_encoding);\n  str[res] = 0;\n\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  if (NULL != broken_encoding)\n    *broken_encoding = false;\n  r = 0;\n  w = 0;\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n      {\n        if (NULL != broken_encoding)\n          *broken_encoding = true;\n        str[w++] = chr; /* Copy \"as is\" */\n        str[w] = 0;\n        return w;\n      }\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n        {\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          str[w++] = chr; /* Copy \"as is\" */\n          str[w++] = d1; /* Copy \"as is\" */\n          str[w] = 0;\n          return w;\n        }\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n          {\n            if (NULL != broken_encoding)\n              *broken_encoding = true;\n            str[w++] = chr; /* Copy \"as is\" */\n            str[w++] = d1;\n            str[w++] = d2;\n            continue;\n          }\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n          continue;\n        }\n      }\n    }\n    str[w++] = chr;\n  }\n  str[w] = 0;\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n```\n</target_code>\nPlease provide the modified MHD_str_pct_decode_in_place_lenient_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Forward declarations for external functions used by the original code. */\nsize_t MHD_str_pct_decode_lenient_n_ (char *in, size_t in_len,\n                                      char *out, size_t out_len,\n                                      bool *broken_encoding);\nint toxdigitvalue (int c);\n\n/* Simple logging helper that appends a line to /tmp/logs/1549.txt. */\nstatic void\nmhd_logf (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1549.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nsize_t\nMHD_str_pct_decode_in_place_lenient_ (char *str,\n                                      bool *broken_encoding)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t len;\n  size_t res;\n\n  /* Probe: log entry and pointer value before calling strlen.\n     Note: we intentionally do not change the original control flow\n     (i.e. we do not add NULL checks that would avoid the original\n     behaviour). The log contains enough information for reproducing\n     scenarios where strlen(str) may read out of bounds. */\n  mhd_logf (\"MHD_str_pct_decode_in_place_lenient_: entry (small code path). str=%p, broken_encoding=%p\", (void *) str, (void *) broken_encoding);\n  mhd_logf (\"MHD_str_pct_decode_in_place_lenient_: about to call strlen(str)\");\n\n  len = strlen (str);\n\n  mhd_logf (\"MHD_str_pct_decode_in_place_lenient_: strlen returned len=%zu\", len);\n  res = MHD_str_pct_decode_lenient_n_ (str, len, str, len, broken_encoding);\n  mhd_logf (\"MHD_str_pct_decode_in_place_lenient_: MHD_str_pct_decode_lenient_n_ returned res=%zu\", res);\n  str[res] = 0;\n  mhd_logf (\"MHD_str_pct_decode_in_place_lenient_: finished (small code path). final res=%zu, final char at res=%02x\", res, (unsigned char) str[res]);\n\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  if (NULL != broken_encoding)\n    *broken_encoding = false;\n\n  mhd_logf (\"MHD_str_pct_decode_in_place_lenient_: entry (large code path). str=%p, broken_encoding=%p\", (void *) str, (void *) broken_encoding);\n  r = 0;\n  w = 0;\n  mhd_logf (\"MHD_str_pct_decode_in_place_lenient_: initial r=%zu, w=%zu\", r, w);\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    mhd_logf (\"loop: read chr='%c' (0x%02x) at index r-1=%zu; new r=%zu\", (chr >= 32 && chr < 127) ? chr : '?', (unsigned char) chr, r - 1, r);\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n      {\n        if (NULL != broken_encoding)\n          *broken_encoding = true;\n        mhd_logf (\"early return: found '%' followed by NUL at index d1 (r-1)=%zu; setting broken_encoding=true; w=%zu\", r - 1, w);\n        str[w++] = chr; /* Copy \"as is\" */\n        str[w] = 0;\n        return w;\n      }\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n        {\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          mhd_logf (\"early return: found '%' followed by valid d1='%c' then NUL at d2 (r-1)=%zu; setting broken_encoding=true; w=%zu\", (d1 >= 32 && d1 < 127) ? d1 : '?', r - 1, w);\n          str[w++] = chr; /* Copy \"as is\" */\n          str[w++] = d1; /* Copy \"as is\" */\n          str[w] = 0;\n          return w;\n        }\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          mhd_logf (\"percent sequence: d1='%c'(0x%02x) -> h=%d, d2='%c'(0x%02x) -> l=%d\", (d1 >= 32 && d1 < 127) ? d1 : '?', (unsigned char) d1, h, (d2 >= 32 && d2 < 127) ? d2 : '?', (unsigned char) d2, l);\n          if ((0 > h) || (0 > l))\n          {\n            if (NULL != broken_encoding)\n              *broken_encoding = true;\n            mhd_logf (\"invalid hex digits in percent sequence: h=%d, l=%d; marking broken_encoding=true; copying as-is\", h, l);\n            str[w++] = chr; /* Copy \"as is\" */\n            str[w++] = d1;\n            str[w++] = d2;\n            continue;\n          }\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n          mhd_logf (\"decoded percent to byte 0x%02x; wrote at w-1=%zu; continue\", (unsigned int) out, w - 1);\n          continue;\n        }\n      }\n    }\n    str[w++] = chr;\n    mhd_logf (\"copied non-percent char to out at w-1=%zu; new w=%zu\", w - 1, w);\n  }\n  str[w] = 0;\n  mhd_logf (\"finished loop: wrote terminating NUL at w=%zu; returning w\", w);\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n"
}