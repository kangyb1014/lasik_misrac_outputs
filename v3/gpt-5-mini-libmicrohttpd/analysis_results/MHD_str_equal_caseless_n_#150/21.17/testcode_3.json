{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: if str1 points to a buffer smaller than maxlen (for example a 2-byte buffer containing {'A','B'} with no further storage) and str2 is at least maxlen bytes long with matching leading bytes, the loop will reach i==2 and execute str1[2] which is beyond the bounds of the object. Because the code reads str1[i] unconditionally before any check on str2 or bounds, this can produce an out-of-bounds access, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1509.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_n_:\n```c\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (0 == c2)\n      return 0 == c1;\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Prototype of external helper used by the original code. */\nextern int charsequalcaseless (char a, char b);\n\n/*\n * Lightweight probe logger. Each call opens the log file, appends a line,\n * and closes it. This keeps the instrumentation simple and avoids any\n * need to manage a shared FILE* across early returns in the function.\n * If the directory does not exist or fopen fails, the probe silently\n * does nothing (so we do not change program control flow).\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1509.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  probe_log(\"MHD_str_equal_caseless_n_ entry: str1=%p str2=%p maxlen=%zu\\n\",\n            (void *) str1, (void *) str2, maxlen);\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    probe_log(\"iteration i=%zu: about to read str1[i] and str2[i]\\n\", i);\n\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n\n    probe_log(\"iteration i=%zu: read c1=0x%02x c2=0x%02x\\n\",\n              i, (unsigned char) c1, (unsigned char) c2);\n\n    if (0 == c2)\n    {\n      int retval = (0 == c1);\n      probe_log(\"iteration i=%zu: c2==0 => returning %d\\n\", i, retval);\n      return retval;\n    }\n    if (charsequalcaseless (c1, c2))\n    {\n      probe_log(\"iteration i=%zu: chars equal (caseless) -> continue\\n\", i);\n      continue;\n    }\n    else\n    {\n      probe_log(\"iteration i=%zu: chars differ -> returning 0\\n\", i);\n      return 0;\n    }\n  }\n  probe_log(\"reached maxlen (%zu) -> returning 1\\n\", maxlen);\n  return ! 0;\n}\n"
}