{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf str2 does not have a valid NUL terminator within the first maxlen bytes (for example str2 points to a buffer allocated with size < maxlen and not NUL-terminated), the expression str2[i] will read past the object bounds when i reaches the buffer length \u2014 undefined behaviour. Thus the code can access beyond the bounds of the object referenced by str2 (also dereferencing a NULL str2 would be a violation).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1509.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_n_:\n```c\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (0 == c2)\n      return 0 == c1;\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <ctype.h>\n\n/* External helper used by the original logic (must exist elsewhere). */\nextern int charsequalcaseless (char a, char b);\n\n/* Probe/logging helper. Keeps the original function logic unchanged but\n   appends diagnostic information to /tmp/logs/1509.txt so callers can\n   reproduce and gather evidence of out-of-bounds access when it occurs.\n\n   The function is careful not to access the strings beyond the single\n   characters already read by the original routine (c1, c2). It logs:\n   - pointer values for str1, str2\n   - current index i and maxlen\n   - byte values of c1 and c2 in hex\n   - printable representation of c1 and c2 when appropriate\n   - a textual 'stage' describing the control point\n*/\nstatic void MHD_log_probe(const char *stage,\n                          const char *str1,\n                          const char *str2,\n                          size_t idx,\n                          char c1,\n                          char c2,\n                          size_t maxlen)\n{\n  FILE *f = fopen(\"/tmp/logs/1509.txt\", \"a\");\n  if (!f)\n  {\n    /* try to create directory and open again */\n    (void) mkdir(\"/tmp/logs\", 0755);\n    f = fopen(\"/tmp/logs/1509.txt\", \"a\");\n  }\n  if (!f)\n    return; /* give up on logging if we cannot open file */\n\n  /* Print a compact single-line record describing the state. */\n  fprintf(f, \"%s: str1=%p str2=%p idx=%zu maxlen=%zu c1=0x%02x\",\n          stage, (void *) str1, (void *) str2, idx, maxlen, (unsigned char) c1);\n  fprintf(f, \"(%c)\", isprint((unsigned char) c1) ? c1 : '.');\n  fprintf(f, \" c2=0x%02x\", (unsigned char) c2);\n  fprintf(f, \"(%c)\\n\", isprint((unsigned char) c2) ? c2 : '.');\n  fflush(f);\n  fclose(f);\n}\n\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n\n    /* Log right after the characters are read. This will capture the\n       index and the exact bytes that were accessed. If str2 is not\n       NUL-terminated within maxlen, the access to str2[i] (above) is\n       precisely the operation that can go out-of-bounds; this log\n       records the index and byte value observed at that moment. */\n    MHD_log_probe(\"after_read\", str1, str2, i, c1, c2, maxlen);\n\n    if (0 == c2)\n    {\n      MHD_log_probe(\"return_on_str2_nul\", str1, str2, i, c1, c2, maxlen);\n      return 0 == c1;\n    }\n    if (charsequalcaseless (c1, c2))\n    {\n      MHD_log_probe(\"chars_equal_continue\", str1, str2, i, c1, c2, maxlen);\n      continue;\n    }\n    else\n    {\n      MHD_log_probe(\"return_0_mismatch\", str1, str2, i, c1, c2, maxlen);\n      return 0;\n    }\n  }\n  MHD_log_probe(\"return_true_reached_maxlen\", str1, str2, maxlen, 0, 0, maxlen);\n  return ! 0;\n}\n"
}