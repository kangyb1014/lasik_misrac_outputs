{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe \"continue\" in the if branch is dead code: when charsequalcaseless(c1,c2) is true the continue statement is executed, but it is the last statement in the loop body so removing it yields identical behavior (control simply falls through to the loop end and the next iteration). Thus an operation that is executed but whose removal would not affect program behaviour exists in this code fragment, violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1502.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_caseless_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_n_:\n```c\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (0 == c2)\n      return 0 == c1;\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_caseless_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <sys/stat.h>\n\n/* Probe logger: append human-readable trace lines to /tmp/logs/1502.txt */\nstatic void mhd_log(const char *tag, size_t i, char c1, char c2, const char *info)\n{\n  /* Try to create the directory if it does not exist. Ignore errors. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  FILE * const f = fopen(\"/tmp/logs/1502.txt\", \"a\");\n  if (f != NULL)\n  {\n    const unsigned char uc1 = (unsigned char) c1;\n    const unsigned char uc2 = (unsigned char) c2;\n    const char p1 = (uc1 >= 32u && uc1 < 127u) ? (char) uc1 : '.';\n    const char p2 = (uc2 >= 32u && uc2 < 127u) ? (char) uc2 : '.';\n\n    (void) fprintf(f, \"%s: i=%zu c1=0x%02x(%c) c2=0x%02x(%c) %s\\n\",\n                   tag, i, (unsigned) uc1, p1, (unsigned) uc2, p2, info);\n    (void) fclose(f);\n  }\n}\n\n/* Assume external function is provided elsewhere in the project. */\nextern int charsequalcaseless(char, char);\n\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (0 == c2)\n    {\n      /* Log the point where str2 terminates and the value being returned. */\n      if (0 == c1)\n      {\n        mhd_log(\"return_at_null_c2\", i, c1, c2, \"return true\");\n      }\n      else\n      {\n        mhd_log(\"return_at_null_c2\", i, c1, c2, \"return false\");\n      }\n      return 0 == c1;\n    }\n    if (charsequalcaseless (c1, c2))\n    {\n      /* Log the equality case including the fact that the code does a continue. */\n      mhd_log(\"char_equal_caseless\", i, c1, c2, \"continue\");\n      continue;\n    }\n    else\n    {\n      mhd_log(\"return_mismatch\", i, c1, c2, \"return false\");\n      return 0;\n    }\n  }\n  mhd_log(\"loop_complete\", maxlen, 0, 0, \"return true\");\n  return ! 0;\n}\n"
}