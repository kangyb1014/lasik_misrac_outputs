{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code accesses pos->value (a pointer member of struct MHD_HTTP_Res_Header) only to read and pass it to an iterator; if that member is declared as a non-const pointer (e.g. char *value) then it should be const-qualified (const char *value) because the data is not modified here. Declaring it non-const in the struct therefore violates MISRA C 2023 Rule 8.13. Fix: change the struct member to point to a const-qualified type (const char *value) and update call-sites accordingly.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append a log entry about the current header and iterator state. */\nstatic void MHD_log_response_header_state(const struct MHD_HTTP_Res_Header *pos,\n                                          int header_index,\n                                          void *iterator_cls,\n                                          MHD_KeyValueIterator iterator,\n                                          const char *phase,\n                                          int iterator_ret)\n{\n    FILE *f = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    fprintf(f, \"[%s] header_index=%d, pos=%p\\n\", phase, header_index, (const void *)pos);\n\n    /* Log kind */\n    fprintf(f, \"  kind=%d\\n\", (pos != NULL) ? (int)pos->kind : -1);\n\n    /* Log header pointer and contents (guard against NULL) */\n    if ((pos != NULL) && (pos->header != NULL))\n        fprintf(f, \"  header_ptr=%p, header_str=%s\\n\", (const void *)pos->header, pos->header);\n    else\n        fprintf(f, \"  header_ptr=%p, header_str=(null)\\n\", (pos != NULL) ? (const void *)pos->header : NULL);\n\n    /* Log value pointer and contents (guard against NULL) */\n    if ((pos != NULL) && (pos->value != NULL))\n        fprintf(f, \"  value_ptr=%p, value_str=%s\\n\", (const void *)pos->value, pos->value);\n    else\n        fprintf(f, \"  value_ptr=%p, value_str=(null)\\n\", (pos != NULL) ? (const void *)pos->value : NULL);\n\n    /* Log iterator info */\n    fprintf(f, \"  iterator_ptr=%p\\n\", (const void *)iterator);\n    if (iterator != NULL)\n        fprintf(f, \"  iterator_ret=%d\\n\", iterator_ret);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n\n    /* Log state just before invoking the iterator */\n    MHD_log_response_header_state(pos, numHeaders, iterator_cls, iterator, \"BEFORE_ITER\", -1);\n\n    if (NULL != iterator)\n    {\n      int iter_ret = iterator (iterator_cls,\n                               pos->kind,\n                               pos->header,\n                               pos->value);\n\n      /* Log state after iterator call, including return value */\n      MHD_log_response_header_state(pos, numHeaders, iterator_cls, iterator, \"AFTER_ITER\", iter_ret);\n\n      if (MHD_NO == iter_ret)\n        break;\n    }\n  }\n  return numHeaders;\n}\n"
}