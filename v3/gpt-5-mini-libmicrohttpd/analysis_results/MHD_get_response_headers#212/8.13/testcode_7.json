{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'response' is declared as 'struct MHD_Response *response' but the function only reads from response (accesses response->first_header and traverses headers) and does not modify the object. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible. This should be changed to 'const struct MHD_Response *response' (and callers/related types adjusted as needed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append messages to /tmp/logs/2123.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Log entry and basic parameter state. Do not change control flow. */\n  mhd_probe_log(\"MHD_get_response_headers called: response=%p iterator=%s iterator_cls=%p\",\n                (void *)response,\n                (NULL != iterator) ? \"non-NULL\" : \"NULL\",\n                iterator_cls);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n\n    /* Log header state for each visited header. */\n    mhd_probe_log(\"Header #%d: pos=%p kind=%d header_ptr=%p value_ptr=%p header_text='%s' value_text='%s'\",\n                  numHeaders,\n                  (void *)pos,\n                  (int)pos->kind,\n                  (void *)pos->header,\n                  (void *)pos->value,\n                  (NULL != pos->header) ? pos->header : \"(null)\",\n                  (NULL != pos->value) ? pos->value : \"(null)\");\n\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n    {\n      mhd_probe_log(\"Iterator returned MHD_NO at header #%d; breaking out\", numHeaders);\n      break;\n    }\n  }\n\n  mhd_probe_log(\"MHD_get_response_headers returning numHeaders=%d\", numHeaders);\n  return numHeaders;\n}\n"
}