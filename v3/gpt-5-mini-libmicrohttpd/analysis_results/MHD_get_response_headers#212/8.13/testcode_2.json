{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameters are non-const pointers though they are used only for input. In the shown body 'response' is only read (response->first_header and its members are not modified) and 'iterator_cls' is passed through to the iterator but never modified. According to MISRA C 2023 Rule 8.13 these should be declared to point to const-qualified types (e.g. const struct MHD_Response *response and const void *iterator_cls). Also the iterator callback\u2019s parameter types should use const for header/value if they are not modified. Because these input-only pointers are not const-qualified, the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_headers code.\n",
  "test_code": "#include <stdio.h>\n\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Open log file for appending; best-effort logging, do not affect logic */\n  FILE *logf = fopen(\"/tmp/logs/2123.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"MHD_get_response_headers ENTRY: response=%p, iterator=%p, iterator_cls=%p\\n\",\n            (void *) response,\n            (void *) (uintptr_t) iterator,\n            iterator_cls);\n    fprintf(logf, \"  initial numHeaders=%d\\n\", numHeaders);\n    if (response != NULL)\n      fprintf(logf, \"  response->first_header=%p\\n\", (void *) response->first_header);\n    fflush(logf);\n  }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if (NULL != logf)\n    {\n      fprintf(logf, \"LOOP: iter=%d, pos=%p, kind=%d, header=%p, value=%p\\n\",\n              numHeaders,\n              (void *) pos,\n              (int) pos->kind,\n              (void *) pos->header,\n              (void *) pos->value);\n      fprintf(logf, \"  header=\");\n      if (pos->header)\n        fprintf(logf, \"%s\", pos->header);\n      else\n        fprintf(logf, \"(null)\");\n      fprintf(logf, \", value=\");\n      if (pos->value)\n        fprintf(logf, \"%s\", pos->value);\n      else\n        fprintf(logf, \"(null)\");\n      fprintf(logf, \"\\n\");\n      fflush(logf);\n    }\n\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n    {\n      if (NULL != logf)\n      {\n        fprintf(logf, \"  iterator returned MHD_NO at iter=%d, breaking loop\\n\", numHeaders);\n        fflush(logf);\n      }\n      break;\n    }\n    else if (NULL != logf && NULL != iterator)\n    {\n      /* If iterator exists and did not return MHD_NO, try to log that fact. */\n      fprintf(logf, \"  iterator called for iter=%d and did not return MHD_NO\\n\", numHeaders);\n      fflush(logf);\n    }\n  }\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"MHD_get_response_headers EXIT: final numHeaders=%d\\n\\n\", numHeaders);\n    fclose(logf);\n  }\n\n  return numHeaders;\n}\n"
}