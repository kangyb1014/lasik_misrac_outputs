{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct MHD_HTTP_Res_Header declares header as a non-const pointer (e.g. char *header) and it is used only for read-only access (passed to iterator but not modified), then this violates MISRA C 2023 Rule 8.13 because the pointer should be const-qualified (const char *header).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_headers code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append structured logs about control flow and header state\n * to /tmp/logs/2123.txt so other agents can reproduce the scenario. */\nstatic FILE *probe_open(void)\n{\n    FILE *f = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"\\n==== MHD_get_response_headers invocation ====%s\\n\", \"\");\n    }\n    return f;\n}\n\nstatic void probe_log_iteration(FILE *f,\n                                int index,\n                                struct MHD_HTTP_Res_Header *pos,\n                                int iterator_called,\n                                int iterator_result)\n{\n    if (NULL == f)\n        return;\n\n    fprintf(f, \"iteration=%d pos_ptr=%p\\n\", index, (const void *)pos);\n\n    /* Log header pointer address and string content if available. */\n    if (NULL != pos)\n    {\n        fprintf(f, \"  header_ptr=%p\\n\", (const void *)pos->header);\n        if (NULL != pos->header)\n        {\n            /* Print header as string for read-only observation. */\n            fprintf(f, \"  header_str=\\\"\");\n            /* Print up to reasonable length to avoid huge logs. */\n            {\n                const char *s = pos->header;\n                int i = 0;\n                for (; s && s[i] && i < 256; ++i)\n                    fputc((unsigned char)s[i], f);\n                if (s && s[i])\n                    fputs(\"...\", f);\n            }\n            fprintf(f, \"\\\"\\n\");\n        }\n        else\n        {\n            fprintf(f, \"  header_str=NULL\\n\");\n        }\n\n        fprintf(f, \"  value_ptr=%p\\n\", (const void *)pos->value);\n        if (NULL != pos->value)\n        {\n            fprintf(f, \"  value_str=\\\"\");\n            {\n                const char *s = pos->value;\n                int i = 0;\n                for (; s && s[i] && i < 256; ++i)\n                    fputc((unsigned char)s[i], f);\n                if (s && s[i])\n                    fputs(\"...\", f);\n            }\n            fprintf(f, \"\\\"\\n\");\n        }\n        else\n        {\n            fprintf(f, \"  value_str=NULL\\n\");\n        }\n    }\n\n    fprintf(f, \"  iterator_called=%d iterator_result=%d\\n\", iterator_called, iterator_result);\n}\n\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *probe = probe_open();\n  int iter_index = 0;\n\n  if (probe)\n  {\n      fprintf(probe, \"response_ptr=%p iterator_ptr=%p iterator_cls=%p\\n\",\n              (const void *)response, (const void *)iterator, iterator_cls);\n  }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    iter_index++;\n\n    if (NULL == iterator)\n    {\n      /* Log that iterator is not provided; preserve original behavior. */\n      probe_log_iteration(probe, iter_index, pos, 0, -1);\n    }\n    else\n    {\n      /* Call iterator once, capture its result for logging and decision. */\n      int it_res = iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value);\n\n      probe_log_iteration(probe, iter_index, pos, 1, it_res);\n\n      if (MHD_NO == it_res)\n        break;\n    }\n  }\n\n  if (probe)\n  {\n    fprintf(probe, \"returning numHeaders=%d\\n\", numHeaders);\n    fclose(probe);\n  }\n\n  return numHeaders;\n}\n"
}