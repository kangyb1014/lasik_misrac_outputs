{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes pos->header and pos->value to the iterator. If the callback type MHD_KeyValueIterator and/or the struct fields pos->header and pos->value are declared as plain char * (i.e. non-const), then the code violates MISRA C 2023 Rule 8.13 because pointers that are not intended to be modified should be const-qualified. Example violating declaration: typedef int (*MHD_KeyValueIterator)(void *, enum ..., char *, char *); struct MHD_HTTP_Res_Header { char *header; char *value; ... }; Remedy: change the callback signature and/or struct fields to use const char * (e.g. typedef int (*MHD_KeyValueIterator)(void *, enum ..., const char *, const char *); and struct MHD_HTTP_Res_Header { const char *header; const char *value; ... };).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append messages to /tmp/logs/2123.txt. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Log entry and initial state */\n  mhd_probe_log(\"MHD_get_response_headers entry: response=%p, iterator=%p, iterator_cls=%p\",\n                (void *)response, (void *)iterator, iterator_cls);\n  if (NULL != response)\n  {\n    mhd_probe_log(\"response->first_header=%p\", (void *)response->first_header);\n  }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n\n    /* Log current header node state */\n    mhd_probe_log(\"loop: pos=%p, pos->kind=%d, pos->header=%p, pos->value=%p, numHeaders=%d\",\n                  (void *)pos,\n                  (int)pos->kind,\n                  (void *)pos->header,\n                  (void *)pos->value,\n                  numHeaders);\n\n    /* If header/value strings are available, log their contents as well. */\n    mhd_probe_log(\"header_str=%s, value_str=%s\",\n                  (pos->header != NULL) ? pos->header : \"(null)\",\n                  (pos->value != NULL) ? pos->value : \"(null)\");\n\n    /* Log whether an iterator will be called */\n    mhd_probe_log(\"iterator %s\", (iterator != NULL) ? \"present\" : \"NULL\");\n\n    if (NULL != iterator)\n    {\n      int it_res = iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value);\n\n      mhd_probe_log(\"iterator called: result=%d\", it_res);\n\n      if (MHD_NO == it_res)\n        break;\n    }\n  }\n\n  mhd_probe_log(\"MHD_get_response_headers exit: numHeaders=%d\", numHeaders);\n  return numHeaders;\n}\n"
}