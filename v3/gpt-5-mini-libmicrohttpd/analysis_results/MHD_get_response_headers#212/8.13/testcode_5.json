{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *iterator_cls' is not const-qualified. If the iterator callback treats the context pointer as read-only (i.e. it only inspects data via iterator_cls and does not modify it), then the pointer should be declared as 'const void *iterator_cls'. In that common case the current declaration violates MISRA C 2023 Rule 8.13 because it fails to qualify the pointed-to type as const when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_headers as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_headers code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/2123.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (NULL == fp)\n    {\n        return; /* avoid changing behavior if logging fails */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Log entry into function and key initial state */\n  probe_log(\"MHD_get_response_headers: entry; response=%p, iterator=%p, iterator_cls=%p\",\n            (void *)response,\n            (void *)iterator,\n            (void *)iterator_cls);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    const char *hdr = (NULL != pos->header) ? pos->header : \"(null)\";\n    const char *val = (NULL != pos->value) ? pos->value : \"(null)\";\n\n    numHeaders++;\n\n    /* Log each header visited and the updated header count */\n    probe_log(\"MHD_get_response_headers: visiting header #%d; header=%s; value=%s; kind=%d; pos=%p\",\n              numHeaders,\n              hdr,\n              val,\n              pos->kind,\n              (void *)pos);\n\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n    {\n      /* Log that the iterator requested to stop and the iterator_cls pointer value */\n      probe_log(\"MHD_get_response_headers: iterator returned MHD_NO; stopping iteration; iterator_cls=%p\",\n                (void *)iterator_cls);\n      break;\n    }\n  }\n\n  /* Log exit and final header count */\n  probe_log(\"MHD_get_response_headers: exit; total_headers=%d\", numHeaders);\n\n  return numHeaders;\n}\n"
}