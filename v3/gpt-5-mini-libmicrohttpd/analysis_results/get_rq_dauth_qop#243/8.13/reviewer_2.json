{
  "user_message": "An agent A claimed that the following get_rq_dauth_qop code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_qop.\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf struct MHD_RqDAuthParam declares value.str as a non-const pointer (e.g. char *str), then the pointer is not pointing to a const-qualified type even though the function only reads it. In that case value.str should be declared const char * (or equivalent) and the current use (checking for NULL and passing to read-only functions) violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible (i.e. prefer const char * over char * for read-only data). In the snippet the function parameter is a pointer to a const struct (const struct MHD_RqDAuthParam * const qop_param), but that only prevents modifying the struct itself \u2014 it does not change the declared type of the member value.str. The rule applies to the declaration of the pointer type, which is in the struct definition, not to this function's use of it.\n\nThus agent A's claim is correct under the scenario they described: if the struct declares value.str as a non-const pointer (e.g. char *str) while it is only used for read-only operations, then that declaration violates Rule 8.13 and should be changed to point to a const-qualified type (for example const char *str). If, however, the struct already declares value.str as const char * (or if value.str must be modifiable elsewhere), there is no violation. In short: the reported violation is valid conditionally \u2014 it is correct if the struct member is non-const and is only read; otherwise not."
}