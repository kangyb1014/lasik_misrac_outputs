{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes qop_param->value.str (from a const struct pointer) to a string-comparison routine, but the member is likely declared as char * (non-const). Since the string data are only examined (not modified) here, the pointer should be declared as pointing to a const-qualified type (const char *) to conform with MISRA C 2023 Rule 8.13. As written, the use indicates a missing const on the pointee type (violation). Remediation: change the member declaration to const char *str (or otherwise ensure the pointee type is const when it is not modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_qop code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2433.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_qop as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_qop:\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_qop code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Prototypes for the external comparator functions used by the original code. */\nextern int MHD_str_equal_caseless_quoted_s_bin_n (const char *s, size_t len, const char *token);\nextern int MHD_str_equal_caseless_s_bin_n_ (const char *token, const char *s, size_t len);\n\n/* Logging probe: append a formatted message to /tmp/logs/2433.txt. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2433.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n/*\n * Modified get_rq_dauth_qop with probes. Original logic preserved; probes\n * capture the control path and key state values to /tmp/logs/2433.txt.\n */\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  /* Log entry and key fields (addresses and sizes). */\n  mhd_probe_log(\"ENTER get_rq_dauth_qop: qop_param=%p\", (const void *)qop_param);\n  if (qop_param != NULL)\n  {\n    mhd_probe_log(\"qop_param->value.str=%p, qop_param->value.len=%zu, qop_param->quoted=%d\",\n                  (const void *)qop_param->value.str,\n                  (size_t)qop_param->value.len,\n                  (int)qop_param->quoted);\n  }\n  else\n  {\n    mhd_probe_log(\"qop_param is NULL (note: original code did not check this before dereference)\");\n  }\n\n  if (NULL == qop_param->value.str)\n  {\n    mhd_probe_log(\"Branch: value.str is NULL -> returning MHD_DIGEST_AUTH_QOP_NONE\");\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  }\n\n  if (qop_param->quoted)\n  {\n    mhd_probe_log(\"Branch: quoted == true -> using quoted comparators\");\n\n    int eq;\n    mhd_probe_log(\"Calling MHD_str_equal_caseless_quoted_s_bin_n(str=%p, len=%zu, token=MHD_TOKEN_AUTH_)\",\n                  (const void *)qop_param->value.str, (size_t)qop_param->value.len);\n    eq = MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                                qop_param->value.len,\n                                                MHD_TOKEN_AUTH_);\n    mhd_probe_log(\"Result: MHD_str_equal_caseless_quoted_s_bin_n -> %d\", eq);\n    if (eq)\n    {\n      mhd_probe_log(\"Detected QOP: MHD_DIGEST_AUTH_QOP_AUTH -> returning\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    mhd_probe_log(\"Calling MHD_str_equal_caseless_quoted_s_bin_n(str=%p, len=%zu, token=MHD_TOKEN_AUTH_INT_)\",\n                  (const void *)qop_param->value.str, (size_t)qop_param->value.len);\n    eq = MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                                qop_param->value.len,\n                                                MHD_TOKEN_AUTH_INT_);\n    mhd_probe_log(\"Result: MHD_str_equal_caseless_quoted_s_bin_n (INT) -> %d\", eq);\n    if (eq)\n    {\n      mhd_probe_log(\"Detected QOP: MHD_DIGEST_AUTH_QOP_AUTH_INT -> returning\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  else\n  {\n    mhd_probe_log(\"Branch: quoted == false -> using non-quoted comparators\");\n\n    int eq;\n    mhd_probe_log(\"Calling MHD_str_equal_caseless_s_bin_n_(token=MHD_TOKEN_AUTH_, str=%p, len=%zu)\",\n                  (const void *)qop_param->value.str, (size_t)qop_param->value.len);\n    eq = MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_,\n                                          qop_param->value.str,\n                                          qop_param->value.len);\n    mhd_probe_log(\"Result: MHD_str_equal_caseless_s_bin_n_ -> %d\", eq);\n    if (eq)\n    {\n      mhd_probe_log(\"Detected QOP: MHD_DIGEST_AUTH_QOP_AUTH -> returning\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    mhd_probe_log(\"Calling MHD_str_equal_caseless_s_bin_n_(token=MHD_TOKEN_AUTH_INT_, str=%p, len=%zu)\",\n                  (const void *)qop_param->value.str, (size_t)qop_param->value.len);\n    eq = MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_,\n                                          qop_param->value.str,\n                                          qop_param->value.len);\n    mhd_probe_log(\"Result: MHD_str_equal_caseless_s_bin_n_ (INT) -> %d\", eq);\n    if (eq)\n    {\n      mhd_probe_log(\"Detected QOP: MHD_DIGEST_AUTH_QOP_AUTH_INT -> returning\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n\n  /* No know QOP has been detected */\n  mhd_probe_log(\"No known QOP detected -> returning MHD_DIGEST_AUTH_QOP_INVALID\");\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n"
}