{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes qop_param->value.len (a runtime/possibly untrusted length) together with MHD_TOKEN_AUTH_INT_ (a string literal) to a string-compare helper. If the helper ultimately uses a <string.h> function (e.g. memcmp/strncmp) with that length without first bounding it by the actual object sizes, then a read past the end of either operand can occur. Concretely: if qop_param->value.len > (sizeof(MHD_TOKEN_AUTH_INT_) - 1) or qop_param->value.str points to a shorter buffer than qop_param->value.len, the underlying memcmp/strncmp would access bytes beyond the token literal or beyond qop_param->value.str \u2014 violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_qop code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2439.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_qop as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_qop:\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_qop code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append diagnostic logs about control flow and state. */\nstatic void MHD_probe_log_qop(const void *qop_param_ptr,\n                              const void *value_str,\n                              size_t value_len,\n                              int quoted,\n                              const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/2439.txt\", \"a\");\n  if (!f)\n    return; /* Best-effort logging only; do not alter control flow. */\n\n  /* Log pointer/length/flags and compile-time token lengths. */\n  fprintf(f, \"[MHD_PROBE] stage=%s\\n\", stage);\n  fprintf(f, \"  qop_param=%p\\n\", qop_param_ptr);\n  fprintf(f, \"  value.str=%p\\n\", value_str);\n  fprintf(f, \"  value.len=%zu\\n\", (size_t)value_len);\n  fprintf(f, \"  quoted=%d\\n\", quoted);\n  /* sizeof on token literals is compile-time safe */\n  fprintf(f, \"  token_auth_len=%zu\\n\", (size_t)(sizeof(MHD_TOKEN_AUTH_) - 1));\n  fprintf(f, \"  token_auth_int_len=%zu\\n\", (size_t)(sizeof(MHD_TOKEN_AUTH_INT_) - 1));\n  fprintf(f, \"\\n\");\n\n  fclose(f);\n}\n\nstatic void MHD_probe_log_return(const void *qop_param_ptr,\n                                 const void *value_str,\n                                 size_t value_len,\n                                 int quoted,\n                                 const char *retstr)\n{\n  FILE *f = fopen(\"/tmp/logs/2439.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"[MHD_PROBE_RETURN] return=%s\\n\", retstr);\n  fprintf(f, \"  qop_param=%p, value.str=%p, value.len=%zu, quoted=%d\\n\\n\",\n          qop_param_ptr, value_str, (size_t)value_len, quoted);\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  /* Probe at function entry. */\n  MHD_probe_log_qop(qop_param, qop_param ? qop_param->value.str : NULL,\n                    qop_param ? (size_t)qop_param->value.len : 0,\n                    qop_param ? (int)qop_param->quoted : 0,\n                    \"entry\");\n\n  if (NULL == qop_param->value.str)\n  {\n    MHD_probe_log_return(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                         (int)qop_param->quoted, \"MHD_DIGEST_AUTH_QOP_NONE\");\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  }\n  if (qop_param->quoted)\n  {\n    /* Log intent to compare against MHD_TOKEN_AUTH_. */\n    MHD_probe_log_qop(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                      (int)qop_param->quoted, \"compare_quoted_auth\");\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                               qop_param->value.len,\n                                               MHD_TOKEN_AUTH_))\n    {\n      MHD_probe_log_return(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                           (int)qop_param->quoted, \"MHD_DIGEST_AUTH_QOP_AUTH\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    /* Log intent to compare against MHD_TOKEN_AUTH_INT_. */\n    MHD_probe_log_qop(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                      (int)qop_param->quoted, \"compare_quoted_auth_int\");\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                               qop_param->value.len,\n                                               MHD_TOKEN_AUTH_INT_))\n    {\n      MHD_probe_log_return(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                           (int)qop_param->quoted, \"MHD_DIGEST_AUTH_QOP_AUTH_INT\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  else\n  {\n    /* Non-quoted comparisons: log and perform as before. */\n    MHD_probe_log_qop(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                      (int)qop_param->quoted, \"compare_unquoted_auth\");\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_,\n                                         qop_param->value.str,\n                                         qop_param->value.len))\n    {\n      MHD_probe_log_return(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                           (int)qop_param->quoted, \"MHD_DIGEST_AUTH_QOP_AUTH\");\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    MHD_probe_log_qop(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                      (int)qop_param->quoted, \"compare_unquoted_auth_int\");\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_,\n                                         qop_param->value.str,\n                                         qop_param->value.len))\n    {\n      MHD_probe_log_return(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                           (int)qop_param->quoted, \"MHD_DIGEST_AUTH_QOP_AUTH_INT\");\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  /* No know QOP has been detected */\n  MHD_probe_log_return(qop_param, qop_param->value.str, (size_t)qop_param->value.len,\n                       (int)qop_param->quoted, \"MHD_DIGEST_AUTH_QOP_INVALID\");\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n"
}