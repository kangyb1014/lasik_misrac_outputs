{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call mhd_assert(sizeof(uint64_t) == SIZEOF_UINT64_T); performs a runtime check of two values that are effectively compile-time constants. If mhd_assert expands to code that evaluates this expression at runtime (and only aborts on failure), that evaluation will always succeed on a correctly configured build and therefore is an executed operation whose removal would not change program behaviour \u2014 this meets the definition of dead code in MISRA C 2023 Rule 2.2. To avoid the violation, use a compile-time assertion (e.g. _Static_assert) or remove/guard the runtime check so it is not executed in builds where it has no effect.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/812.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_init:\n```c\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n}\n```\n</target_code>\nPlease provide the modified MHD_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <time.h>\n#include <sys/time.h>\n\n/* Probe logging helpers. These are non-invasive and only append to the\n   log file so other agents can inspect the control path and state. */\nstatic void\nmhd_log_append (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/812.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time (NULL);\n  struct tm tm_buf;\n#if defined(_WIN32) || defined(_WIN64)\n  localtime_s (&tm_buf, &t);\n#else\n  localtime_r (&t, &tm_buf);\n#endif\n  fprintf (f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n           tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n           tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nmhd_log_assert_state_sizeof_uint64 (void)\n{\n  /* Log the two sizes involved in the assertion so agent can observe\n     that both are constant and that the comparison will always be true\n     on a correctly configured build. */\n  mhd_log_append (\"MHD_init: probing sizeof(uint64_t) vs SIZEOF_UINT64_T -> sizeof(uint64_t)=%zu, SIZEOF_UINT64_T=%lld, comparison=%s\",\n                   (size_t) sizeof (uint64_t), (long long) SIZEOF_UINT64_T,\n                   (sizeof (uint64_t) == SIZEOF_UINT64_T) ? \"equal\" : \"different\");\n}\n\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  mhd_log_append (\"MHD_init: entered\");\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  mhd_log_append (\"MHD_init: MHD_WINSOCK_SOCKETS defined - attempting WSAStartup\");\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  mhd_log_append (\"MHD_init: WSAStartup succeeded, wsd.wVersion = 0x%04x\", (unsigned) wsd.wVersion);\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_log_append (\"MHD_init: _DEBUG build - probing timeval.tv_sec size\");\n    mhd_log_append (\"MHD_init: sizeof(tv.tv_sec)=%zu, expected SIZEOF_STRUCT_TIMEVAL_TV_SEC=%lld\",\n                    (size_t) sizeof (tv.tv_sec), (long long) SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n    mhd_log_append (\"MHD_init: timeval.tv_sec size assertion passed\");\n  }\n#endif /* _DEBUG */\n\n  /* Probe and log the exact values used in the assertion that the other\n     agent reported as a potential dead-code scenario. This records both\n     operands and the result of the comparison to \"/tmp/logs/812.txt\" so\n     the behavior can be reproduced and inspected. */\n  mhd_log_assert_state_sizeof_uint64 ();\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n  mhd_log_append (\"MHD_init: sizeof(uint64_t) assertion executed\");\n}\n"
}