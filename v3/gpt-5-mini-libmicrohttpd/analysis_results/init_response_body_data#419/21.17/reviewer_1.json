{
  "user_message": "An agent A claimed that the following init_response_body_data code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of init_response_body_data.\n```c\nstatic int\ninit_response_body_data (void)\n{\n  if (0 != body_dyn_size)\n  {\n    body_dyn = (char *) malloc (body_dyn_size);\n    if (NULL == body_dyn)\n    {\n      fprintf (stderr, \"Failed to allocate memory.\\n\");\n      return 0;\n    }\n    if (tool_params.medium)\n    {\n      /* Fill the body with HTML-like content */\n      size_t pos;\n      size_t filler_pos;\n      static const char body_header[] =\n        \"<html>\\n\"\n        \"<head>\\n<title>Sample page title</title>\\n<head>\\n\"\n        \"<body>\\n\";\n      static const char body_filler[] =\n        \"The quick brown fox jumps over the lazy dog.<br>\\n\";\n      static const char body_footer[] =\n        \"</body>\\n\"\n        \"</html>\\n\";\n      pos = 0;\n      memcpy (body_dyn + pos, body_header, MHD_STATICSTR_LEN_ (body_header));\n      pos += MHD_STATICSTR_LEN_ (body_header);\n      for (filler_pos = 0;\n           filler_pos < (body_dyn_size - (MHD_STATICSTR_LEN_ (body_header)\n                                          + MHD_STATICSTR_LEN_ (body_footer)));\n           ++filler_pos)\n      {\n        body_dyn[pos + filler_pos] =\n          body_filler[filler_pos % MHD_STATICSTR_LEN_ (body_filler)];\n      }\n      pos += filler_pos;\n      memcpy (body_dyn + pos, body_footer, MHD_STATICSTR_LEN_ (body_footer));\n    }\n    else\n    {\n      /* Fill the body with binary-like content */\n      size_t pos;\n      for (pos = 0; pos < body_dyn_size; ++pos)\n      {\n        body_dyn[pos] = (char) (unsigned char) (255U - pos % 256U);\n      }\n    }\n  }\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf body_dyn_size is smaller than the combined lengths of body_header and body_footer the subtraction in the loop bound (size_t) underflows and becomes a very large value. For example, if len(header)=50, len(footer)=20 and body_dyn_size=30 then body_dyn_size - (len(header)+len(footer)) wraps to a large size_t, the loop will iterate far beyond the allocated buffer and body_dyn[pos + filler_pos] will write out of bounds (and later memcpy(body_dyn + pos, body_footer, len_footer) will also write beyond the allocation). Because the loop bound can underflow and permit out-of-bounds writes, Rule 21.17 is violated.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code performs unchecked unsigned arithmetic and unguarded memcpy/writes so under small body_dyn_size values the operations can access beyond the allocated buffer.\n\nConcretely: pos is set to 0 and the code calls memcpy(body_dyn + pos, body_header, MHD_STATICSTR_LEN_(body_header)) without verifying that body_dyn_size >= header_len. If body_dyn_size < header_len that memcpy already writes out of bounds. Even if header fits, the for-loop bound uses (body_dyn_size - (header_len + footer_len)) where body_dyn_size is size_t. If body_dyn_size < header_len + footer_len that subtraction underflows to a very large size_t, so the loop iterates far beyond the allocation and writes to body_dyn[pos + filler_pos] out of bounds. Finally memcpy(..., body_footer, footer_len) will also overflow when pos is not within valid range. All of these are precisely the kinds of out\u2011of\u2011bounds accesses that MISRA C 2023 Rule 21.17 forbids for functions from <string.h> (memcpy here) \u2014 so the reported violation is justified."
}