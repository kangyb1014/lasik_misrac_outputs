{
  "user_message": "An agent A claimed that the following init_response_body_data code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of init_response_body_data.\n```c\nstatic int\ninit_response_body_data (void)\n{\n  if (0 != body_dyn_size)\n  {\n    body_dyn = (char *) malloc (body_dyn_size);\n    if (NULL == body_dyn)\n    {\n      fprintf (stderr, \"Failed to allocate memory.\\n\");\n      return 0;\n    }\n    if (tool_params.medium)\n    {\n      /* Fill the body with HTML-like content */\n      size_t pos;\n      size_t filler_pos;\n      static const char body_header[] =\n        \"<html>\\n\"\n        \"<head>\\n<title>Sample page title</title>\\n<head>\\n\"\n        \"<body>\\n\";\n      static const char body_filler[] =\n        \"The quick brown fox jumps over the lazy dog.<br>\\n\";\n      static const char body_footer[] =\n        \"</body>\\n\"\n        \"</html>\\n\";\n      pos = 0;\n      memcpy (body_dyn + pos, body_header, MHD_STATICSTR_LEN_ (body_header));\n      pos += MHD_STATICSTR_LEN_ (body_header);\n      for (filler_pos = 0;\n           filler_pos < (body_dyn_size - (MHD_STATICSTR_LEN_ (body_header)\n                                          + MHD_STATICSTR_LEN_ (body_footer)));\n           ++filler_pos)\n      {\n        body_dyn[pos + filler_pos] =\n          body_filler[filler_pos % MHD_STATICSTR_LEN_ (body_filler)];\n      }\n      pos += filler_pos;\n      memcpy (body_dyn + pos, body_footer, MHD_STATICSTR_LEN_ (body_footer));\n    }\n    else\n    {\n      /* Fill the body with binary-like content */\n      size_t pos;\n      for (pos = 0; pos < body_dyn_size; ++pos)\n      {\n        body_dyn[pos] = (char) (unsigned char) (255U - pos % 256U);\n      }\n    }\n  }\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. If body_dyn_size is smaller than the sum of the header and footer lengths, the expression used as the loop bound (body_dyn_size - (MHD_STATICSTR_LEN_(body_header) + MHD_STATICSTR_LEN_(body_footer))) will underflow (size_t), causing the filler loop to iterate far more times than intended. After the loop pos is incremented by filler_pos (pos += filler_pos) and later used as the destination for memcpy(body_dyn + pos, body_footer, MHD_STATICSTR_LEN_(body_footer)). In that underflow case memcpy will write beyond the allocated body_dyn buffer, violating MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code never checks that body_dyn_size is large enough to contain the header and footer; only that it is non-zero. The expression\n\n  body_dyn_size - (MHD_STATICSTR_LEN_(body_header) + MHD_STATICSTR_LEN_(body_footer))\n\nis evaluated in size_t. If body_dyn_size < (header_len + footer_len) the subtraction underflows to a very large size_t value, so the filler loop will iterate far more times than intended and write past the allocated body_dyn buffer. Even earlier, the initial memcpy of the header can already overflow if body_dyn_size < header_len. These out-of-bounds writes involve memcpy (and direct writes) and therefore violate MISRA C 2023 Rule 21.17. A correct fix is to validate sizes before copying (e.g. ensure body_dyn_size >= header_len + footer_len, or compute the filler count with a guarded subtraction) so no string/memory function is ever asked to write beyond the allocated object."
}