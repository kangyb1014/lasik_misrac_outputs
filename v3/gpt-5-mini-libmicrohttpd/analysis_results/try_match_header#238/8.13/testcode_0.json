{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local parameter 'line' is declared as 'char *line' but is only read (not modified) in try_match_header and is passed to MHD_str_equal_caseless_n_. The pointer\u2019s pointee should be const-qualified (const char *line) whenever possible. Declaring it as non-const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_match_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_match_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified try_match_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Helper probe function to log control flow and state. */\nstatic void\nlog_probe(const char *event,\n          const char *prefix,\n          size_t prefix_len,\n          const char *line,\n          char **suffix,\n          size_t index,\n          int matched)\n{\n  FILE *f = fopen(\"/tmp/logs/2383.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* If logging fails, do not alter program behavior. */\n    return;\n  }\n\n  fprintf(f, \"EVENT=%s\\n\", event);\n  fprintf(f, \"  prefix=%p\\n\", (const void *)prefix);\n  if (prefix != NULL)\n  {\n    /* Print up to 128 chars of prefix for context. */\n    char bufp[129] = { '\\0' };\n    strncpy(bufp, prefix, sizeof(bufp) - 1);\n    fprintf(f, \"  prefix_str=\\\"%s\\\"\\n\", bufp);\n  }\n  fprintf(f, \"  prefix_len=%zu\\n\", prefix_len);\n  fprintf(f, \"  line_ptr=%p\\n\", (const void *)line);\n  if (line != NULL)\n  {\n    /* Print up to 128 chars of line for context. */\n    char bufl[129] = { '\\0' };\n    strncpy(bufl, line, sizeof(bufl) - 1);\n    fprintf(f, \"  line_str=\\\"%s\\\"\\n\", bufl);\n  }\n  fprintf(f, \"  suffix_ptr=%p\\n\", (void *)suffix);\n  if (suffix != NULL)\n  {\n    fprintf(f, \"  *suffix=%p\\n\", (void *)(*suffix));\n  }\n  fprintf(f, \"  index=%zu\\n\", index);\n  fprintf(f, \"  matched=%d\\n\", matched);\n  fprintf(f, \"----\\n\");\n\n  fclose(f);\n}\n\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  /* Log entry with initial state. */\n  log_probe(\"entry\", prefix, prefix_len, (const char *)line, suffix, 0U, -1);\n\n  if (NULL != *suffix)\n  {\n    log_probe(\"early_return_suffix_not_null\", prefix, prefix_len, (const char *)line, suffix, 0U, -1);\n    return MHD_NO;\n  }\n\n  size_t idx = 0U;\n  while (0 != *line)\n  {\n    /* Evaluate match once and record the result for logging. */\n    int matched = MHD_str_equal_caseless_n_ (prefix,\n                                            line,\n                                            prefix_len);\n\n    /* Log comparison outcome for this position. */\n    log_probe(\"compare\", prefix, prefix_len, (const char *)line, suffix, idx, matched);\n\n    if (matched)\n    {\n      *suffix = strdup (&line[prefix_len]);\n\n      /* Log the assignment of suffix (pointer and contents). */\n      log_probe(\"matched_and_assigned_suffix\", prefix, prefix_len, (const char *)line, suffix, idx, matched);\n\n      return MHD_YES;\n    }\n\n    ++line;\n    ++idx;\n  }\n\n  /* No match found; log exit state. */\n  log_probe(\"no_match\", prefix, prefix_len, (const char *)line, suffix, idx, 0);\n  return MHD_NO;\n}\n"
}