{
  "user_message": "An agent A claimed that the following try_match_header code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of try_match_header.\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'line' is declared as 'char *line' but the function does not modify the characters it points to (it only reads them and advances the pointer). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible \u2014 'line' should be 'const char *line'. The 'suffix' parameter is acceptable as 'char **' because the function stores a newly allocated (modifiable) char * into *suffix.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[ENTER] prefix_len=14 prefix='Content-type: ' prefix_ptr=0x7f5cdb44dec1 start=0x56117f4348c0 cur=0x56117f4348c0 idx=0 cur_ch=67 *suffix=(nil) note=entry\n[ITER] prefix_len=14 prefix='Content-type: ' prefix_ptr=0x7f5cdb44dec1 start=0x56117f4348c0 cur=0x56117f4348c0 idx=0 cur_ch=67 *suffix=(nil) note=loop iteration\n[MATCH] suffix_ptr=0x56117f434ef0 suffix_contents='text/plain'\n[ENTER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c0 idx=0 cur_ch=67 *suffix=(nil) note=entry\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c0 idx=0 cur_ch=67 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c1 idx=1 cur_ch=111 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c2 idx=2 cur_ch=110 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c3 idx=3 cur_ch=116 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c4 idx=4 cur_ch=101 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c5 idx=5 cur_ch=110 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c6 idx=6 cur_ch=116 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c7 idx=7 cur_ch=45 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c8 idx=8 cur_ch=84 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348c9 idx=9 cur_ch=121 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348ca idx=10 cur_ch=112 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348cb idx=11 cur_ch=101 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348cc idx=12 cur_ch=58 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348cd idx=13 cur_ch=32 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348ce idx=14 cur_ch=116 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348cf idx=15 cur_ch=101 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348d0 idx=16 cur_ch=120 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348d1 idx=17 cur_ch=116 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348d2 idx=18 cur_ch=47 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Encoding: ' prefix_ptr=0x7f5cdb44ded0 start=0x56117f4348c0 cur=0x56117f4348d3 idx=19 cur_ch=112 *suffix=(nil) note=loop iteration\n[ITER] prefix_len=27 prefix='Content-Transfer-Enc\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function never modifies the characters addressed by the parameter line \u2014 it only reads them (and advances the pointer itself). MISRA C 2023 Rule 8.13 recommends that a pointer should point to a const-qualified type whenever possible, so line should be declared as const char *line. Changing to const char * is compatible with the call to strdup (which accepts a const char *), and callers passing a char * may still be used (implicit conversion to const is allowed). The suffix parameter must remain char ** because the function stores a newly allocated (modifiable) char * into *suffix. Suggested fix: change the function prototype and definition to use const char *line."
}