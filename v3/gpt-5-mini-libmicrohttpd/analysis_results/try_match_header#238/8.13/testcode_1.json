{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'line' is declared as 'char *line' but is only read from (while (0 != *line), passed to MHD_str_equal_caseless_n_ and used as input to strdup). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. In this code 'line' can and should be declared as 'const char *line' (and usages such as &line[prefix_len] remain valid). Change the function signature to use 'const char *line' to comply with the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_match_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_match_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified try_match_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal external declaration to allow compilation in test context. */\nextern int MHD_str_equal_caseless_n_(const char *a, const char *b, size_t n);\n\n/* Provide boolean-like values for standalone testing. These are static\n   to avoid introducing external symbols that might clash. */\nstatic const int MHD_YES = 1;\nstatic const int MHD_NO  = 0;\n\n/* Probe / logging helper. Appends human-readable events to the log file\n   so other agents can reproduce and gather evidence for the described\n   violation scenario. */\nstatic void\nlog_try_match_event (const char *event,\n                      const char *prefix,\n                      size_t prefix_len,\n                      const char *line,\n                      size_t pos,\n                      const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/2383.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* Best-effort: if logging cannot open the file, avoid failing the\n       caller. */\n    return;\n  }\n\n  /* Log a compact record containing the control event, prefix, prefix\n     length, the current position in the line, a one-character snapshot\n     at that position (if available) and an ASCII view of the remainder\n     of the line for context. */\n  fprintf(f, \"event=%s prefix_len=%zu pos=%zu note=%s\\n\",\n          event, prefix_len, pos, (note != NULL) ? note : \"(null)\");\n\n  if (prefix != NULL)\n  {\n    fprintf(f, \"prefix=\\\"\");\n    /* Print prefix up to prefix_len or until NUL to avoid reading past memory. */\n    size_t i;\n    for (i = 0U; i < prefix_len && prefix[i] != '\\0'; ++i)\n    {\n      int c = (unsigned char) prefix[i];\n      /* Print printable characters directly, escape others. */\n      if (c >= 32 && c < 127)\n        fputc((char)c, f);\n      else\n        fprintf(f, \"\\\\x%02x\", c);\n    }\n    fprintf(f, \"\\\"\\n\");\n  }\n\n  if (line != NULL)\n  {\n    const char *rest = &line[pos];\n    /* Log a short preview of the rest of the line for context. */\n    fprintf(f, \"line_rest=\\\"\");\n    size_t j = 0U;\n    while (j < 128U && rest[j] != '\\0')\n    {\n      int c = (unsigned char) rest[j];\n      if (c >= 32 && c < 127)\n        fputc((char)c, f);\n      else\n        fprintf(f, \"\\\\x%02x\", c);\n      ++j;\n    }\n    if (rest[j] != '\\0')\n      fprintf(f, \"...\\\"\");\n    else\n      fprintf(f, \"\\\"\");\n    fprintf(f, \"\\n\");\n  }\n\n  fflush(f);\n  fclose(f);\n}\n\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  /* Log entry and initial argument state. */\n  log_try_match_event(\"entry\", prefix, prefix_len, (const char *)line, 0U, \"start\");\n\n  if (NULL != *suffix)\n  {\n    /* Record the early exit caused by a non-NULL suffix. */\n    log_try_match_event(\"exit_suffix_not_null\", prefix, prefix_len, (const char *)line, 0U, \"suffix already set\");\n    return MHD_NO;\n  }\n\n  /* Use a local pointer so we can log the offset without modifying the\n     caller's pointer variable; behavior is equivalent to advancing the\n     'line' pointer as in the original implementation. */\n  const char *p = (const char *) line;\n  size_t pos = 0U;\n\n  while (0 != *p)\n  {\n    /* Log each iteration with the current position and a small context. */\n    log_try_match_event(\"iter\", prefix, prefix_len, (const char *)line, pos, \"checking\");\n\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   p,\n                                   prefix_len))\n    {\n      /* Record the match and what will be passed to strdup(). */\n      log_try_match_event(\"match_found\", prefix, prefix_len, (const char *)line, pos, \"about to strdup suffix\");\n\n      /* Preserve original behavior: duplicate the remainder starting at\n         the matched suffix location. The call uses &p[prefix_len], which\n         is equivalent to &line[pos + prefix_len]. */\n      *suffix = strdup (&p[prefix_len]);\n\n      if (*suffix == NULL)\n      {\n        log_try_match_event(\"strdup_failed\", prefix, prefix_len, (const char *)line, pos, \"strdup returned NULL\");\n      }\n      else\n      {\n        log_try_match_event(\"strdup_ok\", prefix, prefix_len, (const char *)line, pos, *suffix);\n      }\n\n      return MHD_YES;\n    }\n\n    ++p;\n    ++pos;\n  }\n\n  /* No match found after scanning the entire line. */\n  log_try_match_event(\"no_match\", prefix, prefix_len, (const char *)line, pos, \"exhausted line\");\n  return MHD_NO;\n}\n"
}