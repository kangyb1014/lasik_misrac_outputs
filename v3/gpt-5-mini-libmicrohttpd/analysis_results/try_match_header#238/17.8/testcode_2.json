{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'line' (char *line) is incremented in the function body via '++line' in the while loop, which modifies the pointer parameter itself rather than the object it points to.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_match_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2387.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_match_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified try_match_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n\nstatic void\nappend_log(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/2387.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  append_log(\"try_match_header: entry prefix=\\\"%s\\\" prefix_len=%zu line=%p \\\"%s\\\" suffix=%p\\n\",\n             prefix ? prefix : \"(null)\",\n             prefix_len,\n             (void *) line,\n             line ? line : \"(null)\",\n             (void *) suffix);\n\n  if (NULL != *suffix)\n  {\n    append_log(\"try_match_header: early return MHD_NO because *suffix != NULL (%p)\\n\",\n               (void *) *suffix);\n    return MHD_NO;\n  }\n\n  int iter = 0;\n  while (0 != *line)\n  {\n    /* Log current pointer and character */\n    append_log(\"iter=%d: line=%p char=''%c'' (0x%02x)\\n\",\n               iter,\n               (void *) line,\n               (*line != 0) ? *line : '?',\n               (unsigned char) *line);\n\n    /* Call the original comparison (capture result for logging) */\n    int equal = MHD_str_equal_caseless_n_ (prefix,\n                                          line,\n                                          prefix_len);\n    append_log(\"iter=%d: MHD_str_equal_caseless_n_ returned %d\\n\",\n               iter,\n               equal);\n\n    if (equal)\n    {\n      append_log(\"iter=%d: match -> setting *suffix = strdup(&line[%zu]) (addr=%p \\\"%s\\\")\\n\",\n                 iter,\n                 prefix_len,\n                 (void *) &line[prefix_len],\n                 &line[prefix_len]);\n\n      *suffix = strdup (&line[prefix_len]);\n\n      append_log(\"iter=%d: *suffix now %p \\\"%s\\\"\\n\",\n                 iter,\n                 (void *) *suffix,\n                 *suffix ? *suffix : \"(null)\");\n\n      append_log(\"try_match_header: returning MHD_YES\\n\");\n      return MHD_YES;\n    }\n\n    append_log(\"iter=%d: no match, will increment parameter 'line' (this modifies the parameter)\\n\",\n               iter);\n\n    /* The original code increments the parameter; keep this to reproduce the violation scenario */\n    ++line;\n    iter++;\n  }\n\n  append_log(\"try_match_header: end of line reached, returning MHD_NO\\n\");\n  return MHD_NO;\n}\n"
}