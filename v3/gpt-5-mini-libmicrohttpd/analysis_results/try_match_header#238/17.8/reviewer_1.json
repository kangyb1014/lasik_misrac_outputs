{
  "user_message": "An agent A claimed that the following try_match_header code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of try_match_header.\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement '++line;' modifies the pointer parameter 'line' (it changes the pointer value to point to the next character). MISRA C 2023 Rule 17.8 disallows modifying a pointer parameter itself (the pointed-to object may be modified, but not the pointer). This is a direct violation. Recommended fix: iterate using a local copy, e.g. 'char *p = line;' and use '++p;' (or make the parameter 'const char *line' and use a local pointer), so the function parameter is not modified.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 forbids modifying function parameters; while the object pointed to by a pointer parameter may be modified, the pointer itself shall not. In try_match_header the statement '++line;' modifies the pointer parameter 'line' (it changes the pointer value to point to the next character), which violates Rule 17.8. A suitable fix is to iterate with a local copy, e.g. 'char *p = line;' and use '++p;' (or change the parameter to 'const char *line' and use a local pointer), so the parameter itself is not modified."
}