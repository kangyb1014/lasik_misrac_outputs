{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '++line;' modifies the pointer parameter 'line' (it changes the pointer value to point to the next character). MISRA C 2023 Rule 17.8 disallows modifying a pointer parameter itself (the pointed-to object may be modified, but not the pointer). This is a direct violation. Recommended fix: iterate using a local copy, e.g. 'char *p = line;' and use '++p;' (or make the parameter 'const char *line' and use a local pointer), so the function parameter is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_match_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2387.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_match_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified try_match_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdarg.h>\n\n/* Minimal local definitions so this unit compiles standalone for testing */\nstatic const int MHD_NO = 0;\nstatic const int MHD_YES = 1;\n\nstatic int\nMHD_str_equal_caseless_n_ (const char *a, const char *b, size_t n)\n{\n  size_t i;\n\n  if ((a == NULL) || (b == NULL))\n    return 0;\n  for (i = 0U; i < n; ++i)\n  {\n    unsigned char ca = (unsigned char) a[i];\n    unsigned char cb = (unsigned char) b[i];\n    if (tolower (ca) != tolower (cb))\n      return 0;\n  }\n  return 1;\n}\n\nstatic void\nlog_msg (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2387.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fclose (f);\n}\n\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  /* Log entry state */\n  log_msg(\"ENTRY try_match_header: prefix=%p prefix_len=%zu line=%p line_str=\\\"%s\\\" suffix_ptr=%p *suffix=%p\\n\",\n           (void *) prefix,\n           prefix_len,\n           (void *) line,\n           (line != NULL) ? line : \"(null)\",\n           (void *) suffix,\n           (void *) ((suffix != NULL) ? *suffix : NULL));\n\n  if (NULL != *suffix)\n  {\n    log_msg(\"EARLY RETURN: *suffix already non-NULL (%p) -> MHD_NO\\n\",\n             (void *) *suffix);\n    return MHD_NO;\n  }\n  while (0 != *line)\n  {\n    log_msg(\"LOOP ITER: line_ptr=%p char='%'c' (0x%02x)\\n\",\n             (void *) line,\n             *line,\n             (unsigned int) (unsigned char) *line);\n\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      log_msg(\"MATCH at line_ptr=%p -> duplicating suffix from &line[%zu] (addr=%p)\\n\",\n               (void *) line,\n               prefix_len,\n               (void *) &line[prefix_len]);\n\n      *suffix = strdup (&line[prefix_len]);\n\n      log_msg(\"ASSIGNED: *suffix=%p value=\\\"%s\\\" -> returning MHD_YES\\n\",\n               (void *) *suffix,\n               (*suffix != NULL) ? *suffix : \"(null)\");\n      return MHD_YES;\n    }\n\n    log_msg(\"ABOUT TO MODIFY POINTER PARAM: incrementing 'line' from %p to %p\\n\",\n             (void *) line,\n             (void *) (line + 1));\n\n    ++line; /* This is the statement reported as violating MISRA C 2023 Rule 17.8 */\n  }\n\n  log_msg(\"NO MATCH: reached end of line -> returning MHD_NO\\n\");\n  return MHD_NO;\n}\n"
}