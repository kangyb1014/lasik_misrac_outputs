{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code fragment passes pos->header to a string-comparison function but treats the header only as read-only. If the member is declared as a non-const pointer (e.g. 'char *header' in struct MHD_HTTP_Res_Header) then Rule 8.13 is violated because the pointer should be declared to point to a const-qualified type (e.g. 'const char *header'). Also the comparison function should accept const char * parameters. If pos->header is already declared const, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_header:\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/*\n * Probe logging helpers. These are intentionally lightweight and only\n * used to record control flow and key state relevant to the reported\n * Rule 8.13 scenario. Logs are appended to /tmp/logs/2113.txt so\n * multiple calls can be examined.\n */\nstatic void\nmhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2113.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/*\n * The original function with probes inserted. The logic is preserved\n * exactly; probes only read state for logging and do not modify any\n * program state or control flow.\n */\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  mhd_probe_log(\"MHD_get_response_header: entry response=%p key=%p\", (void *)response, (const void *)key);\n\n  if (NULL == key) {\n    mhd_probe_log(\"MHD_get_response_header: key is NULL -> returning NULL\");\n    return NULL;\n  }\n\n  key_size = strlen (key);\n  mhd_probe_log(\"MHD_get_response_header: key=\\\"%s\\\" key_size=%zu\", key, key_size);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log the current header node state before comparison. Access is\n     * read-only and mirrors what the function already does. This gives\n     * evidence about whether `pos->header` appears to be used only as\n     * read-only data at runtime (helpful for investigating the Rule\n     * 8.13 report). */\n    mhd_probe_log(\"iter: pos=%p header=%p header_size=%zu value=%p\",\n                  (void *)pos,\n                  (const void *)pos->header,\n                  (size_t)pos->header_size,\n                  (void *)pos->value);\n\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n    {\n      /* Log the successful match and the value being returned. */\n      mhd_probe_log(\"match: pos=%p header=\\\"%s\\\" header_size=%zu -> returning value=%p\",\n                    (void *)pos,\n                    (pos->header != NULL) ? pos->header : \"(null)\",\n                    (size_t)pos->header_size,\n                    (void *)pos->value);\n      return pos->value;\n    }\n    else\n    {\n      /* Log the non-match outcome for this node to show control flow. */\n      mhd_probe_log(\"no-match: pos=%p header=\\\"%s\\\" header_size=%zu\",\n                    (void *)pos,\n                    (pos->header != NULL) ? pos->header : \"(null)\",\n                    (size_t)pos->header_size);\n    }\n  }\n\n  mhd_probe_log(\"MHD_get_response_header: reached end of headers -> returning NULL\");\n  return NULL;\n}\n"
}