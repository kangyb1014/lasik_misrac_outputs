{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'response' is declared as 'struct MHD_Response *response' but is only read (the function traverses response->first_header and doesn\u2019t modify response). According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible. The signature should be changed to 'const struct MHD_Response *response' (the other pointers are already const-qualified), so the current code violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_header:\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/2113.txt */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/2113.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fputc('\\n', f);\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  mhd_log_probe(\"ENTER MHD_get_response_header: response=%p, key=%p\", (void *)response, (void *)key);\n\n  if (NULL == key)\n  {\n    mhd_log_probe(\"Key is NULL -> returning NULL\");\n    return NULL;\n  }\n\n  /* Capture key info */\n  key_size = strlen (key);\n  mhd_log_probe(\"Key='%s', key_size=%zu\", key, key_size);\n\n  /* If response is NULL, log that fact (original logic does not check and would dereference) */\n  if (NULL == response)\n  {\n    mhd_log_probe(\"Warning: response is NULL before iterating headers\");\n  }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log header pointer, size and content (header may not be NUL-terminated; use precision) */\n    if (pos->header != NULL)\n      mhd_log_probe(\"Iterating header: pos=%p, header_size=%zu, header='%.*s', value_ptr=%p\",\n                    (void *)pos, pos->header_size, (int)pos->header_size, pos->header, (void *)pos->value);\n    else\n      mhd_log_probe(\"Iterating header: pos=%p, header=NULL, header_size=%zu, value_ptr=%p\",\n                    (void *)pos, pos->header_size, (void *)pos->value);\n\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n    {\n      mhd_log_probe(\"Header match found at pos=%p: header='%.*s' -> returning value_ptr=%p\",\n                    (void *)pos, (int)pos->header_size, pos->header, (void *)pos->value);\n      return pos->value;\n    }\n    else\n    {\n      mhd_log_probe(\"Header did not match: pos=%p\", (void *)pos);\n    }\n  }\n\n  mhd_log_probe(\"No matching header found -> returning NULL\");\n  return NULL;\n}\n"
}