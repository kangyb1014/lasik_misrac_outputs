{
  "user_message": "An agent A claimed that the following MHD_get_response_header code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_response_header.\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local loop pointer 'pos' is declared as 'struct MHD_HTTP_Res_Header *pos' and is only used to read header fields while traversing 'response->first_header'. It does not modify the pointed-to objects, so per MISRA C 2023 Rule 8.13 it should be const-qualified (e.g. 'const struct MHD_HTTP_Res_Header *pos' and the chain members/first_header also const-qualified). As written, the non-const pointer violates Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nEntered MHD_get_response_header: response=0x5557f5181820 key=Header-Type-A\nComputed key_size=13\nVisiting header: pos=0x5557f5181920 header='Header-Type-A' header_size=13 value=0x5557f5181900 next=(nil)\nMatch found: header matches key. Returning value=0x5557f5181900\nEntered MHD_get_response_header: response=0x5557f5181820 key=Header-Type-A\nComputed key_size=13\nVisiting header: pos=0x5557f5181920 header='Header-Type-A' header_size=13 value=0x5557f5181900 next=0x5557f5181b80\nMatch found: header matches key. Returning value=0x5557f5181900\nEntered MHD_get_response_header: response=0x5557f5181820 key=Header-Type-A\nComputed key_size=13\nVisiting header: pos=0x5557f5181b80 header='Header-Type-A' header_size=13 value=0x5557f5181b60 next=(nil)\nMatch found: header matches key. Returning value=0x5557f5181b60\nEntered MHD_get_response_header: response=0x5557f5181820 key=Header-Type-A\nComputed key_size=13\nVisiting header: pos=0x5557f5181b80 header='Header-Type-A' header_size=13 value=0x5557f5181b60 next=0x5557f5181bc0\nMatch found: header matches key. Returning value=0x5557f5181b60\nEntered MHD_get_response_header: response=0x5557f5181820 key=Header-Type-A\nComputed key_size=13\nVisiting header: pos=0x5557f5181b80 header='Header-Type-A' header_size=13 value=0x5557f5181b60 next=(nil)\nMatch found: header matches key. Returning value=0x5557f5181b60\nEntered MHD_get_response_header: response=0x5557f5181820 key=Header-Type-B\nComputed key_size=13\nVisiting header: pos=0x5557f5181b80 header='Header-Type-A' header_size=13 value=0x5557f5181b60 next=(nil)\nNo match for this header (header_size=13, key_size=13)\nNo matching header found -> returning NULL\nEntered MHD_get_response_header: response=0x5557f5181820 key=Connection\nComputed key_size=10\nVisiting header: pos=0x5557f5181c00 header='Connection' header_size=10 value=0x5557f51818e0 next=0x5557f5181b80\nMatch found: header matches key. Returning value=0x5557f51818e0\nEntered MHD_get_response_header: response=0x5557f5181820 key=Connection\nComputed key_size=10\nVisiting header: pos=0x5557f5181b80 header='Header-Type-A' header_size=13 value=0x5557f5181b60 next=(nil)\nNo match for this header (header_size=13, key_size=10)\nNo matching header found -> returning NULL\nEntered MHD_get_response_header: response=0x5557f5181820 key=Connection\nComputed key_size=10\nVisiting header: pos=0x5557f5181c70 header='Connection' header_size=10 value=0x5557f5181c40 next=0x5557f5181b80\nMatch found: header matches key. Returning value=0x5557f5181c40\nEntered MHD_get_response_header: response=0x5557f5181820 key=Connection\nComputed key_size=10\nVisiting header: pos=0x5557f5181b80 header='Header-Type-A' header_size=13 value=0x5557f5181b60 next=(nil)\nNo match for this header (header_size=13, key_size=10)\nNo matching header found -> returning NULL\nEntered MHD_get_response_header: response=0x5557f5181820 key=Connection\nComputed key_size=10\nVisiting header: pos=0x5557f5181cb0 header='Connection' header_size=10 value=0x5557f5181c40 next=0x5557f5181b80\nMatch found: header matches key. Returning value=0x5557f5181c40\nEntered MHD_get_response_header: response=0x5557f5181820 key=Connection\nComputed key_size=10\nVisiting header: pos=0x5557f5181cb0 header='Connection' header_size=10 value=0x5557f5181c70 next=0x5557f5181b80\nMatch found: header matches key. Returning value=0x5557f5181c70\nEntered MHD_get_response_header: response=0x5557f5181820 key=Connection\nComputed key_size=10\nVisiting header: pos=0x5557f5181cb0 header='Connection' header_size=10 value=0x5557f5181c70 next=0x5557f5181b80\nMatch found: header matches key. Returning value=0x5557f5181c70\nEntered MHD_get_response_header: response=0x5557f5181820 key=Connection\nComputed key_size=10\nVisiting header: pos=0x5557f5181cb0 header='Connection' header_size=10 value=0x5557f5181c40 next=0x5557f5181b80\nMatch found: header matches key. Returning value=0x5557f5181c40\nEntered MHD_get_response_header: response=0x5557f5181820 key=Connection\nComputed key_size=10\nVisiting header: pos=0x5557f5181cb0 header='Connection' header_size=10 value=0x5557f5181c40 next=0x5557f5181b80\nMatch found: header matches key. Re\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the shown function the local loop pointer pos is only used to read fields (header_size, header, value, next) and never used to modify the pointed-to objects. Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so pos should be declared as\n\n  const struct MHD_HTTP_Res_Header *pos;\n\nThis change is safe: assigning response->first_header (non-const pointer) to a const-qualified pointer and assigning pos->next (non-const) back into pos are both allowed (T * -> const T *). Returning pos->value into a const char * is also fine. Therefore the code as written violates Rule 8.13 and should be updated to use a const-qualified pointer for pos (or otherwise justified)."
}