{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'pos' is declared as 'struct MHD_HTTP_Res_Header *pos;' but it is only used for read-only access (inspecting header_size, header, value, and next). According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type when possible. Here it should be declared as 'const struct MHD_HTTP_Res_Header *pos;' (assigning response->first_header to a pointer-to-const is allowed), so the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_header:\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append formatted log entries to /tmp/logs/2113.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2113.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n  {\n    mhd_probe_log(\"MHD_get_response_header: key is NULL -> returning NULL\\n\");\n    return NULL;\n  }\n\n  key_size = strlen (key);\n\n  /* log initial search parameters; do not dereference response if NULL here */\n  mhd_probe_log(\"MHD_get_response_header: start search key=\\\"%s\\\" key_size=%zu response=%p\\n\",\n                key, key_size, (void *)response);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log state for each iteration: pointer, header_size, header contents (as binary), value and next pointer */\n    /* header may not be NUL-terminated, so use precision in printf. Limit printed header length to reasonable amount to avoid huge logs. */\n    size_t print_hlen = pos->header_size;\n    if (print_hlen > 256U)\n    {\n      print_hlen = 256U; /* cap logging length */\n    }\n\n    /* Note: pos->header may be NULL in malformed state; guard against that */\n    if (pos->header != NULL)\n    {\n      /* Use %.*s to safely print non-NUL-terminated header up to print_hlen */\n      mhd_probe_log(\"MHD_get_response_header: iter pos=%p header_size=%zu header=\\\"%.*s\\\" (printed %zu bytes) value=%p value_str=\\\"%s\\\" next=%p\\n\",\n                    (void *)pos,\n                    pos->header_size,\n                    (int)print_hlen,\n                    pos->header,\n                    print_hlen,\n                    (void *)pos->value,\n                    (pos->value != NULL) ? pos->value : \"(null)\",\n                    (void *)pos->next);\n    }\n    else\n    {\n      mhd_probe_log(\"MHD_get_response_header: iter pos=%p header_size=%zu header=(null) value=%p value_str=\\\"%s\\\" next=%p\\n\",\n                    (void *)pos,\n                    pos->header_size,\n                    (void *)pos->value,\n                    (pos->value != NULL) ? pos->value : \"(null)\",\n                    (void *)pos->next);\n    }\n\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n    {\n      mhd_probe_log(\"MHD_get_response_header: match found at pos=%p -> returning value=%p value_str=\\\"%s\\\"\\n\",\n                    (void *)pos,\n                    (void *)pos->value,\n                    (pos->value != NULL) ? pos->value : \"(null)\");\n      return pos->value;\n    }\n  }\n  mhd_probe_log(\"MHD_get_response_header: no match found for key=\\\"%s\\\" -> returning NULL\\n\", key);\n  return NULL;\n}\n"
}