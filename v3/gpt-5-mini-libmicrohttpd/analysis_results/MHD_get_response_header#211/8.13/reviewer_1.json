{
  "user_message": "An agent A claimed that the following MHD_get_response_header code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_response_header.\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'response' is declared as 'struct MHD_Response *response' but is only read (the function traverses response->first_header and doesn\u2019t modify response). According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible. The signature should be changed to 'const struct MHD_Response *response' (the other pointers are already const-qualified), so the current code violates the rule.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e801f\nKey='Header-Type-A', key_size=13\nIterating header: pos=0x563b8970f920, header_size=13, header='Header-Type-A', value_ptr=0x563b8970f900\nHeader match found at pos=0x563b8970f920: header='Header-Type-A' -> returning value_ptr=0x563b8970f900\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e801f\nKey='Header-Type-A', key_size=13\nIterating header: pos=0x563b8970f920, header_size=13, header='Header-Type-A', value_ptr=0x563b8970f900\nHeader match found at pos=0x563b8970f920: header='Header-Type-A' -> returning value_ptr=0x563b8970f900\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e801f\nKey='Header-Type-A', key_size=13\nIterating header: pos=0x563b8970fb80, header_size=13, header='Header-Type-A', value_ptr=0x563b8970fb60\nHeader match found at pos=0x563b8970fb80: header='Header-Type-A' -> returning value_ptr=0x563b8970fb60\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e801f\nKey='Header-Type-A', key_size=13\nIterating header: pos=0x563b8970fb80, header_size=13, header='Header-Type-A', value_ptr=0x563b8970fb60\nHeader match found at pos=0x563b8970fb80: header='Header-Type-A' -> returning value_ptr=0x563b8970fb60\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e801f\nKey='Header-Type-A', key_size=13\nIterating header: pos=0x563b8970fb80, header_size=13, header='Header-Type-A', value_ptr=0x563b8970fb60\nHeader match found at pos=0x563b8970fb80: header='Header-Type-A' -> returning value_ptr=0x563b8970fb60\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e8090\nKey='Header-Type-B', key_size=13\nIterating header: pos=0x563b8970fb80, header_size=13, header='Header-Type-A', value_ptr=0x563b8970fb60\nHeader did not match: pos=0x563b8970fb80\nNo matching header found -> returning NULL\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e80f6\nKey='Connection', key_size=10\nIterating header: pos=0x563b8970fc00, header_size=10, header='Connection', value_ptr=0x563b8970f8e0\nHeader match found at pos=0x563b8970fc00: header='Connection' -> returning value_ptr=0x563b8970f8e0\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e80f6\nKey='Connection', key_size=10\nIterating header: pos=0x563b8970fb80, header_size=13, header='Header-Type-A', value_ptr=0x563b8970fb60\nHeader did not match: pos=0x563b8970fb80\nNo matching header found -> returning NULL\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e80f6\nKey='Connection', key_size=10\nIterating header: pos=0x563b8970fc70, header_size=10, header='Connection', value_ptr=0x563b8970fc40\nHeader match found at pos=0x563b8970fc70: header='Connection' -> returning value_ptr=0x563b8970fc40\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e80f6\nKey='Connection', key_size=10\nIterating header: pos=0x563b8970fb80, header_size=13, header='Header-Type-A', value_ptr=0x563b8970fb60\nHeader did not match: pos=0x563b8970fb80\nNo matching header found -> returning NULL\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e80f6\nKey='Connection', key_size=10\nIterating header: pos=0x563b8970fcb0, header_size=10, header='Connection', value_ptr=0x563b8970fc40\nHeader match found at pos=0x563b8970fcb0: header='Connection' -> returning value_ptr=0x563b8970fc40\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e80f6\nKey='Connection', key_size=10\nIterating header: pos=0x563b8970fcb0, header_size=10, header='Connection', value_ptr=0x563b8970fc70\nHeader match found at pos=0x563b8970fcb0: header='Connection' -> returning value_ptr=0x563b8970fc70\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e80f6\nKey='Connection', key_size=10\nIterating header: pos=0x563b8970fcb0, header_size=10, header='Connection', value_ptr=0x563b8970fc70\nHeader match found at pos=0x563b8970fcb0: header='Connection' -> returning value_ptr=0x563b8970fc70\nENTER MHD_get_response_header: response=0x563b8970f820, key=0x563b741e80f6\nKey='Connection', key_size=10\nIterating header:\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function does not modify the object pointed to by response (it only reads response->first_header and then reads fields of the header list), so per MISRA C 2023 Rule 8.13 the pointer type should be const-qualified. Concretely the prototype should be changed to\n\n  _MHD_EXTERN const char * MHD_get_response_header(const struct MHD_Response *response, const char *key)\n\nand the loop iterator should be made const as well (e.g. const struct MHD_HTTP_Res_Header *pos) so the pointer targets are const-qualified throughout. The only practical exceptions are external/API/ABI compatibility reasons that prevent changing the public signature \u2014 in that case a documented deviation is required. Absent such a justification, the current code violates Rule 8.13."
}