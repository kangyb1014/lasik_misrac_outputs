{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(key) after only checking for NULL; there is no guarantee that the object pointed to by key is NUL-terminated. If the caller passes a pointer to a non-terminated char buffer (e.g. a char array of length N without a terminating '\\0' or a pointer into a larger object whose accessible region ends before a '\\0'), strlen will scan past the bounds of the object and cause an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2119.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_header:\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Lightweight logging helper that appends human-readable probes to the\n   specified file. This helper is deliberately minimal to avoid changing\n   program behaviour beyond writing logs. */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2119.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  /* Log entry and pointers (do not dereference 'key' here to avoid\n     introducing extra memory accesses beyond the original call to\n     strlen). */\n  mhd_log_probe(\"MHD_get_response_header ENTRY: response=%p key=%p\",\n                (void *)response, (const void *)key);\n\n  if (NULL == key)\n  {\n    mhd_log_probe(\"MHD_get_response_header: key is NULL -> returning NULL\");\n    return NULL;\n  }\n\n  /* Record that strlen will be invoked on the provided pointer. The\n     actual strlen call is the original behaviour; we log before and\n     after to capture evidence of how many bytes strlen reports. */\n  mhd_log_probe(\"MHD_get_response_header: calling strlen on key=%p\",\n                (const void *)key);\n\n  key_size = strlen (key);\n\n  mhd_log_probe(\"MHD_get_response_header: strlen returned key_size=%zu for key=%p\",\n                key_size, (const void *)key);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log header node pointers and sizes. Do not dereference header\n       buffers here beyond reading their stored sizes/pointers. */\n    mhd_log_probe(\"Inspecting header node: pos=%p header=%p header_size=%zu value=%p\",\n                  (void *)pos, (const void *)pos->header,\n                  (size_t)pos->header_size, (const void *)pos->value);\n\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n    {\n      mhd_log_probe(\"MHD_get_response_header: match found at pos=%p -> returning value=%p\",\n                    (void *)pos, (const void *)pos->value);\n      return pos->value;\n    }\n  }\n\n  mhd_log_probe(\"MHD_get_response_header: no matching header found -> returning NULL\");\n  return NULL;\n}\n"
}