{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_header:\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No \u2014 not violated in the given code path. The code computes key_size = strlen(key) and only calls MHD_str_equal_caseless_bin_n_(pos->header, key, pos->header_size) when pos->header_size == key_size, so exactly key_size bytes are compared and the call will not read past the bytes of key (the NUL is not required for a binary n-byte comparison). A violation could occur only if pos->header_size does not actually reflect the allocated/initialized length of pos->header (corrupt or malformed header) or if MHD_str_equal_caseless_bin_n_ is implemented incorrectly (for example, ignores the provided n or calls a <string.h> routine that expects NUL-termination); in those cases a read beyond object bounds could happen."
}