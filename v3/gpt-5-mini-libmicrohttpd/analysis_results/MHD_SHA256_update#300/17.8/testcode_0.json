{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'data' (declared as 'const uint8_t *data') is modified with the statement 'data += bytes_left;'. MISRA C 2023 Rule 17.8 states a function parameter shall not be modified (the pointer itself must not be changed). This is a direct violation. Fix by introducing a local pointer (e.g. 'const uint8_t *p = data;') and update 'p' instead, or update an index/offset variable rather than the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3007.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/3007.txt */\nstatic void mhd_log_sha256(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3007.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log entry state */\n  mhd_log_sha256(\"ENTRY: MHD_SHA256_update ctx=%p data=%p length=%zu ctx_count_before=%llu\\n\",\n                 (void *)ctx, (void *)data, length, (unsigned long long)ctx->count);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_log_sha256(\"EXIT (shortcut): length==0\\n\");\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  /* Log after updating count */\n  mhd_log_sha256(\"after count update: bytes_have=%u ctx_count_after=%llu\\n\",\n                 bytes_have, (unsigned long long)ctx->count);\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    mhd_log_sha256(\"buffer not empty: bytes_have=%u bytes_left=%u length=%zu data=%p\\n\",\n                   bytes_have, bytes_left, length, (void *)data);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      mhd_log_sha256(\"will fill buffer: copy %u bytes into ctx->buffer + %u\\n\",\n                     bytes_left, bytes_have);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Log state immediately before modifying the parameter 'data' */\n      mhd_log_sha256(\"about to advance parameter 'data': current data=%p length=%zu bytes_left=%u\\n\",\n                     (void *)data, length, bytes_left);\n\n      data += bytes_left; /* <-- This is the modification reported as a violation */\n\n      /* Log state immediately after modifying the parameter 'data' */\n      mhd_log_sha256(\"after advancing 'data': data=%p length_before=%zu (will subtract %u)\\n\",\n                     (void *)data, length, bytes_left);\n\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      mhd_log_sha256(\"processed one full block from buffer; new length=%zu data=%p\\n\",\n                     length, (void *)data);\n      bytes_have = 0;\n    }\n    else\n    {\n      mhd_log_sha256(\"not enough new data to fill buffer: length=%zu bytes_left=%u\\n\",\n                     length, bytes_left);\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_log_sha256(\"processing full block directly: data=%p length=%zu\\n\",\n                   (void *)data, length);\n    sha256_transform (ctx->H, data);\n\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n\n    mhd_log_sha256(\"after processing full block: data=%p length=%zu\\n\",\n                   (void *)data, length);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_log_sha256(\"copying remainder to buffer: bytes_have=%u length=%zu data=%p\\n\",\n                   bytes_have, length, (void *)data);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  mhd_log_sha256(\"EXIT: MHD_SHA256_update ctx=%p final_data_pointer=%p final_length=%zu ctx_count=%llu\\n\",\n                 (void *)ctx, (void *)data, length, (unsigned long long)ctx->count);\n}\n"
}