{
  "user_message": "An agent A claimed that the following MHD_SHA256_update code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_SHA256_update.\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement 'length -= SHA256_BLOCK_SIZE;' modifies the function parameter 'length' inside MHD_SHA256_update. Rule 17.8 forbids modifying function parameters (the object referred to by a pointer may be modified, but not the parameter itself).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nEVENT: enter\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01b length=3 bytes_have=0 bytes_left=0\nEVENT: before_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01b length=3 bytes_have=0 bytes_left=0\nEVENT: after_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01b length=3 bytes_have=0 bytes_left=0\nEVENT: copy_incomplete_block\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01b length=3 bytes_have=0 bytes_left=0\nEVENT: exit\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01b length=3 bytes_have=0 bytes_left=0\nEVENT: enter\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01f length=56 bytes_have=0 bytes_left=0\nEVENT: before_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01f length=56 bytes_have=0 bytes_left=0\nEVENT: after_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01f length=56 bytes_have=0 bytes_left=0\nEVENT: copy_incomplete_block\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01f length=56 bytes_have=0 bytes_left=0\nEVENT: exit\n  ctx=0x7ffe9e980de0 data=0x560e9e53c01f length=56 bytes_have=0 bytes_left=0\nEVENT: enter\n  ctx=0x7ffe9e980de0 data=0x560e9e53dc7d length=0 bytes_have=0 bytes_left=0\nEVENT: shortcut_return_zero_length\n  ctx=0x7ffe9e980de0 data=0x560e9e53dc7d length=0 bytes_have=0 bytes_left=0\nEVENT: enter\n  ctx=0x7ffe9e980de0 data=0x560e9e53c058 length=28 bytes_have=0 bytes_left=0\nEVENT: before_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c058 length=28 bytes_have=0 bytes_left=0\nEVENT: after_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c058 length=28 bytes_have=0 bytes_left=0\nEVENT: copy_incomplete_block\n  ctx=0x7ffe9e980de0 data=0x560e9e53c058 length=28 bytes_have=0 bytes_left=0\nEVENT: exit\n  ctx=0x7ffe9e980de0 data=0x560e9e53c058 length=28 bytes_have=0 bytes_left=0\nEVENT: enter\n  ctx=0x7ffe9e980de0 data=0x560e9e53c075 length=14 bytes_have=0 bytes_left=0\nEVENT: before_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c075 length=14 bytes_have=0 bytes_left=0\nEVENT: after_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c075 length=14 bytes_have=0 bytes_left=0\nEVENT: copy_incomplete_block\n  ctx=0x7ffe9e980de0 data=0x560e9e53c075 length=14 bytes_have=0 bytes_left=0\nEVENT: exit\n  ctx=0x7ffe9e980de0 data=0x560e9e53c075 length=14 bytes_have=0 bytes_left=0\nEVENT: enter\n  ctx=0x7ffe9e980de0 data=0x560e9e53c084 length=26 bytes_have=0 bytes_left=0\nEVENT: before_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c084 length=26 bytes_have=0 bytes_left=0\nEVENT: after_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c084 length=26 bytes_have=0 bytes_left=0\nEVENT: copy_incomplete_block\n  ctx=0x7ffe9e980de0 data=0x560e9e53c084 length=26 bytes_have=0 bytes_left=0\nEVENT: exit\n  ctx=0x7ffe9e980de0 data=0x560e9e53c084 length=26 bytes_have=0 bytes_left=0\nEVENT: enter\n  ctx=0x7ffe9e980de0 data=0x560e9e53c0ed length=26 bytes_have=0 bytes_left=0\nEVENT: before_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c0ed length=26 bytes_have=0 bytes_left=0\nEVENT: after_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c0ed length=26 bytes_have=0 bytes_left=0\nEVENT: copy_incomplete_block\n  ctx=0x7ffe9e980de0 data=0x560e9e53c0ed length=26 bytes_have=0 bytes_left=0\nEVENT: exit\n  ctx=0x7ffe9e980de0 data=0x560e9e53c0ed length=26 bytes_have=0 bytes_left=0\nEVENT: enter\n  ctx=0x7ffe9e980de0 data=0x560e9e53c09f length=104 bytes_have=0 bytes_left=0\nEVENT: before_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c09f length=104 bytes_have=0 bytes_left=0\nEVENT: after_count_add\n  ctx=0x7ffe9e980de0 data=0x560e9e53c09f length=104 bytes_have=0 bytes_left=0\nEVENT: while_loop_iter_before_transform\n  ctx=0x7ffe9e980de0 data=0x560e9e53c09f length=104 bytes_have=0 bytes_left=64\nEVENT: while_loop_before_length_minus_block\n  ctx=0x7ffe9e980de0 data=0x560e9e53c0df length=104 bytes_have=0 bytes_left=64\nEVENT: while_loop_after_length_minus_block\n  ctx=0x7ffe9e980de0 data=0x560e9e53c0df length=40 bytes_have=0 bytes_left=64\nEVENT: copy_incomplete_block\n  ctx=0x7ffe9e980de0 data=0x560e9e53c0df length=40 bytes_have=0 bytes_left=0\nEVENT: exit\n  ctx=0x7ffe9e980de0 data=0x560e9e53c0df length=40 bytes_have=0 bytes_left=0\nEVENT: enter\n  ctx=0x7ffe9e980de0 data=0x560e9e53c108 length=378 bytes_have=0 bytes_left=0\nEVENT: before_count_add\n  ctx=0x7ffe9e980d\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 forbids modifying function parameters. In MHD_SHA256_update the non\u2011pointer parameter 'length' is modified (e.g. length -= bytes_left; length -= SHA256_BLOCK_SIZE;), which violates the rule. Furthermore, the pointer parameter 'data' is also modified (data += bytes_left; data += SHA256_BLOCK_SIZE;), which likewise breaches the rule\u2019s note that the pointer itself shall not be modified (only the object it points to may be). To comply you should make local copies (e.g. size_t len = length; const uint8_t *p = data;) and modify those instead."
}