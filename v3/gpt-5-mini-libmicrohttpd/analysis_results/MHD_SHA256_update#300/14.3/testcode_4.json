{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nWhen MHD_FAVOR_SMALL_CODE is not defined the earlier check \u2018if (0 == length) return;\u2019 guarantees that control reaches the later \u2018if (0 != length)\u2019 only when length is non\u2011zero, so the controlling expression is invariant (always true). This violates MISRA C 2023 Rule 14.3 (no applicable exceptions).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3005.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Helper logging function to append probe information to /tmp/logs/3005.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/3005.txt\", \"a\");\n  if (fp == NULL)\n  {\n    return; /* best-effort logging only */\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(fp, fmt, ap);\n  va_end(ap);\n  fclose(fp);\n}\n\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  log_probe(\"MHD_SHA256_update ENTRY: ctx=%p data=%p length=%zu\\n\",\n            (void *) ctx, (const void *) data, length);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    log_probe(\"Early return: length == 0 - no processing\\n\");\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  log_probe(\"After count update: bytes_have=%u ctx->count=%llu\\n\",\n            bytes_have, (unsigned long long) ctx->count);\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    log_probe(\"Entering bytes_have!=0 branch: bytes_left=%u length=%zu\\n\",\n              bytes_left, length);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      log_probe(\"Condition length >= bytes_left true: copying %u bytes to buffer and processing block\\n\",\n                bytes_left);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      /* log state right before transform */\n      log_probe(\"Calling sha256_transform from combined-block path: data=%p length=%zu\\n\",\n                (const void *) data, length);\n      sha256_transform (ctx->H, ctx->buffer);\n      log_probe(\"Returned from sha256_transform (combined-block path)\\n\");\n      bytes_have = 0;\n      log_probe(\"Set bytes_have=0 after processing combined block\\n\");\n    }\n    else\n    {\n      log_probe(\"Condition length >= bytes_left false: will copy into buffer only (no transform)\\n\");\n    }\n  }\n  else\n  {\n    log_probe(\"bytes_have == 0 branch: no partial buffered data to combine\\n\");\n  }\n\n  {\n    unsigned iter = 0u;\n    while (SHA256_BLOCK_SIZE <= length)\n    {   /* Process any full blocks of new data directly,\n           without copying to the buffer. */\n      log_probe(\"Loop iteration %u: processing full block: data=%p length=%zu\\n\",\n                iter, (const void *) data, length);\n      sha256_transform (ctx->H, data);\n      data += SHA256_BLOCK_SIZE;\n      length -= SHA256_BLOCK_SIZE;\n      iter++;\n    }\n    if (iter > 0u)\n    {\n      log_probe(\"Exited full-block loop after %u iterations: remaining length=%zu\\n\",\n                iter, length);\n    }\n    else\n    {\n      log_probe(\"Skipped full-block loop: no full blocks in input\\n\");\n    }\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    log_probe(\"Final copy of remaining %zu bytes into buffer at offset %u\\n\",\n              length, bytes_have);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n  else\n  {\n    log_probe(\"No remaining bytes to copy into buffer (length == 0)\\n\");\n  }\n\n  log_probe(\"MHD_SHA256_update EXIT: final ctx->count=%llu bytes_have=%u length=%zu\\n\",\n            (unsigned long long) ctx->count, bytes_have, length);\n}\n"
}