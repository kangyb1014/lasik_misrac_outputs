{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis call violates Rule 8.13 if sha256_transform's second parameter is not const-qualified. Specifically, if sha256_transform is declared as sha256_transform(..., uint8_t *block) (a non-const pointer) then passing data (declared const uint8_t *) discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. If, however, sha256_transform is declared to accept a pointer to const (e.g. const uint8_t *), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3003.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: append information to /tmp/logs/3003.txt. */\nstatic void mhd_log_probe(const char *event,\n                          const struct Sha256Ctx *ctx,\n                          const uint8_t *data,\n                          size_t length,\n                          unsigned bytes_have)\n{\n  FILE *f = fopen(\"/tmp/logs/3003.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n  fprintf(f, \"EVENT: %s\\n\", event);\n  fprintf(f, \"  ctx=%p, data=%p, length=%zu, bytes_have=%u\\n\",\n          (void *)ctx, (void *)data, length, bytes_have);\n  if (ctx != NULL)\n  {\n    /* Print addresses of commonly used members for additional context. */\n    fprintf(f, \"  ctx->buffer=%p, ctx->H=%p, ctx->count=%llu\\n\",\n            (void *)(&ctx->buffer), (void *)(ctx->H), (unsigned long long)ctx->count);\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  mhd_log_probe(\"enter\", ctx, data, length, 0);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_log_probe(\"early_return_zero_length\", ctx, data, length, 0);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  mhd_log_probe(\"after_count_update\", ctx, data, length, bytes_have);\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      mhd_log_probe(\"about_to_memcpy_fill_buffer\", ctx, data, length, bytes_have);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      mhd_log_probe(\"after_memcpy_fill_buffer\", ctx, data, length, bytes_have);\n\n      data += bytes_left;\n      length -= bytes_left;\n\n      /* Log the call that may discard const-qualification at the callee. */\n      mhd_log_probe(\"about_to_call_sha256_transform_with_ctx_buffer\", ctx, data, length, bytes_have);\n      sha256_transform (ctx->H, ctx->buffer);\n      mhd_log_probe(\"after_call_sha256_transform_with_ctx_buffer\", ctx, data, length, 0);\n\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    /* Log each direct block processing call to sha256_transform. */\n    mhd_log_probe(\"about_to_call_sha256_transform_with_data\", ctx, data, length, bytes_have);\n    sha256_transform (ctx->H, data);\n    mhd_log_probe(\"after_call_sha256_transform_with_data\", ctx, data, length, bytes_have);\n\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_log_probe(\"about_to_memcpy_incomplete_block\", ctx, data, length, bytes_have);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n    mhd_log_probe(\"after_memcpy_incomplete_block\", ctx, data, length, bytes_have);\n  }\n\n  mhd_log_probe(\"exit\", ctx, data, length, bytes_have);\n}\n"
}