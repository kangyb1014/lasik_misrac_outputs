{
  "user_message": "An agent A claimed that the following MHD_SHA256_update code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_SHA256_update.\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThis call violates Rule 8.13 if sha256_transform's second parameter is not const-qualified. Specifically, if sha256_transform is declared as sha256_transform(..., uint8_t *block) (a non-const pointer) then passing data (declared const uint8_t *) discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. If, however, sha256_transform is declared to accept a pointer to const (e.g. const uint8_t *), then there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nEVENT: enter\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301b, length=3, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=0\n\nEVENT: after_count_update\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301b, length=3, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=3\n\nEVENT: about_to_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301b, length=3, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=3\n\nEVENT: after_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301b, length=3, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=3\n\nEVENT: exit\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301b, length=3, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=3\n\nEVENT: enter\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301f, length=56, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=0\n\nEVENT: after_count_update\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301f, length=56, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=56\n\nEVENT: about_to_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301f, length=56, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=56\n\nEVENT: after_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301f, length=56, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=56\n\nEVENT: exit\n  ctx=0x7ffe6cb8b250, data=0x5608ecb3301f, length=56, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=56\n\nEVENT: enter\n  ctx=0x7ffe6cb8b250, data=0x5608ecb34cad, length=0, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=0\n\nEVENT: early_return_zero_length\n  ctx=0x7ffe6cb8b250, data=0x5608ecb34cad, length=0, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=0\n\nEVENT: enter\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33058, length=28, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=0\n\nEVENT: after_count_update\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33058, length=28, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=28\n\nEVENT: about_to_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33058, length=28, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=28\n\nEVENT: after_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33058, length=28, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=28\n\nEVENT: exit\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33058, length=28, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=28\n\nEVENT: enter\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33075, length=14, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=0\n\nEVENT: after_count_update\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33075, length=14, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=14\n\nEVENT: about_to_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33075, length=14, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=14\n\nEVENT: after_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33075, length=14, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=14\n\nEVENT: exit\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33075, length=14, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=14\n\nEVENT: enter\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33084, length=26, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=0\n\nEVENT: after_count_update\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33084, length=26, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=26\n\nEVENT: about_to_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33084, length=26, bytes_have=0\n  ctx->buffer=0x7ffe6cb8b270, ctx->H=0x7ffe6cb8b250, ctx->count=26\n\nEVENT: after_memcpy_incomplete_block\n  ctx=0x7ffe6cb8b250, data=0x5608ecb33084, length=26, bytes_have=0\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct but conditional. MISRA C 2023 Rule 8.13 mandates that pointers should point to const-qualified types whenever possible (i.e. where the pointee is not modified). In the shown function data is declared const uint8_t * and is passed directly to sha256_transform. If sha256_transform is prototyped to take a non-const pointer (e.g. uint8_t *block) then that prototype fails the const-correctness intent of 8.13: passing a const-qualified pointer to a parameter that is not const effectively discards the const qualifier and indicates the function declaration did not use const where it should. Conversely, if sha256_transform is declared to take const uint8_t * (or otherwise the prototype indicates it will not modify the data), there is no 8.13 violation at this call-site. Note also that a compiler will typically diagnose the mismatch (an implicit discard of const requires an explicit cast), so the issue is detectable at build time. Therefore the agent's claim is correct in the stated conditional sense."
}