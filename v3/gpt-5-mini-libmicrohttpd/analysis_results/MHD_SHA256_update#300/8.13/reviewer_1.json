{
  "user_message": "An agent A claimed that the following MHD_SHA256_update code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_SHA256_update.\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf ctx->buffer is declared with a const-qualified type (for example: const uint8_t buffer[SHA256_BLOCK_SIZE] or const uint8_t *buffer) then the cast ((uint8_t *) ctx->buffer) removes the const qualifier and is used as the destination of memcpy \u2014 this discards const and allows writing to an object that was declared const, violating MISRA C 2023 Rule 8.13. (If ctx->buffer is already a non-const type, the cast is unnecessary but does not violate Rule 8.13.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[entry] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=0 data=0x55be78e2e01b length=3 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[after_count_update] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=3 data=0x55be78e2e01b length=3 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[pre_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=3 data=0x55be78e2e01b length=3 bytes_have=0 bytes_left=3 dest=0x7fff37a50d10 src=0x55be78e2e01b n=3\n[post_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=3 data=0x55be78e2e01b length=3 bytes_have=0 bytes_left=3 dest=0x7fff37a50d10 src=0x55be78e2e01b n=3\n[exit] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=3 data=0x55be78e2e01b length=3 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[entry] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=0 data=0x55be78e2e01f length=56 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[after_count_update] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=56 data=0x55be78e2e01f length=56 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[pre_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=56 data=0x55be78e2e01f length=56 bytes_have=0 bytes_left=56 dest=0x7fff37a50d10 src=0x55be78e2e01f n=56\n[post_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=56 data=0x55be78e2e01f length=56 bytes_have=0 bytes_left=56 dest=0x7fff37a50d10 src=0x55be78e2e01f n=56\n[exit] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=56 data=0x55be78e2e01f length=56 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[entry] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=0 data=0x55be78e2fc5d length=0 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[early_return_zero_length] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=0 data=0x55be78e2fc5d length=0 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[entry] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=0 data=0x55be78e2e058 length=28 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[after_count_update] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=28 data=0x55be78e2e058 length=28 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[pre_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=28 data=0x55be78e2e058 length=28 bytes_have=0 bytes_left=28 dest=0x7fff37a50d10 src=0x55be78e2e058 n=28\n[post_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=28 data=0x55be78e2e058 length=28 bytes_have=0 bytes_left=28 dest=0x7fff37a50d10 src=0x55be78e2e058 n=28\n[exit] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=28 data=0x55be78e2e058 length=28 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[entry] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=0 data=0x55be78e2e075 length=14 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[after_count_update] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=14 data=0x55be78e2e075 length=14 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[pre_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=14 data=0x55be78e2e075 length=14 bytes_have=0 bytes_left=14 dest=0x7fff37a50d10 src=0x55be78e2e075 n=14\n[post_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=14 data=0x55be78e2e075 length=14 bytes_have=0 bytes_left=14 dest=0x7fff37a50d10 src=0x55be78e2e075 n=14\n[exit] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=14 data=0x55be78e2e075 length=14 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[entry] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=0 data=0x55be78e2e084 length=26 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[after_count_update] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=26 data=0x55be78e2e084 length=26 bytes_have=0 bytes_left=0 dest=(nil) src=(nil) n=0\n[pre_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=26 data=0x55be78e2e084 length=26 bytes_have=0 bytes_left=26 dest=0x7fff37a50d10 src=0x55be78e2e084 n=26\n[post_memcpy_remaining_to_buffer] ctx=0x7fff37a50cf0 buffer=0x7fff37a50d10 count=26 data=0x55be78e2e084 length=26 bytes_have=0 bytes_left=26 dest=0x7fff37\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA R8.13 says pointers should point to const-qualified types when that is possible. In the provided function the data input pointer is const-qualified (const uint8_t *data) and the ctx parameter is non-const because the function mutates ctx (ctx->count, and it writes into ctx->buffer). Therefore ctx->buffer must be a modifiable object for the function to work; making it const would be incorrect. The cast ((uint8_t *) ctx->buffer) is used to obtain a byte pointer to a (modifiable) buffer \u2014 if ctx->buffer is in fact a non-const object then no const is being discarded and R8.13 is not violated. Agent A\u2019s scenario relies on a hypothetical redeclaration of ctx->buffer as const; that hypothetical would indeed create problems (casting away const to pass as memcpy destination would be incompatible with const qualification and violate rules), but that is not the code shown. Based on the actual code and intended use (writing into the buffer), there is no violation of MISRA C 2023 Rule 8.13. (Separately, casting between pointer types or casting away qualifiers can implicate other MISRA rules, but that is outside the specific R8.13 claim.)"
}