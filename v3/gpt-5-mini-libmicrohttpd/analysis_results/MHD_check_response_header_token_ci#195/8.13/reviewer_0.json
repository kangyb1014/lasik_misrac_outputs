{
  "user_message": "An agent A claimed that the following MHD_check_response_header_token_ci code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_check_response_header_token_ci.\n```c\nbool\nMHD_check_response_header_token_ci (const struct MHD_Response *response,\n                                    const char *key,\n                                    size_t key_len,\n                                    const char *token,\n                                    size_t token_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if ( (NULL == key) ||\n       ('\\0' == key[0]) ||\n       (NULL == token) ||\n       ('\\0' == token[0]) )\n    return false;\n\n  /* Token must not contain binary zero! */\n  mhd_assert (strlen (token) == token_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ( (pos->kind == MHD_HEADER_KIND) &&\n         (key_len == pos->header_size) &&\n         MHD_str_equal_caseless_bin_n_ (pos->header,\n                                        key,\n                                        key_len) &&\n         MHD_str_has_token_caseless_ (pos->value,\n                                      token,\n                                      token_len) )\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe fragment uses pos->header and pos->value only for read-only comparisons. If the struct member types are declared as non-const (e.g. char *header; char *value; in struct MHD_HTTP_Res_Header) then Rule 8.13 is violated because those pointers should be declared as pointing to const-qualified types (const char *) since they are not modified. If, however, those members are already declared const char * then there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough information to conclude a definite violation. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types where possible \u2014 this is a rule about declarations. The snippet shown only contains uses; the declarations of struct MHD_HTTP_Res_Header and its members (first_header, header, value) are not provided. If those members are declared as non-const (e.g. char *header; char *value;) even though they are only read here, then that would be a violation (they should be declared const char *). Likewise, pos is declared as a non-const pointer (struct MHD_HTTP_Res_Header *pos) while the function only reads the headers; it would be preferable for pos to be declared as a pointer to const (const struct MHD_HTTP_Res_Header *pos) so the pointer points to const-qualified data and you do not discard constness from the const struct MHD_Response *response. However, if the struct members are already declared as const char * and first_header has an appropriate const qualification, then no Rule 8.13 violation exists in this function. In summary: Agent A\u2019s scenario is conditionally correct, but you cannot determine a violation from the shown code alone \u2014 the struct declarations must be inspected. Recommended fixes: make pos a pointer-to-const (const struct MHD_HTTP_Res_Header *pos) and declare immutable character buffers as const char * in the struct."
}