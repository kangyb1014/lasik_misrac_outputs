{
  "user_message": "An agent A claimed that the following MHD_check_response_header_token_ci code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_check_response_header_token_ci.\n```c\nbool\nMHD_check_response_header_token_ci (const struct MHD_Response *response,\n                                    const char *key,\n                                    size_t key_len,\n                                    const char *token,\n                                    size_t token_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if ( (NULL == key) ||\n       ('\\0' == key[0]) ||\n       (NULL == token) ||\n       ('\\0' == token[0]) )\n    return false;\n\n  /* Token must not contain binary zero! */\n  mhd_assert (strlen (token) == token_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ( (pos->kind == MHD_HEADER_KIND) &&\n         (key_len == pos->header_size) &&\n         MHD_str_equal_caseless_bin_n_ (pos->header,\n                                        key,\n                                        key_len) &&\n         MHD_str_has_token_caseless_ (pos->value,\n                                      token,\n                                      token_len) )\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nPotential violation: the call passes 'token' with an externally supplied token_len that is only checked by an mhd_assert (debug-only). If MHD_str_has_token_caseless_ uses <string.h> routines that assume either a NUL-terminated string (e.g. strlen/strstr/strncat/strcpy) or reads token_len bytes (e.g. memcmp/memcpy) then a mismatch between token_len and the actual allocated/terminated size of token \u2014 or a non-NUL-terminated pos->value \u2014 can cause out-of-bounds accesses. For example, if token_len is larger than the actual buffer for token (or pos->value is not NUL-terminated) and the function calls strlen() or memcmp(..., token_len), the underlying string.h functions may read past the object bounds. Because the safety relies only on an assertion, the fragment can violate MISRA C 2023 Rule 21.17 at runtime.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is essentially correct: as written the function relies only on mhd_assert(strlen(token) == token_len) to ensure token_len matches the actual string length. Because mhd_assert is normally a debug\u2011only check that can be compiled out, there is no runtime guarantee that token is NUL\u2011terminated or that token_len does not exceed the actual buffer. The function then forwards token and token_len into MHD_str_has_token_caseless_. If that callee (or any code it invokes) uses <string.h> routines that assume a NUL terminator (e.g. strlen/strstr/strcpy/etc.) or reads token_len bytes (e.g. memcmp/memcpy) without its own bounds checks, an out\u2011of\u2011bounds access can occur, which would violate MISRA C 2023 Rule 21.17.\n\nWhether a concrete violation occurs depends on the implementation of MHD_str_has_token_caseless_ (and on the actual properties of pos->value). But the caller\u2019s use of only an assert to check token/token_len is insufficient to prevent a runtime out\u2011of\u2011bounds access in production builds, so the reported potential violation is valid. To fix: perform a real runtime check (not just an assert) that token is NUL\u2011terminated and token_len is within the buffer, or use length\u2011bounded APIs in the callee that do not read beyond the supplied object bounds and/or document and enforce ownership/length invariants."
}