{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of response_completed_callback:\n```c\nstatic void\nresponse_completed_callback (void *cls,\n                             struct MHD_Connection *connection,\n                             void **req_cls,\n                             enum MHD_RequestTerminationCode toe)\n{\n  struct UploadContext *uc = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == uc)\n    return; /* this request wasn't an upload request */\n  if (NULL != uc->pp)\n  {\n    MHD_destroy_post_processor (uc->pp);\n    uc->pp = NULL;\n  }\n  if (-1 != uc->fd)\n  {\n    (void) close (uc->fd);\n    if (NULL != uc->filename)\n    {\n      fprintf (stderr,\n               \"Upload of file `%s' failed (incomplete or aborted), removing file.\\n\",\n               uc->filename);\n      (void) unlink (uc->filename);\n    }\n  }\n  if (NULL != uc->filename)\n    free (uc->filename);\n  free (uc);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No function parameter is assigned to or otherwise modified in this function, so there are no violations of MISRA C 2023 Rule 17.8 to report. Analysis details:\n\n- Parameters: cls, connection, req_cls, and toe are not assigned to. The three unused parameters are explicitly cast to void to suppress warnings; that is not a modification.\n- req_cls is dereferenced to obtain a local pointer (struct UploadContext *uc = *req_cls;). Reading the value of a pointer parameter into a local variable is not a modification of the parameter itself.\n- Subsequent writes (uc->pp = NULL;, free(uc->filename); free(uc);, close(uc->fd); unlink(uc->filename);) modify the object pointed to by uc (which is the object referred to by the pointer parameter). Rule 17.8 explicitly allows modification of the object referred to by a pointer parameter; it only forbids modifying the pointer parameter itself.\n- There are no operations that increment/decrement or reassign the parameter variables (no cls = ..., no connection = ..., no req_cls = ..., no toe = ...), nor are any parameter addresses overwritten.\n\nNote: although not relevant to Rule 17.8, reviewers might want to check for other issues (e.g. leaving *req_cls pointing at freed memory or not setting uc->fd to -1 after close). Those are outside the scope of Rule 17.8 and thus are not flagged here."
}