{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the struct field pos->value is declared as a non-const pointer (e.g. char *value) but is only ever read (used in memcmp and checked for NULL), then Rule 8.13 is violated \u2014 the pointer should be declared as pointing to a const-qualified type (const char *value). The same applies to pos->header. If, however, pos->value is already declared const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nstatic void\nlog_test_header_state(const char *stage,\n                      struct test_header_param *param,\n                      struct MHD_HTTP_Req_Header *pos,\n                      const char *key,\n                      size_t key_size,\n                      const char *value,\n                      size_t value_size,\n                      enum MHD_ValueKind kind,\n                      size_t i)\n{\n  FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"stage=%s cls=%p num_headers=%zu i=%zu kind=%d key=%p key_size=%zu value=%p value_size=%zu pos=%p \",\n          stage,\n          (void *) param,\n          (NULL != param) ? param->num_headers : 0U,\n          i,\n          (int) kind,\n          (void *) key,\n          key_size,\n          (void *) value,\n          value_size,\n          (void *) pos);\n\n  if (NULL != pos)\n  {\n    fprintf(f, \"pos->header=%p pos->header_size=%zu pos->value=%p pos->value_size=%zu pos->kind=%d\\n\",\n            (void *) pos->header,\n            pos->header_size,\n            (void *) pos->value,\n            pos->value_size,\n            (int) pos->kind);\n  }\n  else\n  {\n    fprintf(f, \"pos=NULL\\n\");\n  }\n\n  fclose(f);\n}\n\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  /* Log entry into function */\n  log_test_header_state(\"enter\", param, NULL, key, key_size, value, value_size, kind, 0);\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log each loop iteration and the candidate header */\n    log_test_header_state(\"loop_iter\", param, pos, key, key_size, value, value_size, kind, i);\n\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      /* Log before size checks */\n      log_test_header_state(\"matched_index\", param, pos, key, key_size, value, value_size, kind, i);\n\n      if (key_size != pos->header_size)\n      {\n        log_test_header_state(\"key_size_mismatch\", param, pos, key, key_size, value, value_size, kind, i);\n        return MHD_NO;\n      }\n      if (value_size != pos->value_size)\n      {\n        log_test_header_state(\"value_size_mismatch\", param, pos, key, key_size, value, value_size, kind, i);\n        return MHD_NO;\n      }\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n\n        /* Log data pointers used for comparison */\n        log_test_header_state(\"before_key_memcmp\", param, pos, key, key_size, value, value_size, kind, i);\n\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n        {\n          log_test_header_state(\"key_memcmp_failed\", param, pos, key, key_size, value, value_size, kind, i);\n          return MHD_NO;\n        }\n        log_test_header_state(\"key_memcmp_ok\", param, pos, key, key_size, value, value_size, kind, i);\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n\n        /* Log data pointers used for comparison */\n        log_test_header_state(\"before_value_memcmp\", param, pos, key, key_size, value, value_size, kind, i);\n\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n        {\n          log_test_header_state(\"value_memcmp_failed\", param, pos, key, key_size, value, value_size, kind, i);\n          return MHD_NO;\n        }\n        log_test_header_state(\"value_memcmp_ok\", param, pos, key, key_size, value, value_size, kind, i);\n      }\n\n      log_test_header_state(\"return_yes\", param, pos, key, key_size, value, value_size, kind, i);\n      return MHD_YES;\n    }\n  }\n\n  log_test_header_state(\"return_no_end\", param, NULL, key, key_size, value, value_size, kind, i);\n  return MHD_NO;\n}\n"
}