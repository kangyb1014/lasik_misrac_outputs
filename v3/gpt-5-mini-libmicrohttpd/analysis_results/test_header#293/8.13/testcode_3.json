{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop uses a non-const pointer 'pos' to traverse and read fields of the headers list (pos = connection->rq.headers_received; ...). The function only reads members of the list (checks kind, sizes, header/value pointers) and does not modify the pointed-to objects, so 'pos' could be declared as 'const struct MHD_HTTP_Req_Header *pos'. Declaring it non-const therefore violates MISRA C 2023 Rule 8.13. Suggested fix: change the declaration to 'const struct MHD_HTTP_Req_Header *pos;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/2933.txt */\nstatic void test_header_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  /* Log entry and basic parameters */\n  test_header_log(\"test_header ENTRY: cls=%p param=%p connection=%p key=%p key_size=%zu value=%p value_size=%zu kind=%d num_headers(before)=%u\",\n                  cls, (void *)param, (void *)connection, (const void *)key, key_size, (const void *)value, value_size, (int)kind, (unsigned)param->num_headers);\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log visiting each header node */\n    test_header_log(\"Visiting header node: pos=%p next=%p kind=%d header=%p header_size=%zu value=%p value_size=%zu\",\n                    (void *)pos, (void *)pos->next, (int)pos->kind, (const void *)pos->header, pos->header_size, (const void *)pos->value, pos->value_size);\n\n    if (kind != pos->kind)\n    {\n      test_header_log(\"  kind mismatch: expected=%d actual=%d -> continue\", (int)kind, (int)pos->kind);\n      continue;\n    }\n    if (++i == param->num_headers)\n    {\n      test_header_log(\"  Header index match: i=%zu (target num_headers=%u)\", i, (unsigned)param->num_headers);\n\n      if (key_size != pos->header_size)\n      {\n        test_header_log(\"  header_size mismatch: expected=%zu actual=%zu -> return MHD_NO\", key_size, pos->header_size);\n        return MHD_NO;\n      }\n      if (value_size != pos->value_size)\n      {\n        test_header_log(\"  value_size mismatch: expected=%zu actual=%zu -> return MHD_NO\", value_size, pos->value_size);\n        return MHD_NO;\n      }\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n\n        /* Log a hex/print preview of header bytes (up to 32 bytes) */\n        {\n          size_t preview = key_size > 32u ? 32u : key_size;\n          test_header_log(\"  header preview (first %zu bytes):\", preview);\n          if (preview > 0 && NULL != key)\n          {\n            size_t j;\n            char buf[3 * 33];\n            char *bp = buf;\n            for (j = 0; j < preview; ++j)\n            {\n              int written = snprintf(bp, (size_t)(buf + sizeof(buf) - bp), \"%02X\", (unsigned char)key[j]);\n              if (written <= 0) break;\n              bp += written;\n              if (j + 1 < preview)\n              {\n                if ((size_t)(buf + sizeof(buf) - bp) > 1)\n                {\n                  *bp++ = ' ';\n                  *bp = '\\0';\n                }\n              }\n            }\n            test_header_log(\"    key(bytes): %s\", buf);\n          }\n          if (preview > 0 && NULL != pos->header)\n          {\n            size_t j;\n            char buf2[3 * 33];\n            char *bp2 = buf2;\n            for (j = 0; j < preview; ++j)\n            {\n              int written = snprintf(bp2, (size_t)(buf2 + sizeof(buf2) - bp2), \"%02X\", (unsigned char)pos->header[j]);\n              if (written <= 0) break;\n              bp2 += written;\n              if (j + 1 < preview)\n              {\n                if ((size_t)(buf2 + sizeof(buf2) - bp2) > 1)\n                {\n                  *bp2++ = ' ';\n                  *bp2 = '\\0';\n                }\n              }\n            }\n            test_header_log(\"    pos->header(bytes): %s\", buf2);\n          }\n        }\n\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n        {\n          test_header_log(\"  memcmp header != 0 -> return MHD_NO\");\n          return MHD_NO;\n        }\n        test_header_log(\"  memcmp header == 0\");\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n\n        /* Log a hex/print preview of value bytes (up to 32 bytes) */\n        {\n          size_t preview = value_size > 32u ? 32u : value_size;\n          if (preview > 0 && NULL != value)\n          {\n            size_t j;\n            char buf[3 * 33];\n            char *bp = buf;\n            for (j = 0; j < preview; ++j)\n            {\n              int written = snprintf(bp, (size_t)(buf + sizeof(buf) - bp), \"%02X\", (unsigned char)value[j]);\n              if (written <= 0) break;\n              bp += written;\n              if (j + 1 < preview)\n              {\n                if ((size_t)(buf + sizeof(buf) - bp) > 1)\n                {\n                  *bp++ = ' ';\n                  *bp = '\\0';\n                }\n              }\n            }\n            test_header_log(\"    value(bytes): %s\", buf);\n          }\n          if (preview > 0 && NULL != pos->value)\n          {\n            size_t j;\n            char buf2[3 * 33];\n            char *bp2 = buf2;\n            for (j = 0; j < preview; ++j)\n            {\n              int written = snprintf(bp2, (size_t)(buf2 + sizeof(buf2) - bp2), \"%02X\", (unsigned char)pos->value[j]);\n              if (written <= 0) break;\n              bp2 += written;\n              if (j + 1 < preview)\n              {\n                if ((size_t)(buf2 + sizeof(buf2) - bp2) > 1)\n                {\n                  *bp2++ = ' ';\n                  *bp2 = '\\0';\n                }\n              }\n            }\n            test_header_log(\"    pos->value(bytes): %s\", buf2);\n          }\n        }\n\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n        {\n          test_header_log(\"  memcmp value != 0 -> return MHD_NO\");\n          return MHD_NO;\n        }\n        test_header_log(\"  memcmp value == 0\");\n      }\n\n      test_header_log(\"  Matched header fully -> return MHD_YES\");\n      return MHD_YES;\n    }\n  }\n\n  test_header_log(\"No matching header found -> return MHD_NO\");\n  return MHD_NO;\n}\n"
}