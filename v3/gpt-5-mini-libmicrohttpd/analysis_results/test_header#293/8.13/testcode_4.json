{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'connection' is declared as 'struct MHD_Connection *connection' but is only used for read-only access (e.g. accessing connection->rq.headers_received). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. Declare it as 'const struct MHD_Connection *connection = param->connection;' (unless the code later modifies the pointee, in which case const would not be possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/2933.txt */\nstatic void test_header_probe(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  /* Log entry and initial state */\n  test_header_probe(\"test_header: enter cls=%p param=%p connection=%p key=%p key_size=%zu value=%p value_size=%zu kind=%d\",\n                    cls, (void *)param, (void *)connection, (const void *)key, key_size, (const void *)value, value_size, (int)kind);\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log iteration state */\n    test_header_probe(\"test_header: iter pos=%p next=%p pos->kind=%d pos->header_size=%zu pos->value_size=%zu i=%zu\",\n                      (void *)pos, (void *)pos->next, (int)pos->kind, pos->header_size, pos->value_size, i);\n\n    if (kind != pos->kind)\n    {\n      test_header_probe(\"test_header: skip due to kind mismatch (want=%d got=%d)\", (int)kind, (int)pos->kind);\n      continue;\n    }\n    if (++i == param->num_headers)\n    {\n      test_header_probe(\"test_header: candidate header index=%zu (param->num_headers=%zu)\", i, param->num_headers);\n\n      if (key_size != pos->header_size)\n      {\n        test_header_probe(\"test_header: header_size mismatch (expected=%zu actual=%zu) - returning MHD_NO\", key_size, pos->header_size);\n        return MHD_NO;\n      }\n      if (value_size != pos->value_size)\n      {\n        test_header_probe(\"test_header: value_size mismatch (expected=%zu actual=%zu) - returning MHD_NO\", value_size, pos->value_size);\n        return MHD_NO;\n      }\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n        {\n          test_header_probe(\"test_header: header memcmp mismatch - returning MHD_NO\");\n          return MHD_NO;\n        }\n        else\n        {\n          test_header_probe(\"test_header: header memcmp match\");\n        }\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n        {\n          test_header_probe(\"test_header: value memcmp mismatch - returning MHD_NO\");\n          return MHD_NO;\n        }\n        else\n        {\n          test_header_probe(\"test_header: value memcmp match\");\n        }\n      }\n      test_header_probe(\"test_header: all checks passed - returning MHD_YES\");\n      return MHD_YES;\n    }\n  }\n\n  test_header_probe(\"test_header: no matching header found - returning MHD_NO\");\n  return MHD_NO;\n}\n"
}