{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;",
    "mhd_assert (NULL != pos->header);",
    "struct MHD_HTTP_Req_Header *pos;",
    "for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)",
    "struct MHD_Connection *connection = param->connection;",
    "if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;",
    "mhd_assert (NULL != pos->value);"
  ],
  "explanation": "Pointers that refer to data that is only read in this function should be examined to see if they can be made to point to const-qualified types. The function parameters 'const char *key' and 'const char *value' are already const-qualified and therefore do not need investigation. The local integer/size variables (e.g. i, key_size, value_size) and the enum/return type are not pointer types and are not relevant to Rule 8.13. The parameter 'cls' is cast to 'struct test_header_param *' and the resulting object is modified (param->num_headers++), so that pointer cannot be const-qualified here and thus need not be flagged. Other non-pointer statements (returns, comparisons of sizes, increments) are not relevant to pointer const-qualification and therefore are not included."
}