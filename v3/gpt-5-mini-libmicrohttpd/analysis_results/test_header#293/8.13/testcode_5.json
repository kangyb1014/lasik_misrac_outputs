{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes pos->value to memcmp as read-only data. If the struct member pos->value is declared as 'char *' (non-const) rather than 'const char *', that is a violation of MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when it is only used for read access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: write structured logs to /tmp/logs/2933.txt */\nstatic void\nlog_header_event (const char *event,\n                  const struct test_header_param *param,\n                  struct MHD_Connection *connection,\n                  struct MHD_HTTP_Req_Header *pos,\n                  const char *key,\n                  size_t key_size,\n                  const char *value,\n                  size_t value_size,\n                  enum MHD_ValueKind kind,\n                  size_t idx)\n{\n  FILE *f = fopen(\"/tmp/logs/2933.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  (void) fprintf (f, \"EVENT: %s\\n\", event);\n  (void) fprintf (f, \"  param=%p, connection=%p, kind=%d, idx=%zu\\n\",\n                  (const void *) param,\n                  (void *) connection,\n                  (int) kind,\n                  idx);\n  (void) fprintf (f, \"  key=%p, key_size=%zu, value=%p, value_size=%zu\\n\",\n                  (const void *) key, key_size,\n                  (const void *) value, value_size);\n  if (NULL != pos)\n  {\n    (void) fprintf (f, \"  pos=%p, pos->header=%p, pos->header_size=%zu, pos->value=%p, pos->value_size=%zu, pos->kind=%d\\n\",\n                    (void *) pos,\n                    (void *) pos->header,\n                    (size_t) pos->header_size,\n                    (void *) pos->value,\n                    (size_t) pos->value_size,\n                    (int) pos->kind);\n\n    if (NULL != pos->header && 0u != pos->header_size)\n    {\n      size_t j, n = pos->header_size < 16u ? pos->header_size : 16u;\n      (void) fprintf (f, \"    header bytes (up to 16):\");\n      for (j = 0u; j < n; ++j)\n      {\n        (void) fprintf (f, \" %02X\", (unsigned int) ((unsigned char) pos->header[j]));\n      }\n      (void) fprintf (f, \"\\n\");\n    }\n    if (NULL != pos->value && 0u != pos->value_size)\n    {\n      size_t j, n = pos->value_size < 16u ? pos->value_size : 16u;\n      (void) fprintf (f, \"    value bytes (up to 16):\");\n      for (j = 0u; j < n; ++j)\n      {\n        (void) fprintf (f, \" %02X\", (unsigned int) ((unsigned char) pos->value[j]));\n      }\n      (void) fprintf (f, \"\\n\");\n    }\n  }\n  (void) fprintf (f, \"----\\n\");\n  (void) fclose (f);\n}\n\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  /* Log entry state */\n  log_header_event (\"entry\", param, connection, NULL, key, key_size, value, value_size, kind, 0u);\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    log_header_event (\"iter-start\", param, connection, pos, key, key_size, value, value_size, kind, i);\n\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n      {\n        log_header_event (\"header_size_mismatch\", param, connection, pos, key, key_size, value, value_size, kind, i);\n        return MHD_NO;\n      }\n      if (value_size != pos->value_size)\n      {\n        log_header_event (\"value_size_mismatch\", param, connection, pos, key, key_size, value, value_size, kind, i);\n        return MHD_NO;\n      }\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        {\n          int cmp = memcmp (key, pos->header, key_size);\n          if (0 != cmp)\n          {\n            log_header_event (\"key_memcmp_nomatch\", param, connection, pos, key, key_size, value, value_size, kind, i);\n            return MHD_NO;\n          }\n          else\n          {\n            log_header_event (\"key_memcmp_match\", param, connection, pos, key, key_size, value, value_size, kind, i);\n          }\n        }\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        {\n          int cmp = memcmp (value, pos->value, value_size);\n          if (0 != cmp)\n          {\n            /* Log the fact that pos->value was used as read-only data in memcmp */\n            log_header_event (\"value_memcmp_nomatch\", param, connection, pos, key, key_size, value, value_size, kind, i);\n            return MHD_NO;\n          }\n          else\n          {\n            log_header_event (\"value_memcmp_match\", param, connection, pos, key, key_size, value, value_size, kind, i);\n          }\n        }\n      }\n      log_header_event (\"return_yes\", param, connection, pos, key, key_size, value, value_size, kind, i);\n      return MHD_YES;\n    }\n  }\n  log_header_event (\"return_no_not_found\", param, connection, NULL, key, key_size, value, value_size, kind, i);\n  return MHD_NO;\n}\n"
}