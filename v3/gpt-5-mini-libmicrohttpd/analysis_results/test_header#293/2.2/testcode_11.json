{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call mhd_assert(NULL != key) is an assertion-only operation. If mhd_assert is implemented as an assert-like macro that becomes a no-op in release builds (e.g. under NDEBUG or similar), the call has no effect at runtime and its removal would not change program behaviour. In that case the statement constitutes dead code and violates MISRA C 2023 Rule 2.2. If, however, mhd_assert performs a runtime action with observable effects (logging, abort, etc.), then it is not dead code and the rule is not violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2932.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/2932.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2932.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  /* Log entry and current header count before increment */\n  probe_log(\"test_header ENTRY: cls=%p param=%p before_num_headers=%zu\",\n            cls, (void *)param, (size_t)param->num_headers);\n\n  param->num_headers++;\n\n  probe_log(\"num_headers incremented: now=%zu\", (size_t)param->num_headers);\n\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n\n    /* Log when a header of the correct kind is encountered */\n    probe_log(\"iter header: pos=%p kind=%d pos->kind=%d i=%zu\",\n              (void *)pos, (int)kind, (int)pos->kind, i);\n\n    if (++i == param->num_headers)\n    {\n      probe_log(\"matching header index reached: i=%zu (target=%zu)\", i, param->num_headers);\n\n      probe_log(\"header sizes: key_size=%zu pos->header_size=%zu value_size=%zu pos->value_size=%zu\",\n                key_size, pos->header_size, value_size, pos->value_size);\n\n      if (key_size != pos->header_size)\n      {\n        probe_log(\"mismatch header_size -> returning MHD_NO\");\n        return MHD_NO;\n      }\n      if (value_size != pos->value_size)\n      {\n        probe_log(\"mismatch value_size -> returning MHD_NO\");\n        return MHD_NO;\n      }\n      if (0 != key_size)\n      {\n        /* Log pointer state before assertion (do not dereference) */\n        probe_log(\"about to assert key and pos->header: key=%p pos->header=%p key_size=%zu\",\n                  (const void *)key, (const void *)pos->header, key_size);\n\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n\n        probe_log(\"assertions for header passed (or were no-ops). Calling memcmp on %zu bytes\", key_size);\n\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n        {\n          probe_log(\"memcmp(header) mismatch -> returning MHD_NO\");\n          return MHD_NO;\n        }\n        probe_log(\"memcmp(header) match\");\n      }\n      if (0 != value_size)\n      {\n        /* Log pointer state before assertion (do not dereference) */\n        probe_log(\"about to assert value and pos->value: value=%p pos->value=%p value_size=%zu\",\n                  (const void *)value, (const void *)pos->value, value_size);\n\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n\n        probe_log(\"assertions for value passed (or were no-ops). Calling memcmp on %zu bytes\", value_size);\n\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n        {\n          probe_log(\"memcmp(value) mismatch -> returning MHD_NO\");\n          return MHD_NO;\n        }\n        probe_log(\"memcmp(value) match\");\n      }\n\n      probe_log(\"All checks passed for this header -> returning MHD_YES\");\n      return MHD_YES;\n    }\n  }\n\n  probe_log(\"no matching header found -> returning MHD_NO\");\n  return MHD_NO;\n}\n"
}