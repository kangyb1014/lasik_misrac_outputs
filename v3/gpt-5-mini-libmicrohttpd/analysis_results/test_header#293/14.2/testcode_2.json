{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe loop counter is modified inside the loop body: the expression '++i' increments the loop counter within the body (if (++i == param->num_headers)). MISRA C 2023 Rule 14.2 requires the loop counter to be defined/initialized in the for's first clause (or the first clause empty) and only modified by the third clause. Here the for's first clause initializes 'pos' (not the counter), the third clause updates 'pos' (not the counter), and 'i' is incremented in the body \u2014 this violates the rule (clauses 1, 3 and 4).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2934.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of test_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified test_header code.\n",
  "test_code": "typedef struct FILE FILE;\nextern FILE *fopen(const char *, const char *);\nextern int fprintf(FILE *, const char *, ...);\nextern int fclose(FILE *);\n\nstatic void\ntest_header_log(struct test_header_param *param,\n                const char *event,\n                size_t i,\n                const struct MHD_HTTP_Req_Header *pos,\n                const char *key,\n                size_t key_size,\n                const char *value,\n                size_t value_size,\n                enum MHD_ValueKind kind)\n{\n  FILE *f = fopen(\"/tmp/logs/2934.txt\", \"a\");\n  if (f)\n  {\n    /* Log key control/state information to help reproduce the violation scenario. */\n    fprintf(f,\n            \"event=%s param=%p connection=%p num_headers=%zu i=%zu kind=%d pos=%p header_size=%zu value_size=%zu key=%p value=%p\\n\",\n            event,\n            (void *) param,\n            (void *) (param ? param->connection : (void *)0),\n            (param ? param->num_headers : (size_t)0),\n            i,\n            (int) kind,\n            (void *) pos,\n            (pos ? pos->header_size : (size_t)0),\n            (pos ? pos->value_size : (size_t)0),\n            (const void *) key,\n            (const void *) value);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n\n  test_header_log(param, \"entry\", i, NULL, key, key_size, value, value_size, kind);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    test_header_log(param, \"loop_iteration_start\", i, pos, key, key_size, value, value_size, kind);\n\n    if (kind != pos->kind)\n    {\n      test_header_log(param, \"kind_mismatch\", i, pos, key, key_size, value, value_size, kind);\n      continue;\n    }\n\n    /* Increment of the loop counter occurs in the loop body (same behaviour as original). */\n    ++i;\n    test_header_log(param, \"counter_incremented\", i, pos, key, key_size, value, value_size, kind);\n\n    if (i == param->num_headers)\n    {\n      test_header_log(param, \"candidate_match\", i, pos, key, key_size, value, value_size, kind);\n\n      if (key_size != pos->header_size)\n      {\n        test_header_log(param, \"header_size_mismatch\", i, pos, key, key_size, value, value_size, kind);\n        return MHD_NO;\n      }\n      if (value_size != pos->value_size)\n      {\n        test_header_log(param, \"value_size_mismatch\", i, pos, key, key_size, value, value_size, kind);\n        return MHD_NO;\n      }\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n        {\n          test_header_log(param, \"header_content_mismatch\", i, pos, key, key_size, value, value_size, kind);\n          return MHD_NO;\n        }\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n        {\n          test_header_log(param, \"value_content_mismatch\", i, pos, key, key_size, value, value_size, kind);\n          return MHD_NO;\n        }\n      }\n      test_header_log(param, \"match_success\", i, pos, key, key_size, value, value_size, kind);\n      return MHD_YES;\n    }\n  }\n\n  test_header_log(param, \"no_match_found\", i, NULL, key, key_size, value, value_size, kind);\n  return MHD_NO;\n}\n"
}