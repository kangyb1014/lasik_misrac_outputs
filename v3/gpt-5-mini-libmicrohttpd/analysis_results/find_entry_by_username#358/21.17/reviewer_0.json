{
  "user_message": "An agent A claimed that the following find_entry_by_username code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of find_entry_by_username.\n```c\nstatic struct UserEntry *\nfind_entry_by_username (const char *const username)\n{\n  size_t i;\n\n  for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n  {\n    struct UserEntry *entry;\n\n    entry = user_ids + i;\n    if (0 == strcmp (username, entry->username))\n      return entry;\n  }\n  return NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThis call to strcmp can read beyond object bounds if either argument is not a valid NUL-terminated string. For example, if struct UserEntry has a fixed-size array char username[16]; and it was populated with strncpy(entry->username, src, sizeof(entry->username)) where src is >=16 bytes, strncpy will not NUL-terminate and strcmp(username, entry->username) may read past the 16-byte array \u2014 violating MISRA C 2023 Rule 21.17. The rule is also violated if the caller passes a username pointer that is not NUL-terminated or not within its object bounds.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. strcmp reads both arguments until a NUL byte; if either argument is not NUL-terminated within the bounds of the object pointed to, strcmp will access beyond the object's bounds and thus violate MISRA C 2023 Rule 21.17. The scenario given is realistic: a fixed-size char username[N] populated with strncpy(src, ..., N) may not be NUL-terminated if src length >= N, and a caller-supplied username pointer might also be non-NUL-terminated. The shown code performs strcmp without any guarantee or validation that both pointers reference NUL-terminated strings contained within their object bounds, so it can lead to out-of-bounds reads. Note: the code would be compliant only if there is a verified precondition (and enforcement) that both arguments are valid, NUL-terminated strings within their object bounds; otherwise use of a length-bounded comparison or explicit validation is required to meet Rule 21.17."
}