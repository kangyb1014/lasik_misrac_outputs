{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of find_entry_by_username:\n```c\nstatic struct UserEntry *\nfind_entry_by_username (const char *const username)\n{\n  size_t i;\n\n  for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n  {\n    struct UserEntry *entry;\n\n    entry = user_ids + i;\n    if (0 == strcmp (username, entry->username))\n      return entry;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler-specific language extensions are used in the provided function. Specifically:\n- No use of vendor-specific keywords or identifiers such as __attribute__, __asm, __builtin_*, typeof, __extension__, __inline__ or similar GCC/Clang/MSVC extensions.\n- All declarations and types are standard C: 'static', 'struct UserEntry', 'size_t', and 'const char *const' are standard C constructs.\n- Expressions and operators are standard: sizeof, pointer arithmetic (user_ids + i), pre-increment (++i), and the comparison (0 == strcmp(...)) are all standard C.\n- The use of NULL and the library function strcmp are standard C (from <stddef.h>/<string.h>), not compiler extensions.\n- No statement expressions, inline assembly, nonstandard pragmas, or other extension-specific syntax appears.\nTherefore there are no fragments that need investigation for use of language extensions under MISRA C 2023 Rule 1.2."
}