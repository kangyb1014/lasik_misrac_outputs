{
  "user_message": "An agent A claimed that the following MHD_MD5_update code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_MD5_update.\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn MHD_MD5_update the non-const parameter 'length' (declared as size_t length) is modified by the statement 'length -= MD5_BLOCK_SIZE;'. This directly changes a function parameter variable and therefore violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[MHD_MD5_update] entry (before count add): ctx=0x7ffeef43a1a0, data=0x55b62b87601b, length=28, bytes_have=0, ctx->count=0\n[MHD_MD5_update] after count add: ctx=0x7ffeef43a1a0, data=0x55b62b87601b, length=28, bytes_have=0, ctx->count=28\n[MHD_MD5_update] about to memcpy remaining bytes to buffer: ctx=0x7ffeef43a1a0, data=0x55b62b87601b, length=28, bytes_have=0, ctx->count=28\n[MHD_MD5_update] after memcpy remaining bytes: ctx=0x7ffeef43a1a0, data=0x55b62b87601b, length=28, bytes_have=0, ctx->count=28\n[MHD_MD5_update] exit: ctx=0x7ffeef43a1a0, data=0x55b62b87601b, length=28, bytes_have=0, ctx->count=28\n[MHD_MD5_update] entry (before count add): ctx=0x7ffeef43a1a0, data=0x55b62b876038, length=14, bytes_have=0, ctx->count=0\n[MHD_MD5_update] after count add: ctx=0x7ffeef43a1a0, data=0x55b62b876038, length=14, bytes_have=0, ctx->count=14\n[MHD_MD5_update] about to memcpy remaining bytes to buffer: ctx=0x7ffeef43a1a0, data=0x55b62b876038, length=14, bytes_have=0, ctx->count=14\n[MHD_MD5_update] after memcpy remaining bytes: ctx=0x7ffeef43a1a0, data=0x55b62b876038, length=14, bytes_have=0, ctx->count=14\n[MHD_MD5_update] exit: ctx=0x7ffeef43a1a0, data=0x55b62b876038, length=14, bytes_have=0, ctx->count=14\n[MHD_MD5_update] entry (before count add): ctx=0x7ffeef43a1a0, data=0x55b62b876047, length=26, bytes_have=0, ctx->count=0\n[MHD_MD5_update] after count add: ctx=0x7ffeef43a1a0, data=0x55b62b876047, length=26, bytes_have=0, ctx->count=26\n[MHD_MD5_update] about to memcpy remaining bytes to buffer: ctx=0x7ffeef43a1a0, data=0x55b62b876047, length=26, bytes_have=0, ctx->count=26\n[MHD_MD5_update] after memcpy remaining bytes: ctx=0x7ffeef43a1a0, data=0x55b62b876047, length=26, bytes_have=0, ctx->count=26\n[MHD_MD5_update] exit: ctx=0x7ffeef43a1a0, data=0x55b62b876047, length=26, bytes_have=0, ctx->count=26\n[MHD_MD5_update] entry (before count add): ctx=0x7ffeef43a1a0, data=0x55b62b8760b0, length=26, bytes_have=0, ctx->count=0\n[MHD_MD5_update] after count add: ctx=0x7ffeef43a1a0, data=0x55b62b8760b0, length=26, bytes_have=0, ctx->count=26\n[MHD_MD5_update] about to memcpy remaining bytes to buffer: ctx=0x7ffeef43a1a0, data=0x55b62b8760b0, length=26, bytes_have=0, ctx->count=26\n[MHD_MD5_update] after memcpy remaining bytes: ctx=0x7ffeef43a1a0, data=0x55b62b8760b0, length=26, bytes_have=0, ctx->count=26\n[MHD_MD5_update] exit: ctx=0x7ffeef43a1a0, data=0x55b62b8760b0, length=26, bytes_have=0, ctx->count=26\n[MHD_MD5_update] entry (before count add): ctx=0x7ffeef43a1a0, data=0x55b62b876062, length=104, bytes_have=0, ctx->count=0\n[MHD_MD5_update] after count add: ctx=0x7ffeef43a1a0, data=0x55b62b876062, length=104, bytes_have=0, ctx->count=104\n[MHD_MD5_update] while-loop iteration: about to transform full block: ctx=0x7ffeef43a1a0, data=0x55b62b876062, length=104, bytes_have=0, ctx->count=104\n[MHD_MD5_update] while-loop iteration: after data += & length -=: ctx=0x7ffeef43a1a0, data=0x55b62b8760a2, length=40, bytes_have=0, ctx->count=104\n[MHD_MD5_update] about to memcpy remaining bytes to buffer: ctx=0x7ffeef43a1a0, data=0x55b62b8760a2, length=40, bytes_have=0, ctx->count=104\n[MHD_MD5_update] after memcpy remaining bytes: ctx=0x7ffeef43a1a0, data=0x55b62b8760a2, length=40, bytes_have=0, ctx->count=104\n[MHD_MD5_update] exit: ctx=0x7ffeef43a1a0, data=0x55b62b8760a2, length=40, bytes_have=0, ctx->count=104\n[MHD_MD5_update] entry (before count add): ctx=0x7ffeef43a1a0, data=0x55b62b8760cb, length=378, bytes_have=0, ctx->count=0\n[MHD_MD5_update] after count add: ctx=0x7ffeef43a1a0, data=0x55b62b8760cb, length=378, bytes_have=0, ctx->count=378\n[MHD_MD5_update] while-loop iteration: about to transform full block: ctx=0x7ffeef43a1a0, data=0x55b62b8760cb, length=378, bytes_have=0, ctx->count=378\n[MHD_MD5_update] while-loop iteration: after data += & length -=: ctx=0x7ffeef43a1a0, data=0x55b62b87610b, length=314, bytes_have=0, ctx->count=378\n[MHD_MD5_update] while-loop iteration: about to transform full block: ctx=0x7ffeef43a1a0, data=0x55b62b87610b, length=314, bytes_have=0, ctx->count=378\n[MHD_MD5_update] while-loop iteration: after data += & length -=: ctx=\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified (the object pointed to by a pointer parameter may be modified, but the pointer itself shall not be modified). In the provided MHD_MD5_update implementation the parameter variable length (type size_t) is modified (e.g. length -= bytes_left; length -= MD5_BLOCK_SIZE;). That is a direct modification of a non-const function parameter and therefore violates Rule 17.8. (As an additional note, the code also modifies the pointer parameter data (data += ...), which likewise violates the rule because the pointer itself is being changed; modifying *ctx->... is allowed because the object referred to by a pointer parameter may be modified.) To conform, make local copies (e.g. size_t len = length; const uint8_t *p = data;) and modify those instead, leaving the parameter variables unmodified."
}