{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_socket_set_nodelay_:\n```c\nint\nMHD_socket_set_nodelay_ (MHD_socket sock,\n                         bool on)\n{\n#ifdef TCP_NODELAY\n  {\n    const MHD_SCKT_OPT_BOOL_ off_val = 0;\n    const MHD_SCKT_OPT_BOOL_ on_val = 1;\n    /* Disable Nagle's algorithm for normal buffering */\n    return setsockopt (sock,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) ((on) ? &on_val : &off_val),\n                       sizeof (on_val));\n  }\n#else\n  (void) sock;\n  return 0;\n#endif /* TCP_NODELAY */\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#else\n  (void) sock;\n  return 0;\n#endif /* TCP_NODELAY */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No \u2014 the fragment is in the #else branch of an #ifdef TCP_NODELAY. That branch is active (and thus reachable at runtime) when TCP_NODELAY is not defined, so the code is not inherently unreachable. It would only be absent from the built project if the project configuration always defines TCP_NODELAY; even then the source text exists but the branch is not compiled, so there is no unreachable compiled code in the normal sense. A true MISRA 2.1 violation would occur if code remained in the compiled translation units that can never be executed in any build configuration (for example, code after an unconditional return that is present in every compilation configuration), which is not the case here."
}