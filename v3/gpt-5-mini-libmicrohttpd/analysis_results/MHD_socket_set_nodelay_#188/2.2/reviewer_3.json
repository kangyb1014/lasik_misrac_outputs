{
  "user_message": "An agent A claimed that the following MHD_socket_set_nodelay_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_socket_set_nodelay_.\n```c\nint\nMHD_socket_set_nodelay_ (MHD_socket sock,\n                         bool on)\n{\n#ifdef TCP_NODELAY\n  {\n    const MHD_SCKT_OPT_BOOL_ off_val = 0;\n    const MHD_SCKT_OPT_BOOL_ on_val = 1;\n    /* Disable Nagle's algorithm for normal buffering */\n    return setsockopt (sock,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) ((on) ? &on_val : &off_val),\n                       sizeof (on_val));\n  }\n#else\n  (void) sock;\n  return 0;\n#endif /* TCP_NODELAY */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement '(void) sock;' in the #else branch is an executed no-op whose removal would not affect program behaviour (it only suppresses an unused-parameter warning). According to MISRA C 2023 Rule 2.2 this constitutes dead code.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The (void) sock; statement is an explicit \u201cuse\u201d of the parameter to suppress an unused\u2011parameter diagnostic when TCP_NODELAY is not defined. Although the cast produces no runtime effect, the idiom is a deliberate, documented use (to avoid a compiler/warning condition) and is not the kind of truly redundant operation that MISRA\u2019s dead\u2011code prohibition targets. MISRA\u2019s Rule 2.2 is intended to forbid operations that are executed but have no purpose for the program\u2019s behaviour; in practice the void\u2011cast is an accepted, minimal way to mark a parameter as intentionally unused (and MISRA guidance/implementations commonly treat this pattern as the appropriate mitigation rather than \u201cdead code\u201d). Therefore A\u2019s claim that this specific statement constitutes a Rule 2.2 violation is not correct."
}