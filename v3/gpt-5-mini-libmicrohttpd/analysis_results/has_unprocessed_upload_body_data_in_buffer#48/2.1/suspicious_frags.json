{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of has_unprocessed_upload_body_data_in_buffer:\n```c\nstatic bool\nhas_unprocessed_upload_body_data_in_buffer (struct MHD_Connection *c)\n{\n  mhd_assert (MHD_CONNECTION_BODY_RECEIVING == c->state);\n  if (! c->rq.have_chunked_upload)\n    return 0 != c->read_buffer_offset;\n\n  /* Chunked upload */\n  mhd_assert (0 != c->rq.remaining_upload_size); /* Must not be possible in MHD_CONNECTION_BODY_RECEIVING state */\n  if (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    return false;\n  }\n  return 0 != c->read_buffer_offset; /* Chunk payload data in the read buffer */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert (0 != c->rq.remaining_upload_size); /* Must not be possible in MHD_CONNECTION_BODY_RECEIVING state */",
    "if (! c->rq.have_chunked_upload)\n    return 0 != c->read_buffer_offset;",
    "if (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    return false;\n  }",
    "mhd_assert (MHD_CONNECTION_BODY_RECEIVING == c->state);",
    "return 0 != c->read_buffer_offset; /* Chunk payload data in the read buffer */"
  ],
  "explanation": "I flagged all locations that could indicate unreachable code or depend on asserted invariants that, if violated, would make subsequent code paths unreachable. Specifically: the two mhd_assert statements encode assumptions about call context/state that may render parts of the function unreachable if those assumptions always hold (or if the assert aborts in debug builds), the early return for the non-chunked path and the final return for the chunked payload path are symmetric returns that could be redundant/unreachable depending on the have_chunked_upload and chunk-offset/size invariants, and the branch that returns false when current_chunk_offset == current_chunk_size relies on the relationship between chunk sizes/offsets and total remaining size. I did not mark comments or simple expression evaluations beyond these lines because they are not control-flow constructs and do not in themselves create unreachable code; likewise there are no other conditional/return statements in the function that could hide additional unreachable fragments beyond those listed."
}