{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_ip_addr_to_key:\n```c\nstatic enum MHD_Result\nMHD_ip_addr_to_key (const struct sockaddr_storage *addr,\n                    socklen_t addrlen,\n                    struct MHD_IPCount *key)\n{\n  memset (key,\n          0,\n          sizeof(*key));\n\n  /* IPv4 addresses */\n  if (sizeof (struct sockaddr_in) <= (size_t) addrlen)\n  {\n    if (AF_INET == addr->ss_family)\n    {\n      key->family = AF_INET;\n      memcpy (&key->addr.ipv4,\n              &((const struct sockaddr_in *) addr)->sin_addr,\n              sizeof(((const struct sockaddr_in *) NULL)->sin_addr));\n      return MHD_YES;\n    }\n  }\n\n#ifdef HAVE_INET6\n  if (sizeof (struct sockaddr_in6) <= (size_t) addrlen)\n  {\n    /* IPv6 addresses */\n    if (AF_INET6 == addr->ss_family)\n    {\n      key->family = AF_INET6;\n      memcpy (&key->addr.ipv6,\n              &((const struct sockaddr_in6 *) addr)->sin6_addr,\n              sizeof(((const struct sockaddr_in6 *) NULL)->sin6_addr));\n      return MHD_YES;\n    }\n  }\n#endif\n\n  /* Some other address */\n  return MHD_NO;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no controlling expressions that are invariant and thus no fragments requiring investigation for MISRA C 2023 Rule 14.3. Reasons by construct:\n\n- if (sizeof (struct sockaddr_in) <= (size_t) addrlen)\n  - This controlling expression is not invariant: sizeof(struct sockaddr_in) is a constant but it is compared against the parameter addrlen, which is a runtime value, so the overall expression can vary at runtime.\n\n- if (AF_INET == addr->ss_family)\n  - This depends on addr->ss_family, a runtime value in the supplied sockaddr_storage, so it is not invariant.\n\n- #ifdef HAVE_INET6 / if (sizeof (struct sockaddr_in6) <= (size_t) addrlen)\n  - The preprocessor conditional (#ifdef) is handled at compile time and is not a C controlling expression subject to Rule 14.3. The if expression itself compares a constant sizeof to the runtime addrlen, so it is not invariant.\n\n- if (AF_INET6 == addr->ss_family)\n  - As above, this depends on addr->ss_family at runtime and therefore is not invariant.\n\n- The memcpy calls use sizeof(((const struct sockaddr_in *) NULL)->sin_addr) (and the IPv6 equivalent). These sizeof operands are compile-time constants but are not controlling expressions.\n\n- There are no loops (other than the preprocessor condition), so the allowed exceptions for invariant controlling expressions creating infinite loops or the do-while special case do not apply.\n\nGiven all runtime-dependent conditions above, there are no invariant controlling expressions to flag under Rule 14.3 in the provided function."
}