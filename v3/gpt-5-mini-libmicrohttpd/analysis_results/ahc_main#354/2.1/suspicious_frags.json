{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ahc_main:\n```c\nstatic enum MHD_Result\nahc_main (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size,\n          void **req_cls)\n{\n  static int already_called_marker;\n  size_t url_len;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      && (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return reply_with_method_not_supported (connection);\n\n  if (0 != *upload_data_size)\n    return MHD_NO; /* No upload expected for GET or HEAD */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (url, \"/\"))\n    return reply_with_main_page (connection);\n\n  url_len = strlen (url);\n\n  if ((strlen (SEC_AREA1_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA1_URL, strlen (SEC_AREA1_URL))))\n    return handle_sec_areas_req (connection, url, 1); /* The requested URL is within SEC_AREA1_URL */\n\n  if ((strlen (SEC_AREA2_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA2_URL, strlen (SEC_AREA2_URL))))\n    return handle_sec_areas_req (connection, url, 2); /* The requested URL is within SEC_AREA2_URL */\n\n  return reply_with_page_not_found (connection);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if ((strlen (SEC_AREA1_URL) <= url_len)\n    && (0 == memcmp (url, SEC_AREA1_URL, strlen (SEC_AREA1_URL))))\n  return handle_sec_areas_req (connection, url, 1); /* The requested URL is within SEC_AREA1_URL */",
    "return reply_with_page_not_found (connection);",
    "if ((strlen (SEC_AREA2_URL) <= url_len)\n    && (0 == memcmp (url, SEC_AREA2_URL, strlen (SEC_AREA2_URL))))\n  return handle_sec_areas_req (connection, url, 2); /* The requested URL is within SEC_AREA2_URL */",
    "if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n    && (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n  return reply_with_method_not_supported (connection);",
    "if (0 != *upload_data_size)\n  return MHD_NO; /* No upload expected for GET or HEAD */",
    "if (&already_called_marker != *req_cls)\n{ /* Called for the first time, request not fully read yet */\n  *req_cls = &already_called_marker;\n  /* Wait for complete request */\n  return MHD_YES;\n}",
    "if (0 == strcmp (url, \"/\"))\n  return reply_with_main_page (connection);"
  ],
  "explanation": "I selected all control-flow branches and return points because unreachable code is a control-flow property; these fragments are the places where code execution may be terminated early or where later code may become unreachable depending on inputs/state. Other parts of the function do not contain alternate control-flow (they are declarations, simple (void) casts to suppress warnings, the url_len assignment, or trivial expressions) and therefore do not create statically unreachable code by themselves. The listed fragments cover every conditional/return site in the function that can make subsequent statements unreachable, so no other fragments need investigation for MISRA C Rule 2.1."
}