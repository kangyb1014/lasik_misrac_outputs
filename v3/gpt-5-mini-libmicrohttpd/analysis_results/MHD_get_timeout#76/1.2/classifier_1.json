{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout (struct MHD_Daemon *daemon,\n                 MHD_UNSIGNED_LONG_LONG *timeout)\n{\n  uint64_t t64;\n  if (MHD_NO == MHD_get_timeout64 (daemon, &t64))\n    return MHD_NO;\n\n#if SIZEOF_UINT64_T > SIZEOF_UNSIGNED_LONG_LONG\n  if (ULLONG_MAX <= t64)\n    *timeout = ULLONG_MAX;\n  else\n#endif /* SIZEOF_UINT64_T > SIZEOF_UNSIGNED_LONG_LONG */\n  *timeout = (MHD_UNSIGNED_LONG_LONG) t64;\n  return MHD_YES;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_UNSIGNED_LONG_LONG\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: 'MHD_UNSIGNED_LONG_LONG' is an identifier (typedef or macro) and not a compiler language extension. The fragment does not use any compiler-specific keywords or documented language extensions. (If this identifier were defined using a compiler-specific extension\u2014e.g. a nonstandard type like __int128 or other documented extension\u2014then Rule 1.2 would be violated.)"
}