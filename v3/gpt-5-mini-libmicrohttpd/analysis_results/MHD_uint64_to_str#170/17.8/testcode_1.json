{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'val %= divisor;' assigns to the function parameter 'val', modifying a parameter variable. MISRA C 2023 Rule 17.8 forbids modifying function parameters, so this is a violation. (Remedy: copy 'val' to a local variable and modify the local.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint64_to_str code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_uint64_to_str as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_uint64_to_str:\n```c\nsize_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val %= divisor;\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\nPlease provide the modified MHD_uint64_to_str code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Prototype for external assertion used in the original code. */\nextern void mhd_assert (int cond);\n\n/* Helper probe: append a single log entry describing current state. */\nstatic void\nmhd_probe_log (const char *event,\n               uint64_t val,\n               uint64_t divisor,\n               int digit,\n               size_t buf_size)\n{\n  FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Use casts to unsigned long long for portable printing of uint64_t. */\n  fprintf (f, \"%s: val=%llu divisor=%llu digit=%d buf_size=%zu\\n\",\n           event,\n           (unsigned long long) val,\n           (unsigned long long) divisor,\n           digit,\n           buf_size);\n  fclose (f);\n}\n\nsize_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  /* Log entry state */\n  digit = (int) (val / divisor);\n  mhd_probe_log (\"entry (after initial digit)\", val, divisor, digit, buf_size);\n\n  chr = buf;\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    /* Log before changing divisor */\n    mhd_probe_log (\"leading-zero-loop (before divisor/=10)\", val, divisor, digit, buf_size);\n\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n\n    /* Log after updating divisor and digit */\n    mhd_probe_log (\"leading-zero-loop (after divisor/=10)\", val, divisor, digit, buf_size);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n    {\n      size_t len = (size_t) (chr - buf);\n      mhd_probe_log (\"return (finished, divisor==1)\", val, divisor, digit, buf_size);\n      /* Log the length as a final note */\n      {\n        FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n        if (NULL != f)\n        {\n          fprintf (f, \"length=%zu\\n\", len);\n          fclose (f);\n        }\n      }\n      return len;\n    }\n\n    /* Log just before the modification of the parameter 'val' (this is the\n       statement reported as violating MISRA C 2023 Rule 17.8).\n       We explicitly record the value before and after the operation for\n       forensic evidence. */\n    mhd_probe_log (\"before_val_mod\", val, divisor, digit, buf_size);\n\n    val %= divisor; /* <--- The reported modification of a function parameter */\n\n    mhd_probe_log (\"after_val_mod\", val, divisor, digit, buf_size);\n\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n\n    /* Log state at end of loop iteration */\n    mhd_probe_log (\"end_iteration\", val, divisor, digit, buf_size);\n  }\n\n  mhd_probe_log (\"return (buffer too small)\", val, divisor, digit, buf_size);\n  return 0; /* The buffer is too small */\n}\n"
}