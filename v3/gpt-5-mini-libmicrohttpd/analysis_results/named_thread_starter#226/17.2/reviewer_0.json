{
  "user_message": "An agent A claimed that the following named_thread_starter code violates the MISRA C 2023 rule 17.2.\n<misra_rule>\nMISRA C 2023 Rule 17.2 is Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<target_code>\nHere is the original code of named_thread_starter.\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function obtains a function pointer thr_func from param->start_routine and then calls it. If param->start_routine was set to named_thread_starter (i.e. the wrapper itself), the call return thr_func(arg) will invoke named_thread_starter indirectly (recursively). This constitutes an indirect self-call and violates MISRA C 2023 Rule 17.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.2 forbids a function from calling itself directly or indirectly. named_thread_starter obtains a function pointer from param->start_routine and unconditionally calls it (return thr_func(arg)). Nothing in the shown code prevents the caller from placing a pointer to named_thread_starter into param->start_routine, so at run time thr_func could be named_thread_starter and the call would become an indirect recursive self-call. Absent a provable external guarantee that start_routine can never be named_thread_starter (which is not present in the snippet), this is a violation of Rule 17.2. To comply you must ensure by construction or check that the pointer cannot alias named_thread_starter (e.g. sanity check before call, use a different wrapper entry point, or otherwise statically guarantee no indirect recursion)."
}