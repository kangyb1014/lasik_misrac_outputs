{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "MHD_set_cur_thread_name_ (param->name);",
    "MHD_THREAD_START_ROUTINE_ thr_func;",
    "static MHD_THRD_RTRN_TYPE_  MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)",
    "return (MHD_THRD_RTRN_TYPE_) 0;"
  ],
  "explanation": "Only macros that are likely to hide compiler-specific language extensions need investigation. The listed fragments use macro identifiers (MHD_THRD_RTRN_TYPE_, MHD_THRD_CALL_SPEC_, MHD_THREAD_START_ROUTINE_, MHD_set_cur_thread_name_) that commonly expand to calling-convention keywords, nonstandard return types, or compiler attributes \u2014 these must be checked against the compiler documentation. All other code constructs in the snippet are standard C: struct pointer cast, pointer assignments, free(), standard function-pointer call (thr_func(arg)), static function definition, and the control/return flow. There is no inline assembly, GCC/Clang-specific __attribute__ or __asm__ usage, no typeof, statement-expressions, or C++ constructs that would indicate other language extensions. Therefore only the macro-using fragments above warrant further investigation for Rule 1.2."
}