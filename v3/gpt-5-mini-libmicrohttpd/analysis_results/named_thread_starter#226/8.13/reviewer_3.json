{
  "user_message": "An agent A claimed that the following named_thread_starter code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of named_thread_starter.\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'param' is declared as 'struct MHD_named_helper_param_ *const param' (a const pointer to a non-const pointee) but the function only reads members from *param (param->name, param->arg, param->start_routine). The fragment 'arg = param->arg;' copies a pointer out of a non-const pointee into a non-const 'void *arg'. Since the pointee is not modified, the pointee type could and should be const-qualified (e.g. 'const struct MHD_named_helper_param_ *const param' and possibly 'const void *arg'), so this use violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nnamed_thread_starter: entry data=0x557f4ec2fca0\nnamed_thread_starter: param=0x557f4ec2fca0\nnamed_thread_starter: param->name=0x7fac1a8399d1\nnamed_thread_starter: param->name string=\"MHD-single\"\nMHD_set_cur_thread_name_: name=MHD-single\nnamed_thread_starter: copied arg=0x557f4ec2f820\nnamed_thread_starter: copied start_routine=0x7fac1a802800\nnamed_thread_starter: freed data pointer=0x557f4ec2fca0\nnamed_thread_starter: invoking thread start routine with arg=0x557f4ec2f820\nnamed_thread_starter: thread start routine returned (nil)\nnamed_thread_starter: entry data=0x557f4ec2fca0\nnamed_thread_starter: param=0x557f4ec2fca0\nnamed_thread_starter: param->name=0x7fac1a8399c6\nnamed_thread_starter: param->name string=\"MHD-listen\"\nMHD_set_cur_thread_name_: name=MHD-listen\nnamed_thread_starter: copied arg=0x557f4ec2fde0\nnamed_thread_starter: copied start_routine=0x7fac1a802800\nnamed_thread_starter: freed data pointer=0x557f4ec2fca0\nnamed_thread_starter: invoking thread start routine with arg=0x557f4ec2fde0\nnamed_thread_starter: thread start routine returned (nil)\nnamed_thread_starter: entry data=0x557f4ec30c40\nnamed_thread_starter: param=0x557f4ec30c40\nnamed_thread_starter: param->name=0x7fac1a839b20\nnamed_thread_starter: param->name string=\"MHD-worker\"\nMHD_set_cur_thread_name_: name=MHD-worker\nnamed_thread_starter: copied arg=0x557f4ec30988\nnamed_thread_starter: copied start_routine=0x7fac1a802800\nnamed_thread_starter: freed data pointer=0x557f4ec30c40\nnamed_thread_starter: invoking thread start routine with arg=0x557f4ec30988\nnamed_thread_starter: thread start routine returned (nil)\nnamed_thread_starter: entry data=0x557f4ec2fca0\nnamed_thread_starter: param=0x557f4ec2fca0\nnamed_thread_starter: param->name=0x7fac1a839b20\nnamed_thread_starter: param->name string=\"MHD-worker\"\nMHD_set_cur_thread_name_: name=MHD-worker\nnamed_thread_starter: copied arg=0x557f4ec306e0\nnamed_thread_starter: copied start_routine=0x7fac1a802800\nnamed_thread_starter: freed data pointer=0x557f4ec2fca0\nnamed_thread_starter: invoking thread start routine with arg=0x557f4ec306e0\nnamed_thread_starter: thread start routine returned (nil)\nnamed_thread_starter: entry data=0x557f4ec2fca0\nnamed_thread_starter: param=0x557f4ec2fca0\nnamed_thread_starter: param->name=0x7fac1a8399d1\nnamed_thread_starter: param->name string=\"MHD-single\"\nMHD_set_cur_thread_name_: name=MHD-single\nnamed_thread_starter: copied arg=0x557f4ec311c0\nnamed_thread_starter: copied start_routine=0x7fac1a802800\nnamed_thread_starter: freed data pointer=0x557f4ec2fca0\nnamed_thread_starter: invoking thread start routine with arg=0x557f4ec311c0\nnamed_thread_starter: thread start routine returned (nil)\nnamed_thread_starter: entry data=0x557f4ec30c40\nnamed_thread_starter: param=0x557f4ec30c40\nnamed_thread_starter: param->name=0x7fac1a8399c6\nnamed_thread_starter: param->name string=\"MHD-listen\"\nMHD_set_cur_thread_name_: name=MHD-listen\nnamed_thread_starter: copied arg=0x557f4ec31600\nnamed_thread_starter: copied start_routine=0x7fac1a802800\nnamed_thread_starter: freed data pointer=0x557f4ec30c40\nnamed_thread_starter: invoking thread start routine with arg=0x557f4ec31600\nnamed_thread_starter: thread start routine returned (nil)\nnamed_thread_starter: entry data=0x557f4ec2fca0\nnamed_thread_starter: param=0x557f4ec2fca0\nnamed_thread_starter: param->name=0x7fac1a839b20\nnamed_thread_starter: param->name string=\"MHD-worker\"\nMHD_set_cur_thread_name_: name=MHD-worker\nnamed_thread_starter: copied arg=0x557f4ec31ec0\nnamed_thread_starter: copied start_routine=0x7fac1a802800\nnamed_thread_starter: freed data pointer=0x557f4ec2fca0\nnamed_thread_starter: invoking thread start routine with arg=0x557f4ec31ec0\nnamed_thread_starter: thread start routine returned (nil)\nnamed_thread_starter: entry data=0x557f4ec30c20\nnamed_thread_starter: param=0x557f4ec30c20\nnamed_thread_starter: param->name=0x7fac1a839b20\nnamed_thread_starter: param->name string=\"MHD-worker\"\nMHD_set_cur_thread_name_: name=MHD-worker\nnamed_thread_starter: copied arg=0x557f4ec32168\nnamed_thread_starter: copied start_routine=0x7fac1a802800\nnamed_thread_starter: freed da\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In named_thread_starter the local pointer 'param' is a const pointer to a mutable struct (struct MHD_named_helper_param_ *const). The function only reads from *param (param->name, param->arg, param->start_routine) and never modifies the pointee; therefore, per MISRA C 2023 Rule 8.13 a pointer that is used only to observe an object should point to a const-qualified type. Declaring param as\n  const struct MHD_named_helper_param_ *const param;\nwould express the intent more correctly and satisfy the rule.\n\nNotes/caveats: making param point to a const-qualified type may require edits elsewhere (for example handling of param->arg or calls that expect non-const pointers may need explicit casts or type changes). Those follow-on changes do not negate that the current code fails to observe Rule 8.13: the pointer currently does not point to a const-qualified type even though it could."
}