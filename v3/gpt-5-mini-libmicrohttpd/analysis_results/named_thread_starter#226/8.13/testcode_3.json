{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'param' is declared as 'struct MHD_named_helper_param_ *const param' (a const pointer to a non-const pointee) but the function only reads members from *param (param->name, param->arg, param->start_routine). The fragment 'arg = param->arg;' copies a pointer out of a non-const pointee into a non-const 'void *arg'. Since the pointee is not modified, the pointee type could and should be const-qualified (e.g. 'const struct MHD_named_helper_param_ *const param' and possibly 'const void *arg'), so this use violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified named_thread_starter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of named_thread_starter as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\nPlease provide the modified named_thread_starter code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n\n/* Minimal typedefs/stubs to allow this translation unit to compile standalone. */\ntypedef void * MHD_THRD_RTRN_TYPE_;\ntypedef MHD_THRD_RTRN_TYPE_ (*MHD_THREAD_START_ROUTINE_)(void *);\n\nstruct MHD_named_helper_param_\n{\n  const char *name;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ start_routine;\n};\n\n/* Simple logging probe that appends control-flow/state information to the log file\n   used for reproducing/debugging the Rule 8.13 scenario. */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\n/* Minimal implementation of the thread-name setter used in the target code.\n   It also logs the name being set so the control flow is visible in the log. */\nstatic void\nMHD_set_cur_thread_name_ (const char *name)\n{\n  log_probe (\"MHD_set_cur_thread_name_: name=%s\", (name != NULL) ? name : \"(null)\");\n}\n\n/*\n * Modified named_thread_starter with inserted logging probes. The original\n * logic is preserved; probes record entry, null checks, the contents of the\n * parameter struct members that are read, the free event, and the call/return\n * of the thread start routine. This logging captures the exact sequence that\n * demonstrates the pointer-to-non-const-pointee usage described in the\n * violation scenario.\n */\nstatic MHD_THRD_RTRN_TYPE_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  log_probe (\"named_thread_starter: entry data=%p\", data);\n\n  if (NULL == data)\n  {\n    log_probe (\"named_thread_starter: data is NULL - returning 0\");\n    return (MHD_THRD_RTRN_TYPE_) 0;\n  }\n\n  /* Log addresses and readable name (if present) before calling the helper. */\n  log_probe (\"named_thread_starter: param=%p\", (void *) param);\n  log_probe (\"named_thread_starter: param->name=%p\", (void *) param->name);\n  if (param->name != NULL)\n  {\n    log_probe (\"named_thread_starter: param->name string=\\\"%s\\\"\", param->name);\n  }\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n\n  log_probe (\"named_thread_starter: copied arg=%p\", arg);\n  log_probe (\"named_thread_starter: copied start_routine=%p\", (void *) thr_func);\n\n  free (data);\n  log_probe (\"named_thread_starter: freed data pointer=%p\", data);\n\n  log_probe (\"named_thread_starter: invoking thread start routine with arg=%p\", arg);\n  MHD_THRD_RTRN_TYPE_ ret = thr_func (arg);\n  log_probe (\"named_thread_starter: thread start routine returned %p\", ret);\n\n  return ret;\n}"
}