{
  "user_message": "An agent A claimed that the following named_thread_starter code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of named_thread_starter.\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code uses 'struct MHD_named_helper_param_ *const param' \u2014 the pointer itself is const but it points to a non-const struct. In the fragment 'thr_func = param->start_routine;' param is only read from and could have been declared as a pointer to const (e.g. 'const struct MHD_named_helper_param_ *const param = (const struct MHD_named_helper_param_ *)data;'). Because the pointed-to type is not const-qualified even though it could be, this violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the function param is only read (param->name, param->arg, param->start_routine) and never used to modify the pointed-to object, so per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type. Declaring param as, for example, const struct MHD_named_helper_param_ *const param = (const struct MHD_named_helper_param_ *)data; would satisfy the rule. Freeing the original void *data is unaffected (free uses the original data variable), so there is no reason the pointed-to type cannot be const-qualified here."
}