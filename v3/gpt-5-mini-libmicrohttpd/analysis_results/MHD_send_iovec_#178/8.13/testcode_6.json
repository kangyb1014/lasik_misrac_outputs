{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter is declared as a const pointer to a non-const object: 'struct MHD_iovec_track_ *const r_iov'. Rule 8.13 expects the pointee to be const whenever possible. If MHD_send_iovec_ does not modify the object pointed to by r_iov (it only reads it or forwards it to callees that do not modify it), then the declaration should be 'const struct MHD_iovec_track_ * const r_iov' (or at least 'const struct MHD_iovec_track_ * r_iov'). In that usage scenario the current declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_iovec_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1783.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_send_iovec_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_send_iovec_:\n```c\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  return send_iov_nontls (connection, r_iov, push_data);\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n```\n</target_code>\nPlease provide the modified MHD_send_iovec_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe function to log control flow and relevant state for MHD_send_iovec_.\n * Appends human-readable entries to /tmp/logs/1783.txt so other agents can\n * reproduce the control path and see the pointer/state values involved in the\n * scenario described (r_iov pointer and decision which send function is used).\n *\n * The function intentionally does not change program logic; it only observes\n * and logs values.\n */\nstatic void\nMHD_probe_log_send_iovec (const char *label,\n                          struct MHD_Connection *connection,\n                          struct MHD_iovec_track_ *const r_iov,\n                          bool push_data)\n{\n  FILE *f = fopen(\"/tmp/logs/1783.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"-- MHD_send_iovec_ probe: %s\\n\", label);\n  fprintf (f, \"  r_iov pointer = %p\\n\", (void *) r_iov);\n  fprintf (f, \"  connection pointer = %p\\n\", (void *) connection);\n  fprintf (f, \"  push_data = %d\\n\", (int) push_data);\n\n  if (NULL != connection)\n    {\n      /* These fields are safe to read here because the original function\n       * already asserts on them. We log boolean results rather than\n       * concrete types to keep the probe generic. */\n      int resp_iov_valid = (NULL != connection->rp.resp_iov.iov) ? 1 : 0;\n      int data_iov_valid = (NULL != connection->rp.response->data_iov) ? 1 : 0;\n      int cnt_gt_sent = (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent) ? 1 : 0;\n\n      fprintf (f, \"  resp_iov.iov != NULL = %d\\n\", resp_iov_valid);\n      fprintf (f, \"  response->data_iov != NULL = %d\\n\", data_iov_valid);\n      fprintf (f, \"  resp_iov.cnt > resp_iov.sent = %d\\n\", cnt_gt_sent);\n\n#ifdef HTTPS_SUPPORT\n      /* If HTTPS support is compiled in, log the TLS option bit as seen in\n       * original logic. Keep it as a non-invasive read of options. */\n      if (NULL != connection->daemon)\n        {\n          unsigned long opts = (unsigned long) connection->daemon->options;\n          fprintf (f, \"  daemon->options = 0x%lx\\n\", opts);\n        }\n#endif\n    }\n\n  fprintf (f, \"-- end probe: %s\\n\\n\", label);\n  fclose (f);\n}\n\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n\n  /* Log entry and basic state to reproduce the scenario about r_iov being a\n   * pointer to a non-const object. This will help demonstrate whether the\n   * function treats r_iov as read-only (i.e., never modifies the pointee).\n   */\n  MHD_probe_log_send_iovec (\"entry\", connection, r_iov, push_data);\n\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  {\n    /* Log the chosen path just before delegating to the vectored send\n     * implementation. This establishes which branch was taken during a test. */\n    MHD_probe_log_send_iovec (\"chosen_send_iov_nontls\", connection, r_iov, push_data);\n    return send_iov_nontls (connection, r_iov, push_data);\n  }\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  /* Log the fallback/emulation path. */\n  MHD_probe_log_send_iovec (\"chosen_send_iov_emu\", connection, r_iov, push_data);\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n"
}