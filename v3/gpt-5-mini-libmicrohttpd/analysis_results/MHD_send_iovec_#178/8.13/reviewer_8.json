{
  "user_message": "An agent A claimed that the following MHD_send_iovec_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_send_iovec_.\n```c\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  return send_iov_nontls (connection, r_iov, push_data);\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter r_iov is declared as 'struct MHD_iovec_track_ *const r_iov' (the pointer is const but the pointed-to type is not). The call send_iov_emu(connection, r_iov, push_data) passes this pointer. If send_iov_emu (and other callees) only read from r_iov and do not modify the pointed-to object, then r_iov should be declared pointing to a const-qualified type (e.g. 'const struct MHD_iovec_track_ *const r_iov') and the callee prototype should take a pointer-to-const. As written (no const on the pointee) this violates MISRA C 2023 Rule 8.13. Note: if send_iov_emu legitimately modifies the object pointed to by r_iov, then no violation occurs.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is plausible but not demonstrable from the excerpt alone. In the shown function r_iov is declared as \"struct MHD_iovec_track_ *const r_iov\" (the pointer is const but the pointee is not). MISRA C 2023 Rule 8.13 indeed expects a pointer to point to a const-qualified type whenever possible, so if neither MHD_send_iovec_ nor the callees it passes r_iov to (send_iov_emu, send_iov_nontls, etc.) ever modify the object pointed to, then the pointee should be const-qualified (e.g. \"const struct MHD_iovec_track_ *const r_iov\") and the callees' prototypes should accept a pointer-to-const \u2014 otherwise the code would violate 8.13.\n\nHowever, no evidence is provided that the callees do not modify the object. If send_iov_emu or send_iov_nontls legitimately modify the pointed-to object, the current declaration is correct and there is no violation. Therefore the report cannot be judged correct based solely on the fragment shown; you must inspect the prototypes and implementations of send_iov_emu/send_iov_nontls (and any other callers) to determine whether the pointee can be const-qualified. If they do not modify the pointee, change the parameter and callee prototypes to pointer-to-const to satisfy Rule 8.13."
}