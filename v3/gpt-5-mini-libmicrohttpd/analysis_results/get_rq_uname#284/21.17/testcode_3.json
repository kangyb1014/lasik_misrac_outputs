{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen uname_type == MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH the code copies the hex username into buf+buf_used via get_rq_param_unquoted_copy_z and then converts it to binary into buf+buf_used+(hex_len+1) via MHD_hex_to_bin without checking the remaining buffer space (buf_size). If buf_size < buf_used + userhash_hex_len + 1 + (userhash_hex_len/2) the copy or the hex-to-binary conversion can write past the end of buf (these helper functions typically use string/memory routines such as memcpy/strcpy). The final mhd_assert(buf_size >= buf_used) is performed too late to prevent the out-of-bounds write. Example: buf_size = 10, buf_used = 0, userhash_hex_len = 8 -> get_rq_param_unquoted_copy_z writes 9 bytes (8 chars + NUL) and then MHD_hex_to_bin writes 4 bytes at offset 9..12, overrunning the buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2849.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2849.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  /* Log entry and initial state */\n  mhd_probe_log(\"ENTER get_rq_uname: uname_type=%d, buf=%p, buf_size=%zu, buf_used=%zu, params=%p\",\n                (int) uname_type, (void *) buf, buf_size, buf_used, (const void *) params);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n\n    mhd_probe_log(\"STANDARD path: before get_rq_param_unquoted_copy_z: remaining_space=%zu, dest=%p, params->username=%p\",\n                  buf_size > buf_used ? buf_size - buf_used : 0, (void *) uname_info->username,\n                  (void *) &params->username);\n\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    mhd_probe_log(\"STANDARD path: after get_rq_param_unquoted_copy_z: username_len=%zu, buf_used(before)=%zu\",\n                  uname_info->username_len, buf_used);\n\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n\n    mhd_probe_log(\"STANDARD path: buf_used(after)=%zu, buf_size=%zu\",\n                  buf_used, buf_size);\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n\n    mhd_probe_log(\"USERHASH path: before get_rq_param_unquoted_copy_z: remaining_space=%zu, dest=%p, params->username=%p\",\n                  buf_size > buf_used ? buf_size - buf_used : 0, (void *) uname_info->userhash_hex,\n                  (void *) &params->username);\n\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    mhd_probe_log(\"USERHASH path: after get_rq_param_unquoted_copy_z: userhash_hex_len=%zu, buf_used(before)=%zu\",\n                  uname_info->userhash_hex_len, buf_used);\n\n    buf_used += uname_info->userhash_hex_len + 1;\n\n    mhd_probe_log(\"USERHASH path: after reserving hex string: buf_used=%zu, buf_size=%zu\",\n                  buf_used, buf_size);\n\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n\n    /* Log the computed sizes that will be used for hex->bin conversion */\n    {\n      size_t hex_len = uname_info->userhash_hex_len;\n      size_t required_bin_bytes = hex_len / 2;\n      size_t remaining_space = (buf_size > buf_used) ? (buf_size - buf_used) : 0;\n      size_t total_needed_after_copy = buf_used + required_bin_bytes;\n\n      mhd_probe_log(\"USERHASH path: about to call MHD_hex_to_bin: hex_len=%zu, required_bin_bytes=%zu, buf_used=%zu, remaining_space=%zu, total_needed_after_copy=%zu\",\n                    hex_len, required_bin_bytes, buf_used, remaining_space, total_needed_after_copy);\n    }\n\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n\n    mhd_probe_log(\"USERHASH path: after MHD_hex_to_bin: res=%zu, expected=%zu, buf_used(before update)=%zu\",\n                  res, uname_info->userhash_hex_len / 2, buf_used);\n\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n      mhd_probe_log(\"USERHASH path: hex_to_bin failed or produced unexpected length: marking INVALID\");\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n\n      mhd_probe_log(\"USERHASH path: success: buf_used(after)=%zu, buf_size=%zu\",\n                    buf_used, buf_size);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    mhd_probe_log(\"EXTENDED path: before get_rq_extended_uname_copy_z: remaining_space=%zu, dest=%p, src_len=%zu\",\n                  buf_size > buf_used ? buf_size - buf_used : 0, (void *) (buf + buf_used), (size_t) params->username_ext.value.len);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n\n      mhd_probe_log(\"EXTENDED path: copied username: username_len=%zu, buf_used=%zu, buf_size=%zu\",\n                    uname_info->username_len, buf_used, buf_size);\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    mhd_probe_log(\"UNKNOWN uname_type: marking INVALID\");\n  }\n\n  mhd_probe_log(\"EXIT get_rq_uname: final buf_used=%zu, buf_size=%zu, uname_type=%d, uname_info->username=%p, userhash_hex=%p, userhash_bin=%p\",\n                buf_used, buf_size, (int) uname_info->uname_type, (void *) uname_info->username,\n                (void *) uname_info->userhash_hex, (void *) uname_info->userhash_bin);\n\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}