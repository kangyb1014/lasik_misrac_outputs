{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nA buffer-overflow can occur if get_rq_extended_uname_copy_z writes more bytes (including the terminating NUL) than the provided remaining space. The fragment passes (char *)(buf + buf_used) and size (buf_size - buf_used) to the callee and, on a non-negative return value res, assumes the callee copied exactly res bytes plus a terminating NUL and that those res+1 bytes fit into the remaining buffer. If buf_size == buf_used (so the size argument is 0) or if the callee does not enforce the provided size and writes/data-terminator beyond buf_size - buf_used, the code will have performed an access beyond the bounds of buf. Therefore Rule 21.17 is violated unless get_rq_extended_uname_copy_z is implemented to guarantee it never writes more than the supplied size (and returns negative on truncation).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2849.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging function: append human-readable traces to /tmp/logs/2849.txt */\nstatic void\nlogf (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2849.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  /* Initial state logging */\n  logf (\"ENTER get_rq_uname: uname_type=%d, buf=%p, buf_size=%zu, params=%p\",\n         (int) uname_type, (void *) buf, buf_size, (const void *) params);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n\n    logf (\"BRANCH STANDARD: dest=%p, available=%zu, params_username_ptr=%p\",\n           (void *) uname_info->username, buf_size - buf_used,\n           (const void *) &params->username);\n\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    logf (\"RETURN get_rq_param_unquoted_copy_z: username_len=%zu\",\n           uname_info->username_len);\n\n    buf_used += uname_info->username_len + 1;\n\n    logf (\"AFTER STANDARD: buf_used=%zu, buf_size=%zu\",\n           buf_used, buf_size);\n\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n\n    logf (\"BRANCH USERHASH: hex_dest=%p, available=%zu, params_username_ptr=%p\",\n           (void *) uname_info->userhash_hex, buf_size - buf_used,\n           (const void *) &params->username);\n\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    logf (\"RETURN get_rq_param_unquoted_copy_z (userhash): hex_len=%zu\",\n           uname_info->userhash_hex_len);\n\n    buf_used += uname_info->userhash_hex_len + 1;\n\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n\n    logf (\"RETURN MHD_hex_to_bin: res=%zu, expected=%zu\",\n           res, uname_info->userhash_hex_len / 2);\n\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n      logf (\"USERHASH INVALID: hex conversion failed\");\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n\n      logf (\"AFTER USERHASH: buf_used=%zu, buf_size=%zu, userhash_bin=%p\",\n             buf_used, buf_size, (void *) uname_info->userhash_bin);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    size_t available_before = buf_size - buf_used;\n\n    logf (\"BRANCH EXTENDED: dest=%p, available=%zu, ext_ptr=%p, ext_len=%zu\",\n           (void *) (buf + buf_used), available_before,\n           (const void *) params->username_ext.value.str,\n           (size_t) params->username_ext.value.len);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n\n    logf (\"RETURN get_rq_extended_uname_copy_z: res=%zd\", res);\n\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      /* Log potential overflow scenario without changing behavior */\n      if ((size_t) res + 1 > available_before)\n      {\n        logf (\"POTENTIAL_OVERFLOW: reported_len=%zd, required=%zu, available=%zu, buf=%p, buf_size=%zu\",\n               res, (size_t) res + 1, available_before, (void *) buf, buf_size);\n      }\n\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n\n      logf (\"AFTER EXTENDED: username=%p, username_len=%zu, buf_used=%zu, buf_size=%zu\",\n             (void *) uname_info->username, uname_info->username_len, buf_used, buf_size);\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    logf (\"BRANCH UNKNOWN: set uname_type INVALID\");\n  }\n\n  logf (\"EXIT get_rq_uname: final_buf_used=%zu, buf_size=%zu, uname_type=%d, username_ptr=%p, username_len=%zu, userhash_hex_ptr=%p, userhash_hex_len=%zu, userhash_bin_ptr=%p\",\n         buf_used, buf_size, (int) uname_info->uname_type,\n         (void *) uname_info->username, uname_info->username_len,\n         (void *) uname_info->userhash_hex, uname_info->userhash_hex_len,\n         (void *) uname_info->userhash_bin);\n\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}