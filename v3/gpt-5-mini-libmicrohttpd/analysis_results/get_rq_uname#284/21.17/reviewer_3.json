{
  "user_message": "An agent A claimed that the following get_rq_uname code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_uname.\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWhen uname_type == MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH the code copies the hex username into buf+buf_used via get_rq_param_unquoted_copy_z and then converts it to binary into buf+buf_used+(hex_len+1) via MHD_hex_to_bin without checking the remaining buffer space (buf_size). If buf_size < buf_used + userhash_hex_len + 1 + (userhash_hex_len/2) the copy or the hex-to-binary conversion can write past the end of buf (these helper functions typically use string/memory routines such as memcpy/strcpy). The final mhd_assert(buf_size >= buf_used) is performed too late to prevent the out-of-bounds write. Example: buf_size = 10, buf_used = 0, userhash_hex_len = 8 -> get_rq_param_unquoted_copy_z writes 9 bytes (8 chars + NUL) and then MHD_hex_to_bin writes 4 bytes at offset 9..12, overrunning the buffer.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the USERHASH branch the code copies the hex username into buf + buf_used via get_rq_param_unquoted_copy_z and then writes the binary into buf + buf_used + (userhash_hex_len + 1) via MHD_hex_to_bin without any prior check that the remaining buffer space (buf_size - buf_used) is large enough for both writes. Both helper routines presumably perform raw memory/string writes (memcpy/strcpy-like behavior), so they can write past the end of buf when the available space is insufficient (the example with buf_size=10, buf_used=0, userhash_hex_len=8 demonstrates exactly that). The final mhd_assert(buf_size >= buf_used) is only diagnostic and performed after the writes \u2014 it does not prevent the out-of-bounds access. That behavior violates MISRA C 2023 Rule 21.17 (string/memory functions must not result in accesses beyond object bounds). Note: the EXTENDED branch properly passes a remaining-size parameter to its copy routine; the STANDARD and USERHASH branches do not, which is the root cause. A correct fix is to check/ensure remaining buffer space before calling the copy and conversion (or modify the helpers to accept a size and fail safely), e.g. require buf_size - buf_used >= (userhash_hex_len + 1 + userhash_hex_len/2) before performing the operations."
}