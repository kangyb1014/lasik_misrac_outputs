{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'mhd_assert (NULL != r);' is dead code if the mhd_assert macro is defined as a no-op (for example expands to ((void)0) or is removed when NDEBUG is set). In that case the assertion performs no action and its removal would not change program behaviour, so Rule 2.2 is violated. If, however, mhd_assert expands to an active runtime check (e.g. aborts or logs on failure) in the build used in the project, then the statement is not dead code and Rule 2.2 is not violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified setup_reply_properties code that contains useful probe functions that print useful logs to a file \"/tmp/logs/612.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of setup_reply_properties as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of setup_reply_properties:\n```c\nstatic void\nsetup_reply_properties (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n  enum replyBodyUse use_rp_body;\n  bool use_chunked;\n\n  mhd_assert (NULL != r);\n\n  /* ** Adjust reply properties ** */\n\n  c->keepalive = keepalive_possible (c);\n  use_rp_body = is_reply_body_needed (c, c->rp.responseCode);\n  c->rp.props.send_reply_body = (use_rp_body > RP_BODY_HEADERS_ONLY);\n  c->rp.props.use_reply_body_headers = (use_rp_body >= RP_BODY_HEADERS_ONLY);\n\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ( (NULL == r->upgrade_handler) ||\n               (RP_BODY_NONE == use_rp_body) );\n#endif /* UPGRADE_SUPPORT */\n\n  if (c->rp.props.use_reply_body_headers)\n  {\n    if ((MHD_SIZE_UNKNOWN == r->total_size) ||\n        (0 != (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)))\n    { /* Use chunked reply encoding if possible */\n\n      /* Check whether chunked encoding is supported by the client */\n      if (! MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n        use_chunked = false;\n      /* Check whether chunked encoding is allowed for the reply */\n      else if (0 != (r->flags & (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT\n                                 | MHD_RF_HTTP_1_0_SERVER)))\n        use_chunked = false;\n      else\n        /* If chunked encoding is supported and allowed, and response size\n         * is unknown, use chunked even for non-Keep-Alive connections.\n         * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3\n         * Also use chunked if it is enforced by application and supported by\n         * the client. */\n        use_chunked = true;\n    }\n    else\n      use_chunked = false;\n\n    if ( (MHD_SIZE_UNKNOWN == r->total_size) &&\n         (! use_chunked) )\n    {\n      /* End of the stream is indicated by closure */\n      c->keepalive = MHD_CONN_MUST_CLOSE;\n    }\n  }\n  else\n    use_chunked = false; /* chunked encoding cannot be used without body */\n\n  c->rp.props.chunked = use_chunked;\n#ifdef _DEBUG\n  c->rp.props.set = true;\n#endif /* _DEBUG */\n}\n```\n</target_code>\nPlease provide the modified setup_reply_properties code.\n",
  "test_code": "static void\nsetup_reply_properties (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n  enum replyBodyUse use_rp_body;\n  bool use_chunked;\n\n  /* Probe: log entry and pointer state before the assertion. This allows\n   * reproducing whether the assertion is a no-op: if it is active it may\n   * abort and the AFTER_ASSERT log will not be emitted. */\n  {\n    FILE *log = fopen(\"/tmp/logs/612.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"[ENTER] setup_reply_properties: connection=%p c=%p r=%p\\n\",\n              (void *) connection, (void *) c, (void *) r);\n      fprintf(log, \"[BEFORE_ASSERT] r pointer=%p\\n\", (void *) r);\n      fclose(log);\n    }\n  }\n\n  mhd_assert (NULL != r);\n\n  /* Probe: if this log appears then mhd_assert did not abort the process. */\n  {\n    FILE *log = fopen(\"/tmp/logs/612.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"[AFTER_ASSERT] r pointer=%p\\n\", (void *) r);\n      fclose(log);\n    }\n  }\n\n  /* ** Adjust reply properties ** */\n\n  c->keepalive = keepalive_possible (c);\n  use_rp_body = is_reply_body_needed (c, c->rp.responseCode);\n  c->rp.props.send_reply_body = (use_rp_body > RP_BODY_HEADERS_ONLY);\n  c->rp.props.use_reply_body_headers = (use_rp_body >= RP_BODY_HEADERS_ONLY);\n\n  /* Probe: log decision summary after initial property setup */\n  {\n    FILE *log = fopen(\"/tmp/logs/612.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"[DECISION] keepalive=%d use_rp_body=%d send_reply_body=%d use_reply_body_headers=%d\\n\",\n              (int) c->keepalive,\n              (int) use_rp_body,\n              (int) c->rp.props.send_reply_body,\n              (int) c->rp.props.use_reply_body_headers);\n      fclose(log);\n    }\n  }\n\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ( (NULL == r->upgrade_handler) ||\n               (RP_BODY_NONE == use_rp_body) );\n\n  /* Probe: log upgrade handler pointer and related state */\n  {\n    FILE *log = fopen(\"/tmp/logs/612.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"[UPGRADE_SUPPORT] upgrade_handler=%p use_rp_body=%d\\n\",\n              (void *) r->upgrade_handler,\n              (int) use_rp_body);\n      fclose(log);\n    }\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  if (c->rp.props.use_reply_body_headers)\n  {\n    if ((MHD_SIZE_UNKNOWN == r->total_size) ||\n        (0 != (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)))\n    { /* Use chunked reply encoding if possible */\n\n      /* Check whether chunked encoding is supported by the client */\n      if (! MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n        use_chunked = false;\n      /* Check whether chunked encoding is allowed for the reply */\n      else if (0 != (r->flags & (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT\n                                 | MHD_RF_HTTP_1_0_SERVER)))\n        use_chunked = false;\n      else\n        /* If chunked encoding is supported and allowed, and response size\n         * is unknown, use chunked even for non-Keep-Alive connections.\n         * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3\n         * Also use chunked if it is enforced by application and supported by\n         * the client. */\n        use_chunked = true;\n    }\n    else\n      use_chunked = false;\n\n    if ( (MHD_SIZE_UNKNOWN == r->total_size) &&\n         (! use_chunked) )\n    {\n      /* End of the stream is indicated by closure */\n      c->keepalive = MHD_CONN_MUST_CLOSE;\n    }\n\n    /* Probe: log details relevant to chunked decision */\n    {\n      FILE *log = fopen(\"/tmp/logs/612.txt\", \"a\");\n      if (log != NULL)\n      {\n        fprintf(log, \"[CHUNK_DECISION] total_size=%lld flags_auto=0x%08x flags=0x%08x http_ver=%d use_chunked=%d keepalive=%d\\n\",\n                (long long) r->total_size,\n                (unsigned int) r->flags_auto,\n                (unsigned int) r->flags,\n                (int) c->rq.http_ver,\n                (int) use_chunked,\n                (int) c->keepalive);\n        fclose(log);\n      }\n    }\n  }\n  else\n    use_chunked = false; /* chunked encoding cannot be used without body */\n\n  c->rp.props.chunked = use_chunked;\n#ifdef _DEBUG\n  c->rp.props.set = true;\n#endif /* _DEBUG */\n\n  /* Probe: final state summary */\n  {\n    FILE *log = fopen(\"/tmp/logs/612.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"[EXIT] chunked=%d set=%d keepalive=%d\\n\",\n              (int) c->rp.props.chunked,\n#ifdef _DEBUG\n              (int) c->rp.props.set,\n#else\n              0,\n#endif\n              (int) c->keepalive);\n      fclose(log);\n    }\n  }\n}\n"
}