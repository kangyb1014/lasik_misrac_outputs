{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_empty (MHD_RF_NONE);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NO_CONTENT,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe callback parameter req_cls has type void ** so *req_cls is a void * (pointer to a non-const object). The code stores &aptr (int *) into *req_cls and only uses that pointer for identity checks; the pointee (aptr) is not modified via that pointer. Under MISRA C 2023 Rule 8.13, a pointer that does not need to modify the pointed-to object should point to a const-qualified type (e.g. const void * / const int *). Because *req_cls is a non-const pointer although the pointee is never modified, this usage violates Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not correct in this context. Rule 8.13 advocates qualifying the pointed-to type with const when the code does not need to modify the pointee, but here req_cls (void **) is part of the callback signature imposed by the external library (libmicrohttpd). The function must match that externally defined prototype, so you cannot change the parameter to const void ** without breaking the required API. MISRA guidance permits the use of non-const pointers when required by externally prescribed interfaces; therefore this use is not a violation in practice. (If you controlled the API, the inner pointer could be const-qualified, e.g. const void *, but that change is not possible for this callback.)"
}