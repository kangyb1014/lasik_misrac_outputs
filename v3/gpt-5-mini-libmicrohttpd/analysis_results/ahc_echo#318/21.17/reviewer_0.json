{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_empty (MHD_RF_NONE);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NO_CONTENT,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls strcmp(method, \"GET\") without first ensuring that 'method' points to a valid, null-terminated string. If 'method' is NULL (or not NUL-terminated), strcmp will read beyond the bounds of the referenced object, causing undefined behaviour.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The code calls strcmp(method, \"GET\") without validating the pointer parameter 'method'. Rule 21.17 requires that uses of string.h functions must not result in accesses beyond the bounds of the objects referenced by their pointer parameters. The string literal \"GET\" is safe, but strcmp will read through 'method' until a terminating NUL; if 'method' is NULL (or does not point to a NUL-terminated object of sufficient extent) this is undefined behaviour and therefore a breach of the rule. The only way this would not be a violation is if there is a documented, provable guarantee from the caller/library that 'method' is always non-NULL and NUL-terminated; no such guarantee is visible in the shown code. Therefore agent A\u2019s report is correct unless external API documentation unambiguously guarantees 'method' is valid. Recommended fix: validate method != NULL before calling strcmp (or otherwise ensure by contract/proof that method is non-NULL and NUL-terminated)."
}