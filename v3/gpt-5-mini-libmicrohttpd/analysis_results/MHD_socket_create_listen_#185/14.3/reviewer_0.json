{
  "user_message": "An agent A claimed that the following MHD_socket_create_listen_ code violates the MISRA C 2023 rule 14.3.\n<misra_rule>\nMISRA C 2023 Rule 14.3 is Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_socket_create_listen_.\n```c\nMHD_socket\nMHD_socket_create_listen_ (int pf)\n{\n  MHD_socket fd;\n  int cloexec_set;\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n  int nosigpipe_set;\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n\n#if defined(MHD_POSIX_SOCKETS) && (defined(SOCK_CLOEXEC) || \\\n  defined(SOCK_NOSIGPIPE) )\n\n  fd = socket (pf,\n               SOCK_STREAM | SOCK_CLOEXEC | SOCK_NOSIGPIPE_OR_ZERO,\n               0);\n  cloexec_set = (SOCK_CLOEXEC_OR_ZERO != 0);\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n  nosigpipe_set = (SOCK_NOSIGPIPE_OR_ZERO != 0);\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n#elif defined(MHD_WINSOCK_SOCKETS) && defined(WSA_FLAG_NO_HANDLE_INHERIT)\n  fd = WSASocketW (pf,\n                   SOCK_STREAM,\n                   0,\n                   NULL,\n                   0,\n                   WSA_FLAG_OVERLAPPED | WSA_FLAG_NO_HANDLE_INHERIT);\n  cloexec_set = ! 0;\n#else  /* No special socket init function / flags */\n  fd = MHD_INVALID_SOCKET;\n  cloexec_set = 0;\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n  nosigpipe_set = 0;\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n#endif /* No special socket init function / flags */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n    fd = socket (pf,\n                 SOCK_STREAM,\n                 0);\n    cloexec_set = 0;\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n    nosigpipe_set = 0;\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n  }\n  if (MHD_INVALID_SOCKET == fd)\n    return MHD_INVALID_SOCKET;\n\n#if defined(MHD_socket_nosignal_)\n  if ( (! nosigpipe_set) &&\n       (0 == MHD_socket_nosignal_ (fd)) &&\n       (0 == MSG_NOSIGNAL_OR_ZERO) )\n  {\n    /* SIGPIPE disable is possible on this platform\n     * (so application expect that it will be disabled),\n     * but failed to be disabled here and it is not\n     * possible to disable SIGPIPE by MSG_NOSIGNAL. */\n    const int err = MHD_socket_get_error_ ();\n    (void) MHD_socket_close_ (fd);\n    MHD_socket_fset_error_ (err);\n    return MHD_INVALID_SOCKET;\n  }\n#endif /* defined(MHD_socket_nosignal_) */\n  if (! cloexec_set)\n    (void) MHD_socket_noninheritable_ (fd);\n\n  return fd;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWhen the translation unit is built such that SOCK_NOSIGPIPE_OR_ZERO != 0 (so nosigpipe_set is initialized to true and never modified), the controlling expression becomes constant false because (! nosigpipe_set) is always false (short-circuiting makes the whole conjunction false). In that configuration the if condition is invariant and therefore violates MISRA C 2023 Rule 14.3.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\nENTER: MHD_socket_create_listen_ pf=2\nAFTER socket(init flags): fd=3, cloexec_set=1\nRETURN fd=3, cloexec_set=1\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In the translation-unit configuration described (MHD_socket_nosignal_ defined and SOCK_NOSIGPIPE_OR_ZERO != 0) the local variable nosigpipe_set is initialised to a non-zero value and is not modified later in the function. The if expression\n  if ( (! nosigpipe_set) && (0 == MHD_socket_nosignal_ (fd)) && (0 == MSG_NOSIGNAL_OR_ZERO) )\ntherefore has a controlling expression that is invariantly false (the left operand ! nosigpipe_set is always false and short-circuits the rest). MISRA C 2023 Rule 14.3 forbids invariant controlling expressions (the only permitted invariant exceptions are for infinite loops or the specific do-while case). This if is neither of those exceptions, so the reported violation is valid."
}