{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe early check 'if (unquoted_len < quoted_len / 2) return false;' is redundant. For any inputs satisfying that condition (for example quoted_len=6, unquoted_len=2), the subsequent loop and the final length check will also cause the function to return false (the loop will terminate with i < quoted_len and then the final 'if ((quoted_len != i) || (unquoted_len != j)) return false;' will fire). Removing the early return does not change program behaviour (only performance), so this operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_quoted_bin_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1522.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_equal_quoted_bin_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_quoted_bin_n:\n```c\nbool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (quoted[i] != unquoted[j])\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_equal_quoted_bin_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n\n/* Helper logging function: attempts to append messages to /tmp/logs/1522.txt.\n   Any failure to open or write the file is ignored so as not to change behaviour. */\nstatic void mhd_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1522.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Logging best-effort only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Use a fixed buffer to format the message before writing */\n    char buf[512];\n    int n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    if (n > 0)\n    {\n        /* Ensure newline at end for readability */\n        if ((size_t)n < sizeof(buf) && buf[n - 1] != '\\n')\n        {\n            fprintf(f, \"%s\\n\", buf);\n        }\n        else\n        {\n            fprintf(f, \"%s\", buf);\n            if ((size_t)n >= sizeof(buf))\n            {\n                /* If truncated, still add newline */\n                fprintf(f, \"\\n\");\n            }\n        }\n    }\n\n    fclose(f);\n}\n\nbool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n\n  /* Entry log */\n  mhd_log(\"MHD_str_equal_quoted_bin_n: entry quoted_len=%zu unquoted_len=%zu\", quoted_len, unquoted_len);\n\n  if (unquoted_len < quoted_len / 2)\n  {\n    mhd_log(\"Early-return condition triggered: unquoted_len (%zu) < quoted_len/2 (%zu)\", unquoted_len, quoted_len / 2);\n    return false;\n  }\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    /* Log loop iteration start */\n    if (i < quoted_len && j < unquoted_len)\n    {\n      /* Print characters in hex to avoid issues with non-printables */\n      unsigned int qc = (unsigned char) quoted[i];\n      unsigned int uc = (unsigned char) unquoted[j];\n      mhd_log(\"loop: i=%zu j=%zu quoted[i]=0x%02X unquoted[j]=0x%02X\", i, j, qc, uc);\n    }\n    else\n    {\n      mhd_log(\"loop: i=%zu j=%zu (out-of-bounds for logging) quoted_len=%zu unquoted_len=%zu\", i, j, quoted_len, unquoted_len);\n    }\n\n    if ('\\\\' == quoted[i])\n    {\n      mhd_log(\"backslash found at quoted[%zu]\", i);\n      i++; /* Advance to the next character */\n      mhd_log(\"after escaping increment i=%zu quoted_len=%zu\", i, quoted_len);\n      if (quoted_len == i)\n      {\n        mhd_log(\"No character after escaping backslash: quoted_len == i (%zu). Returning false.\", i);\n        return false; /* No character after escaping backslash */\n      }\n    }\n\n    /* Before comparing, ensure indices are still valid for logging comparison reason */\n    if (i < quoted_len && j < unquoted_len)\n    {\n      if (quoted[i] != unquoted[j])\n      {\n        unsigned int qc = (unsigned char) quoted[i];\n        unsigned int uc = (unsigned char) unquoted[j];\n        mhd_log(\"character mismatch at i=%zu j=%zu quoted=0x%02X unquoted=0x%02X. Returning false.\", i, j, qc, uc);\n        return false; /* Different characters */\n      }\n      else\n      {\n        unsigned int qc = (unsigned char) quoted[i];\n        mhd_log(\"character match at i=%zu j=%zu value=0x%02X\", i, j, qc);\n      }\n    }\n    else\n    {\n      mhd_log(\"comparison skipped due to index bounds i=%zu quoted_len=%zu j=%zu unquoted_len=%zu\", i, quoted_len, j, unquoted_len);\n    }\n  }\n\n  mhd_log(\"loop-exited: i=%zu j=%zu quoted_len=%zu unquoted_len=%zu\", i, j, quoted_len, unquoted_len);\n  if ((quoted_len != i) || (unquoted_len != j))\n  {\n    mhd_log(\"Final length check failed: quoted_len(%zu) != i(%zu) || unquoted_len(%zu) != j(%zu). Returning false.\", quoted_len, i, unquoted_len, j);\n    return false; /* The strings have different length */\n  }\n\n  mhd_log(\"Returning true: strings considered equal\");\n  return true;\n}\n"
}