{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe destination (header_malloced) is allocated with header_len+1 bytes, so the write side is safe. However the source pointer 'header' is not validated; if the caller passes a NULL pointer or a buffer shorter than header_len (e.g. header = \"short\" but header_len = 10), memcpy(header_malloced, header, header_len) will read beyond the bounds of the object referenced by 'header'. The mhd_assert(0 != header_len) does not protect against a NULL or too-small source when assertions are disabled. Thus the code can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_entry_no_check_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1929.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_entry_no_check_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_check_:\n```c\nbool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  header_malloced = malloc (header_len + 1);\n  if (NULL == header_malloced)\n    return false;\n\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n\n  value_malloced = malloc (content_len + 1);\n  if (NULL != value_malloced)\n  {\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n      return true; /* Success exit point */\n\n    free (value_malloced);\n  }\n  free (header_malloced);\n\n  return false; /* Failure exit point */\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_entry_no_check_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe/logging helper: append human-readable state to /tmp/logs/1929.txt */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1929.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n\n  fputc('\\n', f);\n  fclose (f);\n}\n\nbool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n\n  /* Log entry and parameters (do not dereference header/content) */\n  mhd_log_probe(\"ENTER %s: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\",\n                 __func__, (void *) response, (int) kind,\n                 (const void *) header, header_len,\n                 (const void *) content, content_len);\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  header_malloced = malloc (header_len + 1);\n  mhd_log_probe(\"malloc(header_len+1=%zu) -> header_malloced=%p\", header_len + 1, (void *) header_malloced);\n  if (NULL == header_malloced)\n  {\n    mhd_log_probe(\"EXIT %s: header_malloced allocation failed\", __func__);\n    return false;\n  }\n\n  /* Log potential problematic source state without reading from header\n     (do not attempt to strlen or otherwise read header memory here). */\n  if (NULL == header)\n    mhd_log_probe(\"WARNING: header is NULL; about to memcpy(header_malloced, header=%p, header_len=%zu)\", (const void *) header, header_len);\n  else\n    mhd_log_probe(\"About to memcpy(header_malloced=%p, header=%p, header_len=%zu)\", (void *) header_malloced, (const void *) header, header_len);\n\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n  mhd_log_probe(\"Completed memcpy into header_malloced=%p; header_malloced[header_len]=0 set\", (void *) header_malloced);\n\n  value_malloced = malloc (content_len + 1);\n  mhd_log_probe(\"malloc(content_len+1=%zu) -> value_malloced=%p\", content_len + 1, (void *) value_malloced);\n  if (NULL != value_malloced)\n  {\n    if (NULL == content)\n      mhd_log_probe(\"WARNING: content is NULL; about to memcpy(value_malloced, content=%p, content_len=%zu)\", (const void *) content, content_len);\n    else\n      mhd_log_probe(\"About to memcpy(value_malloced=%p, content=%p, content_len=%zu)\", (void *) value_malloced, (const void *) content, content_len);\n\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n    mhd_log_probe(\"Completed memcpy into value_malloced=%p; value_malloced[content_len]=0 set\", (void *) value_malloced);\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n    {\n      mhd_log_probe(\"EXIT %s: success (added response entry)\", __func__);\n      return true; /* Success exit point */\n    }\n\n    mhd_log_probe(\"MHD_add_response_entry_no_alloc_ returned false; freeing value_malloced=%p\", (void *) value_malloced);\n    free (value_malloced);\n  }\n  else\n  {\n    mhd_log_probe(\"Skipping memcpy for value: value_malloced is NULL\");\n  }\n\n  mhd_log_probe(\"Freeing header_malloced=%p and exiting with failure\", (void *) header_malloced);\n  free (header_malloced);\n\n  mhd_log_probe(\"EXIT %s: failure\", __func__); /* Failure exit point */\n  return false; /* Failure exit point */\n}\n"
}