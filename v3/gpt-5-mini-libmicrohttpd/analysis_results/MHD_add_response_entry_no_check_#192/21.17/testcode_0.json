{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: memcpy(value_malloced, content, content_len) may read beyond the source object. The code does not validate that 'content' is non-NULL and that the object it points to has at least content_len bytes. For example, if content points to a 5-byte buffer but content_len == 10 (or content == NULL while content_len != 0), memcpy will access beyond the bounds of the source object, causing undefined behavior and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_entry_no_check_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1929.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_entry_no_check_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_check_:\n```c\nbool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  header_malloced = malloc (header_len + 1);\n  if (NULL == header_malloced)\n    return false;\n\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n\n  value_malloced = malloc (content_len + 1);\n  if (NULL != value_malloced)\n  {\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n      return true; /* Success exit point */\n\n    free (value_malloced);\n  }\n  free (header_malloced);\n\n  return false; /* Failure exit point */\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_entry_no_check_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe logging helper: append messages to /tmp/logs/1929.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1929.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nbool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n\n  /* Log entry and parameters */\n  mhd_probe_log(\"ENTRY: MHD_add_response_entry_no_check_: response=%p, kind=%d, header=%p, header_len=%zu, content=%p, content_len=%zu\",\n                (void *)response, (int)kind, (const void *)header, header_len, (const void *)content, content_len);\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  header_malloced = malloc (header_len + 1);\n  if (NULL == header_malloced)\n  {\n    mhd_probe_log(\"malloc failed for header_malloced (size=%zu)\", header_len + 1);\n    return false;\n  }\n\n  mhd_probe_log(\"malloc succeeded for header_malloced=%p (size=%zu)\", (void *)header_malloced, header_len + 1);\n  mhd_probe_log(\"about to memcpy(header_malloced=%p, header=%p, header_len=%zu)\", (void *)header_malloced, (const void *)header, header_len);\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n  mhd_probe_log(\"copied header -> header_malloced[%zu]=0\", header_len);\n\n  value_malloced = malloc (content_len + 1);\n  if (NULL != value_malloced)\n  {\n    mhd_probe_log(\"malloc succeeded for value_malloced=%p (size=%zu)\", (void *)value_malloced, content_len + 1);\n\n    if (NULL == content && content_len != 0)\n    {\n      mhd_probe_log(\"WARNING: content is NULL but content_len=%zu (will call memcpy and cause UB)\", content_len);\n    }\n    else\n    {\n      mhd_probe_log(\"about to memcpy(value_malloced=%p, content=%p, content_len=%zu)\", (void *)value_malloced, (const void *)content, content_len);\n    }\n\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n    mhd_probe_log(\"copied content -> value_malloced[%zu]=0\", content_len);\n\n    mhd_probe_log(\"calling MHD_add_response_entry_no_alloc_(response=%p, kind=%d, header_malloced=%p, header_len=%zu, value_malloced=%p, content_len=%zu)\",\n                  (void *)response, (int)kind, (void *)header_malloced, header_len, (void *)value_malloced, content_len);\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n    {\n      mhd_probe_log(\"MHD_add_response_entry_no_alloc_ returned true -> success exit\");\n      return true; /* Success exit point */\n    }\n\n    mhd_probe_log(\"MHD_add_response_entry_no_alloc_ returned false -> freeing value_malloced=%p\", (void *)value_malloced);\n    free (value_malloced);\n  }\n  else\n  {\n    mhd_probe_log(\"malloc failed for value_malloced (size=%zu)\", content_len + 1);\n  }\n\n  mhd_probe_log(\"freeing header_malloced=%p and returning false\", (void *)header_malloced);\n  free (header_malloced);\n\n  mhd_probe_log(\"EXIT: MHD_add_response_entry_no_check_ -> false\");\n  return false; /* Failure exit point */\n}\n"
}