{
  "user_message": "An agent A claimed that the following MHD_add_response_entry_no_check_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_entry_no_check_.\n```c\nbool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  header_malloced = malloc (header_len + 1);\n  if (NULL == header_malloced)\n    return false;\n\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n\n  value_malloced = malloc (content_len + 1);\n  if (NULL != value_malloced)\n  {\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n      return true; /* Success exit point */\n\n    free (value_malloced);\n  }\n  free (header_malloced);\n\n  return false; /* Failure exit point */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is defined as a no-op in production builds (e.g. expands to ((void)0) or is removed via macro), the statement mhd_assert(0 != header_len); performs no observable action at runtime and its removal would not affect program behaviour \u2014 this makes it dead code and therefore a violation of MISRA C 2023 Rule 2.2. (If, instead, mhd_assert performs a runtime check that can abort or otherwise change behaviour when the condition fails, then the statement is not dead code.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is correct under the stated scenario. If, in the project configuration being assessed, mhd_assert is defined as a no-op (for example expanding to ((void)0) or otherwise producing no code or effect), then the statement mhd_assert(0 != header_len); performs no observable action at run time and its removal would not change program behaviour \u2014 which matches MISRA C 2023 Rule 2.2\u2019s definition of dead code. \n\nCaveats: (a) If mhd_assert is defined so that it has observable effects in that project configuration (e.g. it performs a runtime check and aborts, logs, or otherwise changes behaviour), then the statement is not dead and there is no Rule 2.2 violation. (b) In embedded systems one must also consider timing effects: if the presence or absence of the assertion changes timing in a way that affects system behaviour, then removal would affect behaviour and it would not be dead code. The agent\u2019s claim, however, correctly describes the violation for the common case where the assertion expands to a true no-op in the analyzed build."
}