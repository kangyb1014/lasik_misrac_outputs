{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a diagnostics macro that expands to nothing in production builds (e.g. defined to ((void)0) when assertions are disabled), the statement mhd_assert(0 != content_len); is executed but has no effect \u2014 removing it would not change program behaviour. In that configuration this is dead code and thus violates MISRA C 2023 Rule 2.2. (If, however, mhd_assert performs checks with side\u2011effects such as logging or aborting on failure, then the statement is not dead code and no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_entry_no_check_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1922.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_entry_no_check_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_check_:\n```c\nbool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  header_malloced = malloc (header_len + 1);\n  if (NULL == header_malloced)\n    return false;\n\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n\n  value_malloced = malloc (content_len + 1);\n  if (NULL != value_malloced)\n  {\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n      return true; /* Success exit point */\n\n    free (value_malloced);\n  }\n  free (header_malloced);\n\n  return false; /* Failure exit point */\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_entry_no_check_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe helper: append a line to the log file. Kept minimal to avoid changing\n   program logic beyond I/O side-effects. */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1922.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nbool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n\n  /* Log entry and parameters. */\n  mhd_probe_log (\"ENTER: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\",\n                 (void *) response, (int) kind, (const void *) header, header_len,\n                 (const void *) content, content_len);\n\n  /* Record that assertions were invoked (they may expand to nothing in\n     production); this documents whether the assert was present in source. */\n  mhd_probe_log (\"ASSERT_INVOKED: header_len_nonzero=%d content_len_nonzero=%d\",\n                 (int) (0 != header_len), (int) (0 != content_len));\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n\n  header_malloced = malloc (header_len + 1);\n  mhd_probe_log (\"MALLOC_HEADER: requested=%zu returned=%p\", header_len + 1,\n                 (void *) header_malloced);\n  if (NULL == header_malloced)\n  {\n    mhd_probe_log (\"EXIT_FAILURE: header_malloced==NULL\");\n    return false;\n  }\n\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n  mhd_probe_log (\"HEADER_COPIED: header_malloced=%p header_str='%s' header_len=%zu\",\n                 (void *) header_malloced, header_malloced, header_len);\n\n  value_malloced = malloc (content_len + 1);\n  mhd_probe_log (\"MALLOC_VALUE: requested=%zu returned=%p\", content_len + 1,\n                 (void *) value_malloced);\n  if (NULL != value_malloced)\n  {\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n    mhd_probe_log (\"VALUE_COPIED: value_malloced=%p value_str='%s' content_len=%zu\",\n                   (void *) value_malloced, value_malloced, content_len);\n\n    mhd_probe_log (\"CALL_ADD_ENTRY_NO_ALLOC: response=%p kind=%d header_malloced=%p header_len=%zu value_malloced=%p content_len=%zu\",\n                   (void *) response, (int) kind, (void *) header_malloced, header_len,\n                   (void *) value_malloced, content_len);\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n    {\n      mhd_probe_log (\"EXIT_SUCCESS: added entry successfully\");\n      return true; /* Success exit point */\n    }\n\n    mhd_probe_log (\"ADD_ENTRY_FAILED: freeing value_malloced=%p\", (void *) value_malloced);\n    free (value_malloced);\n  }\n  else\n  {\n    mhd_probe_log (\"VALUE_MALLOC_FAILED: value_malloced==NULL\");\n  }\n\n  mhd_probe_log (\"FREE_HEADER: header_malloced=%p\", (void *) header_malloced);\n  free (header_malloced);\n\n  mhd_probe_log (\"EXIT_FAILURE: returning false\");\n  return false; /* Failure exit point */\n}\n"
}