{
  "user_message": "An agent A claimed that the following MHD_add_response_entry_no_check_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_entry_no_check_.\n```c\nbool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  header_malloced = malloc (header_len + 1);\n  if (NULL == header_malloced)\n    return false;\n\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n\n  value_malloced = malloc (content_len + 1);\n  if (NULL != value_malloced)\n  {\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n      return true; /* Success exit point */\n\n    free (value_malloced);\n  }\n  free (header_malloced);\n\n  return false; /* Failure exit point */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is a diagnostics macro that expands to nothing in production builds (e.g. defined to ((void)0) when assertions are disabled), the statement mhd_assert(0 != content_len); is executed but has no effect \u2014 removing it would not change program behaviour. In that configuration this is dead code and thus violates MISRA C 2023 Rule 2.2. (If, however, mhd_assert performs checks with side\u2011effects such as logging or aborting on failure, then the statement is not dead code and no violation occurs.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: response=0x564ab9ad0820 kind=1 header=0x564a88e2401f header_len=13 content=0x564a88e2402d content_len=8\nASSERT_INVOKED: header_len_nonzero=1 content_len_nonzero=1\nMALLOC_HEADER: requested=14 returned=0x564ab9ad0ac0\nHEADER_COPIED: header_malloced=0x564ab9ad0ac0 header_str='Header-Type-A' header_len=13\nMALLOC_VALUE: requested=9 returned=0x564ab9ad0ae0\nVALUE_COPIED: value_malloced=0x564ab9ad0ae0 value_str='value-a1' content_len=8\nCALL_ADD_ENTRY_NO_ALLOC: response=0x564ab9ad0820 kind=1 header_malloced=0x564ab9ad0ac0 header_len=13 value_malloced=0x564ab9ad0ae0 content_len=8\nEXIT_SUCCESS: added entry successfully\nENTER: response=0x564ab9ad0820 kind=1 header=0x564a88e2401f header_len=13 content=0x564a88e2404d content_len=8\nASSERT_INVOKED: header_len_nonzero=1 content_len_nonzero=1\nMALLOC_HEADER: requested=14 returned=0x564ab9ad0b40\nHEADER_COPIED: header_malloced=0x564ab9ad0b40 header_str='Header-Type-A' header_len=13\nMALLOC_VALUE: requested=9 returned=0x564ab9ad0b60\nVALUE_COPIED: value_malloced=0x564ab9ad0b60 value_str='value-a2' content_len=8\nCALL_ADD_ENTRY_NO_ALLOC: response=0x564ab9ad0820 kind=1 header_malloced=0x564ab9ad0b40 header_len=13 value_malloced=0x564ab9ad0b60 content_len=8\nEXIT_SUCCESS: added entry successfully\nENTER: response=0x564ab9ad0820 kind=1 header=0x564a88e2401f header_len=13 content=0x564a88e24087 content_len=8\nASSERT_INVOKED: header_len_nonzero=1 content_len_nonzero=1\nMALLOC_HEADER: requested=14 returned=0x564ab9ad0ae0\nHEADER_COPIED: header_malloced=0x564ab9ad0ae0 header_str='Header-Type-A' header_len=13\nMALLOC_VALUE: requested=9 returned=0x564ab9ad0ac0\nVALUE_COPIED: value_malloced=0x564ab9ad0ac0 value_str='value-a3' content_len=8\nCALL_ADD_ENTRY_NO_ALLOC: response=0x564ab9ad0820 kind=1 header_malloced=0x564ab9ad0ae0 header_len=13 value_malloced=0x564ab9ad0ac0 content_len=8\nEXIT_SUCCESS: added entry successfully\nENTER: response=0x564ab9ad0820 kind=1 header=0x564a88e24a16 header_len=4 content=0x564a88e24a1b content_len=29\nASSERT_INVOKED: header_len_nonzero=1 content_len_nonzero=1\nMALLOC_HEADER: requested=5 returned=0x564ab9ad0ac0\nHEADER_COPIED: header_malloced=0x564ab9ad0ac0 header_str='Date' header_len=4\nMALLOC_VALUE: requested=30 returned=0x564ab9ad0c40\nVALUE_COPIED: value_malloced=0x564ab9ad0c40 value_str='Wed, 01 Apr 2015 00:00:00 GMT' content_len=29\nCALL_ADD_ENTRY_NO_ALLOC: response=0x564ab9ad0820 kind=1 header_malloced=0x564ab9ad0ac0 header_len=4 value_malloced=0x564ab9ad0c40 content_len=29\nEXIT_SUCCESS: added entry successfully\nENTER: response=0x564ab9ad0820 kind=1 header=0x564a88e24a16 header_len=4 content=0x564a88e24a79 content_len=29\nASSERT_INVOKED: header_len_nonzero=1 content_len_nonzero=1\nMALLOC_HEADER: requested=5 returned=0x564ab9ad0ac0\nHEADER_COPIED: header_malloced=0x564ab9ad0ac0 header_str='Date' header_len=4\nMALLOC_VALUE: requested=30 returned=0x564ab9ad0c40\nVALUE_COPIED: value_malloced=0x564ab9ad0c40 value_str='Thu, 01 Apr 2021 00:00:00 GMT' content_len=29\nCALL_ADD_ENTRY_NO_ALLOC: response=0x564ab9ad0820 kind=1 header_malloced=0x564ab9ad0ac0 header_len=4 value_malloced=0x564ab9ad0c40 content_len=29\nEXIT_SUCCESS: added entry successfully\nENTER: response=0x564ab9ad0820 kind=1 header=0x564a88e24af5 header_len=17 content=0x564a88e24b07 content_len=7\nASSERT_INVOKED: header_len_nonzero=1 content_len_nonzero=1\nMALLOC_HEADER: requested=18 returned=0x564ab9ad0ac0\nHEADER_COPIED: header_malloced=0x564ab9ad0ac0 header_str='Transfer-Encoding' header_len=17\nMALLOC_VALUE: requested=8 returned=0x564ab9ad0ae0\nVALUE_COPIED: value_malloced=0x564ab9ad0ae0 value_str='chunked' content_len=7\nCALL_ADD_ENTRY_NO_ALLOC: response=0x564ab9ad0820 kind=1 header_malloced=0x564ab9ad0ac0 header_len=17 value_malloced=0x564ab9ad0ae0 content_len=7\nEXIT_SUCCESS: added entry successfully\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as stated. MISRA 2.2 targets executed operations whose removal would not affect behaviour. If mhd_assert is defined as a no\u2011op that expands to nothing (or just ((void)0)), there is no executed operation in the compiled program, so the source line does not constitute dead code under MISRA 2.2. Conversely, if mhd_assert expands to code that is executed but has no effect (for example a runtime statement with no observable side\u2011effects), that expansion could be dead code \u2014 but that depends on the actual macro definition, not on the source line alone. The provided execution log in fact shows asserts being invoked in that build (i.e. they are active), so there is no evidence of an executed no\u2011effect operation. Therefore the claim of a Rule 2.2 violation is not supported without a concrete definition of mhd_assert that yields an executed no\u2011op."
}