{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression is the constant expression `1` in `if (1)` (under the MHD_FAVOR_SMALL_CODE configuration). This is an invariant controlling expression that is always true and is not used to create an infinite loop nor is it a do-while with a false integer constant \u2014 therefore it falls outside the permitted exceptions to Rule 14.3 and violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_quote code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1585.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_quote as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_quote:\n```c\nsize_t\nMHD_str_quote (const char *unquoted,\n               size_t unquoted_len,\n               char *result,\n               size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  r = 0;\n  w = 0;\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (unquoted_len * 2 <= buf_size)\n  {\n    /* Fast loop: the output will fit the buffer with any input string content */\n    while (unquoted_len > r)\n    {\n      const char chr = unquoted[r++];\n      if (('\\\\' == chr) || ('\\\"' == chr))\n        result[w++] = '\\\\'; /* Escape current char */\n      result[w++] = chr;\n    }\n  }\n  else\n  {\n    if (unquoted_len > buf_size)\n      return 0; /* Quick fail: the output buffer is too small */\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (1)\n  {\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n    while (unquoted_len > r)\n    {\n      if (buf_size <= w)\n        return 0; /* The output buffer is too small */\n      else\n      {\n        const char chr = unquoted[r++];\n        if (('\\\\' == chr) || ('\\\"' == chr))\n        {\n          result[w++] = '\\\\'; /* Escape current char */\n          if (buf_size <= w)\n            return 0; /* The output buffer is too small */\n        }\n        result[w++] = chr;\n      }\n    }\n  }\n\n  mhd_assert (w >= r);\n  mhd_assert (w <= r * 2);\n  return w;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_quote code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\nstatic void mhd_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1585.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nsize_t\nMHD_str_quote (const char *unquoted,\n               size_t unquoted_len,\n               char *result,\n               size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  r = 0;\n  w = 0;\n\n  mhd_log(\"MHD_str_quote ENTRY: unquoted=%p unquoted_len=%zu buf_size=%zu\\n\",\n          (const void *)unquoted, unquoted_len, buf_size);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (unquoted_len * 2 <= buf_size)\n  {\n    mhd_log(\"fast loop chosen: unquoted_len * 2 <= buf_size (%zu * 2 <= %zu)\\n\",\n            unquoted_len, buf_size);\n    /* Fast loop: the output will fit the buffer with any input string content */\n    while (unquoted_len > r)\n    {\n      const char chr = unquoted[r++];\n      mhd_log(\"fast iter: r=%zu w=%zu chr=0x%02x '%c'\\n\",\n              r, w, (unsigned char)chr, (chr >= 32 && chr < 127) ? chr : '.');\n      if (('\\\\' == chr) || ('\\\"' == chr))\n      {\n        result[w++] = '\\\\'; /* Escape current char */\n        mhd_log(\"fast escaped: wrote '\\\\' at w=%zu\\n\", (size_t)(w-1));\n      }\n      result[w++] = chr;\n      mhd_log(\"fast wrote chr at w=%zu\\n\", (size_t)(w-1));\n    }\n  }\n  else\n  {\n    if (unquoted_len > buf_size)\n    {\n      mhd_log(\"fast quick-fail: unquoted_len (%zu) > buf_size (%zu) -> return 0\\n\",\n              unquoted_len, buf_size);\n      return 0; /* Quick fail: the output buffer is too small */\n    }\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (1)\n  {\n    mhd_log(\"small-code branch chosen: compiled with MHD_FAVOR_SMALL_CODE (if (1) taken)\\n\");\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n    while (unquoted_len > r)\n    {\n      if (buf_size <= w)\n      {\n        mhd_log(\"small return 0: buf_size <= w (%zu <= %zu) at r=%zu\\n\", buf_size, w, r);\n        return 0; /* The output buffer is too small */\n      }\n      else\n      {\n        const char chr = unquoted[r++];\n        mhd_log(\"small iter: r=%zu w=%zu chr=0x%02x '%c'\\n\",\n                r, w, (unsigned char)chr, (chr >= 32 && chr < 127) ? chr : '.');\n        if (('\\\\' == chr) || ('\\\"' == chr))\n        {\n          result[w++] = '\\\\'; /* Escape current char */\n          mhd_log(\"small escaped: wrote '\\\\' at w=%zu\\n\", (size_t)(w-1));\n          if (buf_size <= w)\n          {\n            mhd_log(\"small return 0 after escape: buf_size <= w (%zu <= %zu) at r=%zu\\n\",\n                    buf_size, w, r);\n            return 0; /* The output buffer is too small */\n          }\n        }\n        result[w++] = chr;\n        mhd_log(\"small wrote chr at w=%zu\\n\", (size_t)(w-1));\n      }\n    }\n  }\n\n  mhd_log(\"MHD_str_quote ASSERTS: w=%zu r=%zu\\n\", w, r);\n  mhd_assert (w >= r);\n  mhd_assert (w <= r * 2);\n  mhd_log(\"MHD_str_quote EXIT: returning w=%zu\\n\", w);\n  return w;\n}\n"
}