{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen MHD_FAVOR_SMALL_CODE is defined, the fragment becomes \"if (1) { ... }\". The constant-true conditional test is an operation that is always taken and could be removed (the block would behave identically without the if), so the conditional test constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_quote code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_str_quote as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_str_quote:\n```c\nsize_t\nMHD_str_quote (const char *unquoted,\n               size_t unquoted_len,\n               char *result,\n               size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  r = 0;\n  w = 0;\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (unquoted_len * 2 <= buf_size)\n  {\n    /* Fast loop: the output will fit the buffer with any input string content */\n    while (unquoted_len > r)\n    {\n      const char chr = unquoted[r++];\n      if (('\\\\' == chr) || ('\\\"' == chr))\n        result[w++] = '\\\\'; /* Escape current char */\n      result[w++] = chr;\n    }\n  }\n  else\n  {\n    if (unquoted_len > buf_size)\n      return 0; /* Quick fail: the output buffer is too small */\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (1)\n  {\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n    while (unquoted_len > r)\n    {\n      if (buf_size <= w)\n        return 0; /* The output buffer is too small */\n      else\n      {\n        const char chr = unquoted[r++];\n        if (('\\\\' == chr) || ('\\\"' == chr))\n        {\n          result[w++] = '\\\\'; /* Escape current char */\n          if (buf_size <= w)\n            return 0; /* The output buffer is too small */\n        }\n        result[w++] = chr;\n      }\n    }\n  }\n\n  mhd_assert (w >= r);\n  mhd_assert (w <= r * 2);\n  return w;\n}\n```\n</target_code>\nPlease provide the modified MHD_str_quote code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Record which compilation branch was taken (set via existing preprocessor symbol) */\n#ifndef MHD_FAVOR_SMALL_CODE\nstatic const int mhd_favor_small_code_compiled = 0;\n#else\nstatic const int mhd_favor_small_code_compiled = 1;\n#endif\n\nstatic void\nmhd_str_quote_log(const char *event,\n                  size_t r,\n                  size_t w,\n                  size_t unquoted_len,\n                  size_t buf_size,\n                  int chr_present,\n                  int chr_val)\n{\n  FILE *f = fopen(\"/tmp/logs/1582.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"MHD_str_quote: event=%s, r=%zu, w=%zu, unquoted_len=%zu, buf_size=%zu\",\n            event, r, w, unquoted_len, buf_size);\n    if (chr_present)\n    {\n      fprintf(f, \", chr='%c'(0x%02X)\", (unsigned char) chr_val, (unsigned int) (unsigned char) chr_val);\n    }\n    fprintf(f, \", compiled_small=%d\\n\", mhd_favor_small_code_compiled);\n    fclose(f);\n  }\n}\n\nsize_t\nMHD_str_quote (const char *unquoted,\n               size_t unquoted_len,\n               char *result,\n               size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  r = 0;\n  w = 0;\n\n  /* Log entry */\n  mhd_str_quote_log(\"entry\", r, w, unquoted_len, buf_size, 0, 0);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (unquoted_len * 2 <= buf_size)\n  {\n    /* Fast loop: the output will fit the buffer with any input string content */\n    mhd_str_quote_log(\"fast_path_taken\", r, w, unquoted_len, buf_size, 0, 0);\n    while (unquoted_len > r)\n    {\n      const char chr = unquoted[r++];\n      if (('\\\\' == chr) || ('\\\"' == chr))\n      {\n        /* Log escape event */\n        mhd_str_quote_log(\"emit_escape\", r, w, unquoted_len, buf_size, 1, (int) chr);\n        result[w++] = '\\\\'; /* Escape current char */\n      }\n      result[w++] = chr;\n    }\n  }\n  else\n  {\n    if (unquoted_len > buf_size)\n    {\n      mhd_str_quote_log(\"quick_fail_unquoted_len_gt_buf\", r, w, unquoted_len, buf_size, 0, 0);\n      return 0; /* Quick fail: the output buffer is too small */\n    }\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (1)\n  {\n    /* In the small-code variant this unconditional branch is taken; log that fact */\n    mhd_str_quote_log(\"small_variant_entered\", r, w, unquoted_len, buf_size, 0, 0);\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n    while (unquoted_len > r)\n    {\n      if (buf_size <= w)\n      {\n        mhd_str_quote_log(\"buffer_too_small_before_write\", r, w, unquoted_len, buf_size, 0, 0);\n        return 0; /* The output buffer is too small */\n      }\n      else\n      {\n        const char chr = unquoted[r++];\n        if (('\\\\' == chr) || ('\\\"' == chr))\n        {\n          /* Log escape about to be emitted and current indices */\n          mhd_str_quote_log(\"emit_escape_slow_path\", r, w, unquoted_len, buf_size, 1, (int) chr);\n          result[w++] = '\\\\'; /* Escape current char */\n          if (buf_size <= w)\n          {\n            mhd_str_quote_log(\"buffer_too_small_after_escape\", r, w, unquoted_len, buf_size, 0, 0);\n            return 0; /* The output buffer is too small */\n          }\n        }\n        /* Log normal character emit */\n        mhd_str_quote_log(\"emit_char\", r, w, unquoted_len, buf_size, 1, (int) chr);\n        result[w++] = chr;\n      }\n    }\n  }\n\n  mhd_str_quote_log(\"exit\", r, w, unquoted_len, buf_size, 0, 0);\n  mhd_assert (w >= r);\n  mhd_assert (w <= r * 2);\n  return w;\n}\n"
}