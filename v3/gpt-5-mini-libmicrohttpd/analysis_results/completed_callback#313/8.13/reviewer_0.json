{
  "user_message": "An agent A claimed that the following completed_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of completed_callback.\n```c\nstatic void\ncompleted_callback (void *cls,\n                    struct MHD_Connection *connection,\n                    void **req_cls,\n                    enum MHD_RequestTerminationCode toe)\n{\n  struct timeval *tv = *req_cls;\n  struct timeval tve;\n  uint64_t delta;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == tv)\n    return;\n  gettimeofday (&tve, NULL);\n\n  delta = ((uint64_t) (tve.tv_sec - tv->tv_sec)) * 1000000LL\n          + (uint64_t) tve.tv_usec - (uint64_t) tv->tv_usec;\n  if (delta < SMALL)\n    small_deltas[delta]++;\n  else\n    fprintf (stdout, \"D: %\" PRIu64 \" 1\\n\", delta);\n  free (tv);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameters 'cls' and 'connection' are declared as non-const pointers but are not modified by the function (they are only referenced as unused). According to MISRA C 2023 Rule 8.13, they should be declared to point to const-qualified types (e.g. 'const void *cls' and 'const struct MHD_Connection *connection').\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Rule 8.13 favors pointing to const-qualified types where that is possible, but it does not require changing function prototypes that must match an external/library callback signature. completed_callback is a callback whose parameters (void *cls, struct MHD_Connection *connection, void **req_cls, ...) must match the expected API; changing them to const-qualified types would break the required prototype (incompatible pointer types). Also, the code does use the req_cls contents (tv) and frees tv, so that pointed-to object must not be const. The unused parameters are correctly silenced with (void) casts. If you control the API, you could change the prototype to take const pointers for true input-only parameters; otherwise the current declaration is appropriate. Therefore the claimed violation of MISRA C 2023 Rule 8.13 is not valid in this context."
}