{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcpy(buf + used_size, pos->value, pos->value_size) where pos->value is used only as a read-only source. If pos->value is declared as a non-const pointer in struct MHD_HTTP_Res_Header (e.g. char *value), this violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible. Although memcpy's prototype accepts a const void * for the source, that does not satisfy the rule: the declaration of pos->value itself should be changed to const (for example const char *value) to indicate immutability.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "static void mhd_log_append(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/233.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic void mhd_log_bytes(const char *label, const char *data, size_t len)\n{\n  FILE *f = fopen(\"/tmp/logs/233.txt\", \"a\");\n  size_t to_write = (len > 128u) ? 128u : len;\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s (len=%zu): \", label, len);\n  if (NULL != data && to_write > 0u)\n  {\n    /* write a prefix of the bytes as-is (may contain non-printable chars) */\n    fwrite(data, 1, to_write, f);\n    if (to_write < len)\n      fprintf(f, \"...\");\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  mhd_log_append(\"ENTER: build_connection_chunked_response_footer: connection=%p, state=%d, chunked=%d\",\n                 (void *) connection, (int) connection->state,\n                 (int) connection->rp.props.chunked);\n\n  buf_size = connection_maximize_write_buffer (c);\n  mhd_log_append(\"buffer size after maximize: %zu\", buf_size);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n  {\n    mhd_log_append(\"EXIT: insufficient buf_size (%zu) < 5 -> MHD_NO\", buf_size);\n    return MHD_NO;\n  }\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n  mhd_log_append(\"wrote initial chunk terminator '0\\\\r\\\\n', used_size=%zu\", used_size);\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      mhd_log_append(\"found footer header: pos=%p, header=%p, header_size=%zu, value=%p, value_size=%zu, new_used_size=%zu\",\n                     (void *) pos, (void *) pos->header, pos->header_size,\n                     (void *) pos->value, pos->value_size, new_used_size);\n      if (new_used_size > buf_size)\n      {\n        mhd_log_append(\"EXIT: not enough room for footer new_used_size=%zu > buf_size=%zu -> MHD_NO\",\n                       new_used_size, buf_size);\n        return MHD_NO;\n      }\n      /* log header bytes (prefix) */\n      mhd_log_bytes(\"footer header bytes\", pos->header, pos->header_size);\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      mhd_log_append(\"memcpy header -> buf+%zu (size=%zu)\", used_size, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      /* log value bytes (prefix) */\n      mhd_log_bytes(\"footer value bytes\", pos->value, pos->value_size);\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      mhd_log_append(\"memcpy value -> buf+%zu (size=%zu)\", used_size, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n      mhd_log_append(\"appended footer (pos=%p), updated used_size=%zu\", (void *) pos, used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n  {\n    mhd_log_append(\"EXIT: not enough room for final CRLF used_size+2=%zu > buf_size=%zu -> MHD_NO\",\n                   used_size + 2, buf_size);\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n  mhd_log_append(\"wrote final CRLF, final used_size=%zu\", used_size);\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n  mhd_log_append(\"EXIT: success, write_buffer_append_offset now=%zu\", c->write_buffer_append_offset);\n\n  return MHD_YES;\n}\n"
}