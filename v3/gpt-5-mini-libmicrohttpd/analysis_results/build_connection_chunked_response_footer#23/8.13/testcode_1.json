{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses pos->header (and similarly pos->value) as the source argument to memcpy. If the struct member is declared as char *header (non-const), that violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when the pointed-to data is not modified. Here the header string is only read (copied), so it should be declared const char *header (and const char *value). Fix: change MHD_HTTP_Res_Header members to const-qualified pointer types (e.g. const char *header, const char *value).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *logf = fopen(\"/tmp/logs/233.txt\", \"a\");\n  enum MHD_Result result = MHD_NO; /* default, changed before final return */\n\n  if (logf)\n  {\n    fprintf(logf, \"ENTER build_connection_chunked_response_footer: connection=%p\\n\", (void *)connection);\n    fflush(logf);\n  }\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  if (logf)\n  {\n    fprintf(logf, \"buffer maximize returned buf_size=%zu\\n\", buf_size);\n    fflush(logf);\n  }\n\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n  {\n    if (logf)\n      fprintf(logf, \"buf_size < 5 -> cannot build footer, returning MHD_NO\\n\");\n    result = MHD_NO;\n    goto cleanup;\n  }\n\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  if (logf)\n    fprintf(logf, \"initial footer bytes written, used_size=%zu, write_buffer_append_offset=%zu\\n\",\n            used_size, c->write_buffer_append_offset);\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (logf)\n      {\n        fprintf(logf, \"processing header node=%p kind=%d header_ptr=%p header_size=%zu value_ptr=%p value_size=%zu\\n\",\n                (void *)pos, (int)pos->kind, (void *)pos->header, pos->header_size, (void *)pos->value, pos->value_size);\n        /* print a safe preview of header and value (may contain non-printable chars) */\n        fprintf(logf, \" header_preview='%.*s' value_preview='%.*s'\\n\",\n                (int)pos->header_size, pos->header ? pos->header : \"\",\n                (int)pos->value_size, pos->value ? pos->value : \"\");\n        fflush(logf);\n      }\n\n      if (new_used_size > buf_size)\n      {\n        if (logf)\n          fprintf(logf, \"not enough buffer: new_used_size=%zu buf_size=%zu -> returning MHD_NO\\n\",\n                  new_used_size, buf_size);\n        result = MHD_NO;\n        goto cleanup;\n      }\n\n      /* Log before memcpy to capture source pointers and sizes */\n      if (logf)\n        fprintf(logf, \"about to memcpy header %p -> dest %p, size=%zu\\n\",\n                (void *)pos->header, (void *)(buf + used_size), pos->header_size);\n\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n\n      if (logf)\n        fprintf(logf, \"about to memcpy value %p -> dest %p, size=%zu\\n\",\n                (void *)pos->value, (void *)(buf + used_size), pos->value_size);\n\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n\n      if (logf)\n        fprintf(logf, \"header appended, new used_size=%zu expected=%zu\\n\", used_size, new_used_size);\n\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n\n  if (used_size + 2 > buf_size)\n  {\n    if (logf)\n      fprintf(logf, \"final CRLF would overflow: used_size+2=%zu buf_size=%zu -> returning MHD_NO\\n\",\n              used_size + 2, buf_size);\n    result = MHD_NO;\n    goto cleanup;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  if (logf)\n  {\n    fprintf(logf, \"final used_size=%zu, updated write_buffer_append_offset=%zu, write_buffer_size=%zu\\n\",\n            used_size, c->write_buffer_append_offset, c->write_buffer_size);\n    fflush(logf);\n  }\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  result = MHD_YES;\n\ncleanup:\n  if (logf)\n  {\n    fprintf(logf, \"EXIT build_connection_chunked_response_footer: result=%d\\n\", (int)result);\n    fclose(logf);\n  }\n  return result;\n}\n"
}