{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion compares two local variables that, by construction in the preceding code, will always be equal: new_used_size is computed as used_size + pos->header_size + pos->value_size + 4, and the code then increments used_size by exactly those same amounts before reaching the assertion. The mhd_assert call has no observable side effects in this context, so its execution does not alter program behaviour; removing it would not change the program\u2019s behaviour. Therefore this assertion is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/232.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging functions to capture control flow and state information.\n   Logs are appended to /tmp/logs/232.txt. These helpers are deliberately\n   lightweight and do not alter the logic of the target function. */\nstatic void mhd_log_build_footer_entry(struct MHD_Connection *c)\n{\n  FILE *f = fopen(\"/tmp/logs/232.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"build_connection_chunked_response_footer: entry\\n\");\n  fprintf(f, \" connection=%p\\n\", (void *)c);\n  if (NULL != c)\n  {\n    fprintf(f, \"  rp.props.chunked=%d\\n\", (int)c->rp.props.chunked);\n    fprintf(f, \"  state=%d\\n\", (int)c->state);\n    fprintf(f, \"  rp.response=%p\\n\", (void *)c->rp.response);\n    fprintf(f, \"  write_buffer=%p append_offset=%zu size=%zu\\n\",\n            (void *)c->write_buffer, c->write_buffer_append_offset,\n            c->write_buffer_size);\n  }\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic void mhd_log_buf_state(const char *tag, struct MHD_Connection *c,\n                              char *buf, size_t buf_size, size_t used_size)\n{\n  FILE *f = fopen(\"/tmp/logs/232.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s\\n\", tag);\n  fprintf(f, \" connection=%p buf=%p buf_size=%zu used_size=%zu\\n\",\n          (void *)c, (void *)buf, buf_size, used_size);\n  if (NULL != c)\n    fprintf(f, \" write_buffer_append_offset=%zu write_buffer_size=%zu\\n\",\n            c->write_buffer_append_offset, c->write_buffer_size);\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic void mhd_log_header_processing(struct MHD_Connection *c,\n                                      struct MHD_HTTP_Res_Header *pos,\n                                      size_t used_size, size_t new_used_size,\n                                      size_t buf_size, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/232.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"header processing (%s)\\n\", stage);\n  fprintf(f, \" pos=%p kind=%d header_size=%zu value_size=%zu\\n\",\n          (void *)pos, (int)pos->kind, pos->header_size, pos->value_size);\n  fprintf(f, \" used_size(before)=%zu new_used_size(computed)=%zu buf_size=%zu\\n\",\n          used_size, new_used_size, buf_size);\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic void mhd_log_header_post(struct MHD_Connection *c,\n                                struct MHD_HTTP_Res_Header *pos,\n                                size_t used_size, size_t new_used_size)\n{\n  FILE *f = fopen(\"/tmp/logs/232.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"header processing (post)\\n\");\n  fprintf(f, \" pos=%p header_size=%zu value_size=%zu\\n\",\n          (void *)pos, pos->header_size, pos->value_size);\n  fprintf(f, \" used_size(after)=%zu new_used_size(computed)=%zu equal=%d\\n\",\n          used_size, new_used_size, (used_size == new_used_size) ? 1 : 0);\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic void mhd_log_build_footer_exit(struct MHD_Connection *c, size_t used_size)\n{\n  FILE *f = fopen(\"/tmp/logs/232.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"build_connection_chunked_response_footer: exit\\n\");\n  fprintf(f, \" final used_size=%zu write_buffer_append_offset(before)=%zu write_buffer_size=%zu\\n\",\n          used_size, c->write_buffer_append_offset, c->write_buffer_size);\n  fprintf(f, \"---\\n\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Log entry and initial connection state */\n  mhd_log_build_footer_entry(c);\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n\n  /* Log buffer size obtained */\n  mhd_log_buf_state(\"after maximize write buffer\", c, NULL, buf_size, 0);\n\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  /* Log buffer state after writing initial chunk terminator */\n  mhd_log_buf_state(\"after writing '0\\r\\n'\", c, buf, buf_size, used_size);\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n\n      /* Log header info and computed sizes before copying */\n      mhd_log_header_processing(c, pos, used_size, new_used_size, buf_size, \"before_copy\");\n\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n\n      /* Log header state after copying and updating used_size */\n      mhd_log_header_post(c, pos, used_size, new_used_size);\n\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  /* Log final buffer state before updating append offset */\n  mhd_log_buf_state(\"before updating append offset\", c, buf, buf_size, used_size);\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  /* Log exit and final sizes */\n  mhd_log_build_footer_exit(c, used_size);\n\n  return MHD_YES;\n}\n"
}