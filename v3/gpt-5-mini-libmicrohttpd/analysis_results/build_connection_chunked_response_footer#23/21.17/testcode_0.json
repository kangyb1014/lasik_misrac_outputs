{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nInteger overflow / unchecked source lengths can lead to out-of-bounds accesses. Example: if used_size is 10, buf_size is 100 and pos->header_size is (SIZE_MAX - 5) (pos->value_size = 0), the computation new_used_size = used_size + pos->header_size + pos->value_size + 4 overflows and wraps to a small value (9). The subsequent test if (new_used_size > buf_size) is then bypassed and memcpy(buf + used_size, pos->header, pos->header_size) will attempt to write ~SIZE_MAX bytes into a small buffer, causing an out-of-bounds access. Also, the code does not validate that pos->header_size/pos->value_size actually fit the source objects, so reads from pos->header/pos->value may likewise access beyond their bounds. Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified build_connection_chunked_response_footer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <limits.h>\n#include <string.h>\n\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *logf = NULL;\n\n  /* Open log early so we can capture any early failures. */\n  logf = fopen(\"/tmp/logs/239.txt\", \"a\");\n  if (logf)\n    fprintf(logf, \"ENTER build_connection_chunked_response_footer: connection=%p\\n\", (void *)connection);\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  if (logf)\n    fprintf(logf, \"after maximize_write_buffer: buf_size=%zu\\n\", buf_size);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5) {\n    if (logf)\n      fprintf(logf, \"early return MHD_NO: buf_size < 5 (%zu)\\n\", buf_size);\n    if (logf) fclose(logf);\n    return MHD_NO;\n  }\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  if (logf) {\n    fprintf(logf, \"initial footer start written, used_size=%zu, write_buffer=%p, write_buffer_append_offset=%zu, write_buffer_size=%zu\\n\",\n            used_size, (void *)c->write_buffer, (size_t)c->write_buffer_append_offset, (size_t)c->write_buffer_size);\n  }\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (logf)\n      fprintf(logf, \"iter header pos=%p kind=%d header_size=%zu value_size=%zu\\n\",\n              (void *)pos, (int)pos->kind, (size_t)pos->header_size, (size_t)pos->value_size);\n\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      /* Log potential overflow conditions without changing behavior. */\n      int overflow_by_components = 0;\n\n      /* Check for overflow in the sum used_size + pos->header_size + pos->value_size + 4 */\n      if (used_size > SIZE_MAX - 4) {\n        overflow_by_components = 1;\n      } else {\n        size_t after_add4 = used_size + 4;\n        if (pos->header_size > SIZE_MAX - after_add4)\n          overflow_by_components = 1;\n        else if (pos->value_size > SIZE_MAX - (after_add4 + pos->header_size))\n          overflow_by_components = 1;\n      }\n\n      /* Compute new_used_size the same way as original code (preserve behavior) */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n\n      if (logf) {\n        fprintf(logf, \"computed new_used_size=%zu (used_size=%zu + header_size=%zu + value_size=%zu + 4) overflow_by_components=%d buf_size=%zu\\n\",\n                new_used_size, used_size, pos->header_size, pos->value_size, overflow_by_components, buf_size);\n      }\n\n      if (new_used_size > buf_size) {\n        if (logf) {\n          fprintf(logf, \"early return MHD_NO: new_used_size (%zu) > buf_size (%zu)\\n\", new_used_size, buf_size);\n          /* If overflow_by_components is true, that indicates possible integer wrap. */\n          if (overflow_by_components)\n            fprintf(logf, \"NOTE: overflow_by_components detected (possible integer wrap).\\n\");\n        }\n        if (logf) fclose(logf);\n        return MHD_NO;\n      }\n\n      /* Log source/destination pointers and lengths right before memcpy to capture state. */\n      if (logf) {\n        fprintf(logf, \"about to memcpy header: dest=%p offset=%zu src=%p len=%zu\\n\",\n                (void *)(buf + used_size), (size_t)used_size, (void *)pos->header, (size_t)pos->header_size);\n      }\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      if (logf) {\n        fprintf(logf, \"about to memcpy value: dest=%p offset=%zu src=%p len=%zu\\n\",\n                (void *)(buf + used_size), (size_t)used_size, (void *)pos->value, (size_t)pos->value_size);\n      }\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n\n      if (logf)\n        fprintf(logf, \"after header appended, used_size=%zu\\n\", used_size);\n    }\n  }\n  if (used_size + 2 > buf_size) {\n    if (logf) {\n      fprintf(logf, \"early return MHD_NO: final CRLF would exceed buf_size (used_size+2=%zu > buf_size=%zu)\\n\", used_size + 2, buf_size);\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  if (logf) {\n    fprintf(logf, \"EXIT build_connection_chunked_response_footer: return MHD_YES used_size=%zu new_write_buffer_append_offset=%zu\\n\",\n            used_size, (size_t)c->write_buffer_append_offset);\n    fclose(logf);\n  }\n\n  return MHD_YES;\n}\n"
}