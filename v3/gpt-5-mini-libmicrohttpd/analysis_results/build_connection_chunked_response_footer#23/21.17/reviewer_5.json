{
  "user_message": "An agent A claimed that the following build_connection_chunked_response_footer code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of build_connection_chunked_response_footer.\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nPotential integer overflow in the computation of new_used_size can make the bounds check ineffective. Example: assume size_t is N-bit, let used_size = 10, pos->header_size = SIZE_MAX - 10, pos->value_size = 5, buf_size = 100. Then new_used_size = 10 + (SIZE_MAX-10) + 5 + 4 = SIZE_MAX + 9 \u2192 wraps to 8 (modulo SIZE_MAX+1), so (new_used_size > buf_size) is false and the function proceeds. The subsequent memcpy calls (first copying the huge pos->header, then the memcpy(buf + used_size, pos->value, pos->value_size); fragment under review) will write beyond the allocated buf, violating Rule 21.17. The code does not guard against size_t overflow when computing new_used_size.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. new_used_size is computed as used_size + pos->header_size + pos->value_size + 4 using size_t arithmetic with no overflow protection. If that sum overflows (wraps modulo SIZE_MAX+1) it can become a small value and pass the subsequent bounds check (new_used_size > buf_size), even though pos->header_size and/or pos->value_size are far larger than the remaining buffer space. The code then calls memcpy with pos->header_size and pos->value_size, which can write past buf, violating the requirement of MISRA C 2023 Rule 21.17 (string/memory functions must not result in accesses beyond the bounds of the objects referenced). The provided example (used_size = 10, pos->header_size = SIZE_MAX-10, pos->value_size = 5, buf_size = 100) demonstrates the wrap-around and out\u2011of\u2011bounds write. To fix this the code must detect/avoid size_t overflow when computing the required size (for example by checking each term against the available remaining buffer or performing guarded subtractions) before calling memcpy."
}