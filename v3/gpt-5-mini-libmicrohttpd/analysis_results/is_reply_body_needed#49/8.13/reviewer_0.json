{
  "user_message": "An agent A claimed that the following is_reply_body_needed code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_reply_body_needed.\n```c\nstatic enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n\n  if (199 >= rcode)\n    return RP_BODY_NONE;\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n    return RP_BODY_NONE;\n\n#if 0\n  /* This check is not needed as upgrade handler is used only with code 101 */\n#ifdef UPGRADE_SUPPORT\n  if (NULL != rp.response->upgrade_handler)\n    return RP_BODY_NONE;\n#endif /* UPGRADE_SUPPORT */\n#endif\n\n#if 0\n  /* CONNECT is not supported by MHD */\n  /* Successful responses for connect requests are filtered by\n   * MHD_queue_response() */\n  if ( (MHD_HTTP_MTHD_CONNECT == c->rq.http_mthd) &&\n       (2 == rcode / 100) )\n    return false; /* Actually pass-through CONNECT is not supported by MHD */\n#endif\n\n  /* Reply body headers could be used.\n   * Check whether reply body itself must be used. */\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n    return RP_BODY_HEADERS_ONLY;\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n    return RP_BODY_HEADERS_ONLY;\n\n  /* Reply body must be sent. The body may have zero length, but body size\n   * must be indicated by headers ('Content-Length:' or\n   * 'Transfer-Encoding: chunked'). */\n  return RP_BODY_SEND;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function takes a pointer to struct MHD_Connection but only reads from it (uses c->rq.http_mthd, no writes). The parameter is declared as 'struct MHD_Connection *connection' and the local alias is 'struct MHD_Connection *const c = connection;' \u2014 neither makes the pointed-to object const. Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. In this case the pointee can and should be const (e.g. 'const struct MHD_Connection *connection' and 'const struct MHD_Connection *const c = connection;').\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function only reads from the pointed-to object (uses c->rq.http_mthd, no writes), yet the parameter and alias are declared as pointers to mutable MHD_Connection (struct MHD_Connection *connection and struct MHD_Connection *const c). MISRA C:2023 Rule 8.13 advises that pointers should point to const-qualified types whenever possible; here the pointee can and should be const (e.g. const struct MHD_Connection *connection and const struct MHD_Connection *const c). The only caveat is if the function signature must match an external API or callback that requires a non-const parameter; in that case the deviation is justified. Given the code shown, there is a violation."
}