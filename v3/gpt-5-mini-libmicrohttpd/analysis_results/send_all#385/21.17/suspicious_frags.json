{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of send_all:\n```c\nstatic size_t\nsend_all (MHD_socket sock, const unsigned char *buf, size_t len)\n{\n  ssize_t ret;\n  size_t off;\n\n  for (off = 0; off < len; off += (size_t) ret)\n  {\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n    ret = send (sock, (const void *) &buf[off], len - off, 0);\n#else  /* Native W32 */\n    ret = send (sock, (const void *) &buf[off], (int) (len - off), 0);\n#endif /* Native W32 */\n    if (0 > ret)\n    {\n      if (EAGAIN == errno)\n      {\n        ret = 0;\n        continue;\n      }\n      break;\n    }\n    if (0 == ret)\n    {\n      break;\n    }\n  }\n  return off;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No calls to any <string.h> functions are present in the provided code (no memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn, etc.). Rule 21.17 specifically targets use of the string-handling functions from <string.h>, so there are no fragments that fall under that rule to investigate.\n\nThe pointer arithmetic &buf[off] and the length argument (len - off) passed to send() are bounded by the loop condition (off < len), so the code does not cause accesses beyond the buf object for the purposes of string.h functions (send() is not a string.h function). The casts to (const void *) are benign with respect to Rule 21.17.\n\nNote: there are other potential issues unrelated to Rule 21.17 (for example, the Windows branch casts len - off to int which could truncate a large size_t, and error/return-value handling semantics could merit review), but these are outside the scope of MISRA C 2023 Rule 21.17 and therefore are not flagged here."
}