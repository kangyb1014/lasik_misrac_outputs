{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of send_all:\n```c\nstatic size_t\nsend_all (MHD_socket sock, const unsigned char *buf, size_t len)\n{\n  ssize_t ret;\n  size_t off;\n\n  for (off = 0; off < len; off += (size_t) ret)\n  {\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n    ret = send (sock, (const void *) &buf[off], len - off, 0);\n#else  /* Native W32 */\n    ret = send (sock, (const void *) &buf[off], (int) (len - off), 0);\n#endif /* Native W32 */\n    if (0 > ret)\n    {\n      if (EAGAIN == errno)\n      {\n        ret = 0;\n        continue;\n      }\n      break;\n    }\n    if (0 == ret)\n    {\n      break;\n    }\n  }\n  return off;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n    ret = send (sock, (const void *) &buf[off], len - off, 0);\n#else  /* Native W32 */\n    ret = send (sock, (const void *) &buf[off], (int) (len - off), 0);\n#endif /* Native W32 */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The fragment uses conditional compilation (#if / #else) to select one of two platform-specific send() calls; at compile time exactly one branch is present in the translation unit so there is no unreachable code in the built project. (A violation would occur if code remained in the translation unit that could never be executed at run time, e.g. code guarded by a constant false condition or dead after control-flow analysis, but that does not apply here.)"
}