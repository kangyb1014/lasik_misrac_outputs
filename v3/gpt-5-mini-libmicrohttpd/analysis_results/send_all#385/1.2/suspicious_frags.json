{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of send_all:\n```c\nstatic size_t\nsend_all (MHD_socket sock, const unsigned char *buf, size_t len)\n{\n  ssize_t ret;\n  size_t off;\n\n  for (off = 0; off < len; off += (size_t) ret)\n  {\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n    ret = send (sock, (const void *) &buf[off], len - off, 0);\n#else  /* Native W32 */\n    ret = send (sock, (const void *) &buf[off], (int) (len - off), 0);\n#endif /* Native W32 */\n    if (0 > ret)\n    {\n      if (EAGAIN == errno)\n      {\n        ret = 0;\n        continue;\n      }\n      break;\n    }\n    if (0 == ret)\n    {\n      break;\n    }\n  }\n  return off;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are present in the provided code fragment. Specific points checked and reasons they do not indicate use of language/compiler extensions:\n\n- Function declaration and storage class (static size_t send_all(...)): standard C function declaration and storage-class specifier.\n- Use of size_t and ssize_t: these are standard library/types (size_t in ISO C, ssize_t commonly provided by POSIX). Their use is not a compiler language extension. (If ssize_t is an alias provided by a platform header, that is a platform API/type, not a language extension.)\n- MHD_socket parameter: this is a typedef/name coming from the surrounding project/platform headers; a typedef is standard C and not a compiler extension. Its definition would need to be inspected to confirm, but its use here is ordinary and not an explicit language extension.\n- Preprocessor conditionals (#if ! defined(_WIN32) || defined(__CYGWIN__)) and #else: standard preprocessor usage for platform-specific code, not a language extension. Platform-specific macros themselves are not language extensions unless they invoke compiler-specific keywords (none do here).\n- Calls to send(...) and casts such as (const void *) &buf[off] and (int) (len - off): standard C casts and calls to platform APIs. Casting size_t to int is a conversion/truncation issue but not a language extension.\n- Tests/comparisons (0 > ret, 0 == ret) and use of errno/EAGAIN: standard C comparisons and standard error macros from errno.h / POSIX; not compiler language extensions.\n- Loop and control flow (for loop, continue, break, return): all standard C constructs.\n\nBecause none of the above constructs rely on compiler-specific language extensions (such as __attribute__, typeof, inline assembly, compiler builtins, nonstandard keywords, or other documented compiler-specific features), there are no code fragments here that need to be reported for MISRA C 2023 Rule 1.2 (language extensions should not be used). If you want, you can provide the definitions of MHD_socket or platform headers to double-check they do not introduce compiler-specific extensions, but based on the shown code there is no evidence of language extensions."
}