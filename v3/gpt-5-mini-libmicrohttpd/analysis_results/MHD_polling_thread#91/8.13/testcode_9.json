{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis is a violation if the function MHD_strerror_ is declared to return a non-const pointer (char *). The error text returned is effectively read-only, so the pointer should be const char *. Using a non-const pointer to point at static/read-only message data would violate MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_polling_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_polling_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_polling_thread:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n      MHD_poll (daemon, MHD_YES);\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n      MHD_epoll (daemon, -1);\n    else\n#endif\n    MHD_select (daemon, -1);\n    MHD_cleanup_connections (daemon);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n    resume_suspended_connections (daemon);\n  close_all_connections (daemon);\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_polling_thread code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: append timestamped messages to /tmp/logs/913.txt */\nstatic void\nMHD_log_probe (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/913.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t t = time (NULL);\n  struct tm tm_buf;\n  char timebuf[32] = \"\";\n  if (localtime_r (&t, &tm_buf) != NULL)\n    strftime (timebuf, sizeof (timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n  if (timebuf[0])\n    fprintf (f, \"[%s] \", timebuf);\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n  int loop_count = 0;\n\n  /* Log entry and key initial state */\n  MHD_log_probe (\"MHD_polling_thread: entry, daemon=%p, tid addr=%p, initial shutdown=%d\", daemon, (void *)&(daemon->tid), (int)daemon->shutdown);\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    MHD_log_probe (\"MHD_polling_thread: attempting to block SIGPIPE\");\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n  {\n    daemon->sigpipe_blocked = true;\n    MHD_log_probe (\"MHD_polling_thread: SIGPIPE blocked successfully, sigpipe_blocked=%d\", (int)daemon->sigpipe_blocked);\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    /* Capture strerror text and pointer (evidence for read-only static message) */\n    const char *msg = MHD_strerror_ (errno);\n    MHD_log_probe (\"MHD_polling_thread: Failed to block SIGPIPE on daemon thread: errno=%d (%s), msg_ptr=%p\", errno, msg ? msg : \"(null)\", (void *)msg);\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n  }\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n    loop_count++;\n    MHD_log_probe (\"MHD_polling_thread: loop iteration %d, shutdown=%d\", loop_count, (int)daemon->shutdown);\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n    {\n      MHD_log_probe (\"MHD_polling_thread: using poll (iteration %d)\", loop_count);\n      MHD_poll (daemon, MHD_YES);\n    }\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n    {\n      MHD_log_probe (\"MHD_polling_thread: using epoll (iteration %d)\", loop_count);\n      MHD_epoll (daemon, -1);\n    }\n    else\n#endif\n    {\n      MHD_log_probe (\"MHD_polling_thread: using select (iteration %d)\", loop_count);\n      MHD_select (daemon, -1);\n    }\n\n    MHD_log_probe (\"MHD_polling_thread: calling MHD_cleanup_connections (iteration %d)\", loop_count);\n    MHD_cleanup_connections (daemon);\n    MHD_log_probe (\"MHD_polling_thread: returned from MHD_cleanup_connections (iteration %d)\", loop_count);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n  {\n    MHD_log_probe (\"MHD_polling_thread: resuming suspended connections (options=0x%08x)\", (unsigned)daemon->options);\n    resume_suspended_connections (daemon);\n    MHD_log_probe (\"MHD_polling_thread: resumed suspended connections\");\n  }\n  MHD_log_probe (\"MHD_polling_thread: closing all connections\");\n  close_all_connections (daemon);\n  MHD_log_probe (\"MHD_polling_thread: closed all connections, exiting thread\");\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n"
}