{
  "user_message": "An agent A claimed that the following MHD_get_fdset code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_fdset.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset (struct MHD_Daemon *daemon,\n               fd_set *read_fd_set,\n               fd_set *write_fd_set,\n               fd_set *except_fd_set,\n               MHD_socket *max_fd)\n{\n  return MHD_get_fdset2 (daemon,\n                         read_fd_set,\n                         write_fd_set,\n                         except_fd_set,\n                         max_fd,\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n                         daemon->fdset_size_set_by_app ?\n                         ((unsigned int) daemon->fdset_size) :\n                         ((unsigned int) _MHD_SYS_DEFAULT_FD_SETSIZE)\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n                         ((unsigned int) _MHD_SYS_DEFAULT_FD_SETSIZE)\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n                         );\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nMHD_get_fdset declares the parameter as 'struct MHD_Daemon *daemon' but in the shown code it only reads fields from daemon (e.g. daemon->fdset_size_set_by_app and daemon->fdset_size) and forwards the pointer to MHD_get_fdset2. If neither MHD_get_fdset nor its callees modify the pointed-to object, the parameter could and should be declared as 'const struct MHD_Daemon *daemon'. Therefore this is a violation of MISRA C 2023 Rule 8.13 in that usage scenario.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s claim is a conditional observation, not a proven violation. The shown MHD_get_fdset implementation only reads fields and forwards the daemon pointer to MHD_get_fdset2, so in isolation it looks like it could accept a const pointer. However, compliance with MISRA C 2023 Rule 8.13 depends on whether the pointed-to object is actually modified by MHD_get_fdset2 (or other callers) or whether the API must remain non-const for compatibility. Since the snippet does not show MHD_get_fdset2\u2019s prototype or body, and the public API may require a non-const parameter, we cannot conclude there is a rule violation. If neither this function nor any callee ever modifies *daemon, then the parameter should be changed to const and that would satisfy rule 8.13; but that is a code-change suggestion, not a demonstrated violation in the provided code. Therefore the report as stated is not confirmed."
}