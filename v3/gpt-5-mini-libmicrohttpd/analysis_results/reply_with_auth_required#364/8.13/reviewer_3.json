{
  "user_message": "An agent A claimed that the following reply_with_auth_required code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of reply_with_auth_required.\n```c\nstatic enum MHD_Result\nreply_with_auth_required (struct MHD_Connection *c,\n                          int stale,\n                          int wrong_cred)\n{\n  static const char auth_required_content[] =\n    \"<html><head><title>Authentication required</title></head>\" \\\n    \"<body>The requested page needs authentication.</body></html>\";\n  static const size_t auth_required_content_len =\n    (sizeof(auth_required_content) / sizeof(char)) - 1;\n  static const char wrong_creds_content[] =\n    \"<html><head><title>Wrong credentials</title></head>\" \\\n    \"<body>The provided credentials are incorrect.</body></html>\";\n  static const size_t wrong_creds_content_len =\n    (sizeof(wrong_creds_content) / sizeof(char)) - 1;\n  struct MHD_Response *resp;\n  enum MHD_Result ret;\n\n  if (wrong_cred)\n    stale = 0; /* Force client to ask user for username and password */\n\n  if (! wrong_cred)\n    resp = MHD_create_response_from_buffer_static (auth_required_content_len,\n                                                   auth_required_content);\n  else\n    resp = MHD_create_response_from_buffer_static (wrong_creds_content_len,\n                                                   wrong_creds_content);\n  if (NULL == resp)\n    return MHD_NO;\n\n  /* Ignore possible error when adding the header as the reply will work even\n     without this header. */\n  (void) MHD_add_response_header (resp,\n                                  MHD_HTTP_HEADER_CONTENT_TYPE, \"text/html\");\n\n\n  ret = MHD_queue_auth_required_response3 (\n    c,\n    REALM,\n    OPAQUE_DATA, /* The \"opaque data\", not really useful */\n    SEC_AREA1_URL \" \" SEC_AREA2_URL, /* Space-separated list of URLs' initial parts */\n    resp,\n    stale,\n    get_m_QOP (),\n    get_m_algo (),\n    ! 0, /* Userhash support enabled */\n    ! 0 /* UTF-8 is preferred */);\n  MHD_destroy_response (resp);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe array auth_required_content is declared as 'static const char[]' but it is passed to MHD_create_response_from_buffer_static. If the prototype of MHD_create_response_from_buffer_static expects a non-const pointer (for example 'void *' or 'char *'), the const qualifier is discarded when passing auth_required_content \u2014 this constitutes a violation of MISRA C 2023 Rule 8.13. (If, instead, the function parameter is declared 'const void *' or 'const char *', there is no violation.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent is incorrect. MISRA C 2023 Rule 8.13 requires that pointers point to const-qualified types where possible. In the shown code the string objects are declared as static const char[], so they do point to const-qualified types \u2014 that is compliant with 8.13. The only potential problem described by the agent is that the const qualifier might be discarded when calling MHD_create_response_from_buffer_static if that function's parameter is non-const (e.g. char * or void *). That would be an issue, but it is not a violation of Rule 8.13: it would instead be a qualifier-discarding/conversion problem governed by other MISRA rules (and indeed by C's type system). If the function is properly declared to accept a const pointer (const char * or const void *), there is no problem. Therefore the reported violation of Rule 8.13 is not correct."
}