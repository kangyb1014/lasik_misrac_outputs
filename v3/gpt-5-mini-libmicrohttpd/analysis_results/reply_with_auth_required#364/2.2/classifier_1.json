{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of reply_with_auth_required:\n```c\nstatic enum MHD_Result\nreply_with_auth_required (struct MHD_Connection *c,\n                          int stale,\n                          int wrong_cred)\n{\n  static const char auth_required_content[] =\n    \"<html><head><title>Authentication required</title></head>\" \\\n    \"<body>The requested page needs authentication.</body></html>\";\n  static const size_t auth_required_content_len =\n    (sizeof(auth_required_content) / sizeof(char)) - 1;\n  static const char wrong_creds_content[] =\n    \"<html><head><title>Wrong credentials</title></head>\" \\\n    \"<body>The provided credentials are incorrect.</body></html>\";\n  static const size_t wrong_creds_content_len =\n    (sizeof(wrong_creds_content) / sizeof(char)) - 1;\n  struct MHD_Response *resp;\n  enum MHD_Result ret;\n\n  if (wrong_cred)\n    stale = 0; /* Force client to ask user for username and password */\n\n  if (! wrong_cred)\n    resp = MHD_create_response_from_buffer_static (auth_required_content_len,\n                                                   auth_required_content);\n  else\n    resp = MHD_create_response_from_buffer_static (wrong_creds_content_len,\n                                                   wrong_creds_content);\n  if (NULL == resp)\n    return MHD_NO;\n\n  /* Ignore possible error when adding the header as the reply will work even\n     without this header. */\n  (void) MHD_add_response_header (resp,\n                                  MHD_HTTP_HEADER_CONTENT_TYPE, \"text/html\");\n\n\n  ret = MHD_queue_auth_required_response3 (\n    c,\n    REALM,\n    OPAQUE_DATA, /* The \"opaque data\", not really useful */\n    SEC_AREA1_URL \" \" SEC_AREA2_URL, /* Space-separated list of URLs' initial parts */\n    resp,\n    stale,\n    get_m_QOP (),\n    get_m_algo (),\n    ! 0, /* Userhash support enabled */\n    ! 0 /* UTF-8 is preferred */);\n  MHD_destroy_response (resp);\n  return ret;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nret = MHD_queue_auth_required_response3 (\n    c,\n    REALM,\n    OPAQUE_DATA, /* The \"opaque data\", not really useful */\n    SEC_AREA1_URL \" \" SEC_AREA2_URL, /* Space-separated list of URLs' initial parts */\n    resp,\n    stale,\n    get_m_QOP (),\n    get_m_algo (),\n    ! 0, /* Userhash support enabled */\n    ! 0 /* UTF-8 is preferred */);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No dead code in the fragment: all evaluated expressions (get_m_QOP(), get_m_algo(), the boolean constants !0, and the response pointer) are used as parameters to MHD_queue_auth_required_response3 and can affect its behaviour. Removing any of these runtime evaluations or the call itself would change program behaviour, so Rule 2.2 is not violated."
}