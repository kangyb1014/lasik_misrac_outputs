{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen compiled without thread support (neither MHD_USE_POSIX_THREADS nor MHD_USE_W32_THREADS defined), the statement '(void) daemon;' in the #else branch is executed only to suppress an unused-parameter warning. It has no observable effect and could be removed without changing program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_count_unlock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/842.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_count_unlock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_unlock:\n```c\nstatic void\nMHD_ip_count_unlock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_count_unlock code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Forward declaration in case the real definition is in another translation unit. */\nstruct MHD_Daemon;\n\n/*\n * Simple probe logger that appends an event line to /tmp/logs/842.txt.\n * It intentionally only prints the pointer value of 'daemon' to avoid\n * dereferencing or changing program behaviour beyond logging.\n */\nstatic void\nMHD_probe_log(const char *event, const struct MHD_Daemon *daemon)\n{\n    FILE *f = fopen(\"/tmp/logs/842.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    time_t t = time(NULL);\n    /* print timestamp, event string and pointer value for daemon */\n    (void) fprintf(f, \"%ld: %s - daemon=%p\\n\", (long) t, event, (const void *) daemon);\n    (void) fclose(f);\n}\n\nstatic void\nMHD_ip_count_unlock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Log before and after unlocking so callers can see the control path. */\n  MHD_probe_log(\"MHD_ip_count_unlock: threads branch - about to unlock mutex\", daemon);\n  MHD_mutex_unlock_chk_ (&daemon->per_ip_connection_mutex);\n  MHD_probe_log(\"MHD_ip_count_unlock: threads branch - mutex unlocked\", daemon);\n#else\n  /* Preserve the original unused-parameter suppression. */\n  (void) daemon;\n  /* Log that the non-thread branch executed (this is the branch reported as dead-code candidate). */\n  MHD_probe_log(\"MHD_ip_count_unlock: non-thread branch - no-op (dead-code candidate)\", daemon);\n#endif\n}\n"
}