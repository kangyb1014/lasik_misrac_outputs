{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable is declared as a const pointer to a non-const MHD_Daemon: 'struct MHD_Daemon *const daemon = connection->daemon;'. In this function the daemon object is only read (fields accessed like daemon->options, daemon->tid) and not modified, so the pointer could and should point to a const-qualified type (e.g. 'const struct MHD_Daemon *const daemon'). Therefore the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_suspend_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_suspend_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_suspend_connection:\n```c\n_MHD_EXTERN void\nMHD_suspend_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot suspend connections without \" \\\n                  \"enabling MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#ifdef UPGRADE_SUPPORT\n  if (NULL != connection->urh)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Error: connection scheduled for \\\"upgrade\\\" cannot \" \\\n                 \"be suspended.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return;\n  }\n#endif /* UPGRADE_SUPPORT */\n  internal_suspend_connection_ (connection);\n}\n```\n</target_code>\nPlease provide the modified MHD_suspend_connection code.\n",
  "test_code": "_MHD_EXTERN void\nMHD_suspend_connection (struct MHD_Connection *connection)\n{\n  /* Lightweight probes that write execution trace + key state to a logfile so\n     other agents can reproduce the scenario where the local daemon pointer is\n     non-const-qualified but only read. We write to /tmp/logs/1023.txt. */\n\n  /* Include here so the probe is self-contained when inserted into the file.\n     The preprocessor will place the includes at this point. */\n  #include <stdio.h>\n  #include <inttypes.h>\n\n  FILE *log = fopen(\"/tmp/logs/1023.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"MHD_suspend_connection: ENTER\\n\");\n    fprintf(log, \"  connection=%p\\n\", (void *) connection);\n  }\n\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  if (log)\n  {\n    fprintf(log, \"  daemon (non-const-qualified pointer) = %p\\n\", (void *) daemon);\n    /* Print likely useful state. Cast to unsigned long for portability in logs. */\n    fprintf(log, \"  daemon->options = 0x%lx\\n\", (unsigned long) daemon->options);\n    fprintf(log, \"  daemon->tid     = 0x%lx\\n\", (unsigned long) daemon->tid);\n  }\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n\n  if (log)\n  {\n    int using_threads = MHD_D_IS_USING_THREADS_ (daemon);\n    int thread_per_conn = MHD_D_IS_USING_THREAD_PER_CONN_ (daemon);\n    int is_current = MHD_thread_handle_ID_is_current_thread_ (daemon->tid);\n    fprintf(log, \"  Thread checks: using_threads=%d, thread_per_conn=%d, is_current_thread=%d\\n\",\n            using_threads, thread_per_conn, is_current);\n  }\n#endif /* MHD_USE_THREADS */\n\n  if (log)\n  {\n    int allow = 0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME);\n    fprintf(log, \"  MHD_TEST_ALLOW_SUSPEND_RESUME bit set? %d (options=0x%lx)\\n\",\n            allow, (unsigned long) daemon->options);\n  }\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n  {\n    if (log)\n    {\n      fprintf(log, \"  PANIC: Cannot suspend connections without enabling MHD_ALLOW_SUSPEND_RESUME\\n\");\n      fclose(log);\n    }\n    MHD_PANIC (_ (\"Cannot suspend connections without \" \\\n                  \"enabling MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n  }\n\n#ifdef UPGRADE_SUPPORT\n  if (NULL != connection->urh)\n  {\n#ifdef HAVE_MESSAGES\n    if (log)\n      fprintf(log, \"  connection->urh=%p -> scheduled for upgrade; cannot suspend. Returning.\\n\", (void *) connection->urh);\n    MHD_DLOG (daemon,\n              _ (\"Error: connection scheduled for \\\"upgrade\\\" cannot \" \\\n                 \"be suspended.\\n\"));\n#endif /* HAVE_MESSAGES */\n    if (log)\n      fclose(log);\n    return;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  if (log)\n  {\n    fprintf(log, \"  Calling internal_suspend_connection_() for connection=%p\\n\", (void *) connection);\n    fclose(log);\n  }\n\n  internal_suspend_connection_ (connection);\n}\n"
}