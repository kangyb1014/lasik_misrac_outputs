{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterates over connection->rq.headers_received only to read fields (pos->kind, pos->next) and does not modify the pointed-to header objects. The local pointer pos is declared as struct MHD_HTTP_Req_Header * but could be declared as pointer to const (const struct MHD_HTTP_Req_Header *pos). Per MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible, so this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_argument_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_argument_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helpers to log control flow and state for check_argument_match. */\nstatic void\nprobe_log_enter(struct MHD_Connection *connection, char *args)\n{\n  FILE *f = fopen(\"/tmp/logs/2663.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"[check_argument_match] ENTER: connection=%p args=%s\\n\",\n            (void *)connection, (args != NULL) ? args : \"(null)\");\n    fclose(f);\n  }\n}\n\nstatic void\nprobe_log_parse_result(struct MHD_Connection *connection, char *args, enum MHD_Result ret, int num_headers)\n{\n  FILE *f = fopen(\"/tmp/logs/2663.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"[check_argument_match] parse_result: connection=%p ret=%d num_headers=%d args=%s\\n\",\n            (void *)connection, (int)ret, num_headers, (args != NULL) ? args : \"(null)\");\n    fclose(f);\n  }\n}\n\nstatic void\nprobe_log_loop_iteration(struct MHD_Connection *connection, struct MHD_HTTP_Req_Header *pos, int num_headers_before)\n{\n  FILE *f = fopen(\"/tmp/logs/2663.txt\", \"a\");\n  if (f != NULL)\n  {\n    if (pos != NULL)\n    {\n      fprintf(f, \"[check_argument_match] loop: pos=%p kind=%d next=%p num_headers_before=%d\\n\",\n              (void *)pos, (int)pos->kind, (void *)pos->next, num_headers_before);\n    }\n    else\n    {\n      fprintf(f, \"[check_argument_match] loop: pos=NULL num_headers_before=%d\\n\", num_headers_before);\n    }\n    fclose(f);\n  }\n}\n\nstatic void\nprobe_log_exit(struct MHD_Connection *connection, char *args, bool result)\n{\n  FILE *f = fopen(\"/tmp/logs/2663.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"[check_argument_match] EXIT: connection=%p result=%s args=%s\\n\",\n            (void *)connection, result ? \"true\" : \"false\", (args != NULL) ? args : \"(null)\");\n    fclose(f);\n  }\n}\n\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  /* NOTE: Keeping the original pointer type (non-const) to preserve original\n     control flow and to let the logging capture the exact state as in the\n     reported violation scenario. */\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  /* Log entry */\n  probe_log_enter(connection, args);\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n\n  /* Log result of parsing and the header count discovered so far */\n  probe_log_parse_result(connection, args, ret, param.num_headers);\n\n  if (MHD_NO == ret)\n  {\n    probe_log_exit(connection, args, false);\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log each iteration and the state of the current header node */\n    probe_log_loop_iteration(connection, pos, param.num_headers);\n\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n\n    /* Log state after decrement */\n    probe_log_loop_iteration(connection, pos, param.num_headers);\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    probe_log_exit(connection, args, false);\n    return false;\n  }\n  probe_log_exit(connection, args, true);\n  return true;\n}\n"
}