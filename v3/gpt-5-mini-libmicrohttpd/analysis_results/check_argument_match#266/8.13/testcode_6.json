{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop variable 'pos' is declared as a non\u2011const pointer (struct MHD_HTTP_Req_Header *pos) but is only used for read access (reading pos->kind and pos->next). According to MISRA C 2023 Rule 8.13, the pointer should point to a const\u2011qualified type when possible. In this code the pointer can and should be declared as const struct MHD_HTTP_Req_Header *pos (and potentially the connection parameter could be made const if the function does not modify it). Example fix: 'const struct MHD_HTTP_Req_Header *pos;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_argument_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_argument_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe helper: append a formatted log entry describing control flow and state. */\nstatic void\nprobe_log_state(const char *stage,\n                struct MHD_Connection *connection,\n                char *args,\n                struct MHD_HTTP_Req_Header *pos,\n                int num_headers,\n                enum MHD_Result ret)\n{\n  FILE *f = fopen(\"/tmp/logs/2663.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* best effort only: if logging fails, do not alter program logic */\n    return;\n  }\n\n  fprintf(f, \"--- check_argument_match: %s\\n\", stage);\n  fprintf(f, \" connection=%p\\n\", (void *)connection);\n  if (args != NULL)\n  {\n    /* limit printed argument length to avoid huge logs */\n    char buf[257];\n    strncpy(buf, args, sizeof(buf) - 1);\n    buf[sizeof(buf) - 1] = '\\0';\n    fprintf(f, \" args=\\\"%s\\\"\\n\", buf);\n  }\n  else\n  {\n    fprintf(f, \" args=(null)\\n\");\n  }\n\n  fprintf(f, \" ret=(%d)\\n\", (int)ret);\n  fprintf(f, \" param.num_headers=%d\\n\", num_headers);\n\n  if (pos != NULL)\n  {\n    /* print pointers and inspected fields; access only when pos != NULL */\n    fprintf(f, \" pos=%p, pos->kind=%d, pos->next=%p\\n\",\n            (void *)pos,\n            (int)pos->kind,\n            (void *)pos->next);\n  }\n  else\n  {\n    fprintf(f, \" pos=(null)\\n\");\n  }\n\n  fprintf(f, \"--- end\\n\\n\");\n  fclose(f);\n}\n\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  /* Initial state log */\n  probe_log_state(\"entry\", connection, args, NULL, 0, (enum MHD_Result)0);\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n\n  /* Log after parsing arguments */\n  probe_log_state(\"after_parse_arguments\", connection, args, NULL, param.num_headers, ret);\n\n  if (MHD_NO == ret)\n  {\n    probe_log_state(\"return_false_parse_failed\", connection, args, NULL, param.num_headers, ret);\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log each iteration with current pos */\n    probe_log_state(\"loop_iteration_before_check\", connection, args, pos, param.num_headers, ret);\n\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n\n    /* Log the moment we decrement */\n    param.num_headers--;\n    probe_log_state(\"decremented_num_headers\", connection, args, pos, param.num_headers, ret);\n  }\n\n  /* Log final count before final decision */\n  probe_log_state(\"after_loop\", connection, args, NULL, param.num_headers, ret);\n\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    probe_log_state(\"return_false_count_mismatch\", connection, args, NULL, param.num_headers, ret);\n    return false;\n  }\n\n  probe_log_state(\"return_true\", connection, args, NULL, param.num_headers, ret);\n  return true;\n}\n"
}