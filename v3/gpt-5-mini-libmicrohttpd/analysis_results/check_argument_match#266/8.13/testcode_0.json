{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nAssuming struct test_header_param declares the member as \"struct MHD_Connection *connection;\" (i.e. non-const) and the function does not modify the pointed-to MHD_Connection object, this assignment stores a non-const pointer where a const-qualified pointer would be appropriate. Under MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. use \"const struct MHD_Connection *connection\" for the parameter and/or the struct member). Thus, in that scenario the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_argument_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_argument_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe helper: append logs to /tmp/logs/2663.txt. Create directory if needed. */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *fp;\n  va_list ap;\n\n  /* Ensure the directory exists; ignore errors if it already exists. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  fp = fopen(\"/tmp/logs/2663.txt\", \"a\");\n  if (NULL == fp)\n  {\n    /* If logging fails, do not change program behaviour. */\n    return;\n  }\n\n  va_start (ap, fmt);\n  (void) vfprintf (fp, fmt, ap);\n  va_end (ap);\n  (void) fprintf (fp, \"\\n\");\n  (void) fclose (fp);\n}\n\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  /* Log entry and initial state */\n  probe_log (\"ENTER check_argument_match: connection=%p, args=%p\", (void *) connection, (void *) args);\n  if (NULL != args)\n  {\n    /* Be cautious when logging the string: limit length to avoid excessive output */\n    char snippet[129];\n    size_t len = strlen (args);\n    if (len > 128)\n      len = 128;\n    memcpy (snippet, args, len);\n    snippet[len] = '\\0';\n    probe_log (\"args (snippet): '%s'\", snippet);\n  }\n\n  param.connection = connection;\n  param.num_headers = 0;\n\n  probe_log (\"After init: param.connection=%p, param.num_headers=%d\", (void *) param.connection, (int) param.num_headers);\n\n  probe_log (\"Calling MHD_parse_arguments_: connection=%p, args=%p, param_addr=%p\", (void *) connection, (void *) args, (void *) &param);\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  probe_log (\"MHD_parse_arguments_ returned ret=%d\", (int) ret);\n  if (MHD_NO == ret)\n  {\n    probe_log (\"MHD_parse_arguments_ indicated failure (MHD_NO). Exiting with false.\");\n    return false;\n  }\n\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    probe_log (\"Iter header: pos=%p, pos->kind=%d, pos->next=%p\", (void *) pos, (int) pos->kind, (void *) pos->next);\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n    {\n      probe_log (\"Skipping header pos=%p because kind=%d does not match MHD_GET_ARGUMENT_KIND\", (void *) pos, (int) pos->kind);\n      continue;\n    }\n    param.num_headers--;\n    probe_log (\"Decremented param.num_headers, now=%d\", (int) param.num_headers);\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    probe_log (\"Argument count mismatch: final param.num_headers=%d. Exiting with false.\", (int) param.num_headers);\n    return false;\n  }\n\n  probe_log (\"Exiting check_argument_match with true. Final param.connection=%p, param.num_headers=%d\", (void *) param.connection, (int) param.num_headers);\n  return true;\n}\n"
}