{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'pos' is used only for read-only traversal of connection->rq.headers_received (accessing pos->kind and pos->next) and never modifies the pointed-to object. Per MISRA C 2023 Rule 8.13 it should therefore be declared to point to a const-qualified type, e.g. 'const struct MHD_HTTP_Req_Header *pos;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_argument_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_argument_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/2663.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2663.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fputc('\\n', f);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  probe_log(\"check_argument_match: entry connection=%p args=%p\", (void *)connection, (void *)args);\n\n  param.connection = connection;\n  param.num_headers = 0;\n  probe_log(\"check_argument_match: before parse_arguments param.num_headers=%d\", param.num_headers);\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  probe_log(\"check_argument_match: MHD_parse_arguments_ returned %d param.num_headers=%d\", (int)ret, param.num_headers);\n\n  if (MHD_NO == ret)\n  {\n    probe_log(\"check_argument_match: parse returned MHD_NO -> returning false\");\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    probe_log(\"check_argument_match: loop pos=%p kind=%d next=%p\", (void *)pos, (int)pos->kind, (void *)pos->next);\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n    {\n      probe_log(\"check_argument_match: skipping pos=%p kind=%d\", (void *)pos, (int)pos->kind);\n      continue;\n    }\n    probe_log(\"check_argument_match: matching pos=%p decrementing num_headers (was %d)\", (void *)pos, param.num_headers);\n    param.num_headers--;\n    probe_log(\"check_argument_match: num_headers now %d\", param.num_headers);\n  }\n  probe_log(\"check_argument_match: after loop param.num_headers=%d\", param.num_headers);\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    probe_log(\"check_argument_match: argument count mismatch -> returning false\");\n    return false;\n  }\n  probe_log(\"check_argument_match: all checks passed -> returning true\");\n  return true;\n}\n"
}