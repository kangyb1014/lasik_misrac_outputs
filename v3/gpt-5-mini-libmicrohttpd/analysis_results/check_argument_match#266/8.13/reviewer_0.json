{
  "user_message": "An agent A claimed that the following check_argument_match code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of check_argument_match.\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nAssuming struct test_header_param declares the member as \"struct MHD_Connection *connection;\" (i.e. non-const) and the function does not modify the pointed-to MHD_Connection object, this assignment stores a non-const pointer where a const-qualified pointer would be appropriate. Under MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. use \"const struct MHD_Connection *connection\" for the parameter and/or the struct member). Thus, in that scenario the rule is violated.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 8.13 recommends that pointer types should point to const-qualified types whenever that const qualification is possible (i.e. the pointed-to object is not modified through the pointer and APIs it is passed to do not require a non-const pointer). The snippet shown by itself does not prove a rule violation: the assignment param.connection = connection simply copies a pointer of the same (non-const) type, so there is no type mismatch in the excerpt.\n\nAgent A\u2019s claim is plausible but speculative: if (and only if) the code never modifies the pointed-to MHD_Connection object and none of the callees (for example the test_header callback or MHD_parse_arguments_) require a modifiable pointer, then both the function parameter and the struct member could/should be declared as pointing to const and leaving them non-const would contravene the intent of Rule 8.13. However, from the presented code alone we cannot determine whether the pointer is later used in a way that requires non-const access. Therefore the report as given is not conclusively correct: you must inspect the declaration of struct test_header_param, the signature and usage of test_header and MHD_parse_arguments_, and all uses of param.connection to decide whether const qualification is possible.\n\nRecommendation: review all uses of the pointer (including callbacks and library/API signatures). If none modify the pointed-to object and none require a non-const pointer, change the parameter and the struct member to point to const (e.g. const struct MHD_Connection *), which would satisfy Rule 8.13."
}