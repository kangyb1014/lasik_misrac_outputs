{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'args' (char *). If 'args' is not a valid null-terminated C string or is NULL, then MHD_parse_arguments_ may call functions from <string.h> (for example strlen, strchr, strcpy/strncpy, memcpy, etc.) and those calls can read or write past the bounds of the object referenced by 'args' (or dereference NULL). Example violation: 'args' points to a buffer of length N that does not contain a terminating '\\0' \u2014 a subsequent strlen/strchr inside MHD_parse_arguments_ will scan beyond the buffer and so violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2669.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_argument_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\nPlease provide the modified check_argument_match code.\n",
  "test_code": "static bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  FILE *log = fopen(\"/tmp/logs/2669.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"check_argument_match ENTER: connection=%p, args=%p\\n\",\n            (void *) connection, (void *) args);\n    if (args == NULL)\n    {\n      fprintf(log, \"args is NULL\\n\");\n    }\n    else\n    {\n      /* Do NOT dereference or scan 'args' here to avoid reading beyond bounds.\n         Just record that it's non-NULL. The actual parsing (which may read\n         from 'args') is performed by MHD_parse_arguments_ as in the original\n         code; we log before/after that call to capture behavior. */\n      fprintf(log, \"args is non-NULL (not dereferenced to avoid UB)\\n\");\n    }\n    fflush(log);\n  }\n\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n\n  if (log)\n  {\n    fprintf(log, \"calling MHD_parse_arguments_ with kind=%d\\n\", (int) MHD_GET_ARGUMENT_KIND);\n    fflush(log);\n  }\n\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n\n  if (log)\n  {\n    fprintf(log, \"MHD_parse_arguments_ returned %d, param.num_headers=%d\\n\",\n            (int) ret, param.num_headers);\n    fflush(log);\n  }\n\n  if (MHD_NO == ret)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_parse_arguments_ indicated failure -> returning false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log)\n    {\n      /* Log the header node pointer and its kind without modifying program logic */\n      fprintf(log, \"traversing header: pos=%p, kind=%d\\n\", (void *) pos, (int) pos->kind);\n      fflush(log);\n    }\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (log)\n  {\n    fprintf(log, \"after header traversal, param.num_headers=%d\\n\", param.num_headers);\n    fclose(log);\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n"
}