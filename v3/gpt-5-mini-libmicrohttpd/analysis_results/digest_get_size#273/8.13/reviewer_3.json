{
  "user_message": "An agent A claimed that the following digest_get_size code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of digest_get_size.\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as 'struct DigestAlgorithm *da' but the function only reads members (e.g. da->algo) and does not modify the object. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (e.g. use 'const struct DigestAlgorithm *da'). Therefore this use (reading da->algo in the condition) violates Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\ndigest_get_size: entry - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: after_asserts - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: return_MD5 - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: entry - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: after_asserts - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: return_MD5 - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: entry - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: after_asserts - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: return_MD5 - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: entry - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: after_asserts - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: return_MD5 - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: entry - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: after_asserts - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: return_MD5 - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: entry - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: after_asserts - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: return_MD5 - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: entry - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: after_asserts - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: return_MD5 - algo=1, da=0x7fffadbd5ec0\ndigest_get_size: entry - algo=1, da=0x7fffadbd5f50\ndigest_get_size: after_asserts - algo=1, da=0x7fffadbd5f50\ndigest_get_size: return_MD5 - algo=1, da=0x7fffadbd5f50\ndigest_get_size: entry - algo=1, da=0x7fffadbd5f50\ndigest_get_size: after_asserts - algo=1, da=0x7fffadbd5f50\ndigest_get_size: return_MD5 - algo=1, da=0x7fffadbd5f50\ndigest_get_size: entry - algo=2, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=2, da=0x7fffadbd5e70\ndigest_get_size: return_SHA256 - algo=2, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=2, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=2, da=0x7fffadbd5e70\ndigest_get_size: return_SHA256 - algo=2, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=2, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=2, da=0x7fffadbd5e70\ndigest_get_size: return_SHA256 - algo=2, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=2, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=2, da=0x7fffadbd5e70\ndigest_get_size: return_SHA256 - algo=2, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=2, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=2, da=0x7fffadbd5e70\ndigest_get_size: return_SHA256 - algo=2, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=2, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=2, da=0x7fffadbd5e70\ndigest_get_size: return_SHA256 - algo=2, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=2, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=2, da=0x7fffadbd5e70\ndigest_get_size: return_SHA256 - algo=2, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=2, da=0x7fffadbd5f50\ndigest_get_size: after_asserts - algo=2, da=0x7fffadbd5f50\ndigest_get_size: return_SHA256 - algo=2, da=0x7fffadbd5f50\ndigest_get_size: entry - algo=2, da=0x7fffadbd5f50\ndigest_get_size: after_asserts - algo=2, da=0x7fffadbd5f50\ndigest_get_size: return_SHA256 - algo=2, da=0x7fffadbd5f50\ndigest_get_size: entry - algo=4, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=4, da=0x7fffadbd5e70\ndigest_get_size: return_SHA512_256 - algo=4, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=4, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=4, da=0x7fffadbd5e70\ndigest_get_size: return_SHA512_256 - algo=4, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=4, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=4, da=0x7fffadbd5e70\ndigest_get_size: return_SHA512_256 - algo=4, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=4, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=4, da=0x7fffadbd5e70\ndigest_get_size: return_SHA512_256 - algo=4, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=4, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=4, da=0x7fffadbd5e70\ndigest_get_size: return_SHA512_256 - algo=4, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=4, da=0x7fffadbd5e70\ndigest_get_size: after_asserts - algo=4, da=0x7fffadbd5e70\ndigest_get_size: return_SHA512_256 - algo=4, da=0x7fffadbd5e70\ndigest_get_size: entry - algo=4, da=0x7fffa\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The claim is correct. The function takes a pointer to struct DigestAlgorithm but only reads members (da->uninitialised, da->algo_selected, da->algo) and does not modify the object. Per MISRA C 2023 Rule 8.13, the pointed-to type should be const-qualified whenever possible; therefore the parameter should be declared as const struct DigestAlgorithm *da. Changing the signature to use const is safe (calling code may pass a non-const pointer to a function taking const) unless there is an external reason (API compatibility, matching prototypes, or the mhd_assert macro or other callers require a non-const type) that prevents the change. If none of those constraints apply, this is a violation and the fix is to make the parameter a pointer to const."
}