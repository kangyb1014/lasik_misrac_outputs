{
  "user_message": "An agent A claimed that the following digest_get_size code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of digest_get_size.\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function digest_get_size takes a non-const pointer parameter (struct DigestAlgorithm *da) but only reads members (e.g. mhd_assert(! da->uninitialised); and checks da->algo). The pointer should be const-qualified (const struct DigestAlgorithm *da) because the function does not modify the pointed-to object.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 8.13 requires that pointers should point to const-qualified types whenever possible. In the shown digest_get_size implementation the parameter 'da' is only read: it is used in mhd_assert checks and for comparisons of da->algo; there are no writes to *da. Therefore the parameter can and should be declared as const struct DigestAlgorithm *da. No code in the function requires a non-const pointer. (A possible caveat would be if the mhd_assert macro or other surrounding code relied on a non-const type, but nothing in the snippet indicates such a dependency.) Consequently the agent A report is correct: this is a violation of Rule 8.13 and the parameter should be const-qualified."
}