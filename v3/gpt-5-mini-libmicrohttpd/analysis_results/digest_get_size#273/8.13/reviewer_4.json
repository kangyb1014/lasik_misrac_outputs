{
  "user_message": "An agent A claimed that the following digest_get_size code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of digest_get_size.\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'da' is declared as 'struct DigestAlgorithm *da' but is only used for read-only access (the fragment reads da->algo_selected). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible \u2014 e.g. 'const struct DigestAlgorithm *da' \u2014 so the current non-const pointer is a violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 8.13 requires a pointer to be const-qualified when it can be, and in the snippet the parameter da is only read (fields are tested via mhd_assert and read for comparisons). There are no writes to *da, so the parameter could and should be declared as const struct DigestAlgorithm *da. The only caveats would be project-specific reasons (e.g. needing a non-const signature to match an existing function-pointer type or API, or macros that require a non-const lvalue), but nothing in the shown code justifies keeping it non-const. Therefore the reported violation is correct."
}