{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as 'struct DigestAlgorithm *da' but the function only reads members (e.g. da->algo) and does not modify the object. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (e.g. use 'const struct DigestAlgorithm *da'). Therefore this use (reading da->algo in the condition) violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2733.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_get_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_get_size:\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\nPlease provide the modified digest_get_size code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log state and control flow for digest_get_size.\n   Writes to /tmp/logs/2733.txt. Takes a const pointer to show that\n   the function only reads from the structure (no modification).\n*/\nstatic void\nmhd_log_digest_get_size_probe (const struct DigestAlgorithm *da, const char *point)\n{\n  FILE *f = fopen(\"/tmp/logs/2733.txt\", \"a\");\n  if (f != NULL)\n    {\n      /* Log key members used by digest_get_size so callers can reproduce\n         and see evidence that the function only reads members. */\n      fprintf (f, \"digest_get_size: %s - uninitialised=%d, algo_selected=%d, algo=%u\\n\",\n               point,\n               (int) da->uninitialised,\n               (int) da->algo_selected,\n               (unsigned) da->algo);\n      fclose (f);\n    }\n}\n\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  /* Log entry state before assertions. */\n  mhd_log_digest_get_size_probe (da, \"entry\");\n\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n\n  /* Log state after assertions. */\n  mhd_log_digest_get_size_probe (da, \"after_asserts\");\n\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    {\n      mhd_log_digest_get_size_probe (da, \"return_MD5\");\n      return MD5_DIGEST_SIZE;\n    }\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    {\n      mhd_log_digest_get_size_probe (da, \"return_SHA256\");\n      return SHA256_DIGEST_SIZE;\n    }\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    {\n      mhd_log_digest_get_size_probe (da, \"return_SHA512_256\");\n      return SHA512_256_DIGEST_SIZE;\n    }\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_log_digest_get_size_probe (da, \"assert_failure\");\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n"
}