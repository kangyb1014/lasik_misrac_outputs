{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of completed_callback:\n```c\nstatic void\ncompleted_callback (void *cls,\n                    struct MHD_Connection *connection,\n                    void **req_cls,\n                    enum MHD_RequestTerminationCode toe)\n{\n  struct timeval *tv = *req_cls;\n  struct timeval tve;\n  uint64_t delta;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == tv)\n    return;\n  gettimeofday (&tve, NULL);\n\n  delta = ((uint64_t) (tve.tv_sec - tv->tv_sec)) * 1000000LL\n          + (uint64_t) tve.tv_usec - (uint64_t) tv->tv_usec;\n  if (delta < SMALL)\n    small_deltas[delta]++;\n  else\n    fprintf (stdout, \"D: %\" PRIu64 \" 1\\n\", delta);\n  free (tv);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I reviewed the complete function for constructs that are documented compiler extensions (examples: GCC/Clang __attribute__ or __attribute__((...)), typeof, nested functions, statement expressions ({ ... }), asm, zero-length arrays, nonstandard integer suffixes, Microsoft __declspec, or other vendor-specific keywords). None of those appear.\n\nSpecifically:\n- (void) casts to silence unused-parameter warnings are a standard idiom, not a compiler extension.\n- struct/enum parameter usage and the function-definition syntax are standard C.\n- uint64_t and PRIu64 are standard C99/C11 types/macros from <stdint.h>/<inttypes.h>, not compiler extensions.\n- The long long literal suffix (LL) is standard C99.\n- gettimeofday, fprintf, free, and struct timeval are POSIX/standard library APIs, not language extensions.\n- The format string using concatenation with the PRIu64 macro relies on standard string literal concatenation and macro expansion.\n\nNo explicit compiler-specific extensions (e.g. __attribute__, typeof, __asm__, nested functions, statement expressions, or other vendor-specific keywords) were found, so there are no fragments to report for MISRA C 2023 Rule 1.2."
}