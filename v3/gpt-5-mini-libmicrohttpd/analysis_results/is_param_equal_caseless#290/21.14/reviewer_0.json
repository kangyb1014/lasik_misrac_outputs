{
  "user_message": "An agent A claimed that the following is_param_equal_caseless code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_param_equal_caseless.\n```c\n_MHD_static_inline bool\nis_param_equal_caseless (const struct MHD_RqDAuthParam *param,\n                         const char *const str,\n                         const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf str and param->value.str are null\u2011terminated C strings (for example str_len == strlen(str) and param->value.str has a terminating '\\0'), this code uses memcmp to compare those strings. MISRA C:2023 Rule 21.14 forbids using memcmp to compare null\u2011terminated strings, so in that scenario the rule is violated.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function uses memcmp to compare two character buffers when param->quoted is false: (0 == memcmp (str, param->value.str, str_len)) after checking the lengths are equal. MISRA C:2023 Rule 21.14 prohibits using memcmp to compare null\u2011terminated strings. Nothing in this function guarantees that the inputs are not null\u2011terminated C strings (the code only asserts non\u2011NULL and non\u2011zero length), and callers may pass lengths derived from strlen or otherwise operate on null\u2011terminated strings. Thus memcmp may be used to compare null\u2011terminated strings here, which violates Rule 21.14."
}