{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of is_param_equal_caseless:\n```c\n_MHD_static_inline bool\nis_param_equal_caseless (const struct MHD_RqDAuthParam *param,\n                         const char *const str,\n                         const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn (str_len == param->value.len) &&\n       (0 == memcmp (str, param->value.str, str_len));\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function parameter is 'const struct MHD_RqDAuthParam *param'. That makes the member access param->value.str have type 'char * const' if the struct member was declared as 'char *str' (the pointer itself becomes const, not the pointed-to data). The code calls memcmp() to read the bytes but the pointed-to type is not const-qualified (char *), so a pointer is pointing to a non-const object where a const-qualified pointer would be appropriate. This violates MISRA C 2023 Rule 8.13. Recommended fix: declare the member as 'const char *str' (so param->value.str is 'const char * const') or otherwise ensure the pointed-to type is const if it is not meant to be modified."
}