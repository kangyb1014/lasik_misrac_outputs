{
  "user_message": "An agent A claimed that the following is_param_equal_caseless code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of is_param_equal_caseless.\n```c\n_MHD_static_inline bool\nis_param_equal_caseless (const struct MHD_RqDAuthParam *param,\n                         const char *const str,\n                         const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nmemcmp is called with size str_len but there is no check that the caller-supplied pointer 'str' refers to at least str_len bytes (only param->value.str is asserted non-NULL). For example, if param->value.len == 3 and param->value.str points to a valid 3-byte buffer but the caller calls is_param_equal_caseless(param, NULL, 3) (or supplies a pointer to a buffer smaller than 3 bytes), the call memcmp(str, param->value.str, str_len) will dereference/read beyond the bounds of 'str' (or dereference NULL), causing undefined behaviour. This violates MISRA C 2023 Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the non-quoted branch the code calls memcmp(str, param->value.str, str_len). The function asserts param->value.str is non-NULL and param->value.len != 0 and requires str_len == param->value.len, so str_len is non-zero; however there is no check that the caller-supplied pointer 'str' is non-NULL or that it points to at least str_len bytes. memcmp will attempt to read str_len bytes from 'str' and thus can access beyond the bounds of the object referenced by 'str' (or dereference NULL), which violates MISRA C:2023 Rule 21.17."
}