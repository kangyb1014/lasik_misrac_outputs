{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of dir_reader:\n```c\nstatic ssize_t\ndir_reader (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  DIR *dir = cls;\n  struct dirent *e;\n  int res;\n\n  if (max < 512)\n    return 0;\n  (void) pos; /* 'pos' is ignored as function return next one single entry per call. */\n  do\n  {\n    e = readdir (dir);\n    if (e == NULL)\n      return MHD_CONTENT_READER_END_OF_STREAM;\n  } while (e->d_name[0] == '.');\n  res = snprintf (buf, max,\n                  \"<a href=\\\"/%s\\\">%s</a><br>\",\n                  e->d_name,\n                  e->d_name);\n  if (0 >= res)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  if (max < (size_t) res)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return (ssize_t) res;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no use of compiler-specific language extensions in the provided code. Specifically:\n- There are no GCC/Clang/Microsoft extension tokens (no __attribute__, __asm, __declspec, __extension__, typeof, __builtin_*, statement-expression ({ ... }), nested functions, or similar compiler-specific constructs).\n- All types and functions used are standard C and POSIX interfaces: uint64_t (C99 stdint.h), size_t/ssize_t (standard/ POSIX), snprintf (C99), DIR/struct dirent and readdir (POSIX directory API). These are library/standard APIs, not compiler language extensions per se.\n- The MHD_CONTENT_READER_END_OF_STREAM and MHD_CONTENT_READER_END_WITH_ERROR identifiers are macros from the application/library and are not language extensions.\n- Common C idioms are used ((void)pos to mark unused parameter, explicit casts), none of which are compiler extensions.\n\nTherefore there are no code fragments that need investigation for MISRA C 2023 Rule 1.2 (use of language/compiler extensions). If you want, I can re-check against a specific compiler\u2019s documentation \u2014 if that compiler explicitly documents any of the used identifiers/types as extensions, please provide its name/version."
}