{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of dir_reader:\n```c\nstatic ssize_t\ndir_reader (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  DIR *dir = cls;\n  struct dirent *e;\n  int res;\n\n  if (max < 512)\n    return 0;\n  (void) pos; /* 'pos' is ignored as function return next one single entry per call. */\n  do\n  {\n    e = readdir (dir);\n    if (e == NULL)\n      return MHD_CONTENT_READER_END_OF_STREAM;\n  } while (e->d_name[0] == '.');\n  res = snprintf (buf, max,\n                  \"<a href=\\\"/%s\\\">%s</a><br>\",\n                  e->d_name,\n                  e->d_name);\n  if (0 >= res)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  if (max < (size_t) res)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return (ssize_t) res;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No functions from <string.h> are used in this code fragment. The MISRA C 2023 Rule 21.17 specifically targets use of the standard string.h routines (e.g., memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn). This function uses readdir (dirent access) and snprintf (from <stdio.h>), neither of which are in the <string.h> list for Rule 21.17, so there are no direct string.h calls to inspect for out-of-bounds pointer parameter accesses.\n\nNotes on other code elements (not related to Rule 21.17):\n- Access to e->d_name[0] is an access to the dirent-provided name buffer returned by readdir; it is not a string.h routine and, per POSIX, readdir supplies a valid null-terminated name in d_name, so the single-character index is not a string.h violation. \n- snprintf is used to format into buf with a supplied max. snprintf is not covered by Rule 21.17. However, there is a potential logic issue: snprintf returns the number of characters that would have been written (excluding the terminating null); truncation occurs when (size_t)res >= max, but the code checks (max < (size_t)res) which misses the res == max case. This is a correctness/bounds-check bug to consider, but it is not a violation of Rule 21.17 because snprintf is not a <string.h> function."
}