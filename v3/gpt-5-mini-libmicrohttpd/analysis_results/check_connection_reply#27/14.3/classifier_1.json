{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_connection_reply:\n```c\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (c->rp.props.set);\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The statement is a function-like macro call (mhd_assert(c->rp.props.set)), not a controlling expression of a selection or iteration construct. Even if mhd_assert is implemented as a do { ... } while (0) macro (which has an invariant controlling expression 0), that form is explicitly allowed by the Rule 14.3 exception for do-while loops with an essentially Boolean controlling expression that evaluates to false and is an integer constant expression."
}