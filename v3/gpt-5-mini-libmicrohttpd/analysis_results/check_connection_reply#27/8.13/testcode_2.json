{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local alias 'r' is declared as 'struct MHD_Response *const r = c->rp.response;'. This makes the pointer itself const, but not the pointee type. Within this function 'r' is only read (r->total_size, r->flags_auto, etc.), so it could and should be declared to point to a const-qualified type (e.g. 'const struct MHD_Response *const r = c->rp.response;'). Therefore Rule 8.13 is violated because the pointer does not point to a const-qualified type when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_connection_reply code that contains useful probe functions that print useful logs to a file \"/tmp/logs/273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_connection_reply as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_connection_reply:\n```c\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n```\n</target_code>\nPlease provide the modified check_connection_reply code.\n",
  "test_code": "static void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Probe function: write control flow and key state to /tmp/logs/273.txt. */\n  static void\n  probe_log_connection_reply (const struct MHD_Connection *pc,\n                              const struct MHD_Response *pr,\n                              const char *stage)\n  {\n    FILE *f = fopen(\"/tmp/logs/273.txt\", \"a\");\n    if (NULL == f)\n      return;\n\n    /* Log pointer identities and key fields used in the checks.  Casts to\n       unsigned long long are used to avoid type mismatches for unknown\n       integer widths of these fields.  Use %p for pointer values. */\n    fprintf (f,\n             \"[check_connection_reply] %s: c=%p r=%p use_reply_body_headers=%u \"\n             \"total_size=%llu flags_auto=0x%llx responseCode=%u\\n\",\n             stage,\n             (void *) pc,\n             (void *) pr,\n             (unsigned) (pc->rp.props.use_reply_body_headers),\n             (unsigned long long) (pr->total_size),\n             (unsigned long long) (pr->flags_auto),\n             (unsigned) (pc->rp.responseCode));\n\n    fclose (f);\n  }\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  /* Log initial state prior to any conditional checks */\n  probe_log_connection_reply (c, r, \"entry\");\n\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    /* Log that this branch was taken and the evaluated values */\n    probe_log_connection_reply (c, r, \"branch_non_empty_body_taken\");\n\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  else\n  {\n    /* Log that the branch was not taken and the evaluated values */\n    probe_log_connection_reply (c, r, \"branch_non_empty_body_not_taken\");\n  }\n\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    /* Log that this branch was taken and the evaluated values */\n    probe_log_connection_reply (c, r, \"branch_content_length_taken\");\n\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  else\n  {\n    /* Log that the branch was not taken and the evaluated values */\n    probe_log_connection_reply (c, r, \"branch_content_length_not_taken\");\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n"
}