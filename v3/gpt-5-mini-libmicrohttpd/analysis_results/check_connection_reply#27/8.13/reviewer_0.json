{
  "user_message": "An agent A claimed that the following check_connection_reply code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of check_connection_reply.\n```c\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe alias 'c' is declared as 'struct MHD_Connection *const c = connection;', i.e. a const pointer to a non-const MHD_Connection. In the shown code 'c' is only used for read access (accessing fields, not modifying them), so the pointee could and should be const-qualified. To comply with MISRA C 2023 Rule 8.13 it should be declared as 'const struct MHD_Connection *const c = connection;'. If the function later modifies the pointed object (not shown), making the pointee const would be inappropriate; based on the provided fragment this is a violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 requires that pointer types should point to const-qualified objects whenever the pointed-to object is not modified. In the shown fragment the alias c is only used for read accesses (fields are inspected, not written), so it is possible and appropriate to declare the alias as a pointer-to-const (for example: const struct MHD_Connection *const c = connection;). The implicit conversion from struct MHD_Connection * to const struct MHD_Connection * is allowed in C, so this change is feasible. Note: if elsewhere in the function the pointed object is actually modified or passed to APIs that require a non-const pointer, then making the pointee const would be inappropriate; based solely on the provided fragment the report is a valid violation."
}