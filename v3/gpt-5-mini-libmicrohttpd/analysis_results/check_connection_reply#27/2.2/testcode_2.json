{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen HAVE_MESSAGES is not defined the statement '(void) c;' is an executed no-op expression statement used only to suppress an \"unused variable\" compiler warning. It has no side-effects and removing it would not change program behaviour (timing or observable effects) in this context, so it constitutes dead code. (Same applies to the accompanying '(void) r;' statement.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_connection_reply code that contains useful probe functions that print useful logs to a file \"/tmp/logs/272.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_connection_reply as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_connection_reply:\n```c\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n```\n</target_code>\nPlease provide the modified check_connection_reply code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Helper probe that logs pointer info and a short message to /tmp/logs/272.txt */\nstatic void\nprobe_log_ptrs (const char *event, const void *c, const void *r)\n{\n  FILE *f = fopen(\"/tmp/logs/272.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf (f, \"%ld: %s - c=%p r=%p\\n\", (long) t, event, c, r);\n  fclose (f);\n}\n\n/* Helper probe that logs detailed state when MESSAGE support is present.\n   We keep the logging limited to reads of the existing structure members\n   which the original code already reads in the HAVE_MESSAGES branch. */\n#ifdef HAVE_MESSAGES\nstatic void\nprobe_log_state (const struct MHD_Connection *c)\n{\n  if (NULL == c)\n    return;\n  FILE *f = fopen(\"/tmp/logs/272.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n\n  /* Print relevant fields that the function inspects. Casts used to\n     make format specifiers safe regardless of underlying types. */\n  fprintf (f, \"%ld: probe_state - daemon=%p, use_reply_body_headers=%d, total_size=%zu, flags_auto=0x%zx, responseCode=%u\\n\",\n           (long) t,\n           (const void *) c->daemon,\n           (int) c->rp.props.use_reply_body_headers,\n           (size_t) c->rp.response->total_size,\n           (size_t) c->rp.response->flags_auto,\n           (unsigned) c->rp.responseCode);\n  fclose (f);\n}\n#endif\n\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  /* Log the observed state before evaluating the conditions so that\n     a trace exists showing which branch decisions were made. */\n  probe_log_state (c);\n\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    /* Log that we are in the branch where a non-empty body is ignored. */\n    probe_log_ptrs (\"non_empty_body_ignored\", c, r);\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    /* Log that application defined Content-Length header violates spec. */\n    probe_log_ptrs (\"content_length_violation\", c, r);\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  /* When HAVE_MESSAGES is not defined the original code used the\n     no-op (void) casts solely to mute compiler warnings. To provide\n     evidence for the reported violation we log that this branch was\n     executed and the pointer values only (do not dereference members\n     to preserve original behaviour). */\n  probe_log_ptrs (\"no_messages_branch_executed\", c, r);\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n"
}