{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_buffer_for_size:\n```c\nstatic char *\nget_buffer_for_size (char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                     char **ptmp2,\n                     size_t *ptmp2_size,\n                     size_t required_size)\n{\n  mhd_assert ((0 == *ptmp2_size) || (NULL != *ptmp2));\n  mhd_assert ((NULL != *ptmp2) || (0 == *ptmp2_size));\n  mhd_assert ((0 == *ptmp2_size) || \\\n              (_MHD_STATIC_UNQ_BUFFER_SIZE < *ptmp2_size));\n\n  if (required_size <= _MHD_STATIC_UNQ_BUFFER_SIZE)\n    return tmp1;\n\n  if (required_size <= *ptmp2_size)\n    return *ptmp2;\n\n  if (required_size > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE)\n    return NULL;\n  if (NULL != *ptmp2)\n    free (*ptmp2);\n  *ptmp2 = (char *) malloc (required_size);\n  if (NULL == *ptmp2)\n    *ptmp2_size = 0;\n  else\n    *ptmp2_size = required_size;\n  return *ptmp2;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert ((0 == *ptmp2_size) || \\n              (_MHD_STATIC_UNQ_BUFFER_SIZE < *ptmp2_size));",
    "if (required_size > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE)\n    return NULL;",
    "if (NULL == *ptmp2)\n    *ptmp2_size = 0;\n  else\n    *ptmp2_size = required_size;",
    "mhd_assert ((0 == *ptmp2_size) || (NULL != *ptmp2));",
    "if (required_size <= *ptmp2_size)\n    return *ptmp2;",
    "mhd_assert ((NULL != *ptmp2) || (0 == *ptmp2_size));",
    "if (NULL != *ptmp2)\n    free (*ptmp2);",
    "if (required_size <= _MHD_STATIC_UNQ_BUFFER_SIZE)\n    return tmp1;",
    "*ptmp2 = (char *) malloc (required_size);"
  ],
  "explanation": "The listed fragments are those that determine which buffer is returned and how much memory is (re)allocated; they therefore directly affect whether subsequent uses of string.h functions could access beyond buffer bounds (off-by-one, zero-size allocation, missing space for terminators, or incorrect size tracking). Other parts of the function (function signature, return type, and the plain return statements that simply pass back the chosen pointer without modifying memory) do not themselves perform memory writes/reads or call string.h functions and therefore do not need separate investigation for Rule 21.17. The mhd_assert lines were included because they document and enforce assumptions about pointer/size consistency that must be checked when verifying whether string operations will stay in-bounds; any remaining single-line control-flow statements or braces do not affect buffer sizing and so were not included."
}