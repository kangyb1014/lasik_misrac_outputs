{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_buffer_for_size:\n```c\nstatic char *\nget_buffer_for_size (char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                     char **ptmp2,\n                     size_t *ptmp2_size,\n                     size_t required_size)\n{\n  mhd_assert ((0 == *ptmp2_size) || (NULL != *ptmp2));\n  mhd_assert ((NULL != *ptmp2) || (0 == *ptmp2_size));\n  mhd_assert ((0 == *ptmp2_size) || \\\n              (_MHD_STATIC_UNQ_BUFFER_SIZE < *ptmp2_size));\n\n  if (required_size <= _MHD_STATIC_UNQ_BUFFER_SIZE)\n    return tmp1;\n\n  if (required_size <= *ptmp2_size)\n    return *ptmp2;\n\n  if (required_size > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE)\n    return NULL;\n  if (NULL != *ptmp2)\n    free (*ptmp2);\n  *ptmp2 = (char *) malloc (required_size);\n  if (NULL == *ptmp2)\n    *ptmp2_size = 0;\n  else\n    *ptmp2_size = required_size;\n  return *ptmp2;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the entire function for usages that would constitute explicit compiler language extensions. None of the constructs are compiler-specific extensions: \n\n- The parameter declaration char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE] is a standard C array parameter (array-to-pointer adjustment applies). Even if the macro expanded to a non-constant and the compiler treated it as a variable length array, VLAs are a standard C99 feature (not a compiler extension per se). Whether VLAs are supported or treated as an extension is a toolchain configuration issue, not an explicit language-extension usage in the source itself.\n\n- The backslash used to continue the mhd_assert line is a standard preprocessor line-continuation mechanism, not an extension.\n\n- Use of malloc, free, size_t, NULL, pointer comparisons, casts (char *)malloc(...), and static function linkage are standard C constructs, not compiler extensions.\n\n- The mhd_assert identifier is presumably a macro; macros are user-defined and not compiler language extensions.\n\n- No compiler-specific keywords (such as __attribute__, __declspec, __inline as a non-standard keyword, typeof, nested functions, statement expressions, asm, or other known vendor extensions) are present.\n\nTherefore there are no code fragments in this function that explicitly use compiler-declared language extensions and nothing needs to be reported for Rule 1.2."
}