{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of resume_suspended_connections:\n```c\nstatic enum MHD_Result\nresume_suspended_connections (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *prev = NULL;\n  enum MHD_Result ret;\n  const bool used_thr_p_c = (0 != (daemon->options\n                                   & MHD_USE_THREAD_PER_CONNECTION));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif\n\n  ret = MHD_NO;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n\n  if (daemon->resuming)\n  {\n    prev = daemon->suspended_connections_tail;\n    /* During shutdown check for resuming is forced. */\n    mhd_assert ((NULL != prev) || (daemon->shutdown) || \\\n                (0 != (daemon->options & MHD_ALLOW_UPGRADE)));\n  }\n\n  daemon->resuming = false;\n\n  while (NULL != (pos = prev))\n  {\n#ifdef UPGRADE_SUPPORT\n    struct MHD_UpgradeResponseHandle *const urh = pos->urh;\n#else  /* ! UPGRADE_SUPPORT */\n    static const void *const urh = NULL;\n#endif /* ! UPGRADE_SUPPORT */\n    prev = pos->prev;\n    if ( (! pos->resuming)\n#ifdef UPGRADE_SUPPORT\n         || ( (NULL != urh) &&\n              ( (! urh->was_closed) ||\n                (! urh->clean_ready) ) )\n#endif /* UPGRADE_SUPPORT */\n         )\n      continue;\n    ret = MHD_YES;\n    mhd_assert (pos->suspended);\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                pos);\n    pos->suspended = false;\n    if (NULL == urh)\n    {\n      DLL_insert (daemon->connections_head,\n                  daemon->connections_tail,\n                  pos);\n      if (! used_thr_p_c)\n      {\n        /* Reset timeout timer on resume. */\n        if (0 != pos->connection_timeout_ms)\n          pos->last_activity = MHD_monotonic_msec_counter ();\n\n        if (pos->connection_timeout_ms == daemon->connection_timeout_ms)\n          XDLL_insert (daemon->normal_timeout_head,\n                       daemon->normal_timeout_tail,\n                       pos);\n        else\n          XDLL_insert (daemon->manual_timeout_head,\n                       daemon->manual_timeout_tail,\n                       pos);\n      }\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon))\n      {\n        if (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))\n          MHD_PANIC (\"Resumed connection was already in EREADY set.\\n\");\n        /* we always mark resumed connections as ready, as we\n           might have missed the edge poll event during suspension */\n        EDLL_insert (daemon->eready_head,\n                     daemon->eready_tail,\n                     pos);\n        pos->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL   \\\n                            | MHD_EPOLL_STATE_READ_READY\n                            | MHD_EPOLL_STATE_WRITE_READY;\n        pos->epoll_state &= ~((enum MHD_EpollState) MHD_EPOLL_STATE_SUSPENDED);\n      }\n#endif\n    }\n#ifdef UPGRADE_SUPPORT\n    else\n    {\n      /* Data forwarding was finished (for TLS connections) AND\n       * application was closed upgraded connection.\n       * Insert connection into cleanup list. */\n\n      if ( (NULL != daemon->notify_completed) &&\n           (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n           (pos->rq.client_aware) )\n      {\n        daemon->notify_completed (daemon->notify_completed_cls,\n                                  pos,\n                                  &pos->rq.client_context,\n                                  MHD_REQUEST_TERMINATED_COMPLETED_OK);\n        pos->rq.client_aware = false;\n      }\n      DLL_insert (daemon->cleanup_head,\n                  daemon->cleanup_tail,\n                  pos);\n      daemon->data_already_pending = true;\n    }\n#endif /* UPGRADE_SUPPORT */\n    pos->resuming = false;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (used_thr_p_c) &&\n       (MHD_NO != ret) )\n  {   /* Wake up suspended connections. */\n    if (! MHD_itc_activate_ (daemon->itc,\n                             \"w\"))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal resume of connection via \" \\\n                   \"inter-thread communication channel.\\n\"));\n#endif\n    }\n  }\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (! MHD_itc_activate_ (daemon->itc,\n                             \"w\"))",
    "DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                pos);",
    "XDLL_insert (daemon->manual_timeout_head,\n                       daemon->manual_timeout_tail,\n                       pos);",
    "DLL_insert (daemon->cleanup_head,\n                  daemon->cleanup_tail,\n                  pos);",
    "EDLL_insert (daemon->eready_head,\n                     daemon->eready_tail,\n                     pos);",
    "DLL_insert (daemon->connections_head,\n                  daemon->connections_tail,\n                  pos);",
    "XDLL_insert (daemon->normal_timeout_head,\n                       daemon->normal_timeout_tail,\n                       pos);"
  ],
  "explanation": "I scanned the provided function for occurrences of C for-statements (Rule 14.2 applies specifically to for loops). There are no for (...) statements in this function source: the only explicit loop is a while (NULL != (pos = prev)) which is not covered by Rule 14.2. Therefore there are no direct for-loop fragments to investigate in this snippet.\n\nHowever, several macro/function calls present in this function may expand to or call code (in other translation units or macro definitions not shown here) that contains for statements. To fully check compliance with MISRA C 2023 Rule 14.2, those definitions should be inspected. I flagged the list above (DLL_remove, DLL_insert, XDLL_insert, EDLL_insert, the cleanup DLL_insert, and the MHD_itc_activate_ call site) because they are plausible places where for loops could exist (macros manipulating lists, iterating over structures, or helper functions).\n\nAll other code constructs in this snippet (conditionals, assignments, the while loop, bitwise operations, and the preprocessor conditionals) are not for-statements and thus do not fall under Rule 14.2; they therefore do not need to be investigated for this specific MISRA rule based on the provided source."
}