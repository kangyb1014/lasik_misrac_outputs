{
  "user_message": "An agent A claimed that the following SHA1ProcessMessageBlock code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of SHA1ProcessMessageBlock.\n```c\nstatic void\nSHA1ProcessMessageBlock (struct SHA1Context *context)\n{\n  const uint32_t K[] = { 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6 };\n  int i;\n  uint32_t temp;\n  uint32_t W[80];\n  uint32_t A, B, C, D, E;\n\n  for (i = 0; i < 16; i++)\n  {\n    W[i] = ((uint32_t) context->message_block[i * 4]) << 24;\n    W[i] |= ((uint32_t) context->message_block[i * 4 + 1]) << 16;\n    W[i] |= ((uint32_t) context->message_block[i * 4 + 2]) << 8;\n    W[i] |= context->message_block[i * 4 + 3];\n  }\n  for (i = 16; i < 80; i++)\n  {\n    W[i]\n      = SHA1CircularShift (1, W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);\n  }\n  A = context->intermediate_hash[0];\n  B = context->intermediate_hash[1];\n  C = context->intermediate_hash[2];\n  D = context->intermediate_hash[3];\n  E = context->intermediate_hash[4];\n  for (i = 0; i < 20; i++)\n  {\n    temp = SHA1CircularShift (5, A) + ((B & C) | ((~B) & D)) + E + W[i]\n           + K[0];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  for (i = 20; i < 40; i++)\n  {\n    temp = SHA1CircularShift (5, A) + (B ^ C ^ D) + E + W[i] + K[1];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  for (i = 40; i < 60; i++)\n  {\n    temp = SHA1CircularShift (5, A) + ((B & C) | (B & D) | (C & D)) + E\n           + W[i] + K[2];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  for (i = 60; i < 80; i++)\n  {\n    temp = SHA1CircularShift (5, A) + (B ^ C ^ D) + E + W[i] + K[3];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  context->intermediate_hash[0] += A;\n  context->intermediate_hash[1] += B;\n  context->intermediate_hash[2] += C;\n  context->intermediate_hash[3] += D;\n  context->intermediate_hash[4] += E;\n  context->message_block_index = 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf SHA1Context declares message_block as a non-const array/pointer (e.g. uint8_t message_block[64] or uint8_t *message_block) but the function only reads from it, this use violates MISRA C 2023 Rule 8.13 because the pointer/array should be const-qualified when possible. For example: struct SHA1Context { uint8_t message_block[64]; ... }; \u2014 message_block is only read in SHA1ProcessMessageBlock, so it should be declared const uint8_t message_block[64] (or const uint8_t *message_block) to comply. Note: if message_block is intentionally modified elsewhere (e.g. by input routines), making it const is not possible and no violation occurs in that case.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 8.13 concerns pointer declarations: a pointer type should point to a const-qualified type whenever that is feasible. In the shown function there is no pointer declaration that points to the message block; message_block is a struct member declared as an array (e.g. uint8_t message_block[64]) and is accessed via indexing (which causes an array-to-pointer decay in expressions, but there is no explicit pointer variable declared here). Also the function writes back to other members of context (intermediate_hash and message_block_index), so the function must take a non-const struct SHA1Context * and cannot simply change the parameter to const struct SHA1Context *. Making the message_block member itself const in the struct would be a design change that might be possible if the buffer is truly immutable everywhere, but it is not required by Rule 8.13 for the code as shown. Therefore the claim that this code (as shown) violates Rule 8.13 is not correct unless the broader program has a declaration of a pointer variable that points to a non-const type but could be const-qualified \u2014 which is not demonstrated in the provided snippet."
}