{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation when key is not a valid NUL-terminated string or is NULL. For example, if key == NULL then strlen(key) dereferences a null pointer (out-of-bounds access). Similarly, if key points to a buffer that is not NUL-terminated within its allocated bounds, strlen will read beyond the object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_get_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_get_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_get_value:\n```c\nstatic void\ntry_get_value (const char *buf,\n               const char *key,\n               char **destination)\n{\n  const char *spos;\n  const char *bpos;\n  const char *endv;\n  size_t klen;\n  size_t vlen;\n\n  if (NULL != *destination)\n    return;\n  bpos = buf;\n  klen = strlen (key);\n  while (NULL != (spos = strstr (bpos, key)))\n  {\n    if ( (spos[klen] != '=') ||\n         ( (spos != buf) &&\n           (spos[-1] != ' ') ) )\n    {\n      /* no match */\n      bpos = spos + 1;\n      continue;\n    }\n    if (spos[klen + 1] != '\"')\n      return;                   /* not quoted */\n    if (NULL == (endv = strchr (&spos[klen + 2],\n                                '\\\"')))\n      return;                   /* no end-quote */\n    vlen = (size_t) (endv - spos) - klen - 1;\n    *destination = malloc (vlen);\n    if (NULL == *destination)\n      return;                   /* out of memory */\n    (*destination)[vlen - 1] = '\\0';\n    memcpy (*destination,\n            &spos[klen + 2],\n            vlen - 1);\n    return;                     /* success */\n  }\n}\n```\n</target_code>\nPlease provide the modified try_get_value code.\n",
  "test_code": "static void\ntry_get_value_log(const char *stage,\n                   const char *buf,\n                   const char *key,\n                   char **destination,\n                   const char *info,\n                   size_t num)\n{\n  FILE *f = fopen(\"/tmp/logs/2379.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Log pointer-sized state info; do NOT dereference pointers here. */\n  fprintf(f, \"[try_get_value] %s: buf=%p key=%p destination=%p info=%s num=%zu\\n\",\n          stage,\n          (void *) buf,\n          (void *) key,\n          (void *) destination,\n          (NULL != info) ? info : \"(null)\",\n          num);\n  fclose(f);\n}\n\nstatic void\ntry_get_value (const char *buf,\n               const char *key,\n               char **destination)\n{\n  const char *spos;\n  const char *bpos;\n  const char *endv;\n  size_t klen;\n  size_t vlen;\n\n  /* Entry probe */\n  try_get_value_log(\"enter\", buf, key, destination, \"start\", 0);\n\n  if (NULL != *destination)\n  {\n    try_get_value_log(\"early_return\", buf, key, destination, \"destination not NULL\", 0);\n    return;\n  }\n  bpos = buf;\n\n  /* Log just before calling strlen(key) so callers can observe the key pointer value\n     in the logs. Do NOT try to print the contents of key here (may be NULL or\n     unterminated), only log the pointer value. */\n  try_get_value_log(\"before_strlen\", buf, key, destination, \"about to call strlen\", 0);\n\n  klen = strlen (key);\n\n  /* Log klen after successful strlen. If key was NULL, the program will crash\n     on the previous line; the logs will show key was NULL and where the crash occurred. */\n  try_get_value_log(\"after_strlen\", buf, key, destination, \"strlen done\", klen);\n\n  while (NULL != (spos = strstr (bpos, key)))\n  {\n    try_get_value_log(\"found_candidate\", buf, key, destination, \"spos found\", (size_t)(spos - buf));\n    if ( (spos[klen] != '=') ||\n         ( (spos != buf) &&\n           (spos[-1] != ' ') ) )\n    {\n      /* no match */\n      try_get_value_log(\"no_match\", buf, key, destination, \"not key= or not preceded by space\", (size_t)(spos - buf));\n      bpos = spos + 1;\n      continue;\n    }\n    if (spos[klen + 1] != '\"')\n    {\n      try_get_value_log(\"not_quoted\", buf, key, destination, \"opening quote missing\", (size_t)(spos - buf));\n      return;                   /* not quoted */\n    }\n    if (NULL == (endv = strchr (&spos[klen + 2],\n                                '\"')))\n    {\n      try_get_value_log(\"no_end_quote\", buf, key, destination, \"end quote not found\", (size_t)(spos - buf));\n      return;                   /* no end-quote */\n    }\n    vlen = (size_t) (endv - spos) - klen - 1;\n    try_get_value_log(\"allocating\", buf, key, destination, \"about to malloc for value\", vlen);\n    *destination = malloc (vlen);\n    if (NULL == *destination)\n    {\n      try_get_value_log(\"oom\", buf, key, destination, \"malloc failed\", vlen);\n      return;                   /* out of memory */\n    }\n    (*destination)[vlen - 1] = '\\0';\n    memcpy (*destination,\n            &spos[klen + 2],\n            vlen - 1);\n    try_get_value_log(\"success\", buf, key, destination, \"value extracted\", vlen);\n    return;                     /* success */\n  }\n  try_get_value_log(\"exit_no_match\", buf, key, destination, \"no occurrence found\", 0);\n}\n"
}