{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf buf (or the substring starting at bpos) is not a NUL-terminated C string (for example, data read into a buffer of known length but not terminated), calling strstr(bpos, key) may scan past the allocated object searching for the terminator or the needle and thus access memory beyond the bounds. Similarly, if key is not NUL-terminated, strstr may read beyond its bounds. In such cases this use of strstr violates Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_get_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_get_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_get_value:\n```c\nstatic void\ntry_get_value (const char *buf,\n               const char *key,\n               char **destination)\n{\n  const char *spos;\n  const char *bpos;\n  const char *endv;\n  size_t klen;\n  size_t vlen;\n\n  if (NULL != *destination)\n    return;\n  bpos = buf;\n  klen = strlen (key);\n  while (NULL != (spos = strstr (bpos, key)))\n  {\n    if ( (spos[klen] != '=') ||\n         ( (spos != buf) &&\n           (spos[-1] != ' ') ) )\n    {\n      /* no match */\n      bpos = spos + 1;\n      continue;\n    }\n    if (spos[klen + 1] != '\"')\n      return;                   /* not quoted */\n    if (NULL == (endv = strchr (&spos[klen + 2],\n                                '\\\"')))\n      return;                   /* no end-quote */\n    vlen = (size_t) (endv - spos) - klen - 1;\n    *destination = malloc (vlen);\n    if (NULL == *destination)\n      return;                   /* out of memory */\n    (*destination)[vlen - 1] = '\\0';\n    memcpy (*destination,\n            &spos[klen + 2],\n            vlen - 1);\n    return;                     /* success */\n  }\n}\n```\n</target_code>\nPlease provide the modified try_get_value code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic void\nlog_probe(const char *tag,\n          const char *buf,\n          const char *key,\n          const char *bpos,\n          const char *spos,\n          const char *endv,\n          size_t klen,\n          size_t vlen,\n          const char *destination,\n          int iter,\n          int result_code)\n{\n  FILE *f = fopen(\"/tmp/logs/2379.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"[try_get_value] tag=%s iter=%d result=%d\\n\", tag, iter, result_code);\n  fprintf(f, \"  buf=%p key=%p bpos=%p spos=%p endv=%p dest=%p\\n\",\n          (void *)buf, (void *)key, (void *)bpos, (void *)spos, (void *)endv, (void *)destination);\n  fprintf(f, \"  klen=%zu vlen=%zu\\n\", klen, vlen);\n  fflush(f);\n  fclose(f);\n}\n\nstatic void\ntry_get_value (const char *buf,\n               const char *key,\n               char **destination)\n{\n  const char *spos;\n  const char *bpos;\n  const char *endv;\n  size_t klen;\n  size_t vlen;\n  int iter = 0;\n\n  /* preserve original early-exit behavior */\n  if (NULL != *destination)\n    return;\n\n  bpos = buf;\n\n  /* compute key length (note: same behavior as original - may read until NUL)\n     Log the computed length and pointers */\n  klen = strlen (key);\n  log_probe(\"entry_after_strlen\", buf, key, bpos, NULL, NULL, klen, 0, NULL, iter, 0);\n\n  /* Rewritten loop to allow logging around strstr without changing logic */\n  for (;;)\n  {\n    spos = strstr (bpos, key);\n    if (NULL == spos)\n    {\n      log_probe(\"no_more_matches\", buf, key, bpos, spos, NULL, klen, 0, NULL, iter, 0);\n      break;\n    }\n\n    /* Log that we found a candidate occurrence */\n    log_probe(\"found_candidate\", buf, key, bpos, spos, NULL, klen, 0, NULL, iter, 0);\n\n    /* Read the bytes used in the original checks into local variables so\n       we both preserve the original logic and have values to log.  These\n       reads match what the original code would do at this point. */\n    unsigned char c_after_key = (unsigned char) spos[klen];\n    unsigned char c_before = 0;\n    if (spos != buf)\n      c_before = (unsigned char) spos[-1];\n\n    log_probe(\"pre_check_values\", buf, key, bpos, spos, NULL, klen, 0, NULL, iter, (int)c_after_key);\n\n    if ( (c_after_key != '=') ||\n         ( (spos != buf) &&\n           (c_before != ' ') ) )\n    {\n      /* no match: advance and continue (same as original) */\n      log_probe(\"no_match_advance\", buf, key, bpos, spos, NULL, klen, 0, NULL, iter, (int)c_after_key);\n      bpos = spos + 1;\n      iter++;\n      continue;\n    }\n\n    /* check for opening quote after '=' */\n    if (spos[klen + 1] != '\"')\n    {\n      log_probe(\"not_quoted\", buf, key, bpos, spos, NULL, klen, 0, NULL, iter, (int)spos[klen + 1]);\n      return;                   /* not quoted */\n    }\n\n    /* find end-quote starting from the character after the opening quote */\n    endv = strchr (&spos[klen + 2], '\"');\n    if (NULL == endv)\n    {\n      log_probe(\"no_end_quote\", buf, key, bpos, spos, endv, klen, 0, NULL, iter, 0);\n      return;                   /* no end-quote */\n    }\n\n    /* compute value length and allocate */\n    vlen = (size_t) (endv - spos) - klen - 1;\n    log_probe(\"before_malloc\", buf, key, bpos, spos, endv, klen, vlen, NULL, iter, 0);\n\n    *destination = malloc (vlen);\n    if (NULL == *destination)\n    {\n      log_probe(\"out_of_memory\", buf, key, bpos, spos, endv, klen, vlen, NULL, iter, 0);\n      return;                   /* out of memory */\n    }\n\n    log_probe(\"allocated_dest\", buf, key, bpos, spos, endv, klen, vlen, *destination, iter, 0);\n\n    /* preserve original termination and copy semantics */\n    (*destination)[vlen - 1] = '\\0';\n    memcpy (*destination,\n            &spos[klen + 2],\n            vlen - 1);\n\n    log_probe(\"success\", buf, key, bpos, spos, endv, klen, vlen, *destination, iter, 1);\n    return;                     /* success */\n  }\n}\n"
}