{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_get_version:\n```c\n_MHD_EXTERN const char *\nMHD_get_version (void)\n{\n#ifdef PACKAGE_VERSION\n  return PACKAGE_VERSION;\n#else  /* !PACKAGE_VERSION */\n  static char ver[12] = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n  if (0 == ver[0])\n  {\n    int res = MHD_snprintf_ (ver,\n                             sizeof(ver),\n                             \"%x.%x.%x\",\n                             (int) (((uint32_t) MHD_VERSION >> 24) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 16) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 8) & 0xFF));\n    if ((0 >= res) || (sizeof(ver) <= res))\n      return \"0.0.0\"; /* Can't return real version */\n  }\n  return ver;\n#endif /* !PACKAGE_VERSION */\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic char ver[12] = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n  if (0 == ver[0])\n  {\n    int res = MHD_snprintf_ (ver,\n                             sizeof(ver),\n                             \"%x.%x.%x\",\n                             (int) (((uint32_t) MHD_VERSION >> 24) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 16) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 8) & 0xFF));\n    if ((0 >= res) || (sizeof(ver) <= res))\n      return \"0.0.0\"; /* Can't return real version */\n  }\n  return ver;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The code contains a static buffer initialized to all zeros and a runtime conditional if (0 == ver[0]) that is true on the first call and false on subsequent calls; both the branch body and the final return are reachable at runtime depending on state. Therefore there is no unreachable code in this fragment."
}