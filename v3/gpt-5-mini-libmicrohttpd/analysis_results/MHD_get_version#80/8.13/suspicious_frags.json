{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_version:\n```c\n_MHD_EXTERN const char *\nMHD_get_version (void)\n{\n#ifdef PACKAGE_VERSION\n  return PACKAGE_VERSION;\n#else  /* !PACKAGE_VERSION */\n  static char ver[12] = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n  if (0 == ver[0])\n  {\n    int res = MHD_snprintf_ (ver,\n                             sizeof(ver),\n                             \"%x.%x.%x\",\n                             (int) (((uint32_t) MHD_VERSION >> 24) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 16) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 8) & 0xFF));\n    if ((0 >= res) || (sizeof(ver) <= res))\n      return \"0.0.0\"; /* Can't return real version */\n  }\n  return ver;\n#endif /* !PACKAGE_VERSION */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (0 == ver[0])",
    "return \"0.0.0\";",
    "return ver;",
    "static char ver[12] = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";",
    "return PACKAGE_VERSION;"
  ],
  "explanation": "The function already returns a const-qualified pointer type, so the function signature itself is not an issue. The formatting and version-extraction expressions (MHD_snprintf_ call, bit shifts and casts of MHD_VERSION, sizeof(ver) checks, and the ver[0] zero-check logic) relate to buffer initialization and use and do not introduce pointer-to-const concerns beyond the fragments listed. The buffer passed to the snprintf-like function is intentionally modifiable, so that buffer cannot be declared const without preventing the required write; that is why the snprintf call and its arguments are not reported. Other control flow and macro guards (#ifdef/#else/#endif) are not relevant to Rule 8.13. The listed fragments are those that may indicate places where a pointer to a non-const object is returned or where an externally-provided macro might yield a non-const pointer, and therefore merit investigation under MISRA C Rule 8.13."
}