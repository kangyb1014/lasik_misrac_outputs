{
  "user_message": "An agent A claimed that the following MHD_connection_set_nodelay_state_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_connection_set_nodelay_state_.\n```c\nbool\nMHD_connection_set_nodelay_state_ (struct MHD_Connection *connection,\n                                   bool nodelay_state)\n{\n#ifdef TCP_NODELAY\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n\n  if (_MHD_YES == connection->is_nonip)\n    return false;\n\n  if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) (nodelay_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n  {\n    connection->sk_nodelay = nodelay_state;\n    return true;\n  }\n\n  err_code = MHD_socket_get_error_ ();\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n  {\n    if (_MHD_UNKNOWN == connection->is_nonip)\n      connection->is_nonip = _MHD_YES;\n#ifdef HAVE_MESSAGES\n    else\n    {\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\"),\n                \"TCP_NODELAY\",\n                nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                (int) connection->socket_fd,\n                MHD_socket_strerr_ (err_code));\n    }\n#endif /* HAVE_MESSAGES */\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"Setting %s option to %s state failed: %s\\n\"),\n              \"TCP_NODELAY\",\n              nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n              MHD_socket_strerr_ (err_code));\n  }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! TCP_NODELAY */\n  (void) connection; (void) nodelay_state; /* Mute compiler warnings */\n#endif /* ! TCP_NODELAY */\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes string-style pointers (\"TCP_NODELAY\", the result of the translation macro _(\"ON\")/_(\"OFF\"), and MHD_socket_strerr_(err_code)). If the translation macro _ and/or MHD_socket_strerr_ return non-const char * (or if MHD_DLOG expects non-const char * parameters), this uses pointers to non-const-qualified characters where const qualification is possible. That violates MISRA C 2023 Rule 8.13\u2014string/format arguments should be const char * (or the called functions should be declared to take const char *).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C:2023 Rule 8.13 is about pointer declarations: a pointer type should be const-qualified when it can be. The shown function does not declare any pointer variable that could/should be const (off_val/on_val are already const, connection must be a non-const pointer because the function writes into fields, and nodelay_state is a value parameter). The only potential concern mentioned by agent A is passing string-like values (string literal, _('...'), MHD_socket_strerr_()) to MHD_DLOG. Whether that is a Rule 8.13 violation depends on the declarations of the called functions/macros (e.g. MHD_DLOG, _, MHD_socket_strerr_). If those are declared to take non-const char * when they could accept const char *, their declarations would be the place to fix; the caller here does not itself violate Rule 8.13. In short: you cannot conclude a violation from this call site alone \u2014 the issue would be in the callee/prototype (or in the translation function's declaration), not in this function. Therefore the report is incorrect."
}