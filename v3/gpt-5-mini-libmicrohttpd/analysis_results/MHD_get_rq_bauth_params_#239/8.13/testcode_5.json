{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member connection->rq.bauth is declared as a non-const pointer (struct MHD_RqBAuth *), then the assignment connection->rq.bauth = bauth; violates MISRA C 2023 Rule 8.13. The rule requires pointers to point to const-qualified types whenever possible. In this code the allocated object is only modified locally (via the non-const local pointer bauth) and then published for read-only use; therefore connection->rq.bauth should be declared as const struct MHD_RqBAuth * so callers cannot modify the object. Recommended fix: change the member to const struct MHD_RqBAuth *; assigning the non-const bauth to it is allowed (struct MHD_RqBAuth * -> const struct MHD_RqBAuth *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_rq_bauth_params_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_rq_bauth_params_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_rq_bauth_params_:\n```c\nconst struct MHD_RqBAuth *\nMHD_get_rq_bauth_params_ (struct MHD_Connection *connection)\n{\n  struct _MHD_str_w_len h_auth_value;\n  struct MHD_RqBAuth *bauth;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n\n  if (connection->rq.bauth_tried)\n    return connection->rq.bauth;\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > connection->state)\n    return NULL;\n\n  if (! find_auth_rq_header_ (connection, MHD_AUTHTYPE_BASIC, &h_auth_value))\n  {\n    connection->rq.bauth_tried = true;\n    connection->rq.bauth = NULL;\n    return NULL;\n  }\n\n  bauth =\n    (struct MHD_RqBAuth *)\n    MHD_connection_alloc_memory_ (connection, sizeof (struct MHD_RqBAuth));\n\n  if (NULL == bauth)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection's pool to allocate \" \\\n                 \"for Basic Authorization header parsing.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return NULL;\n  }\n\n  memset (bauth, 0, sizeof(struct MHD_RqBAuth));\n  if (parse_bauth_params (h_auth_value.str, h_auth_value.len, bauth))\n    connection->rq.bauth = bauth;\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The Basic Authorization client's header has \"\n                 \"incorrect format.\\n\"));\n#endif /* HAVE_MESSAGES */\n    connection->rq.bauth = NULL;\n    /* Memory in the pool remains allocated until next request */\n  }\n  connection->rq.bauth_tried = true;\n  return connection->rq.bauth;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_rq_bauth_params_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logger: append textual traces to /tmp/logs/2393.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2393.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nconst struct MHD_RqBAuth *\nMHD_get_rq_bauth_params_ (struct MHD_Connection *connection)\n{\n  struct _MHD_str_w_len h_auth_value;\n  struct MHD_RqBAuth *bauth;\n\n  /* Log entry and initial asserted state */\n  probe_log(\"ENTER: MHD_get_rq_bauth_params_: connection=%p, state=%d, rq.bauth_tried=%d, rq.bauth=%p\",\n            (void *)connection,\n            (int)connection->state,\n            (int)connection->rq.bauth_tried,\n            (void *)connection->rq.bauth);\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n\n  if (connection->rq.bauth_tried)\n  {\n    probe_log(\"EARLY_RETURN: bauth_tried already true -> returning existing rq.bauth=%p\",\n              (void *)connection->rq.bauth);\n    return connection->rq.bauth;\n  }\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > connection->state)\n  {\n    probe_log(\"EARLY_RETURN: headers not processed (state=%d) -> NULL\",\n              (int)connection->state);\n    return NULL;\n  }\n\n  if (! find_auth_rq_header_ (connection, MHD_AUTHTYPE_BASIC, &h_auth_value))\n  {\n    connection->rq.bauth_tried = true;\n    connection->rq.bauth = NULL;\n    probe_log(\"NO_AUTH_HEADER: find_auth_rq_header_ returned false; set rq.bauth_tried=true, rq.bauth=NULL\");\n    return NULL;\n  }\n\n  probe_log(\"AUTH_HEADER_FOUND: h_auth_value.str=%p, len=%zu\",\n            (void *)h_auth_value.str, (size_t)h_auth_value.len);\n\n  bauth =\n    (struct MHD_RqBAuth *)\n    MHD_connection_alloc_memory_ (connection, sizeof (struct MHD_RqBAuth));\n\n  probe_log(\"ALLOC_ATTEMPT: requested_size=%zu, returned_ptr=%p\",\n            (size_t)sizeof (struct MHD_RqBAuth), (void *)bauth);\n\n  if (NULL == bauth)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection's pool to allocate \" \\\n                 \"for Basic Authorization header parsing.\\n\"));\n#endif /* HAVE_MESSAGES */\n    probe_log(\"ALLOC_FAIL: bauth is NULL -> returning NULL\");\n    return NULL;\n  }\n\n  memset (bauth, 0, sizeof(struct MHD_RqBAuth));\n  probe_log(\"ZEROED_BAUTH: bauth=%p (zeroed)\", (void *)bauth);\n\n  if (parse_bauth_params (h_auth_value.str, h_auth_value.len, bauth))\n  {\n    connection->rq.bauth = bauth;\n    probe_log(\"PARSE_OK: parse_bauth_params succeeded; assigned connection->rq.bauth=%p (bauth)\",\n              (void *)connection->rq.bauth);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The Basic Authorization client's header has \"\n                 \"incorrect format.\\n\"));\n#endif /* HAVE_MESSAGES */\n    connection->rq.bauth = NULL;\n    /* Memory in the pool remains allocated until next request */\n    probe_log(\"PARSE_FAIL: parse_bauth_params failed; connection->rq.bauth set to NULL (bauth=%p still in pool)\",\n              (void *)bauth);\n  }\n  connection->rq.bauth_tried = true;\n  probe_log(\"EXIT: setting rq.bauth_tried=true; returning rq.bauth=%p\",\n            (void *)connection->rq.bauth);\n  return connection->rq.bauth;\n}\n"
}