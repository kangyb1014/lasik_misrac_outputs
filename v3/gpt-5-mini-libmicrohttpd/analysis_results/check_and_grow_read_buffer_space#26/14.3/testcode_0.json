{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the mhd_assert(0) in the default branch uses a constant controlling expression. The assert macro typically expands to a selection (e.g. if(!(expr)) ... or (expr) ? (void)0 : __assert()), so with expr == 0 the controlling expression is invariant (constant). This constitutes a Rule 14.3 violation (invariant controlling expression).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_and_grow_read_buffer_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/265.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of check_and_grow_read_buffer_space as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of check_and_grow_read_buffer_space:\n```c\nstatic bool\ncheck_and_grow_read_buffer_space (struct MHD_Connection *c)\n{\n  /**\n   * The increase of read buffer size is desirable.\n   */\n  bool rbuff_grow_desired;\n  /**\n   * The increase of read buffer size is a hard requirement.\n   */\n  bool rbuff_grow_required;\n\n  mhd_assert (0 != (MHD_EVENT_LOOP_INFO_READ & c->event_loop_info));\n  mhd_assert (! c->discard_request);\n\n  rbuff_grow_required = (c->read_buffer_offset == c->read_buffer_size);\n  if (rbuff_grow_required)\n    rbuff_grow_desired = true;\n  else\n  {\n    rbuff_grow_desired = (c->read_buffer_offset + c->daemon->pool_increment >\n                          c->read_buffer_size);\n\n    if ((rbuff_grow_desired) &&\n        (MHD_CONNECTION_BODY_RECEIVING == c->state))\n    {\n      if (! c->rq.have_chunked_upload)\n      {\n        mhd_assert (MHD_SIZE_UNKNOWN != c->rq.remaining_upload_size);\n        /* Do not grow read buffer more than necessary to process the current\n           request. */\n        rbuff_grow_desired =\n          (c->rq.remaining_upload_size > c->read_buffer_size);\n      }\n      else\n      {\n        mhd_assert (MHD_SIZE_UNKNOWN == c->rq.remaining_upload_size);\n        if (0 == c->rq.current_chunk_size)\n          rbuff_grow_desired =  /* Reading value of the next chunk size */\n                               (MHD_CHUNK_HEADER_REASONABLE_LEN >\n                                c->read_buffer_size);\n        else\n        {\n          const uint64_t cur_chunk_left =\n            c->rq.current_chunk_size - c->rq.current_chunk_offset;\n          /* Do not grow read buffer more than necessary to process the current\n             chunk with terminating CRLF. */\n          mhd_assert (c->rq.current_chunk_offset <= c->rq.current_chunk_size);\n          rbuff_grow_desired =\n            ((cur_chunk_left + 2) > (uint64_t) (c->read_buffer_size));\n        }\n      }\n    }\n  }\n\n  if (! rbuff_grow_desired)\n    return true; /* No need to increase the buffer */\n\n  if (try_grow_read_buffer (c, rbuff_grow_required))\n    return true; /* Buffer increase succeed */\n\n  if (! rbuff_grow_required)\n    return true; /* Can continue without buffer increase */\n\n  /* Failed to increase the read buffer size, but need to read the data\n     from the network.\n     No more space left in the buffer, no more space to increase the buffer. */\n\n  /* 'PROCESS_READ' event state flag must be set only if the last application\n     callback has processed some data. If any data is processed then some\n     space in the read buffer must be available. */\n  mhd_assert (0 == (MHD_EVENT_LOOP_INFO_PROCESS & c->event_loop_info));\n\n  if ((! MHD_D_IS_USING_THREADS_ (c->daemon))\n      && (MHD_CONNECTION_BODY_RECEIVING == c->state)\n      && has_unprocessed_upload_body_data_in_buffer (c))\n  {\n    /* The application is handling processing cycles.\n       The data could be processed later. */\n    c->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n    return true;\n  }\n  else\n  {\n    enum MHD_ProcRecvDataStage stage;\n\n    switch (c->state)\n    {\n    case MHD_CONNECTION_INIT:\n      stage = MHD_PROC_RECV_INIT;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      if (MHD_HTTP_MTHD_NO_METHOD == c->rq.http_mthd)\n        stage = MHD_PROC_RECV_METHOD;\n      else if (0 == c->rq.req_target_len)\n        stage = MHD_PROC_RECV_URI;\n      else\n        stage = MHD_PROC_RECV_HTTPVER;\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      stage = MHD_PROC_RECV_HEADERS;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      stage = c->rq.have_chunked_upload ?\n              MHD_PROC_RECV_BODY_CHUNKED : MHD_PROC_RECV_BODY_NORMAL;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      stage = MHD_PROC_RECV_FOOTERS;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n    case MHD_CONNECTION_CONTINUE_SENDING:\n    case MHD_CONNECTION_BODY_RECEIVED:\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    case MHD_CONNECTION_START_REPLY:\n    case MHD_CONNECTION_HEADERS_SENDING:\n    case MHD_CONNECTION_HEADERS_SENT:\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n    case MHD_CONNECTION_FOOTERS_SENDING:\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n    case MHD_CONNECTION_CLOSED:\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n#endif\n    default:\n      stage = MHD_PROC_RECV_BODY_NORMAL;\n      mhd_assert (0);\n    }\n\n    handle_recv_no_space (c, stage);\n  }\n  return false;\n}\n```\n</target_code>\nPlease provide the modified check_and_grow_read_buffer_space code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/265.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  (void) vfprintf (f, fmt, ap);\n  va_end (ap);\n  (void) fprintf (f, \"\\n\");\n  (void) fclose (f);\n}\n\nstatic bool\ncheck_and_grow_read_buffer_space (struct MHD_Connection *c)\n{\n  /**\n   * The increase of read buffer size is desirable.\n   */\n  bool rbuff_grow_desired;\n  /**\n   * The increase of read buffer size is a hard requirement.\n   */\n  bool rbuff_grow_required;\n\n  /* Log entry and key connection fields */\n  mhd_probe_log (\"ENTER check_and_grow_read_buffer_space: c=%p\", (void *) c);\n  if (c != NULL)\n    {\n      mhd_probe_log (\"fields: event_loop_info=0x%08x, discard_request=%d, state=%d\",\n                     (unsigned int) c->event_loop_info,\n                     (int) c->discard_request,\n                     (int) c->state);\n      mhd_probe_log (\"buffers: read_buffer_offset=%zu, read_buffer_size=%zu, pool_increment=%zu\",\n                     (size_t) c->read_buffer_offset,\n                     (size_t) c->read_buffer_size,\n                     (size_t) c->daemon->pool_increment);\n    }\n\n  mhd_probe_log (\"About to check first asserts\");\n  mhd_assert (0 != (MHD_EVENT_LOOP_INFO_READ & c->event_loop_info));\n  mhd_probe_log (\"Passed assert: event_loop_info had MHD_EVENT_LOOP_INFO_READ\");\n  mhd_assert (! c->discard_request);\n  mhd_probe_log (\"Passed assert: discard_request is false\");\n\n  rbuff_grow_required = (c->read_buffer_offset == c->read_buffer_size);\n  mhd_probe_log (\"rbuff_grow_required = %d\", (int) rbuff_grow_required);\n  if (rbuff_grow_required)\n    rbuff_grow_desired = true;\n  else\n  {\n    rbuff_grow_desired = (c->read_buffer_offset + c->daemon->pool_increment >\n                          c->read_buffer_size);\n\n    mhd_probe_log (\"rbuff_grow_desired initially = %d\", (int) rbuff_grow_desired);\n\n    if ((rbuff_grow_desired) &&\n        (MHD_CONNECTION_BODY_RECEIVING == c->state))\n    {\n      mhd_probe_log (\"In BODY_RECEIVING path, have_chunked_upload=%d\",\n                     (int) c->rq.have_chunked_upload);\n      if (! c->rq.have_chunked_upload)\n      {\n        mhd_probe_log (\"remaining_upload_size=%llu\",\n                       (unsigned long long) c->rq.remaining_upload_size);\n        mhd_assert (MHD_SIZE_UNKNOWN != c->rq.remaining_upload_size);\n        /* Do not grow read buffer more than necessary to process the current\n           request. */\n        rbuff_grow_desired =\n          (c->rq.remaining_upload_size > c->read_buffer_size);\n        mhd_probe_log (\"rbuff_grow_desired for non-chunked = %d\",\n                       (int) rbuff_grow_desired);\n      }\n      else\n      {\n        mhd_probe_log (\"chunked path: remaining_upload_size=%llu (should be MHD_SIZE_UNKNOWN)\",\n                       (unsigned long long) c->rq.remaining_upload_size);\n        mhd_assert (MHD_SIZE_UNKNOWN == c->rq.remaining_upload_size);\n        if (0 == c->rq.current_chunk_size)\n          rbuff_grow_desired =  /* Reading value of the next chunk size */\n                               (MHD_CHUNK_HEADER_REASONABLE_LEN >\n                                c->read_buffer_size);\n        else\n        {\n          const uint64_t cur_chunk_left =\n            c->rq.current_chunk_size - c->rq.current_chunk_offset;\n          /* Do not grow read buffer more than necessary to process the current\n             chunk with terminating CRLF. */\n          mhd_assert (c->rq.current_chunk_offset <= c->rq.current_chunk_size);\n          rbuff_grow_desired =\n            ((cur_chunk_left + 2) > (uint64_t) (c->read_buffer_size));\n          mhd_probe_log (\"chunked: current_chunk_size=%llu, current_chunk_offset=%llu, cur_chunk_left=%llu, rbuff_grow_desired=%d\",\n                         (unsigned long long) c->rq.current_chunk_size,\n                         (unsigned long long) c->rq.current_chunk_offset,\n                         (unsigned long long) cur_chunk_left,\n                         (int) rbuff_grow_desired);\n        }\n      }\n    }\n  }\n\n  mhd_probe_log (\"After calculations: rbuff_grow_desired=%d, rbuff_grow_required=%d\",\n                 (int) rbuff_grow_desired, (int) rbuff_grow_required);\n\n  if (! rbuff_grow_desired)\n    {\n      mhd_probe_log (\"No buffer grow desired -> return true\");\n      return true; /* No need to increase the buffer */\n    }\n\n  mhd_probe_log (\"Attempting to grow buffer, required=%d\", (int) rbuff_grow_required);\n  if (try_grow_read_buffer (c, rbuff_grow_required))\n    {\n      mhd_probe_log (\"try_grow_read_buffer succeeded -> return true\");\n      return true; /* Buffer increase succeed */\n    }\n\n  mhd_probe_log (\"try_grow_read_buffer failed\");\n  if (! rbuff_grow_required)\n    {\n      mhd_probe_log (\"Not required to grow -> return true\");\n      return true; /* Can continue without buffer increase */\n    }\n\n  /* Failed to increase the read buffer size, but need to read the data\n     from the network.\n     No more space left in the buffer, no more space to increase the buffer. */\n\n  /* 'PROCESS_READ' event state flag must be set only if the last application\n     callback has processed some data. If any data is processed then some\n     space in the read buffer must be available. */\n  mhd_assert (0 == (MHD_EVENT_LOOP_INFO_PROCESS & c->event_loop_info));\n  mhd_probe_log (\"Asserted no PROCESS flag set in event_loop_info\");\n\n  if ((! MHD_D_IS_USING_THREADS_ (c->daemon))\n      && (MHD_CONNECTION_BODY_RECEIVING == c->state)\n      && has_unprocessed_upload_body_data_in_buffer (c))\n  {\n    /* The application is handling processing cycles.\n       The data could be processed later. */\n    c->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n    mhd_probe_log (\"Set PROCESS flag and return true\");\n    return true;\n  }\n  else\n  {\n    enum MHD_ProcRecvDataStage stage;\n\n    switch (c->state)\n    {\n    case MHD_CONNECTION_INIT:\n      stage = MHD_PROC_RECV_INIT;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      if (MHD_HTTP_MTHD_NO_METHOD == c->rq.http_mthd)\n        stage = MHD_PROC_RECV_METHOD;\n      else if (0 == c->rq.req_target_len)\n        stage = MHD_PROC_RECV_URI;\n      else\n        stage = MHD_PROC_RECV_HTTPVER;\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      stage = MHD_PROC_RECV_HEADERS;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      stage = c->rq.have_chunked_upload ?\n              MHD_PROC_RECV_BODY_CHUNKED : MHD_PROC_RECV_BODY_NORMAL;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      stage = MHD_PROC_RECV_FOOTERS;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n    case MHD_CONNECTION_CONTINUE_SENDING:\n    case MHD_CONNECTION_BODY_RECEIVED:\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    case MHD_CONNECTION_START_REPLY:\n    case MHD_CONNECTION_HEADERS_SENDING:\n    case MHD_CONNECTION_HEADERS_SENT:\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n    case MHD_CONNECTION_FOOTERS_SENDING:\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n    case MHD_CONNECTION_CLOSED:\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n#endif\n    default:\n      stage = MHD_PROC_RECV_BODY_NORMAL;\n      mhd_probe_log (\"DEFAULT branch reached in switch: c->state=%d, assigned stage=%d -> about to assert(0)\",\n                     (int) c->state, (int) stage);\n      mhd_assert (0);\n    }\n\n    mhd_probe_log (\"Calling handle_recv_no_space with stage=%d\", (int) stage);\n\n    handle_recv_no_space (c, stage);\n  }\n  mhd_probe_log (\"Exiting check_and_grow_read_buffer_space -> return false\");\n  return false;\n}\n"
}