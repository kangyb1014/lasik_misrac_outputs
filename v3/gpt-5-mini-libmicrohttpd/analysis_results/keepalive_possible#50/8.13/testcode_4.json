{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'connection' (and the local alias 'c') is declared as a pointer to a mutable struct: 'struct MHD_Connection *connection' and 'struct MHD_Connection *const c = connection;'. In the shown fragment the code only reads fields (e.g. c->rq.http_ver via MHD_IS_HTTP_VER_SUPPORTED) and does not modify the pointed-to object, so the pointer could and should be const-qualified \u2014 e.g. 'const struct MHD_Connection *connection' or at least 'const struct MHD_Connection *const c'. Therefore this use violates MISRA C 2023 Rule 8.13. (If other calls in the function or API require a non-const pointer, that may justify the current signature, but based solely on the fragment the pointer should be const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void\nmhd_log_keepalive (const struct MHD_Connection *c,\n                   const struct MHD_Response *r,\n                   const char *point,\n                   int decision_code)\n{\n  FILE *f = fopen(\"/tmp/logs/503.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log a compact snapshot of the relevant connection/response state. */\n  fprintf (f,\n           \"KEEPALIVE_LOG point=%s decision=%d keepalive=%d read_closed=%d discard_request=%d stop_with_error=%d rq_http_ver=%d r_flags=0x%X r_flags_auto=0x%X r_upgrade_handler=%p\\n\",\n           (point != NULL) ? point : \"(null)\",\n           decision_code,\n           (int) c->keepalive,\n           (int) c->read_closed,\n           (int) c->discard_request,\n           (int) c->stop_with_error,\n           (int) c->rq.http_ver,\n           (unsigned) r->flags,\n           (unsigned) r->flags_auto,\n           (void *) r->upgrade_handler);\n  fclose (f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  /* Log after the assert to avoid dereferencing a NULL response in logs. */\n  mhd_log_keepalive (c, r, \"entry\", -1);\n\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_log_keepalive (c, r, \"early_must_close_keepalive_flag\", (int) MHD_CONN_MUST_CLOSE);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    mhd_log_keepalive (c, r, \"upgrade_must_upgrade\", (int) MHD_CONN_MUST_UPGRADE);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_log_keepalive (c, r, \"read_closed_or_discard_request_must_close\", (int) MHD_CONN_MUST_CLOSE);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_log_keepalive (c, r, \"response_http_1_0_strict_must_close\", (int) MHD_CONN_MUST_CLOSE);\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_log_keepalive (c, r, \"response_has_connection_close_must_close\", (int) MHD_CONN_MUST_CLOSE);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    mhd_log_keepalive (c, r, \"http_version_not_supported_must_close\", (int) MHD_CONN_MUST_CLOSE);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Capture and log whether a \"close\" connection token is present. */\n  {\n    int has_conn_close = (NULL != MHD_lookup_header_s_token_ci (c,\n                                                                MHD_HTTP_HEADER_CONNECTION,\n                                                                \"close\"));\n    mhd_log_keepalive (c, r, \"checked_connection_close_token\", has_conn_close ? 1 : 0);\n    if (has_conn_close)\n    {\n      mhd_log_keepalive (c, r, \"header_connection_close_must_close\", (int) MHD_CONN_MUST_CLOSE);\n      return MHD_CONN_MUST_CLOSE;\n    }\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    /* Use the 'connection' pointer as in the original code for this branch. */\n    int has_keep_alive = (NULL != MHD_lookup_header_s_token_ci (connection,\n                                                                MHD_HTTP_HEADER_CONNECTION,\n                                                                \"Keep-Alive\"));\n    mhd_log_keepalive (c, r, \"http_1_0_branch_checked_keepalive_token\", has_keep_alive ? 1 : 0);\n    if (has_keep_alive)\n    {\n      mhd_log_keepalive (c, r, \"http_1_0_branch_use_keepalive\", (int) MHD_CONN_USE_KEEPALIVE);\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_log_keepalive (c, r, \"http_1_0_branch_must_close\", (int) MHD_CONN_MUST_CLOSE);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_log_keepalive (c, r, \"http_1_1_compatible_use_keepalive\", (int) MHD_CONN_USE_KEEPALIVE);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_log_keepalive (c, r, \"default_must_close\", (int) MHD_CONN_MUST_CLOSE);\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}