{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local alias is declared as 'struct MHD_Response *const r' (a constant pointer to a non-const MHD_Response). In the function r is only used for read-only accesses (r->upgrade_handler, r->flags_auto, r->flags, etc.), so the pointed-to type can and should be const-qualified. According to MISRA C 2023 Rule 8.13 the pointer target should be const whenever possible. Change the declaration to 'const struct MHD_Response *const r' (or 'struct MHD_Response const *const r') to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void mhd_log_probe(const char *stage,\n                          struct MHD_Connection *const c,\n                          struct MHD_Response *const r,\n                          const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/503.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Print core pointers and key fields used by keepalive_possible. */\n  fprintf(f, \"[keepalive] stage=%s c=%p keepalive=%d rq.http_ver=%d stop_with_error=%d discard_request=%d read_closed=%d rp.response=%p r=%p\\n\",\n          stage,\n          (void *)c,\n          (int)c->keepalive,\n          (int)c->rq.http_ver,\n          (int)c->stop_with_error,\n          (int)c->discard_request,\n          (int)c->read_closed,\n          (void *)c->rp.response,\n          (void *)r);\n\n  if (NULL != r)\n  {\n    fprintf(f, \"[keepalive] stage=%s r->upgrade_handler=%p r->flags_auto=0x%08x r->flags=0x%08x\\n\",\n            stage,\n            (void *)r->upgrade_handler,\n            (unsigned int)r->flags_auto,\n            (unsigned int)r->flags);\n  }\n  if (NULL != extra)\n    fprintf(f, \"[keepalive] stage=%s extra=%s\\n\", stage, extra);\n\n  fclose(f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log entry and core aliases after we have aliases available. */\n  mhd_log_probe(\"entry_aliases\", c, r, NULL);\n\n  mhd_assert (NULL != r);\n  mhd_log_probe(\"after_assert_r_not_null\", c, r, NULL);\n\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_log_probe(\"must_close_by_keepalive\", c, r, \"c->keepalive == MHD_CONN_MUST_CLOSE\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    mhd_log_probe(\"must_upgrade\", c, r, \"r->upgrade_handler != NULL -> upgrade\");\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_log_probe(\"post_upgrade_check\", c, r, NULL);\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_log_probe(\"must_close_read_closed_or_discard\", c, r, \"c->read_closed || c->discard_request\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_log_probe(\"must_close_r_flags_1_0_strict\", c, r, \"r->flags has HTTP/1.0 strict\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_log_probe(\"must_close_r_flags_auto_connection_close\", c, r, \"r->flags_auto has CONNECTION: close\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    mhd_log_probe(\"must_close_http_ver_not_supported\", c, r, \"http version not supported\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Capture header lookups once so we can both log and use the result\n     without double-calling lookup routines. */\n  int has_conn_close = MHD_lookup_header_s_token_ci (c,\n                                                    MHD_HTTP_HEADER_CONNECTION,\n                                                    \"close\");\n  mhd_log_probe(\"after_lookup_close\", c, r, has_conn_close ? \"header Connection: close present\" : \"no Connection: close header\");\n  if (has_conn_close)\n  {\n    mhd_log_probe(\"must_close_header_connection_close\", c, r, \"Connection: close present\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    int has_keep_alive = MHD_lookup_header_s_token_ci (connection,\n                                                       MHD_HTTP_HEADER_CONNECTION,\n                                                       \"Keep-Alive\");\n    mhd_log_probe(\"http_1_0_path\", c, r, has_keep_alive ? \"Connection: Keep-Alive present\" : \"no Connection: Keep-Alive header\");\n    if (has_keep_alive)\n    {\n      mhd_log_probe(\"use_keepalive_http_1_0\", c, r, \"HTTP/1.0 and Keep-Alive header\");\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_log_probe(\"must_close_http_1_0_no_keepalive\", c, r, \"HTTP/1.0 and no Keep-Alive\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_log_probe(\"use_keepalive_http_1_1\", c, r, \"HTTP/1.1 or compatible -> use keepalive\");\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_log_probe(\"default_must_close\", c, r, \"fallthrough -> must close\");\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}