{
  "user_message": "An agent A claimed that the following keepalive_possible code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of keepalive_possible.\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function takes a non-const pointer parameter (struct MHD_Connection *connection) and uses it only to read fields. In the fragment the code reads connection->rq.http_ver and connection->rp.response->flags through that non-const pointer. Also the local alias is declared as 'struct MHD_Connection *const c' (a const pointer to mutable data) rather than 'const struct MHD_Connection *' (pointer to const). Because the pointed-to data is not modified and could be const-qualified, Rule 8.13 is violated.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nSTAGE=entry\n connection=0x5653e1152df0\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x5653e115b0c0\n response=0x5653e115b0c0\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=upgrade_handler != NULL -> MUST_UPGRADE\n connection=0x5653e1152df0\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x5653e115b0c0\n response=0x5653e115b0c0\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=entry\n connection=0x5653e115ba80\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x5653e115bcd0\n response=0x5653e115bcd0\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=upgrade_handler != NULL -> MUST_UPGRADE\n connection=0x5653e115ba80\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x5653e115bcd0\n response=0x5653e115bcd0\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=entry\n connection=0x5653e1153090\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x5653e115c290\n response=0x5653e115c290\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=upgrade_handler != NULL -> MUST_UPGRADE\n connection=0x5653e1153090\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x5653e115c290\n response=0x5653e115c290\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=entry\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x7f0c90000b90\n response=0x7f0c90000b90\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=upgrade_handler != NULL -> MUST_UPGRADE\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x7f0c90000b90\n response=0x7f0c90000b90\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=entry\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x7f0c8c000b90\n response=0x7f0c8c000b90\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=upgrade_handler != NULL -> MUST_UPGRADE\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x7f0c8c000b90\n response=0x7f0c8c000b90\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=entry\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x7f0c8c000b90\n response=0x7f0c8c000b90\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=upgrade_handler != NULL -> MUST_UPGRADE\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x7f0c8c000b90\n response=0x7f0c8c000b90\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=entry\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x7f0c88008f40\n response=0x7f0c88008f40\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=upgrade_handler != NULL -> MUST_UPGRADE\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x7f0c88008f40\n response=0x7f0c88008f40\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=entry\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.response=0x7f0c88008f40\n response=0x7f0c88008f40\n  flags=0x0\n  flags_auto=0x1\n  upgrade_handler=0x5653d4c20af0\n----\nSTAGE=upgrade_handler != NULL -> MUST_UPGRADE\n connection=0x7f0c88000b90\n  keepalive=0\n  rq.http_ver=3\n  stop_with_error=0\n  read_closed=0\n  discard_request=1\n  rp.resp\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct in the absence of contradictory facts. In keepalive_possible the parameter is declared as \"struct MHD_Connection *connection\" and the local alias is \"struct MHD_Connection *const c\" (a const pointer to mutable data). Inspecting the function body shows only reads of the connection and response fields (checks, asserts and calls that observe state); there are no writes to *connection or *r in this function. According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the parameter and the local aliases could and should be declared as pointers to const (for example: \"const struct MHD_Connection * connection\" and \"const struct MHD_Connection *const c\" and \"const struct MHD_Response *const r\"). That would satisfy the rule unless one of the called functions (e.g. MHD_lookup_header_s_token_ci or other APIs/macros) requires a non-const pointer or actually modifies the pointed-to object; if such evidence exists then the current declaration can be justified. Given only the code shown, the agent A\u2019s claim of a Rule 8.13 violation is correct."
}