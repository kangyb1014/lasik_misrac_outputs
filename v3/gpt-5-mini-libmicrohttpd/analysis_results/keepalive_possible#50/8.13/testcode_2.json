{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe string literal \"Keep-Alive\" is passed to MHD_lookup_header_s_token_ci. If that function's prototype declares the corresponding parameter as a non-const pointer (e.g. char *token), this is a MISRA C 2023 Rule 8.13 violation because a pointer should point to a const-qualified type whenever possible. The correct form would be to declare the parameter as const char * (or otherwise ensure the pointer-to-const is used) so that string literals, which must not be modified, are passed to a const-qualified pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append text to /tmp/logs/503.txt. Kept minimal to avoid changing logic. */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/503.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Additional probe to dump key connection/response state succinctly. */\nstatic void mhd_log_state(const char *stage,\n                          struct MHD_Connection *c,\n                          struct MHD_Response *r)\n{\n    /* We cast numeric fields to long for safe printing even if they are enums/bitfields. */\n    mhd_log_probe(\"[keepalive] %s: conn=%p, resp=%p, keepalive=%ld, read_closed=%ld, discard_request=%ld, stop_with_error=%ld, rq.http_ver=%ld, r->flags=0x%lx, r->flags_auto=0x%lx, r->upgrade_handler=%p\",\n                  stage,\n                  (void *)c,\n                  (void *)r,\n                  (long)c->keepalive,\n                  (long)c->read_closed,\n                  (long)c->discard_request,\n                  (long)c->stop_with_error,\n                  (long)c->rq.http_ver,\n                  (unsigned long)r->flags,\n                  (unsigned long)r->flags_auto,\n                  (void *)r->upgrade_handler);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log entry and initial state */\n  mhd_log_probe(\"[keepalive] ENTER: connection=%p\", (void *)connection);\n  mhd_log_state(\"initial\", c, r);\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_log_probe(\"[keepalive] early: MHD_CONN_MUST_CLOSE due to c->keepalive == MHD_CONN_MUST_CLOSE\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n\n    mhd_log_probe(\"[keepalive] upgrade handler present: returning MHD_CONN_MUST_UPGRADE\");\n    mhd_log_state(\"upgrade\", c, r);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_log_probe(\"[keepalive] closing: read_closed=%ld or discard_request=%ld\",\n                  (long)c->read_closed, (long)c->discard_request);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_log_probe(\"[keepalive] closing: HTTP 1.0 compatible strict flag set in response flags\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_log_probe(\"[keepalive] closing: response flags_auto indicates Connection: close\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    mhd_log_probe(\"[keepalive] closing: HTTP version not supported: %ld\", (long)c->rq.http_ver);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Probe before calling MHD_lookup_header_s_token_ci for \"close\" */\n  mhd_log_probe(\"[keepalive] calling MHD_lookup_header_s_token_ci for token=%p (\\\"%s\\\")\",\n                (void *)\"close\", \"close\");\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    mhd_log_probe(\"[keepalive] header token \\\"close\\\" found -> MHD_CONN_MUST_CLOSE\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    /* Probe before calling MHD_lookup_header_s_token_ci for \"Keep-Alive\" */\n    mhd_log_probe(\"[keepalive] HTTP/1.0 path: calling MHD_lookup_header_s_token_ci for token=%p (\\\"%s\\\")\",\n                  (void *)\"Keep-Alive\", \"Keep-Alive\");\n\n    /* The following call is central to the reported Rule 8.13 scenario: a string\n       literal (\"Keep-Alive\") is passed here. We log token pointer and surrounding\n       state so an auditor can reproduce and inspect the call site. */\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      mhd_log_probe(\"[keepalive] header token \\\"Keep-Alive\\\" found -> MHD_CONN_USE_KEEPALIVE\");\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_log_probe(\"[keepalive] HTTP/1.0 path: no Keep-Alive token -> MHD_CONN_MUST_CLOSE\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_log_probe(\"[keepalive] HTTP/1.1 compatible -> MHD_CONN_USE_KEEPALIVE\");\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_log_probe(\"[keepalive] default -> MHD_CONN_MUST_CLOSE\");\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}