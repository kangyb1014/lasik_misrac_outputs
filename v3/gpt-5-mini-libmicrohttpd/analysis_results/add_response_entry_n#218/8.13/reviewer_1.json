{
  "user_message": "An agent A claimed that the following add_response_entry_n code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_response_entry_n.\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the prototype of MHD_add_response_entry_no_check_ declares the header/content parameters as non-const (e.g. char *header, char *content), then passing const char *header and const char *content here discards the const qualifier and violates MISRA C 2023 Rule 8.13. The fix is to declare the callee parameters as const char * (or otherwise ensure the pointers are to const-qualified types). If the callee already accepts const char * for these parameters, there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[add_response_entry_n] phase=entry\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cd01f, header_len=13\n  content=0x561e9c6cd02d, content_len=8\n  header_bytes=4865616465722d547970652d41\n  content_bytes=76616c75652d6131\n\n[add_response_entry_n] phase=before_delegate\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cd01f, header_len=13\n  content=0x561e9c6cd02d, content_len=8\n  reason=delegating to MHD_add_response_entry_no_check_\n  header_bytes=4865616465722d547970652d41\n  content_bytes=76616c75652d6131\n\n[add_response_entry_n] delegated_call_result=1\n\n[add_response_entry_n] phase=entry\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cd01f, header_len=13\n  content=0x561e9c6cd04d, content_len=8\n  header_bytes=4865616465722d547970652d41\n  content_bytes=76616c75652d6132\n\n[add_response_entry_n] phase=before_delegate\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cd01f, header_len=13\n  content=0x561e9c6cd04d, content_len=8\n  reason=delegating to MHD_add_response_entry_no_check_\n  header_bytes=4865616465722d547970652d41\n  content_bytes=76616c75652d6132\n\n[add_response_entry_n] delegated_call_result=1\n\n[add_response_entry_n] phase=entry\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cd01f, header_len=13\n  content=0x561e9c6cd087, content_len=8\n  header_bytes=4865616465722d547970652d41\n  content_bytes=76616c75652d6133\n\n[add_response_entry_n] phase=before_delegate\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cd01f, header_len=13\n  content=0x561e9c6cd087, content_len=8\n  reason=delegating to MHD_add_response_entry_no_check_\n  header_bytes=4865616465722d547970652d41\n  content_bytes=76616c75652d6133\n\n[add_response_entry_n] delegated_call_result=1\n\n[add_response_entry_n] phase=entry\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cda16, header_len=4\n  content=0x561e9c6cda1b, content_len=29\n  header_bytes=44617465\n  content_bytes=5765642c203031204170722032303135\n\n[add_response_entry_n] phase=before_delegate\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cda16, header_len=4\n  content=0x561e9c6cda1b, content_len=29\n  reason=delegating to MHD_add_response_entry_no_check_\n  header_bytes=44617465\n  content_bytes=5765642c203031204170722032303135\n\n[add_response_entry_n] delegated_call_result=1\n\n[add_response_entry_n] phase=entry\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cda16, header_len=4\n  content=0x561e9c6cda79, content_len=29\n  header_bytes=44617465\n  content_bytes=5468752c203031204170722032303231\n\n[add_response_entry_n] phase=before_delegate\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cda16, header_len=4\n  content=0x561e9c6cda79, content_len=29\n  reason=delegating to MHD_add_response_entry_no_check_\n  header_bytes=44617465\n  content_bytes=5468752c203031204170722032303231\n\n[add_response_entry_n] delegated_call_result=1\n\n[add_response_entry_n] phase=entry\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cdaf5, header_len=17\n  content=0x561e9c6cdb07, content_len=7\n  header_bytes=5472616e736665722d456e636f64696e\n  content_bytes=6368756e6b6564\n\n[add_response_entry_n] phase=before_delegate\n  response=0x561ed7227820, kind=1\n  header=0x561e9c6cdaf5, header_len=17\n  content=0x561e9c6cdb07, content_len=7\n  reason=delegating to MHD_add_response_entry_no_check_\n  header_bytes=5472616e736665722d456e636f64696e\n  content_bytes=6368756e6b6564\n\n[add_response_entry_n] delegated_call_result=1\n\n[add_response_entry_n] phase=entry\n  response=0x55a3b4ac00c0, kind=1\n  header=0x55a391200ac5, header_len=7\n  content=0x55a391200acd, content_len=20\n  header_bytes=55706772616465\n  content_bytes=48656c6c6f20576f726c642050726f74\n\n[add_response_entry_n] phase=before_delegate\n  response=0x55a3b4ac00c0, kind=1\n  header=0x55a391200ac5, header_len=7\n  content=0x55a391200acd, content_len=20\n  reason=delegating to MHD_add_response_entry_no_check_\n  header_bytes=55706772616465\n  content_bytes=48656c6c6f20576f726c642050726f74\n\n[add_response_entry_n] delegated_call_result=1\n\n[add_response_entry_n] phase=entry\n  response=0x55a3b4ac0cd0, kind=1\n  header=0x55a391200ac5, header_len=7\n  content=0x55a391200acd, content_len=20\n  head\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is only conditionally correct. The add_response_entry_n definition shown uses const char * for header and content, so the function itself complies with the intent of MISRA C 2023 Rule 8.13 (pointers point to const-qualified types where possible). A violation would occur only if the prototype of MHD_add_response_entry_no_check_ declares its header/content parameters as non-const (e.g. char *). In that case the call would attempt to pass const char * to a non-const parameter (discarding the const qualifier), which is the real problem \u2014 the callee declaration would be non-compliant and the call would be ill-formed without an explicit cast. The correct fix is to change the callee prototype to accept const char * (or otherwise ensure pointer types are const-qualified)."
}