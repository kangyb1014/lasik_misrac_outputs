{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf content is NULL while content_len > 0 the call memchr(content, '\\n', content_len) will attempt to read bytes through a NULL pointer (out-of-bounds / undefined behaviour). The function does not check content for NULL before calling memchr, so passing a NULL content with a non-zero length violates Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "static bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  /* Probe logging: write control-flow and state to /tmp/logs/2189.txt */\n  {\n    FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"ENTER add_response_entry_n: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n                (void *) response, (int) kind, (void *) header, header_len, (void *) content, content_len);\n        fclose(log);\n      }\n  }\n\n  if (NULL == response)\n    {\n      FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"EARLY RETURN: response is NULL\\n\");\n          fclose(log);\n        }\n      return false;\n    }\n  if (0 == header_len)\n    {\n      FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"EARLY RETURN: header_len is 0\\n\");\n          fclose(log);\n        }\n      return false;\n    }\n  if (0 == content_len)\n    {\n      FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"EARLY RETURN: content_len is 0\\n\");\n          fclose(log);\n        }\n      return false;\n    }\n\n  /* Log and perform original checks in original order. Logs are written just\n     before the corresponding memchr call so an observer can see the pointer\n     and length values that lead to the memchr invocation. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"CHECK header for '\\\\t': header=%p header_len=%zu\\n\", (void *) header, header_len);\n        fclose(log);\n      }\n  }\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n\n  {\n    FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"CHECK header for ' ' : header=%p header_len=%zu\\n\", (void *) header, header_len);\n        fclose(log);\n      }\n  }\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n\n  {\n    FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"CHECK header for '\\\\r': header=%p header_len=%zu\\n\", (void *) header, header_len);\n        fclose(log);\n      }\n  }\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n\n  {\n    FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"CHECK header for '\\\\n': header=%p header_len=%zu\\n\", (void *) header, header_len);\n        fclose(log);\n      }\n  }\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n\n  /* For content checks, log pointer and length. If content is NULL while\n     content_len > 0 this will be recorded here before the memchr is invoked.\n     We intentionally preserve the original memchr invocation order/behavior so\n     other agents can reproduce the violation scenario; the log provides\n     evidence prior to the potentially undefined behavior. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"CHECK content for '\\\\r': content=%p content_len=%zu\\n\", (void *) content, content_len);\n        if (content == NULL && content_len > 0)\n          fprintf(log, \"WARNING: content is NULL while content_len > 0 -> memchr(content, '\\\\r', content_len) may dereference NULL\\n\");\n        fclose(log);\n      }\n  }\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n\n  {\n    FILE *log = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"CHECK content for '\\\\n': content=%p content_len=%zu\\n\", (void *) content, content_len);\n        if (content == NULL && content_len > 0)\n          fprintf(log, \"WARNING: content is NULL while content_len > 0 -> memchr(content, '\\\\n', content_len) may dereference NULL\\n\");\n        fclose(log);\n      }\n  }\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}"
}