{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf header is NULL while header_len > 0 (or if header_len exceeds the actual size of the object pointed to by header), the call memchr(header, '\\t', header_len) will access memory beyond the bounds of the referenced object. The code does not check header != NULL nor validate that header_len matches the actual buffer size, so this can lead to out\u2011of\u2011bounds access and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Minimal stubs so this translation unit is compilable. */\nstruct MHD_Response { int dummy; };\nenum MHD_ValueKind { MHD_KIND_DEFAULT };\n\n/* Probe logger: write control-flow and state to /tmp/logs/2189.txt. */\nstatic void probe_log_state(const char *stage,\n                            const struct MHD_Response *response,\n                            const char *header, size_t header_len,\n                            const char *content, size_t content_len)\n{\n  FILE *f = fopen(\"/tmp/logs/2189.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Log pointer values and lengths only (do not dereference pointers).\n     This avoids introducing new undefined behaviour while capturing\n     the information needed to reproduce the scenario. */\n  fprintf(f, \"stage=%s response=%p header=%p header_len=%zu content=%p content_len=%zu\\n\",\n          stage, (const void *)response,\n          (const void *)header, header_len,\n          (const void *)content, content_len);\n  fflush(f);\n  fclose(f);\n}\n\nstatic void probe_log_result(const char *stage, const void *result)\n{\n  FILE *f = fopen(\"/tmp/logs/2189.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"stage=%s result_ptr=%p\\n\", stage, result);\n  fflush(f);\n  fclose(f);\n}\n\n/* Minimal implementation so the function compiles and preserves original logic. */\nstatic bool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  /* Log that we reached the final call. */\n  probe_log_state(\"enter_MHD_add_response_entry_no_check_\",\n                  response, header, header_len, content, content_len);\n  return true;\n}\n\n/* Modified function with probes inserted before and after critical checks. */\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  probe_log_state(\"entry\", response, header, header_len, content, content_len);\n\n  if (NULL == response) {\n    probe_log_state(\"null_response_return\", response, header, header_len, content, content_len);\n    return false;\n  }\n  if (0 == header_len) {\n    probe_log_state(\"zero_header_len_return\", response, header, header_len, content, content_len);\n    return false;\n  }\n  if (0 == content_len) {\n    probe_log_state(\"zero_content_len_return\", response, header, header_len, content, content_len);\n    return false;\n  }\n\n  /* Each memchr is preceded by a probe that logs pointers and lengths.\n     The actual memchr calls are left in place to preserve original behavior\n     (and to allow reproduction of the reported violation). */\n\n  probe_log_state(\"before_memchr_header_tab\", response, header, header_len, content, content_len);\n  const void *res = memchr (header, '\\t', header_len);\n  probe_log_result(\"after_memchr_header_tab\", res);\n  if (NULL != res) {\n    probe_log_state(\"memchr_header_tab_nonnull_return\", response, header, header_len, content, content_len);\n    return false;\n  }\n\n  probe_log_state(\"before_memchr_header_space\", response, header, header_len, content, content_len);\n  res = memchr (header, ' ', header_len);\n  probe_log_result(\"after_memchr_header_space\", res);\n  if (NULL != res) {\n    probe_log_state(\"memchr_header_space_nonnull_return\", response, header, header_len, content, content_len);\n    return false;\n  }\n\n  probe_log_state(\"before_memchr_header_cr\", response, header, header_len, content, content_len);\n  res = memchr (header, '\\r', header_len);\n  probe_log_result(\"after_memchr_header_cr\", res);\n  if (NULL != res) {\n    probe_log_state(\"memchr_header_cr_nonnull_return\", response, header, header_len, content, content_len);\n    return false;\n  }\n\n  probe_log_state(\"before_memchr_header_nl\", response, header, header_len, content, content_len);\n  res = memchr (header, '\\n', header_len);\n  probe_log_result(\"after_memchr_header_nl\", res);\n  if (NULL != res) {\n    probe_log_state(\"memchr_header_nl_nonnull_return\", response, header, header_len, content, content_len);\n    return false;\n  }\n\n  probe_log_state(\"before_memchr_content_cr\", response, header, header_len, content, content_len);\n  res = memchr (content, '\\r', content_len);\n  probe_log_result(\"after_memchr_content_cr\", res);\n  if (NULL != res) {\n    probe_log_state(\"memchr_content_cr_nonnull_return\", response, header, header_len, content, content_len);\n    return false;\n  }\n\n  probe_log_state(\"before_memchr_content_nl\", response, header, header_len, content, content_len);\n  res = memchr (content, '\\n', content_len);\n  probe_log_result(\"after_memchr_content_nl\", res);\n  if (NULL != res) {\n    probe_log_state(\"memchr_content_nl_nonnull_return\", response, header, header_len, content, content_len);\n    return false;\n  }\n\n  probe_log_state(\"before_final_call\", response, header, header_len, content, content_len);\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n"
}