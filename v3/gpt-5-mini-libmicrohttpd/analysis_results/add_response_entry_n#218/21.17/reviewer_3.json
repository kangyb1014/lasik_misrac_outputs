{
  "user_message": "An agent A claimed that the following add_response_entry_n code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of add_response_entry_n.\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf content is NULL while content_len > 0 the call memchr(content, '\\n', content_len) will attempt to read bytes through a NULL pointer (out-of-bounds / undefined behaviour). The function does not check content for NULL before calling memchr, so passing a NULL content with a non-zero length violates Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER add_response_entry_n: response=0x5627788b2820 kind=1 header=0x5627567e501f header_len=13 content=0x5627567e502d content_len=8\nCHECK header for '\\t': header=0x5627567e501f header_len=13\nCHECK header for ' ' : header=0x5627567e501f header_len=13\nCHECK header for '\\r': header=0x5627567e501f header_len=13\nCHECK header for '\\n': header=0x5627567e501f header_len=13\nCHECK content for '\\r': content=0x5627567e502d content_len=8\nCHECK content for '\\n': content=0x5627567e502d content_len=8\nENTER add_response_entry_n: response=0x5627788b2820 kind=1 header=0x5627567e501f header_len=13 content=0x5627567e504d content_len=8\nCHECK header for '\\t': header=0x5627567e501f header_len=13\nCHECK header for ' ' : header=0x5627567e501f header_len=13\nCHECK header for '\\r': header=0x5627567e501f header_len=13\nCHECK header for '\\n': header=0x5627567e501f header_len=13\nCHECK content for '\\r': content=0x5627567e504d content_len=8\nCHECK content for '\\n': content=0x5627567e504d content_len=8\nENTER add_response_entry_n: response=0x5627788b2820 kind=1 header=0x5627567e501f header_len=13 content=0x5627567e5087 content_len=8\nCHECK header for '\\t': header=0x5627567e501f header_len=13\nCHECK header for ' ' : header=0x5627567e501f header_len=13\nCHECK header for '\\r': header=0x5627567e501f header_len=13\nCHECK header for '\\n': header=0x5627567e501f header_len=13\nCHECK content for '\\r': content=0x5627567e5087 content_len=8\nCHECK content for '\\n': content=0x5627567e5087 content_len=8\nENTER add_response_entry_n: response=0x5627788b2820 kind=1 header=0x5627567e5a16 header_len=4 content=0x5627567e5a1b content_len=29\nCHECK header for '\\t': header=0x5627567e5a16 header_len=4\nCHECK header for ' ' : header=0x5627567e5a16 header_len=4\nCHECK header for '\\r': header=0x5627567e5a16 header_len=4\nCHECK header for '\\n': header=0x5627567e5a16 header_len=4\nCHECK content for '\\r': content=0x5627567e5a1b content_len=29\nCHECK content for '\\n': content=0x5627567e5a1b content_len=29\nENTER add_response_entry_n: response=0x5627788b2820 kind=1 header=0x5627567e5a16 header_len=4 content=0x5627567e5a79 content_len=29\nCHECK header for '\\t': header=0x5627567e5a16 header_len=4\nCHECK header for ' ' : header=0x5627567e5a16 header_len=4\nCHECK header for '\\r': header=0x5627567e5a16 header_len=4\nCHECK header for '\\n': header=0x5627567e5a16 header_len=4\nCHECK content for '\\r': content=0x5627567e5a79 content_len=29\nCHECK content for '\\n': content=0x5627567e5a79 content_len=29\nENTER add_response_entry_n: response=0x5627788b2820 kind=1 header=0x5627567e5af5 header_len=17 content=0x5627567e5b07 content_len=7\nCHECK header for '\\t': header=0x5627567e5af5 header_len=17\nCHECK header for ' ' : header=0x5627567e5af5 header_len=17\nCHECK header for '\\r': header=0x5627567e5af5 header_len=17\nCHECK header for '\\n': header=0x5627567e5af5 header_len=17\nCHECK content for '\\r': content=0x5627567e5b07 content_len=7\nCHECK content for '\\n': content=0x5627567e5b07 content_len=7\nENTER add_response_entry_n: response=0x56303aebc0c0 kind=1 header=0x56301c88dac5 header_len=7 content=0x56301c88dacd content_len=20\nCHECK header for '\\t': header=0x56301c88dac5 header_len=7\nCHECK header for ' ' : header=0x56301c88dac5 header_len=7\nCHECK header for '\\r': header=0x56301c88dac5 header_len=7\nCHECK header for '\\n': header=0x56301c88dac5 header_len=7\nCHECK content for '\\r': content=0x56301c88dacd content_len=20\nCHECK content for '\\n': content=0x56301c88dacd content_len=20\nENTER add_response_entry_n: response=0x56303aebccd0 kind=1 header=0x56301c88dac5 header_len=7 content=0x56301c88dacd content_len=20\nCHECK header for '\\t': header=0x56301c88dac5 header_len=7\nCHECK header for ' ' : header=0x56301c88dac5 header_len=7\nCHECK header for '\\r': header=0x56301c88dac5 header_len=7\nCHECK header for '\\n': header=0x56301c88dac5 header_len=7\nCHECK content for '\\r': content=0x56301c88dacd content_len=20\nCHECK content for '\\n': content=0x56301c88dacd content_len=20\nENTER add_response_entry_n: response=0x56303aebd290 kind=1 header=0x56301c88dac5 header_len=7 content=0x56301c88dacd content_len=20\nCHECK header for '\\t': header=0x56301c88dac5 header_\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 21.17 prohibits using string.h functions in a way that can access beyond the bounds of the objects referenced by their pointer parameters. memchr is one of the listed functions and will read up to the supplied length starting at the pointer. In the presented code add_response_entry_n there is no check that content (or header) is non-NULL before calling memchr(content, ..., content_len) (and memchr(header, ..., header_len)). The function only checks that content_len and header_len are non-zero, but if a caller passes content == NULL with content_len > 0 (or header == NULL with header_len > 0) the subsequent memchr call will attempt to read through a NULL pointer \u2014 undefined behaviour and an out-of-bounds access according to Rule 21.17. The runtime log only shows non-NULL pointers for these calls in observed runs, but that does not eliminate the defect in the code. Therefore agent A\u2019s reported violation is correct. Suggested remediation: ensure pointer parameters are non-NULL when the corresponding length is non-zero (e.g. check content != NULL and header != NULL before calling memchr, or require and document that length==0 when pointer may be NULL)."
}