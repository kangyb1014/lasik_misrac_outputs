{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (NULL != memchr (header, '\\t', header_len))\n    return false;",
    "if (NULL != memchr (content, '\\r', content_len))\n    return false;",
    "if (NULL != memchr (header, ' ', header_len))\n    return false;",
    "if (NULL != memchr (content, '\\n', content_len))\n    return false;",
    "if (NULL != memchr (header, '\\r', header_len))\n    return false;",
    "if (NULL != memchr (header, '\\n', header_len))\n    return false;",
    "return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);"
  ],
  "explanation": "The memchr calls operate on header and content with non-zero lengths, but the function does not check that header and content are non-NULL or that they reference objects at least header_len/content_len bytes long. Each memchr invocation therefore needs investigation for potential out-of-bounds access per MISRA C 2023 Rule 21.17. The final call to MHD_add_response_entry_no_check_ is included because it forwards header/header_len and content/content_len and may perform additional string.h operations that could access beyond object bounds; it should be inspected together with the callers' guarantees about buffer sizes. Other fragments (the checks for response == NULL, the checks for header_len == 0 and content_len == 0, and the simple return false statements) do not themselves invoke <string.h> functions or perform memory accesses and therefore do not require investigation for this specific rule."
}