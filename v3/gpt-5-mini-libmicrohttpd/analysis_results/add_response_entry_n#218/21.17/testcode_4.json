{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf add_response_entry_n is called with header == NULL and header_len > 0 (or with header pointing to an object smaller than header_len), the call memchr(header, '\\r', header_len) will read through an invalid pointer and access memory beyond the bounds of the referenced object (NULL dereference or buffer over-read). This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n#include <time.h>\n\n/* Forward declarations to allow this file to compile standalone */\nstruct MHD_Response;\nenum MHD_ValueKind;\nextern bool MHD_add_response_entry_no_check_(struct MHD_Response *response,\n                                             enum MHD_ValueKind kind,\n                                             const char *header,\n                                             size_t header_len,\n                                             const char *content,\n                                             size_t content_len);\n\nstatic void\nlog_probe(const char *stage,\n          const void *response_ptr,\n          const void *header,\n          size_t header_len,\n          const void *content,\n          size_t content_len,\n          const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/2189.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  time_t t = time(NULL);\n  if (note == NULL)\n    note = \"\";\n\n  /* Record timestamp, stage and key pointer/length values for reproduction */\n  fprintf(f, \"[%ld] %s: response=%p header=%p header_len=%zu content=%p content_len=%zu note=%s\\n\",\n          (long)t, stage, response_ptr, header, header_len, content, content_len, note);\n  fclose(f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  /* Log entry with initial state */\n  log_probe(\"entry\", (const void *)response, header, header_len, content, content_len, \"start\");\n\n  if (NULL == response)\n  {\n    log_probe(\"early_return\", (const void *)response, header, header_len, content, content_len, \"response is NULL\");\n    return false;\n  }\n  if (0 == header_len)\n  {\n    log_probe(\"early_return\", (const void *)response, header, header_len, content, content_len, \"header_len == 0\");\n    return false;\n  }\n  if (0 == content_len)\n  {\n    log_probe(\"early_return\", (const void *)response, header, header_len, content, content_len, \"content_len == 0\");\n    return false;\n  }\n\n  /* Log just before each memchr invocation so callers can see pointer/length\n     state that may reproduce out-of-bounds accesses (e.g. header == NULL && header_len > 0). */\n  log_probe(\"before_memchr_header_tab\", (const void *)response, header, header_len, content, content_len, \"checking for '\\t' in header\");\n  if (NULL != memchr (header, '\\t', header_len))\n  {\n    log_probe(\"match_memchr_header_tab\", (const void *)response, header, header_len, content, content_len, \"found '\\t' in header\");\n    return false;\n  }\n\n  log_probe(\"before_memchr_header_space\", (const void *)response, header, header_len, content, content_len, \"checking for ' ' in header\");\n  if (NULL != memchr (header, ' ', header_len))\n  {\n    log_probe(\"match_memchr_header_space\", (const void *)response, header, header_len, content, content_len, \"found ' ' in header\");\n    return false;\n  }\n\n  log_probe(\"before_memchr_header_cr\", (const void *)response, header, header_len, content, content_len, \"checking for '\\r' in header\");\n  if (NULL != memchr (header, '\\r', header_len))\n  {\n    log_probe(\"match_memchr_header_cr\", (const void *)response, header, header_len, content, content_len, \"found '\\r' in header\");\n    return false;\n  }\n\n  log_probe(\"before_memchr_header_lf\", (const void *)response, header, header_len, content, content_len, \"checking for '\\n' in header\");\n  if (NULL != memchr (header, '\\n', header_len))\n  {\n    log_probe(\"match_memchr_header_lf\", (const void *)response, header, header_len, content, content_len, \"found '\\n' in header\");\n    return false;\n  }\n\n  log_probe(\"before_memchr_content_cr\", (const void *)response, header, header_len, content, content_len, \"checking for '\\r' in content\");\n  if (NULL != memchr (content, '\\r', content_len))\n  {\n    log_probe(\"match_memchr_content_cr\", (const void *)response, header, header_len, content, content_len, \"found '\\r' in content\");\n    return false;\n  }\n\n  log_probe(\"before_memchr_content_lf\", (const void *)response, header, header_len, content, content_len, \"checking for '\\n' in content\");\n  if (NULL != memchr (content, '\\n', content_len))\n  {\n    log_probe(\"match_memchr_content_lf\", (const void *)response, header, header_len, content, content_len, \"found '\\n' in content\");\n    return false;\n  }\n\n  log_probe(\"before_add_no_check\", (const void *)response, header, header_len, content, content_len, \"about to call MHD_add_response_entry_no_check_\");\n  bool result = MHD_add_response_entry_no_check_(response, kind, header, header_len, content, content_len);\n  log_probe(\"after_add_no_check\", (const void *)response, header, header_len, content, content_len, result ? \"added\" : \"failed to add\");\n\n  return result;\n}\n"
}