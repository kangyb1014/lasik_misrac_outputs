{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'buf' is used only for read-only operations (memcmp, memchr), but it's declared as char * and initialized with (char *)&pp[1] instead of a pointer to a const-qualified type. It should be declared as const char *buf = (const char *)&pp[1];\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_boundary code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2303.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of find_boundary as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of find_boundary:\n```c\nstatic int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  const char *dash;\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    if (pp->buffer_pos == pp->buffer_size)\n      pp->state = PP_Error;     /* out of memory */\n    /* ++(*ioffptr); */\n    return MHD_NO;              /* not enough data */\n  }\n  if ( (0 != memcmp (\"--\",\n                     buf,\n                     2)) ||\n       (0 != memcmp (&buf[2],\n                     boundary,\n                     blen)))\n  {\n    if (pp->state != PP_Init)\n    {\n      /* garbage not allowed */\n      pp->state = PP_Error;\n    }\n    else\n    {\n      /* skip over garbage (RFC 2046, 5.1.1) */\n      dash = memchr (buf,\n                     '-',\n                     pp->buffer_pos);\n      if (NULL == dash)\n        (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n      else if (dash == buf)\n        (*ioffptr)++;                         /* at least skip one byte */\n      else\n        (*ioffptr) += (size_t) (dash - buf);  /* skip to first possible boundary */\n    }\n    return MHD_NO;                            /* expected boundary */\n  }\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified find_boundary code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe helper: append formatted log to /tmp/logs/2303.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2303.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Dump a small portion of the buffer for inspection (hex, up to max_len bytes) */\nstatic void probe_hexdump(FILE *f, const char *label, const char *buf, size_t buf_len)\n{\n    size_t i, max = buf_len;\n    if (max > 64U)\n        max = 64U;\n    fprintf(f, \"%s: \", label);\n    for (i = 0; i < max; ++i)\n        fprintf(f, \"%02x\", (unsigned char) buf[i]);\n    if (buf_len > max)\n        fprintf(f, \"...\");\n    fprintf(f, \"\\n\");\n}\n\nstatic void probe_state(const char *phase,\n                        struct MHD_PostProcessor *pp,\n                        const char *buf,\n                        const char *boundary,\n                        size_t blen,\n                        size_t ioff)\n{\n    FILE *f = fopen(\"/tmp/logs/2303.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    fprintf(f, \"--- probe: %s ---\\n\", phase);\n    fprintf(f, \"pp=%p, state=%d, buffer_pos=%zu, buffer_size=%zu, blen=%zu, ioff=%zu\\n\",\n            (void *) pp,\n            (int) pp->state,\n            (size_t) pp->buffer_pos,\n            (size_t) pp->buffer_size,\n            blen,\n            ioff);\n\n    probe_hexdump(f, \"buf (hex)\", buf, (size_t) pp->buffer_pos);\n\n    if (boundary != NULL)\n        probe_hexdump(f, \"boundary (hex)\", boundary, blen);\n\n    fprintf(f, \"--- end probe ---\\n\");\n    fclose(f);\n}\n\nstatic int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  /* NOTE: this deliberately preserves the original (non-const) declaration for\n     'buf' so other agents can reproduce the reported Rule 8.13 scenario. */\n  char *buf = (char *) &pp[1];\n  const char *dash;\n\n  /* Log initial state and a small dump of the buffer */\n  probe_state(\"entry\", pp, buf, boundary, blen, *ioffptr);\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    probe_logf(\"insufficient data: buffer_pos=%zu, required=%zu\", pp->buffer_pos, 2 + blen);\n    if (pp->buffer_pos == pp->buffer_size)\n      pp->state = PP_Error;     /* out of memory */\n    /* ++(*ioffptr); */\n    probe_state(\"return_not_enough_data\", pp, buf, boundary, blen, *ioffptr);\n    return MHD_NO;              /* not enough data */\n  }\n\n  /* Evaluate memcmp results once so we can log them and keep behavior unchanged */\n  int cmp1 = memcmp(\"--\",\n                     buf,\n                     2);\n  int cmp2 = memcmp(&buf[2],\n                    boundary,\n                    blen);\n\n  probe_logf(\"memcmp results: cmp1=%d (\"\"--\"\" vs buf[0..1]), cmp2=%d (buf[2..] vs boundary)\", cmp1, cmp2);\n\n  if ( (0 != cmp1) ||\n       (0 != cmp2))\n  {\n    probe_logf(\"boundary mismatch detected (cmp1=%d, cmp2=%d)\", cmp1, cmp2);\n\n    if (pp->state != PP_Init)\n    {\n      /* garbage not allowed */\n      pp->state = PP_Error;\n      probe_state(\"set_error_non_init\", pp, buf, boundary, blen, *ioffptr);\n    }\n    else\n    {\n      /* skip over garbage (RFC 2046, 5.1.1) */\n      dash = memchr (buf,\n                     '-',\n                     pp->buffer_pos);\n      if (NULL == dash)\n      {\n        (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n        probe_logf(\"no dash found: skipping entire buffer (+%zu)\", pp->buffer_pos);\n      }\n      else if (dash == buf)\n      {\n        (*ioffptr)++;                         /* at least skip one byte */\n        probe_logf(\"dash at buf start: skipping 1 byte\");\n      }\n      else\n      {\n        (*ioffptr) += (size_t) (dash - buf);  /* skip to first possible boundary */\n        probe_logf(\"dash found at offset %td: skipping to that offset\", (ptrdiff_t) (dash - buf));\n      }\n      probe_state(\"after_skip_garbage\", pp, buf, boundary, blen, *ioffptr);\n    }\n    probe_logf(\"return_expected_boundary\");\n    return MHD_NO;                            /* expected boundary */\n  }\n\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  probe_logf(\"boundary matched: advancing ioff by %zu to %zu\", 2 + blen, *ioffptr);\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n\n  probe_state(\"success_boundary_found\", pp, buf, boundary, blen, *ioffptr);\n  return MHD_YES;\n}\n"
}