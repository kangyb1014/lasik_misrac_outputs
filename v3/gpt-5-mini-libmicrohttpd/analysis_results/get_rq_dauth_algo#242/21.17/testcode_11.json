{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str, algo_param->value.len, _MHD_SHA512_256_TOKEN) can violate Rule 21.17 if the helper implementation accesses the strings via standard <string.h> routines without respecting the supplied length. For example, if MHD_str_equal_caseless_quoted_s_bin_n calls strlen() or strncasecmp() on algo_param->value.str (which may not be NUL-terminated) or uses memcmp() with the length of the token rather than algo_param->value.len, the routine could read past algo_param->value.str + algo_param->value.len and thus access out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2429.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/*\n * Probe wrappers and logging helpers to capture control flow and state\n * for potential out-of-bounds accesses when helper functions operate on\n * potentially non-NUL-terminated buffers.\n *\n * Logs are appended to: /tmp/logs/2429.txt\n */\n\n/* Forward declarations of the original helper functions (external)\n * We declare them so our probes can call the original implementations.\n * The exact types are assumed to be similar to these; they match the\n * usage in the original get_rq_dauth_algo implementation:\n *   quoted version: (const char *s, size_t len, const char *token)\n *   non-quoted version: (const char *token, const char *s, size_t len)\n */\nextern int MHD_str_equal_caseless_quoted_s_bin_n(const char *s, size_t len, const char *token);\nextern int MHD_str_equal_caseless_s_bin_n_(const char *token, const char *s, size_t len);\n\nstatic void log_prefix(void)\n{\n    FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"--- get_rq_dauth_algo probe run ---\\n\");\n        fclose(f);\n    }\n}\n\nstatic void log_state_initial(const void *algo_param_ptr, const char *s, size_t len, int quoted)\n{\n    FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"get_rq_dauth_algo: algo_param=%p value.str=%p value.len=%zu quoted=%d\\n\",\n            algo_param_ptr, (const void *)s, len, quoted);\n\n    /* Print up to a reasonable cap of bytes from the provided buffer -- do not read past len. */\n    if (s != NULL && len > 0) {\n        size_t cap = (len > 1024) ? 1024 : len;\n        fprintf(f, \"value.str (first %zu bytes): \\\"\", cap);\n        fwrite(s, 1, cap, f);\n        if (cap < len) fprintf(f, \"...\");\n        fprintf(f, \"\\\"\\n\");\n    }\n    fclose(f);\n}\n\nstatic void log_probe_call(const char *where, const char *token_name, const char *token_literal,\n                           const char *s, size_t len)\n{\n    FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"probe: %s called with token_name=%s token_literal=\\\"%s\\\" s=%p len=%zu\\n\",\n            where, token_name, token_literal ? token_literal : \"(null)\", (const void *)s, len);\n    if (s && len > 0) {\n        size_t cap = (len > 256) ? 256 : len; /* show a shorter prefix here */\n        fprintf(f, \"probe: s (prefix %zu): \\\"\", cap);\n        fwrite(s, 1, cap, f);\n        if (cap < len) fprintf(f, \"...\");\n        fprintf(f, \"\\\"\\n\");\n    }\n    fclose(f);\n}\n\nstatic void log_probe_result(const char *where, const char *token_name, int result)\n{\n    FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"probe: %s token_name=%s result=%d\\n\", where, token_name, result);\n    fclose(f);\n}\n\n/* Probe wrapper for the quoted variant: logs then calls the real helper. */\nstatic int probe_MHD_str_equal_caseless_quoted_s_bin_n(const char *s, size_t len,\n                                                      const char *token, const char *token_name)\n{\n    log_probe_call(\"MHD_str_equal_caseless_quoted_s_bin_n\", token_name, token, s, len);\n    int res = MHD_str_equal_caseless_quoted_s_bin_n(s, len, token);\n    log_probe_result(\"MHD_str_equal_caseless_quoted_s_bin_n\", token_name, res);\n    return res;\n}\n\n/* Probe wrapper for the non-quoted variant: token first in argument order. */\nstatic int probe_MHD_str_equal_caseless_s_bin_n_(const char *token, const char *s,\n                                                 size_t len, const char *token_name)\n{\n    log_probe_call(\"MHD_str_equal_caseless_s_bin_n_\", token_name, token, s, len);\n    int res = MHD_str_equal_caseless_s_bin_n_(token, s, len);\n    log_probe_result(\"MHD_str_equal_caseless_s_bin_n_\", token_name, res);\n    return res;\n}\n\n/* Modified get_rq_dauth_algo with probes inserted. Original logic preserved. */\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Log function entry and initial state */\n  log_prefix();\n  if (algo_param == NULL) {\n    FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"get_rq_dauth_algo: algo_param is NULL -> default MD5 returned\\n\");\n      fclose(f);\n    }\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Preserve original assumption */\n  }\n\n  log_state_initial(algo_param, algo_param->value.str, algo_param->value.len, algo_param->quoted);\n\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (probe_MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str, \\\n                                                   algo_param->value.len, \\\n                                                   _MHD_MD5_TOKEN,\n                                                   \"_MHD_MD5_TOKEN\"))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (probe_MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str, \\\n                                                   algo_param->value.len, \\\n                                                   _MHD_SHA256_TOKEN,\n                                                   \"_MHD_SHA256_TOKEN\"))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (probe_MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str, \\\n                                                   algo_param->value.len, \\\n                                                   _MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                                   \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\"))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (probe_MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str, \\\n                                                   algo_param->value.len, \\\n                                                   _MHD_SHA512_256_TOKEN \\\n                                                   _MHD_SESS_TOKEN,\n                                                   \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\"))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (probe_MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str, \\\n                                                   algo_param->value.len, \\\n                                                   _MHD_SHA256_TOKEN \\\n                                                   _MHD_SESS_TOKEN,\n                                                   \"_MHD_SHA256_TOKEN _MHD_SESS_TOKEN\"))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (probe_MHD_str_equal_caseless_quoted_s_bin_n(algo_param->value.str, \\\n                                                   algo_param->value.len, \\\n                                                   _MHD_SHA512_256_TOKEN,\n                                                   \"_MHD_SHA512_256_TOKEN\"))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (probe_MHD_str_equal_caseless_s_bin_n_(_MHD_MD5_TOKEN, \\\n                                           algo_param->value.str, \\\n                                           algo_param->value.len,\n                                           \"_MHD_MD5_TOKEN\"))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (probe_MHD_str_equal_caseless_s_bin_n_(_MHD_SHA256_TOKEN, \\\n                                           algo_param->value.str, \\\n                                           algo_param->value.len,\n                                           \"_MHD_SHA256_TOKEN\"))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (probe_MHD_str_equal_caseless_s_bin_n_(_MHD_SHA512_256_TOKEN, \\\n                                           algo_param->value.str, \\\n                                           algo_param->value.len,\n                                           \"_MHD_SHA512_256_TOKEN\"))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (probe_MHD_str_equal_caseless_s_bin_n_(_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                           algo_param->value.str, \\\n                                           algo_param->value.len,\n                                           \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\"))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (probe_MHD_str_equal_caseless_s_bin_n_(_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                           algo_param->value.str, \\\n                                           algo_param->value.len,\n                                           \"_MHD_SHA256_TOKEN _MHD_SESS_TOKEN\"))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (probe_MHD_str_equal_caseless_s_bin_n_(_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                           algo_param->value.str, \\\n                                           algo_param->value.len,\n                                           \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\"))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}