{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the helper MHD_str_equal_caseless_s_bin_n_ is implemented using string.h functions (for example calling strlen() on the token and then memcmp() with that length) and does not ensure the compare length is bounded by algo_param->value.len, then when _MHD_SHA512_256_TOKEN has a length greater than algo_param->value.len the underlying memcmp/read will access bytes beyond algo_param->value.str. Although algo_param->value.str is checked for NULL earlier, an out\u2011of\u2011bounds read is still possible in that implementation, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2429.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append a log entry describing the comparison about to be\n   performed and its result. Logs are appended to /tmp/logs/2429.txt. */\nstatic void\nprobe_log_compare(const char *stage_label,\n                  const struct MHD_RqDAuthParam *const algo_param,\n                  const char *token,\n                  int match)\n{\n  FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging; do not change program behavior */\n\n  /* Print a concise header for this probe */\n  fprintf(f, \"[%s] algo_param=%p, value.str=%p, value.len=%zu, token=\\\"%s\\\", token_len=%zu, match=%d\\n\",\n          stage_label,\n          (void *)algo_param,\n          (void *)algo_param->value.str,\n          (size_t)algo_param->value.len,\n          token ? token : \"(null)\",\n          token ? strlen(token) : 0U,\n          match);\n\n  /* Print up to the first 64 bytes of value.str in hex (bounded by value.len)\n     to avoid any out-of-bounds read. */\n  if (algo_param->value.str != NULL && algo_param->value.len > 0U)\n  {\n    size_t i;\n    size_t to_print = algo_param->value.len < 64U ? algo_param->value.len : 64U;\n    fprintf(f, \"  value.str[0..%zu] (hex, up to 64 bytes): \", to_print ? to_print - 1U : 0U);\n    for (i = 0U; i < to_print; ++i)\n    {\n      fprintf(f, \"%02x\", (unsigned int)(unsigned char)algo_param->value.str[i]);\n      if (i + 1U < to_print)\n        fprintf(f, \",\");\n    }\n    if (algo_param->value.len > to_print)\n      fprintf(f, \" ... (total %zu bytes)\", algo_param->value.len);\n    fprintf(f, \"\\n\");\n  }\n\n  fclose(f);\n}\n\n/* Additional simple probe to log when value.str is NULL (entry case) */\nstatic void\nprobe_log_null_value(const struct MHD_RqDAuthParam *const algo_param)\n{\n  FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"[ENTRY] algo_param=%p, value.str=NULL -> defaulting to MD5\\n\",\n          (void *)algo_param);\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n  {\n    /* Log the null case so callers can reproduce the scenario where\n       value.str is checked and defaulting occurs. */\n    probe_log_null_value(algo_param);\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    {\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                         algo_param->value.len,\n                                                         _MHD_MD5_TOKEN);\n      probe_log_compare(\"quoted-MD5\", algo_param, _MHD_MD5_TOKEN, match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n    {\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                         algo_param->value.len,\n                                                         _MHD_SHA256_TOKEN);\n      probe_log_compare(\"quoted-SHA256\", algo_param, _MHD_SHA256_TOKEN, match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n    {\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                         algo_param->value.len,\n                                                         _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n      probe_log_compare(\"quoted-SHA512_256_via_MD5_SESS\", algo_param, _MHD_MD5_TOKEN _MHD_SESS_TOKEN, match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n    {\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                         algo_param->value.len,\n                                                         _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN);\n      probe_log_compare(\"quoted-SHA512_256_SESS\", algo_param, _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, match);\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    }\n    {\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                         algo_param->value.len,\n                                                         _MHD_SHA256_TOKEN _MHD_SESS_TOKEN);\n      probe_log_compare(\"quoted-SHA256_SESS\", algo_param, _MHD_SHA256_TOKEN _MHD_SESS_TOKEN, match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n    {\n      int match = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                         algo_param->value.len,\n                                                         _MHD_SHA512_256_TOKEN);\n      probe_log_compare(\"quoted-SHA512_256\", algo_param, _MHD_SHA512_256_TOKEN, match);\n      if (match)\n        return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n\n    /* No known algorithm has been detected */\n    probe_log_compare(\"quoted-NONE\", algo_param, \"(none)\", 0);\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  {\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    probe_log_compare(\"bare-MD5\", algo_param, _MHD_MD5_TOKEN, match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n  }\n  {\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    probe_log_compare(\"bare-SHA256\", algo_param, _MHD_SHA256_TOKEN, match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  }\n  {\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    probe_log_compare(\"bare-SHA512_256\", algo_param, _MHD_SHA512_256_TOKEN, match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n  }\n\n  /* Algorithms below are not supported by MHD for authentication */\n  {\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    probe_log_compare(\"bare-MD5_SESS\", algo_param, _MHD_MD5_TOKEN _MHD_SESS_TOKEN, match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  }\n  {\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    probe_log_compare(\"bare-SHA256_SESS\", algo_param, _MHD_SHA256_TOKEN _MHD_SESS_TOKEN, match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  }\n  {\n    int match = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                                 algo_param->value.str,\n                                                 algo_param->value.len);\n    probe_log_compare(\"bare-SHA512_256_SESS\", algo_param, _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, match);\n    if (match)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n  }\n\n  /* No known algorithm has been detected */\n  probe_log_compare(\"bare-NONE\", algo_param, \"(none)\", 0);\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}