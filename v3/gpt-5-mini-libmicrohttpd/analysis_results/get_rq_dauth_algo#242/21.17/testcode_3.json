{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the macro MHD_str_equal_caseless_s_bin_n_ expands to a routine that invokes a string/byte compare (e.g. memcmp/strncasecmp) using the provided length parameter directly, then passing algo_param->value.len as the compare length can cause the routine to read past the end of the concatenated token literal (_MHD_MD5_TOKEN _MHD_SESS_TOKEN) when algo_param->value.len is larger than the token length. In that case the token buffer would be accessed out-of-bounds and Rule 21.17 would be violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2429.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helpers: write trace information to /tmp/logs/2429.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2429.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void mhd_probe_log_entry(const struct MHD_RqDAuthParam *const algo_param)\n{\n    if (NULL == algo_param)\n    {\n        mhd_probe_log(\"get_rq_dauth_algo: algo_param == NULL\");\n        return;\n    }\n\n    mhd_probe_log(\"get_rq_dauth_algo: entry: algo_param=%p, value.str=%p, value.len=%zu, quoted=%d\",\n                  (const void *)algo_param,\n                  (const void *)algo_param->value.str,\n                  (size_t)algo_param->value.len,\n                  (int)algo_param->quoted);\n}\n\nstatic void mhd_probe_log_compare(const char *stage, const char *token_expr, const char *token, size_t algo_len, int quoted)\n{\n    size_t token_len = 0;\n    if (token)\n        token_len = strlen(token);\n\n    mhd_probe_log(\"compare: %s: token_expr='%s', token_ptr=%p, token_len=%zu, algo_len=%zu, quoted=%d\",\n                  stage, token_expr ? token_expr : \"<expr>\", (const void *)token, token_len, algo_len, quoted);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Log entry state */\n  mhd_probe_log_entry(algo_param);\n\n  if (NULL == algo_param->value.str)\n  {\n    mhd_probe_log(\"get_rq_dauth_algo: value.str == NULL -> default MD5\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    mhd_probe_log(\"branch: quoted == true\");\n\n    mhd_probe_log_compare(\"quoted:check1\", \"_MHD_MD5_TOKEN\", _MHD_MD5_TOKEN, algo_param->value.len, 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n    mhd_probe_log_compare(\"quoted:check2\", \"_MHD_SHA256_TOKEN\", _MHD_SHA256_TOKEN, algo_param->value.len, 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n    mhd_probe_log_compare(\"quoted:check3\", \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\", _MHD_MD5_TOKEN _MHD_SESS_TOKEN, algo_param->value.len, 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n    mhd_probe_log_compare(\"quoted:check4\", \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\", _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, algo_param->value.len, 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n    mhd_probe_log_compare(\"quoted:check5\", \"_MHD_SHA256_TOKEN _MHD_SESS_TOKEN\", _MHD_SHA256_TOKEN _MHD_SESS_TOKEN, algo_param->value.len, 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA256_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n\n    mhd_probe_log_compare(\"quoted:check6\", \"_MHD_SHA512_256_TOKEN\", _MHD_SHA512_256_TOKEN, algo_param->value.len, 1);\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    mhd_probe_log(\"quoted: no known algorithm detected -> INVALID\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  mhd_probe_log(\"branch: quoted == false\");\n\n  mhd_probe_log_compare(\"unquoted:check1\", \"_MHD_MD5_TOKEN\", _MHD_MD5_TOKEN, algo_param->value.len, 0);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n  mhd_probe_log_compare(\"unquoted:check2\", \"_MHD_SHA256_TOKEN\", _MHD_SHA256_TOKEN, algo_param->value.len, 0);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n  mhd_probe_log_compare(\"unquoted:check3\", \"_MHD_SHA512_256_TOKEN\", _MHD_SHA512_256_TOKEN, algo_param->value.len, 0);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  mhd_probe_log_compare(\"unquoted:check4\", \"_MHD_MD5_TOKEN _MHD_SESS_TOKEN\", _MHD_MD5_TOKEN _MHD_SESS_TOKEN, algo_param->value.len, 0);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n  mhd_probe_log_compare(\"unquoted:check5\", \"_MHD_SHA256_TOKEN _MHD_SESS_TOKEN\", _MHD_SHA256_TOKEN _MHD_SESS_TOKEN, algo_param->value.len, 0);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n\n  mhd_probe_log_compare(\"unquoted:check6\", \"_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN\", _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, algo_param->value.len, 0);\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  mhd_probe_log(\"unquoted: no known algorithm detected -> INVALID\");\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}