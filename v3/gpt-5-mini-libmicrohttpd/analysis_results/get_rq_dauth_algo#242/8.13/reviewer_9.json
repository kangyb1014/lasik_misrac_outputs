{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes algo_param->value.str into read-only string-comparison helpers while algo_param is declared as const struct MHD_RqDAuthParam *const. If the struct member is declared as char *value.str (i.e. pointer to non-const char), then due to the const-qualified struct the expression has type char * const (a const pointer to non-const char). The pointer still points to a non-const target even though it is only read here, so the pointer target should be const-qualified (const char *) to satisfy MISRA C 2023 Rule 8.13. If, however, value.str is already declared const char * then there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[ENTRY] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 value.str=(nil)\n[NULL_VALUE_STR -> default MD5] algo_param=0x7fff44cf3d30\n  quoted=0 len=0 valu\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s reasoning is correct in principle but it is conditional on the declaration of the struct member. The function parameter is declared as\n  const struct MHD_RqDAuthParam *const algo_param\nwhich makes algo_param itself const and the struct object it points to const. However, that does not change the declared type of a member pointer inside the struct. If the struct contains a member declared as\n  char *str;\nthen the expression algo_param->value.str has type char * const (a const pointer to non-const char). Because the code only reads the pointed-to characters, MISRA C:2023 Rule 8.13 (\u201cA pointer should point to a const-qualified type whenever possible\u201d) indicates that the pointed-to type should be const-qualified (i.e. the member should be declared as const char *). In that case Agent A\u2019s report of a violation is correct.\n\nIf, however, the struct already declares value.str as const char * (or otherwise points to a const-qualified target), there is no violation. The source snippet alone does not show the struct definition, so you cannot determine definitively from the snippet whether the code violates 8.13 \u2014 only that a violation will occur if value.str is declared as char * and is only used for read access. Recommended fixes: change the struct member to const char * (preferred), or adjust the called helpers\u2019 prototypes to accept the appropriate qualifiers, rather than performing casts.\n"
}