{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation when the member algo_param->value.str is of a non-const pointer type (for example declared as char *str). The code only reads from that pointer (NULL check and passing it to comparison functions) so the pointer should point to a const-qualified type (e.g. const char *str). Leaving it as a non-const pointer violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append logs to /tmp/logs/2423.txt describing the\n   control path and state of algo_param and its value.str.  This helper\n   preserves program logic and only observes state. */\nstatic void\n_mhd_probe_log_state(const struct MHD_RqDAuthParam *const algo_param,\n                      const char *stage,\n                      int cmp_result)\n{\n  FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n  if (NULL == f)\n  {\n    return; /* best-effort logging only */\n  }\n\n  fprintf(f, \"Stage: %s\\n\", stage);\n  fprintf(f, \"  algo_param ptr: %p\\n\", (void *)algo_param);\n  if (NULL == algo_param)\n  {\n    fprintf(f, \"  algo_param is NULL\\n\\n\");\n    fclose(f);\n    return;\n  }\n\n  /* Log basic fields */\n  fprintf(f, \"  quoted: %d\\n\", (int)algo_param->quoted);\n  fprintf(f, \"  value.len: %zu\\n\", (size_t)algo_param->value.len);\n  fprintf(f, \"  value.str ptr: %p\\n\", (void *)algo_param->value.str);\n  fprintf(f, \"  last comparison result: %d\\n\", (int)cmp_result);\n\n  /* If the pointer is not NULL, log up to the first 64 bytes (or value.len)\n     in hex and printable chars to help reproduce the violation scenario. */\n  if (NULL != algo_param->value.str && algo_param->value.len > 0)\n  {\n    size_t i, max = algo_param->value.len;\n    if (max > 64U) max = 64U;\n    fprintf(f, \"  value.str (first %zu bytes):\\n    hex:\", max);\n    for (i = 0U; i < max; ++i)\n      fprintf(f, \" %02X\", (unsigned char)algo_param->value.str[i]);\n    fprintf(f, \"\\n    ascii:\");\n    for (i = 0U; i < max; ++i)\n    {\n      unsigned char c = (unsigned char)algo_param->value.str[i];\n      if (c >= 0x20U && c <= 0x7EU)\n        fprintf(f, \"%c\", c);\n      else\n        fprintf(f, \".\");\n    }\n    fprintf(f, \"\\n\");\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Log entry to function */\n  _mhd_probe_log_state(algo_param, \"entry\", 0);\n\n  if (NULL == algo_param->value.str)\n  {\n    _mhd_probe_log_state(algo_param, \"null_value_str\", 0);\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    int res;\n\n    res = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_MD5_TOKEN);\n    _mhd_probe_log_state(algo_param, \"quoted_check_md5\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n    res = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_SHA256_TOKEN);\n    _mhd_probe_log_state(algo_param, \"quoted_check_sha256\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n    res = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n    _mhd_probe_log_state(algo_param, \"quoted_check_md5_sess\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n    res = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_SHA512_256_TOKEN\n                                                 _MHD_SESS_TOKEN);\n    _mhd_probe_log_state(algo_param, \"quoted_check_sha512_256_sess\", res);\n\n    /* Algorithms below are not supported by MHD for authentication */\n\n    _mhd_probe_log_state(algo_param, \"quoted_after_sha512_256_sess\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n    res = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_SHA256_TOKEN\n                                                 _MHD_SESS_TOKEN);\n    _mhd_probe_log_state(algo_param, \"quoted_check_sha256_sess\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n\n    res = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                 algo_param->value.len,\n                                                 _MHD_SHA512_256_TOKEN);\n    _mhd_probe_log_state(algo_param, \"quoted_check_sha512_256\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    _mhd_probe_log_state(algo_param, \"quoted_no_match\", 0);\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  {\n    int res;\n\n    res = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    _mhd_probe_log_state(algo_param, \"unquoted_check_md5\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n    res = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    _mhd_probe_log_state(algo_param, \"unquoted_check_sha256\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n    res = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    _mhd_probe_log_state(algo_param, \"unquoted_check_sha512_256\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n    /* Algorithms below are not supported by MHD for authentication */\n\n    res = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    _mhd_probe_log_state(algo_param, \"unquoted_check_md5_sess\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n    res = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    _mhd_probe_log_state(algo_param, \"unquoted_check_sha256_sess\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n\n    res = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                           algo_param->value.str,\n                                           algo_param->value.len);\n    _mhd_probe_log_state(algo_param, \"unquoted_check_sha512_256_sess\", res);\n    if (res)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    _mhd_probe_log_state(algo_param, \"unquoted_no_match\", 0);\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n}\n"
}