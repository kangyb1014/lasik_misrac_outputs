{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe rule is violated if the member algo_param->value.str is declared as a non-const pointer (e.g. char *). In that case the code is passing a pointer that points to a non-const char array to string-comparison routines even though the data is not being modified \u2014 Rule 8.13 requires such pointers to point to const-qualified types when possible. If value.str is declared as const char * (or the comparison function parameter expects a const char *), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable state to /tmp/logs/2423.txt */\nstatic void\n_dauth_log_probe (const struct MHD_RqDAuthParam *const algo_param,\n                  const char *event,\n                  const char *detail)\n{\n  FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log basic state */\n  fprintf (f, \"[dauth] event=%s detail=%s ptr=%p quoted=%d len=%lu\\n\",\n           event ? event : \"(null)\",\n           detail ? detail : \"(none)\",\n           (void *) algo_param,\n           (int) (algo_param ? algo_param->quoted : 0),\n           (unsigned long) (algo_param ? algo_param->value.len : 0UL));\n\n  /* Safely print up to 256 bytes of the value string (may be not NUL-terminated) */\n  if (algo_param && algo_param->value.str)\n    {\n      size_t to_copy = algo_param->value.len;\n      if (to_copy > 256U)\n        to_copy = 256U;\n      char buf[257];\n      /* Copy as bytes; ensure NUL termination */\n      memcpy (buf, algo_param->value.str, to_copy);\n      buf[to_copy] = '\\0';\n      /* Print as raw string and also hex for non-printables */\n      fprintf (f, \"[dauth] value_preview=(len=%lu) '%s'\\n\",\n               (unsigned long) algo_param->value.len, buf);\n      fprintf (f, \"[dauth] value_hex=\");\n      for (size_t i = 0; i < to_copy; ++i)\n        fprintf (f, \"%02x\", (unsigned char) buf[i]);\n      fprintf (f, \"\\n\");\n    }\n  else\n    {\n      fprintf (f, \"[dauth] value_preview=(null)\\n\");\n    }\n\n  fclose (f);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Entry probe */\n  _dauth_log_probe (algo_param, \"entry\", \"start get_rq_dauth_algo\");\n\n  if (NULL == algo_param->value.str)\n    {\n      _dauth_log_probe (algo_param, \"null-value\", \"default to MD5\");\n      return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n    }\n\n  if (algo_param->quoted)\n    {\n      _dauth_log_probe (algo_param, \"branch\", \"quoted path\");\n      _dauth_log_probe (algo_param, \"compare\", \"_MHD_MD5_TOKEN (quoted)\");\n      if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                                 algo_param->value.len, \\\n                                                 _MHD_MD5_TOKEN))\n        {\n          _dauth_log_probe (algo_param, \"match\", \"MD5 (quoted)\");\n          return MHD_DIGEST_AUTH_ALGO3_MD5;\n        }\n      _dauth_log_probe (algo_param, \"compare\", \"_MHD_SHA256_TOKEN (quoted)\");\n      if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                                 algo_param->value.len, \\\n                                                 _MHD_SHA256_TOKEN))\n        {\n          _dauth_log_probe (algo_param, \"match\", \"SHA256 (quoted)\");\n          return MHD_DIGEST_AUTH_ALGO3_SHA256;\n        }\n      _dauth_log_probe (algo_param, \"compare\", \"_MHD_MD5_TOKEN + _MHD_SESS_TOKEN (quoted)\");\n      if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                                 algo_param->value.len, \\\n                                                 _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n        {\n          _dauth_log_probe (algo_param, \"match\", \"SHA512_256 (MD5+SESS) (quoted)\");\n          return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n        }\n      _dauth_log_probe (algo_param, \"compare\", \"_MHD_SHA512_256_TOKEN + _MHD_SESS_TOKEN (quoted)\");\n      if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                                 algo_param->value.len, \\\n                                                 _MHD_SHA512_256_TOKEN \\\n                                                 _MHD_SESS_TOKEN))\n        {\n          /* Algorithms below are not supported by MHD for authentication */\n          _dauth_log_probe (algo_param, \"match\", \"MD5_SESSION (quoted) - unsupported auth\\n\");\n          return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n        }\n      _dauth_log_probe (algo_param, \"compare\", \"_MHD_SHA256_TOKEN + _MHD_SESS_TOKEN (quoted)\");\n      if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                                 algo_param->value.len, \\\n                                                 _MHD_SHA256_TOKEN \\\n                                                 _MHD_SESS_TOKEN))\n        {\n          _dauth_log_probe (algo_param, \"match\", \"SHA256_SESSION (quoted)\");\n          return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n        }\n      _dauth_log_probe (algo_param, \"compare\", \"_MHD_SHA512_256_TOKEN (quoted)\");\n      if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                                 algo_param->value.len, \\\n                                                 _MHD_SHA512_256_TOKEN))\n        {\n          _dauth_log_probe (algo_param, \"match\", \"SHA512_256_SESSION (quoted)\");\n          return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n        }\n\n      /* No known algorithm has been detected */\n      _dauth_log_probe (algo_param, \"nomatch\", \"quoted path - invalid algorithm\");\n      return MHD_DIGEST_AUTH_ALGO3_INVALID;\n    }\n\n  /* The algorithm value is not quoted */\n  _dauth_log_probe (algo_param, \"branch\", \"unquoted path\");\n  _dauth_log_probe (algo_param, \"compare\", \"_MHD_MD5_TOKEN (unquoted)\");\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    {\n      _dauth_log_probe (algo_param, \"match\", \"MD5 (unquoted)\");\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n  _dauth_log_probe (algo_param, \"compare\", \"_MHD_SHA256_TOKEN (unquoted)\");\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    {\n      _dauth_log_probe (algo_param, \"match\", \"SHA256 (unquoted)\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n  _dauth_log_probe (algo_param, \"compare\", \"_MHD_SHA512_256_TOKEN (unquoted)\");\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    {\n      _dauth_log_probe (algo_param, \"match\", \"SHA512_256 (unquoted)\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n\n  /* Algorithms below are not supported by MHD for authentication */\n  _dauth_log_probe (algo_param, \"compare\", \"_MHD_MD5_TOKEN + _MHD_SESS_TOKEN (unquoted)\");\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    {\n      _dauth_log_probe (algo_param, \"match\", \"MD5_SESSION (unquoted)\");\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    }\n  _dauth_log_probe (algo_param, \"compare\", \"_MHD_SHA256_TOKEN + _MHD_SESS_TOKEN (unquoted)\");\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    {\n      _dauth_log_probe (algo_param, \"match\", \"SHA256_SESSION (unquoted)\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n  _dauth_log_probe (algo_param, \"compare\", \"_MHD_SHA512_256_TOKEN + _MHD_SESS_TOKEN (unquoted)\");\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    {\n      _dauth_log_probe (algo_param, \"match\", \"SHA512_256_SESSION (unquoted)\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n\n  /* No known algorithm has been detected */\n  _dauth_log_probe (algo_param, \"nomatch\", \"unquoted path - invalid algorithm\");\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}