{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression algo_param->value.str is being used only for read-only comparisons but the struct member is (presumably) declared as a non-const pointer (e.g. char *str). MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible. In this code the function parameter is const struct MHD_RqDAuthParam *const, but that does not make the pointed-to char data const. If value.str is declared as char * (not const char *), this is a violation: the member should be declared const char *str to show it is not modified and to satisfy Rule 8.13. If, however, value.str is already declared as const char *, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <ctype.h>\n#include <string.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/2423.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n    if (!f)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Probe helper: log the contents (pointer, length and a readable preview) of value.str */\nstatic void mhd_probe_log_algo_param(const struct MHD_RqDAuthParam *const algo_param)\n{\n    if (NULL == algo_param)\n    {\n        mhd_probe_log(\"algo_param: NULL\");\n        return;\n    }\n\n    const char *s = algo_param->value.str;\n    size_t len = (size_t) algo_param->value.len;\n\n    mhd_probe_log(\"algo_param: this=%p, value.str=%p, quoted=%d, value.len=%zu\",\n                  (const void *)algo_param, (const void *)s, (int)algo_param->quoted, len);\n\n    if (NULL == s)\n    {\n        mhd_probe_log(\"value.str is NULL\");\n        return;\n    }\n\n    /* Log a printable preview (up to 128 chars) with non-printables replaced by '.') */\n    size_t preview_len = len > 128 ? 128 : len;\n    char buf[129];\n    for (size_t i = 0; i < preview_len; ++i)\n    {\n        unsigned char c = (unsigned char)s[i];\n        buf[i] = isprint(c) ? (char)c : '.';\n    }\n    buf[preview_len] = '\\0';\n    mhd_probe_log(\"value.str preview (first %zu bytes): '%s'\", preview_len, buf);\n\n    /* Log a short hex dump (up to 32 bytes) to capture exact bytes */\n    size_t hex_len = len > 32 ? 32 : len;\n    char hexbuf[3 * 32 + 1];\n    size_t pos = 0;\n    for (size_t i = 0; i < hex_len; ++i)\n    {\n        unsigned char c = (unsigned char)s[i];\n        int n = snprintf(&hexbuf[pos], sizeof(hexbuf) - pos, \"%02x%s\", c, (i + 1 < hex_len) ? \" \" : \"\");\n        if (n > 0)\n            pos += (size_t)n;\n        else\n            break;\n    }\n    hexbuf[pos] = '\\0';\n    if (hex_len > 0)\n        mhd_probe_log(\"value.str hex (first %zu bytes): %s\", hex_len, hexbuf);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Log entry and parameter state */\n  mhd_probe_log(\"ENTER get_rq_dauth_algo\");\n  mhd_probe_log_algo_param(algo_param);\n\n  if (NULL == algo_param->value.str)\n  {\n    mhd_probe_log(\"branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    mhd_probe_log(\"branch: quoted == true\");\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n    {\n      mhd_probe_log(\"match: _MHD_MD5_TOKEN (quoted) -> MHD_DIGEST_AUTH_ALGO3_MD5\");\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n    {\n      mhd_probe_log(\"match: _MHD_SHA256_TOKEN (quoted) -> MHD_DIGEST_AUTH_ALGO3_SHA256\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n    {\n      mhd_probe_log(\"match: _MHD_MD5_TOKEN _MHD_SESS_TOKEN (quoted) -> MHD_DIGEST_AUTH_ALGO3_SHA512_256\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      {\n        mhd_probe_log(\"match: _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN (quoted) -> MHD_DIGEST_AUTH_ALGO3_MD5_SESSION\");\n        return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n      }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n    {\n      mhd_probe_log(\"match: _MHD_SHA256_TOKEN _MHD_SESS_TOKEN (quoted) -> MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n    {\n      mhd_probe_log(\"match: _MHD_SHA512_256_TOKEN (quoted) -> MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n\n    /* No known algorithm has been detected */\n    mhd_probe_log(\"no known algorithm detected (quoted) -> MHD_DIGEST_AUTH_ALGO3_INVALID\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  mhd_probe_log(\"branch: quoted == false\");\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_probe_log(\"match: _MHD_MD5_TOKEN (unquoted) -> MHD_DIGEST_AUTH_ALGO3_MD5\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_probe_log(\"match: _MHD_SHA256_TOKEN (unquoted) -> MHD_DIGEST_AUTH_ALGO3_SHA256\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_probe_log(\"match: _MHD_SHA512_256_TOKEN (unquoted) -> MHD_DIGEST_AUTH_ALGO3_SHA512_256\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n  }\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_probe_log(\"match: _MHD_MD5_TOKEN _MHD_SESS_TOKEN (unquoted) -> MHD_DIGEST_AUTH_ALGO3_MD5_SESSION\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_probe_log(\"match: _MHD_SHA256_TOKEN _MHD_SESS_TOKEN (unquoted) -> MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    mhd_probe_log(\"match: _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN (unquoted) -> MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n  }\n\n  /* No known algorithm has been detected */\n  mhd_probe_log(\"no known algorithm detected (unquoted) -> MHD_DIGEST_AUTH_ALGO3_INVALID\");\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}