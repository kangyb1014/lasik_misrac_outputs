{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the struct member algo_param->value.str is declared as a non-const pointer (e.g. 'char *value.str'). In this call the string is only read (algo_param is a pointer-to-const struct and the function compares the string), so the pointer should point to a const-qualified type (const char *). Declaring value.str as 'char *' here would violate MISRA C 2023 Rule 8.13; change it to 'const char *' to fix.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n  if (NULL == f)\n  {\n    return; /* Best-effort logging only; do not alter behavior on failure */\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Log entry and key state (best-effort) */\n  log_probe(\"enter get_rq_dauth_algo: algo_param=%p, value.str=%p, quoted=%d, len=%lu\",\n            (void *)algo_param,\n            (void *)(algo_param ? algo_param->value.str : (const void *)0),\n            (int)(algo_param ? algo_param->quoted : 0),\n            (unsigned long)(algo_param ? (unsigned long)algo_param->value.len : 0UL));\n\n  if (NULL == algo_param->value.str)\n  {\n    log_probe(\"branch: value.str == NULL -> return MHD_DIGEST_AUTH_ALGO3_MD5\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    int matched;\n\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_MD5_TOKEN);\n    log_probe(\"quoted: compare with _MHD_MD5_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_SHA256_TOKEN);\n    log_probe(\"quoted: compare with _MHD_SHA256_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_MD5_TOKEN _MHD_SESS_TOKEN);\n    log_probe(\"quoted: compare with _MHD_MD5_TOKEN _MHD_SESS_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN);\n    log_probe(\"quoted: compare with _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN -> %d\", matched);\n\n    /* Algorithms below are not supported by MHD for authentication */\n\n    log_probe(\"quoted: unconditional return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION (preserve original control flow)\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n    /* The following checks are present in the original code but are unreachable\n       due to the unconditional return above. They are preserved here for fidelity. */\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_SHA256_TOKEN _MHD_SESS_TOKEN);\n    log_probe(\"quoted: (unreachable) compare with _MHD_SHA256_TOKEN _MHD_SESS_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n\n    matched = MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                                     algo_param->value.len,\n                                                     _MHD_SHA512_256_TOKEN);\n    log_probe(\"quoted: (unreachable) compare with _MHD_SHA512_256_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    log_probe(\"quoted: No known algorithm detected -> return MHD_DIGEST_AUTH_ALGO3_INVALID\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n\n  /* The algorithm value is not quoted */\n  {\n    int matched;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    log_probe(\"not quoted: compare with _MHD_MD5_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    log_probe(\"not quoted: compare with _MHD_SHA256_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    log_probe(\"not quoted: compare with _MHD_SHA512_256_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n    /* Algorithms below are not supported by MHD for authentication */\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    log_probe(\"not quoted: compare with _MHD_MD5_TOKEN _MHD_SESS_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    log_probe(\"not quoted: compare with _MHD_SHA256_TOKEN _MHD_SESS_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n\n    matched = MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                               algo_param->value.str,\n                                               algo_param->value.len);\n    log_probe(\"not quoted: compare with _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN -> %d\", matched);\n    if (matched)\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    log_probe(\"not quoted: No known algorithm detected -> return MHD_DIGEST_AUTH_ALGO3_INVALID\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n}"
}