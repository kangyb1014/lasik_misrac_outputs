{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the member algo_param->value.str is declared as a non-const pointer (e.g. char *str) in the definition of struct MHD_RqDAuthParam then Rule 8.13 is violated. Although get_rq_dauth_algo receives a const struct MHD_RqDAuthParam *const, that makes the pointer member itself const (char * const) but does not make the pointed-to characters const. Since the code only reads the string, the member should be declared as const char *str (or otherwise const-qualified) so that pointers point to a const-qualified type whenever possible.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nenter get_rq_dauth_algo: algo_param=0x7ffe07cbdde0, value.str=(nil), quoted=0, len=0\nvalue.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (d\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s reasoning is correct in the described scenario. The function parameter is a pointer to a const struct (const struct MHD_RqDAuthParam *const), which prevents modification of the struct and its members via algo_param, but it does not make the pointee type of any pointer members inside the struct const. If the struct member value.str is declared as char * (non-const), that declaration means a pointer-to-non-const-char exists in the program even though this function only reads the characters. MISRA C 2023 Rule 8.13 advises that pointers should point to a const-qualified type whenever possible; therefore, if value.str is intended to be read-only it should be declared const char *str in the struct. If value.str is already declared const char * then there is no violation. In short: the agent\u2019s report is correct for the case where the struct member is non-const; otherwise it is not a violation."
}