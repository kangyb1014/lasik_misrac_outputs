{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member algo_param->value.str is declared as a plain char * (i.e. not pointing to a const-qualified type), then Rule 8.13 is violated \u2014 the pointer should be declared as const char * (or otherwise const-qualified) because it is used only for read access (here compared to NULL and subsequently read). If, however, value.str is already declared as const char * (and the struct type is correctly const-qualified as in the parameter declaration), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\nPlease provide the modified get_rq_dauth_algo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe/logging helpers writing to /tmp/logs/2423.txt. These helpers are\n   intentionally simple so they can be dropped into the existing source\n   without changing program logic. They only append diagnostic information\n   and do not modify any program state. */\nstatic void log_printf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2423.txt\", \"a\");\n    if (NULL == fp)\n        return;\n\n    time_t t = time(NULL);\n    struct tm *lt = localtime(&t);\n    if (lt)\n        fprintf(fp, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                lt->tm_year + 1900, lt->tm_mon + 1, lt->tm_mday,\n                lt->tm_hour, lt->tm_min, lt->tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic void log_dump_value_str(const char *s, size_t len)\n{\n    FILE *fp = fopen(\"/tmp/logs/2423.txt\", \"a\");\n    if (NULL == fp)\n        return;\n\n    size_t show = (len > 64u) ? 64u : len;\n    fprintf(fp, \"value.str pointer=%p, len=%zu, content='\", (const void *)s, (size_t)len);\n    if (s && show > 0)\n    {\n        fwrite(s, 1, show, fp);\n        if (len > show)\n            fprintf(fp, \"...\");\n    }\n    fprintf(fp, \"'\\n\");\n    fclose(fp);\n}\n\n/* Modified get_rq_dauth_algo: original logic preserved, logging probes added\n   to capture control flow and state for reproducing the reported Rule 8.13\n   scenario. */\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  /* Log entry and basic state */\n  log_printf(\"ENTER get_rq_dauth_algo: algo_param=%p\", (const void *)algo_param);\n  /* The original code dereferences algo_param; preserve that behavior.\n     Log the member values that will be used below. */\n  log_printf(\"algo_param->quoted=%d\", (int)algo_param->quoted);\n  log_printf(\"algo_param->value.len=%zu\", (size_t)algo_param->value.len);\n  log_dump_value_str(algo_param->value.str, (size_t)algo_param->value.len);\n\n  if (NULL == algo_param->value.str)\n  {\n    log_printf(\"branch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n  }\n\n  if (algo_param->quoted)\n  {\n    log_printf(\"branch: quoted == true\");\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n    {\n      log_printf(\"match: _MHD_MD5_TOKEN (quoted) -> returning MHD_DIGEST_AUTH_ALGO3_MD5\");\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n    {\n      log_printf(\"match: _MHD_SHA256_TOKEN (quoted) -> returning MHD_DIGEST_AUTH_ALGO3_SHA256\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n    {\n      log_printf(\"match: _MHD_MD5_TOKEN _MHD_SESS_TOKEN (quoted) -> returning MHD_DIGEST_AUTH_ALGO3_SHA512_256\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      {\n        log_printf(\"match: _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN (quoted) -> returning MHD_DIGEST_AUTH_ALGO3_MD5_SESSION\");\n        return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n      }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n    {\n      log_printf(\"match: _MHD_SHA256_TOKEN _MHD_SESS_TOKEN (quoted) -> returning MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n    {\n      log_printf(\"match: _MHD_SHA512_256_TOKEN (quoted) -> returning MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION\");\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    }\n\n    /* No known algorithm has been detected */\n    log_printf(\"no known algorithm detected (quoted) -> returning MHD_DIGEST_AUTH_ALGO3_INVALID\");\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n\n  /* The algorithm value is not quoted */\n  log_printf(\"branch: quoted == false\");\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    log_printf(\"match: _MHD_MD5_TOKEN (unquoted) -> returning MHD_DIGEST_AUTH_ALGO3_MD5\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    log_printf(\"match: _MHD_SHA256_TOKEN (unquoted) -> returning MHD_DIGEST_AUTH_ALGO3_SHA256\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    log_printf(\"match: _MHD_SHA512_256_TOKEN (unquoted) -> returning MHD_DIGEST_AUTH_ALGO3_SHA512_256\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n  }\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    log_printf(\"match: _MHD_MD5_TOKEN _MHD_SESS_TOKEN (unquoted) -> returning MHD_DIGEST_AUTH_ALGO3_MD5_SESSION\");\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    log_printf(\"match: _MHD_SHA256_TOKEN _MHD_SESS_TOKEN (unquoted) -> returning MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    log_printf(\"match: _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN (unquoted) -> returning MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION\");\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n  }\n\n  /* No known algorithm has been detected */\n  log_printf(\"no known algorithm detected (unquoted) -> returning MHD_DIGEST_AUTH_ALGO3_INVALID\");\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n"
}