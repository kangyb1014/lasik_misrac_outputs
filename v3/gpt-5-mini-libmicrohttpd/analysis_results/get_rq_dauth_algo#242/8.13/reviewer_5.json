{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the member algo_param->value.str is declared as a non-const pointer (e.g. char *str) then this is a violation: the code only reads the string but the pointer type does not point to a const-qualified char. The function parameter is a const pointer to a const struct, but that does not make the pointee type of the member const. The correct form would be const char *str (or the function should accept const char *), so that read-only pointers point to const-qualified types.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 quoted=0 ptr=(nil) len=0 note=value.str is NULL -> default MD5\n[get_rq_dauth_algo] stage=entry token=(none) matched=0 quoted=0 ptr=(nil) len=0 note=entering function\n[get_rq_dauth_algo] stage=null-check token=(value.str) matched=1 q\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 concerns pointer declarations: a pointer shall point to a const-qualified type whenever possible. The shown function declares its parameter as \"const struct MHD_RqDAuthParam *const algo_param\" \u2014 i.e. a pointer to a const-qualified struct (and the pointer itself is const). The function does not introduce any non-const pointer type itself. Whether the member algo_param->value.str is declared as \"char *\" or \"const char *\" is a property of the struct definition (the declaration site), not of this function. If the struct member is (incorrectly) declared as a non-const pointer even though it is only read, then the problem would be in the struct member declaration and that declaration (not this function) would be the place a MISRA 8.13 violation could be reported. Therefore agent A's claim that get_rq_dauth_algo itself violates Rule 8.13 is not correct. (If the intent is that value.str should be immutable, the proper fix is to change the struct member to const char * at its declaration.)"
}