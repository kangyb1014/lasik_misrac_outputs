{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression algo_param->value.str is used only for read-only operations (case-insensitive comparisons) but the member is likely declared as a pointer to non-const char (e.g. char *). Although algo_param is a pointer to a const struct, that makes the pointer-to-member itself const, not the pointee. Thus the pointer currently points to a non-const-qualified type and should instead be declared as pointing to const (const char *) to comply with MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NULL)' algo_param=0x7ffc2de9aee0 value.str=(nil) len=0 quoted=0 cmp=1\nENTER get_rq_dauth_algo algo_param=0x7ffc2de9aee0\n  -> value.str=(nil) len=0 quoted=0\nCHECK=null-value token='(NUL\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough evidence to conclude a definite MISRA 8.13 violation. Rule 8.13 asks that a pointer type should point to a const-qualified type when the pointee is not modified via that pointer. In the function get_rq_dauth_algo the parameter is declared as const struct MHD_RqDAuthParam *const algo_param, so the struct and its members are read-only in this function. However that does not change the declared type of the member value.str. If value.str is declared in the struct as char * then, for a const struct object, the member has type \"char * const\" (the pointer itself is const and cannot be reassigned here) but the pointed-to characters are not declared const. Passing that member to comparison functions that accept const char * is allowed by C (char * -> const char * conversion).\n\nTherefore A\u2019s claim is only potentially correct: if value.str is declared as char * and the codebase never modifies the characters through that pointer, then the member should be declared const char * to satisfy MISRA 8.13. But we do not have the struct definition or a global usage analysis; other code might legitimately modify the pointed-to characters via non-const pointers, making changing the declaration incorrect. In short: the report is plausible but unproven without inspecting the declaration of value.str and its uses across the code base. I therefore judge the report as not (definitively) correct.\n\nRecommended action: inspect the declaration of MHD_RqDAuthParam::value.str and search the codebase for any writes through that pointer. If it is only read, change its type to const char *; otherwise keep it as-is (and justify the exception to MISRA 8.13)."
}