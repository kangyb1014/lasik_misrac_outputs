{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe expression algo_param->value.str is being used only for read-only comparisons but the struct member is (presumably) declared as a non-const pointer (e.g. char *str). MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible. In this code the function parameter is const struct MHD_RqDAuthParam *const, but that does not make the pointed-to char data const. If value.str is declared as char * (not const char *), this is a violation: the member should be declared const char *str to show it is not modified and to satisfy Rule 8.13. If, however, value.str is already declared as const char *, then there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value.str == NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5 (default)\nENTER get_rq_dauth_algo\nalgo_param: this=0x7ffcb8a7bd30, value.str=(nil), quoted=0, value.len=0\nvalue.str is NULL\nbranch: value\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "You cannot tell from the function body alone whether Rule 8.13 is violated \u2014 it depends on the declaration of the member algo_param->value.str. MISRA C:2023 Rule 8.13 says pointer types should point to const-qualified data when possible. In this function the parameter is declared as const struct MHD_RqDAuthParam *const, which prevents modifying the struct or the pointer, but it does NOT implicitly make pointer targets const. If value.str in struct MHD_RqDAuthParam is declared as const char * (or an equivalent const-qualified pointer type), then there is no Rule 8.13 violation in this function. If value.str is declared as char * (non-const) but is only ever read (as appears here \u2014 the code only performs comparisons), then the struct member should be changed to const char * to satisfy Rule 8.13 and to document intent; in that case agent A\u2019s report is correct.\n\nRecommendation: inspect the definition of struct MHD_RqDAuthParam. If value.str is char * and the data it points to is not modified, change the member to const char *. That will remove the potential Rule 8.13 violation and better express const-correctness."
}