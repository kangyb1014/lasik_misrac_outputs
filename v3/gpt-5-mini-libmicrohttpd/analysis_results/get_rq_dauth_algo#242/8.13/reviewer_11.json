{
  "user_message": "An agent A claimed that the following get_rq_dauth_algo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_algo.\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation when the member algo_param->value.str is of a non-const pointer type (for example declared as char *str). The code only reads from that pointer (NULL check and passing it to comparison functions) so the pointer should point to a const-qualified type (e.g. const char *str). Leaving it as a non-const pointer violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: entry\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  value.str ptr: (nil)\n  last comparison result: 0\n\nStage: null_value_str\n  algo_param ptr: 0x7ffc64435ef0\n  quoted: 0\n  value.len: 0\n  va\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the code shown. MISRA C 2023 Rule 8.13 concerns pointer declarations (a pointer should point to a const-qualified type whenever possible). The function parameter here is declared as const struct MHD_RqDAuthParam * const (i.e. a pointer to a const struct), so this function does not declare any non-const pointer to the string data. The only pointer involved (algo_param->value.str) is a member of the struct; whether that member's type (char * vs const char *) violates 8.13 is a property of the struct declaration, not of this function. To determine a real MISRA 8.13 violation you must inspect the declaration of struct MHD_RqDAuthParam and its value.str member. If value.str is declared as a non-const char * but could safely be const char *, then the struct declaration (not this function) would be the place to fix and would be the locus of a possible 8.13 violation. Also note there are legitimate reasons to keep it non-const (other code may need to modify the buffer), so it may be intentional. Based on the provided code and logs, Agent A's claim that this function violates Rule 8.13 is incorrect."
}