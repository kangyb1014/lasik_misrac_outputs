{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'daemon' is declared as 'struct MHD_Daemon *daemon = connection->daemon;' but is only used for reading fields (accessing daemon->default_handler and daemon->default_handler_cls) and not to modify the pointed object. It could be declared 'const struct MHD_Daemon *daemon = connection->daemon;' to indicate immutability. Therefore the code does not qualify the pointer-to-object as const when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified call_connection_handler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of call_connection_handler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of call_connection_handler:\n```c\nstatic void\ncall_connection_handler (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  size_t processed;\n\n  if (NULL != connection->rp.response)\n    return;                     /* already queued a response */\n  processed = 0;\n  connection->rq.client_aware = true;\n  connection->in_access_handler = true;\n  if (MHD_NO ==\n      daemon->default_handler (daemon->default_handler_cls,\n                               connection,\n                               connection->rq.url,\n                               connection->rq.method,\n                               connection->rq.version,\n                               NULL,\n                               &processed,\n                               &connection->rq.client_context))\n  {\n    connection->in_access_handler = false;\n    /* serious internal error, close connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Application reported internal error, \" \\\n                               \"closing connection.\"));\n    return;\n  }\n  connection->in_access_handler = false;\n}\n```\n</target_code>\nPlease provide the modified call_connection_handler code.\n",
  "test_code": "static void\ncall_connection_handler (struct MHD_Connection *connection)\n{\n  /* Local declarations preserved */\n  struct MHD_Daemon *daemon = connection->daemon;\n  size_t processed;\n\n  /* Minimal local prototypes so this function can log without requiring headers\n     (allowed as function-scope declarations). These match the standard\n     stdio functions used for logging. */\n  FILE *fopen (const char *, const char *);\n  int fprintf (FILE *, const char *, ...);\n  int fclose (FILE *);\n\n  /* Open log file for append. If it fails, we continue without logging to\n     preserve original control flow. */\n  FILE *log = fopen(\"/tmp/logs/253.txt\", \"a\");\n  if (log)\n    {\n      fprintf(log, \"call_connection_handler: entry, connection=%p\\n\", (void *) connection);\n      fprintf(log, \"call_connection_handler: connection->daemon=%p\\n\", (void *) daemon);\n      if (daemon)\n        {\n          fprintf(log, \"call_connection_handler: daemon->default_handler is %s\\n\",\n                  daemon->default_handler ? \"set\" : \"NULL\");\n          fprintf(log, \"call_connection_handler: daemon->default_handler_cls=%p\\n\",\n                  (void *) daemon->default_handler_cls);\n        }\n      else\n        {\n          fprintf(log, \"call_connection_handler: daemon is NULL\\n\");\n        }\n\n      fprintf(log, \"call_connection_handler: connection->rp.response=%p\\n\",\n              (void *) connection->rp.response);\n\n      /* Log request URL/method/version safely (may be NULL) */\n      fprintf(log, \"call_connection_handler: rq.url=%s\\n\",\n              connection->rq.url ? connection->rq.url : \"(null)\");\n      fprintf(log, \"call_connection_handler: rq.method=%s\\n\",\n              connection->rq.method ? connection->rq.method : \"(null)\");\n      fprintf(log, \"call_connection_handler: rq.version=%s\\n\",\n              connection->rq.version ? connection->rq.version : \"(null)\");\n\n      fclose(log);\n    }\n\n  if (NULL != connection->rp.response)\n    return;                     /* already queued a response */\n\n  processed = 0;\n\n  /* Log state changes after early return check */\n  log = fopen(\"/tmp/logs/253.txt\", \"a\");\n  if (log)\n    {\n      fprintf(log, \"call_connection_handler: processed initialized to %zu\\n\", processed);\n      fprintf(log, \"call_connection_handler: setting rq.client_aware = true\\n\");\n      fclose(log);\n    }\n\n  connection->rq.client_aware = true;\n  connection->in_access_handler = true;\n\n  /* Log right before invoking the daemon default handler */\n  log = fopen(\"/tmp/logs/253.txt\", \"a\");\n  if (log)\n    {\n      fprintf(log, \"call_connection_handler: about to call daemon->default_handler (daemon=%p)\\n\",\n              (void *) daemon);\n      fprintf(log, \"call_connection_handler: initial processed=%zu\\n\", processed);\n      fclose(log);\n    }\n\n  if (MHD_NO ==\n      daemon->default_handler (daemon->default_handler_cls,\n                               connection,\n                               connection->rq.url,\n                               connection->rq.method,\n                               connection->rq.version,\n                               NULL,\n                               &processed,\n                               &connection->rq.client_context))\n  {\n    /* Log the failure path and updated processed value */\n    log = fopen(\"/tmp/logs/253.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"call_connection_handler: daemon->default_handler returned MHD_NO\\n\");\n        fprintf(log, \"call_connection_handler: processed after handler=%zu\\n\", processed);\n        fprintf(log, \"call_connection_handler: clearing in_access_handler and closing connection due to internal error\\n\");\n        fclose(log);\n      }\n\n    connection->in_access_handler = false;\n    /* serious internal error, close connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Application reported internal error, \" \\\n                               \"closing connection.\"));\n    return;\n  }\n\n  /* Log the success path and final state */\n  log = fopen(\"/tmp/logs/253.txt\", \"a\");\n  if (log)\n    {\n      fprintf(log, \"call_connection_handler: daemon->default_handler returned success\\n\");\n      fprintf(log, \"call_connection_handler: processed after handler=%zu\\n\", processed);\n      fprintf(log, \"call_connection_handler: clearing in_access_handler and returning normally\\n\");\n      fclose(log);\n    }\n\n  connection->in_access_handler = false;\n}\n"
}