{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe check uses digest_size * 2 + 1 without guarding against size_t overflow. If digest_size is large enough that (digest_size * 2 + 1) wraps around (i.e. digest_size > (SIZE_MAX - 1) / 2), the comparison can be bypassed and MHD_bin_to_hex_z(userhash_bin, digest_size, userhash_hex) may write 2*digest_size + 1 bytes into userhash_hex, overflowing it. Example on a 32-bit platform (SIZE_MAX = 4294967295): digest_size = 2147483648 -> digest_size*2 == 0 (wrap), +1 == 1, so the check (1 > hex_buf_size) is false even for small hex_buf_size; the subsequent call will attempt to produce 4294967297 bytes, causing out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userhash_hex code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2489.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userhash_hex as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userhash_hex:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash_hex (enum MHD_DigestAuthAlgo3 algo3,\n                                   const char *username,\n                                   const char *realm,\n                                   char *userhash_hex,\n                                   size_t hex_buf_size)\n{\n  uint8_t userhash_bin[MAX_DIGEST];\n  size_t digest_size;\n\n  digest_size = digest_get_hash_size (algo3);\n  if (digest_size * 2 + 1 > hex_buf_size)\n    return MHD_NO;\n  if (MHD_NO == MHD_digest_auth_calc_userhash (algo3, username, realm,\n                                               userhash_bin, MAX_DIGEST))\n    return MHD_NO;\n\n  MHD_bin_to_hex_z (userhash_bin, digest_size, userhash_hex);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userhash_hex code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <stdbool.h>\n\n/* Probe helper: append log lines to /tmp/logs/2489.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2489.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash_hex (enum MHD_DigestAuthAlgo3 algo3,\n                                   const char *username,\n                                   const char *realm,\n                                   char *userhash_hex,\n                                   size_t hex_buf_size)\n{\n  uint8_t userhash_bin[MAX_DIGEST];\n  size_t digest_size;\n\n  /* Compute digest size and log initial state. */\n  digest_size = digest_get_hash_size (algo3);\n  mhd_probe_log(\"[probe] entry: algo3=%d, username=%p, realm=%p, userhash_hex=%p, hex_buf_size=%zu\",\n                (int)algo3, (void *)username, (void *)realm, (void *)userhash_hex, hex_buf_size);\n  mhd_probe_log(\"[probe] digest_size=%zu\", digest_size);\n\n  /* Compute wrapped expression (may overflow) to capture exact value used in comparison. */\n  {\n    size_t expr_wrapped = digest_size * 2 + 1; /* intentionally same expression as original for faithful logging */\n    size_t overflow_threshold = (SIZE_MAX - 1) / 2;\n    bool overflow_possible = (digest_size > overflow_threshold);\n\n    mhd_probe_log(\"[probe] computed (digest_size * 2 + 1) [wrapped]=%zu\", expr_wrapped);\n    mhd_probe_log(\"[probe] overflow_threshold=(SIZE_MAX-1)/2=%zu, overflow_possible=%s\",\n                  overflow_threshold, overflow_possible ? \"true\" : \"false\");\n  }\n\n  /* Original check preserved exactly. */\n  if (digest_size * 2 + 1 > hex_buf_size) {\n    mhd_probe_log(\"[probe] check failed: digest_size*2+1 > hex_buf_size -> returning MHD_NO (insufficient hex buffer). digest_size=%zu, hex_buf_size=%zu\",\n                  digest_size, hex_buf_size);\n    return MHD_NO;\n  }\n  if (MHD_NO == MHD_digest_auth_calc_userhash (algo3, username, realm,\n                                               userhash_bin, MAX_DIGEST)) {\n    mhd_probe_log(\"[probe] MHD_digest_auth_calc_userhash returned MHD_NO -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  mhd_probe_log(\"[probe] calling MHD_bin_to_hex_z with digest_size=%zu, userhash_bin=%p, userhash_hex=%p\",\n                digest_size, (void *)userhash_bin, (void *)userhash_hex);\n  MHD_bin_to_hex_z (userhash_bin, digest_size, userhash_hex);\n  mhd_probe_log(\"[probe] MHD_bin_to_hex_z completed -> returning MHD_YES\");\n  return MHD_YES;\n}\n"
}