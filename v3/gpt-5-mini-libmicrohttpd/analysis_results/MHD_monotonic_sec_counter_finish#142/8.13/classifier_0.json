{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_monotonic_sec_counter_finish:\n```c\nvoid\nMHD_monotonic_sec_counter_finish (void)\n{\n#ifdef HAVE_CLOCK_GET_TIME\n  if (_MHD_INVALID_CLOCK_SERV != mono_clock_service)\n  {\n    mach_port_deallocate (mach_task_self (),\n                          mono_clock_service);\n    mono_clock_service = _MHD_INVALID_CLOCK_SERV;\n  }\n#endif /* HAVE_CLOCK_GET_TIME */\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmono_clock_service = _MHD_INVALID_CLOCK_SERV;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: mono_clock_service is (in typical implementations) a mach_port_t/handle (not a pointer), so Rule 8.13 (about pointer-to-const) is not applicable. Even if mono_clock_service were a pointer, the statement assigns the pointer variable itself to an invalid handle/NULL; it does not require the pointed-to type to be const here, and changing the pointer value is legitimate. Therefore this fragment does not violate MISRA C 2023 Rule 8.13."
}