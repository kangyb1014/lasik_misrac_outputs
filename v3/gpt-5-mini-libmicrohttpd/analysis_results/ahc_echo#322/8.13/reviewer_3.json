{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  const char *val;\n  char *me;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int resp_len;\n  size_t buf_size;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;  /* reset when done */\n  val = MHD_lookup_connection_value (connection, MHD_GET_ARGUMENT_KIND, \"q\");\n  if (NULL == val)\n    return MHD_NO;  /* No \"q\" argument was found */\n  resp_len = snprintf (NULL, 0, PAGE, \"q\", val);\n  if (0 >= resp_len)\n    return MHD_NO;  /* Error calculating response size */\n  buf_size = (size_t) resp_len + 1; /* Add one byte for zero-termination */\n  me = malloc (buf_size);\n  if (me == NULL)\n    return MHD_NO;  /* Error allocating memory */\n  if (resp_len != snprintf (me, buf_size, PAGE, \"q\", val))\n  {\n    free (me);\n    return MHD_NO;  /* Error forming the response body */\n  }\n  response =\n    MHD_create_response_from_buffer_with_free_callback (buf_size - 1,\n                                                        (void *) me,\n                                                        &free);\n  if (response == NULL)\n  {\n    free (me);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe assignment *req_cls = &aptr; stores the address of a modifiable object (static int aptr) into a void* context pointer. The object 'aptr' is never modified through that pointer, so it could/should be const-qualified (e.g. const int). Therefore the pointer stored in *req_cls is not to a const-qualified type even though a const qualification would be possible \u2014 this is a violation of MISRA C 2023 Rule 8.13. Note: the library callback API uses void**, so changing the API or using casts would be required to fully address this.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 8.13 concerns the types of pointer variables (i.e. pointers should be to const-qualified types when the pointed-to object is not modified via that pointer). In this function the pointer type that matters (req_cls, type void **) comes from an external library callback API and cannot be changed locally. The code stores the address of a local object (aptr) into the opaque void * context; aptr itself could conceptually be declared const, but doing so would not resolve the rule cleanly because assigning a const int * into a plain void * (via the void ** API) would discard the const qualifier (and would require an explicit cast or an API change). Given the API constraint, there is no local pointer declaration that can reasonably be changed to a const-qualified pointer type to satisfy 8.13 without either changing the library interface or introducing qualifier-discarding casts (which would create other MISRA issues). Therefore the reported 8.13 violation is not correct in this context."
}