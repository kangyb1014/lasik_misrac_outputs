{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer pNow is declared as 'struct tm *pNow' and is only used to read the object returned by gmtime(&t) (pNow is checked for NULL and then dereferenced to copy into 'now'). Because the pointee is not modified, pNow should be declared as 'const struct tm *pNow'. Therefore the code fragment violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_date_str code that contains useful probe functions that print useful logs to a file \"/tmp/logs/373.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_date_str as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_date_str:\n```c\nstatic bool\nget_date_str (char *date)\n{\n  static const char *const days[] = {\n    \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"\n  };\n  static const char *const mons[] = {\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  };\n  static const size_t buf_len = 29;\n  struct tm now;\n  time_t t;\n  const char *src;\n#if ! defined(HAVE_C11_GMTIME_S) && ! defined(HAVE_W32_GMTIME_S) && \\\n  ! defined(HAVE_GMTIME_R)\n  struct tm *pNow;\n#endif\n\n  if ((time_t) -1 == time (&t))\n    return false;\n#if defined(HAVE_C11_GMTIME_S)\n  if (NULL == gmtime_s (&t,\n                        &now))\n    return false;\n#elif defined(HAVE_W32_GMTIME_S)\n  if (0 != gmtime_s (&now,\n                     &t))\n    return false;\n#elif defined(HAVE_GMTIME_R)\n  if (NULL == gmtime_r (&t,\n                        &now))\n    return false;\n#else\n  pNow = gmtime (&t);\n  if (NULL == pNow)\n    return false;\n  now = *pNow;\n#endif\n\n  /* Day of the week */\n  src = days[now.tm_wday % 7];\n  date[0] = src[0];\n  date[1] = src[1];\n  date[2] = src[2];\n  date[3] = ',';\n  date[4] = ' ';\n  /* Day of the month */\n  if (2 != MHD_uint8_to_str_pad ((uint8_t) now.tm_mday, 2,\n                                 date + 5, buf_len - 5))\n    return false;\n  date[7] = ' ';\n  /* Month */\n  src = mons[now.tm_mon % 12];\n  date[8] = src[0];\n  date[9] = src[1];\n  date[10] = src[2];\n  date[11] = ' ';\n  /* Year */\n  if (4 != MHD_uint16_to_str ((uint16_t) (1900 + now.tm_year), date + 12,\n                              buf_len - 12))\n    return false;\n  date[16] = ' ';\n  /* Time */\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_hour, 2, date + 17, buf_len - 17);\n  date[19] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_min, 2, date + 20, buf_len - 20);\n  date[22] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_sec, 2, date + 23, buf_len - 23);\n  date[25] = ' ';\n  date[26] = 'G';\n  date[27] = 'M';\n  date[28] = 'T';\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_date_str code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Prototypes for external helper functions used by original code. */\nint MHD_uint8_to_str_pad(uint8_t val, int width, char *buf, size_t buflen);\nint MHD_uint16_to_str(uint16_t val, char *buf, size_t buflen);\n\n/* Simple logging helper that appends messages to /tmp/logs/373.txt. */\nstatic void\nlog_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/373.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n\n    /* Prepend a timestamp for easier tracing. */\n    time_t nowt = time(NULL);\n    if ((time_t)-1 != nowt)\n    {\n        struct tm tbuf;\n#if defined(HAVE_GMTIME_R)\n        if (NULL != gmtime_r(&nowt, &tbuf))\n        {\n            char ts[64];\n            /* ISO-like timestamp (UTC) */\n            if (strftime(ts, sizeof(ts), \"%Y-%m-%dT%H:%M:%SZ\", &tbuf) > 0)\n            {\n                fprintf(f, \"%s - \", ts);\n            }\n        }\n        else\n        {\n            fprintf(f, \"(timestamp error) - \");\n        }\n#else\n        {\n            struct tm *pt = gmtime(&nowt);\n            if (pt != NULL)\n            {\n                char ts[64];\n                if (strftime(ts, sizeof(ts), \"%Y-%m-%dT%H:%M:%SZ\", pt) > 0)\n                {\n                    fprintf(f, \"%s - \", ts);\n                }\n            }\n            else\n            {\n                fprintf(f, \"(timestamp error) - \");\n            }\n        }\n#endif\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic bool\nget_date_str (char *date)\n{\n  static const char *const days[] = {\n    \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"\n  };\n  static const char *const mons[] = {\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  };\n  static const size_t buf_len = 29;\n  struct tm now;\n  time_t t;\n  const char *src;\n#if ! defined(HAVE_C11_GMTIME_S) && ! defined(HAVE_W32_GMTIME_S) && \\\n  ! defined(HAVE_GMTIME_R)\n  struct tm *pNow;\n#endif\n\n  log_probe(\"Entered get_date_str\");\n\n  if ((time_t) -1 == time (&t))\n  {\n    log_probe(\"time() returned -1; failing\");\n    return false;\n  }\n\n  log_probe(\"time() returned t=%lld\", (long long)t);\n\n#if defined(HAVE_C11_GMTIME_S)\n  log_probe(\"Using HAVE_C11_GMTIME_S branch\");\n  if (NULL == gmtime_s (&t,\n                        &now))\n  {\n    log_probe(\"gmtime_s indicated failure (NULL). Returning false\");\n    return false;\n  }\n  log_probe(\"gmtime_s populated 'now' successfully: tm_year=%d tm_mon=%d tm_mday=%d tm_wday=%d tm_hour=%d tm_min=%d tm_sec=%d\",\n            now.tm_year, now.tm_mon, now.tm_mday, now.tm_wday,\n            now.tm_hour, now.tm_min, now.tm_sec);\n#elif defined(HAVE_W32_GMTIME_S)\n  log_probe(\"Using HAVE_W32_GMTIME_S branch\");\n  if (0 != gmtime_s (&now,\n                     &t))\n  {\n    log_probe(\"w32 gmtime_s returned non-zero (failure). Returning false\");\n    return false;\n  }\n  log_probe(\"w32 gmtime_s populated 'now' successfully: tm_year=%d tm_mon=%d tm_mday=%d tm_wday=%d tm_hour=%d tm_min=%d tm_sec=%d\",\n            now.tm_year, now.tm_mon, now.tm_mday, now.tm_wday,\n            now.tm_hour, now.tm_min, now.tm_sec);\n#elif defined(HAVE_GMTIME_R)\n  log_probe(\"Using HAVE_GMTIME_R branch\");\n  if (NULL == gmtime_r (&t,\n                        &now))\n  {\n    log_probe(\"gmtime_r returned NULL. Returning false\");\n    return false;\n  }\n  log_probe(\"gmtime_r populated 'now' successfully: tm_year=%d tm_mon=%d tm_mday=%d tm_wday=%d tm_hour=%d tm_min=%d tm_sec=%d\",\n            now.tm_year, now.tm_mon, now.tm_mday, now.tm_wday,\n            now.tm_hour, now.tm_min, now.tm_sec);\n#else\n  log_probe(\"Using fallback gmtime(&t) branch (non-reentrant)\");\n  pNow = gmtime (&t);\n  log_probe(\"gmtime(&t) returned pointer pNow=%p\", (void *)pNow);\n  if (NULL == pNow)\n  {\n    log_probe(\"pNow is NULL after gmtime; returning false\");\n    return false;\n  }\n  /* Log the fields of the pointee before copying */\n  log_probe(\"pNow->tm_year=%d tm_mon=%d tm_mday=%d tm_wday=%d tm_hour=%d tm_min=%d tm_sec=%d\",\n            pNow->tm_year, pNow->tm_mon, pNow->tm_mday, pNow->tm_wday,\n            pNow->tm_hour, pNow->tm_min, pNow->tm_sec);\n  now = *pNow;\n  log_probe(\"Copied *pNow into local 'now'\");\n#endif\n\n  /* Day of the week */\n  src = days[now.tm_wday % 7];\n  log_probe(\"Selected day string: %s (tm_wday=%d)\", src, now.tm_wday);\n  date[0] = src[0];\n  date[1] = src[1];\n  date[2] = src[2];\n  date[3] = ',';\n  date[4] = ' ';\n  /* Day of the month */\n  if (2 != MHD_uint8_to_str_pad ((uint8_t) now.tm_mday, 2,\n                                 date + 5, buf_len - 5))\n  {\n    log_probe(\"MHD_uint8_to_str_pad failed for tm_mday=%d\", now.tm_mday);\n    return false;\n  }\n  log_probe(\"Wrote day of month: %d\", now.tm_mday);\n  date[7] = ' ';\n  /* Month */\n  src = mons[now.tm_mon % 12];\n  log_probe(\"Selected month string: %s (tm_mon=%d)\", src, now.tm_mon);\n  date[8] = src[0];\n  date[9] = src[1];\n  date[10] = src[2];\n  date[11] = ' ';\n  /* Year */\n  if (4 != MHD_uint16_to_str ((uint16_t) (1900 + now.tm_year), date + 12,\n                              buf_len - 12))\n  {\n    log_probe(\"MHD_uint16_to_str failed for year=%d\", 1900 + now.tm_year);\n    return false;\n  }\n  log_probe(\"Wrote year: %d\", 1900 + now.tm_year);\n  date[16] = ' ';\n  /* Time */\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_hour, 2, date + 17, buf_len - 17);\n  log_probe(\"Wrote hour: %d\", now.tm_hour);\n  date[19] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_min, 2, date + 20, buf_len - 20);\n  log_probe(\"Wrote minute: %d\", now.tm_min);\n  date[22] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_sec, 2, date + 23, buf_len - 23);\n  log_probe(\"Wrote second: %d\", now.tm_sec);\n  date[25] = ' ';\n  date[26] = 'G';\n  date[27] = 'M';\n  date[28] = 'T';\n\n  log_probe(\"get_date_str completed successfully. date='%.*s'\", (int)buf_len, date);\n  return true;\n}\n"
}