{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ws_get_accept_value:\n```c\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "SHA1Reset (&ctx)",
    "len = BASE64Encode (hash, SHA1HashSize, val)",
    "WS_KEY_LEN != strlen (key)",
    "strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1)",
    "SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN)",
    "strncpy (str, key, (WS_KEY_LEN + 1))",
    "str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1)",
    "free (str)",
    "if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))"
  ],
  "explanation": "This function body contains no direct call to ws_get_accept_value, so there is no obvious direct recursion. However, MISRA Rule 17.2 also prohibits indirect recursion, so any call to an externally defined function might introduce an indirect call path back to ws_get_accept_value. The listed fragments are all function calls (including library calls and calls to SHA1/BASE64 helpers) whose definitions are not present in this snippet and therefore must be examined to ensure they do not (directly or indirectly) call ws_get_accept_value. Other parts of the code (variable declarations, pointer arithmetic, conditional checks, return statements, and the final assignment (*val)[len] = '\\0') cannot by themselves create a call chain and thus do not need investigation for Rule 17.2 in this context."
}