{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'password' which is declared as 'const char *' to digest_update_str. If digest_update_str is declared to take a non-const pointer (e.g. 'char *' or 'char []'), this discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. For example, a prototype like 'void digest_update_str(struct DigestAlgorithm *da, char *s);' would be a violation because the parameter should be 'const char *s' instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calc_userdigest:\n```c\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n  digest_update_str (da, password);\n  digest_calc_hash (da, ha1_bin);\n}\n```\n</target_code>\nPlease provide the modified calc_userdigest code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper. Writes append-only logs about control flow/state\n * to /tmp/logs/2613.txt. Takes only const pointers so we don't discard\n * const qualifiers when logging. */\nstatic void mhd_log_probe(const char *stage,\n                          struct DigestAlgorithm *da,\n                          const char *username, size_t username_len,\n                          const char *realm, size_t realm_len,\n                          const char *password,\n                          const uint8_t *ha1_bin)\n{\n  FILE *f = fopen(\"/tmp/logs/2613.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  /* Log control point and pointer/state information. Do not dereference\n   * string pointers or buffer pointers to avoid undefined behavior. */\n  fprintf(f, \"[calc_userdigest] stage=%s\\n\", stage);\n  fprintf(f, \"  da=%p\\n\", (void *)da);\n  /* da->hashing is used in the original function; log its value if possible. */\n  /* Guarded access: original code assumes 'da' is valid; follow that assumption. */\n  if (da != NULL)\n  {\n    /* print as integer to avoid format mismatch */\n    fprintf(f, \"  da->hashing=%d\\n\", (int)da->hashing);\n  }\n  fprintf(f, \"  username=%p username_len=%zu\\n\", (const void *)username, username_len);\n  fprintf(f, \"  realm=%p realm_len=%zu\\n\", (const void *)realm, realm_len);\n  fprintf(f, \"  password=%p (const char *)\\n\", (const void *)password);\n  fprintf(f, \"  ha1_bin=%p\\n\", (const void *)ha1_bin);\n\n  fflush(f);\n  fclose(f);\n}\n\n/* Original function with inserted logging probes. Signature preserved. */\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  /* Entry probe */\n  mhd_log_probe(\"enter\", da, username, username_len, realm, realm_len, password, ha1_bin);\n\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n\n  /* Probe immediately before the call that is reported to cause the violation\n   * (passing a const char * password to digest_update_str). This creates a\n   * log entry that shows the pointer value and contextual state so reviewers\n   * can reproduce the scenario and inspect types/signatures. */\n  mhd_log_probe(\"before_digest_update_str\", da, username, username_len, realm, realm_len, password, ha1_bin);\n\n  digest_update_str (da, password);\n\n  /* Probe after the critical call and after hash calculation. */\n  digest_calc_hash (da, ha1_bin);\n  mhd_log_probe(\"after_digest_calc_hash\", da, username, username_len, realm, realm_len, password, ha1_bin);\n}\n"
}