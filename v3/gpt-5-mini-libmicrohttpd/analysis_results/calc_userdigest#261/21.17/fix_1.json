{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  /* Probe logger: append control-flow and state information to a log file.\n     This helper only prints pointer values and declared lengths to avoid\n     reading memory beyond the caller-provided bounds. It intentionally\n     does not dereference or scan the username/realm/password buffers. */\n  static void probe_log_state(const char *stage,\n                              struct DigestAlgorithm *da,\n                              const char *username, size_t username_len,\n                              const char *realm, size_t realm_len,\n                              const char *password)\n  {\n    FILE *f = fopen(\"/tmp/logs/2619.txt\", \"a\");\n    if (!f)\n      return;\n\n    /* Print a compact single-line record describing the call site. */\n    fprintf(f, \"%s: da=%p hashing=%d username=%p username_len=%zu realm=%p realm_len=%zu password=%p\\n\",\n            stage,\n            (void *) da,\n            (int) da->hashing,\n            (void *) username,\n            username_len,\n            (void *) realm,\n            realm_len,\n            (void *) password);\n\n    fclose(f);\n  }\n\n  mhd_assert (! da->hashing);\n\n  /* Log before and after each string-handling call so callers can reproduce\n     cases where length parameters exceed the actual object size. We only\n     log pointer/length information to avoid causing additional out-of-bounds\n     accesses while probing. */\n  probe_log_state(\"ENTER\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_username\", da, username, username_len, realm, realm_len, password);\n  digest_update (da, username, username_len);\n  probe_log_state(\"AFTER_update_username\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_colon1\", da, username, username_len, realm, realm_len, password);\n  digest_update_with_colon (da);\n  probe_log_state(\"AFTER_update_colon1\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_realm\", da, username, username_len, realm, realm_len, password);\n  digest_update (da, realm, realm_len);\n  probe_log_state(\"AFTER_update_realm\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_colon2\", da, username, username_len, realm, realm_len, password);\n  digest_update_with_colon (da);\n  probe_log_state(\"AFTER_update_colon2\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_password\", da, username, username_len, realm, realm_len, password);\n  digest_update_str (da, password);\n  probe_log_state(\"AFTER_update_password\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_calc_hash\", da, username, username_len, realm, realm_len, password);\n  digest_calc_hash (da, ha1_bin);\n  probe_log_state(\"AFTER_calc_hash\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"EXIT\", da, username, username_len, realm, realm_len, password);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\ndigestauth.c:1908:3: error: function definition is not allowed here\n 1908 |   {\n      |   ^\ndigestauth.c:1933:3: error: call to undeclared function 'probe_log_state'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]\n 1933 |   probe_log_state(\"ENTER\", da, username, username_len, realm, realm_len, password);\n      |   ^\n2 errors generated.\nmake[3]: *** [Makefile:2224: libmicrohttpd_la-digestauth.lo] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of calc_userdigest as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void probe_log_state(const char *stage,\n                              struct DigestAlgorithm *da,\n                              const char *username, size_t username_len,\n                              const char *realm, size_t realm_len,\n                              const char *password)\n{\n  FILE *f = fopen(\"/tmp/logs/2619.txt\", \"a\");\n  if (!f)\n    return;\n\n  /* Print a compact single-line record describing the call site. */\n  fprintf(f, \"%s: da=%p hashing=%d username=%p username_len=%zu realm=%p realm_len=%zu password=%p\\n\",\n          stage,\n          (void *) da,\n          (int) da->hashing,\n          (void *) username,\n          username_len,\n          (void *) realm,\n          realm_len,\n          (void *) password);\n\n  fclose(f);\n}\n\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  /* Probe logger: append control-flow and state information to a log file.\n     This helper only prints pointer values and declared lengths to avoid\n     reading memory beyond the caller-provided bounds. It intentionally\n     does not dereference or scan the username/realm/password buffers. */\n\n  mhd_assert (! da->hashing);\n\n  /* Log before and after each string-handling call so callers can reproduce\n     cases where length parameters exceed the actual object size. We only\n     log pointer/length information to avoid causing additional out-of-bounds\n     accesses while probing. */\n  probe_log_state(\"ENTER\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_username\", da, username, username_len, realm, realm_len, password);\n  digest_update (da, username, username_len);\n  probe_log_state(\"AFTER_update_username\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_colon1\", da, username, username_len, realm, realm_len, password);\n  digest_update_with_colon (da);\n  probe_log_state(\"AFTER_update_colon1\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_realm\", da, username, username_len, realm, realm_len, password);\n  digest_update (da, realm, realm_len);\n  probe_log_state(\"AFTER_update_realm\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_colon2\", da, username, username_len, realm, realm_len, password);\n  digest_update_with_colon (da);\n  probe_log_state(\"AFTER_update_colon2\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_password\", da, username, username_len, realm, realm_len, password);\n  digest_update_str (da, password);\n  probe_log_state(\"AFTER_update_password\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_calc_hash\", da, username, username_len, realm, realm_len, password);\n  digest_calc_hash (da, ha1_bin);\n  probe_log_state(\"AFTER_calc_hash\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"EXIT\", da, username, username_len, realm, realm_len, password);\n}\n",
  "explanation": "The nested function probe_log_state was defined inside calc_userdigest, which is not allowed in standard C. I moved probe_log_state to file scope (defined before calc_userdigest) so it is a normal static function. No other logic was changed; calc_userdigest still calls probe_log_state at the same points."
}