{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call digest_update_str(da, password) provides only a char* with no explicit length. If digest_update_str internally uses <string.h> functions that expect a NUL-terminated C string (e.g. strlen, strcpy, strcat), and the password buffer is not NUL-terminated (or its termination lies past the allocated object), those functions will read beyond the bounds of the password object. Thus this call can violate Rule 21.17 when password is not a valid NUL-terminated string or otherwise not sized as the callee assumes.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2619.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calc_userdigest:\n```c\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n  digest_update_str (da, password);\n  digest_calc_hash (da, ha1_bin);\n}\n```\n</target_code>\nPlease provide the modified calc_userdigest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/2619.txt */\nstatic void\n_probe_log(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/2619.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Hex-dump a buffer of known length to the log file. This reads exactly `len` bytes\n   from `buf` \u2014 the same amount that the original code passes to digest_update, so\n   it preserves original behavior and does not introduce new out-of-bounds reads. */\nstatic void\n_probe_hexdump(const void *buf, size_t len, const char *label)\n{\n  const unsigned char *b = (const unsigned char *) buf;\n  FILE *f = fopen(\"/tmp/logs/2619.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf(f, \"%s (len=%zu):\", label, len);\n  for (size_t i = 0; i < len; ++i)\n    fprintf(f, \" %02x\", (unsigned) b[i]);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  /* Log entry and parameters. We deliberately log the pointer values and the\n     length parameters so that a reproducer can see what was passed in when the\n     call to digest_update_str occurs (which is the suspected problematic call). */\n  _probe_log(\"ENTRY calc_userdigest: da=%p, da->hashing=%d, username=%p, username_len=%zu, realm=%p, realm_len=%zu, password=%p, ha1_bin=%p\",\n             (void *) da,\n             (int) da->hashing,\n             (const void *) username,\n             username_len,\n             (const void *) realm,\n             realm_len,\n             (const void *) password,\n             (void *) ha1_bin);\n\n  /* Log username and realm contents using the provided lengths (these are the\n     same lengths passed to digest_update below). This helps reproduce whether\n     the lengths passed are sensible. */\n  if (username != NULL && username_len > 0)\n    _probe_hexdump(username, username_len, \"username\");\n  if (realm != NULL && realm_len > 0)\n    _probe_hexdump(realm, realm_len, \"realm\");\n\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n\n  /* Important probe: log just before the call that consumes a NUL-terminated\n     string (digest_update_str). If digest_update_str internally uses functions\n     like strlen/strcpy, and password is not NUL-terminated, a crash or out-of-\n     bounds read may occur during or after this log entry. The log entry makes\n     it clear what inputs were provided and where execution reached. */\n  _probe_log(\"ABOUT_TO_CALL digest_update_str: password=%p\", (const void *) password);\n\n  digest_update_str (da, password);\n\n  digest_calc_hash (da, ha1_bin);\n\n  _probe_log(\"EXIT calc_userdigest: completed digest_calc_hash, ha1_bin=%p\", (void *) ha1_bin);\n}\n"
}