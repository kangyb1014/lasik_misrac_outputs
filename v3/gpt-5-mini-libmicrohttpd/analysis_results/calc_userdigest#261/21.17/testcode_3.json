{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: digest_update likely copies username_len bytes from the pointer username (e.g. via memcpy/memmove). If username does not actually point to an object at least username_len bytes long, this call can read beyond the bounds. Example concrete scenario: username points to the string \"bob\" (4 bytes including '\\0') but username_len is 10 (e.g. due to a bug or attacker-controlled value); if digest_update uses memcpy(dest, username, username_len) this will access bytes beyond the end of the username object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2619.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calc_userdigest:\n```c\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n  digest_update_str (da, password);\n  digest_calc_hash (da, ha1_bin);\n}\n```\n</target_code>\nPlease provide the modified calc_userdigest code.\n",
  "test_code": "_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  /* Probe logger: append control-flow and state information to a log file.\n     This helper only prints pointer values and declared lengths to avoid\n     reading memory beyond the caller-provided bounds. It intentionally\n     does not dereference or scan the username/realm/password buffers. */\n  static void probe_log_state(const char *stage,\n                              struct DigestAlgorithm *da,\n                              const char *username, size_t username_len,\n                              const char *realm, size_t realm_len,\n                              const char *password)\n  {\n    FILE *f = fopen(\"/tmp/logs/2619.txt\", \"a\");\n    if (!f)\n      return;\n\n    /* Print a compact single-line record describing the call site. */\n    fprintf(f, \"%s: da=%p hashing=%d username=%p username_len=%zu realm=%p realm_len=%zu password=%p\\n\",\n            stage,\n            (void *) da,\n            (int) da->hashing,\n            (void *) username,\n            username_len,\n            (void *) realm,\n            realm_len,\n            (void *) password);\n\n    fclose(f);\n  }\n\n  mhd_assert (! da->hashing);\n\n  /* Log before and after each string-handling call so callers can reproduce\n     cases where length parameters exceed the actual object size. We only\n     log pointer/length information to avoid causing additional out-of-bounds\n     accesses while probing. */\n  probe_log_state(\"ENTER\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_username\", da, username, username_len, realm, realm_len, password);\n  digest_update (da, username, username_len);\n  probe_log_state(\"AFTER_update_username\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_colon1\", da, username, username_len, realm, realm_len, password);\n  digest_update_with_colon (da);\n  probe_log_state(\"AFTER_update_colon1\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_realm\", da, username, username_len, realm, realm_len, password);\n  digest_update (da, realm, realm_len);\n  probe_log_state(\"AFTER_update_realm\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_colon2\", da, username, username_len, realm, realm_len, password);\n  digest_update_with_colon (da);\n  probe_log_state(\"AFTER_update_colon2\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_update_password\", da, username, username_len, realm, realm_len, password);\n  digest_update_str (da, password);\n  probe_log_state(\"AFTER_update_password\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"BEFORE_calc_hash\", da, username, username_len, realm, realm_len, password);\n  digest_calc_hash (da, ha1_bin);\n  probe_log_state(\"AFTER_calc_hash\", da, username, username_len, realm, realm_len, password);\n\n  probe_log_state(\"EXIT\", da, username, username_len, realm, realm_len, password);\n}"
}