{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a typical assertion macro that evaluates '!da->hashing' only in debug builds but expands to ((void)0) (no code) in production (e.g. when NDEBUG is defined), then the assert expression is an operation whose removal would not affect normal program behaviour. In that configuration the check is effectively dead code (it is executed only for diagnostics and has no impact on released behaviour). If, conversely, mhd_assert produces an observable effect in all builds (logging, abort, or other side\u2011effects), then it would not be dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2612.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calc_userdigest:\n```c\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n  digest_update_str (da, password);\n  digest_calc_hash (da, ha1_bin);\n}\n```\n</target_code>\nPlease provide the modified calc_userdigest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper: append a line to /tmp/logs/2612.txt with formatted data. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2612.txt\", \"a\");\n  if (f == NULL) {\n    return;\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fputc('\\n', f);\n  fflush(f);\n  fclose(f);\n}\n\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  /* Record entry and key parameters/state */\n  probe_log(\"calc_userdigest: entry da=%p, username=%p, username_len=%zu, realm=%p, realm_len=%zu, password=%p, ha1_bin=%p\",\n            (void *)da, (const void *)username, username_len, (const void *)realm, realm_len, (const void *)password, (void *)ha1_bin);\n\n  /* Log the hashing flag before the assertion to capture its runtime value. */\n  probe_log(\"calc_userdigest: before mhd_assert, da->hashing=%d\", da ? (da->hashing ? 1 : 0) : -1);\n\n  /* The original assertion remains in place; we log before and after to observe\n     whether the assertion causes an observable control-flow effect (e.g. abort)\n     or if it is compiled out in production builds. */\n  mhd_assert (! da->hashing);\n\n  /* If this log line appears in the file, the assertion did not abort the\n     process at runtime (or the assertion macro compiled to no-op). */\n  probe_log(\"calc_userdigest: after mhd_assert (reached), da->hashing=%d\", da ? (da->hashing ? 1 : 0) : -1);\n\n  /* Preserve original logic and record progress through each step. */\n  digest_update (da, username, username_len);\n  probe_log(\"calc_userdigest: after digest_update(username)\");\n\n  digest_update_with_colon (da);\n  probe_log(\"calc_userdigest: after digest_update_with_colon (1)\");\n\n  digest_update (da, realm, realm_len);\n  probe_log(\"calc_userdigest: after digest_update(realm)\");\n\n  digest_update_with_colon (da);\n  probe_log(\"calc_userdigest: after digest_update_with_colon (2)\");\n\n  digest_update_str (da, password);\n  probe_log(\"calc_userdigest: after digest_update_str(password)\");\n\n  digest_calc_hash (da, ha1_bin);\n  probe_log(\"calc_userdigest: after digest_calc_hash, exit\");\n}\n"
}