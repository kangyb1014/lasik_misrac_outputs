{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns to the parameter 'nonce_timeout' (a non-pointer parameter) with: if (0 == nonce_timeout) nonce_timeout = connection->daemon->dauth_def_nonce_timeout; \u2014 this directly modifies the parameter variable, which violates MISRA C 2023 Rule 17.8 (function parameters shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_auth_check_all code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2697.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_auth_check_all as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_auth_check_all:\n```c\nstatic enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n\n  buf = NULL;\n  digest_setup_zero (&da);\n  if (0 == nonce_timeout)\n    nonce_timeout = connection->daemon->dauth_def_nonce_timeout;\n  if (0 == max_nc)\n    max_nc = connection->daemon->dauth_def_max_nc;\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n  digest_deinit (&da);\n  if (NULL != buf)\n    free (buf);\n\n  return res;\n}\n```\n</target_code>\nPlease provide the modified digest_auth_check_all code.\n",
  "test_code": "static void digest_probe_log(const char *where, struct MHD_Connection *connection, unsigned int nonce_timeout, uint32_t max_nc, int res, const char *buf_label, const void *buf_ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/2697.txt\", \"a\");\n  if (f)\n  {\n    /* Log basic numeric state */\n    fprintf(f, \"[%s] nonce_timeout=%u, max_nc=%u, res=%d\\n\", where, nonce_timeout, max_nc, res);\n\n    /* Log connection/daemon related values if available */\n    if (connection != NULL)\n    {\n      fprintf(f, \"[%s] connection=%p\\n\", where, (void *) connection);\n      if (connection->daemon != NULL)\n      {\n        fprintf(f, \"[%s] daemon=%p, daemon->dauth_def_nonce_timeout=%u, daemon->dauth_def_max_nc=%u\\n\",\n                where,\n                (void *) connection->daemon,\n                connection->daemon->dauth_def_nonce_timeout,\n                connection->daemon->dauth_def_max_nc);\n      }\n      else\n      {\n        fprintf(f, \"[%s] daemon=NULL\\n\", where);\n      }\n    }\n    else\n    {\n      fprintf(f, \"[%s] connection=NULL\\n\", where);\n    }\n\n    /* Log buffer pointer information if any */\n    if (buf_ptr != NULL)\n      fprintf(f, \"[%s] %s=%p\\n\", where, (buf_label != NULL ? buf_label : \"buf\"), buf_ptr);\n\n    fflush(f);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n\n  /* Initial state log */\n  digest_setup_zero (&da);\n  buf = NULL;\n  digest_probe_log(\"entry\", connection, nonce_timeout, max_nc, -1, NULL, NULL);\n\n  /* This is the key branch that the other agent reported as a violation: record before/after */\n  digest_probe_log(\"before_nonce_check\", connection, nonce_timeout, max_nc, -1, NULL, NULL);\n  if (0 == nonce_timeout)\n    nonce_timeout = connection->daemon->dauth_def_nonce_timeout;\n  digest_probe_log(\"after_nonce_check\", connection, nonce_timeout, max_nc, -1, NULL, NULL);\n\n  /* Also record the max_nc defaulting behavior */\n  digest_probe_log(\"before_max_nc_check\", connection, nonce_timeout, max_nc, -1, NULL, NULL);\n  if (0 == max_nc)\n    max_nc = connection->daemon->dauth_def_max_nc;\n  digest_probe_log(\"after_max_nc_check\", connection, nonce_timeout, max_nc, -1, NULL, NULL);\n\n  /* Log the parameters about to be passed into the inner check */\n  digest_probe_log(\"before_inner_call\", connection, nonce_timeout, max_nc, -1, \"buf\", NULL);\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n\n  /* Log result and buffer pointer returned from inner call */\n  digest_probe_log(\"after_inner_call\", connection, nonce_timeout, max_nc, (int) res, \"buf\", buf);\n\n  digest_deinit (&da);\n  if (NULL != buf)\n    free (buf);\n\n  /* Final return log */\n  digest_probe_log(\"exit\", connection, nonce_timeout, max_nc, (int) res, NULL, NULL);\n\n  return res;\n}\n"
}