{
  "user_message": "An agent A claimed that the following digest_auth_check_all code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of digest_auth_check_all.\n```c\nstatic enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n\n  buf = NULL;\n  digest_setup_zero (&da);\n  if (0 == nonce_timeout)\n    nonce_timeout = connection->daemon->dauth_def_nonce_timeout;\n  if (0 == max_nc)\n    max_nc = connection->daemon->dauth_def_max_nc;\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n  digest_deinit (&da);\n  if (NULL != buf)\n    free (buf);\n\n  return res;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MHD_Connection *connection' is only used for read access (connection->daemon->dauth_def_nonce_timeout and connection->daemon->dauth_def_max_nc) and is passed through to digest_auth_check_all_inner. If neither this function nor the inner function modify the pointed-to MHD_Connection object, the pointer should be const-qualified (e.g. 'const struct MHD_Connection *connection'). Therefore, as written this is a violation of MISRA C 2023 Rule 8.13 unless the callee(s) require a non-const pointer (i.e. they modify the object).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s observation is reasonable but not provably correct from the snippet alone. In digest_auth_check_all the connection parameter is only read (connection->daemon->dauth_def_nonce_timeout and connection->daemon->dauth_def_max_nc) and then passed on to digest_auth_check_all_inner. MISRA C:2023 Rule 8.13 indeed prefers pointer parameters be const-qualified when the pointed object is not modified. However, whether this is a violation depends on the signature and behavior of digest_auth_check_all_inner (and any other callers):\n\n- If digest_auth_check_all_inner (or any other function called with connection) requires a non-const struct MHD_Connection * because it modifies the object, then the current non-const parameter is appropriate and there is no violation. \n- If digest_auth_check_all_inner does not modify the MHD_Connection object (and no other callers require a modifiable pointer), then both the inner and this outer function should be changed to take a const struct MHD_Connection * to satisfy Rule 8.13.\n\nSo the report is not conclusively correct as given \u2014 you must inspect the inner function\u2019s prototype/implementation (and other call sites) to determine whether the pointer can be made const. If they do not modify the object, change the declarations to use const (and propagate that change) to comply with Rule 8.13."
}