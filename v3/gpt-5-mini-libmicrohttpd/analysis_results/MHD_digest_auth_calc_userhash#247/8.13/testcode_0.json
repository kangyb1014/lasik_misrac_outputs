{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the callee calc_userhash is declared to take non-const character pointers (e.g. char *username, char *realm) then this call violates Rule 8.13: the input pointers are const-qualified in the caller but are not declared const in the callee, so the pointer types are not const-qualified where possible. If, instead, calc_userhash is declared to take const char * for those parameters, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userhash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userhash as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userhash:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userhash (&da,\n                   username,\n                   strlen (username),\n                   realm,\n                   strlen (realm),\n                   userhash_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userhash code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append a single line to /tmp/logs/2473.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/2473.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  probe_log(\"ENTER: MHD_digest_auth_calc_userhash algo3=%d username=%p realm=%p userhash_bin=%p bin_buf_size=%zu\",\n            (int) algo3, (const void *) username, (const void *) realm, userhash_bin, bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    probe_log(\"digest_init_one_time: FAILED -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  {\n    size_t ds = digest_get_size (&da);\n    probe_log(\"digest_get_size=%zu bin_buf_size=%zu\", ds, bin_buf_size);\n    if (ds > bin_buf_size)\n      ret = MHD_NO;\n    else\n    {\n      /* Log string contents (limited) and lengths. Keep original call semantics. */\n      size_t uname_len = username ? strlen (username) : 0;\n      size_t realm_len = realm ? strlen (realm) : 0;\n\n      probe_log(\"About to call calc_userhash: username=%p len=%zu (preview=\\\"%.*s\\\") realm=%p len=%zu (preview=\\\"%.*s\\\") userhash_bin=%p\",\n                (const void *) username, uname_len, (int) (uname_len < 32 ? uname_len : 32), username ? username : \"\",\n                (const void *) realm, realm_len, (int) (realm_len < 32 ? realm_len : 32), realm ? realm : \"\",\n                userhash_bin);\n\n      /* Preserve original behavior and call calc_userhash exactly as before. */\n      calc_userhash (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     userhash_bin);\n\n      probe_log(\"calc_userhash: called (username=%p realm=%p). Setting ret = MHD_YES\",\n                (const void *) username, (const void *) realm);\n      ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n      if (digest_ext_error (&da))\n      {\n        probe_log(\"digest_ext_error: detected -> setting ret = MHD_NO\");\n        ret = MHD_NO;\n      }\n      else\n      {\n        probe_log(\"digest_ext_error: none detected\");\n      }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    }\n  }\n\n  digest_deinit (&da);\n  probe_log(\"EXIT: MHD_digest_auth_calc_userhash returning ret=%d\", (int) ret);\n\n  return ret;\n}\n"
}