{
  "user_message": "An agent A claimed that the following MHD_digest_auth_calc_userhash code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_calc_userhash.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userhash (&da,\n                   username,\n                   strlen (username),\n                   realm,\n                   strlen (realm),\n                   userhash_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls strlen(username) and strlen(realm) without checking that those pointers are non-NULL and point to NUL-terminated objects. If the caller supplies NULL or a non-terminated buffer (or a buffer whose terminator lies beyond its allocated bounds), strlen will read past the object bounds, violating Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 21.17 requires that uses of string.h routines must not read beyond the bounds of the objects referenced by their pointer parameters. In the shown code MHD_digest_auth_calc_userhash the calls strlen(username) and strlen(realm) are made with no prior checks that username and realm are non-NULL and point to NUL-terminated objects. If a caller were to pass NULL or a non-terminated buffer (or a buffer whose terminator lies beyond its allocated bounds), strlen would read out of bounds, violating Rule 21.17. \n\nTherefore, unless there is an externally enforced and verifiable precondition (API contract) that guarantees both pointers are non-NULL and refer to NUL-terminated buffers, the code as presented is non-compliant with Rule 21.17. To remedy this locally, the function should validate the pointers (e.g. check for NULL) or otherwise ensure/receive the lengths of the inputs so that no out-of-bounds reads can occur. \n\nIn summary: the agent A report is correct for the code as shown; compliance would only be achieved if a documented and enforced precondition guarantees valid, NUL-terminated pointers."
}