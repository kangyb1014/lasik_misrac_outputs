{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userhash:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userhash (&da,\n                   username,\n                   strlen (username),\n                   realm,\n                   strlen (realm),\n                   userhash_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment appears to be statically unreachable. Reasoning:\n- The early return (if (!digest_init_one_time(...)) return MHD_NO;) is a runtime conditional return \u2014 the code that follows is reachable when digest_init_one_time returns true. This is valid control flow, not unreachable code.\n- The two main branches (digest_get_size(&da) > bin_buf_size and the else) both assign ret and are reachable depending on the runtime check; the else branch contains calc_userhash and the conditional error check \u2014 these are reachable when the size check succeeds.\n- The final digest_deinit(&da) and return ret are executed on all paths where init succeeded, so they are not unreachable.\n- There is no code after an unconditional return, no dead labels, and no constant conditions evident that would make a branch impossible at compile time.\n- The #ifdef MHD_DIGEST_HAS_EXT_ERROR block is a conditional compilation construct; if the macro is not defined that code is not compiled rather than being unreachable in the compiled program \u2014 this does not violate the unreachable-code rule in the compiled code. \n\nNote: Other issues (e.g., potential NULL pointer use of username/realm, buffer-size checks beyond the provided size check) may deserve review but are not instances of unreachable code under MISRA C Rule 2.1, so they are not reported here."
}