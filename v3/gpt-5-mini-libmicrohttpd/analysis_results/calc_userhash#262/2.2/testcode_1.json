{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a debug assertion macro that only evaluates a condition (for example #define mhd_assert(x) ((void)0) in release or ((void)(x)) in some configurations) then the statement performs no observable side effect (it only reads da->hashing). Removing that call would not change program behaviour, so the operation is dead code and Rule 2.2 is violated. (If, conversely, mhd_assert can cause termination on failure or the read has side effects\u2014e.g. da->hashing is volatile\u2014then it would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userhash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2622.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calc_userhash as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calc_userhash:\n```c\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_calc_hash (da, digest_bin);\n}\n```\n</target_code>\nPlease provide the modified calc_userhash code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper that appends a formatted log line to /tmp/logs/2622.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/2622.txt\", \"a\");\n    if (NULL == f) {\n        return; /* best-effort logging; do not change program flow */\n    }\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\n/* The original function with lightweight probes inserted.  The logic of the\n   function is preserved; probes only log state and control-path information.\n*/\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  /* Log entry and basic parameters. Keep this read-only and best-effort. */\n  probe_log(\"calc_userhash: entry da=%p username=%p username_len=%zu realm=%p realm_len=%zu digest_bin=%p\",\n            (void *)da, (void *)username, username_len, (void *)realm, realm_len, (void *)digest_bin);\n\n  /* Preserve original assertions. Insert a probe immediately after each\n     assertion so logs can indicate whether control reached that point. */\n  mhd_assert (NULL != username);\n  probe_log(\"calc_userhash: after mhd_assert(NULL != username): username=%p\", (void *)username);\n\n  mhd_assert (! da->hashing);\n  /* Read da->hashing for logging. This mirrors the original assertion's\n     intent (to check hashing). This is a read-only probe to record the\n     observed value for post-mortem analysis. */\n  if (NULL != da) {\n    probe_log(\"calc_userhash: after mhd_assert(! da->hashing): da=%p hashing=%d\", (void *)da, (int)(da->hashing));\n  } else {\n    probe_log(\"calc_userhash: after mhd_assert(! da->hashing): da=NULL\");\n  }\n\n  /* Log before performing the digest updates to capture control flow. */\n  probe_log(\"calc_userhash: about to digest_update username (len=%zu)\", username_len);\n  digest_update (da, username, username_len);\n  probe_log(\"calc_userhash: returned from digest_update username\");\n\n  probe_log(\"calc_userhash: about to digest_update_with_colon\");\n  digest_update_with_colon (da);\n  probe_log(\"calc_userhash: returned from digest_update_with_colon\");\n\n  probe_log(\"calc_userhash: about to digest_update realm (len=%zu)\", realm_len);\n  digest_update (da, realm, realm_len);\n  probe_log(\"calc_userhash: returned from digest_update realm\");\n\n  probe_log(\"calc_userhash: about to digest_calc_hash\");\n  digest_calc_hash (da, digest_bin);\n  probe_log(\"calc_userhash: returned from digest_calc_hash\\ncalc_userhash: exit\");\n}\n"
}