{
  "user_message": "An agent A claimed that the following calc_userhash code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of calc_userhash.\n```c\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_calc_hash (da, digest_bin);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nPotential violation: calc_userhash passes realm and realm_len to digest_update without validating realm or its termination. If digest_update uses a <string.h> function that expects a NUL-terminated C string (e.g. strlen, strcpy, strcat) while realm is not NUL-terminated, strlen(realm) (or similar) will read beyond the realm object bounds. Likewise, if digest_update calls memcpy/memmove with a length greater than the actual allocated size of realm (or if realm is NULL), that will access out of bounds. Therefore the fragment can violate Rule 21.17 unless digest_update is implemented to use the provided realm_len safely (e.g. memcpy with realm_len and a non-NULL pointer) and/or performs appropriate checks.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not justified by the fragment shown. calc_userhash itself does not call any <string.h> functions; it merely forwards pointer+length pairs to digest_update (and related digest helpers). MISRA C 2023 Rule 21.17 concerns uses of standard string functions that may read past object bounds \u2014 such a violation would only be present if digest_update (or another callee) internally used a string.h function that assumes NUL termination or used a length larger than the actual object. That implementation detail is not present in the provided code, so you cannot conclude a Rule 21.17 violation from calc_userhash alone. The agent\u2019s scenario is a valid concern to audit (i.e. verify digest_update uses the provided length and does not call strlen/strcpy/etc. on non-terminated buffers and that pointers are non-NULL), but it does not prove a violation in this snippet."
}