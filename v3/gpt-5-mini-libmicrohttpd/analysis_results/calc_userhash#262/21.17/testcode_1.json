{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: calc_userhash passes realm and realm_len to digest_update without validating realm or its termination. If digest_update uses a <string.h> function that expects a NUL-terminated C string (e.g. strlen, strcpy, strcat) while realm is not NUL-terminated, strlen(realm) (or similar) will read beyond the realm object bounds. Likewise, if digest_update calls memcpy/memmove with a length greater than the actual allocated size of realm (or if realm is NULL), that will access out of bounds. Therefore the fragment can violate Rule 21.17 unless digest_update is implemented to use the provided realm_len safely (e.g. memcpy with realm_len and a non-NULL pointer) and/or performs appropriate checks.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userhash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2629.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of calc_userhash as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of calc_userhash:\n```c\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_calc_hash (da, digest_bin);\n}\n```\n</target_code>\nPlease provide the modified calc_userhash code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append logs to /tmp/logs/2629.txt. Designed to be safe when\n   given non-NUL-terminated buffers by respecting explicit lengths and\n   checking for NULL pointers. */\nstatic void probe_log_buffer(const char *label, const void *buf, size_t len)\n{\n  FILE *f = fopen(\"/tmp/logs/2629.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[probe] %s: ptr=%p len=%zu\\n\", label, buf, (size_t)len);\n  if (buf != NULL && len > 0) {\n    const unsigned char *b = (const unsigned char *) buf;\n    fprintf(f, \"[probe] %s hex:\", label);\n    /* Print each byte up to the provided length only. This avoids any\n       reads beyond the object bounds and does not rely on NUL\n       termination. */\n    for (size_t i = 0; i < len; ++i) {\n      fprintf(f, \" %02x\", (unsigned) b[i]);\n    }\n    fprintf(f, \"\\n\");\n  }\n  fclose(f);\n}\n\nstatic void probe_log_event(const char *fmt, const void *p1, size_t v1, const void *p2, size_t v2)\n{\n  FILE *f = fopen(\"/tmp/logs/2629.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Generic event logging with two pointer/size pairs. */\n  fprintf(f, \"[probe] \");\n  fprintf(f, fmt, p1, (unsigned long long) v1, p2, (unsigned long long) v2);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  /* Preserve original assertions and control flow. */\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n\n  /* Log entry and input buffers safely. Do not rely on NUL-termination. */\n  probe_log_event(\"enter calc_userhash: da=%p username_len=%llu realm=%p realm_len=%llu\", (void *) da, 0ULL, (void *) realm, realm_len);\n  probe_log_buffer(\"username\", username, username_len);\n  probe_log_buffer(\"realm\", realm, realm_len);\n  probe_log_event(\"digest_bin ptr=%p (not dumping contents)\", (void *) digest_bin, 0ULL, NULL, 0ULL);\n\n  /* Call original functions in the original order, with probes before and after\n     each call so the control flow and parameters are visible in the log. */\n  probe_log_event(\"about to call digest_update(username): ptr=%p len=%llu\", (const void *) username, username_len, NULL, 0ULL);\n  digest_update (da, username, username_len);\n  probe_log_event(\"returned from digest_update(username)\", (void *) da, 0ULL, NULL, 0ULL);\n\n  probe_log_event(\"about to call digest_update_with_colon()\", NULL, 0ULL, NULL, 0ULL);\n  digest_update_with_colon (da);\n  probe_log_event(\"returned from digest_update_with_colon()\", (void *) da, 0ULL, NULL, 0ULL);\n\n  probe_log_event(\"about to call digest_update(realm): ptr=%p len=%llu\", (const void *) realm, realm_len, NULL, 0ULL);\n  /* This is the call that may cause an out-of-bounds access inside digest_update\n     if digest_update expects NUL-terminated strings instead of using the\n     provided length. Logging above captures the pointer and length so that\n     reproducer agents can inspect whether realm is NUL-terminated and its\n     actual length. */\n  digest_update (da, realm, realm_len);\n  probe_log_event(\"returned from digest_update(realm)\", (void *) da, 0ULL, NULL, 0ULL);\n\n  probe_log_event(\"about to call digest_calc_hash(digest_bin): ptr=%p\", (void *) digest_bin, 0ULL, NULL, 0ULL);\n  digest_calc_hash (da, digest_bin);\n  probe_log_event(\"returned from digest_calc_hash(digest_bin)\", (void *) da, 0ULL, NULL, 0ULL);\n\n  probe_log_event(\"exit calc_userhash\", (void *) da, 0ULL, NULL, 0ULL);\n}\n"
}