{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of calc_userhash:\n```c\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_calc_hash (da, digest_bin);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ndigest_update (da, realm, realm_len);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "Potential violation: calc_userhash passes realm and realm_len to digest_update without validating realm or its termination. If digest_update uses a <string.h> function that expects a NUL-terminated C string (e.g. strlen, strcpy, strcat) while realm is not NUL-terminated, strlen(realm) (or similar) will read beyond the realm object bounds. Likewise, if digest_update calls memcpy/memmove with a length greater than the actual allocated size of realm (or if realm is NULL), that will access out of bounds. Therefore the fragment can violate Rule 21.17 unless digest_update is implemented to use the provided realm_len safely (e.g. memcpy with realm_len and a non-NULL pointer) and/or performs appropriate checks."
}