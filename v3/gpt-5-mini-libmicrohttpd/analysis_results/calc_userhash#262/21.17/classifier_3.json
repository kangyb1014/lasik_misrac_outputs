{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of calc_userhash:\n```c\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_calc_hash (da, digest_bin);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ndigest_update (da, username, username_len);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call itself does not directly invoke any <string.h> function, so Rule 21.17 is not violated by this fragment alone. A violation can occur if the implementation of digest_update uses string.h functions unsafely. Example violation scenarios:\n\n1) digest_update calls memcpy(buffer, username, username_len) but username actually points to a buffer smaller than username_len (e.g. allocated size 8, username_len == 12) \u2014 memcpy would read beyond the username buffer.\n\n2) digest_update uses a c-string function such as strlen/strcpy/strcat on username (i.e. assumes a NUL-terminated string) but the provided username is not NUL-terminated within accessible memory or username_len does not reflect a terminating NUL \u2014 strlen/strcpy would read past bounds.\n\nTo ensure compliance, digest_update must use length-bounded operations and validate that username_len does not exceed the actual buffer size or require/validate a terminating NUL if it relies on c-string functions."
}