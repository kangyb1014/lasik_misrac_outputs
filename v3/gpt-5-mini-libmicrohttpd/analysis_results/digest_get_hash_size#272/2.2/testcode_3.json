{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion compares two compile-time constants (MHD_SHA256_DIGEST_SIZE and SHA256_DIGEST_SIZE). As written this is a tautological, side-effect-free check: it will always evaluate to true in a correct configuration, so executing it does not alter program behaviour and its removal would not change the program. Therefore, when mhd_assert expands to code that is executed (e.g. in debug builds), this constitutes dead code under Rule 2.2. (If mhd_assert is compiled out entirely in release builds, it is not executed there, but that does not remove the violation in builds where the assertion is active.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_hash_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2722.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_get_hash_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_get_hash_size:\n```c\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    return MHD_MD5_DIGEST_SIZE;\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    return MHD_SHA256_DIGEST_SIZE;\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    return MHD_SHA512_256_DIGEST_SIZE;\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n```\n</target_code>\nPlease provide the modified digest_get_hash_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helpers: write observations to the log file. Kept static inline to\n   avoid external linkage and to minimize footprint. */\nstatic inline void\nmhd_log_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2722.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic inline void\nmhd_log_probe_constants(const char *label, size_t a, size_t b, const char *file, int line)\n{\n    mhd_log_write(\"PROBE: %s: comparing constants at %s:%d -> a=%zu, b=%zu\", label, file, line, a, b);\n}\n\nstatic inline void\nmhd_log_probe_algo_count(unsigned int algo_val, int md5_flag, int sha256_flag, int sha512_256_flag, int count, const char *file, int line)\n{\n    mhd_log_write(\"PROBE: Only-one-algo assert at %s:%d -> algo=0x%08x, md5=%d, sha256=%d, sha512_256=%d, sum=%d\",\n                  file, line, algo_val, md5_flag, sha256_flag, sha512_256_flag, count);\n}\n\nstatic inline void\nmhd_log_probe_selection(unsigned int algo_val, const char *selected, size_t size, const char *file, int line)\n{\n    mhd_log_write(\"PROBE: selection at %s:%d -> algo=0x%08x selected=%s size=%zu\", file, line, algo_val, selected, size);\n}\n\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  /* Probe before the assertion comparing MD5 sizes */\n  mhd_log_probe_constants(\"MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE\",\n                          (size_t) MHD_MD5_DIGEST_SIZE,\n                          (size_t) MD5_DIGEST_SIZE,\n                          __FILE__, __LINE__);\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  /* Probe before the assertion comparing SHA256 sizes */\n  mhd_log_probe_constants(\"MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE\",\n                          (size_t) MHD_SHA256_DIGEST_SIZE,\n                          (size_t) SHA256_DIGEST_SIZE,\n                          __FILE__, __LINE__);\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  /* Probe before the assertion comparing SHA512/256 sizes */\n  mhd_log_probe_constants(\"MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE\",\n                          (size_t) MHD_SHA512_256_DIGEST_SIZE,\n                          (size_t) SHA512_256_DIGEST_SIZE,\n                          __FILE__, __LINE__);\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  /* Probe the relation between SHA256 and SHA512/256 if both supported */\n  mhd_log_probe_constants(\"SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE\",\n                          (size_t) SHA256_DIGEST_SIZE,\n                          (size_t) SHA512_256_DIGEST_SIZE,\n                          __FILE__, __LINE__);\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  {\n    int md5_flag = ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0);\n    int sha256_flag = ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0);\n    int sha512_256_flag = ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0);\n    int sum = md5_flag + sha256_flag + sha512_256_flag;\n    /* Probe the computed flags and sum just before the assertion */\n    mhd_log_probe_algo_count((unsigned int) algo3, md5_flag, sha256_flag, sha512_256_flag, sum, __FILE__, __LINE__);\n  }\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5))) {\n    mhd_log_probe_selection((unsigned int) algo3, \"MD5\", (size_t) MHD_MD5_DIGEST_SIZE, __FILE__, __LINE__);\n    return MHD_MD5_DIGEST_SIZE;\n  } else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))) {\n    mhd_log_probe_selection((unsigned int) algo3, \"SHA256_or_SHA512_256\", (size_t) MHD_SHA256_DIGEST_SIZE, __FILE__, __LINE__);\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  } else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256))) {\n    mhd_log_probe_selection((unsigned int) algo3, \"SHA256\", (size_t) MHD_SHA256_DIGEST_SIZE, __FILE__, __LINE__);\n    return MHD_SHA256_DIGEST_SIZE;\n  } else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))) {\n    mhd_log_probe_selection((unsigned int) algo3, \"SHA512_256\", (size_t) MHD_SHA512_256_DIGEST_SIZE, __FILE__, __LINE__);\n    return MHD_SHA512_256_DIGEST_SIZE;\n  } else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  mhd_log_write(\"PROBE: returning 0 (unsupported or wrong input) for algo=0x%08x\", (unsigned int) algo3);\n  return 0; /* Wrong input or unsupported algorithm */\n}\n"
}