{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is enabled at runtime and the two macros MHD_SHA512_256_DIGEST_SIZE and SHA512_256_DIGEST_SIZE are compile\u2011time constants and equal (the expected/typical case), the statement merely evaluates a constant boolean expression (no side effects) and will always succeed. That means the operation is executed but its removal would not affect program behaviour \u2014 it qualifies as dead code and therefore violates MISRA C 2023 Rule 2.2. (If, conversely, mhd_assert can abort on failure or is compiled out entirely, the presence/absence can affect behaviour and then this specific line would not be considered dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_hash_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2722.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_get_hash_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_get_hash_size:\n```c\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    return MHD_MD5_DIGEST_SIZE;\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    return MHD_SHA256_DIGEST_SIZE;\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    return MHD_SHA512_256_DIGEST_SIZE;\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n```\n</target_code>\nPlease provide the modified digest_get_hash_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append a formatted message to the log file for evidence collection. */\nstatic void\nmhd_log_msg (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/2722.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic void\nmhd_log_state (enum MHD_DigestAuthAlgo3 algo3, const char *stage)\n{\n  /* Log the algorithm selection value */\n  mhd_log_msg (\"[digest_get_hash_size] stage=%s algo3=0x%X\", stage, (unsigned) algo3);\n\n#ifdef MHD_MD5_SUPPORT\n  /* Log MD5 size constants and their equality check */\n  mhd_log_msg (\"[digest_get_hash_size] MHD_MD5_DIGEST_SIZE=%u MD5_DIGEST_SIZE=%u equal=%d\",\n               (unsigned) MHD_MD5_DIGEST_SIZE,\n               (unsigned) MD5_DIGEST_SIZE,\n               (int) (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE));\n#else\n  mhd_log_msg (\"[digest_get_hash_size] MHD_MD5_SUPPORT not compiled\");\n#endif\n\n#ifdef MHD_SHA256_SUPPORT\n  mhd_log_msg (\"[digest_get_hash_size] MHD_SHA256_DIGEST_SIZE=%u SHA256_DIGEST_SIZE=%u equal=%d\",\n               (unsigned) MHD_SHA256_DIGEST_SIZE,\n               (unsigned) SHA256_DIGEST_SIZE,\n               (int) (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE));\n#else\n  mhd_log_msg (\"[digest_get_hash_size] MHD_SHA256_SUPPORT not compiled\");\n#endif\n\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_log_msg (\"[digest_get_hash_size] MHD_SHA512_256_DIGEST_SIZE=%u SHA512_256_DIGEST_SIZE=%u equal=%d\",\n               (unsigned) MHD_SHA512_256_DIGEST_SIZE,\n               (unsigned) SHA512_256_DIGEST_SIZE,\n               (int) (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE));\n#ifdef MHD_SHA256_SUPPORT\n  mhd_log_msg (\"[digest_get_hash_size] SHA256_DIGEST_SIZE=%u SHA512_256_DIGEST_SIZE=%u equal=%d\",\n               (unsigned) SHA256_DIGEST_SIZE,\n               (unsigned) SHA512_256_DIGEST_SIZE,\n               (int) (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE));\n#endif\n#else\n  mhd_log_msg (\"[digest_get_hash_size] MHD_SHA512_256_SUPPORT not compiled\");\n#endif\n}\n\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  /* Log state before the assert so we capture constant values and the evaluation */\n  mhd_log_state (algo3, \"before_mhd_assert_md5\");\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_log_state (algo3, \"before_mhd_assert_sha256\");\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_log_state (algo3, \"before_mhd_assert_sha512_256\");\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  {\n    unsigned int bit_md5 = 0u;\n    unsigned int bit_sha256 = 0u;\n    unsigned int bit_sha512_256 = 0u;\n\n#ifdef MHD_MD5_SUPPORT\n    bit_md5 = (0u != (((unsigned int) algo3) & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5))) ? 1u : 0u;\n#endif\n#ifdef MHD_SHA256_SUPPORT\n    bit_sha256 = (0u != (((unsigned int) algo3) & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256))) ? 1u : 0u;\n#endif\n#ifdef MHD_SHA512_256_SUPPORT\n    bit_sha512_256 = (0u != (((unsigned int) algo3) & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))) ? 1u : 0u;\n#endif\n\n    unsigned int sum = bit_md5 + bit_sha256 + bit_sha512_256;\n    mhd_log_msg (\"[digest_get_hash_size] algorithm bits md5=%u sha256=%u sha512_256=%u sum=%u\",\n                 bit_md5, bit_sha256, bit_sha512_256, sum);\n  }\n\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5))) {\n    mhd_log_msg (\"[digest_get_hash_size] taking MD5 branch, returning %u\", (unsigned) MHD_MD5_DIGEST_SIZE);\n    return MHD_MD5_DIGEST_SIZE;\n  } else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))) {\n    mhd_log_msg (\"[digest_get_hash_size] taking SHA256/SHA512_256 combined branch, returning %u\",\n                 (unsigned) MHD_SHA256_DIGEST_SIZE);\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  } else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256))) {\n    mhd_log_msg (\"[digest_get_hash_size] taking SHA256 branch, returning %u\", (unsigned) MHD_SHA256_DIGEST_SIZE);\n    return MHD_SHA256_DIGEST_SIZE;\n  } else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))) {\n    mhd_log_msg (\"[digest_get_hash_size] taking SHA512_256 branch, returning %u\", (unsigned) MHD_SHA512_256_DIGEST_SIZE);\n    return MHD_SHA512_256_DIGEST_SIZE;\n  } else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  mhd_log_msg (\"[digest_get_hash_size] unsupported or wrong input, returning 0\");\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n"
}