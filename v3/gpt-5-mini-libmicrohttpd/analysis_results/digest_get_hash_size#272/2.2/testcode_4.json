{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion compares two compile-time macros (SHA256_DIGEST_SIZE and SHA512_256_DIGEST_SIZE). When both MHD_SHA256_SUPPORT and MHD_SHA512_256_SUPPORT are defined this becomes a runtime check of constant values (no side effects); removing that check would not change program behaviour, so it is dead code. A compile-time assertion (e.g. _Static_assert) should be used instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_hash_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2722.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_get_hash_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_get_hash_size:\n```c\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    return MHD_MD5_DIGEST_SIZE;\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    return MHD_SHA256_DIGEST_SIZE;\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    return MHD_SHA512_256_DIGEST_SIZE;\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n```\n</target_code>\nPlease provide the modified digest_get_hash_size code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a line to /tmp/logs/2722.txt with simple state info. */\nstatic void\nmhd_probe_log (const char *label, unsigned int algo3, size_t v1, size_t v2)\n{\n  FILE *f = fopen(\"/tmp/logs/2722.txt\", \"a\");\n  if (f)\n    {\n      /* Keep format simple and avoid heavy formatting to reduce risk of new issues. */\n      fprintf (f, \"%s: algo3=0x%X, v1=%zu, v2=%zu\\n\", label, (unsigned int) algo3, v1, v2);\n      fclose (f);\n    }\n}\n\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n  /* Log entry with the raw algo3 value */\n  mhd_probe_log (\"ENTER\", (unsigned int) algo3, 0, 0);\n\n#ifdef MHD_MD5_SUPPORT\n  /* Log the values involved in the MD5 size assertion */\n  mhd_probe_log (\"ASSERT_MD5_EQ_CHECK\", (unsigned int) algo3,\n                 (size_t) MHD_MD5_DIGEST_SIZE, (size_t) MD5_DIGEST_SIZE);\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  /* Log the values involved in the SHA256 size assertion */\n  mhd_probe_log (\"ASSERT_SHA256_EQ_CHECK\", (unsigned int) algo3,\n                 (size_t) MHD_SHA256_DIGEST_SIZE, (size_t) SHA256_DIGEST_SIZE);\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  /* Log the values involved in the SHA512/256 size assertion */\n  mhd_probe_log (\"ASSERT_SHA512_256_EQ_CHECK\", (unsigned int) algo3,\n                 (size_t) MHD_SHA512_256_DIGEST_SIZE, (size_t) SHA512_256_DIGEST_SIZE);\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  /* This is the specific comparison noted in the violation scenario: two compile-time\n     macros are compared. Log their values immediately before the assert so that\n     a run with both supports enabled records the constant values and the fact that\n     this check was executed at runtime. */\n  mhd_probe_log (\"ASSERT_SHA256_EQ_SHA512_256_CHECK\", (unsigned int) algo3,\n                 (size_t) SHA256_DIGEST_SIZE, (size_t) SHA512_256_DIGEST_SIZE);\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n\n  /* Log the post-assert entry (algorithm bits) */\n  mhd_probe_log (\"POST_ASSERT_ALGO_BITS\", (unsigned int) algo3, 0, 0);\n\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    {\n      mhd_probe_log (\"RETURN_MD5\", (unsigned int) algo3, (size_t) MHD_MD5_DIGEST_SIZE, 0);\n      return MHD_MD5_DIGEST_SIZE;\n    }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    {\n      /* The same as SHA512_256_DIGEST_SIZE */\n      mhd_probe_log (\"RETURN_SHA256_OR_SHA512_256\", (unsigned int) algo3,\n                     (size_t) MHD_SHA256_DIGEST_SIZE, (size_t) MHD_SHA512_256_DIGEST_SIZE);\n      return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n    }\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    {\n      mhd_probe_log (\"RETURN_SHA256\", (unsigned int) algo3, (size_t) MHD_SHA256_DIGEST_SIZE, 0);\n      return MHD_SHA256_DIGEST_SIZE;\n    }\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    {\n      mhd_probe_log (\"RETURN_SHA512_256\", (unsigned int) algo3, (size_t) MHD_SHA512_256_DIGEST_SIZE, 0);\n      return MHD_SHA512_256_DIGEST_SIZE;\n    }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  mhd_probe_log (\"RETURN_0\", (unsigned int) algo3, 0, 0);\n  return 0; /* Wrong input or unsupported algorithm */\n}\n"
}