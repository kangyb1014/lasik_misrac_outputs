{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert call compares two compile-time constants (MHD_MD5_DIGEST_SIZE and MD5_DIGEST_SIZE). If these macros are equal the test is always true and has no side effects, so its execution does not affect program behaviour; removing the assertion (or it being compiled away by a release build macro) would not change program behaviour. Therefore this assertion is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_hash_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2722.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_get_hash_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_get_hash_size:\n```c\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    return MHD_MD5_DIGEST_SIZE;\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    return MHD_SHA256_DIGEST_SIZE;\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    return MHD_SHA512_256_DIGEST_SIZE;\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n```\n</target_code>\nPlease provide the modified digest_get_hash_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\n/* Probe helper: write diagnostic lines to /tmp/logs/2722.txt. */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  /* Best-effort create directory; ignore errors. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  FILE *f = fopen(\"/tmp/logs/2722.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n  mhd_log_probe (\"digest_get_hash_size: entry, algo3=0x%X\", (unsigned int) algo3);\n\n#ifdef MHD_MD5_SUPPORT\n  /* Log the compile-time constants that are compared by the assertion. */\n  mhd_log_probe (\"MHD_MD5_DIGEST_SIZE=%u, MD5_DIGEST_SIZE=%u\",\n                 (unsigned int) MHD_MD5_DIGEST_SIZE,\n                 (unsigned int) MD5_DIGEST_SIZE);\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_log_probe (\"MHD_SHA256_DIGEST_SIZE=%u, SHA256_DIGEST_SIZE=%u\",\n                 (unsigned int) MHD_SHA256_DIGEST_SIZE,\n                 (unsigned int) SHA256_DIGEST_SIZE);\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_log_probe (\"MHD_SHA512_256_DIGEST_SIZE=%u, SHA512_256_DIGEST_SIZE=%u\",\n                 (unsigned int) MHD_SHA512_256_DIGEST_SIZE,\n                 (unsigned int) SHA512_256_DIGEST_SIZE);\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_log_probe (\"SHA256_DIGEST_SIZE=%u, SHA512_256_DIGEST_SIZE=%u\",\n                 (unsigned int) SHA256_DIGEST_SIZE,\n                 (unsigned int) SHA512_256_DIGEST_SIZE);\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_log_probe (\"Checking single-algo invariant: algo3=0x%X\",\n                 (unsigned int) algo3);\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n  {\n    mhd_log_probe (\"Branch: MD5 selected, returning %u\",\n                   (unsigned int) MHD_MD5_DIGEST_SIZE);\n    return MHD_MD5_DIGEST_SIZE;\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n  {\n    mhd_log_probe (\"Branch: SHA256 or SHA512_256 selected, returning %u\",\n                   (unsigned int) MHD_SHA256_DIGEST_SIZE);\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  }\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n  {\n    mhd_log_probe (\"Branch: SHA256 selected, returning %u\",\n                   (unsigned int) MHD_SHA256_DIGEST_SIZE);\n    return MHD_SHA256_DIGEST_SIZE;\n  }\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n  {\n    mhd_log_probe (\"Branch: SHA512_256 selected, returning %u\",\n                   (unsigned int) MHD_SHA512_256_DIGEST_SIZE);\n    return MHD_SHA512_256_DIGEST_SIZE;\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  mhd_log_probe (\"Unsupported or wrong input: returning 0\");\n  return 0; /* Wrong input or unsupported algorithm */\n}\n"
}