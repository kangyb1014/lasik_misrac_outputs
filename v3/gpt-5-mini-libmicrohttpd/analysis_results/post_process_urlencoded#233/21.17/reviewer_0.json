{
  "user_message": "An agent A claimed that the following post_process_urlencoded code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of post_process_urlencoded.\n```c\nstatic enum MHD_Result\npost_process_urlencoded (struct MHD_PostProcessor *pp,\n                         const char *post_data,\n                         size_t post_data_len)\n{\n  char *kbuf = (char *) &pp[1];\n  size_t poff;\n  const char *start_key = NULL;\n  const char *end_key = NULL;\n  const char *start_value = NULL;\n  const char *end_value = NULL;\n  const char *last_escape = NULL;\n\n  mhd_assert (PP_Callback != pp->state);\n\n  poff = 0;\n  while ( ( (poff < post_data_len) ||\n            (pp->state == PP_Callback) ) &&\n          (pp->state != PP_Error) )\n  {\n    switch (pp->state)\n    {\n    case PP_Error:\n      /* clearly impossible as per while loop invariant */\n      abort ();\n      break; /* Unreachable */\n    case PP_Init:\n      /* initial phase */\n      mhd_assert (NULL == start_key);\n      mhd_assert (NULL == end_key);\n      mhd_assert (NULL == start_value);\n      mhd_assert (NULL == end_value);\n      switch (post_data[poff])\n      {\n      case '=':\n        /* Case: (no key)'=' */\n        /* Empty key with value */\n        pp->state = PP_Error;\n        continue;\n      case '&':\n        /* Case: (no key)'&' */\n        /* Empty key without value */\n        poff++;\n        continue;\n      case '\\n':\n      case '\\r':\n        /* Case: (no key)'\\n' or (no key)'\\r' */\n        pp->state = PP_Done;\n        poff++;\n        break;\n      default:\n        /* normal character, key start, advance! */\n        pp->state = PP_ProcessKey;\n        start_key = &post_data[poff];\n        pp->must_ikvi = true;\n        poff++;\n        continue;\n      }\n      break; /* end PP_Init */\n    case PP_ProcessKey:\n      /* key phase */\n      mhd_assert (NULL == start_value);\n      mhd_assert (NULL == end_value);\n      mhd_assert (NULL != start_key || 0 == poff);\n      mhd_assert (0 != poff || NULL == start_key);\n      mhd_assert (NULL == end_key);\n      switch (post_data[poff])\n      {\n      case '=':\n        /* Case: 'key=' */\n        if (0 != poff)\n          end_key = &post_data[poff];\n        poff++;\n        pp->state = PP_ProcessValue;\n        break;\n      case '&':\n        /* Case: 'key&' */\n        if (0 != poff)\n          end_key = &post_data[poff];\n        poff++;\n        pp->state = PP_Callback;\n        break;\n      case '\\n':\n      case '\\r':\n        /* Case: 'key\\n' or 'key\\r' */\n        if (0 != poff)\n          end_key = &post_data[poff];\n        /* No advance here, 'PP_Done' will be selected by next 'PP_Init' phase */\n        pp->state = PP_Callback;\n        break;\n      default:\n        /* normal character, advance! */\n        if (0 == poff)\n          start_key = post_data;\n        poff++;\n        break;\n      }\n      mhd_assert (NULL == end_key || NULL != start_key);\n      break; /* end PP_ProcessKey */\n    case PP_ProcessValue:\n      if (NULL == start_value)\n        start_value = &post_data[poff];\n      switch (post_data[poff])\n      {\n      case '=':\n        /* case 'key==' */\n        pp->state = PP_Error;\n        continue;\n      case '&':\n        /* case 'value&' */\n        end_value = &post_data[poff];\n        poff++;\n        if (pp->must_ikvi ||\n            (start_value != end_value) )\n        {\n          pp->state = PP_Callback;\n        }\n        else\n        {\n          pp->buffer_pos = 0;\n          pp->value_offset = 0;\n          pp->state = PP_Init;\n          start_value = NULL;\n          end_value = NULL;\n        }\n        continue;\n      case '\\n':\n      case '\\r':\n        /* Case: 'value\\n' or 'value\\r' */\n        end_value = &post_data[poff];\n        if (pp->must_ikvi ||\n            (start_value != end_value) )\n          pp->state = PP_Callback; /* No poff advance here to set PP_Done in the next iteration */\n        else\n        {\n          poff++;\n          pp->state = PP_Done;\n        }\n        break;\n      case '%':\n        last_escape = &post_data[poff];\n        poff++;\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        /* character, may be part of escaping */\n        poff++;\n        continue;\n      default:\n        /* normal character, no more escaping! */\n        last_escape = NULL;\n        poff++;\n        continue;\n      }\n      break; /* end PP_ProcessValue */\n    case PP_Done:\n      switch (post_data[poff])\n      {\n      case '\\n':\n      case '\\r':\n        poff++;\n        continue;\n      }\n      /* unexpected data at the end, fail! */\n      pp->state = PP_Error;\n      break;\n    case PP_Callback:\n      mhd_assert ((NULL != end_key) || (NULL == start_key));\n      if (1)\n      {\n        const size_t key_len = (size_t) (end_key - start_key);\n        mhd_assert (end_key >= start_key);\n        if (0 != key_len)\n        {\n          if ( (pp->buffer_pos + key_len >= pp->buffer_size) ||\n               (pp->buffer_pos + key_len < pp->buffer_pos) )\n          {\n            /* key too long, cannot parse! */\n            pp->state = PP_Error;\n            continue;\n          }\n          /* compute key, if we have not already */\n          memcpy (&kbuf[pp->buffer_pos],\n                  start_key,\n                  key_len);\n          pp->buffer_pos += key_len;\n          start_key = NULL;\n          end_key = NULL;\n          pp->must_unescape_key = true;\n        }\n      }\n#ifdef _DEBUG\n      else\n        mhd_assert (0 != pp->buffer_pos);\n#endif /* _DEBUG */\n      if (pp->must_unescape_key)\n      {\n        kbuf[pp->buffer_pos] = '\\0'; /* 0-terminate key */\n        MHD_unescape_plus (kbuf);\n        MHD_http_unescape (kbuf);\n        pp->must_unescape_key = false;\n      }\n      process_value (pp,\n                     start_value,\n                     end_value,\n                     NULL);\n      if (PP_Error == pp->state)\n        continue;\n      pp->value_offset = 0;\n      start_value = NULL;\n      end_value = NULL;\n      pp->buffer_pos = 0;\n      pp->state = PP_Init;\n      break;\n    case PP_NextBoundary:\n    case PP_ProcessEntryHeaders:\n    case PP_PerformCheckMultipart:\n    case PP_ProcessValueToBoundary:\n    case PP_PerformCleanup:\n    case PP_Nested_Init:\n    case PP_Nested_PerformMarking:\n    case PP_Nested_ProcessEntryHeaders:\n    case PP_Nested_ProcessValueToBoundary:\n    case PP_Nested_PerformCleanup:\n    default:\n      MHD_PANIC (_ (\"internal error.\\n\")); /* should never happen! */\n    }\n    mhd_assert ((end_key == NULL) || (start_key != NULL));\n    mhd_assert ((end_value == NULL) || (start_value != NULL));\n  }\n\n  mhd_assert (PP_Callback != pp->state);\n\n  if (PP_Error == pp->state)\n  {\n    /* State in error, returning failure */\n    return MHD_NO;\n  }\n\n  /* save remaining data for next iteration */\n  if (NULL != start_key)\n  {\n    size_t key_len;\n    mhd_assert ((PP_ProcessKey == pp->state) || (NULL != end_key));\n    if (NULL == end_key)\n      end_key = &post_data[poff];\n    mhd_assert (end_key >= start_key);\n    key_len = (size_t) (end_key - start_key);\n    mhd_assert (0 != key_len); /* it must be always non-zero here */\n    if (pp->buffer_pos + key_len >= pp->buffer_size)\n    {\n      pp->state = PP_Error;\n      return MHD_NO;\n    }\n    memcpy (&kbuf[pp->buffer_pos],\n            start_key,\n            key_len);\n    pp->buffer_pos += key_len;\n    pp->must_unescape_key = true;\n    start_key = NULL;\n    end_key = NULL;\n  }\n  if ( (NULL != start_value) &&\n       (PP_ProcessValue == pp->state) )\n  {\n    /* compute key, if we have not already */\n    if (pp->must_unescape_key)\n    {\n      kbuf[pp->buffer_pos] = '\\0'; /* 0-terminate key */\n      MHD_unescape_plus (kbuf);\n      MHD_http_unescape (kbuf);\n      pp->must_unescape_key = false;\n    }\n    if (NULL == end_value)\n      end_value = &post_data[poff];\n    if ( (NULL != last_escape) &&\n         (2 < (end_value - last_escape)) )\n      last_escape = NULL;\n    process_value (pp,\n                   start_value,\n                   end_value,\n                   last_escape);\n    pp->must_ikvi = false;\n  }\n  if (PP_Error == pp->state)\n  {\n    /* State in error, returning failure */\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code checks only (pp->buffer_pos + key_len >= pp->buffer_size) before memcpy but does not guard against size_t overflow of (pp->buffer_pos + key_len). If the sum wraps (integer overflow), the comparison can be false and memcpy(&kbuf[pp->buffer_pos], start_key, key_len) may write beyond kbuf. Example: assume size_t is 32/64-bit, pp->buffer_size = 100, pp->buffer_pos = SIZE_MAX - 5 and key_len = 10. The addition wraps to a small value (< pp->buffer_size) so the check passes, but copying 10 bytes starting at &kbuf[pp->buffer_pos] is out-of-bounds. The earlier PP_Callback path included an extra wrap check, but this 'save remaining data' fragment omits it \u2014 so Rule 21.17 can be violated.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER post_process_urlencoded: pp=0x557d93bc53e0 post_data=0x557d6850e026 post_data_len=9 buffer_pos=0 buffer_size=4096 state=2\nSAVE_REMAINING: pp=0x557d93bc53e0 start_key=0x557d6850e026 end_key=0x557d6850e02a key_len=4 buffer_pos=0 buffer_size=4096 sum=4 overflow=0 poff=9\nSAVE_REMAINING: performed memcpy dest=0x557d93bc5480 src=0x557d6850e026 len=4 (buffer_pos before add=0)\nEXIT post_process_urlencoded: success: pp=0x557d93bc53e0 buffer_pos=4 buffer_size=4096 state=5\nENTER post_process_urlencoded: pp=0x557d93bc53e0 post_data=0x557d6850e030 post_data_len=22 buffer_pos=4 buffer_size=4096 state=5\nPP_Callback: pp=0x557d93bc53e0 start_key=0x557d6850e031 end_key=0x557d6850e035 key_len=4 buffer_pos=0 buffer_size=4096 sum=4 overflow=0 poff=11\nPP_Callback: about to memcpy dest=0x557d93bc5480 src=0x557d6850e031 len=4 (buffer_pos=0)\nPP_Callback: pp=0x557d93bc53e0 start_key=0x557d6850e03b end_key=0x557d6850e03f key_len=4 buffer_pos=0 buffer_size=4096 sum=4 overflow=0 poff=17\nPP_Callback: about to memcpy dest=0x557d93bc5480 src=0x557d6850e03b len=4 (buffer_pos=0)\nSAVE_REMAINING: pp=0x557d93bc53e0 start_key=0x557d6850e041 end_key=0x557d6850e045 key_len=4 buffer_pos=0 buffer_size=4096 sum=4 overflow=0 poff=22\nSAVE_REMAINING: performed memcpy dest=0x557d93bc5480 src=0x557d6850e041 len=4 (buffer_pos before add=0)\nEXIT post_process_urlencoded: success: pp=0x557d93bc53e0 buffer_pos=4 buffer_size=4096 state=5\nENTER post_process_urlencoded: pp=0x557d93bc53e0 post_data=0x557d6851602c post_data_len=1 buffer_pos=4 buffer_size=4096 state=5\nEXIT post_process_urlencoded: success: pp=0x557d93bc53e0 buffer_pos=0 buffer_size=4096 state=1\nENTER post_process_urlencoded: pp=0x557d93bc53e0 post_data=0x557d6850e047 post_data_len=11 buffer_pos=0 buffer_size=4096 state=2\nSAVE_REMAINING: pp=0x557d93bc53e0 start_key=0x557d6850e047 end_key=0x557d6850e04b key_len=4 buffer_pos=0 buffer_size=4096 sum=4 overflow=0 poff=11\nSAVE_REMAINING: performed memcpy dest=0x557d93bc5480 src=0x557d6850e047 len=4 (buffer_pos before add=0)\nEXIT post_process_urlencoded: success: pp=0x557d93bc53e0 buffer_pos=4 buffer_size=4096 state=5\nENTER post_process_urlencoded: pp=0x557d93bc53e0 post_data=0x557d6850e053 post_data_len=6 buffer_pos=4 buffer_size=4096 state=5\nEXIT post_process_urlencoded: success: pp=0x557d93bc53e0 buffer_pos=4 buffer_size=4096 state=5\nENTER post_process_urlencoded: pp=0x557d93bc53e0 post_data=0x557d6851602c post_data_len=1 buffer_pos=4 buffer_size=4096 state=5\nEXIT post_process_urlencoded: success: pp=0x557d93bc53e0 buffer_pos=4 buffer_size=4096 state=1\nENTER post_process_urlencoded: pp=0x557d93bc53e0 post_data=0x557d6850e05a post_data_len=13531 buffer_pos=0 buffer_size=4096 state=2\nPP_Callback: pp=0x557d93bc53e0 start_key=0x557d6850e05a end_key=0x557d6850e05b key_len=1 buffer_pos=0 buffer_size=4096 sum=1 overflow=0 poff=13524\nPP_Callback: about to memcpy dest=0x557d93bc5480 src=0x557d6850e05a len=1 (buffer_pos=0)\nPP_Callback: pp=0x557d93bc53e0 start_key=0x557d6851152e end_key=0x557d6851152f key_len=1 buffer_pos=0 buffer_size=4096 sum=1 overflow=0 poff=13528\nPP_Callback: about to memcpy dest=0x557d93bc5480 src=0x557d6851152e len=1 (buffer_pos=0)\nSAVE_REMAINING: pp=0x557d93bc53e0 start_key=0x557d68511532 end_key=0x557d68511533 key_len=1 buffer_pos=0 buffer_size=4096 sum=1 overflow=0 poff=13531\nSAVE_REMAINING: performed memcpy dest=0x557d93bc5480 src=0x557d68511532 len=1 (buffer_pos before add=0)\nEXIT post_process_urlencoded: success: pp=0x557d93bc53e0 buffer_pos=1 buffer_size=4096 state=5\nENTER post_process_urlencoded: pp=0x557d93bc53e0 post_data=0x557d6851602c post_data_len=1 buffer_pos=1 buffer_size=4096 state=5\nEXIT post_process_urlencoded: success: pp=0x557d93bc53e0 buffer_pos=1 buffer_size=4096 state=1\nENTER post_process_urlencoded: pp=0x7f3dfeff3010 post_data=0x557d68511536 post_data_len=5013 buffer_pos=0 buffer_size=131076 state=2\nSAVE_REMAINING: pp=0x7f3dfeff3010 start_key=0x557d68511536 end_key=0x557d68511537 key_len=1 buffer_pos=0 buffer_size=131076 sum=1 overflow=0 poff=5013\nSAVE_REMAINING: performed memcpy dest=0x7f3dfeff30b0 src=0x557d68511536 len=1 \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the \"save remaining data\" branch (the if (NULL != start_key) { ... } section near the end) the code tests only (pp->buffer_pos + key_len >= pp->buffer_size) before calling memcpy. It does not test for wrap-around of the addition (i.e. (pp->buffer_pos + key_len < pp->buffer_pos)). If the sum wraps, the >= test can be false although the intended write would be out of bounds, and memcpy(&kbuf[pp->buffer_pos], start_key, key_len) can write beyond kbuf. The PP_Callback path earlier includes the extra wrap check, but this exit/path omitted it, so a possible integer-wrap scenario (e.g. pp->buffer_pos near SIZE_MAX and key_len small) can lead to an out-of-bounds access. That violates MISRA C 2023 Rule 21.17. Note: program invariants or asserts may make this situation unlikely in practice, but MISRA requires a guaranteed prevention of out-of-bounds accesses; the missing wrap-around check is therefore a violation. Recommended fix: compute sum into a size_t variable and check both (sum < pp->buffer_pos) || (sum >= pp->buffer_size) before the memcpy."
}