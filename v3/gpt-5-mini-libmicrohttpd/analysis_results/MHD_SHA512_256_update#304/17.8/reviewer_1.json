{
  "user_message": "An agent A claimed that the following MHD_SHA512_256_update code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_SHA512_256_update.\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter pointer 'data' (declared as const uint8_t *data) is incremented by the statement 'data += bytes_left;'. This modifies the parameter variable itself, which violates MISRA C 2023 Rule 17.8. A compliant fix is to use a local pointer (e.g. 'const uint8_t *p = data;') and modify that instead.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[entry] ctx=0x7ffeac0e8b38 data=0x55c57b95d01b length=3 ctx->count=0 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[after_count_update] ctx=0x7ffeac0e8b38 data=0x55c57b95d01b length=3 ctx->count=3 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[final_partial_copy] ctx=0x7ffeac0e8b38 data=0x55c57b95d01b length=3 ctx->count=3 ctx->count_bits_hi=0 bytes_have=0 bytes_left=3 count_hi=0\n[exit] ctx=0x7ffeac0e8b38 data=0x55c57b95d01b length=3 ctx->count=3 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[entry] ctx=0x7ffeac0e8b38 data=0x55c57b95d01f length=112 ctx->count=0 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[after_count_update] ctx=0x7ffeac0e8b38 data=0x55c57b95d01f length=112 ctx->count=112 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[final_partial_copy] ctx=0x7ffeac0e8b38 data=0x55c57b95d01f length=112 ctx->count=112 ctx->count_bits_hi=0 bytes_have=0 bytes_left=112 count_hi=0\n[exit] ctx=0x7ffeac0e8b38 data=0x55c57b95d01f length=112 ctx->count=112 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[entry] ctx=0x7ffeac0e8b38 data=0x55c57b95d090 length=28 ctx->count=0 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[after_count_update] ctx=0x7ffeac0e8b38 data=0x55c57b95d090 length=28 ctx->count=28 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[final_partial_copy] ctx=0x7ffeac0e8b38 data=0x55c57b95d090 length=28 ctx->count=28 ctx->count_bits_hi=0 bytes_have=0 bytes_left=28 count_hi=0\n[exit] ctx=0x7ffeac0e8b38 data=0x55c57b95d090 length=28 ctx->count=28 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[entry] ctx=0x7ffeac0e8b38 data=0x55c57b95d0ad length=14 ctx->count=0 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[after_count_update] ctx=0x7ffeac0e8b38 data=0x55c57b95d0ad length=14 ctx->count=14 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[final_partial_copy] ctx=0x7ffeac0e8b38 data=0x55c57b95d0ad length=14 ctx->count=14 ctx->count_bits_hi=0 bytes_have=0 bytes_left=14 count_hi=0\n[exit] ctx=0x7ffeac0e8b38 data=0x55c57b95d0ad length=14 ctx->count=14 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[entry] ctx=0x7ffeac0e8b38 data=0x55c57b95d0bc length=26 ctx->count=0 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[after_count_update] ctx=0x7ffeac0e8b38 data=0x55c57b95d0bc length=26 ctx->count=26 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[final_partial_copy] ctx=0x7ffeac0e8b38 data=0x55c57b95d0bc length=26 ctx->count=26 ctx->count_bits_hi=0 bytes_have=0 bytes_left=26 count_hi=0\n[exit] ctx=0x7ffeac0e8b38 data=0x55c57b95d0bc length=26 ctx->count=26 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[entry] ctx=0x7ffeac0e8b38 data=0x55c57b95d125 length=26 ctx->count=0 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[after_count_update] ctx=0x7ffeac0e8b38 data=0x55c57b95d125 length=26 ctx->count=26 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[final_partial_copy] ctx=0x7ffeac0e8b38 data=0x55c57b95d125 length=26 ctx->count=26 ctx->count_bits_hi=0 bytes_have=0 bytes_left=26 count_hi=0\n[exit] ctx=0x7ffeac0e8b38 data=0x55c57b95d125 length=26 ctx->count=26 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[entry] ctx=0x7ffeac0e8b38 data=0x55c57b95d0d7 length=104 ctx->count=0 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[after_count_update] ctx=0x7ffeac0e8b38 data=0x55c57b95d0d7 length=104 ctx->count=104 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[final_partial_copy] ctx=0x7ffeac0e8b38 data=0x55c57b95d0d7 length=104 ctx->count=104 ctx->count_bits_hi=0 bytes_have=0 bytes_left=104 count_hi=0\n[exit] ctx=0x7ffeac0e8b38 data=0x55c57b95d0d7 length=104 ctx->count=104 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[entry] ctx=0x7ffeac0e8b38 data=0x55c57b95d140 length=378 ctx->count=0 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[after_count_update] ctx=0x7ffeac0e8b38 data=0x55c57b95d140 length=378 ctx->count=378 ctx->count_bits_hi=0 bytes_have=0 bytes_left=0 count_hi=0\n[before_full_block_transform\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C:2023 Rule 17.8 forbids modifying a function parameter variable; although the object pointed to by a pointer parameter may be changed, the pointer variable itself shall not be. In MHD_SHA512_256_update the parameter pointer 'data' is incremented (data += bytes_left; and data += SHA512_256_BLOCK_SIZE;), so the parameter is being modified and this violates Rule 17.8. Note that the const on uint8_t *data only prevents modification of the pointed-to bytes, not reassignment of the pointer, and C permits pointer arithmetic here, but MISRA disallows changing the parameter variable. A compliant fix is to introduce a local pointer (e.g. const uint8_t *p = data;) or an offset variable and update that instead of the parameter."
}