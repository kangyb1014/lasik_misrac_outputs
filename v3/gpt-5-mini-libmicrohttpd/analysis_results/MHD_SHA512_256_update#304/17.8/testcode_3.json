{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_SHA512_256_update the parameter 'length' (declared as size_t length) is modified by the statement 'length -= SHA512_256_BLOCK_SIZE;' inside the loop. This changes the function parameter variable itself to track remaining bytes and thus violates MISRA C 2023 Rule 17.8. (Fix: copy length to a local variable and modify that local variable.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA512_256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3047.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA512_256_update:\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA512_256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helpers. These are non-intrusive and do not modify\n   the function parameters. They append human-readable traces to\n   /tmp/logs/3047.txt so other agents can reproduce and inspect\n   the control flow and state changes (notably changes to the\n   parameter 'length'). */\nstatic void mhd_log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3047.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nstatic void mhd_log_state(const char *tag,\n                          const void *ctx_ptr,\n                          const uint8_t *data_ptr,\n                          size_t length_val,\n                          unsigned int bytes_have_val)\n{\n    /* Log a compact snapshot of relevant state. */\n    mhd_log_append(\"[%s] ctx=%p data=%p length=%zu bytes_have=%u\",\n                   tag, ctx_ptr, (const void *)data_ptr,\n                   (unsigned long) length_val, bytes_have_val);\n}\n\n/* The original function with inserted probes. The logic is preserved\n   exactly; probes only observe and log state before/after modifications\n   to the parameter 'length' and at key control-flow points. */\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Initial state snapshot */\n  mhd_log_append(\"--- MHD_SHA512_256_update ENTRY ---\");\n  mhd_log_append(\"Entry: length=%zu ctx=%p data=%p\", (unsigned long) length, (void *)ctx, (const void *)data);\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  mhd_log_state(\"before_count_add\", ctx, data, length, bytes_have);\n  ctx->count += length;\n  mhd_log_append(\"After ctx->count += length: ctx->count=%llu\", (unsigned long long) ctx->count);\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n  {\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n    mhd_log_append(\"Wrapped: ctx->count_bits_hi incremented to %u\", ctx->count_bits_hi);\n  }\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n    mhd_log_append(\"count_hi handling: count_hi=%llu ctx->count=%llu ctx->count_bits_hi=%u\",\n                   (unsigned long long) count_hi,\n                   (unsigned long long) ctx->count,\n                   ctx->count_bits_hi);\n  }\n\n  mhd_log_state(\"after_count_updates\", ctx, data, length, bytes_have);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    mhd_log_append(\"bytes_have branch: bytes_have=%u bytes_left=%u length(before)=%zu\",\n                   bytes_have, bytes_left, (unsigned long) length);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      mhd_log_append(\"-> merging to fill block: bytes_left=%u length(before memcpy)=%zu\",\n                     bytes_left, (unsigned long) length);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      /* Log immediately before modifying the parameter 'length' */\n      mhd_log_state(\"before_subtract_bytes_left\", ctx, data, length, bytes_have);\n      length -= bytes_left; /* <= This modifies the function parameter */\n      /* Log immediately after modifying the parameter 'length' */\n      mhd_log_state(\"after_subtract_bytes_left\", ctx, data, length, bytes_have);\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n      mhd_log_append(\"After processing merged block: bytes_have=%u length=%zu\", bytes_have, (unsigned long) length);\n    }\n    else\n    {\n      mhd_log_append(\"Not enough data to fill block: bytes_left=%u length=%zu\", bytes_left, (unsigned long) length);\n    }\n  }\n\n  /* Process full blocks directly. Log each iteration to show repeated\n     modifications of the parameter 'length' as bytes are consumed. */\n  unsigned int _mhd_iter = 0u;\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_log_append(\"while-iter %u start: length=%zu data=%p\", _mhd_iter, (unsigned long) length, (const void *)data);\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    /* Log before subtracting the block size */\n    mhd_log_state(\"before_subtract_block\", ctx, data, length, bytes_have);\n    length -= SHA512_256_BLOCK_SIZE; /* <= This modifies the function parameter repeatedly */\n    /* Log after subtracting the block size */\n    mhd_log_state(\"after_subtract_block\", ctx, data, length, bytes_have);\n    mhd_log_append(\"while-iter %u end: length=%zu\", _mhd_iter, (unsigned long) length);\n    _mhd_iter++;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_log_append(\"final copy of incomplete block: length=%zu bytes_have=%u data=%p\", (unsigned long) length, bytes_have, (const void *)data);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  mhd_log_append(\"--- MHD_SHA512_256_update EXIT: final length=%zu bytes_have=%u ctx->count=%llu ctx=%p ---\",\n                 (unsigned long) length, bytes_have, (unsigned long long) ctx->count, (void *)ctx);\n}\n"
}