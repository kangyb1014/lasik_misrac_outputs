{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'length -= bytes_left;' modifies the formal parameter 'length' (a size_t function parameter). MISRA C 2023 Rule 17.8 states that a function parameter should not be modified, so decrementing the parameter inside the function violates the rule. (Compliant code should use a local copy\u2014e.g. 'size_t rem = length'\u2014and modify that.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA512_256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3047.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA512_256_update:\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA512_256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/3047.txt */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3047.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  mhd_log_probe(\"ENTER MHD_SHA512_256_update: ctx=%p data=%p length=%zu ctx->count=%llu ctx->count_bits_hi=%llu\",\n                (void *) ctx, (const void *) data, length,\n                (unsigned long long) ctx->count,\n                (unsigned long long) ctx->count_bits_hi);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_log_probe(\"EARLY RETURN: length is zero\");\n    return; /* Shortcut, do nothing */\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  mhd_log_probe(\"after bytes_have calc: bytes_have=%u ctx->count(before)=%llu\",\n                bytes_have, (unsigned long long) ctx->count);\n\n  ctx->count += length;\n  mhd_log_probe(\"after ctx->count += length: added=%zu ctx->count(after)=%llu\",\n                length, (unsigned long long) ctx->count);\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n    mhd_log_probe(\"count_hi nonzero: count_hi=%llu ctx->count(after mask)=%llu ctx->count_bits_hi=%llu\",\n                  (unsigned long long) count_hi,\n                  (unsigned long long) ctx->count,\n                  (unsigned long long) ctx->count_bits_hi);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    mhd_log_probe(\"bytes_have != 0 path: bytes_have=%u bytes_left=%u length(before)=%zu\",\n                  bytes_have, bytes_left, length);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      mhd_log_probe(\"about to decrement length by bytes_left: bytes_left=%u length(before)=%zu\",\n                    bytes_left, length);\n      length -= bytes_left;\n      mhd_log_probe(\"after decrement: length=%zu\",\n                    length);\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n      mhd_log_probe(\"processed combined block; bytes_have reset to %u\",\n                    bytes_have);\n    }\n    else\n    {\n      mhd_log_probe(\"not enough length to fill buffer: length=%zu bytes_left=%u - will copy later\",\n                    length, bytes_left);\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    mhd_log_probe(\"while-loop iteration: length=%zu data=%p (processing one block)\",\n                  length, (const void *) data);\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    mhd_log_probe(\"about to decrement length by SHA512_256_BLOCK_SIZE (%d): length(before)=%zu\",\n                  SHA512_256_BLOCK_SIZE, length);\n    length -= SHA512_256_BLOCK_SIZE;\n    mhd_log_probe(\"after decrement in while-loop: length=%zu data=%p\",\n                  length, (const void *) data);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_log_probe(\"final copy into buffer: bytes_have=%u remaining length=%zu data=%p\",\n                  bytes_have, length, (const void *) data);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  mhd_log_probe(\"EXIT MHD_SHA512_256_update: final length=%zu ctx->count=%llu ctx->count_bits_hi=%llu\",\n                length, (unsigned long long) ctx->count,\n                (unsigned long long) ctx->count_bits_hi);\n}\n"
}