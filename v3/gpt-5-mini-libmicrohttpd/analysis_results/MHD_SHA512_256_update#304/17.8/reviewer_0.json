{
  "user_message": "An agent A claimed that the following MHD_SHA512_256_update code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_SHA512_256_update.\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'data' (declared as const uint8_t *data) is modified with the statement 'data += SHA512_256_BLOCK_SIZE;'. This modifies the pointer parameter itself (not the object it points to), which violates MISRA C 2023 Rule 17.8. Use a local pointer (e.g. 'const uint8_t *p = data; p += ...;') instead of modifying the parameter.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f01b length=3 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f01b length=3 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f01b length=3 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f01f length=112 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f01f length=112 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f01f length=112 bytes_have=0\nSTAGE: early-return-zero-length\n  ctx=0x7ffe8c918c98 data=0x558aa6552631 length=0 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f090 length=28 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f090 length=28 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f090 length=28 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f0ad length=14 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f0ad length=14 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f0ad length=14 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f0bc length=26 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f0bc length=26 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f0bc length=26 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f125 length=26 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f125 length=26 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f125 length=26 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f0d7 length=104 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f0d7 length=104 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f0d7 length=104 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f140 length=378 bytes_have=0\nSTAGE: loop-before-transform\n  ctx=0x7ffe8c918c98 data=0x558aa654f140 length=378 bytes_have=0\nSTAGE: loop-after-transform-before-modify\n  ctx=0x7ffe8c918c98 data=0x558aa654f140 length=378 bytes_have=0\nSTAGE: loop-after-modify\n  ctx=0x7ffe8c918c98 data=0x558aa654f1c0 length=250 bytes_have=0\nSTAGE: loop-before-transform\n  ctx=0x7ffe8c918c98 data=0x558aa654f1c0 length=250 bytes_have=0\nSTAGE: loop-after-transform-before-modify\n  ctx=0x7ffe8c918c98 data=0x558aa654f1c0 length=250 bytes_have=0\nSTAGE: loop-after-modify\n  ctx=0x7ffe8c918c98 data=0x558aa654f240 length=122 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f240 length=122 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f240 length=122 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f3b0 length=26 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f3b0 length=26 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f3b0 length=26 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f5d8 length=72 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f5d8 length=72 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f5d8 length=72 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654f800 length=55 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f800 length=55 bytes_have=0\nSTAGE: final-copy-after-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654f800 length=55 bytes_have=0\nSTAGE: entry-after-bytes_have-calc\n  ctx=0x7ffe8c918c98 data=0x558aa654fa28 length=63 bytes_have=0\nSTAGE: final-copy-before-memcpy\n  ctx=0x7ffe8c918c98 data=0x558aa654fa28 length=63 bytes_have=0\nSTAGE: final-copy-after-memc\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function modifies the parameter 'data' (a pointer parameter) in multiple places (e.g. data += bytes_left; data += SHA512_256_BLOCK_SIZE;) which changes the pointer itself \u2014 this violates MISRA C 2023 Rule 17.8. The code also modifies the by-value parameter 'length' (e.g. length -= bytes_left; length -= SHA512_256_BLOCK_SIZE;), and that too breaches the rule (a function parameter shall not be modified). Modifying the object pointed to by 'ctx' (ctx->...) is allowed (the pointer itself is not reassigned), so those operations are fine. Recommended fix: introduce local aliases (e.g. const uint8_t *p = data; size_t len = length;) and operate on p and len, leaving the parameters unmodified."
}