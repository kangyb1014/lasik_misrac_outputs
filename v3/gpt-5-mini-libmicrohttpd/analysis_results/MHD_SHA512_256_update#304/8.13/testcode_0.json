{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function sha512_256_transform is declared to take a non-const pointer for the input block (for example: void sha512_256_transform(uint64_t H[8], uint8_t *block) or void sha512_256_transform(uint64_t H[8], uint8_t block[SHA512_256_BLOCK_SIZE])) but the function only reads the block data (does not modify it), then the pointer should be to a const-qualified type (e.g. const uint8_t * or const uint8_t block[]) and Rule 8.13 is violated. If, however, sha512_256_transform legitimately modifies the buffer contents, then using a non-const pointer is required and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA512_256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3043.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA512_256_update:\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA512_256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helpers: write control-flow and state information to /tmp/logs/3043.txt */\nstatic void probe_log_open_and_close(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Snapshot and compare up to SNAP_BYTES bytes of a block pointed to by p. */\nstatic void probe_snapshot_block(const char *tag, const uint8_t *p, size_t block_size)\n{\n    const size_t SNAP_BYTES = (block_size < 64U) ? block_size : 64U; /* limit output */\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s: pointer=%p block_size=%zu snapshot_bytes=%zu\\n\", tag, (const void *) p, block_size, SNAP_BYTES);\n    if (p == NULL)\n    {\n        fprintf(f, \"%s: NULL pointer\\n\", tag);\n        fclose(f);\n        return;\n    }\n    /* print hex bytes */\n    fprintf(f, \"%s: data =\", tag);\n    for (size_t i = 0U; i < SNAP_BYTES; ++i)\n    {\n        fprintf(f, \" %02x\", (unsigned int) p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_compare_blocks(const char *tag, const uint8_t *before, const uint8_t *after, size_t block_size)\n{\n    const size_t CHECK_BYTES = (block_size < 64U) ? block_size : 64U;\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s: compare up to %zu bytes\\n\", tag, CHECK_BYTES);\n    if ((before == NULL) || (after == NULL))\n    {\n        fprintf(f, \"%s: one of pointers is NULL (before=%p after=%p)\\n\", tag, (const void *) before, (const void *) after);\n        fclose(f);\n        return;\n    }\n    size_t diffs = 0U;\n    for (size_t i = 0U; i < CHECK_BYTES; ++i)\n    {\n        if (before[i] != after[i])\n        {\n            if (diffs == 0U)\n            {\n                fprintf(f, \"%s: first differences at offsets: \", tag);\n            }\n            fprintf(f, \"%zu(0x%02x->0x%02x) \", i, (unsigned int) before[i], (unsigned int) after[i]);\n            ++diffs;\n        }\n    }\n    if (diffs == 0U)\n    {\n        fprintf(f, \"%s: no differences detected in first %zu bytes\\n\", tag, CHECK_BYTES);\n    }\n    else\n    {\n        fprintf(f, \"%s: total differences=%zu\\n\", tag, diffs);\n    }\n    fclose(f);\n}\n\n/* The original function with inserted probes. */\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log entry and basic arguments */\n  probe_log_printf(\"MHD_SHA512_256_update: entry ctx=%p data=%p length=%llu\", (void *) ctx, (void *) data, (unsigned long long) length);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    probe_log_printf(\"MHD_SHA512_256_update: length is 0, returning early\");\n    return; /* Shortcut, do nothing */\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  probe_log_printf(\"ctx->count (before)=%llu bytes_have=%u\", (unsigned long long) ctx->count, (unsigned int) bytes_have);\n\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n  probe_log_printf(\"ctx->count (after)=%llu ctx->count_bits_hi=%llu\", (unsigned long long) ctx->count, (unsigned long long) ctx->count_bits_hi);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    probe_log_printf(\"bytes_have=%u bytes_left=%u length=%llu\", bytes_have, bytes_left, (unsigned long long) length);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      /* Snapshot buffer before the memcpy */\n      probe_snapshot_block(\"buffer_before_memcpy\", ((uint8_t *) ctx->buffer) + bytes_have, (size_t) bytes_left);\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Snapshot buffer after the memcpy */\n      probe_snapshot_block(\"buffer_after_memcpy\", ((uint8_t *) ctx->buffer) + bytes_have, (size_t) bytes_left);\n\n      data += bytes_left;\n      length -= bytes_left;\n\n      /* Snapshot the full block (before transform) */\n      probe_snapshot_block(\"transform_call_before_ctx_buffer\", (const uint8_t *) ctx->buffer, (size_t) SHA512_256_BLOCK_SIZE);\n\n      /* Call the transform on ctx->buffer. We snapshot before/after to detect modifications. */\n      {\n        /* Make a local copy (first bytes) to compare after call */\n        uint8_t before_snap[64U];\n        uint8_t after_snap[64U];\n        const size_t SNAP = (SHA512_256_BLOCK_SIZE < 64U) ? SHA512_256_BLOCK_SIZE : 64U;\n        if (ctx->buffer != NULL)\n        {\n            memcpy(before_snap, ctx->buffer, SNAP);\n        }\n\n        sha512_256_transform (ctx->H, ctx->buffer);\n\n        if (ctx->buffer != NULL)\n        {\n            memcpy(after_snap, ctx->buffer, SNAP);\n            probe_compare_blocks(\"transform_ctx_buffer\", before_snap, after_snap, (size_t) SHA512_256_BLOCK_SIZE);\n        }\n        else\n        {\n            probe_log_printf(\"transform_ctx_buffer: ctx->buffer is NULL\");\n        }\n      }\n\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    /* Snapshot the data block that will be passed to transform */\n    probe_snapshot_block(\"transform_call_before_data\", data, (size_t) SHA512_256_BLOCK_SIZE);\n\n    /* If transform modifies the memory passed via 'data', we can detect it by snapshotting\n       before and after the call. We capture up to 64 bytes for comparison. */\n    {\n      uint8_t before_snap[64U];\n      uint8_t after_snap[64U];\n      const size_t SNAP = (SHA512_256_BLOCK_SIZE < 64U) ? SHA512_256_BLOCK_SIZE : 64U;\n      if (data != NULL)\n      {\n          memcpy(before_snap, data, SNAP);\n      }\n\n      sha512_256_transform (ctx->H, data);\n\n      if (data != NULL)\n      {\n          memcpy(after_snap, data, SNAP);\n          probe_compare_blocks(\"transform_data_buffer\", before_snap, after_snap, (size_t) SHA512_256_BLOCK_SIZE);\n      }\n      else\n      {\n          probe_log_printf(\"transform_data_buffer: data pointer is NULL\");\n      }\n    }\n\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    probe_snapshot_block(\"buffer_before_final_memcpy\", ((uint8_t *) ctx->buffer) + bytes_have, length);\n    probe_snapshot_block(\"data_before_final_memcpy\", data, length);\n\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n\n    probe_snapshot_block(\"buffer_after_final_memcpy\", ((uint8_t *) ctx->buffer) + bytes_have, length);\n  }\n\n  probe_log_printf(\"MHD_SHA512_256_update: exit ctx=%p\", (void *) ctx);\n}\n"
}