{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis call violates Rule 8.13 when sha512_256_transform is declared to accept a non-const pointer (e.g. void sha512_256_transform(uint64_t H[], uint8_t *block)). The local variable data has type const uint8_t *; passing it to a parameter of type uint8_t * discards the const qualifier, so the pointer does not point to a const-qualified type as required. (If sha512_256_transform's parameter is already declared as const uint8_t *, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA512_256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3043.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_SHA512_256_update:\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_SHA512_256_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logger: append control-flow and state info to /tmp/logs/3043.txt */\nstatic void\nmhd_sha512_256_log_probe(const char *event,\n                         const struct Sha512_256Ctx *ctx,\n                         const uint8_t *data,\n                         size_t length,\n                         unsigned int bytes_have,\n                         uint64_t count_hi)\n{\n  FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n  if (f == NULL)\n    return; /* Non-fatal, don't change function behavior if logging fails */\n\n  fprintf(f, \"event=%s\\n\", event);\n  fprintf(f, \"  ctx=%p\\n\", (void *)ctx);\n  fprintf(f, \"  ctx->count=0x%llx\\n\", (unsigned long long)ctx->count);\n  fprintf(f, \"  ctx->count_bits_hi=0x%llx\\n\", (unsigned long long)ctx->count_bits_hi);\n  fprintf(f, \"  count_hi=0x%llx\\n\", (unsigned long long)count_hi);\n  fprintf(f, \"  bytes_have=%u\\n\", bytes_have);\n  fprintf(f, \"  length=%zu\\n\", length);\n  fprintf(f, \"  data=%p\\n\", (void *)data);\n  fprintf(f, \"  ctx->buffer=%p\\n\", (void *)ctx->buffer);\n  fprintf(f, \"  ctx->H=%p\\n\", (void *)ctx->H);\n  fflush(f);\n  fclose(f);\n}\n\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log entry and initial state */\n  mhd_sha512_256_log_probe(\"entry\", ctx, data, length, 0U, 0ULL);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  /* Log after updating counts */\n  mhd_sha512_256_log_probe(\"after_counts\", ctx, data, length, bytes_have, count_hi);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n\n      /* Log immediately before calling transform on the buffer. This is\n         the site where a const-qualified pointer (data) may be passed to\n         sha512_256_transform which could be declared to take a non-const\n         uint8_t *. We log pointer values and context to reproduce the\n         scenario. */\n      mhd_sha512_256_log_probe(\"pre_transform_buffer\", ctx, data - bytes_left, length, bytes_have, count_hi);\n\n      sha512_256_transform (ctx->H, ctx->buffer);\n\n      /* Log after the transform call */\n      mhd_sha512_256_log_probe(\"post_transform_buffer\", ctx, data, length, 0U, count_hi);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    /* Log each direct-transform call with the current data pointer */\n    mhd_sha512_256_log_probe(\"pre_transform_direct\", ctx, data, length, bytes_have, count_hi);\n\n    sha512_256_transform (ctx->H, data);\n\n    /* Log after each direct transform */\n    mhd_sha512_256_log_probe(\"post_transform_direct\", ctx, data, length, bytes_have, count_hi);\n\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    /* Log the final partial-copy action and pointers */\n    mhd_sha512_256_log_probe(\"final_partial_copy\", ctx, data, length, bytes_have, count_hi);\n\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  /* Log exit state */\n  mhd_sha512_256_log_probe(\"exit\", ctx, data, length, bytes_have, count_hi);\n}\n"
}