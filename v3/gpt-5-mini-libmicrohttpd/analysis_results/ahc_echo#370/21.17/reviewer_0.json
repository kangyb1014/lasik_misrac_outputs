{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_for_upgrade (&uh_cb,\n                                              NULL);\n\n  MHD_add_response_header (response,\n                           MHD_HTTP_HEADER_UPGRADE,\n                           \"Echo Server\");\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_SWITCHING_PROTOCOLS,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nCalling strcmp(method, \"GET\") when method is NULL (or when method points to a non\u2011NUL\u2011terminated/too\u2011short buffer). For example, if method == NULL, strcmp dereferences a NULL pointer and thus performs an out\u2011of\u2011bounds access (undefined behavior).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct in the absence of any documented, enforced precondition. The code calls strcmp(method, \"GET\") without checking method for NULL or ensuring it points to a NUL\u2011terminated buffer. If the callback were ever invoked with method == NULL or with a non NUL\u2011terminated/too\u2011short buffer, strcmp would dereference out of bounds (undefined behavior) and thus would violate MISRA C 2023 Rule 21.17. \n\nThat said, whether this is an actual defect in the deployed system depends on the API contract of the caller (libmicrohttpd): if the library guarantees that method is always a valid, NUL\u2011terminated string and never NULL, then the call is safe and not a MISRA violation. MISRA requires that calls to string.h functions shall not result in out\u2011of\u2011bounds accesses unless the validity is guaranteed by the API contract; if that guarantee is not established in code or documentation, the reviewer must treat this as a violation. Recommended fix: explicitly check method != NULL (and/or ensure it is NUL\u2011terminated per the expected maximum length) before calling strcmp, or document and assert the precondition from the caller."
}