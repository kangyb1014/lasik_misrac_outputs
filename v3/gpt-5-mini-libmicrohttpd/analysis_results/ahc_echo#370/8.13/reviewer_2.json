{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_for_upgrade (&uh_cb,\n                                              NULL);\n\n  MHD_add_response_header (response,\n                           MHD_HTTP_HEADER_UPGRADE,\n                           \"Echo Server\");\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_SWITCHING_PROTOCOLS,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation: req_cls is declared as void **, so *req_cls is a pointer to a non-const object (void *). In the expression if (&aptr != *req_cls) the code compares the address of aptr (int *) with a non\u2011const pointer even though the pointed object is not modified through that pointer. According to MISRA C 2023 Rule 8.13 the pointer target should be const-qualified when possible. Fix: change the parameter to point to a pointer-to-const (e.g. const void **req_cls) and compare using a const-qualified pointer (e.g. (const void *)&aptr), or otherwise make the pointed\u2011to type const-qualified.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Rule 8.13 says a pointer should point to a const\u2011qualified type when that is possible (i.e. when the function does not need to modify the object being pointed to). In this function req_cls has type void ** and the function writes through it: it assigns *req_cls = &aptr and *req_cls = NULL. That means req_cls points to a modifiable pointer object owned by the caller; qualifying the pointed\u2011to pointer as const (e.g. void * const *) would prevent these assignments. The suggested change to const void ** is also inappropriate because it changes the intended semantics/API and can introduce pointer\u2011conversion issues; furthermore the function must match the library callback prototype (void **), so it cannot unilaterally change the parameter type. Therefore the \u201cpointer should be const\u201d advice is not applicable here, and there is no MISRA 8.13 violation in this code as written. (If a different design is desired, a deliberate redesign \u2014 e.g. using a typed token/uintptr_t or a different callback contract \u2014 would be needed rather than changing this parameter\u2019s constness.)"
}