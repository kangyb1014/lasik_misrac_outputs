{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment \"str++;\" modifies the function parameter 'str' (a pointer parameter declared as const char *). MISRA C 2023 Rule 17.8 prohibits modifying a function parameter (the pointer itself shall not be modified; only the object pointed-to may be). This is a violation. Use a local copy (e.g. const char *p = str; p++;) instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint32_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1647.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint32_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint32_:\n```c\nsize_t\nMHD_strx_to_uint32_ (const char *str,\n                     uint32_t *out_val)\n{\n  const char *const start = str;\n  uint32_t res;\n  int digit;\n\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    if ( (res < (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit <= (UINT32_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n    }\n    else\n      return 0;\n    str++;\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint32_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n\n/* Prototype for external helper (assumed provided elsewhere) */\nextern int toxdigitvalue (int c);\n\nsize_t\nMHD_strx_to_uint32_ (const char *str,\n                     uint32_t *out_val)\n{\n  const char *const start = str;\n  uint32_t res;\n  int digit;\n  FILE *log = fopen(\"/tmp/logs/1647.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"MHD_strx_to_uint32_: entry: str=%p out_val=%p\\n\", (void *) str, (void *) out_val);\n    if (str)\n    {\n      unsigned char uc = (unsigned char) *str;\n      fprintf(log, \"  first char: 0x%02X '%c'\\n\", uc, (uc >= 32 && uc <= 126) ? (char) uc : '.');\n    }\n  }\n\n  if (! str || ! out_val)\n  {\n    if (log)\n    {\n      fprintf(log, \"  early exit: null parameter(s)\\n\");\n      fclose(log);\n    }\n    return 0;\n  }\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    size_t idx = (size_t) (str - start);\n    if (log)\n      fprintf(log, \"loop idx=%zu str=%p char=0x%02X digit=%d res(before)=%lu\\n\",\n              idx, (void *) str, (unsigned char) *str, digit, (unsigned long) res);\n\n    if ( (res < (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit <= (UINT32_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n      if (log)\n        fprintf(log, \"  res(updated)=%lu\\n\", (unsigned long) res);\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"  overflow detected at idx=%zu res=%lu digit=%d -> returning 0\\n\",\n                idx, (unsigned long) res, digit);\n      fclose(log);\n      return 0;\n    }\n\n    /* NOTE: This increments the function parameter 'str' (pointer). */\n    str++;\n    if (log)\n      fprintf(log, \"  str incremented -> %p\\n\", (void *) str);\n\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n\n  if (log)\n  {\n    fprintf(log, \"exit: parsed_len=%zu res=%lu out_written=%d\\n\",\n            (size_t) (str - start), (unsigned long) res, (int) ((str - start) > 0));\n    fclose(log);\n  }\n\n  return (size_t) (str - start);\n}\n"
}