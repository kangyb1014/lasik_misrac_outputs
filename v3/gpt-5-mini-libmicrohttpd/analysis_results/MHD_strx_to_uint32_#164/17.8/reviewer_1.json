{
  "user_message": "An agent A claimed that the following MHD_strx_to_uint32_ code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_strx_to_uint32_.\n```c\nsize_t\nMHD_strx_to_uint32_ (const char *str,\n                     uint32_t *out_val)\n{\n  const char *const start = str;\n  uint32_t res;\n  int digit;\n\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    if ( (res < (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit <= (UINT32_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n    }\n    else\n      return 0;\n    str++;\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe fragment \"str++;\" modifies the function parameter 'str' (a pointer parameter declared as const char *). MISRA C 2023 Rule 17.8 prohibits modifying a function parameter (the pointer itself shall not be modified; only the object pointed-to may be). This is a violation. Use a local copy (e.g. const char *p = str; p++;) instead.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_strx_to_uint32_: entry: str=0x56510fa3a6dc out_val=0x7ffe7fed400c\n  first char: 0x31 '1'\nloop idx=0 str=0x56510fa3a6dc char=0x31 digit=1 res(before)=0\n  res(updated)=1\n  str incremented -> 0x56510fa3a6dd\nexit: parsed_len=1 res=1 out_written=1\nMHD_strx_to_uint32_: entry: str=0x56510fa3a8f5 out_val=0x7ffe7fed400c\n  first char: 0x30 '0'\nloop idx=0 str=0x56510fa3a8f5 char=0x30 digit=0 res(before)=0\n  res(updated)=0\n  str incremented -> 0x56510fa3a8f6\nexit: parsed_len=1 res=0 out_written=1\nMHD_strx_to_uint32_: entry: str=0x56510fa3a56b out_val=0x7ffe7fed400c\n  first char: 0x31 '1'\nloop idx=0 str=0x56510fa3a56b char=0x31 digit=1 res(before)=0\n  res(updated)=1\n  str incremented -> 0x56510fa3a56c\nloop idx=1 str=0x56510fa3a56c char=0x30 digit=0 res(before)=1\n  res(updated)=16\n  str incremented -> 0x56510fa3a56d\nloop idx=2 str=0x56510fa3a56d char=0x30 digit=0 res(before)=16\n  res(updated)=256\n  str incremented -> 0x56510fa3a56e\nloop idx=3 str=0x56510fa3a56e char=0x30 digit=0 res(before)=256\n  res(updated)=4096\n  str incremented -> 0x56510fa3a56f\nloop idx=4 str=0x56510fa3a56f char=0x30 digit=0 res(before)=4096\n  res(updated)=65536\n  str incremented -> 0x56510fa3a570\nexit: parsed_len=5 res=65536 out_written=1\nMHD_strx_to_uint32_: entry: str=0x56510fa3a571 out_val=0x7ffe7fed400c\n  first char: 0x31 '1'\nloop idx=0 str=0x56510fa3a571 char=0x31 digit=1 res(before)=0\n  res(updated)=1\n  str incremented -> 0x56510fa3a572\nloop idx=1 str=0x56510fa3a572 char=0x32 digit=2 res(before)=1\n  res(updated)=18\n  str incremented -> 0x56510fa3a573\nloop idx=2 str=0x56510fa3a573 char=0x33 digit=3 res(before)=18\n  res(updated)=291\n  str incremented -> 0x56510fa3a574\nloop idx=3 str=0x56510fa3a574 char=0x34 digit=4 res(before)=291\n  res(updated)=4660\n  str incremented -> 0x56510fa3a575\nexit: parsed_len=4 res=4660 out_written=1\nMHD_strx_to_uint32_: entry: str=0x56510fa3a576 out_val=0x7ffe7fed400c\n  first char: 0x34 '4'\nloop idx=0 str=0x56510fa3a576 char=0x34 digit=4 res(before)=0\n  res(updated)=4\n  str incremented -> 0x56510fa3a577\nloop idx=1 str=0x56510fa3a577 char=0x35 digit=5 res(before)=4\n  res(updated)=69\n  str incremented -> 0x56510fa3a578\nloop idx=2 str=0x56510fa3a578 char=0x36 digit=6 res(before)=69\n  res(updated)=1110\n  str incremented -> 0x56510fa3a579\nloop idx=3 str=0x56510fa3a579 char=0x37 digit=7 res(before)=1110\n  res(updated)=17767\n  str incremented -> 0x56510fa3a57a\nexit: parsed_len=4 res=17767 out_written=1\nMHD_strx_to_uint32_: entry: str=0x56510fa3a57b out_val=0x7ffe7fed400c\n  first char: 0x37 '7'\nloop idx=0 str=0x56510fa3a57b char=0x37 digit=7 res(before)=0\n  res(updated)=7\n  str incremented -> 0x56510fa3a57c\nloop idx=1 str=0x56510fa3a57c char=0x38 digit=8 res(before)=7\n  res(updated)=120\n  str incremented -> 0x56510fa3a57d\nloop idx=2 str=0x56510fa3a57d char=0x39 digit=9 res(before)=120\n  res(updated)=1929\n  str incremented -> 0x56510fa3a57e\nloop idx=3 str=0x56510fa3a57e char=0x30 digit=0 res(before)=1929\n  res(updated)=30864\n  str incremented -> 0x56510fa3a57f\nexit: parsed_len=4 res=30864 out_written=1\nMHD_strx_to_uint32_: entry: str=0x56510fa3a580 out_val=0x7ffe7fed400c\n  first char: 0x38 '8'\nloop idx=0 str=0x56510fa3a580 char=0x38 digit=8 res(before)=0\n  res(updated)=8\n  str incremented -> 0x56510fa3a581\nloop idx=1 str=0x56510fa3a581 char=0x30 digit=0 res(before)=8\n  res(updated)=128\n  str incremented -> 0x56510fa3a582\nloop idx=2 str=0x56510fa3a582 char=0x32 digit=2 res(before)=128\n  res(updated)=2050\n  str incremented -> 0x56510fa3a583\nloop idx=3 str=0x56510fa3a583 char=0x31 digit=1 res(before)=2050\n  res(updated)=32801\n  str incremented -> 0x56510fa3a584\nexit: parsed_len=4 res=32801 out_written=1\nMHD_strx_to_uint32_: entry: str=0x56510fa3a585 out_val=0x7ffe7fed400c\n  first char: 0x39 '9'\nloop idx=0 str=0x56510fa3a585 char=0x39 digit=9 res(before)=0\n  res(updated)=9\n  str incremented -> 0x56510fa3a586\nloop idx=1 str=0x56510fa3a586 char=0x37 digit=7 res(before)=9\n  res(updated)=151\n  str incremented -> 0x56510fa3a587\nloop idx=2 str=0x56510fa3a587 char=0x35 digit=5 res(before)=151\n  res(updated)=2421\n  str incremented -> 0x56510fa3a58\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. MISRA C 2023 R.17.8 states that a function parameter shall not be modified; while the object pointed to by a pointer parameter may be changed, the pointer parameter itself must not be modified. In the function MHD_strx_to_uint32_ the statement \"str++;\" advances the parameter pointer 'str', i.e. modifies the parameter itself, which violates R.17.8. The usual remedy is to use a local pointer copy (for example: \"const char *p = str;\" and then use \"p++\"), leaving the parameter unchanged."
}