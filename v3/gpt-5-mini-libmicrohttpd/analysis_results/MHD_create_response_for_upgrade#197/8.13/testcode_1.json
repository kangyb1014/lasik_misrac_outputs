{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *upgrade_handler_cls' is not const-qualified but is only stored (response->upgrade_handler_cls = upgrade_handler_cls) and never modified in the shown code. Per MISRA C 2023 Rule 8.13 it should be declared as 'const void *upgrade_handler_cls' (and the corresponding field in struct MHD_Response made const) unless the object is intended to be mutable. Therefore the fragment violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_for_upgrade code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_for_upgrade as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_for_upgrade:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_for_upgrade (MHD_UpgradeHandler upgrade_handler,\n                                 void *upgrade_handler_cls)\n{\n  struct MHD_Response *response;\n\n  if (NULL == upgrade_handler)\n    return NULL; /* invalid request */\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n    return NULL;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->upgrade_handler = upgrade_handler;\n  response->upgrade_handler_cls = upgrade_handler_cls;\n  response->total_size = 0;\n  response->reference_count = 1;\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONNECTION,\n                               \"Upgrade\"))\n  {\n    MHD_destroy_response (response);\n    return NULL;\n  }\n  return response;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_for_upgrade code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state for MHD_create_response_for_upgrade.\n   Logs are appended to /tmp/logs/1973.txt. */\nstatic void\nMHD_log_upgrade_probe (const char *event,\n                       struct MHD_Response *response,\n                       void *upgrade_handler, void *upgrade_handler_cls,\n                       int status)\n{\n  FILE *f = fopen(\"/tmp/logs/1973.txt\", \"a\");\n  if (f == NULL)\n    return;\n  /* Print a compact record: event, pointers, and status. */\n  fprintf (f, \"event=%s, response=%p, upgrade_handler=%p, upgrade_handler_cls=%p, status=%d\\n\",\n           event,\n           (void *) response,\n           upgrade_handler,\n           upgrade_handler_cls,\n           status);\n  fclose (f);\n}\n\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_for_upgrade (MHD_UpgradeHandler upgrade_handler,\n                                 void *upgrade_handler_cls)\n{\n  struct MHD_Response *response;\n\n  /* Log function entry and input parameter values. */\n  MHD_log_upgrade_probe (\"entry\", NULL, (void *) upgrade_handler, upgrade_handler_cls, 0);\n\n  if (NULL == upgrade_handler)\n  {\n    /* Log invalid input prior to returning. */\n    MHD_log_upgrade_probe (\"invalid_upgrade_handler\", NULL, (void *) upgrade_handler, upgrade_handler_cls, 0);\n    return NULL; /* invalid request */\n  }\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n  {\n    /* Log allocation failure. */\n    MHD_log_upgrade_probe (\"alloc_failed\", NULL, (void *) upgrade_handler, upgrade_handler_cls, 0);\n    return NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    /* Log mutex init failure and the response pointer that will be freed. */\n    MHD_log_upgrade_probe (\"mutex_init_failed\", response, (void *) upgrade_handler, upgrade_handler_cls, 0);\n    free (response);\n    return NULL;\n  }\n#endif\n  response->upgrade_handler = upgrade_handler;\n  response->upgrade_handler_cls = upgrade_handler_cls;\n  response->total_size = 0;\n  response->reference_count = 1;\n\n  /* Log the state after fields are set. This captures the pointers and the expected field values. */\n  MHD_log_upgrade_probe (\"fields_set\", response, (void *) upgrade_handler, upgrade_handler_cls, 0);\n\n  /* Log just before attempting to add the response header. */\n  MHD_log_upgrade_probe (\"before_add_response_header\", response, (void *) upgrade_handler, upgrade_handler_cls, 0);\n\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONNECTION,\n                               \"Upgrade\"))\n  {\n    /* Log header addition failure (the code will destroy the response). */\n    MHD_log_upgrade_probe (\"add_header_failed\", response, (void *) upgrade_handler, upgrade_handler_cls, 0);\n    MHD_destroy_response (response);\n    return NULL;\n  }\n\n  /* Log successful creation and the final response pointer returned. */\n  MHD_log_upgrade_probe (\"success\", response, (void *) upgrade_handler, upgrade_handler_cls, 0);\n  return response;\n}\n"
}