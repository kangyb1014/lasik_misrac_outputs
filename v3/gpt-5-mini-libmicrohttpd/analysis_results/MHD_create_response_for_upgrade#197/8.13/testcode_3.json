{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment stores a plain void * ('upgrade_handler_cls') into the response structure field. If the pointed-to object is not intended to be modified by the API, the pointer should be const-qualified (const void *) in both the parameter and the struct member. As written the code uses non-const pointer types, which fails to apply const qualification where possible. (If the API actually needs to modify the pointee, then no violation occurs; otherwise change both the parameter and response->upgrade_handler_cls to const void *.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_for_upgrade code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_response_for_upgrade as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_for_upgrade:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_for_upgrade (MHD_UpgradeHandler upgrade_handler,\n                                 void *upgrade_handler_cls)\n{\n  struct MHD_Response *response;\n\n  if (NULL == upgrade_handler)\n    return NULL; /* invalid request */\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n    return NULL;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->upgrade_handler = upgrade_handler;\n  response->upgrade_handler_cls = upgrade_handler_cls;\n  response->total_size = 0;\n  response->reference_count = 1;\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONNECTION,\n                               \"Upgrade\"))\n  {\n    MHD_destroy_response (response);\n    return NULL;\n  }\n  return response;\n}\n```\n</target_code>\nPlease provide the modified MHD_create_response_for_upgrade code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/1973.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1973.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_for_upgrade (MHD_UpgradeHandler upgrade_handler,\n                                 void *upgrade_handler_cls)\n{\n  struct MHD_Response *response;\n\n  /* Log entry and parameters */\n  probe_log(\"MHD_create_response_for_upgrade: entry\");\n  probe_log(\"  upgrade_handler is %s\",\n            (NULL == upgrade_handler) ? \"NULL\" : \"non-NULL\");\n  probe_log(\"  upgrade_handler_cls pointer value: %p\", upgrade_handler_cls);\n\n  if (NULL == upgrade_handler) {\n    probe_log(\"  early exit: upgrade_handler is NULL -> returning NULL\");\n    return NULL; /* invalid request */\n  }\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response) {\n    probe_log(\"  allocation failed: response is NULL -> returning NULL\");\n    return NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    probe_log(\"  mutex init failed, freeing response %p and returning NULL\", (void *)response);\n    free (response);\n    return NULL;\n  }\n#endif\n  probe_log(\"  response allocated at %p\", (void *)response);\n\n  /* Log prior to assignments */\n  probe_log(\"  assigning upgrade_handler and upgrade_handler_cls into response\");\n  response->upgrade_handler = upgrade_handler;\n  response->upgrade_handler_cls = upgrade_handler_cls;\n\n  /* Log after assignment to capture the exact stored pointer value */\n  probe_log(\"  response->upgrade_handler set: %s\",\n            (NULL == response->upgrade_handler) ? \"NULL\" : \"non-NULL\");\n  probe_log(\"  response->upgrade_handler_cls stored value: %p\",\n            response->upgrade_handler_cls);\n\n  response->total_size = 0;\n  response->reference_count = 1;\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONNECTION,\n                               \"Upgrade\"))\n  {\n    probe_log(\"  MHD_add_response_header failed, destroying response %p and returning NULL\", (void *)response);\n    MHD_destroy_response (response);\n    return NULL;\n  }\n\n  probe_log(\"  success: returning response %p\", (void *)response);\n  return response;\n}\n"
}