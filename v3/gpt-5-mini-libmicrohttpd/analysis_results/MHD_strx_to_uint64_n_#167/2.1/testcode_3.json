{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe right-hand conjunct ((uint64_t) digit > (UINT64_MAX % 16)) is always false. UINT64_MAX % 16 == 15, and toxdigitvalue() (used under the loop condition digit >= 0) is expected to return values in the range 0..15 for hexadecimal digits, so digit > 15 can never hold. Therefore the whole ((res == (UINT64_MAX / 16)) && ...) term can never be true and that branch of the condition is effectively unreachable; this constitutes unreachable code under MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint64_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1671.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint64_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint64_n_:\n```c\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit > (UINT64_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint64_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/1671.txt. */\nstatic void log_probe(const char *fmt, ...)\n{\n    const char *path = \"/tmp/logs/1671.txt\";\n    FILE *f = fopen(path, \"a\");\n    if (!f)\n    {\n        /* Try to create the directory and open again. Ignore errors otherwise. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(path, \"a\");\n        if (!f)\n            return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Forward declaration: this function is expected to be provided elsewhere. */\nextern int toxdigitvalue(int ch);\n\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n\n  if (! str || ! out_val)\n  {\n    log_probe(\"MHD_strx_to_uint64_n_: invalid args str=%p out_val=%p maxlen=%zu\", (void *)str, (void *)out_val, (size_t)maxlen);\n    return 0;\n  }\n\n  log_probe(\"MHD_strx_to_uint64_n_: enter str=%p maxlen=%zu out_val=%p\", (void *)str, (size_t)maxlen, (void *)out_val);\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    /* Log the pre-check state */\n    uint64_t div = UINT64_MAX / 16U;\n    uint64_t mod = UINT64_MAX % 16U;\n    log_probe(\"ITER: i=%zu res=%\" PRIu64 \" digit=%d (char=%u) thresholds: div=%\" PRIu64 \" mod=%\" PRIu64,\n              i, res, digit, (unsigned int)(unsigned char)str[i], div, mod);\n\n    int cond1 = (res > div);\n    int cond2 = ((res == div) && ((uint64_t) digit > mod));\n\n    log_probe(\"CHECK: cond1(res>div)=%d cond2(res==div && digit>mod)=%d\", cond1, cond2);\n\n    if ( cond1 || cond2 )\n    {\n      log_probe(\"EARLY RETURN: overflow detected at i=%zu res=%\" PRIu64 \" digit=%d\", i, res, digit);\n      return 0;\n    }\n\n    res *= 16U;\n    res += (unsigned int) digit;\n\n    log_probe(\"AFTER_ACCUM: i=%zu new_res=%\" PRIu64, i + 1U, res);\n\n    i++;\n  }\n\n  if (i)\n  {\n    *out_val = res;\n    log_probe(\"EXIT: parsed_len=%zu value=%\" PRIu64, i, res);\n  }\n  else\n  {\n    log_probe(\"EXIT: parsed_len=0 (no digits)\");\n  }\n\n  return i;\n}\n"
}