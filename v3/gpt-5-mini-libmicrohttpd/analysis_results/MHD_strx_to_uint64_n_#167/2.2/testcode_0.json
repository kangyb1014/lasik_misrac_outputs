{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe sub-expression ((uint64_t) digit > (UINT64_MAX % 16)) is always false. For base 16, UINT64_MAX % 16 == 15 and toxdigitvalue() yields digit in 0..15 for valid hex digits, so digit > 15 can never be true. The comparison is evaluated (when res == UINT64_MAX/16) but has no effect on control flow or result \u2014 removing it does not change program behaviour. This is dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint64_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1672.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_strx_to_uint64_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint64_n_:\n```c\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit > (UINT64_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n```\n</target_code>\nPlease provide the modified MHD_strx_to_uint64_n_ code.\n",
  "test_code": "#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <limits.h>\n\n/* Forward declaration of toxdigitvalue so this translation unit compiles. */\nextern int toxdigitvalue (int c);\n\n/* Helper: append a single log entry describing the current state. */\nstatic void\nmhd_log_state(size_t i, size_t maxlen, uint64_t res, int digit,\n              int first_cmp, int second_cmp, int combined)\n{\n  FILE *f = fopen(\"/tmp/logs/1672.txt\", \"a\");\n  if (f == NULL)\n    return; /* best-effort logging; do not affect program behavior */\n\n  fprintf(f, \"MHD_strx: i=%zu maxlen=%zu res=%\" PRIu64 \" digit=%d first_cmp=%d second_cmp=%d combined=%d\\n\",\n          i, maxlen, res, digit, first_cmp, second_cmp, combined);\n  fclose(f);\n}\n\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue ((int)str[i])) >= 0)\n  {\n    /* Evaluate the same comparisons as in the original code but capture\n       their values for logging. This preserves original logic. */\n    int first_cmp = (res > (UINT64_MAX / 16));\n    int second_cmp = ((res == (UINT64_MAX / 16)) &&\n                      (((uint64_t) digit) > (UINT64_MAX % 16)));\n    int combined = (first_cmp || second_cmp);\n\n    /* Log the control path and the values used in the comparison so that\n       other agents can reproduce and gather evidence about the sub-expression\n       ((uint64_t) digit > (UINT64_MAX % 16)). */\n    mhd_log_state(i, maxlen, res, digit, first_cmp, second_cmp, combined);\n\n    if (combined)\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    /* Log after updating res to capture progression as well. */\n    mhd_log_state(i + 1, maxlen, res, digit, 0, 0, 0);\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n\n  /* Final state log */\n  mhd_log_state(i, maxlen, res, -1, 0, 0, 0);\n\n  return i;\n}\n"
}