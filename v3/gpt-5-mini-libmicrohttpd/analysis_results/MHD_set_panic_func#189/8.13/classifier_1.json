{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_set_panic_func:\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The parameter 'void *cls' is an unqualified pointer to caller data. In the shown code the value is simply stored in mhd_panic_cls (mhd_panic_cls = cls) and not modified here; if the intent is to treat the pointed-to object as read-only (typical for user-supplied context pointers passed to callbacks), the parameter should be declared 'const void *cls' (and mhd_panic_cls likewise 'const void *'). As written the pointer is not const-qualified, so Rule 8.13 is violated unless there is a documented need to modify the pointee through this pointer."
}