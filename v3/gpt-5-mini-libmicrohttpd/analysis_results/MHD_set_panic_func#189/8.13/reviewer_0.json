{
  "user_message": "An agent A claimed that the following MHD_set_panic_func code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_panic_func.\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nAssuming mhd_panic_cls is declared as 'void *' and the parameter 'cls' is 'void *' (as shown), the pointer is not const-qualified even though the function only stores the context pointer and does not modify the pointee. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (e.g. use 'const void *cls' and 'const void *mhd_panic_cls'). Therefore this assignment 'mhd_panic_cls = cls;' violates Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_set_panic_func: stage=entry, cb_is_null=true, action=(none), cls_ptr=(nil)\nMHD_set_panic_func: stage=branch, cb_is_null=true, action=mhd_panic = &mhd_panic_std, cls_ptr=(nil)\nMHD_set_panic_func: stage=exit, cb_is_null=true, action=mhd_panic_cls = cls, cls_ptr=(nil)\nMHD_set_panic_func: stage=entry, cb_is_null=true, action=(none), cls_ptr=(nil)\nMHD_set_panic_func: stage=branch, cb_is_null=true, action=mhd_panic = &mhd_panic_std, cls_ptr=(nil)\nMHD_set_panic_func: stage=exit, cb_is_null=true, action=mhd_panic_cls = cls, cls_ptr=(nil)\nMHD_set_panic_func: stage=entry, cb_is_null=true, action=(none), cls_ptr=(nil)\nMHD_set_panic_func: stage=branch, cb_is_null=true, action=mhd_panic = &mhd_panic_std, cls_ptr=(nil)\nMHD_set_panic_func: stage=exit, cb_is_null=true, action=mhd_panic_cls = cls, cls_ptr=(nil)\nMHD_set_panic_func: stage=entry, cb_is_null=true, action=(none), cls_ptr=(nil)\nMHD_set_panic_func: stage=branch, cb_is_null=true, action=mhd_panic = &mhd_panic_std, cls_ptr=(nil)\nMHD_set_panic_func: stage=exit, cb_is_null=true, action=mhd_panic_cls = cls, cls_ptr=(nil)\nMHD_set_panic_func: stage=entry, cb_is_null=true, action=(none), cls_ptr=(nil)\nMHD_set_panic_func: stage=branch, cb_is_null=true, action=mhd_panic = &mhd_panic_std, cls_ptr=(nil)\nMHD_set_panic_func: stage=exit, cb_is_null=true, action=mhd_panic_cls = cls, cls_ptr=(nil)\nMHD_set_panic_func: stage=entry, cb_is_null=true, action=(none), cls_ptr=(nil)\nMHD_set_panic_func: stage=branch, cb_is_null=true, action=mhd_panic = &mhd_panic_std, cls_ptr=(nil)\nMHD_set_panic_func: stage=exit, cb_is_null=true, action=mhd_panic_cls = cls, cls_ptr=(nil)\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 R8.13 recommends that pointers should point to const-qualified types where possible (i.e. use const void * if the pointed-to object is not modified). However, whether the code actually violates R8.13 cannot be decided from the single function body alone. The rule concerns the declaration and intended use of the pointer: if the stored context pointer is never used to modify the pointee anywhere in the program, then declaring the parameter and the storage as const void * would be preferable and would satisfy R8.13. Conversely, if the context is intended to be mutable (the callback or other code will modify the pointee), then the non-const void * is justified and no violation occurs.\n\nAgent A\u2019s report assumes (without evidence) that the pointer is only used for storage/observation and therefore should have been declared const. That assumption is not supported by the presented code or log. The assignment mhd_panic_cls = cls; by itself does not prove a violation of R8.13; the full program context (how mhd_panic_cls is later used) is required.\n\nRecommendation: if the stored context is never modified, change the parameter and storage to const void * (and update any uses) or document/justify the need for a non-const pointer as a deviation from R8.13. Otherwise, no change is needed."
}