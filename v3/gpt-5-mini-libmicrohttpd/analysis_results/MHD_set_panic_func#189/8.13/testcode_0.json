{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nAssuming mhd_panic_cls is declared as 'void *' and the parameter 'cls' is 'void *' (as shown), the pointer is not const-qualified even though the function only stores the context pointer and does not modify the pointee. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (e.g. use 'const void *cls' and 'const void *mhd_panic_cls'). Therefore this assignment 'mhd_panic_cls = cls;' violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_panic_func code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_panic_func as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_panic_func:\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\nPlease provide the modified MHD_set_panic_func code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Minimal typedef and extern declarations to allow this file to compile\n   as part of a larger project. These are only declarations (extern)\n   so they do not conflict with definitions in other translation units. */\ntypedef void (*MHD_PanicCallback)(void *);\nextern MHD_PanicCallback mhd_panic;\nextern void mhd_panic_std(void *);\nextern void *mhd_panic_cls;\n\n/* Probe/logger: append control-flow and state information to the log file.\n   This preserves the original logic of MHD_set_panic_func while recording\n   whether a non-NULL callback was provided and the value of the cls pointer.\n*/\nstatic void\nmhd_log_panic_set(const char *stage, MHD_PanicCallback cb, void *cls, const char *action)\n{\n    FILE *f = fopen(\"/tmp/logs/1893.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"MHD_set_panic_func: stage=%s, cb_is_null=%s, action=%s, cls_ptr=%p\\n\",\n                stage,\n                ((MHD_PanicCallback) NULL != cb) ? \"false\" : \"true\",\n                (action != NULL) ? action : \"(none)\",\n                cls);\n        fclose(f);\n    }\n}\n\n/* Modified MHD_set_panic_func with logging probes inserted. Original logic\n   is preserved: if cb is non-NULL, assign it to mhd_panic; otherwise assign\n   &mhd_panic_std. Then store cls in mhd_panic_cls. Logging captures entry,\n   the branch taken, and exit with the stored cls pointer value. */\nvoid\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  mhd_log_panic_set(\"entry\", cb, cls, NULL);\n\n  if ((MHD_PanicCallback) NULL != cb)\n    {\n      mhd_panic = cb;\n      mhd_log_panic_set(\"branch\", cb, cls, \"mhd_panic = cb\");\n    }\n  else\n    {\n      mhd_panic = &mhd_panic_std;\n      mhd_log_panic_set(\"branch\", cb, cls, \"mhd_panic = &mhd_panic_std\");\n    }\n\n  mhd_panic_cls = cls;\n  mhd_log_panic_set(\"exit\", cb, cls, \"mhd_panic_cls = cls\");\n}\n"
}