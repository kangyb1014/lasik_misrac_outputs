{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *cls' is an unqualified pointer to caller data. In the shown code the value is simply stored in mhd_panic_cls (mhd_panic_cls = cls) and not modified here; if the intent is to treat the pointed-to object as read-only (typical for user-supplied context pointers passed to callbacks), the parameter should be declared 'const void *cls' (and mhd_panic_cls likewise 'const void *'). As written the pointer is not const-qualified, so Rule 8.13 is violated unless there is a documented need to modify the pointee through this pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_panic_func code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_panic_func as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_panic_func:\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\nPlease provide the modified MHD_set_panic_func code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Minimal compatible declarations so this translation unit compiles. */\ntypedef void (*MHD_PanicCallback)(void *);\n\nextern MHD_PanicCallback mhd_panic;\nextern void *mhd_panic_cls;\nextern void mhd_panic_std(void *);\n\n/*\n * Simple probe/logger that appends control-flow and state info to\n * /tmp/logs/1893.txt. This preserves original logic and only\n * observes the parameters and decisions made.\n */\nstatic void\nmhd_log_panic_set (const char *phase, MHD_PanicCallback cb, void *cls)\n{\n  FILE *f = fopen(\"/tmp/logs/1893.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log whether cb is null and the raw cls pointer value. */\n    fprintf(f, \"MHD_set_panic_func %s: cb_is_null=%d, cls=%p\\n\",\n            phase,\n            (cb == (MHD_PanicCallback) NULL) ? 1 : 0,\n            cls);\n    fclose(f);\n  }\n}\n\nvoid\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  /* Log entry state */\n  mhd_log_panic_set(\"entry\", cb, cls);\n\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n\n  /* Log exit state */\n  mhd_log_panic_set(\"exit\", cb, cls);\n}\n"
}