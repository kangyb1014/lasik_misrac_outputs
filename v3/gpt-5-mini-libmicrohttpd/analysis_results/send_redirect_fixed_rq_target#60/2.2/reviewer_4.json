{
  "user_message": "An agent A claimed that the following send_redirect_fixed_rq_target code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of send_redirect_fixed_rq_target.\n```c\nstatic void\nsend_redirect_fixed_rq_target (struct MHD_Connection *c)\n{\n  char *b;\n  size_t fixed_uri_len;\n  size_t i;\n  size_t o;\n  char *hdr_name;\n  size_t hdr_name_len;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (0 != c->rq.hdrs.rq_line.num_ws_in_uri);\n  mhd_assert (c->rq.hdrs.rq_line.num_ws_in_uri <= \\\n              c->rq.req_target_len);\n  fixed_uri_len = c->rq.req_target_len\n                  + 2 * c->rq.hdrs.rq_line.num_ws_in_uri;\n  if ( (fixed_uri_len + 200 > c->daemon->pool_size) ||\n       (fixed_uri_len > MHD_MAX_FIXED_URI_LEN) ||\n       (NULL == (b = malloc (fixed_uri_len + 1))) )\n  {\n    connection_close_error (c,\n                            _ (\"The request has whitespace character is \" \\\n                               \"in the URI and the URI is too large to \" \\\n                               \"send automatic redirect to fixed URI.\\n\"));\n    return;\n  }\n  i = 0;\n  o = 0;\n\n  do\n  {\n    const char chr = c->rq.hdrs.rq_line.rq_tgt[i++];\n\n    mhd_assert ('\\r' != chr); /* Replaced during request line parsing */\n    mhd_assert ('\\n' != chr); /* Rejected during request line parsing */\n    mhd_assert (0 != chr); /* Rejected during request line parsing */\n    switch (chr)\n    {\n    case ' ':\n      b[o++] = '%';\n      b[o++] = '2';\n      b[o++] = '0';\n      break;\n    case '\\t':\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = '9';\n      break;\n    case 0x0B:   /* VT (vertical tab) */\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = 'B';\n      break;\n    case 0x0C:   /* FF (form feed) */\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = 'C';\n      break;\n    default:\n      b[o++] = chr;\n      break;\n    }\n  } while (i < c->rq.req_target_len);\n  mhd_assert (fixed_uri_len == o);\n  b[o] = 0; /* Zero-terminate the result */\n\n  hdr_name_len = MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_LOCATION);\n  hdr_name = malloc (hdr_name_len + 1);\n  if (NULL != hdr_name)\n  {\n    memcpy (hdr_name,\n            MHD_HTTP_HEADER_LOCATION,\n            hdr_name_len + 1);\n    /* hdr_name and b are free()d within this call */\n    transmit_error_response_header (c,\n                                    MHD_HTTP_MOVED_PERMANENTLY,\n                                    RQ_TARGET_INVALID_CHAR,\n                                    hdr_name,\n                                    hdr_name_len,\n                                    b,\n                                    o);\n    return;\n  }\n  free (b);\n  connection_close_error (c,\n                          _ (\"The request has whitespace character is in the \" \\\n                             \"URI.\\n\"));\n  return;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe assertion checks an invariant that is guaranteed by earlier request-line parsing (the comment says NUL is rejected during parsing). Thus the mhd_assert(0 != chr) evaluates a condition that will always be true and has no side effects; removing that call would not change program behaviour (except for diagnostic aborts when the impossible condition is triggered). Therefore this is dead code. (If mhd_assert is a no-op in production builds the statement is compiled away, but when enabled it still only performs a redundant runtime check of a provably-true condition.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Rule 2.2 bans operations that are executed but whose removal would never affect program behaviour. The mhd_assert(0 != chr) in this function is a defensive runtime check: if the invariant is ever violated (due to unexpected input, a parser bug, memory corruption, or a change elsewhere in the project) the assertion can abort/log/report \u2014 behaviour that would change if the assertion were removed. Thus the assertion has a potential observable effect and cannot be classified as dead code. Even if the condition is normally guaranteed by earlier parsing, that guarantee is not evident from this function alone and asserting the invariant is a legitimate diagnostic/safety action. Therefore Agent A\u2019s claim that this is dead code under MISRA C 2023 Rule 2.2 is incorrect."
}