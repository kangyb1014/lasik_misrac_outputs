{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of SHA1PadMessage:\n```c\nstatic void\nSHA1PadMessage (struct SHA1Context *context)\n{\n  if (context->message_block_index > 55)\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 64)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n    SHA1ProcessMessageBlock (context);\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }\n  else\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }\n  context->message_block[56] = (unsigned char) (context->length_high >> 24);\n  context->message_block[57] = (unsigned char) (context->length_high >> 16);\n  context->message_block[58] = (unsigned char) (context->length_high >> 8);\n  context->message_block[59] = (unsigned char) (context->length_high);\n  context->message_block[60] = (unsigned char) (context->length_low >> 24);\n  context->message_block[61] = (unsigned char) (context->length_low >> 16);\n  context->message_block[62] = (unsigned char) (context->length_low >> 8);\n  context->message_block[63] = (unsigned char) (context->length_low);\n  SHA1ProcessMessageBlock (context);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler-specific language extensions are used in the provided code. The code contains only standard C constructs: a file-scope static function, pointer and struct usage, array indexing, post-increment operators, casts to unsigned char, constant literals, and ordinary function calls. There are no occurrences of known compiler extensions such as __attribute__, __asm, typeof, statement-expressions ({: ... }), nested functions, inline assembly, nonstandard storage-class specifiers, or other vendor-specific keywords. Therefore there are no fragments that need investigation under MISRA C 2023 Rule 1.2 (prohibition of language extensions)."
}