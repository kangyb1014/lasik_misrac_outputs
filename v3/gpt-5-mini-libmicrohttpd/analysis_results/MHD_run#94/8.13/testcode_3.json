{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as 'struct MHD_Daemon *daemon' but within the shown body the daemon is only inspected (daemon->shutdown) and passed on to MHD_run_wait. If MHD_run and the called functions do not modify the pointed-to object (i.e. MHD_run_wait can accept a 'const struct MHD_Daemon *'), then the parameter should be declared 'const struct MHD_Daemon *daemon'. As written (no const), this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/943.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_run code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function: logs control flow and key state to /tmp/logs/943.txt.\n   Takes a const pointer to avoid modifying the daemon and an explicit\n   using_threads value to avoid casting away const. */\nstatic void MHD_log_probe(const struct MHD_Daemon *daemon,\n                          int using_threads,\n                          const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/943.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Print pointer, shutdown flag (as integer), and whether threads are used. */\n    fprintf(f, \"[MHD_run] stage=%s daemon=%p shutdown=%d using_threads=%d\\n\",\n            stage,\n            (void *)daemon,\n            (int)(daemon->shutdown ? 1 : 0),\n            using_threads);\n    fclose(f);\n  }\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  /* Log entry state. */\n  MHD_log_probe(daemon, MHD_D_IS_USING_THREADS_(daemon), \"entry\");\n\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n  {\n    /* Log the decision point and reason for returning MHD_NO. */\n    MHD_log_probe(daemon, MHD_D_IS_USING_THREADS_(daemon), \"return_no\");\n    return MHD_NO;\n  }\n\n  /* Log before calling MHD_run_wait. */\n  MHD_log_probe(daemon, MHD_D_IS_USING_THREADS_(daemon), \"before_run_wait\");\n  (void) MHD_run_wait (daemon, 0);\n  /* Log after MHD_run_wait completes. */\n  MHD_log_probe(daemon, MHD_D_IS_USING_THREADS_(daemon), \"after_run_wait\");\n\n  return MHD_YES;\n}\n"
}