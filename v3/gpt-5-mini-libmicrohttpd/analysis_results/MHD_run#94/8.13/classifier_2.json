{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(daemon->shutdown)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No. The fragment (daemon->shutdown) merely reads a member via a pointer parameter declared as struct MHD_Daemon *daemon. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types when possible (i.e. when the pointed-to object is not modified). From this fragment and the function signature, there is no evidence that the pointer must be const: the daemon pointer is passed to MHD_run_wait (and other macros) which may modify the object, so it is not safe to change the parameter to const. Therefore this fragment does not by itself violate Rule 8.13."
}