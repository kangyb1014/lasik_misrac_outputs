{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_D_IS_USING_THREADS_ (daemon)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation can be determined from the fragment alone. The token MHD_D_IS_USING_THREADS_(daemon) is just a macro invocation (a use), not a pointer declaration. MISRA C 2023 Rule 8.13 concerns pointer declarations that should use const when the pointed-to object is not modified. To produce a violation here, the function parameter and macro would need to be declared non-const while only performing read-only access \u2014 e.g. if MHD_D_IS_USING_THREADS_ only reads fields of daemon and MHD_run (and all callees) do not modify the daemon, then declaring the parameter as struct MHD_Daemon *daemon (non-const) would violate Rule 8.13 because it could be const-qualified (const struct MHD_Daemon *daemon)."
}