{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nparam->response_page is (or should be) a const char * (it's used with strlen). The call passes that pointer to MHD_create_response_from_buffer_static which has a non-const buffer parameter (e.g. void *). This discards the const qualifier (qualifier removal) and means the pointer does not point to a const-qualified type where possible. This violates MISRA C 2023 Rule 8.13. Recommended fix: change the API to accept a const void * (or otherwise ensure the buffer is non-const by copying), rather than removing constness at the call site.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim cannot be confirmed from the snippet alone. Rule 8.13 is about preferring const-qualified pointer types where possible; whether a violation actually occurs depends on the declaration of param->response_page (which is not shown). If response_page is declared as plain char * then no const is being discarded here and there is no 8.13 issue in this call. If response_page is declared as const char * then passing it to an API that takes void * would discard the const qualifier and would be a const-correctness problem \u2014 but that would more directly be a qualifier-discard/conversion issue (and arguably a fault in the called API), not provably a violation in the shown code alone. In short: the report is not demonstrably correct given the provided code. If response_page is const-qualified, the correct fix is to make the API take const void * (or to copy/convert explicitly), but that is a library/API change rather than evidence the shown code by itself violates MISRA 8.13."
}