{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  (void) req_cls;           /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  return MHD_queue_response (connection, MHD_HTTP_OK, response);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'upload_data_size' is declared as 'size_t *upload_data_size' but is neither used nor modified in the function. Per MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible, so this should be declared as 'const size_t *upload_data_size' (unless the non-const signature is mandated by an external API/callback and cannot be changed).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Rule 8.13 recommends pointing to const-qualified types when possible, but this function is implementing an external callback (the libmicrohttpd access handler prototype) that requires size_t *upload_data_size so the signature must match the external API. You cannot change the parameter type to const size_t * without breaking the required prototype (and the caller may legitimately expect to modify *upload_data_size). The parameters are intentionally unused here and are cast to void to suppress warnings; that is an acceptable handling for an externally-mandated non-const pointer. Therefore no MISRA 8.13 violation applies in this case."
}