{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) daemon;' is an expression statement that has no runtime effect; removing it does not change program behaviour (it only suppresses an unused-parameter compiler warning). Under the definition of dead code in MISRA C 2023 Rule 2.2 this is dead code, so the rule is violated unless a documented deviation/justification is provided.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified setup_epoll_fd code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1232.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of setup_epoll_fd as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of setup_epoll_fd:\n```c\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n  return fd;\n}\n```\n</target_code>\nPlease provide the modified setup_epoll_fd code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe function to log control flow and state to /tmp/logs/1232.txt */\nstatic void\nprobe_log_daemon(const char *stage, const void *ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1232.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    time_t t = time(NULL);\n    (void) t; /* Keep minimal side effects; time may be unavailable in some builds. */\n    fprintf(f, \"%s: daemon=%p\\n\", stage, ptr);\n    fclose(f);\n}\n\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  /* Log that we are in the branch that mutes the unused-parameter warning. */\n  probe_log_daemon(\"before_void_cast\", (const void *) daemon);\n  (void) daemon; /* Mute compiler warning. */\n  /* Log after the (void) cast to show that the pointer value is unchanged. */\n  probe_log_daemon(\"after_void_cast\", (const void *) daemon);\n#endif /* ! HAVE_MESSAGES */\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    probe_log_daemon(\"epoll_create_failed\", (const void *) daemon);\n    return MHD_INVALID_SOCKET;\n  }\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n    probe_log_daemon(\"set_noninheritable_failed\", (const void *) daemon);\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n  probe_log_daemon(\"return_fd\", (const void *) (size_t) fd);\n  return fd;\n}\n"
}