{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'daemon' is declared as 'struct MHD_Daemon *daemon' but the function does not modify the pointed-to object (it is only used for logging or not used at all \u2014 e.g. (void) daemon;). Therefore it should be declared 'const struct MHD_Daemon *daemon' to satisfy Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified setup_epoll_fd code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of setup_epoll_fd as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of setup_epoll_fd:\n```c\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n  return fd;\n}\n```\n</target_code>\nPlease provide the modified setup_epoll_fd code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Probe helper: append logs to /tmp/logs/1233.txt capturing control flow and state. */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/1233.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Timestamp for easier tracing */\n  time_t t = time(NULL);\n  if (t != (time_t)-1)\n  {\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n      char timestr[64];\n      if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        fprintf(f, \"%s - \", timestr);\n    }\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fflush(f);\n  fclose(f);\n}\n\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n  probe_log(\"setup_epoll_fd: entry - daemon unused (HAVE_MESSAGES not defined)\");\n#else /* HAVE_MESSAGES */\n  probe_log(\"setup_epoll_fd: entry - HAVE_MESSAGES defined; daemon=%p\", (void *) daemon);\n#endif /* ! HAVE_MESSAGES */\n\n#ifdef USE_EPOLL_CREATE1\n  probe_log(\"Calling epoll_create1 (EPOLL_CLOEXEC)\");\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  probe_log(\"Calling epoll_create (MAX_EVENTS=%d)\", (int) MAX_EVENTS);\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n\n  probe_log(\"epoll create returned fd=%d\", fd);\n\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n    probe_log(\"epoll_create failed: MHD_socket_last_strerr_=%s\", MHD_socket_last_strerr_ ());\n#else\n    probe_log(\"epoll_create failed: errno=%d (%s)\", errno, strerror(errno));\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n    probe_log(\"Failed to set noninheritable mode on epoll FD (fd=%d)\", fd);\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n  probe_log(\"setup_epoll_fd: returning fd=%d\", fd);\n  return fd;\n}\n"
}