{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of setup_epoll_fd:\n```c\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n  return fd;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{",
    "  (void) daemon; /* Mute compiler warning. */",
    "    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());",
    "    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));"
  ],
  "explanation": "Only the usages of the parameter 'daemon' involve a pointer type in this function. According to Rule 8.13, such pointers should be const-qualified when possible. The function signature and all places where 'daemon' is referenced (including the explicit cast-to-void to suppress warnings and the calls that pass it into MHD_DLOG) should be inspected to determine if the parameter can be declared 'const struct MHD_Daemon *daemon'. Other parts of the code do not introduce pointer variables or pointer-type parameters that could be made const: fd is an int, calls to epoll_create/epoll_create1 return an int, comparisons and return statements involve integers, and string literals or function calls returning strings are not declared pointer variables within this snippet. Therefore no other fragments need investigation for Rule 8.13 in this function."
}