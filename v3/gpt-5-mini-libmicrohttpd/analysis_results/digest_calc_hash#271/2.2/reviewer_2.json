{
  "user_message": "An agent A claimed that the following digest_calc_hash code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of digest_calc_hash.\n```c\n_MHD_static_inline void\ndigest_calc_hash (struct DigestAlgorithm *da, uint8_t *digest)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    MHD_MD5_finish (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n#else  /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_finish_reset (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n#endif /* ! MHD_MD5_HAS_FINISH */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    MHD_SHA256_finish (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_finish_reset (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n#endif /* ! MHD_SHA256_HAS_FINISH */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    MHD_SHA512_256_finish (&da->ctx.sha512_256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* Should not happen */\n#ifdef _DEBUG\n  da->hashing = false;\n#endif /* _DEBUG */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert is a debug-only/no-op macro in production builds (i.e. it expands to nothing when assertions are disabled), then the statement mhd_assert(0); is executed (or present) but its removal would not affect program behaviour. In that configuration the assertion is dead code because it has no effect in the delivered binary. Replace it with a guaranteed runtime action (e.g. a non-compiled-out error/abort handler or explicit error return) to avoid the violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as stated. MISRA Rule 2.2 defines dead code as an operation that is executed but whose removal would not affect program behaviour. If mhd_assert is a debugging-only macro that expands to nothing in production builds, then in that production configuration there is no executed operation present in the generated binary \u2014 the assertion call is preprocessed away. Because nothing is executed there is no operation whose removal would leave behaviour unchanged, and therefore the situation described does not meet the rule\u2019s definition of dead code.\n\nThat said, there are two important caveats: (1) If mhd_assert expands in production to an expression or call that is executed but has no effect (for example, a no-op function that still produces an instruction sequence), then that executed no-effect operation could be considered dead code under Rule 2.2. (2) From a robustness/MISRA perspective it is good practice not to rely solely on debug-only asserts to detect impossible conditions: if an unreachable branch can occur in production, provide explicit runtime handling (error return, abort handler, or a non-compiled-out diagnostic) rather than leaving it only as a debug assertion.\n\nSo the agent\u2019s conclusion (that this specific mhd_assert(0); is necessarily a Rule 2.2 violation) is incorrect for the scenario as described (asserts compiled out). If the project policy requires that an impossible branch must produce a guaranteed runtime action, then change the code accordingly (replace the debug-only assert with a non-compiled-out abort or explicit error handling)."
}