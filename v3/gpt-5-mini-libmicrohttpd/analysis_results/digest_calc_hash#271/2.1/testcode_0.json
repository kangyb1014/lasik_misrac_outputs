{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf the preprocessor/configuration removes all algorithm branches so the function body ends with mhd_assert(0); followed by the _DEBUG block, then in a debug build mhd_assert(0) is an unconditional failing assertion that does not return (e.g. aborts). In that configuration the subsequent statement da->hashing = false; can never be reached, so it is unreachable code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_calc_hash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2711.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of digest_calc_hash as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of digest_calc_hash:\n```c\n_MHD_static_inline void\ndigest_calc_hash (struct DigestAlgorithm *da, uint8_t *digest)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    MHD_MD5_finish (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n#else  /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_finish_reset (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n#endif /* ! MHD_MD5_HAS_FINISH */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    MHD_SHA256_finish (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_finish_reset (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n#endif /* ! MHD_SHA256_HAS_FINISH */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    MHD_SHA512_256_finish (&da->ctx.sha512_256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* Should not happen */\n#ifdef _DEBUG\n  da->hashing = false;\n#endif /* _DEBUG */\n}\n```\n</target_code>\nPlease provide the modified digest_calc_hash code.\n",
  "test_code": "static inline void mhd_log_digest_state(const struct DigestAlgorithm *da, const char *label)\n{\n    FILE *f = fopen(\"/tmp/logs/2711.txt\", \"a\");\n    if (NULL != f)\n    {\n        /* Log pointer and key state flags so agents can reproduce control flow. */\n        fprintf(f, \"%s: da=%p uninitialised=%d algo_selected=%d ready_for_hashing=%d hashing=%d algo=%u\\n\",\n                label,\n                (const void *)da,\n                (int)da->uninitialised,\n                (int)da->algo_selected,\n                (int)da->ready_for_hashing,\n                (int)da->hashing,\n                (unsigned)da->algo);\n        fclose(f);\n    }\n}\n\n_MHD_static_inline void\ndigest_calc_hash (struct DigestAlgorithm *da, uint8_t *digest)\n{\n  /* Entry probe */\n  mhd_log_digest_state(da, \"enter\");\n\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    mhd_log_digest_state(da, \"MD5 branch - before finish\");\n    MHD_MD5_finish (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    mhd_log_digest_state(da, \"MD5 branch - before ready_for_hashing=false (debug)\");\n    da->ready_for_hashing = false;\n    mhd_log_digest_state(da, \"MD5 branch - after ready_for_hashing=false (debug)\");\n#endif /* _DEBUG */\n#else  /* ! MHD_MD5_HAS_FINISH */\n    mhd_log_digest_state(da, \"MD5 branch - before finish_reset\");\n    MHD_MD5_finish_reset (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    mhd_log_digest_state(da, \"MD5 branch - before ready_for_hashing=true (debug)\");\n    da->ready_for_hashing = true;\n    mhd_log_digest_state(da, \"MD5 branch - after ready_for_hashing=true (debug)\");\n#endif /* _DEBUG */\n#endif /* ! MHD_MD5_HAS_FINISH */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    mhd_log_digest_state(da, \"SHA256 branch - before finish\");\n    MHD_SHA256_finish (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    mhd_log_digest_state(da, \"SHA256 branch - before ready_for_hashing=false (debug)\");\n    da->ready_for_hashing = false;\n    mhd_log_digest_state(da, \"SHA256 branch - after ready_for_hashing=false (debug)\");\n#endif /* _DEBUG */\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    mhd_log_digest_state(da, \"SHA256 branch - before finish_reset\");\n    MHD_SHA256_finish_reset (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    mhd_log_digest_state(da, \"SHA256 branch - before ready_for_hashing=true (debug)\");\n    da->ready_for_hashing = true;\n    mhd_log_digest_state(da, \"SHA256 branch - after ready_for_hashing=true (debug)\");\n#endif /* _DEBUG */\n#endif /* ! MHD_SHA256_HAS_FINISH */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    mhd_log_digest_state(da, \"SHA512_256 branch - before finish\");\n    MHD_SHA512_256_finish (&da->ctx.sha512_256_ctx, digest);\n#ifdef _DEBUG\n    mhd_log_digest_state(da, \"SHA512_256 branch - before ready_for_hashing=false (debug)\");\n    da->ready_for_hashing = false;\n    mhd_log_digest_state(da, \"SHA512_256 branch - after ready_for_hashing=false (debug)\");\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n    /* No matching algorithm: log state and assert. */\n    mhd_log_digest_state(da, \"no-matching-algo - about to assert(0)\");\n    mhd_assert (0);   /* Should not happen */\n  }\n#ifdef _DEBUG\n  /* Probe just before changing hashing flag. If this entry does not appear in\n     the logs in a debug build, that is evidence that the preceding assert\n     aborted the function and the assignment is unreachable. */\n  mhd_log_digest_state(da, \"final - before setting hashing=false (debug)\");\n  da->hashing = false;\n  mhd_log_digest_state(da, \"final - after setting hashing=false (debug)\");\n#endif /* _DEBUG */\n}\n"
}