{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf c->rq.hdrs.rq_line.rq_tgt does not have a terminating '\\0' within the bounds of the object (for example when rq_tgt_qmark == NULL and the request-target buffer contains exactly req_target_len bytes but no NUL), strlen(c->rq.hdrs.rq_line.rq_tgt) will scan past the object\u2019s bounds and thus access out-of-range memory. In other words, unless there is a guaranteed NUL within the object (either the code earlier null-terminated the buffer or rq_tgt_qmark was replaced by '\\0'), this use of strlen can read beyond the bounds and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_request_target code that contains useful probe functions that print useful logs to a file \"/tmp/logs/589.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_request_target as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_request_target:\n```c\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified process_request_target code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logger: writes compact diagnostic information to /tmp/logs/589.txt\n * Does not change program state. Only reads up to rq.req_target_len bytes\n * from rq_tgt (so it will not read past the object bounds as specified\n * by req_target_len). This helps to demonstrate whether there is a '\\0'\n * inside the provided bounds before strlen() is ever called. */\nstatic void\nlog_probe (struct MHD_Connection *c, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"--- probe: %s ---\\n\", stage);\n  fprintf (f, \"conn=%p state=%d\\n\",\n           (void *) c, (int) c->state);\n  fprintf (f, \"rq.url=%p rq.url_len=%zu\\n\",\n           (void *) c->rq.url, (size_t) c->rq.url_len);\n  fprintf (f, \"rq_tgt=%p rq_tgt_qmark=%p req_target_len=%zu\\n\",\n           (void *) c->rq.hdrs.rq_line.rq_tgt,\n           (void *) c->rq.hdrs.rq_line.rq_tgt_qmark,\n           (size_t) c->rq.req_target_len);\n\n  /* Safely dump up to a bounded prefix of the request-target buffer as hex\n   * and detect if any NUL exists within the reported req_target_len. */\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt)\n  {\n    const unsigned char *p = (const unsigned char *)\n      c->rq.hdrs.rq_line.rq_tgt;\n    size_t max = c->rq.req_target_len;\n    /* Limit amount logged to avoid huge output while still being\n     * informative. */\n    const size_t limit = (max < 256u) ? max : 256u;\n    size_t i;\n    int nul_index = -1;\n\n    fprintf (f, \"rq_tgt (first %zu bytes):\", limit);\n    for (i = 0; i < limit; ++i)\n    {\n      fprintf (f, \" %02x\", p[i]);\n      if ((p[i] == 0) && (nul_index == -1))\n        nul_index = (int) i;\n    }\n    fprintf (f, \"\\n\");\n    fprintf (f, \"nul_index_within_first_%zu_bytes=%d\\n\", limit, nul_index);\n    if (max > limit)\n      fprintf (f, \"(truncated output; full req_target_len=%zu)\\n\", max);\n  }\n  else\n  {\n    fprintf (f, \"rq_tgt is NULL\\n\");\n  }\n\n  fprintf (f, \"--- end probe: %s ---\\n\\n\", stage);\n  fclose (f);\n}\n\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log probe at entry to capture initial state. */\n  log_probe (c, \"entry\");\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n  }\n\n  /* Log before any '?' replacement so we can see original bytes. */\n  log_probe (c, \"before_qmark_handling\");\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n\n    /* Log immediately after we replace '?' with '\\0' to show the change. */\n    log_probe (c, \"after_qmark_replaced_with_nul\");\n\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  /* Probe right before the strlen() assertion that can read beyond the\n   * intended bounds if there is no NUL within the object. This captures\n   * whether a NUL exists within the reported req_target_len and the first\n   * bytes of the buffer so another agent can reproduce the violation. */\n  log_probe (c, \"before_strlen_assertion\");\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  /* Final probe after unescaping to capture resulting url_len/url pointer. */\n  log_probe (c, \"exit_after_unescape\");\n\n  return true;\n}\n"
}