{
  "user_message": "An agent A claimed that the following process_request_target code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of process_request_target.\n```c\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe mhd_assert call only reads fields and has no side effects; in production builds the mhd_assert macro typically expands to nothing, so the executed assertion (in debug builds) is an operation whose removal (in production) does not affect program behaviour. Therefore this is dead code. For example, if mhd_assert is defined to ((void)0) when _DEBUG is not set, the assertion expression is effectively dead code in the shipped binary and thus violates Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n---- process_request_target: entry (before asserts) ----\nconnection ptr=0x556b367fd270\n state=1\n rq.url=(nil)\n rq.url_len=0\n rq.req_target_len=2\n rq.hdrs.rq_line.rq_tgt=0x556b367fd4c4\n rq.hdrs.rq_line.rq_tgt_qmark=(nil)\n rq_tgt[0..2] = '/a'\n daemon=0x556b367fa8d0\n daemon->uri_log_callback=0x556b2808c220\n daemon->uri_log_callback_cls=0x556b367fa870\n daemon->unescape_callback=0x7f044f421360\n daemon->unescape_callback_cls=(nil)\n rq.client_aware=0\n rq.client_context=(nil)\n--------------------------------------\n---- process_request_target: before uri_log_callback ----\nconnection ptr=0x556b367fd270\n state=1\n rq.url=(nil)\n rq.url_len=0\n rq.req_target_len=2\n rq.hdrs.rq_line.rq_tgt=0x556b367fd4c4\n rq.hdrs.rq_line.rq_tgt_qmark=(nil)\n rq_tgt[0..2] = '/a'\n daemon=0x556b367fa8d0\n daemon->uri_log_callback=0x556b2808c220\n daemon->uri_log_callback_cls=0x556b367fa870\n daemon->unescape_callback=0x7f044f421360\n daemon->unescape_callback_cls=(nil)\n rq.client_aware=1\n rq.client_context=(nil)\n--------------------------------------\n---- process_request_target: after uri_log_callback ----\nconnection ptr=0x556b367fd270\n state=1\n rq.url=(nil)\n rq.url_len=0\n rq.req_target_len=2\n rq.hdrs.rq_line.rq_tgt=0x556b367fd4c4\n rq.hdrs.rq_line.rq_tgt_qmark=(nil)\n rq_tgt[0..2] = '/a'\n daemon=0x556b367fa8d0\n daemon->uri_log_callback=0x556b2808c220\n daemon->uri_log_callback_cls=0x556b367fa870\n daemon->unescape_callback=0x7f044f421360\n daemon->unescape_callback_cls=(nil)\n rq.client_aware=1\n rq.client_context=(nil)\n--------------------------------------\n---- process_request_target: before unescape_callback ----\nconnection ptr=0x556b367fd270\n state=1\n rq.url=(nil)\n rq.url_len=0\n rq.req_target_len=2\n rq.hdrs.rq_line.rq_tgt=0x556b367fd4c4\n rq.hdrs.rq_line.rq_tgt_qmark=(nil)\n rq_tgt[0..2] = '/a'\n daemon=0x556b367fa8d0\n daemon->uri_log_callback=0x556b2808c220\n daemon->uri_log_callback_cls=0x556b367fa870\n daemon->unescape_callback=0x7f044f421360\n daemon->unescape_callback_cls=(nil)\n rq.client_aware=1\n rq.client_context=(nil)\n--------------------------------------\n---- process_request_target: exit (success) ----\nconnection ptr=0x556b367fd270\n state=1\n rq.url=0x556b367fd4c4\n rq.url_len=2\n rq.req_target_len=2\n rq.hdrs.rq_line.rq_tgt=0x556b367fd4c4\n rq.hdrs.rq_line.rq_tgt_qmark=(nil)\n rq_tgt[0..2] = '/a'\n daemon=0x556b367fa8d0\n daemon->uri_log_callback=0x556b2808c220\n daemon->uri_log_callback_cls=0x556b367fa870\n daemon->unescape_callback=0x7f044f421360\n daemon->unescape_callback_cls=(nil)\n rq.client_aware=1\n rq.client_context=(nil)\n--------------------------------------\n---- process_request_target: entry (before asserts) ----\nconnection ptr=0x556b367fd270\n state=1\n rq.url=(nil)\n rq.url_len=0\n rq.req_target_len=2\n rq.hdrs.rq_line.rq_tgt=0x556b367fd4c4\n rq.hdrs.rq_line.rq_tgt_qmark=(nil)\n rq_tgt[0..2] = '/a'\n daemon=0x556b367fa8d0\n daemon->uri_log_callback=0x556b2808c220\n daemon->uri_log_callback_cls=0x556b367fa870\n daemon->unescape_callback=0x7f044f421360\n daemon->unescape_callback_cls=(nil)\n rq.client_aware=0\n rq.client_context=(nil)\n--------------------------------------\n---- process_request_target: before uri_log_callback ----\nconnection ptr=0x556b367fd270\n state=1\n rq.url=(nil)\n rq.url_len=0\n rq.req_target_len=2\n rq.hdrs.rq_line.rq_tgt=0x556b367fd4c4\n rq.hdrs.rq_line.rq_tgt_qmark=(nil)\n rq_tgt[0..2] = '/a'\n daemon=0x556b367fa8d0\n daemon->uri_log_callback=0x556b2808c220\n daemon->uri_log_callback_cls=0x556b367fa870\n daemon->unescape_callback=0x7f044f421360\n daemon->unescape_callback_cls=(nil)\n rq.client_aware=1\n rq.client_context=(nil)\n--------------------------------------\n---- process_request_target: after uri_log_callback ----\nconnection ptr=0x556b367fd270\n state=1\n rq.url=(nil)\n rq.url_len=0\n rq.req_target_len=2\n rq.hdrs.rq_line.rq_tgt=0x556b367fd4c4\n rq.hdrs.rq_line.rq_tgt_qmark=(nil)\n rq_tgt[0..2] = '/a'\n daemon=0x556b367fa8d0\n daemon->uri_log_callback=0x556b2808c220\n daemon->uri_log_callback_cls=0x556b367fa870\n daemon->unescape_callback=0x7f044f421360\n daemon->unescape_callback_cls=(nil)\n rq.client_aware=1\n rq.client_context=(nil)\n----------------------------------\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA 2.2 prohibits operations that are executed but whose removal would not affect program behaviour. You cannot assume the mhd_assert macro is always a no-op; in debug builds it executes and can change behaviour (for example, by aborting or logging when an assertion fails). Therefore the assertions are not dead code in the sense of Rule 2.2: their presence can affect program behaviour, and they are not simply removable without effect. Also, Rule 2.2 is applied with respect to a particular build/configuration \u2014 code present and executed in a given configuration is not automatically dead merely because it can be compiled out in another configuration. If you want to avoid any question, ensure assertion expressions have no side-effects and document any intended configuration where they are disabled (or treat their removal as an allowed deviation), but the agent A claim that these mhd_assert calls are dead code (and thus violate Rule 2.2) is incorrect."
}