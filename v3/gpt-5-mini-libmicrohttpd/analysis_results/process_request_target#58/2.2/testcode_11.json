{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert call only reads fields and has no side effects; in production builds the mhd_assert macro typically expands to nothing, so the executed assertion (in debug builds) is an operation whose removal (in production) does not affect program behaviour. Therefore this is dead code. For example, if mhd_assert is defined to ((void)0) when _DEBUG is not set, the assertion expression is effectively dead code in the shipped binary and thus violates Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_request_target code that contains useful probe functions that print useful logs to a file \"/tmp/logs/582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_request_target as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_request_target:\n```c\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  return true;\n}\n```\n</target_code>\nPlease provide the modified process_request_target code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append human-readable state to log file for diagnosis */\nstatic void\nmhd_probe_log_connection (const struct MHD_Connection *c, const char *phase)\n{\n  FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"---- process_request_target: %s ----\\n\", phase);\n  fprintf (f, \"connection ptr=%p\\n\", (const void *) c);\n  /* Some implementations use enum or int for state; cast to int for logging */\n  fprintf (f, \" state=%d\\n\", (int) c->state);\n\n  /* Request-level fields (pointers printed as %p, lengths as %zu) */\n  fprintf (f, \" rq.url=%p\\n\", (const void *) c->rq.url);\n  fprintf (f, \" rq.url_len=%zu\\n\", c->rq.url_len);\n  fprintf (f, \" rq.req_target_len=%zu\\n\", c->rq.req_target_len);\n  fprintf (f, \" rq.hdrs.rq_line.rq_tgt=%p\\n\",\n           (const void *) c->rq.hdrs.rq_line.rq_tgt);\n  fprintf (f, \" rq.hdrs.rq_line.rq_tgt_qmark=%p\\n\",\n           (const void *) c->rq.hdrs.rq_line.rq_tgt_qmark);\n\n  /* If the target pointer is available, log an initial snippet limited by\n     req_target_len to avoid reading beyond bounds. */\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt)\n  {\n    size_t max = c->rq.req_target_len;\n    if (max > 256)\n      max = 256;\n    fprintf (f, \" rq_tgt[0..%zu] = '\", max);\n    /* Use %.*s to limit output to max bytes (cast to int for format) */\n    fprintf (f, \"%.*s\", (int) max, c->rq.hdrs.rq_line.rq_tgt);\n    fprintf (f, \"'\\n\");\n  }\n\n  /* Daemon-level callbacks and callback-class pointers (printed as pointers) */\n  if (NULL != c->daemon)\n  {\n    fprintf (f, \" daemon=%p\\n\", (const void *) c->daemon);\n    fprintf (f, \" daemon->uri_log_callback=%p\\n\",\n             (const void *) c->daemon->uri_log_callback);\n    fprintf (f, \" daemon->uri_log_callback_cls=%p\\n\",\n             (const void *) c->daemon->uri_log_callback_cls);\n    fprintf (f, \" daemon->unescape_callback=%p\\n\",\n             (const void *) c->daemon->unescape_callback);\n    fprintf (f, \" daemon->unescape_callback_cls=%p\\n\",\n             (const void *) c->daemon->unescape_callback_cls);\n  }\n\n  /* Client-awareness fields */\n  fprintf (f, \" rq.client_aware=%d\\n\", c->rq.client_aware ? 1 : 0);\n  fprintf (f, \" rq.client_context=%p\\n\", (const void *) c->rq.client_context);\n\n  fprintf (f, \"--------------------------------------\\n\");\n  fclose (f);\n}\n\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  /* Log state before any assertions or changes. This captures the fields\n     that the assertions examine so that we can reproduce what the\n     assertions are checking in debug builds, and see what would be omitted\n     in production (where mhd_assert expands to nothing). */\n  mhd_probe_log_connection (c, \"entry (before asserts)\");\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    /* Log before calling the callback so callback inputs are captured */\n    mhd_probe_log_connection (c, \"before uri_log_callback\");\n\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n\n    /* Log after callback to capture any client_context and side-effects */\n    mhd_probe_log_connection (c, \"after uri_log_callback\");\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      /* Log failure path so we can see the state when parse fails */\n      mhd_probe_log_connection (c, \"parse_arguments failed\");\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  /* Log before unescape to capture pre-unescape buffer */\n  mhd_probe_log_connection (c, \"before unescape_callback\");\n\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  /* Log final state before returning success */\n  mhd_probe_log_connection (c, \"exit (success)\");\n\n  return true;\n}\n"
}