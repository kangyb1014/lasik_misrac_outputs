{
  "user_message": "An agent A claimed that the following MHD_select code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_select.\n```c\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n    return MHD_NO;\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n    millisec = 0;\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      err_state = MHD_YES;\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        err_state = MHD_YES;\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          err_state = MHD_YES;\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n    millisec = 0;\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n    }\n  }\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  if (daemon->shutdown)\n    return MHD_NO;\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n    return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes addresses of fd_set objects (&rs, &ws, &es) to internal_run_from_select. If internal_run_from_select only reads those fd_set values (i.e. does not modify them), its parameters should be declared as pointers to const (e.g. const fd_set *), but are apparently non-const in the current API. In that situation Rule 8.13 is violated because the pointers do not point to const-qualified types even though they could. To fix: change the prototype to accept const fd_set * for the input fd_sets (and adjust the implementation so it does not modify them). If, however, internal_run_from_select actually modifies the fd_set objects, then non-const pointers are required and no violation occurs.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nMHD_select: entry millisec=0, shutdown=0\nrs (init): (empty)\nws (init): (empty)\nes (init): (empty)\nmaxsock (init)=-1, err_state=0\nafter internal_get_fdset2: err_state=0, maxsock=3, millisec=0\nrs (after_get): 3\nws (after_get): (empty)\nes (after_get): (empty)\nbefore select: millisec=0, tv=0x7ffe2c573440, timeout_sec=0, timeout_usec=0, maxsock=3\nrs (before_select): 3\nws (before_select): (empty)\nes (before_select): (empty)\nafter select: num_ready=0\nrs (after_select): (empty)\nws (after_select): (empty)\nes (after_select): (empty)\ncalling internal_run_from_select...\nrs (pre_internal_run): (empty)\nws (pre_internal_run): (empty)\nes (pre_internal_run): (empty)\ninternal_run_from_select returned 1\nrs (post_internal_run): (empty)\nws (post_internal_run): (empty)\nes (post_internal_run): (empty)\nMHD_select: entry millisec=0, shutdown=0\nrs (init): (empty)\nws (init): (empty)\nes (init): (empty)\nmaxsock (init)=-1, err_state=0\nafter internal_get_fdset2: err_state=0, maxsock=3, millisec=0\nrs (after_get): 3\nws (after_get): (empty)\nes (after_get): (empty)\nbefore select: millisec=0, tv=0x7ffe2c573440, timeout_sec=0, timeout_usec=0, maxsock=3\nrs (before_select): 3\nws (before_select): (empty)\nes (before_select): (empty)\nafter select: num_ready=0\nrs (after_select): (empty)\nws (after_select): (empty)\nes (after_select): (empty)\ncalling internal_run_from_select...\nrs (pre_internal_run): (empty)\nws (pre_internal_run): (empty)\nes (pre_internal_run): (empty)\ninternal_run_from_select returned 1\nrs (post_internal_run): (empty)\nws (post_internal_run): (empty)\nes (post_internal_run): (empty)\nMHD_select: entry millisec=0, shutdown=0\nrs (init): (empty)\nws (init): (empty)\nes (init): (empty)\nmaxsock (init)=-1, err_state=0\nafter internal_get_fdset2: err_state=0, maxsock=3, millisec=0\nrs (after_get): 3\nws (after_get): (empty)\nes (after_get): (empty)\nbefore select: millisec=0, tv=0x7ffe2c573440, timeout_sec=0, timeout_usec=0, maxsock=3\nrs (before_select): 3\nws (before_select): (empty)\nes (before_select): (empty)\nafter select: num_ready=0\nrs (after_select): (empty)\nws (after_select): (empty)\nes (after_select): (empty)\ncalling internal_run_from_select...\nrs (pre_internal_run): (empty)\nws (pre_internal_run): (empty)\nes (pre_internal_run): (empty)\ninternal_run_from_select returned 1\nrs (post_internal_run): (empty)\nws (post_internal_run): (empty)\nes (post_internal_run): (empty)\nMHD_select: entry millisec=0, shutdown=0\nrs (init): (empty)\nws (init): (empty)\nes (init): (empty)\nmaxsock (init)=-1, err_state=0\nafter internal_get_fdset2: err_state=0, maxsock=3, millisec=0\nrs (after_get): 3\nws (after_get): (empty)\nes (after_get): (empty)\nbefore select: millisec=0, tv=0x7ffe2c573440, timeout_sec=0, timeout_usec=0, maxsock=3\nrs (before_select): 3\nws (before_select): (empty)\nes (before_select): (empty)\nafter select: num_ready=0\nrs (after_select): (empty)\nws (after_select): (empty)\nes (after_select): (empty)\ncalling internal_run_from_select...\nrs (pre_internal_run): (empty)\nws (pre_internal_run): (empty)\nes (pre_internal_run): (empty)\ninternal_run_from_select returned 1\nrs (post_internal_run): (empty)\nws (post_internal_run): (empty)\nes (post_internal_run): (empty)\nMHD_select: entry millisec=0, shutdown=0\nrs (init): (empty)\nws (init): (empty)\nes (init): (empty)\nmaxsock (init)=-1, err_state=0\nafter internal_get_fdset2: err_state=0, maxsock=3, millisec=0\nrs (after_get): 3\nws (after_get): (empty)\nes (after_get): (empty)\nbefore select: millisec=0, tv=0x7ffe2c573440, timeout_sec=0, timeout_usec=0, maxsock=3\nrs (before_select): 3\nws (before_select): (empty)\nes (before_select): (empty)\nafter select: num_ready=0\nrs (after_select): (empty)\nws (after_select): (empty)\nes (after_select): (empty)\ncalling internal_run_from_select...\nrs (pre_internal_run): (empty)\nws (pre_internal_run): (empty)\nes (pre_internal_run): (empty)\ninternal_run_from_select returned 1\nrs (post_internal_run): (empty)\nws (post_internal_run): (empty)\nes (post_internal_run): (empty)\nMHD_select: entry millisec=0, shutdown=0\nrs (init): (empty)\nws (init): (empty)\nes (init): (empty)\nmaxsock (init)=-1, err_state=0\nafter internal_ge\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s concern is plausible but not verifiable from the supplied code. MISRA C 2023 Rule 8.13 applies to pointer declarations and requires a pointer to point to a const-qualified type when the pointed-to object is not modified. The observed behavior in the execution log (the fd_set objects are unchanged after the call) suggests internal_run_from_select may only read the fd_sets, in which case its parameters should indeed be declared as pointers to const and the current non-const prototype would be a Rule 8.13 violation. However, the MHD_select source shown does not include the declaration or definition of internal_run_from_select. Without inspecting that function\u2019s prototype/implementation we cannot determine whether it actually modifies the fd_set objects or whether its parameters are already const-qualified. Therefore the report cannot be confirmed from the evidence provided. Recommendation: inspect the prototype/definition of internal_run_from_select; if it does not modify the fd_sets, change its parameters to const fd_set * to comply with Rule 8.13. If it does modify them (or must pass them to APIs/macros that require non-const), then no violation occurs."
}