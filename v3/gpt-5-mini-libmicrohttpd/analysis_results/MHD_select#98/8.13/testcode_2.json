{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes addresses of fd_set objects (&rs, &ws, &es) to internal_run_from_select. If internal_run_from_select only reads those fd_set values (i.e. does not modify them), its parameters should be declared as pointers to const (e.g. const fd_set *), but are apparently non-const in the current API. In that situation Rule 8.13 is violated because the pointers do not point to const-qualified types even though they could. To fix: change the prototype to accept const fd_set * for the input fd_sets (and adjust the implementation so it does not modify them). If, however, internal_run_from_select actually modifies the fd_set objects, then non-const pointers are required and no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_select code that contains useful probe functions that print useful logs to a file \"/tmp/logs/983.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_select as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_select:\n```c\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n    return MHD_NO;\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n    millisec = 0;\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      err_state = MHD_YES;\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        err_state = MHD_YES;\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          err_state = MHD_YES;\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n    millisec = 0;\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n    }\n  }\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  if (daemon->shutdown)\n    return MHD_NO;\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n    return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_select code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/select.h>\n\n/* Probe logging helpers for reproducing and evidencing the fd_set usage\n * related to MISRA C 2023 Rule 8.13 scenario. Logs go to /tmp/logs/983.txt\n * The logging is non-intrusive and preserves original control flow. */\n\nstatic void probe_open_log(void)\n{\n    static FILE *logf = NULL;\n    if (NULL == logf)\n    {\n        /* open in append mode so repeated runs accumulate evidence */\n        logf = fopen(\"/tmp/logs/983.txt\", \"a\");\n        if (NULL != logf)\n        {\n            /* Make sure output is flushed promptly */\n            setvbuf(logf, NULL, _IOLBF, 0);\n        }\n    }\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *logf = fopen(\"/tmp/logs/983.txt\", \"a\");\n    if (NULL == logf)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(logf, fmt, ap);\n    va_end(ap);\n    fprintf(logf, \"\\n\");\n    fclose(logf);\n}\n\nstatic void probe_dump_fdset(const char *label, const fd_set *set, int maxfd)\n{\n    FILE *logf = fopen(\"/tmp/logs/983.txt\", \"a\");\n    if (NULL == logf)\n        return;\n\n    fprintf(logf, \"%s: \", label);\n    if (NULL == set)\n    {\n        fprintf(logf, \"(null)\\n\");\n        fclose(logf);\n        return;\n    }\n\n    int printed = 0;\n    for (int i = 0; i < maxfd; ++i)\n    {\n        if (FD_ISSET(i, (fd_set *) set))\n        {\n            if (printed)\n                fprintf(logf, \",%d\", i);\n            else\n                fprintf(logf, \"%d\", i);\n            printed = 1;\n        }\n    }\n    if (! printed)\n        fprintf(logf, \"(empty)\");\n    fprintf(logf, \"\\n\");\n    fclose(logf);\n}\n\n/* Modified MHD_select with inserted probes. Original logic is preserved. */\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  /* initialize probe file once (non-fatal if it fails) */\n  probe_open_log();\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n    return MHD_NO;\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n\n  /* Log initial state after zeroing fdsets */\n  probe_log(\"MHD_select: entry millisec=%d, shutdown=%d\", millisec, (int)daemon->shutdown);\n  probe_dump_fdset(\"rs (init)\", &rs, FD_SETSIZE);\n  probe_dump_fdset(\"ws (init)\", &ws, FD_SETSIZE);\n  probe_dump_fdset(\"es (init)\", &es, FD_SETSIZE);\n  probe_log(\"maxsock (init)=%ld, err_state=%d\", (long) maxsock, err_state);\n\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n    millisec = 0;\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      err_state = MHD_YES;\n    }\n\n    /* Log state after internal_get_fdset2 (important: may populate fd_sets) */\n    probe_log(\"after internal_get_fdset2: err_state=%d, maxsock=%ld, millisec=%d\",\n              err_state, (long) maxsock, millisec);\n    probe_dump_fdset(\"rs (after_get)\", &rs, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n    probe_dump_fdset(\"ws (after_get)\", &ws, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n    probe_dump_fdset(\"es (after_get)\", &es, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        err_state = MHD_YES;\n      }\n    }\n\n    /* Log after possible itc addition */\n    probe_log(\"thread-per-conn branch: itc_added=%d, err_state=%d, maxsock=%ld\", itc_added, err_state, (long) maxsock);\n    probe_dump_fdset(\"rs (after_itc)\", &rs, FD_SETSIZE);\n    probe_dump_fdset(\"ws (after_itc)\", &ws, FD_SETSIZE);\n    probe_dump_fdset(\"es (after_itc)\", &es, FD_SETSIZE);\n\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          err_state = MHD_YES;\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n    millisec = 0;\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n    }\n  }\n\n  /* Log state just before select(2) */\n  probe_log(\"before select: millisec=%d, tv=%p, timeout_sec=%ld, timeout_usec=%ld, maxsock=%ld\", \n            millisec, (void *) tv, (long) timeout.tv_sec, (long) timeout.tv_usec, (long) maxsock);\n  probe_dump_fdset(\"rs (before_select)\", &rs, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n  probe_dump_fdset(\"ws (before_select)\", &ws, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n  probe_dump_fdset(\"es (before_select)\", &es, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n\n  /* Log the immediate result from select */\n  probe_log(\"after select: num_ready=%d\", num_ready);\n  probe_dump_fdset(\"rs (after_select)\", &rs, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n  probe_dump_fdset(\"ws (after_select)\", &ws, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n  probe_dump_fdset(\"es (after_select)\", &es, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n\n  if (daemon->shutdown)\n    return MHD_NO;\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n\n  /* Call internal_run_from_select but capture its result so we can log\n   * whether it changed any of the fd_sets (evidence for whether the\n   * API modifies inputs). */\n  {\n    enum MHD_Result run_res;\n    probe_log(\"calling internal_run_from_select...\");\n    probe_dump_fdset(\"rs (pre_internal_run)\", &rs, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n    probe_dump_fdset(\"ws (pre_internal_run)\", &ws, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n    probe_dump_fdset(\"es (pre_internal_run)\", &es, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n\n    run_res = internal_run_from_select (daemon,\n                                       &rs,\n                                       &ws,\n                                       &es,\n                                       (int) FD_SETSIZE);\n\n    probe_log(\"internal_run_from_select returned %d\", (int) run_res);\n    probe_dump_fdset(\"rs (post_internal_run)\", &rs, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n    probe_dump_fdset(\"ws (post_internal_run)\", &ws, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n    probe_dump_fdset(\"es (post_internal_run)\", &es, (int) ((maxsock == MHD_INVALID_SOCKET) ? FD_SETSIZE : (maxsock + 1)));\n\n    if (MHD_NO != run_res)\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  }\n  return MHD_NO;\n}\n"
}