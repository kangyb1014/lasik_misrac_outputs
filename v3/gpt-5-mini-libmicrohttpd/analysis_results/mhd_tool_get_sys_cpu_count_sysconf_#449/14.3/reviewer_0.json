{
  "user_message": "An agent A claimed that the following mhd_tool_get_sys_cpu_count_sysconf_ code violates the MISRA C 2023 rule 14.3.\n<misra_rule>\nMISRA C 2023 Rule 14.3 is Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<target_code>\nHere is the original code of mhd_tool_get_sys_cpu_count_sysconf_.\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_sysconf_ (void)\n{\n  int ret = -1;\n#if defined(HAVE_SYSCONF) && \\\n  (defined(HAS_DECL__SC_NPROCESSORS_ONLN) || defined(HAS_DECL__SC_NPROC_ONLN))\n  long value = -1;\n#ifdef HAS_DECL__SC_NPROCESSORS_ONLN\n  if (0 >= value)\n    value = sysconf (_SC_NPROCESSORS_ONLN);\n#endif /* HAS_DECL__SC_NPROCESSORS_ONLN */\n#ifdef HAS_DECL__SC_NPROC_ONLN\n  if (0 >= value)\n    value = sysconf (_SC_NPROC_ONLN);\n#endif /* HAS_DECL__SC_NPROC_ONLN */\n  if (0 >= value)\n    return -1;\n  ret = (int) value;\n  if ((long) ret != value)\n    return -1; /* Overflow */\n#endif /* HAVE_SYSCONF &&\n          (HAS_DECL__SC_NPROCESSORS_ONLN || HAS_DECL__SC_NPROC_ONLN) */\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe controlling expression (0 >= value) can be invariant in some build configurations. For example, if HAS_DECL__SC_NPROC_ONLN is defined but HAS_DECL__SC_NPROCESSORS_ONLN is not, value remains at its initialization (-1) when the #ifdefed fragment is compiled, so 0 >= value is always true. This makes the if controlling expression invariant and thus violates MISRA C 2023 Rule 14.3.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA 14.3 forbids controlling expressions that are invariant in the translation unit being assessed. After preprocessing there are build configurations where the shown if-condition is statically invariant: value is initialized to -1 immediately before the #ifdef blocks and, if the first HAS_DECL__SC_NPROCESSORS_ONLN block is not present, no assignment can change value before the next check. In that configuration the test if (0 >= value) is always true (value is -1) and therefore an invariant controlling expression. The two exceptions in Rule 14.3 do not apply (this is not an intentional infinite loop nor a do-while constant-false case). Therefore the agent A\u2019s claim of a Rule 14.3 violation is correct."
}