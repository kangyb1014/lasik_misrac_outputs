{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf block points near the end of the pool memory such that block_offset + block_size > pool->size. Example: pool->memory has size 100, block = pool->memory + 90 (block_offset = 90) and block_size = 20. The earlier asserts allow this (pool->size >= block_size and block_offset <= pool->size) but memset(block,0,block_size) will write past pool->memory + 100 (writes bytes 90..109), accessing beyond the object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_deallocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1339.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_deallocate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_deallocate:\n```c\nvoid\nMHD_pool_deallocate (struct MemoryPool *pool,\n                     void *block,\n                     size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  if (NULL != block)\n  {   /* Have previously allocated data */\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (block_offset <= pool->size);\n    mhd_assert ((block_offset != pool->pos) || (block_size == 0));\n    /* Zero-out deallocated region */\n    if (0 != block_size)\n    {\n      memset (block, 0, block_size);\n      _MHD_POISON_MEMORY (block, block_size);\n    }\n#if ! defined(MHD_FAVOR_SMALL_CODE) && ! defined(MHD_ASAN_POISON_ACTIVE)\n    else\n      return; /* Zero size, no need to do anything */\n#endif /* ! MHD_FAVOR_SMALL_CODE && ! MHD_ASAN_POISON_ACTIVE */\n    if (block_offset <= pool->pos)\n    {\n      /* \"Normal\" block, not allocated \"from the end\". */\n      const size_t alg_end =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n      mhd_assert (alg_end <= pool->pos);\n      if (alg_end == pool->pos)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        size_t alg_start = ROUND_TO_ALIGN (block_offset);\n        mhd_assert (alg_start >= block_offset);\n#if defined(MHD_ASAN_POISON_ACTIVE)\n        if (alg_start != block_offset)\n        {\n          _MHD_POISON_MEMORY (pool->memory + block_offset, \\\n                              alg_start - block_offset);\n        }\n        else if (0 != alg_start)\n        {\n          bool need_red_zone_before;\n          mhd_assert (_MHD_RED_ZONE_SIZE <= alg_start);\n#if defined(HAVE___ASAN_REGION_IS_POISONED)\n          need_red_zone_before =\n            (NULL == __asan_region_is_poisoned (pool->memory\n                                                + alg_start\n                                                - _MHD_RED_ZONE_SIZE,\n                                                _MHD_RED_ZONE_SIZE));\n#elif defined(HAVE___ASAN_ADDRESS_IS_POISONED)\n          need_red_zone_before =\n            (0 == __asan_address_is_poisoned (pool->memory + alg_start - 1));\n#else  /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          need_red_zone_before = true; /* Unknown, assume new red zone needed */\n#endif /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          if (need_red_zone_before)\n          {\n            _MHD_POISON_MEMORY (pool->memory + alg_start, _MHD_RED_ZONE_SIZE);\n            alg_start += _MHD_RED_ZONE_SIZE;\n          }\n        }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n        mhd_assert (alg_start <= pool->pos);\n        mhd_assert (alg_start == ROUND_TO_ALIGN (alg_start));\n        pool->pos = alg_start;\n      }\n    }\n    else\n    {\n      /* Allocated \"from the end\" block. */\n      /* The size and the pointers of such block should not be manipulated by\n         MHD code (block split is disallowed). */\n      mhd_assert (block_offset >= pool->end);\n      mhd_assert (ROUND_TO_ALIGN (block_offset) == block_offset);\n      if (block_offset == pool->end)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        const size_t alg_end =\n          ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n        pool->end = alg_end;\n      }\n    }\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_deallocate code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging helper. Appends human-readable state snapshots to\n   /tmp/logs/1339.txt. Kept minimal and conservative to avoid altering\n   program behavior. */\nstatic void\nmhd_probe_log_state (const char *stage,\n                     const struct MemoryPool *pool,\n                     const void *block,\n                     size_t block_size,\n                     size_t block_offset)\n{\n  FILE *f = fopen(\"/tmp/logs/1339.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"---- MHD_pool_deallocate: %s ----\\n\", stage);\n  fprintf (f, \"pool=%p, pool->memory=%p, pool->size=%zu, pool->pos=%zu, pool->end=%zu\\n\",\n           (const void *) pool,\n           (pool ? (const void *) pool->memory : NULL),\n           (pool ? pool->size : (size_t)0),\n           (pool ? pool->pos : (size_t)0),\n           (pool ? pool->end : (size_t)0));\n  fprintf (f, \"block=%p, block_size=%zu\\n\", block, block_size);\n\n  if (block == NULL)\n  {\n    fprintf (f, \"block_offset=UNDEF (block==NULL)\\n\");\n  }\n  else if (pool == NULL || pool->memory == NULL)\n  {\n    fprintf (f, \"block_offset=UNDEF (pool or pool->memory is NULL)\\n\");\n  }\n  else\n  {\n    fprintf (f, \"block_offset=%zu\\n\", block_offset);\n    /* Safe checks: avoid integer overflow when computing end. */\n    if (block_size > 0 && block_offset > (size_t)-1 - block_size)\n    {\n      fprintf (f, \"block_end=OVERFLOW (block_offset + block_size overflows)\\n\");\n    }\n    else\n    {\n      size_t block_end = block_offset + block_size;\n      fprintf (f, \"block_end=%zu\\n\", block_end);\n      if (pool)\n      {\n        fprintf (f, \"pool->size=%zu, block_end > pool->size ? %s\\n\",\n                 pool->size,\n                 (block_end > pool->size) ? \"YES\" : \"NO\");\n        /* Also log relation to pos and end */\n        fprintf (f, \"block_offset <= pool->pos ? %s\\n\",\n                 (block_offset <= pool->pos) ? \"YES\" : \"NO\");\n        fprintf (f, \"block_offset == pool->pos ? %s\\n\",\n                 (block_offset == pool->pos) ? \"YES\" : \"NO\");\n        fprintf (f, \"block_offset >= pool->end ? %s\\n\",\n                 (block_offset >= pool->end) ? \"YES\" : \"NO\");\n        fprintf (f, \"block_offset == pool->end ? %s\\n\",\n                 (block_offset == pool->end) ? \"YES\" : \"NO\");\n      }\n    }\n  }\n\n  fprintf (f, \"---- end %s ----\\n\\n\", stage);\n  fclose (f);\n}\n\nvoid\nMHD_pool_deallocate (struct MemoryPool *pool,\n                     void *block,\n                     size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  /* Initial snapshot after basic assertions. */\n  {\n    size_t initial_offset = (size_t)-1;\n    if (block != NULL && pool != NULL && pool->memory != NULL)\n      initial_offset = (size_t) ((const unsigned char *) block - (const unsigned char *) pool->memory);\n    mhd_probe_log_state (\"enter_after_asserts\", pool, block, block_size, initial_offset);\n  }\n\n  if (NULL != block)\n  {   /* Have previously allocated data */\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n\n    /* Log computed block_offset and relations right after calculation. */\n    mhd_probe_log_state (\"computed_block_offset\", pool, block, block_size, block_offset);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (block_offset <= pool->size);\n    mhd_assert ((block_offset != pool->pos) || (block_size == 0));\n    /* Zero-out deallocated region */\n    if (0 != block_size)\n    {\n      /* Log immediately before the memset to capture values that can lead\n         to out-of-bounds writes (e.g., block_offset + block_size > pool->size). */\n      mhd_probe_log_state (\"before_memset\", pool, block, block_size, block_offset);\n\n      memset (block, 0, block_size);\n      _MHD_POISON_MEMORY (block, block_size);\n\n      /* Log after the memset to provide evidence the call was performed. */\n      mhd_probe_log_state (\"after_memset\", pool, block, block_size, block_offset);\n    }\n#if ! defined(MHD_FAVOR_SMALL_CODE) && ! defined(MHD_ASAN_POISON_ACTIVE)\n    else\n      return; /* Zero size, no need to do anything */\n#endif /* ! MHD_FAVOR_SMALL_CODE && ! MHD_ASAN_POISON_ACTIVE */\n    if (block_offset <= pool->pos)\n    {\n      /* \"Normal\" block, not allocated \"from the end\". */\n      const size_t alg_end =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n      mhd_assert (alg_end <= pool->pos);\n      if (alg_end == pool->pos)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        size_t alg_start = ROUND_TO_ALIGN (block_offset);\n        mhd_assert (alg_start >= block_offset);\n#if defined(MHD_ASAN_POISON_ACTIVE)\n        if (alg_start != block_offset)\n        {\n          _MHD_POISON_MEMORY (pool->memory + block_offset, \\\n                              alg_start - block_offset);\n        }\n        else if (0 != alg_start)\n        {\n          bool need_red_zone_before;\n          mhd_assert (_MHD_RED_ZONE_SIZE <= alg_start);\n#if defined(HAVE___ASAN_REGION_IS_POISONED)\n          need_red_zone_before =\n            (NULL == __asan_region_is_poisoned (pool->memory\n                                                + alg_start\n                                                - _MHD_RED_ZONE_SIZE,\n                                                _MHD_RED_ZONE_SIZE));\n#elif defined(HAVE___ASAN_ADDRESS_IS_POISONED)\n          need_red_zone_before =\n            (0 == __asan_address_is_poisoned (pool->memory + alg_start - 1));\n#else  /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          need_red_zone_before = true; /* Unknown, assume new red zone needed */\n#endif /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          if (need_red_zone_before)\n          {\n            _MHD_POISON_MEMORY (pool->memory + alg_start, _MHD_RED_ZONE_SIZE);\n            alg_start += _MHD_RED_ZONE_SIZE;\n          }\n        }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n        mhd_assert (alg_start <= pool->pos);\n        mhd_assert (alg_start == ROUND_TO_ALIGN (alg_start));\n        pool->pos = alg_start;\n\n        /* Log state after returning block to pool->pos. */\n        mhd_probe_log_state (\"returned_to_pos\", pool, block, block_size, block_offset);\n      }\n    }\n    else\n    {\n      /* Allocated \"from the end\" block. */\n      /* The size and the pointers of such block should not be manipulated by\n         MHD code (block split is disallowed). */\n      mhd_assert (block_offset >= pool->end);\n      mhd_assert (ROUND_TO_ALIGN (block_offset) == block_offset);\n      if (block_offset == pool->end)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        const size_t alg_end =\n          ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n        pool->end = alg_end;\n\n        /* Log state after returning block to pool->end. */\n        mhd_probe_log_state (\"returned_to_end\", pool, block, block_size, block_offset);\n      }\n    }\n  }\n}\n"
}