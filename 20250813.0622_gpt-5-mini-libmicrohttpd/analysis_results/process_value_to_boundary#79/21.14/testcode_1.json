{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcmp(&buf[newline + 4], boundary, blen) compares blen bytes against 'boundary', where 'boundary' is a null-terminated C string (pp->boundary) and blen is derived from strlen(boundary). This uses memcmp to compare null\u2011terminated strings, which violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value_to_boundary code that contains useful probe functions that print useful logs to a file \"/tmp/logs/638.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_value_to_boundary as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_value_to_boundary:\n```c\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        newline = pp->buffer_pos - 4;\n        break;\n      }\n      newline = (size_t) (r - buf);\n      if (0 == memcmp (\"\\r\\n--\",\n                       &buf[newline],\n                       4))\n        break;\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      if (0 != memcmp (&buf[newline + 4],\n                       boundary,\n                       blen))\n      {\n        /* no boundary, \"\\r\\n--\" is part of content, skip */\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        /* boundary found, process until newline then\n           skip boundary and go back to init */\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;             /* skip boundary as well */\n        buf[newline] = '\\0';\n        break;\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    pp->state = PP_Error;\n    return MHD_NO;\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_value_to_boundary code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helpers. Appends human-readable logs to /tmp/logs/638.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/638.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Dump up to a limited number of bytes in hex to the log. */\nstatic void probe_dump_hex(const char *label, const char *data, size_t len)\n{\n    size_t i, lim = (len > 64U) ? 64U : len; /* limit output */\n    FILE *f = fopen(\"/tmp/logs/638.txt\", \"a\");\n    if (NULL == f)\n        return;\n    fprintf(f, \"%s (len=%zu, showing up to %zu bytes):\", label, len, lim);\n    for (i = 0; i < lim; ++i)\n        fprintf(f, \" %02x\", (unsigned char) data[i]);\n    if (len > lim)\n        fprintf(f, \" ...\");\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* Log entry state */\n  probe_log(\"ENTER process_value_to_boundary: pp=%p, ioff=%zu, boundary=%p, blen=%zu, buffer_pos=%zu, buffer_size=%zu\",\n            (void *)pp,\n            (ioffptr != NULL) ? *ioffptr : (size_t)0,\n            (void *)boundary,\n            blen,\n            pp->buffer_pos,\n            pp->buffer_size);\n  if (boundary != NULL)\n      probe_log(\"boundary as string: '%s'\", boundary);\n  else\n      probe_log(\"boundary is NULL\");\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      probe_log(\"inner while: newline=%zu, buffer_pos=%zu\", newline, pp->buffer_pos);\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        probe_log(\"memchr returned NULL (no '\\\\r' found in searchable range). Setting newline = buffer_pos - 4 (=%zu)\", pp->buffer_pos - 4);\n        newline = pp->buffer_pos - 4;\n        break;\n      }\n      newline = (size_t) (r - buf);\n      probe_log(\"memchr found '\\\\r' at index newline=%zu\", newline);\n\n      /* Check for \"\\r\\n--\" */\n      {\n        int cmp4 = memcmp (\"\\r\\n--\",\n                           &buf[newline],\n                           4);\n        probe_log(\"memcmp for literal \\\"\\\\r\\\\n--\\\" at buf[%zu..%zu] returned %d\",\n                  newline, newline + 3, cmp4);\n        probe_dump_hex(\"buffer around literal check\", &buf[newline], 4);\n        if (0 == cmp4)\n          break;\n      }\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      probe_log(\"enough data to check boundary: newline=%zu, blen=%zu, buffer_pos=%zu\",\n                newline, blen, pp->buffer_pos);\n      {\n        int cmpb = memcmp (&buf[newline + 4],\n                           boundary,\n                           blen);\n        probe_log(\"memcmp boundary check at buf[%zu] against boundary (blen=%zu) returned %d\",\n                  newline + 4, blen, cmpb);\n        probe_dump_hex(\"buffer segment for boundary compare\", &buf[newline + 4], blen);\n        if (boundary != NULL)\n            probe_dump_hex(\"boundary bytes\", boundary, blen);\n\n        if (0 != cmpb)\n        {\n          /* no boundary, \"\\r\\n--\" is part of content, skip */\n          probe_log(\"no boundary found at this position (cmpb=%d). Advancing newline by 4.\", cmpb);\n          newline += 4;\n          continue;\n        }\n        else\n        {\n          /* boundary found, process until newline then\n             skip boundary and go back to init */\n          probe_log(\"boundary MATCH found at index %zu (newline=%zu). Setting states and skipping boundary bytes=%zu.\", newline + 4, newline, blen + 4);\n          pp->skip_rn = RN_Dash;\n          pp->state = next_state;\n          pp->dash_state = next_dash_state;\n          (*ioffptr) += blen + 4;             /* skip boundary as well */\n          buf[newline] = '\\0';\n          break;\n        }\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      probe_log(\"cannot check for boundary yet: newline=%zu, blen=%zu, buffer_pos=%zu, buffer_size=%zu\",\n                newline, blen, pp->buffer_pos, pp->buffer_size);\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        probe_log(\"OUT OF MEMORY condition: newline==0 and buffer_pos==buffer_size (%zu). Setting PP_Error and returning MHD_NO.\", pp->buffer_size);\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    probe_log(\"ikvi callback returned MHD_NO. Setting PP_Error and returning MHD_NO. newline=%zu, value_offset=%zu\", newline, pp->value_offset);\n    pp->state = PP_Error;\n    return MHD_NO;\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n\n  probe_log(\"EXIT process_value_to_boundary: returning MHD_YES. Updated ioff=%zu, value_offset=%zu, must_ikvi=%d\",\n            *ioffptr, pp->value_offset, (int) pp->must_ikvi);\n  return MHD_YES;\n}\n"
}