{
  "user_message": "An agent A claimed that the following MHD_queue_basic_auth_required_response3 code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_queue_basic_auth_required_response3.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  if (NULL == response)\n    return MHD_NO;\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\\\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n  }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement \"(void) version;\" is an executed no-op (a cast-to-void expression statement) used solely to silence an unused-parameter warning. Its removal would not affect program behaviour, so it is dead code. This pattern appears in the connection handler functions (e.g. ahc_echo, answer_to_connection) and therefore violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void MHD_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/578.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  /* Log entry and key parameter/state info */\n  MHD_probe_log(\"MHD_queue_basic_auth_required_response3: entry: connection=%p, realm=%p, prefer_utf8=%d, response=%p\",\n                (void *) connection, (void *) realm, prefer_utf8, (void *) response);\n\n  if (NULL == response)\n  {\n    MHD_probe_log(\"MHD_queue_basic_auth_required_response3: early return: response == NULL -> MHD_NO\");\n    return MHD_NO;\n  }\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  MHD_probe_log(\"Computed sizes: prefix_len=%zu, realm_len=%zu, suffix_len=%zu, h_maxlen=%zu\",\n                prefix_len, realm_len, suffix_len, h_maxlen);\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    MHD_probe_log(\"MHD_queue_basic_auth_required_response3: malloc failed (h_maxlen=%zu)\", h_maxlen);\n    return MHD_NO;\n  }\n  MHD_probe_log(\"malloc succeeded: h_str=%p\", (void *) h_str);\n\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  MHD_probe_log(\"After quoting realm: realm_quoted_len=%zu, pos=%zu\", realm_quoted_len, pos);\n\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n    MHD_probe_log(\"prefer_utf8==0 path: terminated with \\\" and NUL at pos=%zu\", pos - 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n    MHD_probe_log(\"prefer_utf8!=0 path: copied suff_charset starting at pos=%zu\", pos);\n  }\n\n  /* Log the header string that will be used (null-terminated)\n     Protect against accidental huge output by limiting length in log. */\n  if (h_str != NULL)\n  {\n    size_t log_len = strlen(h_str);\n    if (log_len > 1024)\n      log_len = 1024;\n    /* Temporarily copy into a buffer to ensure safe formatting */\n    char buf[1025];\n    strncpy(buf, h_str, log_len);\n    buf[log_len] = '\\0';\n    MHD_probe_log(\"Built header (len=%zu): %s\", strlen(h_str), buf);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  MHD_probe_log(\"MHD_add_response_header returned: %d\", (int) ret);\n\n  free (h_str);\n  MHD_probe_log(\"Freed h_str\");\n\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n    MHD_probe_log(\"MHD_queue_response returned: %d\", (int) ret);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n    MHD_probe_log(\"Did not queue response because adding header failed\");\n  }\n  MHD_probe_log(\"MHD_queue_basic_auth_required_response3: exit with ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_queue_basic_auth_required_response3. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the submitted function. The MHD_queue_basic_auth_required_response3 implementation shown does not contain the statement \u201c(void) version;\u201d (or any equivalent cast-to-void no-op). All of the function parameters are used: response is checked and passed into MHD_add_response_header and MHD_queue_response, realm and prefer_utf8 are used to build the header, and connection is used by MHD_queue_response (and by debug logging under HAVE_MESSAGES). The added probe instrumentation compiled but produced no log because the function simply was not exercised by the test \u2014 that does not show a Rule 2.2 violation in this function.\n\n(For completeness: a plain (void)x; that evaluates an unqualified non-volatile object and has no side-effects is, by the literal wording of Rule 2.2, an executed no-op whose removal would not affect behaviour and therefore would be dead code. If such casts appear elsewhere in the codebase they would need separate review. That said, no such cast appears in the target function, so Agent A\u2019s claim about this function violating Rule 2.2 is incorrect.)"
}