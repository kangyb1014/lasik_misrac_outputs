{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function declaration uses the macro _MHD_EXTERN which expands to __attribute__((visibility(\"default\"))) extern. The __attribute__((...)) syntax is a GCC/Clang compiler-specific extension (documented as an extension), so a language extension is used in the declaration of MHD_add_response_header.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_queue_basic_auth_required_response3 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/576.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_queue_basic_auth_required_response3 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_queue_basic_auth_required_response3:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  if (NULL == response)\n    return MHD_NO;\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\\\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_queue_basic_auth_required_response3 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe logging helper. Writes info to /tmp/logs/576.txt to capture control\n   flow and state for reproduction of the reported violation scenario. */\nstatic void mhd_probe_log(const char *stage,\n                          struct MHD_Connection *connection,\n                          const char *realm,\n                          int prefer_utf8,\n                          size_t prefix_len,\n                          size_t realm_len,\n                          size_t suffix_len,\n                          size_t h_maxlen,\n                          const char *h_str,\n                          size_t realm_quoted_len,\n                          size_t pos,\n                          int ret_value)\n{\n  FILE *f = fopen(\"/tmp/logs/576.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"--- MHD probe: %s ---\\n\", stage ? stage : \"(null)\");\n  fprintf(f, \"connection ptr: %p\\n\", (void *) connection);\n  if (realm)\n  {\n    /* Print realm up to a reasonable size to avoid huge logs */\n    size_t to_print = realm_len;\n    if (to_print > 256)\n      to_print = 256;\n    fprintf(f, \"realm ptr: %p, realm (len=%zu): '%.*s'%s\\n\",\n            (void *) realm, realm_len, (int) to_print, realm,\n            (realm_len > to_print) ? \"...\" : \"\");\n  }\n  else\n  {\n    fprintf(f, \"realm: (null)\\n\");\n  }\n  fprintf(f, \"prefer_utf8: %d\\n\", prefer_utf8);\n  fprintf(f, \"prefix_len: %zu, realm_len: %zu, suffix_len: %zu, h_maxlen: %zu\\n\",\n          prefix_len, realm_len, suffix_len, h_maxlen);\n  fprintf(f, \"realm_quoted_len: %zu, pos: %zu\\n\", realm_quoted_len, pos);\n  if (h_str)\n  {\n    size_t show = strlen(h_str);\n    if (show > 512) show = 512;\n    fprintf(f, \"h_str ptr: %p, h_str (first %zu bytes): '%.*s'%s\\n\",\n            (void *) h_str, show, (int) show, h_str,\n            (strlen(h_str) > show) ? \"...\" : \"\");\n    /* Also dump a few bytes in hex to see terminating zero and any attributes */\n    fprintf(f, \"h_str bytes (hex, first 32 bytes):\");\n    for (size_t i = 0; i < 32 && i < strlen(h_str) + 1; ++i)\n      fprintf(f, \" %02x\", (unsigned char) h_str[i]);\n    fprintf(f, \"\\n\");\n  }\n  else\n  {\n    fprintf(f, \"h_str: (null)\\n\");\n  }\n\n  /* Record the return value if available */\n  fprintf(f, \"ret_value: %d\\n\", ret_value);\n\n  /* Log addresses of key functions if available. This can help show\n     that these symbols are exported (default visibility) at runtime. */\n  {\n    void *addr_add = (void *) &MHD_add_response_header;\n    void *addr_queue = (void *) &MHD_queue_response;\n    fprintf(f, \"&MHD_add_response_header: %p\\n\", addr_add);\n    fprintf(f, \"&MHD_queue_response: %p\\n\", addr_queue);\n  }\n\n  fprintf(f, \"--- end probe: %s ---\\n\\n\", stage ? stage : \"(null)\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  /* Log function entry and initial parameters */\n  mhd_probe_log(\"entry\", connection, realm, prefer_utf8,\n                prefix_len, (realm ? strlen(realm) : 0), 0, 0, NULL, 0, 0, -1);\n\n  if (NULL == response)\n    return MHD_NO;\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  /* Log computed sizes */\n  mhd_probe_log(\"computed_sizes\", connection, realm, prefer_utf8,\n                prefix_len, realm_len, suffix_len, h_maxlen,\n                NULL, 0, 0, -1);\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    /* Log malloc failure */\n    mhd_probe_log(\"malloc_failed\", connection, realm, prefer_utf8,\n                  prefix_len, realm_len, suffix_len, h_maxlen,\n                  NULL, 0, 0, -1);\n    return MHD_NO;\n  }\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  /* Log header string just before calling MHD_add_response_header. Also\n     capture function pointer addresses to provide evidence that the\n     symbols are present at runtime (which may be consistent with visibility\n     attributes being applied). */\n  mhd_probe_log(\"before_add_header\", connection, realm, prefer_utf8,\n                prefix_len, realm_len, suffix_len, h_maxlen,\n                h_str, realm_quoted_len, pos, -1);\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n\n  /* Log result of MHD_add_response_header call */\n  mhd_probe_log(\"after_add_header\", connection, realm, prefer_utf8,\n                prefix_len, realm_len, suffix_len, h_maxlen,\n                h_str, realm_quoted_len, pos, (int) ret);\n\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n    /* Log failure path */\n    mhd_probe_log(\"add_header_failed\", connection, realm, prefer_utf8,\n                  prefix_len, realm_len, suffix_len, h_maxlen,\n                  NULL, realm_quoted_len, pos, (int) ret);\n  }\n\n  /* Final log before returning */\n  mhd_probe_log(\"exit\", connection, realm, prefer_utf8,\n                prefix_len, realm_len, suffix_len, h_maxlen,\n                NULL, realm_quoted_len, pos, (int) ret);\n\n  return ret;\n}\n"
}