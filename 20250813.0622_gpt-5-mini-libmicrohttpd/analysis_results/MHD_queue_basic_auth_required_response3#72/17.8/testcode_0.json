{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_queue_response the value of the non-pointer parameter 'status_code' is modified: reply_icy = (0 != (status_code & MHD_ICY_FLAG)); followed by status_code &= ~MHD_ICY_FLAG; \u2014 this writes to the parameter variable. MISRA C 2023 Rule 17.8 forbids modifying function parameters. The fix is to copy the parameter to a local variable (e.g. unsigned int sc = status_code;) and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_queue_basic_auth_required_response3 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/581.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_queue_basic_auth_required_response3 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_queue_basic_auth_required_response3:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  if (NULL == response)\n    return MHD_NO;\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\\\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_queue_basic_auth_required_response3 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Forward declaration of types from the surrounding codebase. */\nstruct MHD_Connection;\nstruct MHD_Response;\n\n/* Forward declaration of existing functions used here. */\nextern size_t MHD_STATICSTR_LEN_ (const char *s);\nextern size_t MHD_str_quote (const char *src, size_t src_len, char *dst, size_t dst_len);\nextern void mhd_assert (int expr);\nextern enum MHD_Result MHD_add_response_header (struct MHD_Response *response, const char *name, const char *value);\nextern enum MHD_Result MHD_queue_response (struct MHD_Connection *connection, int status_code, struct MHD_Response *response);\n\n/* Logging helper used to ensure the log directory exists and to append messages. */\nstatic void probe_log_append(const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  /* Ensure directory exists. Ignore errors if it cannot be created. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  f = fopen(\"/tmp/logs/581.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\n\n/* Wrapper around MHD_queue_response that logs inputs and outputs. */\nstatic enum MHD_Result Probe_MHD_queue_response(struct MHD_Connection *connection,\n                                                int status_code,\n                                                struct MHD_Response *response)\n{\n  enum MHD_Result r;\n\n  probe_log_append(\"Probe_MHD_queue_response: entry: connection=%p status_code=%d response=%p\\n\",\n                   (void *) connection, status_code, (void *) response);\n\n  /* Call the actual implementation. Do not modify status_code here. */\n  r = MHD_queue_response(connection, status_code, response);\n\n  probe_log_append(\"Probe_MHD_queue_response: exit : return=%d\\n\", (int) r);\n  return r;\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: entry: connection=%p realm=%p prefer_utf8=%d response=%p\\n\",\n                   (void *) connection, (void *) realm, prefer_utf8, (void *) response);\n\n  if (NULL == response)\n  {\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: early return: response==NULL -> MHD_NO\\n\");\n    return MHD_NO;\n  }\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: computed: prefix_len=%zu realm_len=%zu suffix_len=%zu h_maxlen=%zu\\n\",\n                   prefix_len, realm_len, suffix_len, h_maxlen);\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: malloc failed\\n\");\n    return MHD_NO;\n  }\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: malloc succeeded: h_str=%p\\n\", (void *) h_str);\n\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: after quote: pos=%zu realm_quoted_len=%zu\\n\",\n                   pos, realm_quoted_len);\n\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\\\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: prefer_utf8==0: terminated at pos=%zu\\n\", pos);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: prefer_utf8!=0: copied suff_charset, pos=%zu\\n\", pos);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: MHD_add_response_header returned %d\\n\", (int) ret);\n\n  free (h_str);\n\n  if (MHD_NO != ret)\n  {\n    /* Use the probe wrapper so we log the status_code and the call/return of MHD_queue_response. */\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: calling MHD_queue_response (wrapped) with status=MHD_HTTP_UNAUTHORIZED\\n\");\n    ret = Probe_MHD_queue_response (connection,\n                                    MHD_HTTP_UNAUTHORIZED,\n                                    response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: failed to add header, returning %d\\n\", (int) ret);\n  }\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: exit: returning %d\\n\", (int) ret);\n  return ret;\n}\n"
}