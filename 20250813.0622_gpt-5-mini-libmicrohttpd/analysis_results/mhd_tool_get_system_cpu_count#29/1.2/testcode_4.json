{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the result of GetProcAddress through (void *) to a function pointer type: ptrGetThreadGroupAffinity = (GTGA_PTR) (void *) GetProcAddress (k32hndl, \"GetThreadGroupAffinity\"); This relies on conversion between object pointers and function pointers (data-pointer \u21c4 function-pointer), which is not guaranteed by ISO C and is only supported as an implementation-specific/extended behaviour on many compilers. Therefore it depends on a compiler-specific extension/implementation-defined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_system_cpu_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/232.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_system_cpu_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_system_cpu_count:\n```c\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number.\n     * See get_nprocs_fallback() in glibc\n       sysdeps/unix/sysv/linux/getsysstats.c */\n\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      return res;\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n#endif /* __linux__ || __GLIBC__  */\n\n  return -1; /* Cannot detect */\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_system_cpu_count code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n\n/* Forward declarations of existing helper functions (implemented elsewhere). */\nint mhd_tool_get_sys_cpu_count_special_api_(void);\nint mhd_tool_get_sys_cpu_count_sysctl_(void);\nint mhd_tool_get_sys_cpu_count_sysconf_(void);\nint mhd_tool_get_proc_cpu_count(void);\nint mhd_tool_get_sys_cpu_count_sysctl_fallback_(void);\nint mhd_tool_get_sys_cpu_count_sysconf_fallback_(void);\n\n/* Simple logging helpers that append probe information to the log file.\n   These are intentionally lightweight: they open, write, and close so that\n   intermediate results are flushed and visible to other agents/processes. */\nstatic void log_append(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/232.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf(f, \"%s\\n\", msg);\n  fclose(f);\n}\n\nstatic void log_call_result(const char *name, int result)\n{\n  FILE *f = fopen(\"/tmp/logs/232.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf(f, \"Function %s returned %d (errno=%d)\\n\", name, result, errno);\n  fclose(f);\n}\n\nstatic int invoke_and_log(const char *name, int (*fn)(void))\n{\n  int r;\n  FILE *f = fopen(\"/tmp/logs/232.txt\", \"a\");\n  if (f) {\n    fprintf(f, \"Invoking %s()\\n\", name);\n    fclose(f);\n  }\n\n  r = fn();\n\n  log_call_result(name, r);\n  return r;\n}\n\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n\n  log_append(\"ENTER: mhd_tool_get_system_cpu_count\");\n\n  /* Try specialised APIs first */\n  res = invoke_and_log(\"mhd_tool_get_sys_cpu_count_special_api_\",\n                       mhd_tool_get_sys_cpu_count_special_api_);\n  if (0 < res)\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"early return (special_api) -> %d\", res);\n    log_append(buf);\n    return res;\n  }\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = invoke_and_log(\"mhd_tool_get_sys_cpu_count_sysctl_\",\n                       mhd_tool_get_sys_cpu_count_sysctl_);\n  if (0 < res)\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"early return (sysctl) -> %d\", res);\n    log_append(buf);\n    return res;\n  }\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = invoke_and_log(\"mhd_tool_get_sys_cpu_count_sysconf_\",\n                       mhd_tool_get_sys_cpu_count_sysconf_);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"early return (sysconf) -> %d\", res);\n    log_append(buf);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"early return (sysconf > 2) -> %d\", res);\n    log_append(buf);\n    return res;\n  }\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number.\n     * See get_nprocs_fallback() in glibc\n       sysdeps/unix/sysv/linux/getsysstats.c */\n\n    int proc_cpu_count;\n\n    proc_cpu_count = invoke_and_log(\"mhd_tool_get_proc_cpu_count\",\n                                    mhd_tool_get_proc_cpu_count);\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      char buf[128];\n      snprintf(buf, sizeof(buf), \"proc_cpu_count == res (%d). return %d\",\n               proc_cpu_count, res);\n      log_append(buf);\n      return res;\n    }\n    else\n    {\n      char buf[128];\n      snprintf(buf, sizeof(buf), \"proc_cpu_count (%d) != res (%d). continue\",\n               proc_cpu_count, res);\n      log_append(buf);\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = invoke_and_log(\"mhd_tool_get_sys_cpu_count_sysctl_fallback_\",\n                       mhd_tool_get_sys_cpu_count_sysctl_fallback_);\n  if (0 < res)\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"early return (sysctl_fallback) -> %d\", res);\n    log_append(buf);\n    return res;\n  }\n\n  res = invoke_and_log(\"mhd_tool_get_sys_cpu_count_sysconf_fallback_\",\n                       mhd_tool_get_sys_cpu_count_sysconf_fallback_);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"early return (sysconf_fallback) -> %d\", res);\n    log_append(buf);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"early return (sysconf_fallback > 2) -> %d\", res);\n    log_append(buf);\n    return res;\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  log_append(\"EXIT: mhd_tool_get_system_cpu_count -> -1 (Cannot detect)\");\n  return -1; /* Cannot detect */\n}\n"
}