{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The expression-statement \"(void) version;\" is a no-op used solely to suppress an unused-parameter compiler warning. It has no side-effects and removing it would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2. (The same applies to the other \"(void) <param>;\" lines in the function.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nahc_echo_log(const char *stage,\n             void *cls,\n             struct MHD_Connection *connection,\n             const char *url,\n             const char *method,\n             const char *version,\n             const char *upload_data, size_t *upload_data_size, void **req_cls,\n             int *already_called_marker)\n{\n  FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  /* Log basic pointers and small snippets (defensive widths). */\n  fprintf(f, \"[ahc_echo] %s\\n\", stage);\n  fprintf(f, \"  cls=%p connection=%p url=%p method=%p version=%p\\n\",\n          cls, (void *) connection, (const void *) url, (const void *) method, (const void *) version);\n  fprintf(f, \"  upload_data=%p upload_data_size=%p req_cls=%p already_marker_addr=%p\\n\",\n          (const void *) upload_data, (void *) upload_data_size, (void *) req_cls, (void *) already_called_marker);\n\n  if (url != NULL)\n    fprintf(f, \"  url(%.80s)\\n\", url);\n  if (method != NULL)\n    fprintf(f, \"  method(%.20s)\\n\", method);\n  if (version != NULL)\n    fprintf(f, \"  version(%.20s)\\n\", version);\n  if (upload_data != NULL)\n    fprintf(f, \"  upload_data(%.80s)\\n\", upload_data);\n  if (upload_data_size != NULL)\n    fprintf(f, \"  *upload_data_size=%zu\\n\", *upload_data_size);\n\n  /* Log the current value of *req_cls if available (may be NULL). */\n  if (req_cls != NULL)\n  {\n    void *deref = *req_cls;\n    fprintf(f, \"  *req_cls=%p\\n\", deref);\n  }\n\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n\n  /* Log entry state before handling unused-parameter casts */\n  ahc_echo_log(\"entry\", cls, connection, url, method, version, upload_data, upload_data_size, req_cls, &already_called_marker);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log immediately after the no-op casts to show these lines are executed. */\n  ahc_echo_log(\"after_unused_casts\", cls, connection, url, method, version, upload_data, upload_data_size, req_cls, &already_called_marker);\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    /* Log branch: first call */\n    ahc_echo_log(\"first_call_before_set\", cls, connection, url, method, version, upload_data, upload_data_size, req_cls, &already_called_marker);\n\n    *req_cls = &already_called_marker;\n\n    /* Wait for complete request */\n    ahc_echo_log(\"returning_MHD_YES_wait\", cls, connection, url, method, version, upload_data, upload_data_size, req_cls, &already_called_marker);\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  ahc_echo_log(\"before_digest_check\", cls, connection, url, method, version, upload_data, upload_data_size, req_cls, &already_called_marker);\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n\n  /* Log digest result for evidence */\n  {\n    FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[ahc_echo] digest result res_e=%d\\n\", (int) res_e);\n      fclose(f);\n    }\n  }\n\n  if (res_e != MHD_DAUTH_OK)\n  {\n    ahc_echo_log(\"auth_failed_before_create_response\", cls, connection, url, method, version, upload_data, upload_data_size, req_cls, &already_called_marker);\n\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    /* Log the queued auth-required response result */\n    {\n      FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n      if (f != NULL)\n      {\n        fprintf(f, \"[ahc_echo] queued auth required response ret=%d\\n\", (int) ret);\n        fclose(f);\n      }\n    }\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n\n  ahc_echo_log(\"auth_ok_before_create_page\", cls, connection, url, method, version, upload_data, upload_data_size, req_cls, &already_called_marker);\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n\n  {\n    FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"[ahc_echo] queued OK response ret=%d\\n\", (int) ret);\n      fclose(f);\n    }\n  }\n\n  MHD_destroy_response (response);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A's report is correct. MISRA C 2023 Rule 2.2 defines dead code as \u201cAny operation that is executed but whose removal would not affect program behaviour.\u201d The statements\n  (void) cls; (void) url; (void) method; (void) version; (void) upload_data; (void) upload_data_size;\nare expression-statements that perform no observable action or side-effect in this context (the operands are non-volatile local parameters whose evaluation does not change program state). Removing those statements would not alter program behaviour, so they meet the definition of dead code and therefore violate Rule 2.2 unless an appropriate justification or deviation is recorded.\n\nNote: if an operand had side-effects or was volatile, evaluating it could be observable and then the statement would not be dead. Also the empty test log in the provided test harness simply shows the function was not exercised; it does not affect the static conclusion about those no-op casts."
}