{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code takes the address of already_called_marker (declared as \u2018static int already_called_marker\u2019) and stores/compares it via a void* (through req_cls). The marker is never modified, so the pointer could/should point to a const-qualified type (e.g. declare the marker as \u2018static const int\u2019 and use a pointer-to-const). Using a non-const int* here therefore violates MISRA C 2023 Rule 8.13. Note: fixing this cleanly may require changes to the API (req_cls type) or an explicit cast when assigning a const address to the void* slot.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/507.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helpers to record control flow and state for the\n * already_called_marker / req_cls interaction. Logs appended to\n * /tmp/logs/507.txt. These helpers are intentionally small and\n * do not alter program control flow. */\nstatic void log_req_state(const char *stage, const void *marker_addr, const void *req_cls_val, int equal)\n{\n  FILE *f = fopen(\"/tmp/logs/507.txt\", \"a\");\n  if (f != NULL)\n  {\n    (void) fprintf(f, \"%s: marker_addr=%p, req_cls_val=%p, equal=%d\\n\",\n                   stage, marker_addr, req_cls_val, equal);\n    (void) fclose(f);\n  }\n}\n\nstatic void log_auth_result(const char *stage, int res_e, int ret_val)\n{\n  FILE *f = fopen(\"/tmp/logs/507.txt\", \"a\");\n  if (f != NULL)\n  {\n    (void) fprintf(f, \"%s: auth_result=%d, return_val=%d\\n\", stage, res_e, ret_val);\n    (void) fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log initial state: address of marker and current req_cls value. */\n  {\n    void *current_req = NULL;\n    if (req_cls != NULL)\n    {\n      current_req = *req_cls; /* same dereference as in original code */\n    }\n    log_req_state(\"ENTRY\", (const void *)&already_called_marker, current_req,\n                  (current_req == (void *)&already_called_marker));\n  }\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    /* Log that we are about to set req_cls to point to the marker */\n    log_req_state(\"FIRST_TIME_BEFORE_SET\", (const void *)&already_called_marker, *req_cls, 0);\n\n    *req_cls = &already_called_marker;\n\n    /* Log after setting to capture the pointer assignment evidence */\n    log_req_state(\"FIRST_TIME_AFTER_SET\", (const void *)&already_called_marker, *req_cls,\n                  (*req_cls == (void *)&already_called_marker));\n\n    /* Wait for complete request */\n    log_auth_result(\"RETURN_EARLY\", -1, (int)MHD_YES);\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  log_req_state(\"BEFORE_AUTH_CHECK\", (const void *)&already_called_marker, *req_cls,\n                (*req_cls == (void *)&already_called_marker));\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n\n  /* Log the auth check result */\n  log_auth_result(\"AFTER_AUTH_CHECK\", (int)res_e, -1);\n\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    /* Log that we're about to destroy the response and return */\n    log_auth_result(\"AUTH_REQUIRED_RESPONSE\", (int)res_e, (int)ret);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n\n  /* Log successful response queuing and final pointer state */\n  log_auth_result(\"SUCCESS_RESPONSE_QUEUED\", (int)res_e, (int)ret);\n  log_req_state(\"EXIT\", (const void *)&already_called_marker, *req_cls,\n                (*req_cls == (void *)&already_called_marker));\n\n  MHD_destroy_response (response);\n  return ret;\n}\n"
}