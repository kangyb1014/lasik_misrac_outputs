{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function MHD_get_timeout64 takes 'struct MHD_Daemon *daemon' but only reads from the daemon structure (no modifications). Therefore the daemon parameter could and should be declared as 'const struct MHD_Daemon *daemon' to indicate read-only access. The second parameter 'uint64_t *timeout64' is an output parameter (the function stores results into *timeout64) so it cannot be const. Because the daemon pointer is not const-qualified even though it can be, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_select code that contains useful probe functions that print useful logs to a file \"/tmp/logs/131.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_select as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_select:\n```c\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n    return MHD_NO;\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n    millisec = 0;\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      err_state = MHD_YES;\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        err_state = MHD_YES;\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          err_state = MHD_YES;\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n    millisec = 0;\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n    }\n  }\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  if (daemon->shutdown)\n    return MHD_NO;\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n    return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_select code.\n",
  "test_code": "static void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/131.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n  enum MHD_Result get_tmo_res = MHD_NO;\n  uint64_t mhd_tmo = 0;\n  uint64_t select_tmo = 0;\n\n  probe_log(\"MHD_select ENTRY: daemon=%p millisec=%d shutdown=%d\",\n            (void *) daemon,\n            (int) millisec,\n            (int) daemon->shutdown);\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n  {\n    probe_log(\"MHD_select EARLY RETURN: daemon->shutdown true -> return MHD_NO\");\n    return MHD_NO;\n  }\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n  {\n    probe_log(\"suspend/resume path: forcing millisec=0 (was %d)\", (int) millisec);\n    millisec = 0;\n  }\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      probe_log(\"internal_get_fdset2 FAILED: setting err_state=MHD_YES daemon=%p maxsock=%lld\",\n                (void *) daemon,\n                (long long) maxsock);\n      err_state = MHD_YES;\n    }\n    else\n    {\n      probe_log(\"internal_get_fdset2 OK: daemon=%p maxsock=%lld\",\n                (void *) daemon,\n                (long long) maxsock);\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        probe_log(\"itc add FAILED: daemon=%p itc=%p\", (void *) daemon, (void *) daemon->itc);\n        err_state = MHD_YES;\n      }\n      else\n      {\n        probe_log(\"itc add OK: daemon=%p itc=%p maxsock=%lld\",\n                  (void *) daemon,\n                  (void *) daemon->itc,\n                  (long long) maxsock);\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      probe_log(\"listen fd present: ls=%lld was_quiesced=%d connections=%d limit=%d at_limit=%d\",\n                (long long) ls,\n                (int) daemon->was_quiesced,\n                (int) daemon->connections,\n                (int) daemon->connection_limit,\n                (int) daemon->at_limit);\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          probe_log(\"add listen socket FAILED: ls=%lld daemon=%p\", (long long) ls, (void *) daemon);\n          err_state = MHD_YES;\n        }\n        else\n        {\n          probe_log(\"add listen socket OK: ls=%lld maxsock=%lld\", (long long) ls, (long long) maxsock);\n        }\n      }\n      else\n      {\n        probe_log(\"skip adding listen socket due to limits or no itc: itc_added=%d connections=%d limit=%d at_limit=%d\",\n                  (int) itc_added,\n                  (int) daemon->connections,\n                  (int) daemon->connection_limit,\n                  (int) daemon->at_limit);\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n  {\n    probe_log(\"err_state set -> forcing millisec=0 (was %d)\", (int) millisec);\n    millisec = 0;\n  }\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n    probe_log(\"timeout forced to zero: tv=%p sec=%ld usec=%ld\",\n              (void *) tv,\n              (long) timeout.tv_sec,\n              (long) timeout.tv_usec);\n  }\n  else\n  {\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n    {\n      /* call explicitly so we can log result */\n      get_tmo_res = MHD_get_timeout64 (daemon, &mhd_tmo);\n      probe_log(\"MHD_get_timeout64 CALLED: daemon=%p result=%d mhd_tmo=%llu\",\n                (void *) daemon,\n                (int) get_tmo_res,\n                (unsigned long long) mhd_tmo);\n    }\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != get_tmo_res) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n      probe_log(\"using mhd timeout: mhd_tmo=%llu millisec=%d select_tmo=%llu tv=%p\",\n                (unsigned long long) mhd_tmo,\n                (int) millisec,\n                (unsigned long long) select_tmo,\n                (void *) tv);\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n      probe_log(\"using millisec timeout only: select_tmo=%llu tv=%p\",\n                (unsigned long long) select_tmo,\n                (void *) tv);\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n      probe_log(\"no timeout: tv=NULL\");\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n      probe_log(\"calculated timeval: sec=%ld usec=%ld from select_tmo=%llu\",\n                (long) timeout.tv_sec,\n                (long) timeout.tv_usec,\n                (unsigned long long) select_tmo);\n    }\n  }\n  probe_log(\"calling select: maxsock=%lld tv=%p\",\n            (long long) maxsock,\n            (void *) tv);\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  probe_log(\"select returned: num_ready=%d daemon->shutdown=%d\",\n            (int) num_ready,\n            (int) daemon->shutdown);\n  if (daemon->shutdown)\n  {\n    probe_log(\"MHD_select EARLY RETURN after select: daemon->shutdown true -> return MHD_NO\");\n    return MHD_NO;\n  }\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    probe_log(\"select error: errno=%d\", (int) err);\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n    {\n      probe_log(\"select EINTR, returning %s\", (MHD_NO == err_state) ? \"MHD_YES\" : \"MHD_NO\");\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n    }\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    probe_log(\"select fatal error, returning MHD_NO\");\n    return MHD_NO;\n  }\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n  {\n    probe_log(\"internal_run_from_select returned non-MHD_NO -> returning %s\",\n              (MHD_NO == err_state) ? \"MHD_YES\" : \"MHD_NO\");\n    return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  }\n  probe_log(\"MHD_select EXIT: returning MHD_NO\");\n  return MHD_NO;\n}"
}