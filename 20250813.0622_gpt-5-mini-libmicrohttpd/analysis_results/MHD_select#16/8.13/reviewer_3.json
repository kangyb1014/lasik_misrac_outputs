{
  "user_message": "An agent A claimed that the following MHD_select code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_select.\n```c\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n    return MHD_NO;\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n    millisec = 0;\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      err_state = MHD_YES;\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        err_state = MHD_YES;\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          err_state = MHD_YES;\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n    millisec = 0;\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n    }\n  }\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  if (daemon->shutdown)\n    return MHD_NO;\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n    return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  return MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:internal_run_from_select declares write_fd_set as const fd_set * but the code casts away the const qualifier to call FD_ISSET: w_ready = FD_ISSET(cs, (fd_set *) _MHD_DROP_CONST(write_fd_set)); This discards the const qualification and treats a pointer-to-const as a pointer-to-nonconst, violating the requirement that pointers should point to const-qualified types whenever possible (and avoiding const-discard casts).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/131.txt\", \"a\");\n  if (!f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\nstatic void mhd_log_fdset_states(const char *label, const fd_set *r, const fd_set *w, const fd_set *e, int fdcount)\n{\n  FILE *f = fopen(\"/tmp/logs/131.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"%s: fdcount=%d\\n\", label, fdcount);\n  fprintf(f, \" read fds:\");\n  for (int i = 0; i < fdcount; ++i)\n    if (FD_ISSET(i, (fd_set *) r)) /* r/w/e are non-const in caller; cast here only for fprintf use */\n      fprintf(f, \" %d\", i);\n  fprintf(f, \"\\n write fds:\");\n  for (int i = 0; i < fdcount; ++i)\n    if (FD_ISSET(i, (fd_set *) w))\n      fprintf(f, \" %d\", i);\n  fprintf(f, \"\\n except fds:\");\n  for (int i = 0; i < fdcount; ++i)\n    if (FD_ISSET(i, (fd_set *) e))\n      fprintf(f, \" %d\", i);\n  fprintf(f, \"\\n\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  mhd_log(\"MHD_select: enter daemon=%p millisec=%d\", (void *) daemon, (int) millisec);\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n  {\n    mhd_log(\"MHD_select: early exit due to shutdown\");\n    return MHD_NO;\n  }\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n    millisec = 0;\n\n  mhd_log(\"MHD_select: after init maxsock=%ld options=0x%08x connections=%d connection_limit=%d was_quiesced=%d\",\n          (long) maxsock,\n          (unsigned int) daemon->options,\n          (int) daemon->connections,\n          (int) daemon->connection_limit,\n          (int) daemon->was_quiesced);\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      mhd_log(\"MHD_select: internal_get_fdset2 failed\");\n      err_state = MHD_YES;\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        mhd_log(\"MHD_select: failed to add ITC fd to rs\");\n        err_state = MHD_YES;\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          mhd_log(\"MHD_select: failed to add listen socket to rs\");\n          err_state = MHD_YES;\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n    millisec = 0;\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n    }\n  }\n  mhd_log(\"MHD_select: calling select maxsock=%ld tv=%p tv_sec=%ld tv_usec=%ld\",\n          (long) maxsock,\n          (void *) tv,\n          (long) timeout.tv_sec,\n          (long) timeout.tv_usec);\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  mhd_log(\"MHD_select: select returned=%d\", num_ready);\n\n  if (daemon->shutdown)\n  {\n    mhd_log(\"MHD_select: exit after select due to shutdown\");\n    return MHD_NO;\n  }\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    mhd_log(\"MHD_select: select error=%d\", err);\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n    {\n      mhd_log(\"MHD_select: interrupted by signal, err_state=%d\", err_state);\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n    }\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n\n  /* Probe: log fdset contents before handing them to internal_run_from_select\n     This helps reproduce the scenario where a write fdset is later treated as const\n     inside internal_run_from_select and a cast-away-const is performed there. */\n  mhd_log(\"MHD_select: about to call internal_run_from_select(daemon=%p, rs=%p, ws=%p, es=%p, fdcount=%d)\",\n          (void *) daemon,\n          (void *) &rs,\n          (void *) &ws,\n          (void *) &es,\n          (int) FD_SETSIZE);\n\n  /* Log the actual FDs that are ready in each set */\n  mhd_log_fdset_states(\"MHD_select fdset snapshot\", &rs, &ws, &es, (int) FD_SETSIZE);\n\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n  {\n    mhd_log(\"MHD_select: internal_run_from_select returned non-MHD_NO, err_state=%d\", err_state);\n    return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  }\n  mhd_log(\"MHD_select: exiting normally\");\n  return MHD_NO;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nMHD_select: enter daemon=0x55d37de61860 millisec=0\nMHD_select: after init maxsock=-1 options=0x00000001 connections=0 connection_limit=1019 was_quiesced=0\nMHD_select: calling select maxsock=3 tv=0x7ffe13a60020 tv_sec=0 tv_usec=0\nMHD_select: select returned=0\nMHD_select: about to call internal_run_from_select(daemon=0x55d37de61860, rs=0x7ffe13a60030, ws=0x7ffe13a600b0, es=0x7ffe13a60130, fdcount=1024)\nMHD_select fdset snapshot: fdcount=1024\n read fds:\n write fds:\n except fds:\n\nMHD_select: internal_run_from_select returned non-MHD_NO, err_state=0\nMHD_select: enter daemon=0x55d37de61860 millisec=0\nMHD_select: after init maxsock=-1 options=0x00000001 connections=0 connection_limit=1019 was_quiesced=0\nMHD_select: calling select maxsock=3 tv=0x7ffe13a60020 tv_sec=0 tv_usec=0\nMHD_select: select returned=0\nMHD_select: about to call internal_run_from_select(daemon=0x55d37de61860, rs=0x7ffe13a60030, ws=0x7ffe13a600b0, es=0x7ffe13a60130, fdcount=1024)\nMHD_select fdset snapshot: fdcount=1024\n read fds:\n write fds:\n except fds:\n\nMHD_select: internal_run_from_select returned non-MHD_NO, err_state=0\nMHD_select: enter daemon=0x55d37de61860 millisec=0\nMHD_select: after init maxsock=-1 options=0x00000001 connections=0 connection_limit=1019 was_quiesced=0\nMHD_select: calling select maxsock=3 tv=0x7ffe13a60020 tv_sec=0 tv_usec=0\nMHD_select: select returned=0\nMHD_select: about to call internal_run_from_select(daemon=0x55d37de61860, rs=0x7ffe13a60030, ws=0x7ffe13a600b0, es=0x7ffe13a60130, fdcount=1024)\nMHD_select fdset snapshot: fdcount=1024\n read fds:\n write fds:\n except fds:\n\nMHD_select: internal_run_from_select returned non-MHD_NO, err_state=0\nMHD_select: enter daemon=0x55d37de61860 millisec=0\nMHD_select: after init maxsock=-1 options=0x00000001 connections=0 connection_limit=1019 was_quiesced=0\nMHD_select: calling select maxsock=3 tv=0x7ffe13a60020 tv_sec=0 tv_usec=0\nMHD_select: select returned=0\nMHD_select: about to call internal_run_from_select(daemon=0x55d37de61860, rs=0x7ffe13a60030, ws=0x7ffe13a600b0, es=0x7ffe13a60130, fdcount=1024)\nMHD_select fdset snapshot: fdcount=1024\n read fds:\n write fds:\n except fds:\n\nMHD_select: internal_run_from_select returned non-MHD_NO, err_state=0\nMHD_select: enter daemon=0x55d37de61860 millisec=0\nMHD_select: after init maxsock=-1 options=0x00000001 connections=0 connection_limit=1019 was_quiesced=0\nMHD_select: calling select maxsock=3 tv=0x7ffe13a60020 tv_sec=0 tv_usec=0\nMHD_select: select returned=0\nMHD_select: about to call internal_run_from_select(daemon=0x55d37de61860, rs=0x7ffe13a60030, ws=0x7ffe13a600b0, es=0x7ffe13a60130, fdcount=1024)\nMHD_select fdset snapshot: fdcount=1024\n read fds:\n write fds:\n except fds:\n\nMHD_select: internal_run_from_select returned non-MHD_NO, err_state=0\nMHD_select: enter daemon=0x55d37de61860 millisec=0\nMHD_select: after init maxsock=-1 options=0x00000001 connections=0 connection_limit=1019 was_quiesced=0\nMHD_select: calling select maxsock=3 tv=0x7ffe13a60020 tv_sec=0 tv_usec=0\nMHD_select: select returned=0\nMHD_select: about to call internal_run_from_select(daemon=0x55d37de61860, rs=0x7ffe13a60030, ws=0x7ffe13a600b0, es=0x7ffe13a60130, fdcount=1024)\nMHD_select fdset snapshot: fdcount=1024\n read fds:\n write fds:\n except fds:\n\nMHD_select: internal_run_from_select returned non-MHD_NO, err_state=0\nMHD_select: enter daemon=0x55d37de61860 millisec=0\nMHD_select: after init maxsock=-1 options=0x00000001 connections=0 connection_limit=1019 was_quiesced=0\nMHD_select: calling select maxsock=3 tv=0x7ffe13a60020 tv_sec=0 tv_usec=0\nMHD_select: select returned=0\nMHD_select: about to call internal_run_from_select(daemon=0x55d37de61860, rs=0x7ffe13a60030, ws=0x7ffe13a600b0, es=0x7ffe13a60130, fdcount=1024)\nMHD_select fdset snapshot: fdcount=1024\n read fds:\n write fds:\n except fds:\n\nMHD_select: internal_run_from_select returned non-MHD_NO, err_state=0\nMHD_select: enter daemon=0x55d37de61860 millisec=0\nMHD_select: after init maxsock=-1 options=0x00000001 connections=0 connection_limit=1019 was_quiesced=0\nMHD_select: calling select maxsock=3 tv=0x7ffe13a60020 tv_sec=0 tv_usec=0\nMHD_select\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The MHD_select function shown does not itself discard const qualifiers nor declare pointers that should be const: it declares local fd_set variables (rs, ws, es) that must be mutable (they are zeroed and passed to select(), which modifies them). Passing their addresses to a callee that takes const fd_set * is allowed (a pointer-to-non-const may be passed to a pointer-to-const parameter), so MHD_select does not violate MISRA C 2023 Rule 8.13.\n\nThe alleged cast-away-const (using _MHD_DROP_CONST and casting a const fd_set * to fd_set *) would be a violation if it occurs, but that would be a problem in internal_run_from_select (or wherever the cast is performed), not in the MHD_select code you supplied. The provided test logs only show that the fd_sets were empty and that internal_run_from_select returned a non-MHD_NO value; they do not demonstrate a const-discard in MHD_select itself. Therefore the agent A report that MHD_select violates Rule 8.13 is incorrect."
}