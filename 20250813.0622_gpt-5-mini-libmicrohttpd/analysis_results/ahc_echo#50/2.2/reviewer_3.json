{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int fd;\n  struct stat buf;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ( (0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n       (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                 /* reset when done */\n  /* WARNING: direct usage of url as filename is for example only!\n   * NEVER pass received data directly as parameter to file manipulation\n   * functions. Always check validity of data before using.\n   */\n  if (NULL != strstr (url, \"../\")) /* Very simplified check! */\n    fd = -1;                       /* Do not allow usage of parent directories. */\n  else\n    fd = open (url + 1, O_RDONLY);\n  if (-1 != fd)\n  {\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      if (0 != close (fd))\n        abort ();\n      fd = -1;\n    }\n  }\n  if (-1 == fd)\n  {\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    response = MHD_create_response_from_fd64 ((uint64_t) buf.st_size, fd);\n    if (NULL == response)\n    {\n      if (0 != close (fd))\n        abort ();\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The expression-statement '(void) version;' is an executed no-op used solely to silence an unused-parameter warning. Removing it would not affect program behaviour, so it constitutes dead code (same applies to the similar '(void) cls;', '(void) upload_data;' and '(void) upload_data_size;').\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int fd;\n  struct stat buf;\n  /* Probe log file to capture control flow and state for the reported no-op casts. */\n  FILE *log = fopen(\"/tmp/logs/402.txt\", \"a\");\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  if (log)\n    fprintf(log, \"probe: executed (void) cls; cls=%p\\n\", cls);\n  (void) version;           /* Unused. Silent compiler warning. */\n  if (log)\n    fprintf(log, \"probe: executed (void) version; version=%p\\n\", (const void *) version);\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  if (log)\n    fprintf(log, \"probe: executed (void) upload_data; upload_data=%p\\n\", (const void *) upload_data);\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  if (log)\n    fprintf(log, \"probe: executed (void) upload_data_size; upload_data_size=%p\\n\", (const void *) upload_data_size);\n\n  if (log)\n    fprintf(log, \"probe: enter ahc_echo method=%s url=%s req_cls=%p\\n\",\n            method ? method : \"(null)\", url ? url : \"(null)\", (void *) *req_cls);\n\n  if ( (0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n       (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    if (log) fclose(log);\n    return MHD_NO;              /* unexpected method */\n  }\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    if (log)\n    {\n      fprintf(log, \"probe: first call; set req_cls=%p returning MHD_YES\\n\", (void *) *req_cls);\n      fclose(log);\n    }\n    return MHD_YES;\n  }\n  *req_cls = NULL;                 /* reset when done */\n\n  /* WARNING: direct usage of url as filename is for example only!\n   * NEVER pass received data directly as parameter to file manipulation\n   * functions. Always check validity of data before using.\n   */\n  if (NULL != strstr (url, \"../\")) /* Very simplified check! */\n    fd = -1;                       /* Do not allow usage of parent directories. */\n  else\n    fd = open (url + 1, O_RDONLY);\n\n  if (log)\n    fprintf(log, \"probe: open returned fd=%d for url='%s'\\n\", fd, url ? url : \"(null)\");\n\n  if (-1 != fd)\n  {\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      if (0 != close (fd))\n        abort ();\n      fd = -1;\n      if (log)\n        fprintf(log, \"probe: file rejected after fstat/mode check; fd set to -1\\n\");\n    }\n  }\n  if (-1 == fd)\n  {\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n    if (log)\n    {\n      fprintf(log, \"probe: queued NOT_FOUND response ret=%d\\n\", (int) ret);\n      fclose(log);\n    }\n  }\n  else\n  {\n    response = MHD_create_response_from_fd64 ((uint64_t) buf.st_size, fd);\n    if (NULL == response)\n    {\n      if (0 != close (fd))\n        abort ();\n      if (log)\n        fclose(log);\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n    if (log)\n    {\n      fprintf(log, \"probe: queued OK response ret=%d fd=%d size=%llu\\n\",\n              (int) ret, fd, (unsigned long long) buf.st_size);\n      fclose(log);\n    }\n  }\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The four lines such as (void) version; are expression-statements that do nothing observable at runtime for the given, non-volatile parameter types. Removing them would not change program behaviour (aside from trivially different instruction timing), so by the plain text of MISRA C 2023 Rule 2.2 they are dead code. There is a minor caveat: if the parameter were volatile or its evaluation caused observable side-effects, the cast would not be removable; that is not the case here (the parameters are ordinary pointer/size types). Thus the agent A report is correct: the no-op (void) casts constitute executed dead code under Rule 2.2. Recommended remediation is to use an allowed mechanism to document intentionally unused parameters (compiler/attribute-based unused annotation, or omit the parameter name where legal), rather than leave explicit no-op casts in production code."
}