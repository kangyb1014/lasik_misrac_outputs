{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function stores the address of the static int variable 'aptr' into *req_cls (a void* stored via the void** parameter). The address points to an object that is never modified through that pointer, so according to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type (e.g. make aptr 'static const int' or use a const-qualified pointer type). Therefore this code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int fd;\n  struct stat buf;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ( (0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n       (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                 /* reset when done */\n  /* WARNING: direct usage of url as filename is for example only!\n   * NEVER pass received data directly as parameter to file manipulation\n   * functions. Always check validity of data before using.\n   */\n  if (NULL != strstr (url, \"../\")) /* Very simplified check! */\n    fd = -1;                       /* Do not allow usage of parent directories. */\n  else\n    fd = open (url + 1, O_RDONLY);\n  if (-1 != fd)\n  {\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      if (0 != close (fd))\n        abort ();\n      fd = -1;\n    }\n  }\n  if (-1 == fd)\n  {\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    response = MHD_create_response_from_fd64 ((uint64_t) buf.st_size, fd);\n    if (NULL == response)\n    {\n      if (0 != close (fd))\n        abort ();\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdlib.h>\n\n/* Probe: append human-readable logs to /tmp/logs/403.txt describing\n * control flow and relevant pointer/state values that demonstrate the\n * scenario where the address of the static int 'aptr' is stored into\n * *req_cls and never modified through that pointer.\n *\n * This helper preserves the original logic and only emits logs.\n */\nstatic void\nahc_echo_log (const char *label, void **req_cls, void *aptr_addr,\n              const char *method, const char *url)\n{\n  FILE *fp = fopen(\"/tmp/logs/403.txt\", \"a\");\n  if (fp != NULL)\n  {\n    /* Print a single-line structured log containing:\n     * - a label for the log point\n     * - the HTTP method and URL (if present)\n     * - the address of the req_cls pointer (void**)\n     * - the current value stored in *req_cls (void*)\n     * - the address of the static variable aptr\n     */\n    (void) fprintf (fp,\n                    \"[%s] method=%s url=%s req_cls_ptr=%p star_req_cls=%p aptr_addr=%p\\n\",\n                    label,\n                    (NULL != method) ? method : \"(null)\",\n                    (NULL != url) ? url : \"(null)\",\n                    (void *) req_cls,\n                    (void *) ((NULL != req_cls) ? *req_cls : NULL),\n                    aptr_addr);\n    (void) fclose (fp);\n  }\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int fd;\n  struct stat buf;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and current pointer state */\n  ahc_echo_log (\"ENTRY\", req_cls, &aptr, method, url);\n\n  if ( (0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n       (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n    return MHD_NO;              /* unexpected method */\n\n  /* Log the comparison outcome: whether *req_cls already points to &aptr */\n  ahc_echo_log (\"BEFORE_COMPARE\", req_cls, &aptr, method, url);\n\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    /* Log the state before setting */\n    ahc_echo_log (\"SET_TO_APTR_BEFORE\", req_cls, &aptr, method, url);\n\n    *req_cls = &aptr;\n\n    /* Log the state after setting */\n    ahc_echo_log (\"SET_TO_APTR_AFTER\", req_cls, &aptr, method, url);\n\n    return MHD_YES;\n  }\n\n  /* Log that we observed &aptr == *req_cls and will reset */\n  ahc_echo_log (\"RESET_TO_NULL_BEFORE\", req_cls, &aptr, method, url);\n\n  *req_cls = NULL;                 /* reset when done */\n\n  /* Log after resetting */\n  ahc_echo_log (\"RESET_TO_NULL_AFTER\", req_cls, &aptr, method, url);\n\n  /* WARNING: direct usage of url as filename is for example only!\n   * NEVER pass received data directly as parameter to file manipulation\n   * functions. Always check validity of data before using.\n   */\n  if (NULL != strstr (url, \"../\")) /* Very simplified check! */\n    fd = -1;                       /* Do not allow usage of parent directories. */\n  else\n    fd = open (url + 1, O_RDONLY);\n\n  /* Log file-descriptor decision and the URL used */\n  ahc_echo_log (\"FD_DECISION\", req_cls, &aptr, method, url);\n\n  if (-1 != fd)\n  {\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      if (0 != close (fd))\n        abort ();\n      fd = -1;\n    }\n  }\n  if (-1 == fd)\n  {\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    response = MHD_create_response_from_fd64 ((uint64_t) buf.st_size, fd);\n    if (NULL == response)\n    {\n      if (0 != close (fd))\n        abort ();\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n\n  /* Final log with return status and pointer state */\n  ahc_echo_log (\"EXIT\", req_cls, &aptr, method, url);\n\n  return ret;\n}\n"
}