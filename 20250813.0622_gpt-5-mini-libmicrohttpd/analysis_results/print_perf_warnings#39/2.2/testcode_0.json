{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn run_mhd(), the branch 'else if (tool_params.select)' contains the expression-statement '(void) flags;'. That statement performs no observable action (flags is a non-volatile int) and can be removed without changing program behaviour, so it is dead code when that branch executes. This violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified print_perf_warnings code that contains useful probe functions that print useful logs to a file \"/tmp/logs/314.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of print_perf_warnings as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of print_perf_warnings:\n```c\nstatic void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD))\n  {\n    fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n             \"debug asserts enabled, the performance is suboptimal.\\n\");\n    newline_needed |=  ! 0;\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  if (newline_needed)\n    printf (\"\\n\");\n}\n```\n</target_code>\nPlease provide the modified print_perf_warnings code.\n",
  "test_code": "static void probe_log_event(const char *event, int newline_needed)\n{\n  /* Log control-flow and state to a persistent file for repro and evidence. */\n  FILE *f = fopen(\"/tmp/logs/314.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"%s newline_needed=%d\\n\", event, newline_needed);\n    fclose(f);\n  }\n}\n\nstatic void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n  probe_log_event(\"enter print_perf_warnings\", newline_needed);\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n  probe_log_event(\"after _DEBUG branch\", newline_needed);\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n  probe_log_event(\"after __GNUC__ && !__OPTIMIZE__ branch\", newline_needed);\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n  probe_log_event(\"after __OPTIMIZE_SIZE__ branch\", newline_needed);\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD))\n  {\n    fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n             \"debug asserts enabled, the performance is suboptimal.\\n\");\n    newline_needed |=  ! 0;\n    probe_log_event(\"inside MHD_FEATURE_DEBUG_BUILD supported block\", newline_needed);\n  }\n  else\n  {\n    probe_log_event(\"inside MHD_FEATURE_DEBUG_BUILD unsupported block\", newline_needed);\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  probe_log_event(\"before final newline check\", newline_needed);\n  if (newline_needed)\n    printf (\"\\n\");\n  probe_log_event(\"exit print_perf_warnings\", newline_needed);\n}\n"
}