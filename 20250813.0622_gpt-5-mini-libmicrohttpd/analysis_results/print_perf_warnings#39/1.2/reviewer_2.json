{
  "user_message": "An agent A claimed that the following print_perf_warnings code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of print_perf_warnings.\n```c\nstatic void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD))\n  {\n    fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n             \"debug asserts enabled, the performance is suboptimal.\\n\");\n    newline_needed |=  ! 0;\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  if (newline_needed)\n    printf (\"\\n\");\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses the compiler-specific predefined macro __GNUC__ (e.g. via defined(__GNUC__)), which is an implementation/compiler-specific extension (GCC predefined macro) and therefore constitutes use of a language/compiler extension.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_int(const char *tag, int value)\n{\n    FILE *f = fopen(\"/tmp/logs/312.txt\", \"a\");\n    if (f)\n    {\n        /* Keep the log messages simple and deterministic so other agents\n           can inspect the file to determine which compile-time branches\n           were present and what the runtime state was. */\n        fprintf(f, \"%s: %d\\n\", tag, value);\n        fclose(f);\n    }\n}\nstatic void probe_log_str(const char *tag, const char *s)\n{\n    FILE *f = fopen(\"/tmp/logs/312.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"%s: %s\\n\", tag, s);\n        fclose(f);\n    }\n}\n\nstatic void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n  /* Log entry and initial state */\n  probe_log_str(\"print_perf_warnings:entry\", \"entered\");\n  probe_log_int(\"print_perf_warnings:newline_needed_initial\", newline_needed);\n\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n  /* Probe: _DEBUG branch was present and executed. */\n  probe_log_str(\"print_perf_warnings:_DEBUG\", \"executed\");\n  probe_log_int(\"print_perf_warnings:newline_needed_after__DEBUG\", newline_needed);\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n  /* Probe: __GNUC__ && !__OPTIMIZE__ branch executed -> evidence of GCC predefined macro. */\n  probe_log_str(\"print_perf_warnings:__GNUC___not___OPTIMIZE__\", \"executed\");\n  probe_log_int(\"print_perf_warnings:newline_needed_after_gcc_no_opt\", newline_needed);\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n  /* Probe: __GNUC__ && __OPTIMIZE_SIZE__ branch executed -> evidence of GCC predefined macro. */\n  probe_log_str(\"print_perf_warnings:__GNUC___OPTIMIZE_SIZE__\", \"executed\");\n  probe_log_int(\"print_perf_warnings:newline_needed_after_gcc_opt_size\", newline_needed);\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD))\n  {\n    fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n             \"debug asserts enabled, the performance is suboptimal.\\n\");\n    newline_needed |=  ! 0;\n    /* Probe: MHD debug-build feature detected at runtime. */\n    probe_log_str(\"print_perf_warnings:MHD_FEATURE_DEBUG_BUILD\", \"supported\");\n    probe_log_int(\"print_perf_warnings:newline_needed_after_MHD_check\", newline_needed);\n  }\n  else\n  {\n    /* Probe: MHD check executed but feature not supported. */\n    probe_log_str(\"print_perf_warnings:MHD_FEATURE_DEBUG_BUILD\", \"not_supported\");\n    probe_log_int(\"print_perf_warnings:newline_needed_after_MHD_check_not_supported\", newline_needed);\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  /* Final state probe before potential extra newline. */\n  probe_log_int(\"print_perf_warnings:newline_needed_final\", newline_needed);\n  if (newline_needed)\n  {\n    printf (\"\\n\");\n    probe_log_str(\"print_perf_warnings:printed_extra_newline\", \"yes\");\n  }\n  else\n  {\n    probe_log_str(\"print_perf_warnings:printed_extra_newline\", \"no\");\n  }\n  /* Exit probe */\n  probe_log_str(\"print_perf_warnings:exit\", \"exiting\");\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for print_perf_warnings. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 1.2 forbids use of language/compiler extensions (non\u2011standard language features) as documented by the compiler. The code in question only uses preprocessor conditionals that test compiler/library\u2011provided macros (e.g. defined(__GNUC__), __OPTIMIZE__, MHD_VERSION). Testing predefined macros to detect the compilation environment is not itself a language extension: it merely adapts to the implementation. Typical language extensions that would violate R1.2 are non\u2011standard keywords/constructs or builtins (for example __attribute__, __asm__, typeof, __builtin_* functions, nested functions, etc.). Therefore the report that this function violates Rule 1.2 because it checks __GNUC__ is not correct.\n\nNote: there are separate portability/reserved\u2011identifier concerns (identifiers beginning with underscores or double underscores are reserved for the implementation), and those could be relevant to other MISRA rules, but they are distinct from R1.2\u2019s prohibition on language extensions."
}