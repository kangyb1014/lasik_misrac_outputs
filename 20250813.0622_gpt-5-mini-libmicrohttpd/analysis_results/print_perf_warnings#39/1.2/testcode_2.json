{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses the compiler-specific predefined macro __GNUC__ (e.g. via defined(__GNUC__)), which is an implementation/compiler-specific extension (GCC predefined macro) and therefore constitutes use of a language/compiler extension.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified print_perf_warnings code that contains useful probe functions that print useful logs to a file \"/tmp/logs/312.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of print_perf_warnings as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of print_perf_warnings:\n```c\nstatic void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD))\n  {\n    fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n             \"debug asserts enabled, the performance is suboptimal.\\n\");\n    newline_needed |=  ! 0;\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  if (newline_needed)\n    printf (\"\\n\");\n}\n```\n</target_code>\nPlease provide the modified print_perf_warnings code.\n",
  "test_code": "static void probe_log_int(const char *tag, int value)\n{\n    FILE *f = fopen(\"/tmp/logs/312.txt\", \"a\");\n    if (f)\n    {\n        /* Keep the log messages simple and deterministic so other agents\n           can inspect the file to determine which compile-time branches\n           were present and what the runtime state was. */\n        fprintf(f, \"%s: %d\\n\", tag, value);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_str(const char *tag, const char *s)\n{\n    FILE *f = fopen(\"/tmp/logs/312.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"%s: %s\\n\", tag, s);\n        fclose(f);\n    }\n}\n\nstatic void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n  /* Log entry and initial state */\n  probe_log_str(\"print_perf_warnings:entry\", \"entered\");\n  probe_log_int(\"print_perf_warnings:newline_needed_initial\", newline_needed);\n\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n  /* Probe: _DEBUG branch was present and executed. */\n  probe_log_str(\"print_perf_warnings:_DEBUG\", \"executed\");\n  probe_log_int(\"print_perf_warnings:newline_needed_after__DEBUG\", newline_needed);\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n  /* Probe: __GNUC__ && !__OPTIMIZE__ branch executed -> evidence of GCC predefined macro. */\n  probe_log_str(\"print_perf_warnings:__GNUC___not___OPTIMIZE__\", \"executed\");\n  probe_log_int(\"print_perf_warnings:newline_needed_after_gcc_no_opt\", newline_needed);\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n  /* Probe: __GNUC__ && __OPTIMIZE_SIZE__ branch executed -> evidence of GCC predefined macro. */\n  probe_log_str(\"print_perf_warnings:__GNUC___OPTIMIZE_SIZE__\", \"executed\");\n  probe_log_int(\"print_perf_warnings:newline_needed_after_gcc_opt_size\", newline_needed);\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD))\n  {\n    fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n             \"debug asserts enabled, the performance is suboptimal.\\n\");\n    newline_needed |=  ! 0;\n    /* Probe: MHD debug-build feature detected at runtime. */\n    probe_log_str(\"print_perf_warnings:MHD_FEATURE_DEBUG_BUILD\", \"supported\");\n    probe_log_int(\"print_perf_warnings:newline_needed_after_MHD_check\", newline_needed);\n  }\n  else\n  {\n    /* Probe: MHD check executed but feature not supported. */\n    probe_log_str(\"print_perf_warnings:MHD_FEATURE_DEBUG_BUILD\", \"not_supported\");\n    probe_log_int(\"print_perf_warnings:newline_needed_after_MHD_check_not_supported\", newline_needed);\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  /* Final state probe before potential extra newline. */\n  probe_log_int(\"print_perf_warnings:newline_needed_final\", newline_needed);\n  if (newline_needed)\n  {\n    printf (\"\\n\");\n    probe_log_str(\"print_perf_warnings:printed_extra_newline\", \"yes\");\n  }\n  else\n  {\n    probe_log_str(\"print_perf_warnings:printed_extra_newline\", \"no\");\n  }\n  /* Exit probe */\n  probe_log_str(\"print_perf_warnings:exit\", \"exiting\");\n}\n"
}