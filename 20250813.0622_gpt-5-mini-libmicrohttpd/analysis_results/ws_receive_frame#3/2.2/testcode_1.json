{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn ws_receive_frame the 'else if' (CON_CLOSE) and the final 'else' branches assign to *type but do not set or return a non-NULL msg (msg remains NULL). The caller run_usock immediately checks if (NULL == msg) and breaks out without ever using *type when msg is NULL. Because ws_receive_frame is static and, in the provided code base, only run_usock calls it, the assignments to *type in those branches are executed but have no effect on program behaviour \u2014 removing them would not change behaviour. Therefore these assignments constitute dead code and violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ws_receive_frame code that contains useful probe functions that print useful logs to a file \"/tmp/logs/26.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\nPlease provide the modified ws_receive_frame code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <sys/types.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/26.txt\n   Keep this function simple to avoid changing program logic. */\nstatic void ws_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n    if (NULL == f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  ws_log(\"ENTER ws_receive_frame: frame0=0x%02X, length=%zd\", (unsigned int)frame[0], *length);\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    ws_log(\"branch: TEXT_FRAME, set *type=%d\", *type);\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    ws_log(\"mask byte=0x%02X, flength=%u\", (unsigned int)mask, (unsigned int)flength);\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n      ws_log(\"flength==126 -> idx_first_mask=%u\", (unsigned int)idx_first_mask);\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n      ws_log(\"flength==127 -> idx_first_mask=%u\", (unsigned int)idx_first_mask);\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    ws_log(\"idx_first_mask=%u, idx_first_data=%u, data_length=%zu\", (unsigned int)idx_first_mask, (unsigned int)idx_first_data, data_length);\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    ws_log(\"masks = 0x%02X 0x%02X 0x%02X 0x%02X\",\n           (unsigned int)masks[0], (unsigned int)masks[1], (unsigned int)masks[2], (unsigned int)masks[3]);\n    msg = malloc (data_length + 1);\n    ws_log(\"malloc for msg requested size=%zu -> ptr=%p\", data_length + 1, (void *)msg);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n      /* Log a short hex dump (up to first 32 bytes) of the decrypted message */\n      {\n        size_t dump_len = data_length < 32u ? data_length : 32u;\n        ws_log(\"decrypted msg (first %zu bytes):\", dump_len);\n        {\n          size_t k;\n          /* write bytes in groups to the log to avoid huge single-format calls */\n          for (k = 0; k < dump_len; k++)\n          {\n            /* log each byte in hex separated by space */\n            FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n            if (f != NULL)\n            {\n              fprintf(f, \"%02X \", (unsigned char)msg[k]);\n              fclose(f);\n            }\n          }\n          /* ensure newline after the hex dump */\n          ws_log(\"\");\n        }\n      }\n      ws_log(\"TEXT_FRAME handled: msg=%p, new length=%zd\", (void *)msg, *length);\n    }\n    else\n    {\n      ws_log(\"malloc failed: msg remains NULL\");\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n    /* Probe: record that *type is assigned but msg remains NULL in this branch. */\n    ws_log(\"branch: CON_CLOSE_FRAME, assigned *type=%d, msg=%p (remains NULL)\", *type, (void *)msg);\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n    /* Probe: record that an opcode-derived *type is assigned but msg remains NULL. */\n    ws_log(\"branch: OTHER opcode, assigned *type=%d (frame[0]=0x%02X), msg=%p (remains NULL)\", *type, (unsigned int)frame[0], (void *)msg);\n  }\n  ws_log(\"EXIT ws_receive_frame: returning msg=%p, *type=%d, length=%zd\", (void *)msg, *type, *length);\n  return msg;\n}\n"
}