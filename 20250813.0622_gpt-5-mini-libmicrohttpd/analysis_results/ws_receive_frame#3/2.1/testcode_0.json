{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nws_receive_frame() sets msg only for text frames; for close or other opcodes it returns NULL. The caller immediately does `if (NULL == msg) { break; }`, so the subsequent else-branch that checks `if (type == WS_OPCODE_CON_CLOSE_FRAME) { free(msg); break; }` can never be reached (msg is always NULL for non-text frames). Thus the `free(msg); break;` path is unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ws_receive_frame code that contains useful probe functions that print useful logs to a file \"/tmp/logs/25.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\nPlease provide the modified ws_receive_frame code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <sys/types.h>\n\nstatic void log_ws(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/25.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  /* Log entry and basic pointers/state */\n  log_ws(\"ENTER ws_receive_frame: frame=%p length_ptr=%p length_val=%zd type_ptr=%p\", (void *)frame, (void *)length, (length ? *length : (ssize_t)0), (void *)type);\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    log_ws(\"Branch: TEXT frame (frame[0]=0x%02X)\", frame[0]);\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    log_ws(\"mask byte=0x%02X flength=%u\", mask, (unsigned)flength);\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n      log_ws(\"Extended length: flength==126 -> idx_first_mask=%u\", (unsigned)idx_first_mask);\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n      log_ws(\"Extended length: flength==127 -> idx_first_mask=%u\", (unsigned)idx_first_mask);\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    log_ws(\"idx_first_mask=%u idx_first_data=%u data_length=%zu\", (unsigned)idx_first_mask, (unsigned)idx_first_data, data_length);\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    log_ws(\"masks: 0=0x%02X 1=0x%02X 2=0x%02X 3=0x%02X\", masks[0], masks[1], masks[2], masks[3]);\n    msg = malloc (data_length + 1);\n    log_ws(\"malloc requested size=%zu -> msg=%p\", data_length + 1, (void *)msg);\n    if (NULL != msg)\n    {\n      log_ws(\"Decoding payload: loop from i=%u to length=%zd\", (unsigned)idx_first_data, *length);\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n        if (j < 8)\n        {\n          /* Log only first few decoded bytes to limit log size */\n          log_ws(\"decoded[%d]=0x%02X (i=%d)\", j, msg[j], i);\n        }\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n      log_ws(\"Decoding complete: decoded_length=%zd msg=%p\", *length, (void *)msg);\n    }\n    else\n    {\n      log_ws(\"malloc returned NULL for data_length=%zu\", data_length);\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n    log_ws(\"Branch: CON_CLOSE_FRAME (frame[0]=0x%02X) set type=%d returning msg=%p\", frame[0], *type, (void *)msg);\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n    log_ws(\"Branch: OTHER frame (frame[0]=0x%02X) opcode=%d returning msg=%p\", frame[0], *type, (void *)msg);\n  }\n\n  log_ws(\"EXIT ws_receive_frame: returning msg=%p type=%d length=%zd\", (void *)msg, (type ? *type : -1), (length ? *length : (ssize_t)0));\n  return msg;\n}"
}