{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of parse_dauth_params:\n```c\nstatic bool\nparse_dauth_params (const char *str,\n                    const size_t str_len,\n                    struct MHD_RqDAuth *pdauth)\n{\n  /* The tokens */\n  static const struct _MHD_cstr_w_len nonce_tk = _MHD_S_STR_W_LEN (\"nonce\");\n  static const struct _MHD_cstr_w_len opaque_tk = _MHD_S_STR_W_LEN (\"opaque\");\n  static const struct _MHD_cstr_w_len algorithm_tk =\n    _MHD_S_STR_W_LEN (\"algorithm\");\n  static const struct _MHD_cstr_w_len response_tk =\n    _MHD_S_STR_W_LEN (\"response\");\n  static const struct _MHD_cstr_w_len username_tk =\n    _MHD_S_STR_W_LEN (\"username\");\n  static const struct _MHD_cstr_w_len username_ext_tk =\n    _MHD_S_STR_W_LEN (\"username*\");\n  static const struct _MHD_cstr_w_len realm_tk = _MHD_S_STR_W_LEN (\"realm\");\n  static const struct _MHD_cstr_w_len uri_tk = _MHD_S_STR_W_LEN (\"uri\");\n  static const struct _MHD_cstr_w_len qop_tk = _MHD_S_STR_W_LEN (\"qop\");\n  static const struct _MHD_cstr_w_len cnonce_tk = _MHD_S_STR_W_LEN (\"cnonce\");\n  static const struct _MHD_cstr_w_len nc_tk = _MHD_S_STR_W_LEN (\"nc\");\n  static const struct _MHD_cstr_w_len userhash_tk =\n    _MHD_S_STR_W_LEN (\"userhash\");\n  /* The locally processed parameters */\n  struct MHD_RqDAuthParam userhash;\n  struct MHD_RqDAuthParam algorithm;\n  /* Indexes */\n  size_t i;\n  size_t p;\n  /* The list of the tokens.\n     The order of the elements matches the next array. */\n  static const struct _MHD_cstr_w_len *const tk_names[] = {\n    &nonce_tk,          /* 0 */\n    &opaque_tk,         /* 1 */\n    &algorithm_tk,      /* 2 */\n    &response_tk,       /* 3 */\n    &username_tk,       /* 4 */\n    &username_ext_tk,   /* 5 */\n    &realm_tk,          /* 6 */\n    &uri_tk,            /* 7 */\n    &qop_tk,            /* 8 */\n    &cnonce_tk,         /* 9 */\n    &nc_tk,             /* 10 */\n    &userhash_tk        /* 11 */\n  };\n  /* The list of the parameters.\n     The order of the elements matches the previous array. */\n  struct MHD_RqDAuthParam *params[sizeof(tk_names) / sizeof(tk_names[0])];\n\n  params[0 ] = &(pdauth->nonce);           /* 0 */\n  params[1 ] = &(pdauth->opaque);          /* 1 */\n  params[2 ] = &algorithm;                 /* 2 */\n  params[3 ] = &(pdauth->response);        /* 3 */\n  params[4 ] = &(pdauth->username);        /* 4 */\n  params[5 ] = &(pdauth->username_ext);    /* 5 */\n  params[6 ] = &(pdauth->realm);           /* 6 */\n  params[7 ] = &(pdauth->uri);             /* 7 */\n  params[8 ] = &(pdauth->qop_raw);         /* 8 */\n  params[9 ] = &(pdauth->cnonce);          /* 9 */\n  params[10] = &(pdauth->nc);              /* 10 */\n  params[11] = &userhash;                  /* 11 */\n\n  mhd_assert ((sizeof(tk_names) / sizeof(tk_names[0])) == \\\n              (sizeof(params) / sizeof(params[0])));\n  memset (&userhash, 0, sizeof(userhash));\n  memset (&algorithm, 0, sizeof(algorithm));\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  while (str_len > i)\n  {\n    size_t left;\n    mhd_assert (' ' != str[i]);\n    mhd_assert ('\\t' != str[i]);\n\n    left = str_len - i;\n    if ('=' == str[i])\n      return false; /* The equal sign is not allowed as the first character */\n    for (p = 0; p < (sizeof(tk_names) / sizeof(tk_names[0])); ++p)\n    {\n      const struct _MHD_cstr_w_len *const tk_name = tk_names[p];\n      struct MHD_RqDAuthParam *const param = params[p];\n      if ( (tk_name->len <= left) &&\n           MHD_str_equal_caseless_bin_n_ (str + i, tk_name->str,\n                                          tk_name->len) &&\n           ((tk_name->len == left) ||\n            ('=' == str[i + tk_name->len]) ||\n            (' ' == str[i + tk_name->len]) ||\n            ('\\t' == str[i + tk_name->len]) ||\n            (',' == str[i + tk_name->len]) ||\n            (';' == str[i + tk_name->len])) )\n      {\n        size_t value_start;\n        size_t value_len;\n        bool quoted; /* Only mark as \"quoted\" if backslash-escape used */\n\n        if (tk_name->len == left)\n          return false; /* No equal sign after parameter name, broken data */\n\n        quoted = false;\n        i += tk_name->len;\n        /* Skip all whitespaces before '=' */\n        while (str_len > i && (' ' == str[i] || '\\t' == str[i]))\n          i++;\n        if ((i == str_len) || ('=' != str[i]))\n          return false; /* No equal sign, broken data */\n        i++;\n        /* Skip all whitespaces after '=' */\n        while (str_len > i && (' ' == str[i] || '\\t' == str[i]))\n          i++;\n        if ((str_len > i) && ('\"' == str[i]))\n        { /* Value is in quotation marks */\n          i++; /* Advance after the opening quote */\n          value_start = i;\n          while (str_len > i && '\"' != str[i])\n          {\n            if ('\\\\' == str[i])\n            {\n              i++;\n              quoted = true; /* Have escaped chars */\n            }\n            if (0 == str[i])\n              return false; /* Binary zero in parameter value */\n            i++;\n          }\n          if (str_len <= i)\n            return false; /* No closing quote */\n          mhd_assert ('\"' == str[i]);\n          value_len = i - value_start;\n          i++; /* Advance after the closing quote */\n        }\n        else\n        {\n          value_start = i;\n          while (str_len > i && ',' != str[i] &&\n                 ' ' != str[i] && '\\t' != str[i] && ';' != str[i])\n          {\n            if (0 == str[i])\n              return false;  /* Binary zero in parameter value */\n            i++;\n          }\n          if (';' == str[i])\n            return false;  /* Semicolon in parameter value */\n          value_len = i - value_start;\n        }\n        /* Skip all whitespaces after parameter value */\n        while (str_len > i && (' ' == str[i] || '\\t' == str[i]))\n          i++;\n        if ((str_len > i) && (',' != str[i]))\n          return false; /* Garbage after parameter value */\n\n        /* Have valid parameter name and value */\n        mhd_assert (! quoted || 0 != value_len);\n        param->value.str = str + value_start;\n        param->value.len = value_len;\n        param->quoted = quoted;\n\n        break; /* Found matching parameter name */\n      }\n    }\n    if (p == (sizeof(tk_names) / sizeof(tk_names[0])))\n    {\n      /* No matching parameter name */\n      while (str_len > i && ',' != str[i])\n      {\n        if ((0 == str[i]) || (';' == str[i]))\n          return false; /* Not allowed characters */\n        if ('\"' == str[i])\n        { /* Skip quoted part */\n          i++; /* Advance after the opening quote */\n          while (str_len > i && '\"' != str[i])\n          {\n            if (0 == str[i])\n              return false;  /* Binary zero is not allowed */\n            if ('\\\\' == str[i])\n              i++;           /* Skip escaped char */\n            i++;\n          }\n          if (str_len <= i)\n            return false; /* No closing quote */\n          mhd_assert ('\"' == str[i]);\n        }\n        i++;\n      }\n    }\n    mhd_assert (str_len == i || ',' == str[i]);\n    if (str_len > i)\n      i++; /* Advance after ',' */\n    /* Skip all whitespaces before next parameter name */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n  }\n\n  /* Postprocess values */\n\n  if (NULL != userhash.value.str)\n  {\n    if (userhash.quoted)\n      pdauth->userhash =\n        MHD_str_equal_caseless_quoted_s_bin_n (userhash.value.str, \\\n                                               userhash.value.len, \\\n                                               \"true\");\n    else\n      pdauth->userhash =\n        MHD_str_equal_caseless_s_bin_n_ (\"true\", userhash.value.str, \\\n                                         userhash.value.len);\n\n  }\n  else\n    pdauth->userhash = false;\n\n  pdauth->algo3 = get_rq_dauth_algo (&algorithm);\n  pdauth->qop = get_rq_dauth_qop (&pdauth->qop_raw);\n\n  return true;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (' ' != str[i]);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The mhd_assert (' ' != str[i]); call is a diagnostic runtime check (an assertion). It is not dead code because it can alter program behaviour when enabled (e.g. abort/log on invariant failure); removing it would change behaviour in builds where the assertion is active. If, however, mhd_assert is defined as an empty no-op in all build configurations (i.e. it never generates code or has side-effects), then the statement would be effectively dead and could violate Rule 2.2. Ensure mhd_assert provides a runtime effect in at least some builds or is conditionally compiled with intent."
}