{
  "user_message": "An agent A claimed that the following get_no_space_err_status_code code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of get_no_space_err_status_code.\n```c\nstatic unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n  mhd_assert (MHD_PROC_RECV_HEADERS <= stage);\n  mhd_assert ((0 == add_element_size) || (NULL != add_element));\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    mhd_assert (NULL != c->rq.field_lines.start);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n  }\n  else\n    opt_headers_size = c->rq.field_lines.size;\n\n  /* The read buffer is fully used by the request line, the field lines\n     (headers) and internal information.\n     The return status code works as a suggestion for the client to reduce\n     one of the request elements. */\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    /* Request could be re-tried easily with smaller chunk sizes */\n    return MHD_HTTP_CONTENT_TOO_LARGE;\n  }\n\n  host_field_line_size = 0;\n  /* The \"Host:\" field line is mandatory.\n     The total size of the field lines (headers) cannot be smaller than\n     the size of the \"Host:\" field line. */\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    static const size_t header_host_key_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n      /* The actual size should be larger due to CRLF or LF chars,\n         however the exact termination sequence is not known here and\n         as perfect precision is not required, to simplify the code\n         assume the minimal length. */\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n      mhd_assert (opt_headers_size >= actual_element_size);\n      opt_headers_size -= actual_element_size;\n    }\n  }\n  if (0 == host_field_line_size)\n  {\n    static const size_t host_field_name_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    size_t host_field_name_value_len;\n    if (MHD_NO != MHD_lookup_connection_value_n (c,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_HOST,\n                                                 host_field_name_len,\n                                                 NULL,\n                                                 &host_field_name_value_len))\n    {\n      /* Calculate the minimal size of the field line: no space between\n         colon and the field value, line terminated by LR */\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"2\" for ':' and LF */\n\n      /* The \"Host:\" field could be added by application */\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        /* Take into account typical space after colon and CR at the end of the line */\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n      }\n      else\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    method_size = strlen (c->rq.method);\n  }\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Typically the easiest way to reduce request header size is\n       a removal of some optional headers. */\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is MUCH larger than headers */\n      if ((uri_size / 16) > method_size)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* If request target size if larger than maximum reasonable size\n       recommend client to reduce the request target size (length). */\n    if ((uri_size / 16) > method_size)\n      return MHD_HTTP_URI_TOO_LONG;     /* Request target is MUCH larger than headers */\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED;  /* The length of the HTTP request method is unreasonably large */\n  }\n\n  /* The read buffer is too small to handle reasonably large requests */\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Recommend application to retry with minimal headers */\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is significantly larger than headers */\n      if (uri_size > method_size * 4)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* Recommend application to retry with a shorter request target */\n    if (uri_size > method_size * 4)\n      return MHD_HTTP_URI_TOO_LONG;\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    /* The request target (URI) and headers are (reasonably) very small.\n       Some non-standard long request method is used. */\n    /* The last resort response as it means \"the method is not supported\n       by the server for any URI\". */\n    return MHD_HTTP_NOT_IMPLEMENTED;\n  }\n\n  /* The almost impossible situation: all elements are small, but cannot\n     fit the buffer. The application set the buffer size to\n     critically low value? */\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n      return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n    else\n      return MHD_HTTP_URI_TOO_LONG;\n  }\n\n  /* Nothing to reduce in the request.\n     Reply with some status. */\n  if (0 != host_field_line_size)\n    return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n\n  return MHD_HTTP_URI_TOO_LONG;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The parameter 'struct MHD_Connection *c' is not const-qualified even though get_no_space_err_status_code only reads fields from *c (no writes). To comply with MISRA C 2023 Rule 8.13 it should be declared as 'const struct MHD_Connection *c' unless an API called from the function (e.g. MHD_lookup_connection_value_n) requires a non-const pointer, in which case the non-const parameter is necessary.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\nstatic unsigned int\nmhd_log_return (unsigned int rv,\n                const char *reason,\n                struct MHD_Connection *c,\n                enum MHD_ProcRecvDataStage stage,\n                const char *add_element,\n                size_t add_element_size,\n                size_t opt_headers_size,\n                size_t uri_size,\n                size_t method_size,\n                size_t host_field_line_size)\n{\n  /* Log pointer and key sizes/state. Avoid dereferencing c if NULL. */\n  if (c != NULL)\n  {\n    mhd_probe_log (\n      \"RETURN %u (%s) -- c=%p state=%d stage=%d add_element=%p add_element_size=%zu opt_headers_size=%zu uri_size=%zu method_size=%zu host_field_line_size=%zu\",\n      rv,\n      reason,\n      (void *) c,\n      (int) c->state,\n      (int) stage,\n      (void *) add_element,\n      add_element_size,\n      opt_headers_size,\n      uri_size,\n      method_size,\n      host_field_line_size);\n  }\n  else\n  {\n    mhd_probe_log (\n      \"RETURN %u (%s) -- c=NULL stage=%d add_element=%p add_element_size=%zu opt_headers_size=%zu uri_size=%zu method_size=%zu host_field_line_size=%zu\",\n      rv,\n      reason,\n      (int) stage,\n      (void *) add_element,\n      add_element_size,\n      opt_headers_size,\n      uri_size,\n      method_size,\n      host_field_line_size);\n  }\n  return rv;\n}\n\nstatic unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n\n  /* Log entry with initial important values. */\n  mhd_probe_log (\"ENTER get_no_space_err_status_code: c=%p stage=%d add_element=%p add_element_size=%zu\",\n                 (void *) c, (int) stage, (void *) add_element, add_element_size);\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n  mhd_assert (MHD_PROC_RECV_HEADERS <= stage);\n  mhd_assert ((0 == add_element_size) || (NULL != add_element));\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    mhd_assert (NULL != c->rq.field_lines.start);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n  }\n  else\n    opt_headers_size = c->rq.field_lines.size;\n\n  mhd_probe_log (\"Computed opt_headers_size=%zu (read_buffer=%p read_buffer_offset=%zu rq.field_lines.start=%p rq.field_lines.size=%zu)\",\n                 opt_headers_size,\n                 (void *) c->read_buffer,\n                 (size_t) c->read_buffer_offset,\n                 (void *) c->rq.field_lines.start,\n                 (size_t) c->rq.field_lines.size);\n\n  /* The read buffer is fully used by the request line, the field lines\n     (headers) and internal information.\n     The return status code works as a suggestion for the client to reduce\n     one of the request elements. */\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    /* Request could be re-tried easily with smaller chunk sizes */\n    return mhd_log_return (MHD_HTTP_CONTENT_TOO_LARGE,\n                           \"chunked add_element too large\",\n                           c, stage, add_element, add_element_size,\n                           opt_headers_size, 0u, 0u, 0u);\n  }\n\n  host_field_line_size = 0;\n  /* The \"Host:\" field line is mandatory.\n     The total size of the field lines (headers) cannot be smaller than\n     the size of the \"Host:\" field line. */\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    static const size_t header_host_key_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n      /* The actual size should be larger due to CRLF or LF chars,\n         however the exact termination sequence is not known here and\n         as perfect precision is not required, to simplify the code\n         assume the minimal length. */\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n      mhd_assert (opt_headers_size >= actual_element_size);\n      opt_headers_size -= actual_element_size;\n\n      mhd_probe_log (\"Detected host header in add_element: is_parsed=%d actual_element_size=%zu host_field_line_size=%zu opt_headers_size(after subtraction)=%zu\",\n                     (int) is_parsed, actual_element_size, host_field_line_size, opt_headers_size);\n    }\n  }\n  if (0 == host_field_line_size)\n  {\n    static const size_t host_field_name_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    size_t host_field_name_value_len;\n    int lookup_res = MHD_lookup_connection_value_n (c,\n                                                    MHD_HEADER_KIND,\n                                                    MHD_HTTP_HEADER_HOST,\n                                                    host_field_name_len,\n                                                    NULL,\n                                                    &host_field_name_value_len);\n\n    mhd_probe_log (\"MHD_lookup_connection_value_n returned %d host_field_name_value_len=%zu\",\n                   lookup_res, host_field_name_value_len);\n\n    if (MHD_NO != lookup_res)\n    {\n      /* Calculate the minimal size of the field line: no space between\n         colon and the field value, line terminated by LR */\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"2\" for ':' and LF */\n\n      /* The \"Host:\" field could be added by application */\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        /* Take into account typical space after colon and CR at the end of the line */\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n      }\n      else\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n\n      mhd_probe_log (\"After checking connection value: host_field_line_size=%zu opt_headers_size=%zu\",\n                     host_field_line_size, opt_headers_size);\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    method_size = strlen (c->rq.method);\n  }\n\n  mhd_probe_log (\"After method/uri computation: uri_size=%zu method_size=%zu\",\n                 uri_size, method_size);\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Typically the easiest way to reduce request header size is\n       a removal of some optional headers. */\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n        return mhd_log_return (MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                               \"opt_headers very large (>/8) and /2 > method\",\n                               c, stage, add_element, add_element_size,\n                               opt_headers_size, uri_size, method_size, host_field_line_size);\n      else\n        return mhd_log_return (MHD_HTTP_NOT_IMPLEMENTED,\n                               \"opt_headers very large (>/8) but method too large\",\n                               c, stage, add_element, add_element_size,\n                               opt_headers_size, uri_size, method_size, host_field_line_size); /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is MUCH larger than headers */\n      if ((uri_size / 16) > method_size)\n        return mhd_log_return (MHD_HTTP_URI_TOO_LONG,\n                               \"uri >> headers (uri/16 > method)\",\n                               c, stage, add_element, add_element_size,\n                               opt_headers_size, uri_size, method_size, host_field_line_size);\n      else\n        return mhd_log_return (MHD_HTTP_NOT_IMPLEMENTED,\n                               \"uri >> headers but method too large\",\n                               c, stage, add_element, add_element_size,\n                               opt_headers_size, uri_size, method_size, host_field_line_size); /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* If request target size if larger than maximum reasonable size\n       recommend client to reduce the request target size (length). */\n    if ((uri_size / 16) > method_size)\n      return mhd_log_return (MHD_HTTP_URI_TOO_LONG,\n                             \"uri_size > MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ and uri/16 > method\",\n                             c, stage, add_element, add_element_size,\n                             opt_headers_size, uri_size, method_size, host_field_line_size);     /* Request target is MUCH larger than headers */\n    else\n      return mhd_log_return (MHD_HTTP_NOT_IMPLEMENTED,\n                             \"uri_size > MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ but method too large\",\n                             c, stage, add_element, add_element_size,\n                             opt_headers_size, uri_size, method_size, host_field_line_size);  /* The length of the HTTP request method is unreasonably large */\n  }\n\n  /* The read buffer is too small to handle reasonably large requests */\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Recommend application to retry with minimal headers */\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n        return mhd_log_return (MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                               \"opt_headers *4 > uri and opt_headers > method\",\n                               c, stage, add_element, add_element_size,\n                               opt_headers_size, uri_size, method_size, host_field_line_size);\n      else\n        return mhd_log_return (MHD_HTTP_NOT_IMPLEMENTED,\n                               \"opt_headers *4 > uri but method too large\",\n                               c, stage, add_element, add_element_size,\n                               opt_headers_size, uri_size, method_size, host_field_line_size); /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is significantly larger than headers */\n      if (uri_size > method_size * 4)\n        return mhd_log_return (MHD_HTTP_URI_TOO_LONG,\n                               \"uri > method*4 (significantly larger)\",\n                               c, stage, add_element, add_element_size,\n                               opt_headers_size, uri_size, method_size, host_field_line_size);\n      else\n        return mhd_log_return (MHD_HTTP_NOT_IMPLEMENTED,\n                               \"uri > method*4 but method too large\",\n                               c, stage, add_element, add_element_size,\n                               opt_headers_size, uri_size, method_size, host_field_line_size); /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* Recommend application to retry with a shorter request target */\n    if (uri_size > method_size * 4)\n      return mhd_log_return (MHD_HTTP_URI_TOO_LONG,\n                             \"uri > method*4 (recommend shorter target)\",\n                             c, stage, add_element, add_element_size,\n                             opt_headers_size, uri_size, method_size, host_field_line_size);\n    else\n      return mhd_log_return (MHD_HTTP_NOT_IMPLEMENTED,\n                             \"uri > MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ but method too large\",\n                             c, stage, add_element, add_element_size,\n                             opt_headers_size, uri_size, method_size, host_field_line_size); /* The length of the HTTP request method is unreasonably large */\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    /* The request target (URI) and headers are (reasonably) very small.\n       Some non-standard long request method is used. */\n    /* The last resort response as it means \"the method is not supported\n       by the server for any URI\". */\n    return mhd_log_return (MHD_HTTP_NOT_IMPLEMENTED,\n                           \"method_size > MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ (non-standard long method)\",\n                           c, stage, add_element, add_element_size,\n                           opt_headers_size, uri_size, method_size, host_field_line_size);\n  }\n\n  /* The almost impossible situation: all elements are small, but cannot\n     fit the buffer. The application set the buffer size to\n     critically low value? */\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n      return mhd_log_return (MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                             \"almost impossible: opt_headers_size >= uri_size\",\n                             c, stage, add_element, add_element_size,\n                             opt_headers_size, uri_size, method_size, host_field_line_size);\n    else\n      return mhd_log_return (MHD_HTTP_URI_TOO_LONG,\n                             \"almost impossible: uri_size > opt_headers_size\",\n                             c, stage, add_element, add_element_size,\n                             opt_headers_size, uri_size, method_size, host_field_line_size);\n  }\n\n  /* Nothing to reduce in the request.\n     Reply with some status. */\n  if (0 != host_field_line_size)\n    return mhd_log_return (MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                           \"nothing to reduce but host_field_line present\",\n                           c, stage, add_element, add_element_size,\n                           opt_headers_size, uri_size, method_size, host_field_line_size);\n\n  return mhd_log_return (MHD_HTTP_URI_TOO_LONG,\n                         \"final fallback: URI too long\",\n                         c, stage, add_element, add_element_size,\n                         opt_headers_size, uri_size, method_size, host_field_line_size);\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_no_space_err_status_code. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s reasoning is plausible but not proven. get_no_space_err_status_code does not write through c and so, in isolation, c could be const-qualified. However the function passes c to other APIs (notably MHD_lookup_connection_value_n) whose signatures are not shown; if any of those require a non-const pointer, the parameter cannot be changed to const without breaking the call (or casting away const, which would itself be non-compliant). Because we cannot confirm the signatures of the called functions from the supplied code, we cannot conclude a definite MISRA 8.13 violation. Action: inspect the prototypes of the called functions (e.g. MHD_lookup_connection_value_n and any macros used) \u2014 if they accept a const struct MHD_Connection * then change the parameter to const; otherwise the non-const parameter is justified. Therefore the report is not definitively correct."
}