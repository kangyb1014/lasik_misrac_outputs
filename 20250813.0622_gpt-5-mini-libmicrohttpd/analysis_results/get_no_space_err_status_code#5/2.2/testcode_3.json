{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert macro is defined as mhd_assert(ignore) ((void)0). The statement mhd_assert(MHD_CONNECTION_REQ_LINE_RECEIVED < c->state); therefore expands to a no-op ((void)0). That operation is executed but has no effect; removing it would not change program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_no_space_err_status_code code that contains useful probe functions that print useful logs to a file \"/tmp/logs/42.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_no_space_err_status_code as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_no_space_err_status_code:\n```c\nstatic unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n  mhd_assert (MHD_PROC_RECV_HEADERS <= stage);\n  mhd_assert ((0 == add_element_size) || (NULL != add_element));\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    mhd_assert (NULL != c->rq.field_lines.start);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n  }\n  else\n    opt_headers_size = c->rq.field_lines.size;\n\n  /* The read buffer is fully used by the request line, the field lines\n     (headers) and internal information.\n     The return status code works as a suggestion for the client to reduce\n     one of the request elements. */\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    /* Request could be re-tried easily with smaller chunk sizes */\n    return MHD_HTTP_CONTENT_TOO_LARGE;\n  }\n\n  host_field_line_size = 0;\n  /* The \"Host:\" field line is mandatory.\n     The total size of the field lines (headers) cannot be smaller than\n     the size of the \"Host:\" field line. */\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    static const size_t header_host_key_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n      /* The actual size should be larger due to CRLF or LF chars,\n         however the exact termination sequence is not known here and\n         as perfect precision is not required, to simplify the code\n         assume the minimal length. */\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n      mhd_assert (opt_headers_size >= actual_element_size);\n      opt_headers_size -= actual_element_size;\n    }\n  }\n  if (0 == host_field_line_size)\n  {\n    static const size_t host_field_name_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    size_t host_field_name_value_len;\n    if (MHD_NO != MHD_lookup_connection_value_n (c,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_HOST,\n                                                 host_field_name_len,\n                                                 NULL,\n                                                 &host_field_name_value_len))\n    {\n      /* Calculate the minimal size of the field line: no space between\n         colon and the field value, line terminated by LR */\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"2\" for ':' and LF */\n\n      /* The \"Host:\" field could be added by application */\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        /* Take into account typical space after colon and CR at the end of the line */\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n      }\n      else\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    method_size = strlen (c->rq.method);\n  }\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Typically the easiest way to reduce request header size is\n       a removal of some optional headers. */\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is MUCH larger than headers */\n      if ((uri_size / 16) > method_size)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* If request target size if larger than maximum reasonable size\n       recommend client to reduce the request target size (length). */\n    if ((uri_size / 16) > method_size)\n      return MHD_HTTP_URI_TOO_LONG;     /* Request target is MUCH larger than headers */\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED;  /* The length of the HTTP request method is unreasonably large */\n  }\n\n  /* The read buffer is too small to handle reasonably large requests */\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Recommend application to retry with minimal headers */\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is significantly larger than headers */\n      if (uri_size > method_size * 4)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* Recommend application to retry with a shorter request target */\n    if (uri_size > method_size * 4)\n      return MHD_HTTP_URI_TOO_LONG;\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    /* The request target (URI) and headers are (reasonably) very small.\n       Some non-standard long request method is used. */\n    /* The last resort response as it means \"the method is not supported\n       by the server for any URI\". */\n    return MHD_HTTP_NOT_IMPLEMENTED;\n  }\n\n  /* The almost impossible situation: all elements are small, but cannot\n     fit the buffer. The application set the buffer size to\n     critically low value? */\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n      return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n    else\n      return MHD_HTTP_URI_TOO_LONG;\n  }\n\n  /* Nothing to reduce in the request.\n     Reply with some status. */\n  if (0 != host_field_line_size)\n    return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n\n  return MHD_HTTP_URI_TOO_LONG;\n}\n```\n</target_code>\nPlease provide the modified get_no_space_err_status_code code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe logging helper. Appends lines to /tmp/logs/42.txt. */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n\n  /* Log entry and initial arguments (avoid dereferencing c before asserts) */\n  mhd_probe_log (\"enter get_no_space_err_status_code: c=%p stage=%d add_element_size=%zu add_element=%p\",\n                 (void *) c, (int) stage, add_element_size, (void *) add_element);\n\n  mhd_probe_log (\"about to first assert: MHD_CONNECTION_REQ_LINE_RECEIVED < c->state\");\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n  /* Log state after the assertion (this will show that the assert did not alter control flow) */\n  mhd_probe_log (\"after first assert: c->state=%d\", (int) c->state);\n\n  mhd_probe_log (\"about to second assert: MHD_PROC_RECV_HEADERS <= stage\");\n  mhd_assert (MHD_PROC_RECV_HEADERS <= stage);\n  mhd_probe_log (\"after second assert: stage=%d\", (int) stage);\n\n  mhd_probe_log (\"about to third assert: (0 == add_element_size) || (NULL != add_element)\");\n  mhd_assert ((0 == add_element_size) || (NULL != add_element));\n  mhd_probe_log (\"after third assert: add_element_size=%zu add_element=%p\", add_element_size, (void *) add_element);\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    mhd_probe_log (\"branch: MHD_CONNECTION_HEADERS_RECEIVED > c->state (headers not yet received). c->state=%d\", (int) c->state);\n    mhd_assert (NULL != c->rq.field_lines.start);\n    mhd_probe_log (\"after field_lines.start assert: start=%p read_buffer=%p read_buffer_offset=%zu\",\n                   (void *) c->rq.field_lines.start, (void *) c->read_buffer, c->read_buffer_offset);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n    mhd_probe_log (\"computed opt_headers_size(from buffer) = %zu\", opt_headers_size);\n  }\n  else\n  {\n    opt_headers_size = c->rq.field_lines.size;\n    mhd_probe_log (\"branch: headers already received. opt_headers_size(from rq.field_lines.size) = %zu\", opt_headers_size);\n  }\n\n  /* The read buffer is fully used by the request line, the field lines\n     (headers) and internal information.\n     The return status code works as a suggestion for the client to reduce\n     one of the request elements. */\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    /* Request could be re-tried easily with smaller chunk sizes */\n    mhd_probe_log (\"early return: chunked stage and add_element_size=%zu > MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ -> %d\",\n                   add_element_size, (int) MHD_HTTP_CONTENT_TOO_LARGE);\n    return MHD_HTTP_CONTENT_TOO_LARGE;\n  }\n\n  host_field_line_size = 0;\n  /* The \"Host:\" field line is mandatory.\n     The total size of the field lines (headers) cannot be smaller than\n     the size of the \"Host:\" field line. */\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    static const size_t header_host_key_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    mhd_probe_log (\"processing potential host header: is_host_header=%d header_host_key_len=%zu\",\n                   (int) is_host_header, header_host_key_len);\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      mhd_probe_log (\"is_parsed=%d add_element_size=%zu read_buffer_offset=%zu read_buffer=%p add_element=%p\",\n                     (int) is_parsed, add_element_size, c->read_buffer_offset, (void *) c->read_buffer, (void *) add_element);\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n      /* The actual size should be larger due to CRLF or LF chars,\n         however the exact termination sequence is not known here and\n         as perfect precision is not required, to simplify the code\n         assume the minimal length. */\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n      mhd_probe_log (\"host_field_line detected: actual_element_size=%zu host_field_line_size=%zu opt_headers_size(before)=%zu\",\n                     actual_element_size, host_field_line_size, opt_headers_size);\n      mhd_assert (opt_headers_size >= actual_element_size);\n      opt_headers_size -= actual_element_size;\n      mhd_probe_log (\"opt_headers_size(after removing host)=%zu\", opt_headers_size);\n    }\n  }\n  if (0 == host_field_line_size)\n  {\n    static const size_t host_field_name_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    size_t host_field_name_value_len;\n    if (MHD_NO != MHD_lookup_connection_value_n (c,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_HOST,\n                                                 host_field_name_len,\n                                                 NULL,\n                                                 &host_field_name_value_len))\n    {\n      /* Calculate the minimal size of the field line: no space between\n         colon and the field value, line terminated by LR */\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"2\" for ':' and LF */\n\n      mhd_probe_log (\"host field found via lookup: host_field_name_value_len=%zu host_field_line_size=%zu opt_headers_size(before)=%zu\",\n                     host_field_name_value_len, host_field_line_size, opt_headers_size);\n\n      /* The \"Host:\" field could be added by application */\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        /* Take into account typical space after colon and CR at the end of the line */\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n        mhd_probe_log (\"opt_headers_size(after accounting typical space)=%zu\", opt_headers_size);\n      }\n      else\n      {\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n        mhd_probe_log (\"opt_headers_size(%zu) < host_field_line_size -> host_field_line_size reset to 0\", opt_headers_size);\n      }\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    method_size = strlen (c->rq.method);\n  }\n\n  mhd_probe_log (\"sizes: uri_size=%zu method_size=%zu opt_headers_size=%zu host_field_line_size=%zu\",\n                 uri_size, method_size, opt_headers_size, host_field_line_size);\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Typically the easiest way to reduce request header size is\n       a removal of some optional headers. */\n    mhd_probe_log (\"branch: opt_headers_size > MHD_MAX_REASONABLE_HEADERS_SIZE_ (%zu)\", opt_headers_size);\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n      {\n        mhd_probe_log (\"return %d (REQUEST_HEADER_FIELDS_TOO_LARGE) opt_headers_size=%zu method_size=%zu\", (int) MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE, opt_headers_size, method_size);\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      }\n      else\n      {\n        mhd_probe_log (\"return %d (NOT_IMPLEMENTED) : method too large relative to headers opt_headers_size=%zu method_size=%zu\", (int) MHD_HTTP_NOT_IMPLEMENTED, opt_headers_size, method_size);\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n      }\n    }\n    else\n    { /* Request target is MUCH larger than headers */\n      if ((uri_size / 16) > method_size)\n      {\n        mhd_probe_log (\"return %d (URI_TOO_LONG) uri_size=%zu method_size=%zu\", (int) MHD_HTTP_URI_TOO_LONG, uri_size, method_size);\n        return MHD_HTTP_URI_TOO_LONG;\n      }\n      else\n      {\n        mhd_probe_log (\"return %d (NOT_IMPLEMENTED) method too large relative to uri uri_size=%zu method_size=%zu\", (int) MHD_HTTP_NOT_IMPLEMENTED, uri_size, method_size);\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n      }\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* If request target size if larger than maximum reasonable size\n       recommend client to reduce the request target size (length). */\n    mhd_probe_log (\"branch: uri_size > MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ (%zu)\", uri_size);\n    if ((uri_size / 16) > method_size)\n    {\n      mhd_probe_log (\"return %d (URI_TOO_LONG) uri_size=%zu method_size=%zu\", (int) MHD_HTTP_URI_TOO_LONG, uri_size, method_size);\n      return MHD_HTTP_URI_TOO_LONG;     /* Request target is MUCH larger than headers */\n    }\n    else\n    {\n      mhd_probe_log (\"return %d (NOT_IMPLEMENTED) method too large relative to uri uri_size=%zu method_size=%zu\", (int) MHD_HTTP_NOT_IMPLEMENTED, uri_size, method_size);\n      return MHD_HTTP_NOT_IMPLEMENTED;  /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n\n  /* The read buffer is too small to handle reasonably large requests */\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Recommend application to retry with minimal headers */\n    mhd_probe_log (\"branch: opt_headers_size > MHD_MIN_REASONABLE_HEADERS_SIZE_ (%zu)\", opt_headers_size);\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n      {\n        mhd_probe_log (\"return %d (REQUEST_HEADER_FIELDS_TOO_LARGE) opt_headers_size=%zu method_size=%zu\", (int) MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE, opt_headers_size, method_size);\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      }\n      else\n      {\n        mhd_probe_log (\"return %d (NOT_IMPLEMENTED) method too large relative to headers opt_headers_size=%zu method_size=%zu\", (int) MHD_HTTP_NOT_IMPLEMENTED, opt_headers_size, method_size);\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n      }\n    }\n    else\n    { /* Request target is significantly larger than headers */\n      if (uri_size > method_size * 4)\n      {\n        mhd_probe_log (\"return %d (URI_TOO_LONG) uri_size=%zu method_size=%zu\", (int) MHD_HTTP_URI_TOO_LONG, uri_size, method_size);\n        return MHD_HTTP_URI_TOO_LONG;\n      }\n      else\n      {\n        mhd_probe_log (\"return %d (NOT_IMPLEMENTED) method too large relative to uri uri_size=%zu method_size=%zu\", (int) MHD_HTTP_NOT_IMPLEMENTED, uri_size, method_size);\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n      }\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* Recommend application to retry with a shorter request target */\n    mhd_probe_log (\"branch: uri_size > MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ (%zu)\", uri_size);\n    if (uri_size > method_size * 4)\n    {\n      mhd_probe_log (\"return %d (URI_TOO_LONG) uri_size=%zu method_size=%zu\", (int) MHD_HTTP_URI_TOO_LONG, uri_size, method_size);\n      return MHD_HTTP_URI_TOO_LONG;\n    }\n    else\n    {\n      mhd_probe_log (\"return %d (NOT_IMPLEMENTED) method too large relative to uri uri_size=%zu method_size=%zu\", (int) MHD_HTTP_NOT_IMPLEMENTED, uri_size, method_size);\n      return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    /* The request target (URI) and headers are (reasonably) very small.\n       Some non-standard long request method is used. */\n    /* The last resort response as it means \"the method is not supported\n       by the server for any URI\". */\n    mhd_probe_log (\"return %d (NOT_IMPLEMENTED) due to method_size > MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ method_size=%zu\",\n                   (int) MHD_HTTP_NOT_IMPLEMENTED, method_size);\n    return MHD_HTTP_NOT_IMPLEMENTED;\n  }\n\n  /* The almost impossible situation: all elements are small, but cannot\n     fit the buffer. The application set the buffer size to\n     critically low value? */\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n    {\n      mhd_probe_log (\"return %d (REQUEST_HEADER_FIELDS_TOO_LARGE) opt_headers_size=%zu uri_size=%zu\", (int) MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE, opt_headers_size, uri_size);\n      return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n    }\n    else\n    {\n      mhd_probe_log (\"return %d (URI_TOO_LONG) opt_headers_size=%zu uri_size=%zu\", (int) MHD_HTTP_URI_TOO_LONG, opt_headers_size, uri_size);\n      return MHD_HTTP_URI_TOO_LONG;\n    }\n  }\n\n  /* Nothing to reduce in the request.\n     Reply with some status. */\n  if (0 != host_field_line_size)\n  {\n    mhd_probe_log (\"return %d (REQUEST_HEADER_FIELDS_TOO_LARGE) host_field_line_size=%zu\", (int) MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE, host_field_line_size);\n    return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n  }\n\n  mhd_probe_log (\"final return %d (URI_TOO_LONG)\", (int) MHD_HTTP_URI_TOO_LONG);\n  return MHD_HTTP_URI_TOO_LONG;\n}\n"
}