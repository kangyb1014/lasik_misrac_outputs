{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen MHD_FAVOR_SMALL_CODE is not defined and MHD_MD5_update is called with length == 0, the conditional early-return (if (0 == length) return;) is executed but is redundant: removing it does not change program behaviour because the subsequent code correctly handles length == 0 (no memcpy or transform is performed and ctx->count is unchanged). Thus the operation is dead code in that build/configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/658.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_MD5_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  /* Log entry and whether we'll take the early-return path. This log\n     is intended to capture the violation scenario where the early\n     return is executed for length == 0. */\n  {\n    FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_MD5_update ENTRY: ctx=%p data=%p length=%zu count=%llu\\n\",\n              (void *) ctx,\n              (void *) data,\n              length,\n              (unsigned long long) ctx->count);\n      fprintf(f, \"early_return_condition: (0 == length) is %s\\n\",\n              (0 == length) ? \"true\" : \"false\");\n      fclose(f);\n    }\n  }\n\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n\n  /* Log state before updating count */\n  {\n    FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"before_count_update: ctx=%p count(before)=%llu bytes_have=%u length=%zu\\n\",\n              (void *) ctx,\n              (unsigned long long) ctx->count,\n              bytes_have,\n              length);\n      fclose(f);\n    }\n  }\n\n  ctx->count += length;\n\n  /* Log state after updating count */\n  {\n    FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"after_count_update: ctx=%p count(after)=%llu\\n\",\n              (void *) ctx,\n              (unsigned long long) ctx->count);\n      fclose(f);\n    }\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n\n    /* Log entering the partial-buffer branch and computed bytes_left */\n    {\n      FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"partial_buffer_branch: bytes_have=%u bytes_left=%u length=%zu\\n\",\n                bytes_have, bytes_left, length);\n        fclose(f);\n      }\n    }\n\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      /* Log the combine-and-transform action */\n      {\n        FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n        if (f)\n        {\n          fprintf(f, \"combine_and_transform: copying %u bytes into buffer at offset %u; data=%p\\n\",\n                  bytes_left, bytes_have, (void *) data);\n          fclose(f);\n        }\n      }\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n\n      /* Log result after transform */\n      {\n        FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n        if (f)\n        {\n          fprintf(f, \"after_transform: length=%zu bytes_have reset to 0\\n\", length);\n          fclose(f);\n        }\n      }\n\n      bytes_have = 0;\n    }\n    else\n    {\n      /* Log that not enough data to fill the buffer */\n      FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"not_enough_to_fill: need %u but have %zu; will copy later\\n\",\n                bytes_left, length);\n        fclose(f);\n      }\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    /* Log each full-block transform */\n    {\n      FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"process_full_block: data=%p performing md5_transform on next %d bytes\\n\",\n                (void *) data, MD5_BLOCK_SIZE);\n        fclose(f);\n      }\n    }\n\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    /* Log the final partial copy */\n    {\n      FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"final_partial_copy: copying %zu bytes to buffer offset %u from data=%p\\n\",\n                length, bytes_have, (void *) data);\n        fclose(f);\n      }\n    }\n\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  /* Log exit */\n  {\n    FILE *f = fopen(\"/tmp/logs/658.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_MD5_update EXIT: ctx=%p final_count=%llu\\n\",\n              (void *) ctx,\n              (unsigned long long) ctx->count);\n      fclose(f);\n    }\n  }\n}\n"
}