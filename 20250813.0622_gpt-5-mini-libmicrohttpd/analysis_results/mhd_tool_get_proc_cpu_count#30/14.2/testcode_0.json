{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for statement is not well-formed. Violations: (1) The second clause uses proc_aff (0 != proc_aff) instead of the loop counter and thus does not use the loop counter as required and it uses an object that is modified in the loop (proc_aff). (2) The third clause (proc_aff &= proc_aff - 1) modifies proc_aff rather than only the loop counter \u2014 it therefore violates the requirement that the third clause modify only the loop counter. (3) The loop counter (count_by_proc_aff_mask) is modified in the loop body via ++count_by_proc_aff_mask; Rule 14.2 forbids modifying the loop counter in the loop body. Because of these issues the for loop is not well-formed per MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_proc_cpu_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/244.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_proc_cpu_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_proc_cpu_count:\n```c\nint\nmhd_tool_get_proc_cpu_count (void)\n{\n  int res;\n\n#if defined(__linux__) || defined(__GLIBC__)\n  /* On Linux kernel try first 'sched_getaffinity()' as it should be\n     the native API.\n     Also try it first on other kernels if Glibc is used. */\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (0 < res)\n    return res;\n#else  /* ! __linux__ && ! __GLIBC__ */\n  /* On non-Linux kernels 'cpuset_getaffinity()' could be the native API,\n     while 'sched_getaffinity()' could be implemented in compatibility layer. */\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (0 < res)\n    return res;\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  if (0 < res)\n    return res;\n\n  return -1;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_proc_cpu_count code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nint\nmhd_tool_get_proc_cpu_count (void)\n{\n  int res;\n  FILE *log = fopen(\"/tmp/logs/244.txt\", \"a\");\n  if (log != NULL)\n    {\n      time_t t = time(NULL);\n      fprintf(log, \"\\n[%ld] ENTER mhd_tool_get_proc_cpu_count\\n\", (long)t);\n      fflush(log);\n    }\n\n#if defined(__linux__) || defined(__GLIBC__)\n  /* On Linux kernel try first 'sched_getaffinity()' as it should be\n     the native API.\n     Also try it first on other kernels if Glibc is used. */\n  if (log)\n    fprintf(log, \"Calling mhd_tool_get_proc_cpu_count_sched_getaffinity_()\\n\");\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (log)\n    fprintf(log, \"Returned from sched_getaffinity_: %d\\n\", res);\n  if (0 < res)\n    {\n      if (log)\n        fprintf(log, \"Early return %d (sched_getaffinity_)\\n\", res);\n      if (log)\n        fclose(log);\n      return res;\n    }\n\n  if (log)\n    fprintf(log, \"Calling mhd_tool_get_proc_cpu_count_cpuset_getaffinity_()\\n\");\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (log)\n    fprintf(log, \"Returned from cpuset_getaffinity_: %d\\n\", res);\n  if (0 < res)\n    {\n      if (log)\n        fprintf(log, \"Early return %d (cpuset_getaffinity_)\\n\", res);\n      if (log)\n        fclose(log);\n      return res;\n    }\n#else  /* ! __linux__ && ! __GLIBC__ */\n  /* On non-Linux kernels 'cpuset_getaffinity()' could be the native API,\n     while 'sched_getaffinity()' could be implemented in compatibility layer. */\n  if (log)\n    fprintf(log, \"Calling mhd_tool_get_proc_cpu_count_cpuset_getaffinity_()\\n\");\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (log)\n    fprintf(log, \"Returned from cpuset_getaffinity_: %d\\n\", res);\n  if (0 < res)\n    {\n      if (log)\n        fprintf(log, \"Early return %d (cpuset_getaffinity_)\\n\", res);\n      if (log)\n        fclose(log);\n      return res;\n    }\n\n  if (log)\n    fprintf(log, \"Calling mhd_tool_get_proc_cpu_count_sched_getaffinity_()\\n\");\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (log)\n    fprintf(log, \"Returned from sched_getaffinity_: %d\\n\", res);\n  if (0 < res)\n    {\n      if (log)\n        fprintf(log, \"Early return %d (sched_getaffinity_)\\n\", res);\n      if (log)\n        fclose(log);\n      return res;\n    }\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  if (log)\n    fprintf(log, \"Calling mhd_tool_get_proc_cpu_count_sched_getaffinity_np_()\\n\");\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  if (log)\n    fprintf(log, \"Returned from sched_getaffinity_np_: %d\\n\", res);\n  if (0 < res)\n    {\n      if (log)\n        fprintf(log, \"Early return %d (sched_getaffinity_np_)\\n\", res);\n      if (log)\n        fclose(log);\n      return res;\n    }\n\n  if (log)\n    fprintf(log, \"Calling mhd_tool_get_proc_cpu_count_w32_()\\n\");\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  if (log)\n    fprintf(log, \"Returned from w32_: %d\\n\", res);\n  if (0 < res)\n    {\n      if (log)\n        fprintf(log, \"Early return %d (w32_)\\n\", res);\n      if (log)\n        fclose(log);\n      return res;\n    }\n\n  if (log)\n    {\n      fprintf(log, \"All methods failed, returning -1\\n\");\n      fclose(log);\n    }\n\n  return -1;\n}\n"
}