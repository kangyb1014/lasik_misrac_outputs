{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe code enclosed in \"#if 0 ... #endif\" is permanently excluded from compilation (constant false conditional). That block (GetThreadGroupAffinity usage) can never be part of any translation unit built with the current source and therefore is unreachable/dead code present in the project.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_proc_cpu_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/241.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_proc_cpu_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_proc_cpu_count:\n```c\nint\nmhd_tool_get_proc_cpu_count (void)\n{\n  int res;\n\n#if defined(__linux__) || defined(__GLIBC__)\n  /* On Linux kernel try first 'sched_getaffinity()' as it should be\n     the native API.\n     Also try it first on other kernels if Glibc is used. */\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (0 < res)\n    return res;\n#else  /* ! __linux__ && ! __GLIBC__ */\n  /* On non-Linux kernels 'cpuset_getaffinity()' could be the native API,\n     while 'sched_getaffinity()' could be implemented in compatibility layer. */\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (0 < res)\n    return res;\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  if (0 < res)\n    return res;\n\n  return -1;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_proc_cpu_count code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Prototypes of the helper functions used by the original implementation. */\nextern int mhd_tool_get_proc_cpu_count_sched_getaffinity_ (void);\nextern int mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ (void);\nextern int mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ (void);\nextern int mhd_tool_get_proc_cpu_count_w32_ (void);\n\n/* Simple logging helpers that append diagnostic information to /tmp/logs/241.txt. */\nstatic void\nlog_msg (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/241.txt\", \"a\");\n  if (!f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic void\nlog_call_result (const char *call_name, int res)\n{\n  if (res > 0)\n    log_msg(\"%s -> %d (positive, will be returned)\", call_name, res);\n  else\n    log_msg(\"%s -> %d\", call_name, res);\n}\n\nint\nmhd_tool_get_proc_cpu_count (void)\n{\n  int res;\n\n#if defined(__linux__) || defined(__GLIBC__)\n  /* Log which compile-time branch was selected so callers can see why\n     certain platform-specific code (possibly guarded elsewhere with\n     preprocessor conditions) may be excluded from the build. */\n  log_msg(\"mhd_tool_get_proc_cpu_count: compiled with __linux__ or __GLIBC__ branch\");\n\n  /* On Linux kernel try first 'sched_getaffinity()' as it should be\n     the native API.\n     Also try it first on other kernels if Glibc is used. */\n  log_msg(\"About to call: mhd_tool_get_proc_cpu_count_sched_getaffinity_\");\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  log_call_result(\"mhd_tool_get_proc_cpu_count_sched_getaffinity_\", res);\n  if (0 < res)\n    return res;\n\n  log_msg(\"About to call: mhd_tool_get_proc_cpu_count_cpuset_getaffinity_\");\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  log_call_result(\"mhd_tool_get_proc_cpu_count_cpuset_getaffinity_\", res);\n  if (0 < res)\n    return res;\n#else  /* ! __linux__ && ! __GLIBC__ */\n  log_msg(\"mhd_tool_get_proc_cpu_count: compiled with non-Linux/non-GLIBC branch\");\n\n  /* On non-Linux kernels 'cpuset_getaffinity()' could be the native API,\n     while 'sched_getaffinity()' could be implemented in compatibility layer. */\n  log_msg(\"About to call: mhd_tool_get_proc_cpu_count_cpuset_getaffinity_\");\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  log_call_result(\"mhd_tool_get_proc_cpu_count_cpuset_getaffinity_\", res);\n  if (0 < res)\n    return res;\n\n  log_msg(\"About to call: mhd_tool_get_proc_cpu_count_sched_getaffinity_\");\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  log_call_result(\"mhd_tool_get_proc_cpu_count_sched_getaffinity_\", res);\n  if (0 < res)\n    return res;\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  log_msg(\"About to call: mhd_tool_get_proc_cpu_count_sched_getaffinity_np_\");\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  log_call_result(\"mhd_tool_get_proc_cpu_count_sched_getaffinity_np_\", res);\n  if (0 < res)\n    return res;\n\n  log_msg(\"About to call: mhd_tool_get_proc_cpu_count_w32_\");\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  log_call_result(\"mhd_tool_get_proc_cpu_count_w32_\", res);\n  if (0 < res)\n    return res;\n\n  log_msg(\"No method returned a positive CPU count; returning -1\");\n  return -1;\n}\n"
}