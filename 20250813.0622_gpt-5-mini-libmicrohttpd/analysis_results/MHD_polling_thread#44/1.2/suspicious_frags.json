{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_polling_thread:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n      MHD_poll (daemon, MHD_YES);\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n      MHD_epoll (daemon, -1);\n    else\n#endif\n    MHD_select (daemon, -1);\n    MHD_cleanup_connections (daemon);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n    resume_suspended_connections (daemon);\n  close_all_connections (daemon);\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_polling_thread:\n#define MHD_THRD_RTRN_TYPE_ void*\n...\n#define MHD_THRD_CALL_SPEC_ \n...\n#define MHD_D_IS_USING_POLL_(d) (0!=((d)->options&MHD_USE_POLL))\n...\n#define MHD_D_IS_USING_EPOLL_(d) (0!=((d)->options&MHD_USE_EPOLL))\n...\n#define MHD_TEST_ALLOW_SUSPEND_RESUME 8192\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler language extensions in the provided code. Reasons why no other fragments require investigation:\n\n- MHD_THRD_CALL_SPEC_ is defined as empty (no calling-convention or compiler-specific keywords like __stdcall, __cdecl, __attribute__, __fastcall, etc.). Therefore its placement between the return type and function name does not introduce an extension in this translation unit.\n- MHD_THRD_RTRN_TYPE_ is defined as void* (a standard C type), and the final return uses an explicit cast to that type; casting integer 0 to a pointer is standard C and not a compiler extension.\n- No GCC/MSVC/Clang specific tokens are present (no __attribute__, __asm, __declspec, __extension__, __builtin_*, __inline__ used as an extension, etc.).\n- POSIX APIs and types used (sigset_t, pthread_sigmask, SIGPIPE, pthreads functions) are standard POSIX, not compiler language extensions; the rule targets compiler language extensions explicitly documented as extensions.\n- Preprocessor conditionals and macros (HAVE_PTHREAD_SIGMASK, HAVE_POLL, EPOLL_SUPPORT) are standard preprocessor usage and are not language extensions by themselves.\n- No use of nonstandard comment styles or other known compiler-specific syntax was found.\n\nIf any of the macros shown (for example MHD_THRD_CALL_SPEC_ or others) are defined differently in other build configurations (e.g. expanding to __stdcall, __attribute__((...)), __declspec(...), or other compiler-specific keywords), those alternative macro definitions would need to be inspected. Based on the provided definitions (MHD_THRD_CALL_SPEC_ empty, MHD_THRD_RTRN_TYPE_ void*), there are no language extensions here."
}