{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nInside MHD_select the value parameter 'millisec' (int32_t) is assigned: 'millisec = 0;'. Modifying a function parameter variable violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_polling_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/357.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_polling_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_polling_thread:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n      MHD_poll (daemon, MHD_YES);\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n      MHD_epoll (daemon, -1);\n    else\n#endif\n    MHD_select (daemon, -1);\n    MHD_cleanup_connections (daemon);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n    resume_suspended_connections (daemon);\n  close_all_connections (daemon);\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_polling_thread code.\n",
  "test_code": "static void MHD_logf (const char *fmt, ...)\n{\n  /* Simple logging helper that appends formatted messages to the\n   * log file. Kept minimal to avoid changing program logic. */\n  FILE *f = fopen (\"/tmp/logs/357.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nMHD_poll_probe (struct MHD_Daemon *daemon, int yes)\n{\n  MHD_logf (\"MHD_poll_probe: enter: daemon=%p, yes=%d, shutdown=%d\",\n            (void *) daemon, yes, (daemon ? daemon->shutdown : 0));\n  MHD_poll (daemon, yes);\n  MHD_logf (\"MHD_poll_probe: exit: daemon=%p, shutdown=%d\",\n            (void *) daemon, (daemon ? daemon->shutdown : 0));\n}\n\nstatic void\nMHD_epoll_probe (struct MHD_Daemon *daemon, int timeout)\n{\n  MHD_logf (\"MHD_epoll_probe: enter: daemon=%p, timeout=%d, shutdown=%d\",\n            (void *) daemon, timeout, (daemon ? daemon->shutdown : 0));\n  MHD_epoll (daemon, timeout);\n  MHD_logf (\"MHD_epoll_probe: exit: daemon=%p, shutdown=%d\",\n            (void *) daemon, (daemon ? daemon->shutdown : 0));\n}\n\nstatic void\nMHD_select_probe (struct MHD_Daemon *daemon, int32_t millisec)\n{\\n  /* Log the value passed for millisec before calling MHD_select. This\n   * allows observers to see the parameter value as provided by the caller.\n   * The reported violation concerns modification of the parameter inside\n   * MHD_select; this probe records the input value and the control path. */\n  MHD_logf (\"MHD_select_probe: enter: daemon=%p, millisec=%ld, shutdown=%d\",\n            (void *) daemon, (long) millisec, (daemon ? daemon->shutdown : 0));\n  MHD_select (daemon, millisec);\n  MHD_logf (\"MHD_select_probe: exit: daemon=%p, millisec=%ld, shutdown=%d\",\n            (void *) daemon, (long) millisec, (daemon ? daemon->shutdown : 0));\n}\n\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n  MHD_logf (\"MHD_polling_thread: started: daemon=%p, tid=%ld\",\n            (void *) daemon, (long) daemon->tid);\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n  {\n    daemon->sigpipe_blocked = true;\n    MHD_logf (\"MHD_polling_thread: SIGPIPE blocked on thread: daemon=%p\", (void *) daemon);\n  }\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n    MHD_logf (\"MHD_polling_thread: loop start: daemon=%p, shutdown=%d\",\n              (void *) daemon, daemon->shutdown);\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n      MHD_poll_probe (daemon, MHD_YES);\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n      MHD_epoll_probe (daemon, -1);\n    else\n#endif\n      /* Use our probe wrapper around MHD_select so that callers can\n       * observe the value passed for millisec and the control path. */\n      MHD_select_probe (daemon, -1);\n    MHD_cleanup_connections (daemon);\n    MHD_logf (\"MHD_polling_thread: after cleanup: daemon=%p, shutdown=%d\",\n              (void *) daemon, daemon->shutdown);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n    resume_suspended_connections (daemon);\n  close_all_connections (daemon);\n\n  MHD_logf (\"MHD_polling_thread: exiting: daemon=%p\", (void *) daemon);\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}"
}