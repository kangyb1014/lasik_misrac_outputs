{
  "user_message": "An agent A claimed that the following MHD_polling_thread code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. .\n</misra_rule>\n<target_code>\nHere is the original code of MHD_polling_thread.\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n      MHD_poll (daemon, MHD_YES);\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n      MHD_epoll (daemon, -1);\n    else\n#endif\n    MHD_select (daemon, -1);\n    MHD_cleanup_connections (daemon);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n    resume_suspended_connections (daemon);\n  close_all_connections (daemon);\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The for loop uses 'pos' as the loop counter but the third clause is 'pos = posn' where 'posn' is assigned inside the loop body (posn = pos->prev). Clause 3 of MISRA C 2023 Rule 14.2 forbids the third clause from using objects that are modified in the loop body. Because the third-clause expression depends on 'posn' which is modified in the loop body, this violates Rule 14.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic const int MHD_YES = 1;\nstatic const unsigned long MHD_TEST_ALLOW_SUSPEND_RESUME = 0x1UL;\nstatic void MHD_thread_handle_ID_set_current_thread_ID_(void **tid);\nstatic void MHD_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/356.txt\", \"a\");\n    if (f == NULL)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Prepend a simple timestamp for ordering */\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] \", (long)t);\n    }\n\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n\n    va_end(ap);\n    fclose(f);\n}\nstatic void MHD_thread_handle_ID_set_current_thread_ID_(void **tid)\n{\n    (void)tid;\n}\n\nstatic void *\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = (struct MHD_Daemon *)cls;\n\n  /* Log entry to polling thread and the daemon pointer */\n  MHD_log_probe(\"MHD_polling_thread: start, daemon=%p\", (void *)daemon);\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n\n  /* Loop until shutdown; log each iteration and which polling mechanism is used. */\n  {\n    unsigned long iteration = 0UL;\n\n    while (! daemon->shutdown)\n    {\n      iteration++;\n      MHD_log_probe(\"iteration=%lu, daemon->shutdown=%d, daemon=%p\",\n                    iteration, (int)daemon->shutdown, (void *)daemon);\n\n      /* For this minimal, portable example we always use select (fallback).\n       * The original code used compile-time checks for poll/epoll. */\n      MHD_log_probe(\"iteration=%lu: using select\", iteration);\n      MHD_select (daemon, -1);\n\n      MHD_log_probe(\"iteration=%lu: poll/select returned, about to cleanup connections\", iteration);\n      MHD_cleanup_connections (daemon);\n      MHD_log_probe(\"iteration=%lu: cleanup_connections completed\", iteration);\n    }\n\n    MHD_log_probe(\"exiting polling loop after %lu iterations, daemon->shutdown=%d\",\n                  iteration, (int)daemon->shutdown);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n  {\n    MHD_log_probe(\"before resume_suspended_connections, daemon=%p\", (void *)daemon);\n    resume_suspended_connections (daemon);\n    MHD_log_probe(\"after resume_suspended_connections, daemon=%p\", (void *)daemon);\n  }\n\n  MHD_log_probe(\"before close_all_connections, daemon=%p\", (void *)daemon);\n  close_all_connections (daemon);\n  MHD_log_probe(\"after close_all_connections, daemon=%p\", (void *)daemon);\n\n  MHD_log_probe(\"MHD_polling_thread: returning\");\n  return NULL;\n}\nstatic void MHD_poll(struct MHD_Daemon *daemon, int yes)\n{\n    (void)daemon; (void)yes;\n}\nstatic void MHD_epoll(struct MHD_Daemon *daemon, int timeout)\n{\n    (void)daemon; (void)timeout;\n}\nstatic void MHD_select(struct MHD_Daemon *daemon, int timeout)\n{\n    (void)daemon; (void)timeout;\n}\nstatic void MHD_cleanup_connections(struct MHD_Daemon *daemon)\n{\n    (void)daemon;\n}\nstatic void resume_suspended_connections(struct MHD_Daemon *daemon)\n{\n    (void)daemon;\n}\nstatic void close_all_connections(struct MHD_Daemon *daemon)\n{\n    (void)daemon;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is not correct for the provided MHD_polling_thread code. The MISRA C 2023 Rule 14.2 applies to for statements and their three clauses, but the submitted MHD_polling_thread contains no for loop \u2014 it uses a while loop to iterate (while (! daemon->shutdown)). Therefore there is no for-loop first/second/third clause to inspect, and Rule 14.2 cannot be violated in this function as shown. \n\nIt appears agent A's scenario (pos/posn in the third clause) refers to a different piece of code that was not supplied here. If you want a proper assessment for that situation, please provide the actual for-loop source where pos and posn appear; then I can determine whether the third clause depends on an object modified in the loop body and whether that constitutes a Rule 14.2 violation."
}