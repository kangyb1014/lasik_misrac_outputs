{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert(0 != content_len) in MHD_add_response_entry_no_check_ is redundant given callers: add_response_entry_n returns early when content_len == 0, so any call-path shown guarantees content_len != 0. The assertion therefore cannot fail at runtime on the provided call paths and only serves as a checked-but-always-true operation; its removal would not affect program behaviour, which makes it dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/674.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Helper probe: append formatted log entries to /tmp/logs/674.txt. */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f;\n\n  /* Attempt to ensure directory exists; ignore errors. */\n  (void) mkdir(\"/tmp/logs\", (mode_t)0700);\n\n  f = fopen(\"/tmp/logs/674.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  log_probe (\"add_response_entry_n: entry: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\",\n             (void *) response, (int) kind, (void *) header, header_len, (void *) content, content_len);\n\n  if (NULL == response)\n  {\n    log_probe (\"add_response_entry_n: early return - response == NULL\");\n    return false;\n  }\n  if (0 == header_len)\n  {\n    log_probe (\"add_response_entry_n: early return - header_len == 0\");\n    return false;\n  }\n  if (0 == content_len)\n  {\n    log_probe (\"add_response_entry_n: early return - content_len == 0\");\n    return false;\n  }\n\n  {\n    const void *p = memchr (header, '\\t', header_len);\n    if (NULL != p)\n    {\n      size_t idx = (const char *) p - header;\n      log_probe (\"add_response_entry_n: early return - header contains '\\\\t' at index %zu\", idx);\n      return false;\n    }\n  }\n  {\n    const void *p = memchr (header, ' ', header_len);\n    if (NULL != p)\n    {\n      size_t idx = (const char *) p - header;\n      log_probe (\"add_response_entry_n: early return - header contains ' ' at index %zu\", idx);\n      return false;\n    }\n  }\n  {\n    const void *p = memchr (header, '\\r', header_len);\n    if (NULL != p)\n    {\n      size_t idx = (const char *) p - header;\n      log_probe (\"add_response_entry_n: early return - header contains '\\\\r' at index %zu\", idx);\n      return false;\n    }\n  }\n  {\n    const void *p = memchr (header, '\\n', header_len);\n    if (NULL != p)\n    {\n      size_t idx = (const char *) p - header;\n      log_probe (\"add_response_entry_n: early return - header contains '\\\\n' at index %zu\", idx);\n      return false;\n    }\n  }\n  {\n    const void *p = memchr (content, '\\r', content_len);\n    if (NULL != p)\n    {\n      size_t idx = (const char *) p - content;\n      log_probe (\"add_response_entry_n: early return - content contains '\\\\r' at index %zu\", idx);\n      return false;\n    }\n  }\n  {\n    const void *p = memchr (content, '\\n', content_len);\n    if (NULL != p)\n    {\n      size_t idx = (const char *) p - content;\n      log_probe (\"add_response_entry_n: early return - content contains '\\\\n' at index %zu\", idx);\n      return false;\n    }\n  }\n\n  log_probe (\"add_response_entry_n: calling MHD_add_response_entry_no_check_ with content_len=%zu\", content_len);\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n"
}