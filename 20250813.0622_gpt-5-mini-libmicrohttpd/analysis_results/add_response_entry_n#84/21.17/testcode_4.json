{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf 'header' is NULL while 'header_len' > 0 (caller-supplied), the call memchr(header, '\\n', header_len) will attempt to read up to header_len bytes via the NULL pointer, causing an out-of-bounds (undefined) access. The memchr usage is only safe if the caller guarantees that 'header' points to an object at least 'header_len' bytes long; that guarantee is not enforced in add_response_entry_n before this call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper. Appends human-readable state to /tmp/logs/679.txt. */\nstatic void\nlog_probe(const char *label,\n          const struct MHD_Response *response,\n          enum MHD_ValueKind kind,\n          const char *header, size_t header_len,\n          const char *content, size_t content_len)\n{\n  FILE *f = fopen(\"/tmp/logs/679.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[add_response_entry_n] %s\\n\", label);\n  fprintf(f, \"  response=%p\\n\", (void *) response);\n  fprintf(f, \"  kind=%d\\n\", (int) kind);\n  fprintf(f, \"  header=%p, header_len=%zu\\n\", (void *) header, header_len);\n  fprintf(f, \"  content=%p, content_len=%zu\\n\", (void *) content, content_len);\n  fprintf(f, \"  header_is_null=%d, content_is_null=%d\\n\",\n          (header == NULL) ? 1 : 0, (content == NULL) ? 1 : 0);\n\n  /* If header is non-NULL and small, optionally print a hexdump of up to 32 bytes. */\n  if (header != NULL && header_len > 0) {\n    size_t dump_len = header_len < 32 ? header_len : 32;\n    fprintf(f, \"  header_bytes(hexdump up to %zu bytes):\", dump_len);\n    for (size_t i = 0; i < dump_len; ++i)\n      fprintf(f, \" %02x\", (unsigned char) header[i]);\n    fprintf(f, \"\\n\");\n  }\n\n  /* If content is non-NULL and small, optionally print a hexdump of up to 32 bytes. */\n  if (content != NULL && content_len > 0) {\n    size_t dump_len = content_len < 32 ? content_len : 32;\n    fprintf(f, \"  content_bytes(hexdump up to %zu bytes):\", dump_len);\n    for (size_t i = 0; i < dump_len; ++i)\n      fprintf(f, \" %02x\", (unsigned char) content[i]);\n    fprintf(f, \"\\n\");\n  }\n\n  fflush(f);\n  fclose(f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  /* Log entry state */\n  log_probe(\"entry\", response, kind, header, header_len, content, content_len);\n\n  if (NULL == response) {\n    log_probe(\"early_return: response is NULL\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (0 == header_len) {\n    log_probe(\"early_return: header_len == 0\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (0 == content_len) {\n    log_probe(\"early_return: content_len == 0\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n\n  /* Before each memchr call we log the parameters so the case where header==NULL and\n     header_len>0 (which would cause memchr to read via a NULL pointer) is recorded.\n     We preserve the original control flow and behavior by performing the same checks\n     as in the original function. */\n  log_probe(\"before_memchr_tab\", response, kind, header, header_len, content, content_len);\n  if (NULL != memchr (header, '\\t', header_len)) {\n    log_probe(\"reject: header contains tab\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n\n  log_probe(\"before_memchr_space\", response, kind, header, header_len, content, content_len);\n  if (NULL != memchr (header, ' ', header_len)) {\n    log_probe(\"reject: header contains space\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n\n  log_probe(\"before_memchr_cr\", response, kind, header, header_len, content, content_len);\n  if (NULL != memchr (header, '\\r', header_len)) {\n    log_probe(\"reject: header contains CR\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n\n  log_probe(\"before_memchr_lf\", response, kind, header, header_len, content, content_len);\n  if (NULL != memchr (header, '\\n', header_len)) {\n    log_probe(\"reject: header contains LF\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n\n  log_probe(\"before_memchr_content_cr\", response, kind, header, header_len, content, content_len);\n  if (NULL != memchr (content, '\\r', content_len)) {\n    log_probe(\"reject: content contains CR\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n\n  log_probe(\"before_memchr_content_lf\", response, kind, header, header_len, content, content_len);\n  if (NULL != memchr (content, '\\n', content_len)) {\n    log_probe(\"reject: content contains LF\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n\n  log_probe(\"calling_MHD_add_response_entry_no_check_\", response, kind, header, header_len, content, content_len);\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n"
}