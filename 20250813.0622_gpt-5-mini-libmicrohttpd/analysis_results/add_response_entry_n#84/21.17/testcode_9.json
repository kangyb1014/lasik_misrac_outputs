{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memchr(header, ' ', header_len) without first ensuring that header is a valid pointer to at least header_len bytes. If add_response_entry_n is invoked with header == NULL and header_len > 0 (or with header pointing to a buffer smaller than header_len), memchr will read through an invalid pointer/bytes beyond the object, causing undefined behavior and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Forward declarations to avoid requiring other headers in this snippet. */\nstruct MHD_Response;\nenum MHD_ValueKind;\nbool MHD_add_response_entry_no_check_ (struct MHD_Response *, enum MHD_ValueKind,\n                                       const char *, size_t, const char *, size_t);\n\n/* Simple logging helper that appends messages to /tmp/logs/679.txt. */\nstatic void\nwrite_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/679.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  write_log (\"ENTER add_response_entry_n: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\",\n             (void *) response, (int) kind, (const void *) header, header_len, (const void *) content, content_len);\n\n  if (NULL == response)\n    {\n      write_log (\"RETURN false: response == NULL\");\n      return false;\n    }\n  if (0 == header_len)\n    {\n      write_log (\"RETURN false: header_len == 0\");\n      return false;\n    }\n  if (0 == content_len)\n    {\n      write_log (\"RETURN false: content_len == 0\");\n      return false;\n    }\n\n  /* Preserve original memchr checks but log state immediately before and after each call. */\n  const char *p = NULL;\n\n  write_log (\"BEFORE memchr: header=%p header_len=%zu looking for '\\\\t'\", (const void *) header, header_len);\n  p = memchr (header, '\\t', header_len);\n  write_log (\"AFTER memchr('\\\\t'): returned %p\", (const void *) p);\n  if (NULL != p)\n    {\n      write_log (\"RETURN false: header contains '\\\\t'\");\n      return false;\n    }\n\n  write_log (\"BEFORE memchr: header=%p header_len=%zu looking for ' '\", (const void *) header, header_len);\n  p = memchr (header, ' ', header_len);\n  write_log (\"AFTER memchr(' '): returned %p\", (const void *) p);\n  if (NULL != p)\n    {\n      write_log (\"RETURN false: header contains ' '\");\n      return false;\n    }\n\n  write_log (\"BEFORE memchr: header=%p header_len=%zu looking for '\\\\r'\", (const void *) header, header_len);\n  p = memchr (header, '\\r', header_len);\n  write_log (\"AFTER memchr('\\\\r'): returned %p\", (const void *) p);\n  if (NULL != p)\n    {\n      write_log (\"RETURN false: header contains '\\\\r'\");\n      return false;\n    }\n\n  write_log (\"BEFORE memchr: header=%p header_len=%zu looking for '\\\\n'\", (const void *) header, header_len);\n  p = memchr (header, '\\n', header_len);\n  write_log (\"AFTER memchr('\\\\n'): returned %p\", (const void *) p);\n  if (NULL != p)\n    {\n      write_log (\"RETURN false: header contains '\\\\n'\");\n      return false;\n    }\n\n  write_log (\"BEFORE memchr: content=%p content_len=%zu looking for '\\\\r'\", (const void *) content, content_len);\n  p = memchr (content, '\\r', content_len);\n  write_log (\"AFTER memchr('\\\\r' on content): returned %p\", (const void *) p);\n  if (NULL != p)\n    {\n      write_log (\"RETURN false: content contains '\\\\r'\");\n      return false;\n    }\n\n  write_log (\"BEFORE memchr: content=%p content_len=%zu looking for '\\\\n'\", (const void *) content, content_len);\n  p = memchr (content, '\\n', content_len);\n  write_log (\"AFTER memchr('\\\\n' on content): returned %p\", (const void *) p);\n  if (NULL != p)\n    {\n      write_log (\"RETURN false: content contains '\\\\n'\");\n      return false;\n    }\n\n  write_log (\"CALL MHD_add_response_entry_no_check_: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\",\n             (void *) response, (int) kind, (const void *) header, header_len, (const void *) content, content_len);\n\n  bool res = MHD_add_response_entry_no_check_ (response, kind, header, header_len, content, content_len);\n\n  write_log (\"RETURN from add_response_entry_n: result=%d\", (int) res);\n  return res;\n}\n"
}