{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the pointer 'content' does not actually refer to an object of at least content_len bytes (for example, content points to a 4\u2011byte buffer but content_len is 10, or content is NULL while content_len is non\u2011zero), the call memchr(content, '\\n', content_len) will read past the object bounds and cause undefined behavior. In other words, if callers supply an incorrect content_len (larger than the actual buffer) or a NULL content with non\u2011zero length, this memchr use can access beyond the referenced object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe helper: append a log line to /tmp/logs/679.txt. */\nstatic void\nwrite_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/679.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  write_log (\"ENTER add_response_entry_n: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\",\n             (void *) response, (int) kind, (const void *) header, header_len,\n             (const void *) content, content_len);\n\n  if (NULL == response)\n    {\n      write_log (\"RETURN false: response is NULL\");\n      return false;\n    }\n  if (0 == header_len)\n    {\n      write_log (\"RETURN false: header_len == 0\");\n      return false;\n    }\n  if (0 == content_len)\n    {\n      write_log (\"RETURN false: content_len == 0\");\n      return false;\n    }\n\n  /* Header checks */\n  write_log (\"Check header for '\\\\t' (header=%p, header_len=%zu)\", (const void *) header, header_len);\n  {\n    void *p = memchr (header, '\\t', header_len);\n    write_log (\"memchr(header,'\\\\t',%zu) -> %p\", header_len, p);\n    if (NULL != p)\n      {\n        write_log (\"RETURN false: header contains '\\\\t'\");\n        return false;\n      }\n  }\n\n  write_log (\"Check header for ' ' (header=%p, header_len=%zu)\", (const void *) header, header_len);\n  {\n    void *p = memchr (header, ' ', header_len);\n    write_log (\"memchr(header,' ',%zu) -> %p\", header_len, p);\n    if (NULL != p)\n      {\n        write_log (\"RETURN false: header contains ' '\");\n        return false;\n      }\n  }\n\n  write_log (\"Check header for '\\\\r' (header=%p, header_len=%zu)\", (const void *) header, header_len);\n  {\n    void *p = memchr (header, '\\r', header_len);\n    write_log (\"memchr(header,'\\\\r',%zu) -> %p\", header_len, p);\n    if (NULL != p)\n      {\n        write_log (\"RETURN false: header contains '\\\\r'\");\n        return false;\n      }\n  }\n\n  write_log (\"Check header for '\\\\n' (header=%p, header_len=%zu)\", (const void *) header, header_len);\n  {\n    void *p = memchr (header, '\\n', header_len);\n    write_log (\"memchr(header,'\\\\n',%zu) -> %p\", header_len, p);\n    if (NULL != p)\n      {\n        write_log (\"RETURN false: header contains '\\\\n'\");\n        return false;\n      }\n  }\n\n  /* Content checks. These memchr calls match the original logic and are\n     intentionally left as-is so they can reproduce the reported violation\n     scenario (e.g. content == NULL while content_len > 0). The probes log\n     the pointer and length before and after the calls. */\n  write_log (\"Check content for '\\\\r' (content=%p, content_len=%zu)\", (const void *) content, content_len);\n  {\n    void *p = memchr (content, '\\r', content_len);\n    write_log (\"memchr(content,'\\\\r',%zu) -> %p\", content_len, p);\n    if (NULL != p)\n      {\n        write_log (\"RETURN false: content contains '\\\\r'\");\n        return false;\n      }\n  }\n\n  write_log (\"Check content for '\\\\n' (content=%p, content_len=%zu)\", (const void *) content, content_len);\n  {\n    void *p = memchr (content, '\\n', content_len);\n    write_log (\"memchr(content,'\\\\n',%zu) -> %p\", content_len, p);\n    if (NULL != p)\n      {\n        write_log (\"RETURN false: content contains '\\\\n'\");\n        return false;\n      }\n  }\n\n  write_log (\"Calling MHD_add_response_entry_no_check_ (response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu)\",\n             (void *) response, (int) kind, (const void *) header, header_len,\n             (const void *) content, content_len);\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n"
}