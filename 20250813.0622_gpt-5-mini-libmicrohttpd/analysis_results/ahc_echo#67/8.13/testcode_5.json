{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter upload_data_size is declared as size_t *upload_data_size but is not modified in ahc_echo (it is cast to void). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible \u2014 it should be declared as const size_t *upload_data_size. (If this signature is mandated by an external callback API and cannot be changed, that external requirement is an acceptable justification for not applying the const qualification.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nstatic void\nahc_log(const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/539.txt\", \"a\");\n  if (fp == NULL)\n  {\n    return;\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(fp, fmt, ap);\n  va_end(ap);\n\n  fprintf(fp, \"\\n\");\n  fclose(fp);\n}\n\nstatic void\nahc_log_entry(const char *stage,\n              const void *cls,\n              const void *connection,\n              const char *url,\n              const char *method,\n              const char *version,\n              const void *upload_data,\n              const void *upload_data_size_ptr,\n              void **req_cls)\n{\n  /* Log basic call-site information and pointer values. Do not dereference\n     upload_data_size_ptr (preserves original semantics of not modifying\n     upload data size). */\n  ahc_log(\"[ahc_echo] %s: cls=%p connection=%p url=%s method=%s version=%s upload_data=%p upload_data_size_ptr=%p req_cls=%p\",\n          stage,\n          cls,\n          connection,\n          (url != NULL) ? url : \"(null)\",\n          (method != NULL) ? method : \"(null)\",\n          (version != NULL) ? version : \"(null)\",\n          upload_data,\n          upload_data_size_ptr,\n          (void *) req_cls);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  /* Log entry and parameter pointer values. We avoid dereferencing\n     upload_data_size to mirror the original behaviour (it is unused). */\n  ahc_log_entry(\"entry\",\n                cls,\n                (void *) connection,\n                url,\n                method,\n                version,\n                upload_data,\n                (const void *) upload_data_size,\n                req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  /* Keep the original behaviour: upload_data_size is not modified here. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Check method */\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_log(\"[ahc_echo] unexpected method, returning MHD_NO (method=%s)\", method);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  /* Log current req_cls and aptr addresses before comparison */\n  ahc_log(\"[ahc_echo] aptr address=%p current *req_cls=%p\", (void *) &aptr, (void *) ((*req_cls)));\n\n  if (&aptr != *req_cls)\n  {\n    ahc_log(\"[ahc_echo] setting *req_cls to &aptr (%p)\", (void *) &aptr);\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      ahc_log(\"[ahc_echo] method=POST -> returning BUSY page\");\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      ahc_log(\"[ahc_echo] queued response (BUSY) ret=%d\", (int) ret);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  ahc_log(\"[ahc_echo] preparing normal response (param->response_page=%p)\", (void *) param->response_page);\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  ahc_log(\"[ahc_echo] queued response (OK) ret=%d\", (int) ret);\n  MHD_destroy_response (response);\n  ahc_log(\"[ahc_echo] exit\");\n  return ret;\n}\n"
}