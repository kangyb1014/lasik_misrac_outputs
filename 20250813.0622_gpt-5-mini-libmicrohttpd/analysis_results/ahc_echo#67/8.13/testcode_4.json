{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the callback context 'cls' to a non-const pointer: 'struct handler_param *param = (struct handler_param *) cls;'. The function only reads from param (uses param->response_page) and does not modify it, so per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type. Suggested fix: use 'const struct handler_param *param = (const struct handler_param *) cls;' (or change the API parameter to 'const void *cls' if allowed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper. Appends human-readable traces to /tmp/logs/539.txt. */\nstatic void ahc_echo_logf(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/539.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* best-effort only; do not change program flow if logging fails */\n    return;\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  /* Log entry state: pointers and method/url info. */\n  ahc_echo_logf(\"ahc_echo ENTRY: cls=%p, param=%p, method=%s, url=%s, version=%s, req_cls=%p, *req_cls=%p\",\n                cls,\n                (void *) param,\n                method ? method : \"(null)\",\n                url ? url : \"(null)\",\n                version ? version : \"(null)\",\n                (void *) req_cls,\n                (void *) (req_cls ? *req_cls : NULL));\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_echo_logf(\"ahc_echo: unexpected method: %s\", method ? method : \"(null)\");\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    ahc_echo_logf(\"ahc_echo: allocating request context: &aptr=%p, old *req_cls=%p\", (void *)&aptr, *req_cls);\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      ahc_echo_logf(\"ahc_echo: POST busy path triggered; preparing BUSYPAGE response\");\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n\n      /* log BUSYPAGE length and a preview to aid reproduction */\n      ahc_echo_logf(\"ahc_echo: BUSYPAGE length=%zu, preview=\\\"%.*s\\\"\",\n                    strlen (BUSYPAGE), (int) (strlen (BUSYPAGE) < 128 ? strlen (BUSYPAGE) : 128), BUSYPAGE);\n\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n\n      ahc_echo_logf(\"ahc_echo: returning MHD_HTTP_SERVICE_UNAVAILABLE (ret=%d)\", (int) ret);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n\n  /* Log details about the response_page member that demonstrates the read-only usage.\n     We intentionally log the pointer and a preview of its contents so that other agents\n     can reproduce the scenario where cls is cast to a non-const pointer but only read. */\n  if (param != NULL && param->response_page != NULL)\n  {\n    size_t rlen = strlen (param->response_page);\n    ahc_echo_logf(\"ahc_echo: preparing response from param=%p, response_page=%p, length=%zu\", (void *) param,\n                  (void *) param->response_page, rlen);\n    ahc_echo_logf(\"ahc_echo: response_page preview=\\\"%.*s\\\"\",\n                  (int) (rlen < 128 ? rlen : 128), param->response_page);\n  }\n  else\n  {\n    ahc_echo_logf(\"ahc_echo: param or param->response_page is NULL: param=%p, response_page=%p\",\n                  (void *) param, (param ? (void *) param->response_page : NULL));\n  }\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n\n  ahc_echo_logf(\"ahc_echo: returning MHD_HTTP_OK (ret=%d)\", (int) ret);\n  return ret;\n}\n"
}