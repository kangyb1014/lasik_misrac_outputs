{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter is declared as void **req_cls but the function never modifies the object pointed to by the void* stored in *req_cls \u2014 it only stores pointer values (*req_cls = &aptr; *req_cls = NULL). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible, so the declaration should be const void **req_cls (or otherwise const-qualify the pointed-to type) if the API allows it. As written (void **req_cls) the code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: append human-readable diagnostic lines to /tmp/logs/539.txt */\nstatic void ahc_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/539.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry state: pointers and method */\n  if (req_cls == NULL)\n  {\n    ahc_probe_log(\"ahc_echo entry: cls=%p connection=%p url=%s method=%s req_cls=NULL\",\n                  cls, connection, (url != NULL) ? url : \"(null)\", (method != NULL) ? method : \"(null)\");\n  }\n  else\n  {\n    /* *req_cls may be NULL or an address; print it */\n    ahc_probe_log(\"ahc_echo entry: cls=%p connection=%p url=%s method=%s req_cls_ptr=%p req_cls_pointed=%p\",\n                  cls, connection,\n                  (url != NULL) ? url : \"(null)\", (method != NULL) ? method : \"(null)\",\n                  (void *) req_cls, (void *) (*req_cls));\n  }\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_probe_log(\"ahc_echo: unexpected HTTP method '%s' -> returning MHD_NO\", method);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  /* Check whether req_cls points to our static token aptr */\n  if (req_cls == NULL)\n  {\n    ahc_probe_log(\"ahc_echo: req_cls is NULL, cannot compare or assign. Proceeding without modifying req_cls.\");\n  }\n  else if (&aptr != *req_cls)\n  {\n    /* Log the fact we're about to store the address of aptr into *req_cls */\n    ahc_probe_log(\"ahc_echo: &aptr=%p != *req_cls=%p -> assigning *req_cls = &aptr\",\n                  (void *) &aptr, (void *) (*req_cls));\n\n    *req_cls = &aptr;\n\n    ahc_probe_log(\"ahc_echo: after assignment *req_cls=%p (points to &aptr=%p). Note: the object pointed-to by *req_cls is not modified, only the pointer value is stored.\",\n                  (void *) (*req_cls), (void *) &aptr);\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      ahc_probe_log(\"ahc_echo: method is POST, sending BUSYPAGE (service unavailable) and returning\");\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      ahc_probe_log(\"ahc_echo: queued response MHD_HTTP_SERVICE_UNAVAILABLE, ret=%d\", (int) ret);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n  else\n  {\n    ahc_probe_log(\"ahc_echo: &aptr == *req_cls (both %p) -> no assignment done\", (void *) &aptr);\n  }\n\n  if (req_cls != NULL)\n  {\n    ahc_probe_log(\"ahc_echo: resetting *req_cls from %p to NULL (operation does not modify the pointed-to object)\", (void *) (*req_cls));\n    *req_cls = NULL;                  /* reset when done */\n  }\n  else\n  {\n    ahc_probe_log(\"ahc_echo: req_cls is NULL -> cannot reset *req_cls\");\n  }\n\n  ahc_probe_log(\"ahc_echo: preparing response page at param=%p response_page=%p\", param, (param != NULL) ? (void *) param->response_page : (void *) 0);\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  ahc_probe_log(\"ahc_echo: queued response MHD_HTTP_OK, ret=%d\", (int) ret);\n  MHD_destroy_response (response);\n  ahc_probe_log(\"ahc_echo: exit ret=%d\", (int) ret);\n  return ret;\n}\n"
}