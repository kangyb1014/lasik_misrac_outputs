{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'cls' is declared as void * but is used as a pointer to a handler_param (struct handler_param *param = (struct handler_param *)cls) and the function does not modify the pointed object. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible (e.g. const void *cls or const struct handler_param *cls). Using plain void * therefore violates the rule because it omits a const qualifier that could and should be applied.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "static void ahc_echo_log(const char *stage, void *cls, struct handler_param *param, const char *method, void **req_cls, const char *url, enum MHD_Result maybe_ret)\n{\n  FILE *f = fopen(\"/tmp/logs/539.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log stage, pointer values and some string fields where safe */\n    fprintf(f, \"[ahc_echo] stage=%s, cls=%p, param=%p, method=%s, url=%s, req_cls=%p, *req_cls=%p, ret=%d\\n\",\n            stage,\n            cls,\n            (void *) param,\n            (method != NULL) ? method : \"(null)\",\n            (url != NULL) ? url : \"(null)\",\n            (void *) req_cls,\n            (void *) ((req_cls != NULL) ? *req_cls : NULL),\n            (int) maybe_ret);\n\n    /* If param is non-NULL, also log the response_page pointer (but not assume it's non-NULL string) */\n    if (param != NULL)\n    {\n      fprintf(f, \"[ahc_echo] param->response_page=%p\\n\", (void *) param->response_page);\n      if (param->response_page != NULL)\n      {\n        /* Print a short prefix of the response page to avoid huge logs; safe-guard: print first 128 chars */\n        const char *rp = param->response_page;\n        size_t i;\n        fprintf(f, \"[ahc_echo] response_page_prefix=\\\"\");\n        for (i = 0U; (i < 128U) && (rp[i] != '\\0'); ++i)\n        {\n          int c = (unsigned char) rp[i];\n          /* avoid non-printables */\n          if ((c >= 32) && (c <= 126))\n            fputc(c, f);\n          else\n            fputc('?', f);\n        }\n        fprintf(f, \"\\\"\\n\");\n      }\n    }\n\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret = (enum MHD_Result) 0;\n\n  /* Note: cls is used (cast above) to obtain param, so do not suppress its warning here. */\n  (void) url;               /* Unused here except for logging; keep to match original style */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry state */\n  ahc_echo_log(\"entry\", cls, param, method, req_cls, url, ret);\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_echo_log(\"unexpected_method\", cls, param, method, req_cls, url, MHD_NO);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  /* Log req_cls before modification */\n  ahc_echo_log(\"before_reqcls_check\", cls, param, method, req_cls, url, ret);\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    ahc_echo_log(\"set_reqcls_to_aptr\", cls, param, method, req_cls, url, ret);\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      ahc_echo_log(\"queue_busy_response\", cls, param, method, req_cls, url, ret);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n\n  /* Log just before constructing the normal response. This will also show the param pointer and response_page pointer. */\n  ahc_echo_log(\"before_create_response\", cls, param, method, req_cls, url, ret);\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n\n  ahc_echo_log(\"after_queue_response\", cls, param, method, req_cls, url, ret);\n\n  MHD_destroy_response (response);\n  return ret;\n}\n"
}