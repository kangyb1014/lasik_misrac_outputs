{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function uses req_cls of type void ** to hold a pointer value (it stores &aptr into *req_cls and later resets it). The pointer value stored is used only as an opaque read-only marker (the code never modifies the object pointed-to via that pointer), so the pointed-to type could and should be const-qualified (e.g. const void *). Comparing &aptr (int *) with *req_cls (void *) shows that the code treats the pointed-to object as non-const even though it is not modified. Therefore the pointer does not point to a const-qualified type when it could and should.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ahc_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/539.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and key pointer state */\n  ahc_probe_log(\"ahc_echo ENTRY: method=\\\"%s\\\", url=\\\"%s\\\", version=\\\"%s\\\"\",\n                method ? method : \"(null)\", url ? url : \"(null)\", version ? version : \"(null)\");\n  ahc_probe_log(\"ahc_echo POINTER STATE: req_cls=%p, *req_cls=%p, &aptr=%p, aptr_value=%d\",\n                (void *) &req_cls,\n                (void *) (req_cls ? *req_cls : NULL),\n                (void *) &aptr,\n                aptr);\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_probe_log(\"ahc_echo: unexpected method '%s' -> returning MHD_NO\", method);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    ahc_probe_log(\"ahc_echo: &aptr (%p) != *req_cls (%p) -> setting *req_cls = &aptr\",\n                  (void *) &aptr, (void *) *req_cls);\n\n    *req_cls = &aptr;\n\n    ahc_probe_log(\"ahc_echo: stored &aptr (%p) into *req_cls -> now *req_cls=%p\",\n                  (void *) &aptr, (void *) *req_cls);\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      ahc_probe_log(\"ahc_echo: method is POST, returning BUSY page\");\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      ahc_probe_log(\"ahc_echo: queued response (BUSY), ret=%d\", (int) ret);\n      MHD_destroy_response (response);\n      ahc_probe_log(\"ahc_echo: exiting (POST busy)\");\n      return ret;\n    }\n  }\n  else\n  {\n    ahc_probe_log(\"ahc_echo: &aptr (%p) == *req_cls (%p) -> continuing without changing *req_cls\",\n                  (void *) &aptr, (void *) *req_cls);\n  }\n\n  ahc_probe_log(\"ahc_echo: resetting *req_cls from %p to NULL\", (void *) *req_cls);\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  ahc_probe_log(\"ahc_echo: queued OK response, ret=%d\", (int) ret);\n  MHD_destroy_response (response);\n  ahc_probe_log(\"ahc_echo: EXIT returning ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Rule 8.13 is a guidance to prefer const-qualified pointee types where practical, but it must be applied in context. In this case req_cls is the handler parameter with type void ** mandated by the external API (libmicrohttpd). You cannot change the function signature to const void ** without breaking the required callback prototype. Also the function intentionally stores and later resets the pointer value (*req_cls = &aptr; *req_cls = NULL) \u2014 it modifies the stored pointer, not the object pointed-to. Although the code never uses the stored pointer to modify the int object, changing the parameter type is not practicable because of the external interface and because pointer-to-pointer qualification changes are not equivalent (const void ** vs void ** are incompatible). MISRA allows that rules may be overridden where external interfaces constrain types. Therefore the claimed violation of MISRA C:2023 Rule 8.13 is not valid here."
}