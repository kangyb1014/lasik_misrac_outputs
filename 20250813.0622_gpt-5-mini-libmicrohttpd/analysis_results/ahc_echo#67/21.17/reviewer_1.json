{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Violation can occur if param->response_page is not a NUL-terminated C string. strlen(param->response_page) reads bytes until a NUL is found; if response_page points to a buffer filled without a terminating '\\0' (for example: char buf[100]; memset(buf,'A',100); param->response_page = buf;) strlen will read past the buffer bounds causing out\u2011of\u2011bounds access. Passing that computed length to MHD_create_response_from_buffer_static therefore can result in accesses beyond the object \u2014 a violation of MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/543.txt\", \"a\");\n  if (NULL == fp)\n  {\n    return; /* best-effort logging; do not change program control flow */\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(fp, fmt, ap);\n  va_end(ap);\n  fputc('\\n', fp);\n  fflush(fp);\n  fclose(fp);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  /* Log entry and raw parameter pointers/state for repro */\n  probe_log(\"ahc_echo: entered: cls=%p param=%p connection=%p url=%p method=%s version=%p upload_data=%p upload_data_size=%p req_cls=%p\",\n            cls, (void *) param, (void *) connection, (const void *) url,\n            (method != NULL) ? method : \"(null)\", (const void *) version,\n            (const void *) upload_data, (void *) upload_data_size, (void *) req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    probe_log(\"ahc_echo: unexpected method '%s' -> returning MHD_NO\", method);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    probe_log(\"ahc_echo: new request context: aptr_addr=%p *req_cls=%p\", (void *)&aptr, (void *) *req_cls);\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      /* Log BUSYPAGE details (safe: BUSYPAGE is a static string in original code) */\n      probe_log(\"ahc_echo: handling POST -> BUSYPAGE pointer=%p strlen=%zu\",\n                (const void *) BUSYPAGE, strlen(BUSYPAGE));\n\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      probe_log(\"ahc_echo: queued BUSYPAGE response ret=%d\", (int) ret);\n      MHD_destroy_response (response);\n      probe_log(\"ahc_echo: destroyed BUSYPAGE response and returning\");\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n\n  /*\n   * Log information about param and its response_page. The call below uses\n   * strlen(param->response_page) exactly as in the original code. This log\n   * will help reproduce cases where response_page is not NUL-terminated\n   * and strlen reads beyond the object bounds (as reported by the other agent).\n   */\n  probe_log(\"ahc_echo: about to prepare response from param: param=%p response_page=%p\",\n            (void *) param, (param != NULL) ? (void *) param->response_page : (void *) NULL);\n\n  /* Compute length (same as original logic) and log it. */\n  {\n    size_t resp_len = strlen (param->response_page);\n    probe_log(\"ahc_echo: strlen(param->response_page)=%zu\", resp_len);\n\n    response =\n      MHD_create_response_from_buffer_static (resp_len,\n                                              (const void *)\n                                              param->response_page);\n  }\n\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  probe_log(\"ahc_echo: queued response ret=%d\", (int) ret);\n  MHD_destroy_response (response);\n  probe_log(\"ahc_echo: destroyed response and returning ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct as a potential MISRA C 2023 Rule 21.17 violation. The call strlen(param->response_page) will read bytes until it finds a NUL terminator; if param->response_page does not point to a NUL\u2011terminated array (or the terminator is not within the bounds of the object), strlen will access bytes beyond the object, which violates Rule 21.17. The shown function does not check that param or param->response_page are non-NULL or that the buffer is NUL\u2011terminated, nor does it use an explicit length field, so nothing in the snippet guarantees the strlen call is safe. (By the same token, calls such as strcmp(method, \"GET\") also assume method is a valid NUL\u2011terminated string\u2014these are acceptable only if that is guaranteed by the calling context/library.) If, however, elsewhere in the program the handler_param type and its usage are specified such that response_page is always a NUL\u2011terminated string (documented invariant and enforced on all paths), then the use would be compliant. Based solely on the provided code and scenario, the report that this code can violate Rule 21.17 is correct."
}