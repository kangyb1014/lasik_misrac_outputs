{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe helper digest_update_str calls strlen(str) unconditionally. If a caller passes password == NULL (or a pointer to a non\u2011NUL\u2011terminated buffer), strlen will dereference/read beyond the object bounds. For example, calling MHD_digest_auth_calc_userdigest(..., password = NULL, ...) leads to digest_update_str -> strlen(NULL) (undefined behavior / out\u2011of\u2011bounds access).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  FILE *log = fopen(\"/tmp/logs/567.txt\", \"a\");\n\n  if (log)\n    {\n      fprintf(log, \"ENTRY: MHD_digest_auth_calc_userdigest\\n\");\n      fprintf(log, \"  algo3=%d\\n\", (int) algo3);\n      fprintf(log, \"  username=%p (is_null=%d)\\n\", (void *) username, (username == NULL));\n      fprintf(log, \"  realm=%p (is_null=%d)\\n\", (void *) realm, (realm == NULL));\n      fprintf(log, \"  password=%p (is_null=%d)\\n\", (void *) password, (password == NULL));\n      fprintf(log, \"  userdigest_bin=%p\\n\", userdigest_bin);\n      fprintf(log, \"  bin_buf_size=%zu\\n\", bin_buf_size);\n      fflush(log);\n    }\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    {\n      if (log)\n        {\n          fprintf(log, \"  digest_init_one_time: FAILED -> returning MHD_NO\\n\");\n          fclose(log);\n        }\n      return MHD_NO;\n    }\n\n  /* Record digest algorithm size and decision point. */\n  {\n    size_t needed = digest_get_size (&da);\n    if (log)\n      {\n        fprintf(log, \"  digest_get_size() = %zu\\n\", needed);\n        fprintf(log, \"  comparing needed > bin_buf_size -> %d\\n\", (needed > bin_buf_size));\n        fflush(log);\n      }\n\n    if (needed > bin_buf_size)\n      ret = MHD_NO;\n    else\n      {\n        /* Log that we are about to call calc_userdigest. Do not call strlen here on possibly NULL pointers\n           to avoid introducing additional dereferences beyond the original behavior. The original code\n           will still call strlen(username) and strlen(realm) below as before. */\n        if (log)\n          {\n            fprintf(log, \"  about to call calc_userdigest with: username=%p, realm=%p, password=%p\\n\",\n                    (void *) username, (void *) realm, (void *) password);\n            fprintf(log, \"  Note: not computing lengths here to avoid extra dereference in logging.\\n\");\n            fflush(log);\n          }\n\n        calc_userdigest (&da,\n                         username,\n                         strlen (username),\n                         realm,\n                         strlen (realm),\n                         password,\n                         userdigest_bin);\n        ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n        if (digest_ext_error (&da))\n          ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n        if (log)\n          {\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n            fprintf(log, \"  after calc_userdigest: ret=%d (MHD_YES= %d, MHD_NO= %d), ext_error=%d\\n\",\n                    (int) ret, (int) MHD_YES, (int) MHD_NO, (int) digest_ext_error(&da));\n#else\n            fprintf(log, \"  after calc_userdigest: ret=%d (MHD_YES= %d, MHD_NO= %d)\\n\",\n                    (int) ret, (int) MHD_YES, (int) MHD_NO);\n#endif\n            fflush(log);\n          }\n      }\n  }\n\n  digest_deinit (&da);\n\n  if (log)\n    {\n      fprintf(log, \"EXIT: MHD_digest_auth_calc_userdigest -> returning %d\\n\", (int) ret);\n      fprintf(log, \"------------------------------------------------------------\\n\");\n      fclose(log);\n    }\n\n  return ret;\n}\n"
}