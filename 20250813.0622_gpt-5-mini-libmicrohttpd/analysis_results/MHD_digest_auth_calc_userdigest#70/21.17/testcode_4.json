{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(str) in digest_update_str (invoked from calc_userdigest -> MHD_digest_auth_calc_userdigest) can read past the end of the object if the caller supplies a non\u2011null\u2011terminated buffer. There is no validation in MHD_digest_auth_calc_userdigest/calc_userdigest that the username/realm/password are NUL-terminated or limited in length, so a caller that passes a char[] filled without a terminating '\\0' (or a pointer not pointing to a valid NUL-terminated C string) will cause strlen to access beyond the object bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append logs about control flow/state to /tmp/logs/567.txt.\n   Does not dereference the string pointers (prints addresses only) to avoid\n   introducing additional unsafe string accesses. */\nstatic void mhd_digest_probe_log(const char *stage,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  FILE *f = fopen(\"/tmp/logs/567.txt\", \"a\");\n  if (!f)\n    return;\n\n  /* Log stage and key pointer/size information. Avoid printing the\n     pointed-to data (no %s) to not cause additional out-of-bounds reads. */\n  fprintf(f, \"[MHD_DIGEST_PROBE] stage=%s\\n\", stage);\n  fprintf(f, \"  username_ptr=%p\\n\", (void *) username);\n  fprintf(f, \"  realm_ptr=%p\\n\", (void *) realm);\n  fprintf(f, \"  password_ptr=%p\\n\", (void *) password);\n  fprintf(f, \"  userdigest_bin_ptr=%p\\n\", userdigest_bin);\n  fprintf(f, \"  bin_buf_size=%zu\\n\", bin_buf_size);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Log entry with pointer/size state. */\n  mhd_digest_probe_log(\"entry\", username, realm, password,\n                       userdigest_bin, bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    mhd_digest_probe_log(\"digest_init_one_time_failed\", username, realm,\n                         password, userdigest_bin, bin_buf_size);\n    return MHD_NO;\n  }\n\n  if (digest_get_size (&da) > bin_buf_size)\n  {\n    mhd_digest_probe_log(\"bin_buffer_too_small\", username, realm, password,\n                         userdigest_bin, bin_buf_size);\n    ret = MHD_NO;\n  }\n  else\n  {\n    /* Log just before calling strlen to mark the potentially unsafe access.\n       We intentionally do not modify the original calls to strlen: the goal\n       is to record evidence when they are invoked (including pointer values)\n       so callers that pass non-terminated buffers can be reproduced. */\n    mhd_digest_probe_log(\"before_strlen\", username, realm, password,\n                         userdigest_bin, bin_buf_size);\n\n    /* Preserve original behavior: call strlen exactly as before (may read\n       past bounds if caller supplied a non-terminated buffer). Capture the\n       returned lengths immediately and log them. */\n    size_t username_len = strlen (username);\n    size_t realm_len = strlen (realm);\n\n    {\n      FILE *f = fopen(\"/tmp/logs/567.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"[MHD_DIGEST_PROBE] strlen_results username_len=%zu realm_len=%zu\\n\",\n                username_len, realm_len);\n        fclose(f);\n      }\n    }\n\n    calc_userdigest (&da,\n                     username,\n                     username_len,\n                     realm,\n                     realm_len,\n                     password,\n                     userdigest_bin);\n\n    mhd_digest_probe_log(\"after_calc_userdigest\", username, realm, password,\n                         userdigest_bin, bin_buf_size);\n\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n    {\n      mhd_digest_probe_log(\"digest_ext_error_set\", username, realm, password,\n                           userdigest_bin, bin_buf_size);\n      ret = MHD_NO;\n    }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  mhd_digest_probe_log(\"exit\", username, realm, password,\n                       userdigest_bin, bin_buf_size);\n\n  return ret;\n}\n"
}