{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro digest_deinit(da) is defined as (void)0. Calls such as digest_deinit(&da); in MHD_digest_auth_calc_userdigest expand to a no-op (a null statement) that has no side effects; removing these calls would not change program behaviour in the current build configuration. This constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/562.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helpers: write structured logs to /tmp/logs/562.txt */\nstatic void mhd_logf (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/562.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\n/* Compute a simple checksum over the bytes of the DigestAlgorithm structure\n   to detect whether digest_deinit actually mutated the object. */\nstatic unsigned long mhd_checksum_da (const struct DigestAlgorithm *da)\n{\n  const unsigned char *p = (const unsigned char *) da;\n  size_t i;\n  unsigned long sum = 0UL;\n  for (i = 0U; i < sizeof (*da); ++i)\n    sum += (unsigned long) p[i];\n  return sum;\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  mhd_logf (\"MHD_digest_auth_calc_userdigest: entry algo3=%d username=%s realm=%s password_ptr=%p bin_buf_size=%zu\",\n            (int) algo3,\n            (username != NULL) ? username : \"(null)\",\n            (realm != NULL) ? realm : \"(null)\",\n            (void *) password,\n            bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    mhd_logf (\"MHD_digest_auth_calc_userdigest: digest_init_one_time() returned false - returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  /* Record a checksum of the digest algorithm state after initialization. */\n  {\n    unsigned long cs_after_init = mhd_checksum_da (&da);\n    mhd_logf (\"MHD_digest_auth_calc_userdigest: checksum after init = %lu\", cs_after_init);\n  }\n\n  if (digest_get_size (&da) > bin_buf_size)\n  {\n    mhd_logf (\"MHD_digest_auth_calc_userdigest: digest_get_size() > bin_buf_size (%zu) -> MHD_NO\", bin_buf_size);\n    ret = MHD_NO;\n  }\n  else\n  {\n    mhd_logf (\"MHD_digest_auth_calc_userdigest: calling calc_userdigest()\");\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n    {\n      mhd_logf (\"MHD_digest_auth_calc_userdigest: digest_ext_error() returned true -> setting ret = MHD_NO\");\n      ret = MHD_NO;\n    }\n    else\n    {\n      mhd_logf (\"MHD_digest_auth_calc_userdigest: digest_ext_error() returned false\");\n    }\n#else\n    mhd_logf (\"MHD_digest_auth_calc_userdigest: MHD_DIGEST_HAS_EXT_ERROR not defined\");\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n\n  /* Take a checksum snapshot immediately before and after calling digest_deinit\n     to capture whether digest_deinit actually modified the DigestAlgorithm\n     structure. If digest_deinit is defined as (void)0 (a no-op macro), the\n     checksums will be equal which demonstrates the dead-code scenario. */\n  {\n    unsigned long cs_before_deinit = mhd_checksum_da (&da);\n    mhd_logf (\"MHD_digest_auth_calc_userdigest: checksum before digest_deinit = %lu\", cs_before_deinit);\n\n    /* Call the (possibly no-op) deinit. Keep this call to preserve original logic. */\n    digest_deinit (&da);\n    mhd_logf (\"MHD_digest_auth_calc_userdigest: called digest_deinit(&da)\");\n\n    unsigned long cs_after_deinit = mhd_checksum_da (&da);\n    mhd_logf (\"MHD_digest_auth_calc_userdigest: checksum after digest_deinit = %lu\", cs_after_deinit);\n\n    if (cs_before_deinit == cs_after_deinit)\n      mhd_logf (\"MHD_digest_auth_calc_userdigest: NOTE - checksum unchanged by digest_deinit -> likely a no-op (dead code)\");\n    else\n      mhd_logf (\"MHD_digest_auth_calc_userdigest: checksum changed by digest_deinit -> digest_deinit performed work\");\n  }\n\n  mhd_logf (\"MHD_digest_auth_calc_userdigest: return %d\", (int) ret);\n  return ret;\n}\n"
}