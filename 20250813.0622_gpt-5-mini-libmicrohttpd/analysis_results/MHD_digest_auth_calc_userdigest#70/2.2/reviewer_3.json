{
  "user_message": "An agent A claimed that the following MHD_digest_auth_calc_userdigest code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_calc_userdigest.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If MHD_DIGEST_HAS_EXT_ERROR is defined but digest_ext_error(\u2026) is a macro that always expands to (false) (as shown in the provided definitions), the conditional body (ret = MHD_NO;) can never be executed. That operation is effectively redundant: removing the if-body would not change program behaviour, so this constitutes dead code in that build configuration.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/562.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) == NULL)\n    {\n        fclose(f);\n        return;\n    }\n\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        fclose(f);\n        return;\n    }\n\n    pid_t pid = getpid();\n\n    fprintf(f, \"%s pid=%d: \", timestr, (int)pid);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  mhd_probe_log(\"enter: algo3=%d, username=%s, realm=%s, bin_buf_size=%zu\",\n                (int)algo3, username ? username : \"(null)\", realm ? realm : \"(null)\", bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    mhd_probe_log(\"digest_init_one_time failed -> return MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (digest_get_size (&da) > bin_buf_size)\n  {\n    ret = MHD_NO;\n    mhd_probe_log(\"buffer too small: digest_get_size=%zu, bin_buf_size=%zu -> ret=MHD_NO\",\n                  (size_t)digest_get_size(&da), bin_buf_size);\n  }\n  else\n  {\n    mhd_probe_log(\"calling calc_userdigest: username_len=%zu, realm_len=%zu\",\n                  username ? strlen(username) : 0,\n                  realm ? strlen(realm) : 0);\n\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n    mhd_probe_log(\"calc_userdigest done -> provisional ret=MHD_YES\");\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    /* Probe the extension error predicate and log its value. This preserves the\n       original logic but records the runtime-evaluated value so that the\n       presence of a permanently-false macro can be observed. */\n    int ext_err_val = digest_ext_error (&da);\n    mhd_probe_log(\"digest_ext_error(&da) -> %d\", ext_err_val);\n    if (ext_err_val)\n      ret = MHD_NO;\n    mhd_probe_log(\"after ext error check -> ret=%d\", (int)ret);\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  mhd_probe_log(\"exit: returning ret=%d\", (int)ret);\n\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_digest_auth_calc_userdigest. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 2.2 forbids dead code, which the rule defines as operations that are executed but whose removal would not affect program behaviour. Note 2 explicitly states that unreachable code is not dead code because it cannot be executed. In the scenario described, if digest_ext_error(...) is a macro that expands to a constant false, the if-body becomes unreachable in that build configuration (it will never execute). That makes it unreachable code, not dead code under the wording of Rule 2.2. Furthermore, MISRA analysis is project-/configuration-wide: code that is unreachable in one configuration may be reachable in another if the macro definitions change, so it generally cannot be classified as dead across the whole project unless it is provably redundant in every configuration. For these reasons the claim that this function violates Rule 2.2 is incorrect."
}