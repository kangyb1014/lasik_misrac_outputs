{
  "user_message": "An agent A claimed that the following MHD_digest_auth_calc_userdigest code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_calc_userdigest.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function declaration uses the _MHD_EXTERN macro which expands to __attribute__((visibility(\"default\"))) extern \u2014 the use of GCC/Clang __attribute__ is a compiler language extension (visibility attribute) and thus violates MISRA C 2023 Rule 1.2. This occurs at the MHD_digest_auth_calc_userdigest declaration.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_append(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f;\n  struct stat st;\n\n  /* Ensure directory exists; ignore errors if it cannot be created. */\n  if (stat(\"/tmp/logs\", &st) != 0)\n  {\n    /* attempt to create directory; permissions 0777 to ensure writability in test env */\n    mkdir(\"/tmp/logs\", 0777);\n  }\n\n  f = fopen(\"/tmp/logs/560.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  {\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n  }\n\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\nstatic void probe_log_hexdump(const void *buf, size_t n)\n{\n  const unsigned char *b = (const unsigned char *) buf;\n  size_t i;\n  char tmp[256];\n  size_t pos = 0;\n\n  if (buf == NULL || n == 0)\n  {\n    probe_log_append(\"hexdump: <null> or zero length\");\n    return;\n  }\n\n  /* Limit printed bytes to avoid huge logs. */\n  if (n > 64)\n    n = 64;\n\n  for (i = 0; i < n && pos + 3 < sizeof(tmp); ++i)\n  {\n    int written = snprintf(tmp + pos, sizeof(tmp) - pos, \"%02x\", b[i]);\n    if (written < 0)\n      break;\n    pos += (size_t) written;\n  }\n  tmp[pos] = '\\0';\n  probe_log_append(\"hexdump(%zu bytes): %s\", n, tmp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Log entry and key parameters (avoid logging password contents for safety). */\n  probe_log_append(\"ENTER: MHD_digest_auth_calc_userdigest: algo3=%d, username=%s, realm=%s, password_ptr=%p, userdigest_bin=%p, bin_buf_size=%zu\",\n                   (int) algo3,\n                   (username != NULL) ? username : \"<null>\",\n                   (realm != NULL) ? realm : \"<null>\",\n                   (void *) password,\n                   userdigest_bin,\n                   bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    probe_log_append(\"digest_init_one_time FAILED for algo3=%d\", (int) algo3);\n    return MHD_NO;\n  }\n\n  {\n    size_t needed = digest_get_size(&da);\n    probe_log_append(\"digest_get_size() returned %zu, bin_buf_size=%zu\", needed, bin_buf_size);\n\n    if (needed > bin_buf_size)\n    {\n      ret = MHD_NO;\n      probe_log_append(\"BUFFER_TOO_SMALL: needed=%zu > bin_buf_size=%zu\", needed, bin_buf_size);\n    }\n    else\n    {\n      probe_log_append(\"Calling calc_userdigest with username_len=%zu realm_len=%zu\",\n                       (username != NULL) ? strlen(username) : 0,\n                       (realm != NULL) ? strlen(realm) : 0);\n\n      calc_userdigest (&da,\n                       username,\n                       username ? strlen (username) : 0,\n                       realm,\n                       realm ? strlen (realm) : 0,\n                       password,\n                       userdigest_bin);\n\n      probe_log_append(\"calc_userdigest returned; dumping first bytes of result (if any)\");\n      probe_log_hexdump(userdigest_bin, needed);\n\n      ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n      if (digest_ext_error (&da))\n      {\n        probe_log_append(\"digest_ext_error detected -> setting ret = MHD_NO\");\n        ret = MHD_NO;\n      }\n      else\n      {\n        probe_log_append(\"no digest_ext_error detected\");\n      }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    }\n  }\n\n  digest_deinit (&da);\n\n  probe_log_append(\"EXIT: MHD_digest_auth_calc_userdigest returning %d\", (int) ret);\n\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_digest_auth_calc_userdigest. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The declaration uses the _MHD_EXTERN macro which (as stated) expands to the compiler-specific attribute syntax __attribute__((visibility(\"default\"))) extern. The GCC/Clang __attribute__ form is a documented compiler language extension, so its use in the function declaration violates MISRA C 2023 Rule 1.2 (language extensions should not be used). Note: if the macro is conditionally defined to an empty token on strictly conforming compilers and the use is formally justified and documented as a deviation, that is a project/process issue \u2014 but as-written the source employs a compiler extension and thus the report is valid."
}