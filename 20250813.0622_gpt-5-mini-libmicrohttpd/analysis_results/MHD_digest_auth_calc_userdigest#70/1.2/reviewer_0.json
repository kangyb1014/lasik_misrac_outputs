{
  "user_message": "An agent A claimed that the following MHD_digest_auth_calc_userdigest code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_calc_userdigest.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro _MHD_EXTERN expands to the GCC/Clang attribute syntax __attribute__((visibility(\"default\"))) which is a compiler-specific language extension (non\u2011standard attribute syntax). Using this attribute unconditionally constitutes use of a compiler extension and therefore violates MISRA C 2023 Rule 1.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/560.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Log entry and parameters. Also explicitly note the presence of the\n     _MHD_EXTERN token in the function declaration (source-level evidence). */\n  probe_log(\"ENTER: MHD_digest_auth_calc_userdigest (declared with _MHD_EXTERN)\");\n  probe_log(\"PARAMS: algo3=%d, username=%p, realm=%p, password=%p, userdigest_bin=%p, bin_buf_size=%zu\",\n            (int)algo3, (void *)username, (void *)realm, (void *)password, userdigest_bin, bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    probe_log(\"digest_init_one_time: FAILED\");\n    return MHD_NO;\n  }\n\n  probe_log(\"digest_init_one_time: SUCCEEDED\");\n\n  /* Capture the size requirement and the provided buffer size. */\n  {\n    size_t needed = digest_get_size(&da);\n    probe_log(\"digest_get_size -> %zu, bin_buf_size -> %zu\", needed, bin_buf_size);\n\n    if (needed > bin_buf_size)\n      ret = MHD_NO;\n    else\n    {\n      /* Log lengths used for the call. Use safe checks for logging only, but\n         preserve the original strlen calls in the actual calc_userdigest call\n         to keep original behavior intact. */\n      probe_log(\"About to call calc_userdigest: username_len=%zu, realm_len=%zu\",\n                username ? strlen(username) : 0,\n                realm ? strlen(realm) : 0);\n\n      calc_userdigest (&da,\n                       username,\n                       strlen (username),\n                       realm,\n                       strlen (realm),\n                       password,\n                       userdigest_bin);\n\n      probe_log(\"calc_userdigest: completed; provisional ret = MHD_YES\");\n      ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n      if (digest_ext_error (&da))\n      {\n        probe_log(\"digest_ext_error: detected -> overriding ret to MHD_NO\");\n        ret = MHD_NO;\n      }\n      else\n      {\n        probe_log(\"digest_ext_error: not detected\");\n      }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    }\n  }\n\n  digest_deinit (&da);\n\n  probe_log(\"EXIT: MHD_digest_auth_calc_userdigest returning %d\", (int)ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_digest_auth_calc_userdigest. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent\u2019s claim cannot be confirmed from the provided material. MISRA C 2023 Rule 1.2 disallows use of compiler language extensions that are documented as extensions (e.g. GCC\u2019s __attribute__ syntax). The snippet shows the token _MHD_EXTERN but does not include its macro definition or where it is defined. Without seeing that definition, we cannot determine whether the source actually contains a non\u2011standard extension. The added test code and empty log do not demonstrate that _MHD_EXTERN expands to __attribute__((visibility(\"default\"))): they only show use of the macro, not its expansion.\n\nWhat to do to determine correctness:\n- Inspect the header(s) that define _MHD_EXTERN. If it expands (unconditionally) to a compiler\u2011specific attribute such as __attribute__((...)) or other non\u2011standard syntax, then the report is correct (the code uses a compiler extension and should be reported under Rule 1.2).\n- If _MHD_EXTERN expands to a standard token (for example simply extern) or expands to the attribute only under conditional compilation that is clearly documented/guarded, you must still consider MISRA policy: unconditional use of a documented compiler extension is a violation; conditional use may still be considered use of an extension when built with that compiler and needs an approved deviation if required. If the macro expands to nothing for standard compilers and only uses the attribute when compiling with a specific compiler, document and justify it per your project MISRA deviation process.\n\nConclusion: based on the evidence provided, the agent A\u2019s report is not demonstrably correct because the macro definition is not shown. To confirm the report, show the definition of _MHD_EXTERN; if it indeed unconditionally expands to GCC/Clang __attribute__ syntax, then the report would be correct."
}