{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) transfer_encoding;' is an executed no-op whose removal would not change program behaviour (it only suppresses an \"unused parameter\" warning). Because it is an operation that has no effect at runtime, it constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. (Use a proper unused-parameter annotation or actually use the parameter to avoid the dead no-op.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_iterator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/386.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of post_iterator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of post_iterator:\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified post_iterator code.\n",
  "test_code": "static void\npost_iterator_log (const char *event,\n                   const struct Session *session,\n                   const char *key,\n                   uint64_t off,\n                   size_t size,\n                   const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/386.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf (f,\n           \"%s: key='%s' off=%llu size=%zu sid='%s' extra='%s'\\n\",\n           event,\n           (key != NULL) ? key : \"(null)\",\n           (unsigned long long) off,\n           size,\n           (session != NULL && session->sid != NULL) ? session->sid : \"(null)\",\n           (extra != NULL) ? extra : \"(null)\");\n  fclose (f);\n}\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n\n  post_iterator_log (\"entry\", session, key, off, size, \"function entered\");\n\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  /* Log that the explicit no-op casts were executed. This documents the\n     presence of the executed no-op (void) transfer_encoding; without\n     changing semantics (we do not dereference the parameter). */\n  post_iterator_log (\"noop-executed\", session, key, off, size, \"(void) casts executed\");\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    post_iterator_log (\"branch\", session, key, off, size, \"DONE branch\");\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    post_iterator_log (\"branch\", session, key, off, size, \"v1 branch enter\");\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      post_iterator_log (\"branch\", session, key, off, size, \"v1 discard extra data\");\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    post_iterator_log (\"action\", session, key, off, size, \"v1 data written\");\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    post_iterator_log (\"branch\", session, key, off, size, \"v2 branch enter\");\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      post_iterator_log (\"branch\", session, key, off, size, \"v2 discard extra data\");\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    post_iterator_log (\"action\", session, key, off, size, \"v2 data written\");\n    return MHD_YES;\n  }\n  post_iterator_log (\"unsupported\", session, key, off, size, \"unsupported form value\");\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}"
}