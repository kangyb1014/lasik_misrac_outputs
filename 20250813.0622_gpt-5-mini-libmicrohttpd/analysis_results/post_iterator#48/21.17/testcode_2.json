{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrcmp(\"DONE\", key) reads bytes from 'key' until a NUL terminator. Because there is no check that 'key' is non-NULL and NUL-terminated within its object bounds, the call can read beyond the bounds (e.g. if key == NULL or key points to a non-NUL-terminated buffer such as a 3-byte array {'D','O','N'}), which would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_iterator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/391.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of post_iterator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of post_iterator:\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified post_iterator code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Probe logging helper: append control-flow and pointer/state information to /tmp/logs/391.txt */\nstatic void\nprobe_log (const char *label,\n           const char *key,\n           void *request_ptr,\n           void *session_ptr,\n           const char *data_ptr,\n           uint64_t off,\n           size_t size)\n{\n  FILE *f = fopen(\"/tmp/logs/391.txt\", \"a\");\n  if (f == NULL)\n    return;\n  /* Do NOT dereference 'key' here (do not use %s) to avoid introducing new undefined behavior.\n     Print pointer values and numeric state instead. */\n  fprintf (f,\n           \"[probe] %s: key_ptr=%p, request_ptr=%p, session_ptr=%p, data_ptr=%p, off=%\" PRIu64 \", size=%zu\\n\",\n           label,\n           (const void *) key,\n           request_ptr,\n           session_ptr,\n           (const void *) data_ptr,\n           off,\n           size);\n  fclose (f);\n}\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  /* Log entry into the function and the initial pointer/state values. */\n  probe_log(\"enter_post_iterator\", key, request, session, data, off, size);\n\n  /* Before calling strcmp we log the pointer and state so other agents can\n     reproduce whether key was NULL or otherwise suspicious without performing\n     additional dereferences here. */\n  probe_log(\"before_check_DONE\", key, request, session, data, off, size);\n  if (0 == strcmp (\"DONE\", key))\n  {\n    /* Log that the DONE branch was taken; print session pointers rather than strings\n       to avoid additional dereferences that could introduce new undefined behavior. */\n    probe_log(\"branch_DONE\", key, request, session, data, off, size);\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n\n  probe_log(\"before_check_v1\", key, request, session, data, off, size);\n  if (0 == strcmp (\"v1\", key))\n  {\n    probe_log(\"enter_v1\", key, request, session, data, off, size);\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    probe_log(\"before_memcpy_v1\", key, request, session, data, off, size);\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    probe_log(\"after_v1\", key, request, session, data, off, size);\n    return MHD_YES;\n  }\n\n  probe_log(\"before_check_v2\", key, request, session, data, off, size);\n  if (0 == strcmp (\"v2\", key))\n  {\n    probe_log(\"enter_v2\", key, request, session, data, off, size);\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    probe_log(\"before_memcpy_v2\", key, request, session, data, off, size);\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    probe_log(\"after_v2\", key, request, session, data, off, size);\n    return MHD_YES;\n  }\n\n  /* Log that an unsupported key was encountered. Do NOT print 'key' as a string here\n     (that would dereference it). The original code prints it with %%s; that remains\n     unchanged below to preserve original behavior and reproduce the scenario. */\n  probe_log(\"unsupported_key\", key, request, session, data, off, size);\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n"
}