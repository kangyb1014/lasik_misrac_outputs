{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'size' (size_t size) is assigned to (size = (size_t)(...)), so the parameter is modified inside the function. This violates MISRA C 2023 Rule 17.8. Fix: copy 'size' to a local variable (e.g. size_t to_copy = size;) and adjust that instead of modifying the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_iterator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/389.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of post_iterator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of post_iterator:\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified post_iterator code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <stdint.h>\n\nstatic void\nprobe_log (const char *event, const char *key, uint64_t off, size_t size, const void *data_ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/389.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log the event, key, offset, size and data pointer to help reproduce the scenario. */\n    fprintf (f, \"EVENT=%s KEY=%s OFF=%\" PRIu64 \" SIZE=%zu DATA_PTR=%p\\n\",\n             event,\n             (key != NULL) ? key : \"(null)\",\n             off,\n             size,\n             data_ptr);\n    fclose (f);\n  }\n}\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  /* Log entry to this function with initial parameter values. */\n  probe_log (\"entry\", key, off, size, data);\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    probe_log (\"done_path\", key, off, size, data);\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    probe_log (\"v1_path_enter\", key, off, size, data);\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      probe_log (\"v1_discard_extra\", key, off, size, data);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n    {\n      /* Log the fact that the parameter 'size' is about to be modified (evidence of violation). */\n      probe_log (\"v1_about_to_crop_size\", key, off, size, data);\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n      probe_log (\"v1_cropped_size\", key, off, size, data);\n    }\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    probe_log (\"v1_path_exit\", key, off, size, data);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    probe_log (\"v2_path_enter\", key, off, size, data);\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      probe_log (\"v2_discard_extra\", key, off, size, data);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n    {\n      /* Log the fact that the parameter 'size' is about to be modified (evidence of violation). */\n      probe_log (\"v2_about_to_crop_size\", key, off, size, data);\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n      probe_log (\"v2_cropped_size\", key, off, size, data);\n    }\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    probe_log (\"v2_path_exit\", key, off, size, data);\n    return MHD_YES;\n  }\n  probe_log (\"unsupported_key\", key, off, size, data);\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n"
}