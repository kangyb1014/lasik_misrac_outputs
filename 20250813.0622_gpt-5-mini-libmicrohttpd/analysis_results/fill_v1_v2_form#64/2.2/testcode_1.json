{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) cls;' is an executed no-op expression used only to silence an \"unused parameter\" warning. Removing this statement would not change the program behaviour, so it constitutes dead code under Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_v2_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/514.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_v2_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_v2_form:\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_v2_form code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/514.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/514.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n\n  /* Log entry and parameter state (we intentionally do NOT reference 'cls' here\n     so that the original '(void) cls;' statement remains the only use of that\n     parameter, reproducing the \"unused parameter\" scenario). */\n  probe_log(\"ENTER: fill_v1_v2_form mime='%s' session=%p connection=%p\",\n            (mime != NULL) ? mime : \"(null)\",\n            (void *) session,\n            (void *) connection);\n\n  (void) cls; /* Unused. Silent compiler warning. */\n  /* Record that the no-op expression was executed. This shows the control\n     reached the statement but that it does not affect program state. */\n  probe_log(\"NOP: executed '(void) cls;' statement\");\n\n  /* Compute required reply length and log intermediate state */\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  probe_log(\"STATE: computed slen=%zu value_1='%s' value_2='%s'\",\n            slen,\n            session->value_1 ? session->value_1 : \"(null)\",\n            session->value_2 ? session->value_2 : \"(null)\");\n\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n  {\n    probe_log(\"ERROR: malloc failed for size=%zu\", slen + 1);\n    return MHD_NO;\n  }\n  probe_log(\"ALLOC: reply=%p size=%zu\", (void *) reply, slen + 1);\n\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  probe_log(\"SNPRINTF: filled reply (first 128 chars): '%.128s'\", reply);\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    probe_log(\"ERROR: MHD_create_response_from_buffer_with_free_callback returned NULL\");\n    free (reply);\n    return MHD_NO;\n  }\n  probe_log(\"RESPONSE: created response=%p\", (void *) response);\n\n  add_session_cookie (session, response);\n  probe_log(\"ACTION: add_session_cookie called\");\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    probe_log(\"WARN: failed to set content encoding header mime='%s'\",\n              (mime != NULL) ? mime : \"(null)\");\n  }\n  else\n  {\n    probe_log(\"ACTION: content-encoding header set to '%s'\", (mime != NULL) ? mime : \"(null)\");\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  probe_log(\"ACTION: MHD_queue_response returned %d\", (int) ret);\n\n  MHD_destroy_response (response);\n  probe_log(\"EXIT: destroyed response and returning %d\", (int) ret);\n\n  return ret;\n}\n"
}