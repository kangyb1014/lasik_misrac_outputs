{
  "user_message": "An agent A claimed that the following fill_v1_v2_form code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of fill_v1_v2_form.\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The scalar parameter 'status_code' is modified in-place by the statement 'status_code &= ~MHD_ICY_FLAG;'. This alters a function parameter (unsigned int status_code) and thus violates MISRA C 2023 Rule 17.8. (Fix: copy the parameter to a local variable and modify the local copy instead.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_state(const char *event,\n                                const char *mime,\n                                const char *value_1,\n                                const char *value_2,\n                                size_t slen,\n                                const char *reply,\n                                struct MHD_Response *response,\n                                int ret_code)\n{\n  FILE *f = fopen(\"/tmp/logs/517.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  fprintf(f, \"EVENT=%s\\n\", event);\n  if (mime != NULL)\n  {\n    fprintf(f, \"  mime=%s\\n\", mime);\n  }\n  if (value_1 != NULL)\n  {\n    fprintf(f, \"  value_1=%s\\n\", value_1);\n  }\n  if (value_2 != NULL)\n  {\n    fprintf(f, \"  value_2=%s\\n\", value_2);\n  }\n  fprintf(f, \"  slen=%zu\\n\", slen);\n  fprintf(f, \"  reply_ptr=%p\\n\", (const void *) reply);\n  if (reply != NULL)\n  {\n    /* Print a limited amount to avoid huge logs */\n    fprintf(f, \"  reply_preview=\\\"\");\n    {\n      size_t i;\n      for (i = 0U; i < slen && i < 256U; ++i)\n      {\n        int c = (int) reply[i];\n        if (c == '\\0')\n        {\n          break;\n        }\n        fputc(c, f);\n      }\n      if (slen > 256U)\n      {\n        fprintf(f, \"...truncated\");\n      }\n    }\n    fprintf(f, \"\\\"\\n\");\n  }\n  fprintf(f, \"  response_ptr=%p\\n\", (void *) response);\n  fprintf(f, \"  ret_code=%d\\n\", ret_code);\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  /* Log entry with initial state */\n  probe_log_state(\"entry\", mime, session ? session->value_1 : NULL,\n                  session ? session->value_2 : NULL, 0U, NULL, NULL, -1);\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n  {\n    probe_log_state(\"malloc_failed\", mime, session->value_1, session->value_2,\n                    slen, NULL, NULL, (int) MHD_NO);\n    return MHD_NO;\n  }\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n\n  /* Log after reply constructed */\n  probe_log_state(\"reply_built\", mime, session->value_1, session->value_2,\n                  slen, reply, NULL, -1);\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    /* If response creation failed, reply must be freed by us */\n    probe_log_state(\"response_create_failed\", mime, session->value_1,\n                    session->value_2, slen, reply, NULL, (int) MHD_NO);\n    free (reply);\n    return MHD_NO;\n  }\n\n  probe_log_state(\"response_created\", mime, session->value_1, session->value_2,\n                  slen, reply, response, -1);\n\n  add_session_cookie (session, response);\n\n  probe_log_state(\"after_add_session_cookie\", mime, session->value_1,\n                  session->value_2, slen, reply, response, -1);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    probe_log_state(\"add_header_failed\", mime, session->value_1,\n                    session->value_2, slen, reply, response, -1);\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n\n  probe_log_state(\"after_queue_response\", mime, session->value_1,\n                  session->value_2, slen, reply, response, (int) ret);\n\n  MHD_destroy_response (response);\n\n  probe_log_state(\"before_return\", mime, session->value_1, session->value_2,\n                  slen, reply, response, (int) ret);\n\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for fill_v1_v2_form. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 17.8 forbids modifying function parameter variables themselves (you may modify the object pointed to by a pointer parameter, but not reassign the pointer parameter). In the provided fill_v1_v2_form function no parameter variable is assigned to or otherwise modified. (cls is cast to void to silence an unused warning, and session is used to access session->value_1/value_2 \u2014 modifying the pointee would be allowed, but no such assignment occurs here.) The scenario offered by agent A refers to a different parameter named status_code and a statement 'status_code &= ~MHD_ICY_FLAG;', which does not appear in this function \u2014 so the violation is misattributed. Therefore the report is incorrect."
}