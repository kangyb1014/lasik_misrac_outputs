{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function add_session_cookie takes 'struct Session *session' but only reads from it (uses session->sid) and does not modify the Session object. According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible \u2013 the parameter should be 'const struct Session *session'. The 'response' parameter must remain non-const because MHD_add_response_header mutates the response.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_v2_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_v2_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_v2_form:\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_v2_form code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/515.txt */\nstatic void\nlog_simple(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n  }\n}\n\nstatic void\nlog_session_state(const struct Session *session, const char *phase)\n{\n  FILE *f = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"[fill_v1_v2_form] %s: session=%p\\n\", phase, (const void *) session);\n  if (session == NULL)\n  {\n    fprintf(f, \"  session is NULL\\n\");\n    fclose(f);\n    return;\n  }\n  /* session->value_1 and session->value_2 are used by the function; log them */\n  if (session->value_1)\n    fprintf(f, \"  session->value_1='%s'\\n\", session->value_1);\n  else\n    fprintf(f, \"  session->value_1=NULL\\n\");\n\n  if (session->value_2)\n    fprintf(f, \"  session->value_2='%s'\\n\", session->value_2);\n  else\n    fprintf(f, \"  session->value_2=NULL\\n\");\n\n  /* If a session identifier field exists, attempt to log it safely. */\n  /* The original code referenced session->sid in the violation description; log if present. */\n  /* We access it only if it's present in the struct layout at runtime; since we cannot probe that safely\n     in portable C without knowing the struct, we avoid dereferencing unknown members here. */\n\n  fclose(f);\n}\n\nstatic void\nlog_buffer(const char *label, const char *buf, size_t len)\n{\n  FILE *f = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"[fill_v1_v2_form] %s: buf=%p len=%zu\\n\", label, (const void *) buf, len);\n  if (buf)\n  {\n    /* write the buffer content but keep it bounded to avoid huge logs */\n    size_t print_len = (len < 1024) ? len : 1024;\n    fprintf(f, \"  content (first %zu bytes): '%.*s'\\n\", print_len, (int) print_len, buf);\n    if (len > print_len)\n      fprintf(f, \"  ... (truncated) ...\\n\");\n  }\n  fclose(f);\n}\n\n/* Modified function with inserted probes. Original logic is preserved. */\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  /* Log entry and initial session state. This demonstrates that the function\n     only reads from the session structure (value_1, value_2) and does not\n     modify it. This helps reproduce evidence for the Rule 8.13 scenario. */\n  log_simple(\"[fill_v1_v2_form] entry\");\n  log_session_state(session, \"before_length_calc\");\n  if (connection)\n  {\n    FILE *f = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"[fill_v1_v2_form] connection=%p mime=%s\\n\", (void *) connection, mime ? mime : \"(null)\");\n      fclose(f);\n    }\n  }\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n\n  /* Log computed length */\n  {\n    FILE *f = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"[fill_v1_v2_form] computed slen=%zu\\n\", slen);\n      fclose(f);\n    }\n  }\n\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n  {\n    log_simple(\"[fill_v1_v2_form] malloc failed\");\n    return MHD_NO;\n  }\n\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n\n  /* Log the generated reply buffer */\n  log_buffer(\"reply_after_snprintf\", reply, slen + 1);\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    log_simple(\"[fill_v1_v2_form] MHD_create_response_from_buffer_with_free_callback failed\");\n    free (reply);\n    return MHD_NO;\n  }\n\n  /* Log before calling add_session_cookie: prove we only read from session */\n  log_session_state(session, \"before_add_session_cookie\");\n  log_simple(\"[fill_v1_v2_form] calling add_session_cookie(session, response)\");\n\n  add_session_cookie (session, response);\n\n  log_simple(\"[fill_v1_v2_form] returned from add_session_cookie\");\n  log_buffer(\"response_object_after_add_cookie\", (const char *) response, sizeof(*response));\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    log_simple(\"[fill_v1_v2_form] MHD_add_response_header failed\");\n  }\n  else\n  {\n    log_simple(\"[fill_v1_v2_form] MHD_add_response_header succeeded\");\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n\n  /* Log result of queue and destruction */\n  {\n    FILE *f = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"[fill_v1_v2_form] MHD_queue_response returned %d\\n\", (int) ret);\n      fclose(f);\n    }\n  }\n\n  MHD_destroy_response (response);\n  log_simple(\"[fill_v1_v2_form] response destroyed; exiting\");\n  return ret;\n}\n"
}