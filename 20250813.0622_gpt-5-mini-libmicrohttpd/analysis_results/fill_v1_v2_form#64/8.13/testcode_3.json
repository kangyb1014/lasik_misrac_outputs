{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function MHD_create_response_from_buffer_with_free_callback declares its buffer parameter as void *buffer even though it does not modify the pointed-to data \u2014 it merely forwards the pointer to MHD_create_response_from_buffer_with_free_callback_cls and stores it for sending/freeing. Per MISRA C 2023 Rule 8.13 the parameter should be declared const void *buffer (and only cast to void * when passing to an API that requires a non-const pointer), so the current non-const parameter type violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_v2_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_v2_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_v2_form:\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_v2_form code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helpers. These write control-flow and state info to\n   /tmp/logs/515.txt so that the violation scenario can be reproduced. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (NULL == fp)\n  {\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(fp, fmt, ap);\n  va_end(ap);\n  fputc('\\n', fp);\n  fclose(fp);\n}\n\nstatic void probe_log_buffer_preview(const void *buf, size_t len)\n{\n  const unsigned char *b = (const unsigned char *) buf;\n  size_t i;\n  size_t max_print = (len < 128u) ? len : 128u;\n  FILE *fp = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (NULL == fp)\n  {\n    return;\n  }\n  fprintf(fp, \"buffer=%p len=%zu preview=\\\"\", buf, len);\n  for (i = 0u; i < max_print; ++i)\n  {\n    unsigned char c = b[i];\n    if (c >= 0x20u && c < 0x7Fu)\n    {\n      fputc((int) c, fp);\n    }\n    else\n    {\n      fputs(\"\\\\x\", fp);\n      /* print two hex digits */\n      fprintf(fp, \"%02X\", (unsigned int) c);\n    }\n  }\n  if (len > max_print)\n  {\n    fputs(\"...\", fp);\n  }\n  fputs(\"\\\"\\n\", fp);\n  fclose(fp);\n}\n\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  /* Log entry into the function with pointers we received. */\n  probe_log(\"fill_v1_v2_form: enter session=%p connection=%p mime=%p\", (void *) session, (void *) connection, (void *) mime);\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  probe_log(\"Computed slen=%zu\", slen);\n\n  reply = malloc (slen + 1);\n  probe_log(\"malloc reply=%p (slen+1=%zu)\", (void *) reply, slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n\n  /* Log the contents (preview) of the reply buffer we constructed. */\n  probe_log_buffer_preview(reply, slen);\n\n  /* return static form */\n  probe_log(\"About to call MHD_create_response_from_buffer_with_free_callback with buffer (casted)=%p\", (void *) reply);\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    probe_log(\"MHD_create_response_from_buffer_with_free_callback returned NULL for reply=%p\", (void *) reply);\n    /* Ensure we log the free of reply on error path. */\n    free (reply);\n    probe_log(\"Freed reply=%p after failed response creation\", (void *) reply);\n    return MHD_NO;\n  }\n  probe_log(\"MHD_create_response_from_buffer_with_free_callback returned response=%p for reply=%p\", (void *) response, (void *) reply);\n\n  add_session_cookie (session, response);\n  probe_log(\"add_session_cookie called session=%p response=%p\", (void *) session, (void *) response);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    probe_log(\"MHD_add_response_header failed for response=%p mime=%p\", (void *) response, (void *) mime);\n  }\n  else\n  {\n    probe_log(\"MHD_add_response_header succeeded for response=%p mime=%p\", (void *) response, (void *) mime);\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  probe_log(\"MHD_queue_response returned %d for connection=%p response=%p\", (int) ret, (void *) connection, (void *) response);\n\n  MHD_destroy_response (response);\n  probe_log(\"MHD_destroy_response called for response=%p\", (void *) response);\n  return ret;\n}\n"
}