{
  "user_message": "An agent A claimed that the following MHD_send_data_ code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_send_data_.\n```c\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n  }\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n      return MHD_ERR_AGAIN_;\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n      return MHD_ERR_TLS_;\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n      return MHD_ERR_PIPE_;\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n      return MHD_ERR_CONNRESET_;\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n      return MHD_ERR_CONNRESET_;\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n      return MHD_ERR_NOMEM_;\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    ret = MHD_ERR_NOTCONN_;\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        return MHD_ERR_AGAIN_;\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n        return MHD_ERR_CONNRESET_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n        return MHD_ERR_PIPE_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n        return MHD_ERR_OPNOTSUPP_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n        return MHD_ERR_NOTCONN_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n        return MHD_ERR_INVAL_;\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n        return MHD_ERR_NOMEM_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n        return MHD_ERR_BADF_;\n      /* Treat any other error as a hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n    post_send_setopt (connection, (! tls_conn), push_data);\n\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:When HTTPS_SUPPORT is not defined the fragment expands to a compile-time constant: `const bool tls_conn = false;`. Later in the function there is an `if (tls_conn) { ... }` block where the `#else /* ! HTTPS_SUPPORT */ ret = MHD_ERR_NOTCONN_;` clause is compiled in but guarded by `if (tls_conn)`. That becomes effectively `if (false) { ret = MHD_ERR_NOTCONN_; }` so the compiled `ret = MHD_ERR_NOTCONN_;` statement is unreachable. This constitutes unreachable code and therefore violates MISRA C 2023 Rule 2.1.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/337.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  /* Log entry and compile-time configuration */\n#ifdef HTTPS_SUPPORT\n  mhd_log_probe (\"MHD_send_data_: entry (HTTPS_SUPPORT defined). socket=%d state=%d buffer_size=%zu push_data=%d\",\n                 (int) s, (int) connection->state, buffer_size, (int) push_data);\n#else\n  mhd_log_probe (\"MHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=%d state=%d buffer_size=%zu push_data=%d\",\n                 (int) s, (int) connection->state, buffer_size, (int) push_data);\n#endif\n  mhd_log_probe (\"tls_conn=%d daemon_options=0x%lx\",\n                 (int) tls_conn,\n                 (unsigned long) connection->daemon->options);\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    mhd_log_probe (\"MHD_send_data_: early return: not connected (socket=%d state=%d)\",\n                   (int) s, (int) connection->state);\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n    mhd_log_probe (\"MHD_send_data_: buffer_size trimmed to SSIZE_MAX, push_data set to false\");\n  }\n\n  if (tls_conn)\n  {\n    mhd_log_probe (\"MHD_send_data_: entering TLS branch\");\n#ifdef HTTPS_SUPPORT\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    mhd_log_probe (\"MHD_send_data_: gnutls_record_send returned %zd\", ret);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      mhd_log_probe (\"MHD_send_data_: GNUTLS_E_AGAIN -> returning MHD_ERR_AGAIN_\");\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n    {\n      mhd_log_probe (\"MHD_send_data_: GNUTLS_E_INTERRUPTED -> returning MHD_ERR_AGAIN_\");\n      return MHD_ERR_AGAIN_;\n    }\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n    {\n      mhd_log_probe (\"MHD_send_data_: TLS hard error %zd -> returning MHD_ERR_TLS_\", ret);\n      return MHD_ERR_TLS_;\n    }\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n    {\n      mhd_log_probe (\"MHD_send_data_: TLS pipe error %zd -> returning MHD_ERR_PIPE_\", ret);\n      return MHD_ERR_PIPE_;\n    }\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n    {\n      mhd_log_probe (\"MHD_send_data_: GNUTLS_E_PREMATURE_TERMINATION -> returning MHD_ERR_CONNRESET_\");\n      return MHD_ERR_CONNRESET_;\n    }\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n    {\n      mhd_log_probe (\"MHD_send_data_: GNUTLS_E_UNEXPECTED_PACKET_LENGTH -> returning MHD_ERR_CONNRESET_\");\n      return MHD_ERR_CONNRESET_;\n    }\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n    {\n      mhd_log_probe (\"MHD_send_data_: GNUTLS_E_MEMORY_ERROR -> returning MHD_ERR_NOMEM_\");\n      return MHD_ERR_NOMEM_;\n    }\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      mhd_log_probe (\"MHD_send_data_: TLS other error %zd -> returning MHD_ERR_NOTCONN_\", ret);\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    /* This branch is compiled in when HTTPS_SUPPORT is NOT defined.\n     * However it sits inside `if (tls_conn)` where tls_conn is a\n     * compile-time constant false in that configuration, so this\n     * statement will be unreachable at runtime. We still log the\n     * presence of the compiled-in fallback to aid static analysis. */\n    mhd_log_probe (\"MHD_send_data_: compiled fallback in TLS branch when HTTPS_SUPPORT not defined -> setting ret = MHD_ERR_NOTCONN_\");\n    ret = MHD_ERR_NOTCONN_;\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    mhd_log_probe (\"MHD_send_data_: entering plaintext branch\");\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n      mhd_log_probe (\"MHD_send_data_: buffer_size trimmed to MHD_SCKT_SEND_MAX_SIZE_, push_data set to false\");\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    mhd_log_probe (\"MHD_send_data_: plaintext send returned %zd\", ret);\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        mhd_log_probe (\"MHD_send_data_: plaintext EAGAIN -> returning MHD_ERR_AGAIN_\");\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      {\n        mhd_log_probe (\"MHD_send_data_: plaintext EINTR -> returning MHD_ERR_AGAIN_\");\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      {\n        mhd_log_probe (\"MHD_send_data_: plaintext REMOTE_DISCONNECT -> returning MHD_ERR_CONNRESET_\");\n        return MHD_ERR_CONNRESET_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n      {\n        mhd_log_probe (\"MHD_send_data_: plaintext EPIPE -> returning MHD_ERR_PIPE_\");\n        return MHD_ERR_PIPE_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      {\n        mhd_log_probe (\"MHD_send_data_: plaintext EOPNOTSUPP -> returning MHD_ERR_OPNOTSUPP_\");\n        return MHD_ERR_OPNOTSUPP_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      {\n        mhd_log_probe (\"MHD_send_data_: plaintext ENOTCONN -> returning MHD_ERR_NOTCONN_\");\n        return MHD_ERR_NOTCONN_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      {\n        mhd_log_probe (\"MHD_send_data_: plaintext EINVAL -> returning MHD_ERR_INVAL_\");\n        return MHD_ERR_INVAL_;\n      }\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      {\n        mhd_log_probe (\"MHD_send_data_: plaintext low resources -> returning MHD_ERR_NOMEM_\");\n        return MHD_ERR_NOMEM_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      {\n        mhd_log_probe (\"MHD_send_data_: plaintext EBADF -> returning MHD_ERR_BADF_\");\n        return MHD_ERR_BADF_;\n      }\n      /* Treat any other error as a hard error. */\n      mhd_log_probe (\"MHD_send_data_: plaintext other error %d -> returning MHD_ERR_NOTCONN_\", err);\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n  {\n    mhd_log_probe (\"MHD_send_data_: calling post_send_setopt (push_data=%d, buffer_size=%zu, ret=%zd)\", (int) push_data, buffer_size, ret);\n    post_send_setopt (connection, (! tls_conn), push_data);\n  }\n\n  mhd_log_probe (\"MHD_send_data_: exit ret=%zd\", ret);\n  return ret;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=6 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0xa401\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=7 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0x1a601\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=7 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0xa601\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=6 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0xa40d\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=6 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0x1a44d\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=6 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0xa44d\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=6 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0xa409\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=7 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0xa409\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=7 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0x1a609\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=9 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0x1a609\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=6 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0xa449\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=7 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0xa449\nMHD_send_data_: entering plaintext branch\nMHD_send_data_: plaintext send returned 125\nMHD_send_data_: calling post_send_setopt (push_data=1, buffer_size=125, ret=125)\nMHD_send_data_: exit ret=125\nMHD_send_data_: entry (HTTPS_SUPPORT NOT defined). socket=7 state=13 buffer_size=125 push_data=1\ntls_conn=0 daemon_options=0xa609\nMHD_send_data_: entering plaintext branch\nMHD_send\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. When HTTPS_SUPPORT is not defined the translation unit contains `const bool tls_conn = false;` and the preprocessor leaves the `ret = MHD_ERR_NOTCONN_;` statement inside the `if (tls_conn)` block. That `if` condition is a compile-time constant false in that configuration, so the inner assignment is unreachable at runtime in the produced translation unit. Because MISRA C:2023 Rule 2.1 forbids unreachable code in the project, this constitutes a violation in the configuration tested (HTTPS_SUPPORT not defined). The provided run logs show only the plaintext branch executed, consistent with the unreachable TLS fallback branch, supporting the report."
}