{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe API exposes struct MHD_BasicAuthInfo with members 'char *username' and 'char *password' and MHD_basic_auth_get_username_password3 returns a pointer to that structure. The buffers pointed to are internal decoded data that are not intended to be modified by callers (they are zero-terminated by the callee and then treated read-only). These members could and should be declared 'const char *' to reflect immutability, so the current code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;\n  if (NULL == *req_cls)\n  {\n    *req_cls = connection;\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else\n  {\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helpers: append textual logs to /tmp/logs/611.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/611.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n/* Log the contents/state of the auth_info structure safely for diagnostics. */\nstatic void probe_log_auth_info(struct MHD_BasicAuthInfo *auth_info)\n{\n  if (NULL == auth_info)\n  {\n    probe_log(\"auth_info: NULL\");\n    return;\n  }\n  probe_log(\n    \"auth_info ptr=%p username_ptr=%p password_ptr=%p username_len=%zu password_len=%zu\",\n    (void *) auth_info,\n    (void *) auth_info->username,\n    (void *) auth_info->password,\n    auth_info->username_len,\n    auth_info->password_len);\n\n  if (NULL != auth_info->username)\n  {\n    /* Limit printed length to username_len to avoid overread in case of non\n     * termination (though in the scenario they are zero-terminated).\n     */\n    probe_log(\"username (len=%zu): '%.*s'\",\n              auth_info->username_len,\n              (int) auth_info->username_len,\n              auth_info->username);\n  }\n  else\n  {\n    probe_log(\"username: NULL\");\n  }\n\n  if (NULL != auth_info->password)\n  {\n    probe_log(\"password (len=%zu): '%.*s'\",\n              auth_info->password_len,\n              (int) auth_info->password_len,\n              auth_info->password);\n  }\n  else\n  {\n    probe_log(\"password: NULL\");\n  }\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  probe_log(\"enter answer_to_connection: connection=%p method='%s' url=%p req_cls_ptr=%p req_cls_val=%p\",\n            (void *) connection,\n            (NULL != method) ? method : \"(null)\",\n            (void *) url,\n            (void *) req_cls,\n            (NULL != req_cls) ? *req_cls : (void *) 0);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    probe_log(\"branch: method != GET -> returning MHD_NO (method='%s')\",\n              (NULL != method) ? method : \"(null)\");\n    return MHD_NO;\n  }\n  if (NULL == *req_cls)\n  {\n    probe_log(\"branch: *req_cls == NULL; setting *req_cls = connection (%p) and returning MHD_YES\",\n              (void *) connection);\n    *req_cls = connection;\n    return MHD_YES;\n  }\n\n  probe_log(\"calling MHD_basic_auth_get_username_password3 on connection=%p\",\n            (void *) connection);\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  probe_log_auth_info(auth_info);\n\n  if (NULL == auth_info)\n  {\n    probe_log(\"branch: auth_info == NULL -> preparing 'Authorization required' response\");\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n    probe_log(\"queued basic auth required response, ret=%d\", (int) ret);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    probe_log(\"branch: authentication failed -> preparing 'Wrong username or password' response\");\n    /* Log detailed comparison values to help reproduce the violation scenario. */\n    probe_log(\"expected username_len=%zu actual=%zu expected_password_len=%zu actual=%zu\",\n              strlen(\"root\"), auth_info->username_len,\n              strlen(\"pa$$w0rd\"), auth_info->password_len);\n    response = MHD_create_response_from_buffer_static (strlen (\"<html><body>Wrong username or password</body></html>\"),\n                                                       \"<html><body>Wrong username or password</body></html>\");\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n    probe_log(\"queued wrong credentials response, ret=%d\", (int) ret);\n  }\n  else\n  {\n    probe_log(\"branch: authentication succeeded -> preparing secret page response\");\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    probe_log(\"queued success response, ret=%d\", (int) ret);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  probe_log(\"cleaning up: destroyed/queued response and freed auth_info if present\");\n  MHD_destroy_response (response);\n  probe_log(\"exit answer_to_connection: returning ret=%d\", (int) ret);\n  return ret;\n}\n"
}