{
  "user_message": "An agent A claimed that the following answer_to_connection code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of answer_to_connection.\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;\n  if (NULL == *req_cls)\n  {\n    *req_cls = connection;\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else\n  {\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In MHD_queue_response the parameter 'status_code' (an unsigned int function parameter) is modified in place by the statement 'status_code &= ~MHD_ICY_FLAG;'. This directly changes the function parameter value, violating MISRA C 2023 Rule 17.8 (function parameters shall not be modified).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void append_log(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/613.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n  }\n}\nstatic void append_log_fmt(const char *fmt, const void *p1, const void *p2, unsigned long v)\n{\n  FILE *f = fopen(\"/tmp/logs/613.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f, fmt, p1, p2, v);\n    fprintf(f, \"\\n\");\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and key parameters. */\n  append_log(\"[answer_to_connection] enter\");\n  append_log_fmt(\"[answer_to_connection] connection=%p req_cls_ptr=%p req_cls_val=%p\",\n                 (void *) connection, (void *) req_cls,\n                 (unsigned long) (uintptr_t) ((NULL != req_cls) ? *req_cls : NULL));\n  append_log_fmt(\"[answer_to_connection] method=%p url=%p version=%p\",\n                 (void *) method, (void *) url, (unsigned long) 0u);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    append_log(\"[answer_to_connection] method != GET -> returning MHD_NO\");\n    return MHD_NO;\n  }\n  if (NULL == *req_cls)\n  {\n    append_log(\"[answer_to_connection] initial request, storing connection in req_cls and returning MHD_YES\");\n    *req_cls = connection;\n    return MHD_YES;\n  }\n\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    append_log(\"[answer_to_connection] auth_info == NULL -> asking for basic auth\");\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n    append_log_fmt(\"[answer_to_connection] queued basic auth required response ret=%p\",\n                   (void *) (uintptr_t) ret, NULL, 0u);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    /* Log relevant auth_info fields to help reproduce why authentication failed. */\n    append_log_fmt(\"[answer_to_connection] auth_info present but credentials invalid: auth_info=%p\",\n                   (void *) auth_info, NULL, 0u);\n    /* Log lengths (username_len, password_len) as unsigned long values in separate calls to avoid complex formatting. */\n    append_log_fmt(\"[answer_to_connection] username_len=%p password_len=%p\",\n                   (void *) (uintptr_t) auth_info->username_len,\n                   (void *) (uintptr_t) auth_info->password_len,\n                   0u);\n\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n    append_log_fmt(\"[answer_to_connection] queued wrong credentials response ret=%p\",\n                   (void *) (uintptr_t) ret, NULL, 0u);\n  }\n  else\n  {\n    append_log(\"[answer_to_connection] authentication succeeded -> queuing secret page response\");\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    /* Log before calling MHD_queue_response so we can detect if any callee mutates parameters. */\n    append_log(\"[answer_to_connection] calling MHD_queue_response with MHD_HTTP_OK\");\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    append_log_fmt(\"[answer_to_connection] MHD_queue_response returned ret=%p\",\n                   (void *) (uintptr_t) ret, NULL, 0u);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n\n  append_log(\"[answer_to_connection] exit\");\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for answer_to_connection. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The provided answer_to_connection function does not modify any of its parameter variables. The only write to a parameter-derived object is *req_cls = connection; which modifies the object referred to by the pointer parameter req_cls \u2014 this is explicitly permitted by the quoted MISRA text (the object pointed to may be modified, the pointer itself must not be reassigned). Casting unused parameters to (void) is fine.\n\nAgent A's scenario refers to a modification (status_code &= ~MHD_ICY_FLAG;) inside MHD_queue_response. If that statement appears inside the MHD_queue_response function, then that would be a potential violation of MISRA C 2023 Rule 17.8 in MHD_queue_response itself (because it modifies its own parameter variable). However, that is a different function and does not make answer_to_connection non\u2011compliant. The supplied test run/logs do not show evidence and the implementation of MHD_queue_response was not provided here \u2014 so you would need to inspect/modify MHD_queue_response to confirm any violation there.\n\nConclusion: the claim that answer_to_connection violates Rule 17.8 is false. To verify any real violation, inspect the implementation of MHD_queue_response; if it indeed modifies its parameter variable, then that function (not answer_to_connection) would be non\u2011compliant."
}