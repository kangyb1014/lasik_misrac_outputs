{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;\n  if (NULL == *req_cls)\n  {\n    *req_cls = connection;\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else\n  {\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'answer_to_connection': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_add_response_header', 'MHD_queue_response', 'MHD_destroy_response', 'MHD_get_connection_values', 'MHD_create_response_from_fd_at_offset64', 'MHD_basic_auth_get_username_password3', 'MHD_queue_basic_auth_required_response3', 'MHD_free', 'MHD_create_post_processor', 'send_page', 'MHD_post_process'], 'callers': []}, 'MHD_create_response_from_buffer_static': {'callees': ['MHD_create_response_from_buffer_with_free_callback_cls'], 'callers': ['transmit_error_response_len', 'main', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'not_found_page', 'create_response', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'create_response_object', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'MHD_add_response_header': {'callees': ['MHD_str_equal_caseless_', 'add_response_header_connection', 'add_response_entry', 'MHD_get_response_element_n_'], 'callers': ['MHD_create_response_for_upgrade', 'MHD_queue_basic_auth_required_response3', 'ahc_echo', 'answer_to_connection', 'add_session_cookie', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'mark_as_html', 'generate_page', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_upgrade_required', 'ahc_cb', 'send_page']}, 'MHD_queue_response': {'callees': ['MHD_DLOG', 'is_reply_body_needed', 'MHD_increment_response_rc', 'MHD_connection_handle_idle', 'MHD_update_last_activity_'], 'callers': ['transmit_error_response_len', 'queue_auth_required_response3_inner', 'MHD_queue_basic_auth_required_response3', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'create_response', 'return_directory_response', 'generate_page', 'reply_with_page_not_found', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'ahc_cb', 'answer_shared_response', 'answer_single_response', 'answer_unique_empty_response', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'MHD_destroy_response': {'callees': ['__builtin_unreachable'], 'callers': ['MHD_connection_close_', 'transmit_error_response_len', 'cleanup_connection', 'connection_reset', 'MHD_connection_handle_idle', 'thread_main_handle_connection', 'MHD_cleanup_connections', 'MHD_create_response_for_upgrade', 'main', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'create_response', 'update_cached_response', 'generate_page', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'ahc_cb', 'init_data', 'deinit_data', 'answer_unique_empty_response', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'MHD_get_connection_values': {'callees': [], 'callers': ['answer_to_connection']}, 'MHD_create_response_from_fd_at_offset64': {'callees': ['MHD_create_response_from_callback'], 'callers': ['MHD_create_response_from_fd_at_offset', 'MHD_create_response_from_fd', 'MHD_create_response_from_fd64', 'answer_to_connection']}, 'MHD_basic_auth_get_username_password3': {'callees': ['MHD_get_rq_bauth_params_', 'MHD_base64_to_bin_n', 'MHD_DLOG'], 'callers': ['MHD_basic_auth_get_username_password', 'ahc_echo', 'answer_to_connection']}, 'MHD_queue_basic_auth_required_response3': {'callees': ['MHD_DLOG', 'MHD_str_quote', 'MHD_add_response_header', 'MHD_queue_response'], 'callers': ['MHD_queue_basic_auth_fail_response', 'ahc_echo', 'answer_to_connection']}, 'MHD_free': {'callees': [], 'callers': ['ahc_echo', 'answer_to_connection']}, 'MHD_create_post_processor': {'callees': ['__builtin_unreachable', 'MHD_lookup_connection_value_n', 'MHD_str_equal_caseless_n_'], 'callers': ['create_response', 'generate_page', 'answer_to_connection']}, 'send_page': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_queue_response', 'MHD_destroy_response', 'MHD_add_response_header'], 'callers': ['answer_to_connection']}, 'MHD_post_process': {'callees': ['MHD_str_equal_caseless_n_', 'post_process_urlencoded', 'post_process_multipart'], 'callers': ['create_response', 'generate_page', 'answer_to_connection']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_basic_auth_get_username_password3",
    "struct MHD_BasicAuthInfo",
    "MHD_free",
    "MHD_create_response_from_buffer_static",
    "MHD_queue_basic_auth_required_response3",
    "MHD_queue_response",
    "MHD_destroy_response",
    "strcmp",
    "strlen",
    "memcmp",
    "struct MHD_Response",
    "struct MHD_Connection",
    "MHD_YES",
    "MHD_NO",
    "enum MHD_Result"
  ],
  "explanation": "To determine whether answer_to_connection violates the MISRA rule \"A function parameter should not be modified\" we must be sure that nothing in the function (including called symbols that might be macros/inline functions) reassigns any of the parameter variables (or causes such a reassignment via macro expansion). The listed symbols are required for that analysis for these reasons:\n\n- MHD_basic_auth_get_username_password3: Called with 'connection'. Need its declaration/definition to confirm it is a normal function (no macro/inline that could reassign local parameter variables) and to verify it does not modify the function's parameter variables.\n\n- struct MHD_BasicAuthInfo: The code reads fields (username_len, username, password, password_len). The structure definition is needed to ensure these are ordinary fields (not bitfields or macros) and to check there is no aliasing that would imply modifying a function parameter.\n\n- MHD_free: Called on auth_info. Confirm it is a normal function (not a macro) that cannot reassign any of this function's parameters.\n\n- MHD_create_response_from_buffer_static: Called to build responses. Need its definition to ensure it is not a macro that could modify parameter variables.\n\n- MHD_queue_basic_auth_required_response3: Called with 'connection' and 'response'. Need to ensure it cannot reassign the local parameter variables via macro side-effects.\n\n- MHD_queue_response: Same reason as above \u2014 ensure it does not modify parameter variables by macro expansion or otherwise.\n\n- MHD_destroy_response: Confirm it is not a macro that could reassign local parameters.\n\n- strcmp, strlen, memcmp: Standard library functions used on pointer parameters/locals (method, page, auth_info fields). Include to confirm they are not implemented as macros in this build that could write through their arguments and thus modify parameters.\n\n- struct MHD_Response: Type of 'response' local; definition needed to ensure no hidden macro/typedef behavior that could affect parameter-modification reasoning.\n\n- struct MHD_Connection: Type of 'connection' parameter. Include to confirm it is a pointer type as assumed and to rule out any surprising typedef/macros that could mean assignment semantics differ.\n\n- MHD_YES, MHD_NO, enum MHD_Result: Return constants/types used by the function. Including them ensures there are no macro definitions that expand into code that reassigns parameters.\n\nIn short: include the declarations/definitions (or confirm they are plain functions/macros) for all called functions, the involved structures and the return-value macros/types so the next analyst can verify that none of those symbols are macros or inline constructs that would reassign any of the function's parameters (e.g., 'req_cls', 'connection', 'method', etc.). This is sufficient to conclude whether any function-parameter variable itself is written to (which would be a MISRA violation) versus only the objects pointed to being modified (which is allowed)."
}