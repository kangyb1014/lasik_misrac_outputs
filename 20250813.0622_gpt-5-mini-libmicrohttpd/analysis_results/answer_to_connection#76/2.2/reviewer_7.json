{
  "user_message": "An agent A claimed that the following answer_to_connection code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of answer_to_connection.\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;\n  if (NULL == *req_cls)\n  {\n    *req_cls = connection;\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else\n  {\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The mhd_assert(0 == h_str[pos + suff_charset_len]) tests a condition that is guaranteed by the preceding memcpy(h_str + pos, suff_charset, suff_charset_len + 1) which copied the trailing NUL. The assertion has no side effects and cannot change program behaviour; removing it would not affect the program, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Probe: log entry and key parameters */\n  {\n    FILE *log = fopen(\"/tmp/logs/610.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"enter answer_to_connection: method='%s', url=%p, version=%p, req_cls_ptr=%p\\n\",\n              (method ? method : \"(null)\"), (const void *) url, (const void *) version, (void *) req_cls);\n      if (req_cls)\n        fprintf(log, \"  *req_cls=%p\\n\", (void *) (*req_cls));\n      fclose(log);\n    }\n  }\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    FILE *log = fopen(\"/tmp/logs/610.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"branch: method != GET (method='%s'), returning MHD_NO\\n\", method ? method : \"(null)\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n  if (NULL == *req_cls)\n  {\n    /* First-time request for this connection: save state and continue. */\n    FILE *log = fopen(\"/tmp/logs/610.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"branch: first request for connection, storing connection in *req_cls and returning MHD_YES\\n\");\n      fclose(log);\n    }\n    *req_cls = connection;\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n\n  /* Log whether basic auth information was present */\n  {\n    FILE *log = fopen(\"/tmp/logs/610.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"auth_info %spresent\\n\", (auth_info ? \"\" : \"not \"));\n      fclose(log);\n    }\n  }\n\n  if (NULL == auth_info)\n  {\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n\n    FILE *log = fopen(\"/tmp/logs/610.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"action: queue_basic_auth_required_response3 (no auth info)\\n\");\n      fclose(log);\n    }\n\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    /* Before deciding wrong username/password, log the actual auth fields and results */\n    FILE *log = fopen(\"/tmp/logs/610.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"auth_info: username_len=%zu, password_len=%zu, username_ptr=%p, password_ptr=%p\\n\",\n              auth_info->username_len, auth_info->password_len,\n              (void *) auth_info->username, (void *) auth_info->password);\n      /* Print username bytes as a safe (possibly non-terminated) string up to username_len */\n      if (auth_info->username && auth_info->username_len > 0)\n      {\n        size_t i;\n        fprintf(log, \"  username (len %zu): \", auth_info->username_len);\n        for (i = 0; i < auth_info->username_len; ++i)\n          fprintf(log, \"%02x\", (unsigned char) auth_info->username[i]);\n        fprintf(log, \" (hex)\\n\");\n      }\n      if (auth_info->password && auth_info->password_len > 0)\n      {\n        size_t i;\n        fprintf(log, \"  password (len %zu): \", auth_info->password_len);\n        for (i = 0; i < auth_info->password_len; ++i)\n          fprintf(log, \"%02x\", (unsigned char) auth_info->password[i]);\n        fprintf(log, \" (hex)\\n\");\n      }\n\n      /* Log which of the checks failed explicitly (re-evaluate for logging only) */\n      {\n        int username_len_ok = (strlen(\"root\") == auth_info->username_len);\n        int username_cmp_ok = (0 == memcmp(auth_info->username, \"root\", auth_info->username_len));\n        int password_not_null = (NULL != auth_info->password);\n        int password_len_ok = (strlen(\"pa$$w0rd\") == auth_info->password_len);\n        int password_cmp_ok = (0 == memcmp(auth_info->password, \"pa$$w0rd\", auth_info->password_len));\n        fprintf(log, \"  checks: username_len_ok=%d, username_cmp_ok=%d, password_not_null=%d, password_len_ok=%d, password_cmp_ok=%d\\n\",\n                username_len_ok, username_cmp_ok, password_not_null, password_len_ok, password_cmp_ok);\n      }\n\n      fprintf(log, \"action: wrong username or password branch -> queue_basic_auth_required_response3\\n\");\n      fclose(log);\n    }\n\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else\n  {\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n\n    FILE *log = fopen(\"/tmp/logs/610.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"action: authentication successful -> queue_response MHD_HTTP_OK\\n\");\n      fclose(log);\n    }\n\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n  {\n    FILE *log = fopen(\"/tmp/logs/610.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"clean-up: freeing auth_info at %p\\n\", (void *) auth_info);\n      fclose(log);\n    }\n    MHD_free (auth_info);\n  }\n\n  /* Log response destruction and final return value */\n  {\n    FILE *log = fopen(\"/tmp/logs/610.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"clean-up: destroying response %p, returning ret=%d\\n\", (void *) response, (int) ret);\n      fclose(log);\n    }\n  }\n\n  MHD_destroy_response (response);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for answer_to_connection. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The scenario cites an mhd_assert and a memcpy (and a buffer h_str) that do not appear anywhere in the provided answer_to_connection source; there is no assertion in the posted function to be classified as dead code. Because the claimed offending statement is not present, you cannot conclude Rule 2.2 is violated for this function. \n\n(If there had been an assertion that merely rechecked a property already guaranteed by a prior copy and the assertion had no side effects, that single assertion could be considered \"dead code\" under the Rule 2.2 wording \u2014 but that hypothetical is not applicable to the code shown. The (void) casts in the function simply suppress compiler warnings and are side\u2011effect free, and their presence/absence affects diagnostics rather than program behaviour.)"
}