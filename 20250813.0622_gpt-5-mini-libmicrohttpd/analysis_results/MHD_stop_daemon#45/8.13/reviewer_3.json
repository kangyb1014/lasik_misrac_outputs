{
  "user_message": "An agent A claimed that the following MHD_stop_daemon code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_stop_daemon.\n```c\n_MHD_EXTERN void\nMHD_stop_daemon (struct MHD_Daemon *daemon)\n{\n  MHD_socket fd;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n\n  if (NULL == daemon)\n    return;\n  if ( (daemon->shutdown) && (NULL == daemon->master) )\n    MHD_PANIC (_ (\"MHD_stop_daemon() was called twice.\"));\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  /* Slave daemons must be stopped by master daemon. */\n  mhd_assert ( (NULL == daemon->master) || (daemon->shutdown) );\n\n  daemon->shutdown = true;\n  if (daemon->was_quiesced)\n    fd = MHD_INVALID_SOCKET; /* Do not use FD if daemon was quiesced */\n  else\n    fd = daemon->listen_fd;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n  {   /* Master daemon with worker pool. */\n    mhd_assert (1 < daemon->worker_pool_size);\n    mhd_assert (MHD_D_IS_USING_THREADS_ (daemon));\n\n    /* Let workers shutdown in parallel. */\n    for (i = 0; i < daemon->worker_pool_size; ++i)\n    {\n      daemon->worker_pool[i].shutdown = true;\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        if (! MHD_itc_activate_ (daemon->worker_pool[i].itc,\n                                 \"e\"))\n          MHD_PANIC (_ (\"Failed to signal shutdown via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n      else\n        mhd_assert (MHD_INVALID_SOCKET != fd);\n    }\n#ifdef HAVE_LISTEN_SHUTDOWN\n    if (MHD_INVALID_SOCKET != fd)\n    {\n      (void) shutdown (fd,\n                       SHUT_RDWR);\n    }\n#endif /* HAVE_LISTEN_SHUTDOWN */\n    for (i = 0; i < daemon->worker_pool_size; ++i)\n    {\n      MHD_stop_daemon (&daemon->worker_pool[i]);\n    }\n    free (daemon->worker_pool);\n    mhd_assert (MHD_ITC_IS_INVALID_ (daemon->itc));\n#ifdef EPOLL_SUPPORT\n    mhd_assert (-1 == daemon->epoll_fd);\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n    mhd_assert (-1 == daemon->epoll_upgrade_fd);\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n#endif /* EPOLL_SUPPORT */\n  }\n  else\n#endif\n  {   /* Worker daemon or single daemon. */\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    if (MHD_D_IS_USING_THREADS_ (daemon))\n    {     /* Worker daemon or single daemon with internal thread(s). */\n      mhd_assert (0 == daemon->worker_pool_size);\n      /* Separate thread(s) is used for polling sockets. */\n      if (MHD_ITC_IS_VALID_ (daemon->itc))\n      {\n        if (! MHD_itc_activate_ (daemon->itc,\n                                 \"e\"))\n          MHD_PANIC (_ (\"Failed to signal shutdown via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n      else\n      {\n#ifdef HAVE_LISTEN_SHUTDOWN\n        if (MHD_INVALID_SOCKET != fd)\n        {\n          if (NULL == daemon->master)\n            (void) shutdown (fd,\n                             SHUT_RDWR);\n        }\n        else\n#endif /* HAVE_LISTEN_SHUTDOWN */\n        mhd_assert (false); /* Should never happen */\n      }\n\n      if (! MHD_thread_handle_ID_join_thread_ (daemon->tid))\n      {\n        MHD_PANIC (_ (\"Failed to join a thread.\\n\"));\n      }\n      /* close_all_connections() was called in daemon thread. */\n    }\n    else\n#endif\n    {\n      /* No internal threads are used for polling sockets. */\n      close_all_connections (daemon);\n    }\n    mhd_assert (NULL == daemon->connections_head);\n    mhd_assert (NULL == daemon->cleanup_head);\n    mhd_assert (NULL == daemon->suspended_connections_head);\n    mhd_assert (NULL == daemon->new_connections_head);\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n    mhd_assert (NULL == daemon->urh_head);\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n      MHD_itc_destroy_chk_ (daemon->itc);\n\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n        (-1 != daemon->epoll_fd) )\n      MHD_socket_close_chk_ (daemon->epoll_fd);\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n    if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n        (-1 != daemon->epoll_upgrade_fd) )\n      MHD_socket_close_chk_ (daemon->epoll_upgrade_fd);\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n#endif /* EPOLL_SUPPORT */\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_destroy_chk_ (&daemon->cleanup_connection_mutex);\n    MHD_mutex_destroy_chk_ (&daemon->new_connections_mutex);\n#endif\n  }\n\n  if (NULL == daemon->master)\n  {   /* Cleanup that should be done only one time in master/single daemon.\n       * Do not perform this cleanup in worker daemons. */\n\n    if (MHD_INVALID_SOCKET != fd)\n      MHD_socket_close_chk_ (fd);\n\n    /* TLS clean up */\n#ifdef HTTPS_SUPPORT\n    if (daemon->have_dhparams)\n    {\n      gnutls_dh_params_deinit (daemon->https_mem_dhparams);\n      daemon->have_dhparams = false;\n    }\n    if (0 != (daemon->options & MHD_USE_TLS))\n    {\n      gnutls_priority_deinit (daemon->priority_cache);\n      if (daemon->x509_cred)\n        gnutls_certificate_free_credentials (daemon->x509_cred);\n      if (daemon->psk_cred)\n        gnutls_psk_free_server_credentials (daemon->psk_cred);\n    }\n#endif /* HTTPS_SUPPORT */\n\n#ifdef DAUTH_SUPPORT\n    free (daemon->digest_auth_random_copy);\n    free (daemon->nnc);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_destroy_chk_ (&daemon->nnc_lock);\n#endif\n#endif\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_destroy_chk_ (&daemon->per_ip_connection_mutex);\n#endif\n    free (daemon);\n  }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call passes the string literal \"e\" to MHD_itc_activate_. If the prototype of MHD_itc_activate_ takes a non-const char * (e.g. int MHD_itc_activate_(..., char *msg)), this means a pointer to a non-const type is being used to refer to an immutable string literal \u2014 violating MISRA C 2023 Rule 8.13. The fix is to declare the parameter as const char * (or otherwise ensure the pointed-to type is const). If the function already accepts const char *, then no violation occurs.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nextern void MHD_PANIC(const char *msg);\nextern void mhd_assert(int cond);\nextern int MHD_thread_handle_ID_is_valid_handle_(int tid);\nextern int MHD_ITC_IS_VALID_(void *itc);\nextern int MHD_ITC_IS_INVALID_(void *itc);\nextern int MHD_itc_activate_(void *itc, const char *msg);\nextern void MHD_itc_destroy_chk_(void *itc);\nextern void MHD_socket_close_chk_(int fd);\nextern int MHD_thread_handle_ID_join_thread_(int tid);\nstatic void\nmhd_probe_log_v (const char *fmt, va_list ap)\n{\n  FILE *f = fopen(\"/tmp/logs/363.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t now = time(NULL);\n  if (now != (time_t)-1)\n    fprintf(f, \"[%ld] \", (long) now);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  va_list ap;\n  va_start(ap, fmt);\n  mhd_probe_log_v(fmt, ap);\n  va_end(ap);\n}\n\nvoid\nMHD_stop_daemon (struct MHD_Daemon *daemon)\n{\n  MHD_socket fd;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n\n  mhd_probe_log(\"Entered MHD_stop_daemon: daemon=%p\", (void *) daemon);\n\n  if (NULL == daemon)\n  {\n    mhd_probe_log(\"Daemon pointer is NULL, returning immediately\");\n    return;\n  }\n  if ( (daemon->shutdown) && (NULL == daemon->master) )\n  {\n    mhd_probe_log(\"Panic: MHD_stop_daemon() called twice on master daemon=%p\", (void *) daemon);\n    MHD_PANIC (\"MHD_stop_daemon() was called twice.\");\n  }\n\n  mhd_assert ((0 == (daemon->options & 0)) || /* stubbed check */ \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & 0)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  /* Slave daemons must be stopped by master daemon. */\n  mhd_assert ( (NULL == daemon->master) || (daemon->shutdown) );\n\n  daemon->shutdown = true;\n  mhd_probe_log(\"Set daemon->shutdown = true for daemon=%p\", (void *) daemon);\n\n  if (daemon->was_quiesced)\n  {\n    fd = MHD_INVALID_SOCKET; /* Do not use FD if daemon was quiesced */\n    mhd_probe_log(\"Daemon was quiesced, using invalid socket for daemon=%p\", (void *) daemon);\n  }\n  else\n  {\n    fd = daemon->listen_fd;\n    mhd_probe_log(\"Using listen_fd=%d for daemon=%p\", (int) fd, (void *) daemon);\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n  {   /* Master daemon with worker pool. */\n    mhd_assert (1 < daemon->worker_pool_size);\n\n    /* Let workers shutdown in parallel. */\n    for (i = 0; i < daemon->worker_pool_size; ++i)\n    {\n      daemon->worker_pool[i].shutdown = true;\n      mhd_probe_log(\"Marked worker_pool[%u].shutdown = true (daemon=%p)\", i, (void *) daemon);\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        /* Log the call that could be problematic: passing a string literal \"e\". */\n        mhd_probe_log(\"About to call MHD_itc_activate_ for worker %u: itc=%p, msg_literal=%p, msg=\\\"e\\\", daemon=%p\",\n                      i,\n                      (void *) &daemon->worker_pool[i].itc,\n                      (void *) \"e\",\n                      (void *) daemon);\n        if (! MHD_itc_activate_ (daemon->worker_pool[i].itc,\n                                 \"e\"))\n        {\n          mhd_probe_log(\"MHD_itc_activate_ returned FALSE for worker %u (itc=%p, daemon=%p)\",\n                        i,\n                        (void *) &daemon->worker_pool[i].itc,\n                        (void *) daemon);\n          MHD_PANIC (\"Failed to signal shutdown via inter-thread communication channel.\\n\");\n        }\n        else\n        {\n          mhd_probe_log(\"MHD_itc_activate_ returned TRUE for worker %u (itc=%p, daemon=%p)\",\n                        i,\n                        (void *) &daemon->worker_pool[i].itc,\n                        (void *) daemon);\n        }\n      }\n      else\n      {\n        mhd_probe_log(\"Worker %u has invalid ITC and expects socket close (fd=%d), daemon=%p\",\n                      i, (int) fd, (void *) daemon);\n        mhd_assert (MHD_INVALID_SOCKET != fd);\n      }\n    }\n#ifdef HAVE_LISTEN_SHUTDOWN\n    if (MHD_INVALID_SOCKET != fd)\n    {\n      mhd_probe_log(\"Calling shutdown(fd=%d) for master daemon=%p\", (int) fd, (void *) daemon);\n      (void) shutdown (fd,\n                       SHUT_RDWR);\n    }\n#endif /* HAVE_LISTEN_SHUTDOWN */\n    for (i = 0; i < daemon->worker_pool_size; ++i)\n    {\n      mhd_probe_log(\"Recursively stopping worker daemon at &worker_pool[%u] for master daemon=%p\", i, (void *) daemon);\n      MHD_stop_daemon (&daemon->worker_pool[i]);\n    }\n    free (daemon->worker_pool);\n    mhd_probe_log(\"Freed daemon->worker_pool for daemon=%p\", (void *) daemon);\n    mhd_assert (MHD_ITC_IS_INVALID_ (daemon->itc));\n#ifdef EPOLL_SUPPORT\n    mhd_assert (-1 == daemon->epoll_fd);\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n    mhd_assert (-1 == daemon->epoll_upgrade_fd);\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n#endif /* EPOLL_SUPPORT */\n  }\n  else\n#endif\n  {   /* Worker daemon or single daemon. */\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    if (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid))\n    {     /* Worker daemon or single daemon with internal thread(s). */\n      mhd_assert (0 == daemon->worker_pool_size);\n      /* Separate thread(s) is used for polling sockets. */\n      if (MHD_ITC_IS_VALID_ (daemon->itc))\n      {\n        mhd_probe_log(\"About to call MHD_itc_activate_ for daemon itc=%p, msg_literal=%p, daemon=%p\",\n                      (void *) &daemon->itc,\n                      (void *) \"e\",\n                      (void *) daemon);\n        if (! MHD_itc_activate_ (daemon->itc,\n                                 \"e\"))\n        {\n          mhd_probe_log(\"MHD_itc_activate_ returned FALSE for daemon itc=%p, daemon=%p\",\n                        (void *) &daemon->itc,\n                        (void *) daemon);\n          MHD_PANIC (\"Failed to signal shutdown via inter-thread communication channel.\\n\");\n        }\n        else\n        {\n          mhd_probe_log(\"MHD_itc_activate_ returned TRUE for daemon itc=%p, daemon=%p\",\n                        (void *) &daemon->itc,\n                        (void *) daemon);\n        }\n      }\n      else\n      {\n#ifdef HAVE_LISTEN_SHUTDOWN\n        if (MHD_INVALID_SOCKET != fd)\n        {\n          if (NULL == daemon->master)\n          {\n            mhd_probe_log(\"Calling shutdown(fd=%d) for non-master daemon=%p\", (int) fd, (void *) daemon);\n            (void) shutdown (fd,\n                             SHUT_RDWR);\n          }\n        }\n        else\n#endif /* HAVE_LISTEN_SHUTDOWN */\n        {\n          mhd_probe_log(\"Unexpected: No ITC and invalid fd for daemon=%p; asserting false\", (void *) daemon);\n          mhd_assert (false); /* Should never happen */\n        }\n      }\n\n      if (! MHD_thread_handle_ID_join_thread_ (daemon->tid))\n      {\n        mhd_probe_log(\"Failed to join thread for daemon tid=%p, daemon=%p\", (void *) &daemon->tid, (void *) daemon);\n        MHD_PANIC (\"Failed to join a thread.\\n\");\n      }\n      /* close_all_connections() was called in daemon thread. */\n    }\n    else\n#endif\n    {\n      /* No internal threads are used for polling sockets. */\n      mhd_probe_log(\"No internal threads: calling close_all_connections for daemon=%p\", (void *) daemon);\n      close_all_connections (daemon);\n    }\n    mhd_assert (NULL == daemon->connections_head);\n    mhd_assert (NULL == daemon->cleanup_head);\n    mhd_assert (NULL == daemon->suspended_connections_head);\n    mhd_assert (NULL == daemon->new_connections_head);\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n    mhd_assert (NULL == daemon->urh_head);\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      mhd_probe_log(\"Destroying ITC for daemon itc=%p, daemon=%p\", (void *) &daemon->itc, (void *) daemon);\n      MHD_itc_destroy_chk_ (daemon->itc);\n    }\n\n#ifdef EPOLL_SUPPORT\n    if ( /* MHD_D_IS_USING_EPOLL_ (daemon) && */\n        (-1 != -1) )\n      MHD_socket_close_chk_ (daemon->epoll_fd);\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n    if ( /* MHD_D_IS_USING_EPOLL_ (daemon) && */\n        (-1 != -1) )\n      MHD_socket_close_chk_ (daemon->epoll_upgrade_fd);\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n#endif /* EPOLL_SUPPORT */\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    /* Destroy mutexes (placeholders) */\n    (void) &daemon->cleanup_connection_mutex;\n    (void) &daemon->new_connections_mutex;\n#endif\n  }\n\n  if (NULL == daemon->master)\n  {   /* Cleanup that should be done only one time in master/single daemon.\n       * Do not perform this cleanup in worker daemons. */\n\n    if (MHD_INVALID_SOCKET != fd)\n    {\n      mhd_probe_log(\"Closing listen fd=%d for master daemon=%p\", (int) fd, (void *) daemon);\n      MHD_socket_close_chk_ (fd);\n    }\n\n    /* TLS clean up */\n#ifdef HTTPS_SUPPORT\n    if (daemon->have_dhparams)\n    {\n      /* gnutls_dh_params_deinit (daemon->https_mem_dhparams); */\n      daemon->have_dhparams = false;\n      mhd_probe_log(\"Deinitialized DH params for daemon=%p\", (void *) daemon);\n    }\n    if (0 != (daemon->options & 0))\n    {\n      /* deinit TLS credentials */\n      if (daemon->x509_cred)\n        ; /* gnutls_certificate_free_credentials (daemon->x509_cred); */\n      if (daemon->psk_cred)\n        ; /* gnutls_psk_free_server_credentials (daemon->psk_cred); */\n      mhd_probe_log(\"Deinitialized TLS credentials for daemon=%p\", (void *) daemon);\n    }\n#endif /* HTTPS_SUPPORT */\n\n#ifdef DAUTH_SUPPORT\n    free (daemon->digest_auth_random_copy);\n    free (daemon->nnc);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    (void) &daemon->nnc_lock;\n#endif\n#endif\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    (void) &daemon->per_ip_connection_mutex;\n#endif\n    mhd_probe_log(\"Freeing daemon structure for master daemon=%p\", (void *) daemon);\n    free (daemon);\n  }\n  mhd_probe_log(\"Exiting MHD_stop_daemon for daemon=%p\", (void *) daemon);\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not proven. MISRA C:2023 R8.13 is about pointer declarations being const-qualified where possible (i.e. the type a pointer points to). The shown MHD_stop_daemon() calls MHD_itc_activate_(..., \"e\"). Whether a MISRA R8.13 violation actually exists depends on the declaration/definition of MHD_itc_activate_. If that function\u2019s parameter is declared as const char * there is no violation; if it is declared as char * (non-const) then the function\u2019s prototype/definition would be violating R8.13 and should be changed to accept a const char * (or otherwise justify why it must modify the pointed data). The call site in MHD_stop_daemon alone does not prove a violation because the prototype is not present in the original snippet (and R8.13 concerns the pointer type in declarations, not merely passing a literal). Thus the report as stated (that the code violates R8.13) is not correct unless the callee\u2019s prototype indeed uses a non-const pointer. Recommendation: inspect/adjust the declaration of MHD_itc_activate_ \u2014 prefer const char * for message parameters or pass a mutable buffer if modification is intended."
}