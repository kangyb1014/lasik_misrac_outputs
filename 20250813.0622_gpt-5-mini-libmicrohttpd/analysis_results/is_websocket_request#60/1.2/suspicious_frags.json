{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function is_websocket_request:\nenum MHD_Result\n{\n  /**\n   * MHD result code for \"NO\".\n   */\n  MHD_NO = 0,\n\n  /**\n   * MHD result code for \"YES\".\n   */\n  MHD_YES = 1\n\n}\n...\n#define WS_UPGRADE_VALUE \"websocket\"\n...\nstruct MHD_Connection\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler-specific language extensions are used in the presented code. Items inspected and reasons they are not extensions:\n\n- (void) con; \u2014 standard C idiom to suppress unused-parameter warnings; not a compiler extension.\n- static enum MHD_Result is_websocket_request(...) \u2014 use of static linkage and an enum return type is standard C.\n- Ternary operator (?:) in the return statement \u2014 standard C operator, not an extension.\n- Comparisons against NULL and pointer operations (upg_header != NULL, NULL != strstr(...)) \u2014 standard C pointer usage.\n- Use of standard library functions strcmp and strstr \u2014 standard C library functions (assuming <string.h> is included elsewhere), not compiler extensions.\n- Macro definition #define WS_UPGRADE_VALUE \"websocket\" \u2014 standard preprocessor macro, not an extension.\n- enum MHD_Result and its enumerators MHD_NO / MHD_YES \u2014 standard C enum usage.\n- Passing a pointer to an incomplete type (struct MHD_Connection *con) \u2014 allowed in standard C for pointer parameters.\n\nNo occurrences of known compiler-specific constructs were found (for example: __attribute__, __asm__, typeof, statement expressions ({ ... }), inline assembly, compiler-specific pragmas, or builtin identifiers like __builtin_*, or vendor-specific keywords). Therefore there are no fragments that need to be reported for possible violations of MISRA C 2023 Rule 1.2 in the provided code."
}