{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"(void) url;\" is an expression statement whose only effect is to reference the parameter to silence a compiler warning. It performs no observable action and its removal would not change program behaviour, so it is dead code. Therefore Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_websocket_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/482.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_websocket_request as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified is_websocket_request code.\n",
  "test_code": "static enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  /* Probe: record entry and parameter states to help reproduce the reported\n     violation. Logs go to /tmp/logs/482.txt. This preserves original logic\n     while adding only observational side effects (file logging). */\n  {\n    FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (f) {\n      /* Log that function was entered and pointer values / header contents\n         (nullness and short preview) to show that 'con' is not otherwise\n         used in the logic of this function. */\n      fprintf(f, \"is_websocket_request: entered\\n\");\n      fprintf(f, \"  con ptr: %p\\n\", (void *)con);\n      fprintf(f, \"  upg_header ptr: %p\\n\", (const void *)upg_header);\n      fprintf(f, \"  con_header ptr: %p\\n\", (const void *)con_header);\n      if (upg_header) {\n        fprintf(f, \"  upg_header preview: '%.*s'\\n\", 64, upg_header);\n      } else {\n        fprintf(f, \"  upg_header: NULL\\n\");\n      }\n      if (con_header) {\n        fprintf(f, \"  con_header preview: '%.*s'\\n\", 64, con_header);\n      } else {\n        fprintf(f, \"  con_header: NULL\\n\");\n      }\n      /* Note: the following line mirrors the original code's intent to\n         silence compiler warnings about the unused parameter 'con'. The\n         agent reported this cast statement as dead code because it has no\n         observable effect on program behaviour (aside from preventing a\n         compiler warning). We log the presence of that statement so that\n         reviewers can see it in context. */\n      fprintf(f, \"  observed statement: (void) con;  // reported as dead code\\n\");\n      fclose(f);\n    }\n  }\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n"
}