{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn ahc_cb the statement '(void) upload_data; /* Unused. Silent compiler warning. */' is an executed no-op whose removal would not affect program behaviour (it only suppresses a compiler warning). This operation therefore constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_websocket_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/482.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_websocket_request as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified is_websocket_request code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append relevant runtime state to the log file. */\nstatic void probe_log_ws(const char *stage,\n                         const char *upg_header,\n                         const char *con_header,\n                         int upg_present,\n                         int con_present,\n                         int match_upg,\n                         int match_con)\n{\n    FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[is_websocket_request] stage=%s\\n\", stage);\n        fprintf(f, \"  pointers: upg_header=%p, con_header=%p\\n\",\n                (void *) upg_header, (void *) con_header);\n        fprintf(f, \"  presence: upg_present=%d, con_present=%d\\n\",\n                upg_present, con_present);\n        fprintf(f, \"  checks: match_upg=%d, match_con=%d\\n\",\n                match_upg, match_con);\n        if (upg_header != NULL)\n        {\n            fprintf(f, \"  upg_header value=\\\"%s\\\"\\n\", upg_header);\n        }\n        if (con_header != NULL)\n        {\n            fprintf(f, \"  con_header value=\\\"%s\\\"\\n\", con_header);\n        }\n        fflush(f);\n        fclose(f);\n    }\n}\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  /* The original code intentionally discards the unused parameter to silence\n     compiler warnings. We keep the original behavior but log that this cast\n     was executed so external analysis can observe the no-op. */\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  /* Log initial state before performing the checks. */\n  probe_log_ws(\"before_checks\", upg_header, con_header,\n               (upg_header != NULL), (con_header != NULL), -1, -1);\n\n  /* Preserve original logic while capturing intermediate results for logging. */\n  int upg_present = (upg_header != NULL);\n  int con_present = (con_header != NULL);\n  int match_upg = 0;\n  int match_con = 0;\n\n  if (upg_present)\n  {\n      match_upg = (0 == strcmp (upg_header, WS_UPGRADE_VALUE));\n  }\n  if (con_present)\n  {\n      match_con = (NULL != strstr (con_header, \"Upgrade\"));\n  }\n\n  /* Log the results of the component checks so the control path can be reproduced. */\n  probe_log_ws(\"after_checks\", upg_header, con_header,\n               upg_present, con_present, match_upg, match_con);\n\n  return ( (upg_header != NULL) && (con_header != NULL)\n           && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n           && (NULL != strstr (con_header, \"Upgrade\")) )\n         ? MHD_YES\n         : MHD_NO;\n}\n"
}