{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) cls;' is a no\u2011op used solely to suppress an \"unused parameter\" compiler warning. It performs no observable action at runtime, and removing it would not change program behaviour, so it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nappend_websocket_log(const char *upg_header, const char *con_header,\n                     int upg_nonnull, int con_nonnull,\n                     int cmp_eq, int has_upgrade, int result_yes)\n{\n  FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"is_websocket_request invoked\\n\");\n    fprintf(f, \"  upg_header=%p, con_header=%p\\n\", (const void *) upg_header, (const void *) con_header);\n    fprintf(f, \"  upg_header != NULL: %d, con_header != NULL: %d\\n\", upg_nonnull, con_nonnull);\n    fprintf(f, \"  strcmp(upg_header, WS_UPGRADE_VALUE) == 0: %d\\n\", cmp_eq);\n    fprintf(f, \"  strstr(con_header, \\\"Upgrade\\\") != NULL: %d\\n\", has_upgrade);\n    fprintf(f, \"  final result -> %s\\n\", result_yes ? \"MHD_YES\" : \"MHD_NO\");\n    fprintf(f, \"  note: (void) con; statement executed earlier to suppress unused-parameter warning (no runtime effect)\\n\");\n    fflush(f);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  /* Preserve original short-circuit evaluation logic while capturing\n     intermediate state for logging. */\n  int upg_nonnull = (upg_header != NULL);\n  int con_nonnull = (con_header != NULL);\n  int cmp_eq = upg_nonnull && (0 == strcmp (upg_header, WS_UPGRADE_VALUE));\n  int has_upgrade = con_nonnull && (NULL != strstr (con_header, \"Upgrade\"));\n  int result_yes = upg_nonnull && con_nonnull && cmp_eq && has_upgrade;\n\n  /* Log the control path and state to allow reproducible evidence of the\n     no-op (void) con; and the decision taken by the function. */\n  append_websocket_log(upg_header, con_header,\n                       upg_nonnull, con_nonnull,\n                       cmp_eq, has_upgrade, result_yes);\n\n  return result_yes ? MHD_YES : MHD_NO;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for is_websocket_request. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The statement (void) con; is an executed no\u2011op used solely to quell a compiler warning; removing it would not change program behaviour, so by the plain text of MISRA C 2023 Rule 2.2 it constitutes dead code. Note: the scenario text used \u2018(void) cls;\u2019 but the shown function uses \u2018(void) con;\u2019 \u2014 this is a naming mismatch only and does not affect the substance of the finding. The supplied test instrumentation and empty log do not alter the analysis. If this use is considered necessary for toolchain reasons, it must be addressed via an approved deviation or by changing the code (e.g. remove the unused parameter, actually use it, or apply a documented macro/annotation accepted by your coding standard) to avoid violating Rule 2.2."
}