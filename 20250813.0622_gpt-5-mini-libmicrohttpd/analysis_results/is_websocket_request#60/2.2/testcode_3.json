{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) cls;' is a no\u2011op used solely to suppress an \"unused parameter\" compiler warning. It performs no observable action at runtime, and removing it would not change program behaviour, so it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_websocket_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/482.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_websocket_request as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified is_websocket_request code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nstatic void\nappend_websocket_log(const char *upg_header, const char *con_header,\n                     int upg_nonnull, int con_nonnull,\n                     int cmp_eq, int has_upgrade, int result_yes)\n{\n  FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"is_websocket_request invoked\\n\");\n    fprintf(f, \"  upg_header=%p, con_header=%p\\n\", (const void *) upg_header, (const void *) con_header);\n    fprintf(f, \"  upg_header != NULL: %d, con_header != NULL: %d\\n\", upg_nonnull, con_nonnull);\n    fprintf(f, \"  strcmp(upg_header, WS_UPGRADE_VALUE) == 0: %d\\n\", cmp_eq);\n    fprintf(f, \"  strstr(con_header, \\\"Upgrade\\\") != NULL: %d\\n\", has_upgrade);\n    fprintf(f, \"  final result -> %s\\n\", result_yes ? \"MHD_YES\" : \"MHD_NO\");\n    fprintf(f, \"  note: (void) con; statement executed earlier to suppress unused-parameter warning (no runtime effect)\\n\");\n    fflush(f);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  /* Preserve original short-circuit evaluation logic while capturing\n     intermediate state for logging. */\n  int upg_nonnull = (upg_header != NULL);\n  int con_nonnull = (con_header != NULL);\n  int cmp_eq = upg_nonnull && (0 == strcmp (upg_header, WS_UPGRADE_VALUE));\n  int has_upgrade = con_nonnull && (NULL != strstr (con_header, \"Upgrade\"));\n  int result_yes = upg_nonnull && con_nonnull && cmp_eq && has_upgrade;\n\n  /* Log the control path and state to allow reproducible evidence of the\n     no-op (void) con; and the decision taken by the function. */\n  append_websocket_log(upg_header, con_header,\n                       upg_nonnull, con_nonnull,\n                       cmp_eq, has_upgrade, result_yes);\n\n  return result_yes ? MHD_YES : MHD_NO;\n}\n"
}