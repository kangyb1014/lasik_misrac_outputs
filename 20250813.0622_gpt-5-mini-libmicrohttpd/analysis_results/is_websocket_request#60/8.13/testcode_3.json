{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'con' is declared as a non-const pointer (struct MHD_Connection *con) but it is unused (cast to void) and not modified. Per MISRA C 2023 Rule 8.13 it should be const-qualified (const struct MHD_Connection *con) whenever possible. Thus this fragment violates the rule unless the function signature must match an external (non-const) callback prototype, in which case the non-const declaration is required by the API.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_websocket_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_websocket_request as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified is_websocket_request code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append a structured log line to /tmp/logs/483.txt. */\nstatic void is_websocket_request_log(const char *stage,\n                                    struct MHD_Connection *con,\n                                    const char *upg_header,\n                                    const char *con_header,\n                                    int upg_present,\n                                    int con_present,\n                                    int upg_match,\n                                    void *strstr_ptr,\n                                    enum MHD_Result decision)\n{\n    FILE *f = fopen(\"/tmp/logs/483.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only. */\n    }\n\n    fprintf(f, \"[%s] is_websocket_request enter\\n\", stage);\n    fprintf(f, \"  con (non-const as declared) = %p\\n\", (void *)con);\n\n    if (upg_header != NULL)\n    {\n        fprintf(f, \"  upg_header = %p (\\\"%s\\\")\\n\", (const void *)upg_header, upg_header);\n    }\n    else\n    {\n        fprintf(f, \"  upg_header = NULL\\n\");\n    }\n\n    if (con_header != NULL)\n    {\n        fprintf(f, \"  con_header = %p (\\\"%s\\\")\\n\", (const void *)con_header, con_header);\n    }\n    else\n    {\n        fprintf(f, \"  con_header = NULL\\n\");\n    }\n\n    fprintf(f, \"  checks: upg_present=%d, con_present=%d, upg_match=%d, strstr_ptr=%p\\n\",\n            upg_present, con_present, upg_match, strstr_ptr);\n\n    fprintf(f, \"  decision = %s\\n\", (decision == MHD_YES) ? \"MHD_YES\" : \"MHD_NO\");\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n    /* Note: the original code cast away 'con' to avoid an unused parameter\n       warning. To provide evidence for the violation scenario we now log the\n       pointer value (still using the non-const pointer as originally\n       declared) rather than casting it away. The logic of the function is\n       preserved. */\n\n    int upg_present = (upg_header != NULL) ? 1 : 0;\n    int con_present = (con_header != NULL) ? 1 : 0;\n\n    int upg_match = 0;\n    if (upg_present)\n    {\n        upg_match = (0 == strcmp (upg_header, WS_UPGRADE_VALUE)) ? 1 : 0;\n    }\n\n    void *strstr_ptr = NULL;\n    if (con_present)\n    {\n        strstr_ptr = (void *)strstr (con_header, \"Upgrade\");\n    }\n\n    enum MHD_Result result = ((upg_present != 0) && (con_present != 0)\n                              && (upg_match != 0)\n                              && (strstr_ptr != NULL))\n                             ? MHD_YES\n                             : MHD_NO;\n\n    /* Log the control path and state so other agents can reproduce the\n       scenario and see that 'con' was declared non-const and not modified. */\n    is_websocket_request_log(\"probe\", con, upg_header, con_header,\n                             upg_present, con_present, upg_match,\n                             strstr_ptr, result);\n\n    return result;\n}\n"
}