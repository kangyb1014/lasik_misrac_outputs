{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf 'key' points to a buffer that is not null-terminated within its allocated bounds (for example a caller-supplied char key[WS_KEY_LEN] filled with 24 non-zero bytes and no terminating '\\0'), the call to strlen(key) will scan past the buffer looking for a '\\0' and thus access memory beyond the object bounds. There is no prior guarantee in the function that 'key' is a null-terminated string of sufficient size, so this use of strlen can result in out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ws_get_accept_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ws_get_accept_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ws_get_accept_value:\n```c\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified ws_get_accept_value code.\n",
  "test_code": "static enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n  FILE *log = fopen(\"/tmp/logs/479.txt\", \"a\");\n  size_t i;\n\n  if (log)\n  {\n    fprintf(log, \"---- ws_get_accept_value entry ----\\n\");\n    fprintf(log, \"key ptr=%p, val ptr=%p\\n\", (const void *)key, (void *)val);\n  }\n\n  if (NULL == key)\n  {\n    if (log)\n    {\n      fprintf(log, \"key is NULL -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* Probe: dump the first WS_KEY_LEN bytes of the provided key buffer as hex\n     Note: we intentionally only read up to WS_KEY_LEN bytes to avoid reading\n     beyond the expected key buffer size. This is safe for a buffer that is\n     at least WS_KEY_LEN bytes long (the violation scenario uses such a buffer\n     but without a terminating '\\0'). */\n  if (log)\n  {\n    fprintf(log, \"dumping first %d bytes of key (hex):\", WS_KEY_LEN);\n    for (i = 0; i < (size_t)WS_KEY_LEN; ++i)\n    {\n      /* cast to unsigned to avoid sign-extension when printing */\n      fprintf(log, \" %02x\", (unsigned char) key[i]);\n    }\n    fprintf(log, \"\\n\");\n    fprintf(log, \"About to call strlen(key) (this will reproduce the reported behavior if key is not null-terminated)\\n\");\n    fflush(log);\n  }\n\n  /* Preserve original behavior: call strlen once as in the original code. */\n  if (WS_KEY_LEN != strlen (key))\n  {\n    if (log)\n    {\n      size_t observed = strlen(key); /* repeated only for logging in the failure case */\n      fprintf(log, \"strlen(key) returned %zu (expected %d) -> returning MHD_NO\\n\", observed, WS_KEY_LEN);\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"strlen(key) indicates key length == %d -> continuing\\n\", WS_KEY_LEN);\n    fflush(log);\n  }\n\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    if (log)\n    {\n      fprintf(log, \"malloc failed for str -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"malloc returned %p for str (size=%d)\\n\", (void *)str, WS_KEY_LEN + WS_GUID_LEN + 1);\n    fprintf(log, \"About to strncpy(str, key, WS_KEY_LEN + 1) -> this mirrors the original code and may read beyond the key object if the key is not null-terminated\\n\");\n    fflush(log);\n  }\n\n  strncpy (str, key, (WS_KEY_LEN + 1));\n\n  if (log)\n  {\n    /* Dump the portion of str we care about (safe within allocated bounds) */\n    fprintf(log, \"dumping str[0..%d) (hex):\", WS_KEY_LEN + WS_GUID_LEN + 1);\n    for (i = 0; i < (size_t)(WS_KEY_LEN + WS_GUID_LEN + 1); ++i)\n      fprintf(log, \" %02x\", (unsigned char) str[i]);\n    fprintf(log, \"\\n\");\n    fflush(log);\n  }\n\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n\n  if (log)\n  {\n    fprintf(log, \"after appending GUID, dumping first %d bytes used for SHA1 (hex):\", WS_KEY_GUID_LEN);\n    for (i = 0; i < (size_t)WS_KEY_GUID_LEN; ++i)\n      fprintf(log, \" %02x\", (unsigned char) str[i]);\n    fprintf(log, \"\\n\");\n    fflush(log);\n  }\n\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    if (log)\n    {\n      fprintf(log, \"SHA1Result failed -> freeing str and returning MHD_NO\\n\");\n      fclose(log);\n    }\n    free (str);\n    return MHD_NO;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"SHA1Result succeeded, SHA1 hash (hex):\");\n    for (i = 0; i < (size_t)SHA1HashSize; ++i)\n      fprintf(log, \" %02x\", hash[i]);\n    fprintf(log, \"\\n\");\n    fflush(log);\n  }\n\n  free (str);\n\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    if (log)\n    {\n      fprintf(log, \"BASE64Encode failed (len == -1) -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* Log the base64 result pointer and length before null-terminating. */\n  if (log)\n  {\n    fprintf(log, \"BASE64Encode returned len=%zd, val ptr=%p\\n\", len, (void *)(*val));\n    if (NULL != *val && len >= 0)\n    {\n      fprintf(log, \"base64 bytes (hex) up to len:\");\n      for (i = 0; i < (size_t)len; ++i)\n        fprintf(log, \" %02x\", (unsigned char)(*val)[i]);\n      fprintf(log, \"\\n\");\n    }\n    fflush(log);\n  }\n\n  (*val)[len] = '\\0';\n\n  if (log)\n  {\n    fprintf(log, \"Final base64 string (printed safely up to len): \");\n    if (NULL != *val)\n    {\n      /* Print as ASCII but avoid relying on null-termination other than what we just set. */\n      for (i = 0; i < (size_t)len; ++i)\n        fputc((*val)[i], log);\n      fputc('\\n', log);\n    }\n    fprintf(log, \"Returning MHD_YES\\n\");\n    fclose(log);\n  }\n\n  return MHD_YES;\n}\n"
}