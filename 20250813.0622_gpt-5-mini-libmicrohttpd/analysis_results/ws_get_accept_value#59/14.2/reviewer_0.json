{
  "user_message": "An agent A claimed that the following ws_get_accept_value code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. .\n</misra_rule>\n<target_code>\nHere is the original code of ws_get_accept_value.\n```c\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The for loop uses i as the loop counter (for (i = 0; i < len; ++i)) but the loop body modifies i (if (++i < len), another ++i and ++i in the else branch). MISRA C 2023 Rule 14.2 requires the loop counter not be modified in the loop body (and only one loop counter). Modifying i inside the body therefore violates Rule 14.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nws_probe_log(const char *event,\n             const char *key,\n             size_t keylen,\n             const void *ptr,\n             ssize_t len,\n             const char *valstr)\n{\n  FILE *f = fopen(\"/tmp/logs/476.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  fprintf(f, \"EVENT: %s\\n\", event);\n  if (NULL != key)\n  {\n    /* log key up to a reasonable length to avoid huge logs */\n    fprintf(f, \"  key(ptr=%p)='%.*s' (reported_len=%zu)\\n\", (const void *) key, (int) (keylen > 256 ? 256 : keylen), key, keylen);\n  }\n  else\n  {\n    fprintf(f, \"  key=NULL\\n\");\n  }\n  fprintf(f, \"  ptr=%p\\n\", ptr);\n  fprintf(f, \"  len=%zd\\n\", len);\n  if (NULL != valstr)\n  {\n    fprintf(f, \"  val_str='%s'\\n\", valstr);\n  }\n  else\n  {\n    fprintf(f, \"  val_str=NULL\\n\");\n  }\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  ws_probe_log(\"entry\", key, (key != NULL) ? strlen(key) : 0U, (const void *) key, -1, NULL);\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    ws_probe_log(\"invalid_key_or_length\", key, (key != NULL) ? strlen(key) : 0U, NULL, -1, NULL);\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  ws_probe_log(\"after_malloc\", key, strlen(key), (const void *) str, -1, NULL);\n  if (NULL == str)\n  {\n    ws_probe_log(\"malloc_failed\", key, strlen(key), NULL, -1, NULL);\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  ws_probe_log(\"after_strncpy\", key, strlen(key), (const void *) str, -1, str);\n\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    ws_probe_log(\"sha1_failed\", key, strlen(key), (const void *) hash, -1, NULL);\n    free (str);\n    return MHD_NO;\n  }\n  ws_probe_log(\"sha1_success\", key, strlen(key), (const void *) hash, -1, NULL);\n\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  ws_probe_log(\"after_base64encode\", key, strlen(key), (const void *) *val, len, (len >= 0 && NULL != *val) ? *val : NULL);\n\n  if (-1 == len)\n  {\n    ws_probe_log(\"base64_failed\", key, strlen(key), NULL, len, NULL);\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  ws_probe_log(\"success_before_return\", key, strlen(key), (const void *) *val, len, *val);\n  return MHD_YES;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ws_get_accept_value. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is incorrect. The submitted ws_get_accept_value implementation contains no for statement at all, so MISRA C:2023 Rule 14.2 (requirements about a for loop being well-formed and not modifying the loop counter in the body) does not apply to this function. The scenario described by Agent A (a for (i = 0; i < len; ++i) loop with ++i inside the body) refers to a different piece of code that is not present in ws_get_accept_value. (If the implicated behaviour occurred inside a called function such as BASE64Encode or SHA1 routines, that would be an issue in those functions, but no such code was provided to substantiate the claim.) Please supply the actual function containing the shown for loop if you want a targeted MISRA 14.2 assessment."
}