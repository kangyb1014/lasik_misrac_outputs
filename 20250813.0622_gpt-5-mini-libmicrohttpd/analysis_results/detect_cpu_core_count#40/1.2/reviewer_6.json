{
  "user_message": "An agent A claimed that the following detect_cpu_core_count code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of detect_cpu_core_count.\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The typedef uses the WINAPI calling-convention specifier in the function-pointer declaration. WINAPI is a Windows/MSVC calling-convention macro (expanding to __stdcall or similar), which is a compiler-specific language extension. This therefore violates MISRA C 2023 Rule 1.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nlog_probef (const char *fmt, ...)\n{\n  FILE *fp = fopen (\"/tmp/logs/320.txt\", \"a\");\n  if (NULL == fp)\n  {\n    /* If logging fails, silently return to avoid changing program flow. */\n    return;\n  }\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (fp, fmt, ap);\n  va_end (ap);\n  fputc ('\\n', fp);\n  fclose (fp);\n}\nstatic void\nlog_probe_note (const char *note)\n{\n  log_probef (\"[detect_cpu_core_count] %s\", note);\n}\n\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n\n  log_probe_note (\"enter\");\n\n  /* Log presence of the WINAPI macro (compile-time check). */\n#ifdef WINAPI\n  log_probe_note (\"WINAPI macro is defined (possible Windows/MSVC calling-convention macro)\");\n#else\n  log_probe_note (\"WINAPI macro is NOT defined\");\n#endif\n\n  log_probe_note (\"calling mhd_tool_get_system_cpu_count() to get system CPU count\");\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  log_probef (\"mhd_tool_get_system_cpu_count() returned: %d\", sys_cpu_count);\n\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    log_probe_note (\"system CPU detection failed or returned non-positive value; entering fallback path\");\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n\n    log_probe_note (\"calling mhd_tool_get_proc_cpu_count() to get process-available CPU count\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    log_probef (\"mhd_tool_get_proc_cpu_count() returned: %d\", proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n      log_probe_note (\"using process-available CPU count as fallback\");\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    log_probe_note (\"MHD_REAL_CPU_COUNT is defined (compile-time hardcoded fallback may be available)\");\n    if (0 >= sys_cpu_count)\n    {\n      log_probe_note (\"using configure-detected hardcoded number as fallback (MHD_REAL_CPU_COUNT)\");\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#else\n    log_probe_note (\"MHD_REAL_CPU_COUNT is NOT defined\");\n#endif\n    if (0 >= sys_cpu_count)\n    {\n      log_probe_note (\"all detection fallbacks failed; defaulting to 1 CPU core\");\n      sys_cpu_count = 1;\n    }\n    log_probef (\"final assumed sys_cpu_count (after fallbacks): %d\", sys_cpu_count);\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    log_probef (\"system CPU detection succeeded: %d cores detected\", sys_cpu_count);\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n\n  log_probef (\"exit with value: %u\", (unsigned int) sys_cpu_count);\n  return (unsigned int) sys_cpu_count;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for detect_cpu_core_count. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 1.2 prohibits use of compiler-specific language extensions (e.g. __stdcall, __attribute__, or platform calling-convention macros such as WINAPI that expand to such tokens). The supplied target code does not contain any calling-convention specifier or other compiler extension: there is no WINAPI, __stdcall, __attribute__, or similar token present. MHD_REAL_CPU_COUNT is a project configuration macro, not a compiler language extension. The added test logging that checks #ifdef WINAPI simply tests for that macro but the original function contains no such construct. Therefore there is no evidence the presented code violates Rule 1.2. (If code actually used a macro that expands to a compiler-specific keyword, that would be a correct Rule 1.2 finding; no such usage is present here.)"
}