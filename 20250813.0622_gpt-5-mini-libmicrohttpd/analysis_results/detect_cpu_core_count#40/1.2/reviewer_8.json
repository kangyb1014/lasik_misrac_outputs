{
  "user_message": "An agent A claimed that the following detect_cpu_core_count code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of detect_cpu_core_count.\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The typedef uses the WINAPI macro (a Windows calling-convention specifier) which expands to a compiler-specific calling convention (e.g. __stdcall or equivalent) \u2014 a non\u2011standard language extension provided by toolchains; this violates MISRA C 2023 Rule 1.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_check_compiler_extensions(FILE *log)\n{\n  if (NULL == log)\n    return;\n\n  fprintf(log, \"--- Compiler/extension probe start ---\\n\");\n#ifdef _MSC_VER\n  fprintf(log, \"_MSC_VER defined: %d\\n\", _MSC_VER);\n#else\n  fprintf(log, \"_MSC_VER not defined\\n\");\n#endif\n#ifdef __GNUC__\n  fprintf(log, \"__GNUC__ defined: %d.%d.%d\\n\", __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);\n#else\n  fprintf(log, \"__GNUC__ not defined\\n\");\n#endif\n#ifdef WINAPI\n  /* WINAPI is commonly defined in Windows headers as a calling-convention macro. */\n  fprintf(log, \"WINAPI defined (suggests use of Windows calling-convention macro)\\n\");\n#else\n  fprintf(log, \"WINAPI not defined\\n\");\n#endif\n#ifdef __cdecl\n  fprintf(log, \"__cdecl macro defined\\n\");\n#else\n  fprintf(log, \"__cdecl not defined (or not a macro)\\n\");\n#endif\n#ifdef __stdcall\n  fprintf(log, \"__stdcall macro defined\\n\");\n#else\n  /* Note: __stdcall is typically a keyword/attribute rather than a macro; detection as a macro may fail. */\n  fprintf(log, \"__stdcall not detected as macro (may still be supported as compiler keyword)\\n\");\n#endif\n#ifdef __fastcall\n  fprintf(log, \"__fastcall macro defined\\n\");\n#else\n  fprintf(log, \"__fastcall not defined\\n\");\n#endif\n#ifdef __attribute__\n  fprintf(log, \"__attribute__ appears available\\n\");\n#else\n  fprintf(log, \"__attribute__ macro not detected\\n\");\n#endif\n  fprintf(log, \"--- Compiler/extension probe end ---\\n\");\n}\nstatic FILE *\nprobe_open_log(void)\n{\n  FILE *log = fopen(\"/tmp/logs/320.txt\", \"a\");\n  if (NULL == log)\n  {\n    /* Fallback: try /tmp/320.txt if the /tmp/logs directory doesn't exist. */\n    log = fopen(\"/tmp/320.txt\", \"a\");\n    if (NULL != log)\n      fprintf(log, \"(fallback) Could not open /tmp/logs/320.txt; using /tmp/320.txt instead.\\n\");\n  }\n  return log;\n}\n\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  FILE *log = probe_open_log();\n  if (log)\n  {\n    fprintf(log, \"detect_cpu_core_count: entry\\n\");\n  }\n\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (log)\n    fprintf(log, \"mhd_tool_get_system_cpu_count() -> %d\\n\", sys_cpu_count);\n\n  /* Probe compiler/extension state early so logs capture environment before branching. */\n  probe_check_compiler_extensions(log);\n\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    if (log)\n      fprintf(log, \"entered fallback branch: system count invalid (%d)\\n\", sys_cpu_count);\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (log)\n      fprintf(log, \"mhd_tool_get_proc_cpu_count() -> %d\\n\", proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      if (log)\n        fprintf(log, \"using proc_cpu_count=%d as fallback\\n\", proc_cpu_count);\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (log)\n      fprintf(log, \"MHD_REAL_CPU_COUNT defined as %d\\n\", MHD_REAL_CPU_COUNT);\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n      if (log)\n        fprintf(log, \"used MHD_REAL_CPU_COUNT fallback -> sys_cpu_count=%d\\n\", sys_cpu_count);\n    }\n#endif\n    if (0 >= sys_cpu_count)\n    {\n      if (log)\n        fprintf(log, \"final fallback to 1\\n\");\n      sys_cpu_count = 1;\n    }\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    if (log)\n      fprintf(log, \"Assuming %d logical CPU core(s) (final)\\n\", sys_cpu_count);\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    if (log)\n      fprintf(log, \"Detected %d logical CPU core(s) (final)\\n\", sys_cpu_count);\n  }\n\n  if (log)\n  {\n    fprintf(log, \"detect_cpu_core_count: exit -> sys_cpu_count=%d\\n\", sys_cpu_count);\n    fclose(log);\n  }\n  return (unsigned int) sys_cpu_count;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for detect_cpu_core_count. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 1.2 forbids use of language extensions that are explicitly documented by a toolchain as non\u2011standard. The provided detect_cpu_core_count implementation contains only standard C constructs (static function, int, unsigned int cast, fprintf/printf/fopen, preprocessor conditional on MHD_REAL_CPU_COUNT). There is no typedef or use of WINAPI, __stdcall, __cdecl, or any other compiler-specific calling-convention keyword/attribute in the shown code. The additional test/probe code only attempts to detect whether various compiler macros are defined; it does not introduce or use a language extension in the detect_cpu_core_count function itself. Therefore the agent A report (that detect_cpu_core_count violates MISRA C 2023 Rule 1.2 due to use of WINAPI or similar) is not correct."
}