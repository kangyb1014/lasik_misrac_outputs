{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe typedef uses the WINAPI calling-convention specifier in the function-pointer declaration. WINAPI is a Windows/MSVC calling-convention macro (expanding to __stdcall or similar), which is a compiler-specific language extension. This therefore violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified detect_cpu_core_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/320.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of detect_cpu_core_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of detect_cpu_core_count:\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\nPlease provide the modified detect_cpu_core_count code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers: append human-readable logs to /tmp/logs/320.txt */\nstatic void\nlog_probef (const char *fmt, ...)\n{\n  FILE *fp = fopen (\"/tmp/logs/320.txt\", \"a\");\n  if (NULL == fp)\n  {\n    /* If logging fails, silently return to avoid changing program flow. */\n    return;\n  }\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (fp, fmt, ap);\n  va_end (ap);\n  fputc ('\\n', fp);\n  fclose (fp);\n}\n\nstatic void\nlog_probe_note (const char *note)\n{\n  log_probef (\"[detect_cpu_core_count] %s\", note);\n}\n\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n\n  log_probe_note (\"enter\");\n\n  /* Log presence of the WINAPI macro (compile-time check). */\n#ifdef WINAPI\n  log_probe_note (\"WINAPI macro is defined (possible Windows/MSVC calling-convention macro)\");\n#else\n  log_probe_note (\"WINAPI macro is NOT defined\");\n#endif\n\n  log_probe_note (\"calling mhd_tool_get_system_cpu_count() to get system CPU count\");\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  log_probef (\"mhd_tool_get_system_cpu_count() returned: %d\", sys_cpu_count);\n\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    log_probe_note (\"system CPU detection failed or returned non-positive value; entering fallback path\");\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n\n    log_probe_note (\"calling mhd_tool_get_proc_cpu_count() to get process-available CPU count\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    log_probef (\"mhd_tool_get_proc_cpu_count() returned: %d\", proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n      log_probe_note (\"using process-available CPU count as fallback\");\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    log_probe_note (\"MHD_REAL_CPU_COUNT is defined (compile-time hardcoded fallback may be available)\");\n    if (0 >= sys_cpu_count)\n    {\n      log_probe_note (\"using configure-detected hardcoded number as fallback (MHD_REAL_CPU_COUNT)\");\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#else\n    log_probe_note (\"MHD_REAL_CPU_COUNT is NOT defined\");\n#endif\n    if (0 >= sys_cpu_count)\n    {\n      log_probe_note (\"all detection fallbacks failed; defaulting to 1 CPU core\");\n      sys_cpu_count = 1;\n    }\n    log_probef (\"final assumed sys_cpu_count (after fallbacks): %d\", sys_cpu_count);\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    log_probef (\"system CPU detection succeeded: %d cores detected\", sys_cpu_count);\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n\n  log_probef (\"exit with value: %u\", (unsigned int) sys_cpu_count);\n  return (unsigned int) sys_cpu_count;\n}\n"
}