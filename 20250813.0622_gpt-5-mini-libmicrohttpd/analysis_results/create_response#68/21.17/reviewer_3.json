{
  "user_message": "An agent A claimed that the following create_response code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of create_response.\n```c\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code calls strcmp(method, MHD_HTTP_METHOD_GET) and strcmp(method, MHD_HTTP_METHOD_HEAD) without any prior check that 'method' is non-NULL and points to a null-terminated object. If 'method' were NULL (or not NUL-terminated), strcmp would dereference/read beyond the bounds of the object referenced by its pointer parameter, violating MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\ncreate_response_log(const char *stage,\n                    const char *url,\n                    const char *method,\n                    const char *version,\n                    const char *upload_data,\n                    size_t upload_data_size,\n                    void **req_cls,\n                    struct Request *request,\n                    struct Session *session)\n{\n  FILE *fp = fopen(\"/tmp/logs/551.txt\", \"a\");\n  if (NULL == fp)\n    return;\n\n  fprintf(fp, \"--- create_response: %s ---\\n\", stage);\n  fprintf(fp, \"url_ptr=%p, method_ptr=%p, version_ptr=%p, upload_data_ptr=%p\\n\",\n          (const void *) url,\n          (const void *) method,\n          (const void *) version,\n          (const void *) upload_data);\n  if (req_cls != NULL)\n    fprintf(fp, \"req_cls_ptr=%p, *req_cls=%p\\n\", (void *) req_cls, (void *) *req_cls);\n  else\n    fprintf(fp, \"req_cls_ptr=NULL\\n\");\n\n  fprintf(fp, \"upload_data_size=%zu\\n\", upload_data_size);\n  fprintf(fp, \"request_ptr=%p, session_ptr=%p\\n\",\n          (void *) request, (void *) session);\n  fprintf(fp, \"(Note: string pointer values printed, contents NOT dereferenced here)\\n\");\n  fprintf(fp, \"-----------------------------\\n\");\n  fclose(fp);\n}\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log entry state */\n  create_response_log(\"entry\", url, method, version, upload_data,\n                      (upload_data_size != NULL) ? *upload_data_size : 0,\n                      req_cls, NULL, NULL);\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    create_response_log(\"request_null_before_alloc\", url, method, version,\n                        upload_data,\n                        (upload_data_size != NULL) ? *upload_data_size : 0,\n                        req_cls, request, NULL);\n\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      create_response_log(\"calloc_failed\", url, method, version, upload_data,\n                          (upload_data_size != NULL) ? *upload_data_size : 0,\n                          req_cls, request, NULL);\n      return MHD_NO;\n    }\n    *req_cls = request;\n\n    /* Log after allocation */\n    create_response_log(\"request_allocated\", url, method, version, upload_data,\n                        (upload_data_size != NULL) ? *upload_data_size : 0,\n                        req_cls, request, NULL);\n\n    /* Log just before strcmp for POST */\n    create_response_log(\"before_strcmp_post_initial\", url, method, version,\n                        upload_data,\n                        (upload_data_size != NULL) ? *upload_data_size : 0,\n                        req_cls, request, NULL);\n\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        create_response_log(\"post_processor_failed\", url, method, version,\n                            upload_data,\n                            (upload_data_size != NULL) ? *upload_data_size : 0,\n                            req_cls, request, NULL);\n        return MHD_NO; /* internal error */\n      }\n      create_response_log(\"post_processor_created\", url, method, version,\n                          upload_data,\n                          (upload_data_size != NULL) ? *upload_data_size : 0,\n                          req_cls, request, NULL);\n    }\n    return MHD_YES;\n  }\n\n  create_response_log(\"have_request\", url, method, version, upload_data,\n                      (upload_data_size != NULL) ? *upload_data_size : 0,\n                      req_cls, request, NULL);\n\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      create_response_log(\"get_session_failed\", url, method, version,\n                          upload_data,\n                          (upload_data_size != NULL) ? *upload_data_size : 0,\n                          req_cls, request, NULL);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n\n  /* Log just before potential POST processing on second pass */\n  create_response_log(\"before_post_processing\", url, method, version,\n                      upload_data,\n                      (upload_data_size != NULL) ? *upload_data_size : 0,\n                      req_cls, request, session);\n\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      create_response_log(\"post_more_data_expected\", url, method, version,\n                          upload_data,\n                          (upload_data_size != NULL) ? *upload_data_size : 0,\n                          req_cls, request, session);\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n\n    create_response_log(\"post_handled_method_set_get\", url, method, version,\n                        upload_data,\n                        (upload_data_size != NULL) ? *upload_data_size : 0,\n                        req_cls, request, session);\n  }\n\n  /* Log just before GET/HEAD handling */\n  create_response_log(\"before_get_head_check\", url, method, version,\n                      upload_data,\n                      (upload_data_size != NULL) ? *upload_data_size : 0,\n                      req_cls, request, session);\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    create_response_log(\"page_lookup_start\", url, method, version,\n                        upload_data,\n                        (upload_data_size != NULL) ? *upload_data_size : 0,\n                        req_cls, request, session);\n\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n\n    create_response_log(\"page_served_return\", url, method, version,\n                        upload_data,\n                        (upload_data_size != NULL) ? *upload_data_size : 0,\n                        req_cls, request, session);\n\n    return ret;\n  }\n  /* unsupported HTTP method */\n  create_response_log(\"unsupported_method\", url, method, version,\n                      upload_data,\n                      (upload_data_size != NULL) ? *upload_data_size : 0,\n                      req_cls, request, session);\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for create_response. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s scenario is a theoretical but not demonstrated MISRA 21.17 violation. strcmp() will indeed read through the object pointed to by method (and thus will read out-of-bounds if method is NULL or not NUL\u2011terminated). However, whether the code actually violates Rule 21.17 depends on the guaranteed contract of the caller: this function is an MHD access\u2011handler callback and the libmicrohttpd API supplies method (and url/version) as valid, NUL\u2011terminated strings (i.e. not NULL). Given that contract, the strcmp calls do not cause out\u2011of\u2011bounds accesses and so do not violate 21.17. If there is any doubt about the caller guaranteeing non\u2011NULL, NUL\u2011terminated arguments, defensive checks (e.g. test method != NULL) should be added to satisfy MISRA unconditionally. Agent A did not provide evidence that method can be NULL or unterminated, so the report as a definite violation is not correct."
}