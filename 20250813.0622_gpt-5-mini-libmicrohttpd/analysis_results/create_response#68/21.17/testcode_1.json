{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(pages[i].url, url) without validating that the incoming parameter 'url' is non-NULL (only pages[i].url is checked for NULL). If 'url' were NULL, passing it to strcmp would dereference a NULL pointer and could read beyond the bounds of the referenced object. Similarly, if pages[i].url did not point to a properly NUL-terminated character array, strcmp could read past its bounds. For example, an HTTP request that yields a NULL url (or a malformed pages[] entry lacking a terminating '\\0') would trigger out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified create_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/551.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of create_response as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of create_response:\n```c\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified create_response code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe helper: append a timestamped log line to /tmp/logs/551.txt */\nstatic void\nlog_append (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/551.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t t = time (NULL);\n  fprintf (f, \"[%ld] \", (long) t);\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n/* Safe string indicator (do not dereference potentially invalid pointers) */\nstatic const char *\nsafe_indicator (const char *s)\n{\n  return (s == NULL) ? \"(null)\" : \"(non-null)\";\n}\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log function entry and key parameters (do not dereference url/pages pointers) */\n  log_append (\"enter create_response: connection=%p method=%p (%s) url=%p (%s) upload_data=%p upload_data_size=%p\",\n              (void *) connection,\n              (void *) method, safe_indicator (method),\n              (void *) url, safe_indicator (url),\n              (void *) upload_data, (void *) upload_data_size);\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      log_append (\"calloc failed: errno=%d (%s)\", errno, strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    log_append (\"allocated Request at %p and stored in req_cls\", (void *) request);\n\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      log_append (\"setup post processor: pp=%p\", (void *) request->pp);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        log_append (\"Failed to setup post processor for url=%p (%s)\", (void *) url, safe_indicator (url));\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    log_append (\"get_session returned %p for request %p\", (void *) request->session, (void *) request);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      log_append (\"Failed to setup session for url=%p (%s)\", (void *) url, safe_indicator (url));\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    log_append (\"processing POST: upload_data=%p upload_data_size=%p value=%zu\",\n                (void *) upload_data, (void *) upload_data_size, upload_data_size ? *upload_data_size : 0);\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n    log_append (\"POST finished, now serving GET: method=%p url=%p (post_url=%p)\", (void *) method, (void *) url, (void *) request->post_url);\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n    {\n      /* Log the comparison about to happen without dereferencing pages[i].url or url */\n      log_append (\"comparing page index=%u pages_url_ptr=%p pages_url_is_null=%s url_ptr=%p url_is_null=%s\",\n                  i,\n                  (void *) pages[i].url, pages[i].url ? \"no\" : \"yes\",\n                  (void *) url, url ? \"no\" : \"yes\");\n      i++;\n    }\n\n    /* Log selection result (note: pages[i].url might be NULL, do not dereference) */\n    log_append (\"selected page index=%u pages_url_ptr=%p url_ptr=%p\",\n                i, (void *) pages[i].url, (void *) url);\n\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n    {\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n      log_append (\"handler failed for page index=%u url_ptr=%p ret=%d\",\n                  i, (void *) url, (int) ret);\n    }\n    else\n    {\n      log_append (\"handler succeeded for page index=%u url_ptr=%p ret=%d\",\n                  i, (void *) url, (int) ret);\n    }\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  log_append (\"unsupported method: method=%p url=%p returned %d\",\n              (void *) method, (void *) url, (int) ret);\n  return ret;\n}\n"
}