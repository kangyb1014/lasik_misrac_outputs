{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns to the pointer parameter 'method' (method = MHD_HTTP_METHOD_GET;) to fake a GET after POST processing. This modifies the parameter variable itself (the pointer), which violates MISRA C 2023 Rule 17.8 (function parameters shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified create_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/549.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of create_response as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of create_response:\n```c\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified create_response code.\n",
  "test_code": "static FILE *\nopen_log_file(void)\n{\n  FILE *f = fopen(\"/tmp/logs/549.txt\", \"a\");\n  if (NULL == f)\n    f = fopen(\"/tmp/549.txt\", \"a\"); /* fallback if directory missing */\n  return f;\n}\n\nstatic void\nlog_msg(const char *msg)\n{\n  FILE *f = open_log_file();\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s\\n\", msg);\n  fclose(f);\n}\n\nstatic void\nlog_state_str(const char *label, const char *s)\n{\n  FILE *f = open_log_file();\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s: %s\\n\", label, (s != NULL) ? s : \"(null)\");\n  fclose(f);\n}\n\nstatic void\nlog_state_ptr(const char *label, const void *p)\n{\n  FILE *f = open_log_file();\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s: %p\\n\", label, p);\n  fclose(f);\n}\n\nstatic void\nlog_state_size(const char *label, size_t v)\n{\n  FILE *f = open_log_file();\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s: %zu\\n\", label, v);\n  fclose(f);\n}\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* entry log */\n  log_msg(\"enter create_response\");\n  log_state_str(\"entry method\", method);\n  log_state_str(\"entry url\", url);\n  log_state_ptr(\"req_cls ptr\", req_cls);\n  if (req_cls != NULL)\n    log_state_ptr(\"*req_cls (before)\", *req_cls);\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    log_msg(\"request is NULL: allocating new Request\");\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      log_msg(\"calloc failed in create_response\");\n      return MHD_NO;\n    }\n    *req_cls = request;\n    log_state_ptr(\"*req_cls (after alloc)\", *req_cls);\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      log_msg(\"initial request: method == POST -> creating post processor\");\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        log_state_str(\"post processor setup failed for url\", url);\n        return MHD_NO; /* internal error */\n      }\n      log_state_ptr(\"post processor created\", request->pp);\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    log_msg(\"request->session is NULL: obtaining session\");\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      log_state_str(\"failed to get session for url\", url);\n      return MHD_NO; /* internal error */\n    }\n    log_state_ptr(\"request->session\", request->session);\n  }\n  session = request->session;\n  session->start = time (NULL);\n  log_msg(\"session start timestamp recorded\");\n\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    log_msg(\"handling POST data (second phase)\");\n    log_state_ptr(\"request->pp (before post_process)\", request->pp);\n    log_state_size(\"*upload_data_size (before)\", *upload_data_size);\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n    {\n      log_msg(\"MHD_post_process failed\");\n      return MHD_NO;\n    }\n    if (0 != *upload_data_size)\n    {\n      log_msg(\"upload_data_size != 0 -> more data expected, consume and return\");\n      *upload_data_size = 0;\n      log_state_size(\"*upload_data_size (reset)\", *upload_data_size);\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    log_msg(\"post processor destroyed\");\n    request->pp = NULL;\n    log_state_str(\"method (before faking GET)\", method);\n    /* The code below reassigns the parameter 'method' to fake a GET after POST\n       processing. This is the operation reported as violating MISRA C Rule 17.8\n       in the supplied scenario. The assignment is preserved to keep original\n       behaviour; we log the change for evidence. */\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    log_state_str(\"method (after faking GET)\", method);\n    if (NULL != request->post_url)\n    {\n      log_state_str(\"post_url present, replacing url\", request->post_url);\n      url = request->post_url;\n      log_state_str(\"url (after replace)\", url);\n    }\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    log_state_str(\"enter GET/HEAD branch, url\", url);\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    log_state_size(\"selected page index\", i);\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    log_state_ptr(\"pages[i].handler_cls\", pages[i].handler_cls);\n    log_state_str(\"final url served\", url);\n    log_state_str(\"handler return status\", (ret == MHD_YES) ? \"MHD_YES\" : \"MHD_NO or other\");\n    return ret;\n  }\n  /* unsupported HTTP method */\n  log_state_str(\"unsupported method\", method);\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  log_state_str(\"queued response status\", (ret == MHD_YES) ? \"MHD_YES\" : \"MHD_NO or other\");\n  return ret;\n}\n"
}