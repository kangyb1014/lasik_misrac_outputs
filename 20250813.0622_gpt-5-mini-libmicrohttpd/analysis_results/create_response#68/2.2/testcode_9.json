{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"(void) version;\" is an executed no-op whose removal would not affect program behaviour \u2014 it exists solely to silence an unused-parameter warning. According to MISRA C 2023 Rule 2.2 (dead code), this is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified create_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/546.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of create_response as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of create_response:\n```c\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified create_response code.\n",
  "test_code": "static void\nprobe_log_event(const char *tag, const char *msg, const void *p)\n{\n  FILE *f = fopen(\"/tmp/logs/546.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"%s: %s p=%p\\n\", tag, (msg ? msg : \"\"), p);\n  fclose(f);\n}\n\nstatic void\nprobe_log_three(const char *tag, const char *s1, const char *s2, size_t n)\n{\n  FILE *f = fopen(\"/tmp/logs/546.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"%s: s1=%s s2=%s n=%zu\\n\",\n          tag,\n          (s1 ? s1 : \"(null)\"),\n          (s2 ? s2 : \"(null)\"),\n          n);\n  fclose(f);\n}\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log entry and the fact that the (void) version; statement executed. */\n  probe_log_event(\"ENTRY\", \"create_response entry\", cls);\n  probe_log_event(\"PARAM_URL\", url, (const void *) method);\n  probe_log_event(\"VOID_VERSION_EXECUTED\", \"(void) version executed\", (const void *) version);\n\n  request = *req_cls;\n  probe_log_event(\"REQ_PTR_BEFORE\", \"request pointer before branch\", request);\n  if (NULL == request)\n  {\n    probe_log_event(\"REQ_NULL\", url, (const void *) method);\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      probe_log_event(\"CALLOC_FAIL\", strerror (errno), NULL);\n      return MHD_NO;\n    }\n    *req_cls = request;\n    probe_log_event(\"REQ_CREATED\", \"new request allocated\", request);\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      probe_log_event(\"POST_SETUP\", url, NULL);\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        probe_log_event(\"POST_SETUP_FAIL\", url, NULL);\n        return MHD_NO; /* internal error */\n      }\n      probe_log_event(\"POST_SETUP_OK\", \"post processor created\", request->pp);\n    }\n    probe_log_event(\"RETURN_AFTER_SETUP\", \"returning MHD_YES after setup\", NULL);\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    probe_log_event(\"SESSION_NULL\", \"getting session\", connection);\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      probe_log_event(\"SESSION_FAIL\", url, NULL);\n      return MHD_NO; /* internal error */\n    }\n    probe_log_event(\"SESSION_OK\", \"session attached to request\", request->session);\n  }\n  session = request->session;\n  session->start = time (NULL);\n  probe_log_three(\"SESSION_START\", url, method, (size_t) session->start);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    probe_log_three(\"POST_PROCESSING\", url, method, *upload_data_size);\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n    {\n      probe_log_event(\"POST_PROCESS_FAIL\", url, NULL);\n      return MHD_NO;\n    }\n    if (0 != *upload_data_size)\n    {\n      probe_log_event(\"POST_MORE_DATA\", \"more upload data pending\", (const void *) (uintptr_t) *upload_data_size);\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    probe_log_event(\"POST_DONE\", \"destroyed post processor\", request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    probe_log_event(\"FAKE_GET\", \"method set to GET after POST\", NULL);\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    probe_log_event(\"FIND_PAGE_START\", url, NULL);\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    probe_log_three(\"PAGE_SELECTED\", pages[i].url, url, i);\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    probe_log_event(\"PAGE_HANDLER_RETURN\", \"handler returned\", (const void *) ret);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  probe_log_event(\"UNSUPPORTED_METHOD\", method, url);\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  probe_log_event(\"RETURN_METHOD_ERROR\", \"queued METHOD_ERROR response\", (const void *) ret);\n  return ret;\n}\n"
}