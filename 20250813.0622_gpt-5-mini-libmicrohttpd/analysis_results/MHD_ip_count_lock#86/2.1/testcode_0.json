{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro MHD_USE_POSIX_THREADS is defined as 1, so the preprocessor condition in MHD_ip_count_lock (#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)) is always true; the #else branch (containing '(void) daemon;') can never be compiled/entered. That code is therefore unreachable in the project configuration and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_count_lock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_count_lock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_count_lock code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <unistd.h>\n#include <stdint.h>\n\n/* Probe helper: append a timestamped log entry about which branch is compiled/executed\n * and some state about the daemon. This preserves original logic and only adds\n * non-intrusive logging for reproduction/evidence. */\nstatic void\nmhd_ip_count_lock_log_probe(const char *branch, struct MHD_Daemon *daemon)\n{\n  FILE *f = fopen(\"/tmp/logs/689.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  time_t t = time(NULL);\n  /* Print basic state: timestamp, PID, branch taken, pointer values. */\n  fprintf(f, \"%ld BRANCH=%s pid=%ld daemon=%p\", (long)t,\n          branch, (long)getpid(), (void *)daemon);\n\n  /* If daemon is non-NULL and its 'master' member is available in this\n   * translation unit (as in the original code), print it too. Keep this\n   * guarded to avoid side effects if daemon is NULL. */\n  if (daemon != NULL)\n    fprintf(f, \" master=%p\", (void *)daemon->master);\n\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Log that the threaded branch is compiled/executed, then perform the\n   * original lock operation. */\n  mhd_ip_count_lock_log_probe(\"THREADS\", daemon);\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  /* Log that the non-threaded branch is compiled/executed. In typical\n   * project configurations that define MHD_USE_POSIX_THREADS this branch\n   * will be omitted by the preprocessor; the absence of this log entry in\n   * /tmp/logs/689.txt demonstrates the unreachable (compiled-out) code. */\n  mhd_ip_count_lock_log_probe(\"NO_THREADS\", daemon);\n  (void) daemon;\n#endif\n}\n"
}