{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_ip_count_lock:\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_mutex_lock_chk_(pmutex) do{if(!MHD_mutex_lock_(pmutex))MHD_PANIC(_(\"Failed to lock mutex.\\n\"));\\\n}while(0)\n...\n#define MHD_USE_POSIX_THREADS 1\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the provided function and related macros for use of compiler-specific language extensions. Nothing in the submitted fragments uses any compiler extension that is explicitly documented as such (for example: __attribute__, __asm, __builtin_..., statement-expressions ({ ... }), typeof, vector-size attributes, GCC nested functions,asm labels, #pragma GCC, or other vendor-specific keywords). Specific observations:\n\n- The function signature (static void MHD_ip_count_lock (struct MHD_Daemon *daemon)) is standard C.\n- The use of the mhd_assert macro (defined as ((void)0)) is a normal macro; it does not rely on any compiler extension.\n- The preprocessor conditional (#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)) and the #define MHD_USE_POSIX_THREADS 1 are standard preprocessor usage.\n- The (void) daemon; cast is a standard way to silence unused-parameter warnings; not a language extension.\n- The MHD_mutex_lock_chk_ macro uses a do { ... } while (0) wrapper and a backslash line continuation; both are standard and portable macro idioms.\n- Identifiers with trailing underscores (e.g., MHD_mutex_lock_) are user identifiers; although leading underscores followed by uppercase or another underscore are reserved, these identifiers do not violate that rule and are not compiler extensions.\n- The use of _(...) inside the MHD_PANIC call looks like the common gettext macro for translations; that is a library macro, not a compiler language extension.\n\nBecause none of the above constructs are compiler-specific extensions, there are no fragments requiring investigation under MISRA C 2023 Rule 1.2 for language extensions."
}