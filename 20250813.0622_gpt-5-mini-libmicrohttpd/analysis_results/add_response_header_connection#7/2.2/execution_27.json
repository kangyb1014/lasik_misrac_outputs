{
  "result": "success",
  "message": "enter add_response_header_connection: value='a,b,c,d,e', response=0x55dda3dc02a0\nbranch: no existing Connection header; response->flags_auto=0x0\nabout to mhd_assert: MHD_get_response_element_n_(...) == NULL\nmhd_assert executed (no-op macro expected)\nabout to mhd_assert: flags_auto has no HAS_CONNECTION_CLOSE\nmhd_assert executed (no-op macro expected)\ncomputed lengths: value_len=9, old_value_len=0\nnorm_len tentative=14\nbuf_size=14\nafter MHD_str_remove_token_caseless_: value_has_close=0, norm_len_s=13\nabout to mhd_assert: 0 <= norm_len_s\nmhd_assert executed (no-op macro expected)\nabout to mhd_assert: check pos consistency; value_has_close=0, already_has_close=0, pos=0, old_value_len=0, MHD_STATICSTR_LEN_(\"close, \")=7\nmhd_assert executed (no-op macro expected)\nadded new norm tokens; pos=13\nabout to mhd_assert: buf_size > pos; buf_size=14, pos=13\nmhd_assert executed (no-op macro expected)\nnull-terminated buf at pos=13; buf='a, b, c, d, e'\ninserted new header; response->flags_auto=0x1, new_hdr=0x55dda3dc0680, new_hdr->value='a, b, c, d, e'\nenter add_response_header_connection: value='i,k,l,m,n,o,p,close', response=0x55dda3dc02a0\nbranch: no existing Connection header; response->flags_auto=0x0\nabout to mhd_assert: MHD_get_response_element_n_(...) == NULL\nmhd_assert executed (no-op macro expected)\nabout to mhd_assert: flags_auto has no HAS_CONNECTION_CLOSE\nmhd_assert executed (no-op macro expected)\ncomputed lengths: value_len=19, old_value_len=0\nnorm_len tentative=29\nbuf_size=29\nafter MHD_str_remove_token_caseless_: value_has_close=1, norm_len_s=19\nabout to mhd_assert: 0 <= norm_len_s\nmhd_assert executed (no-op macro expected)\nabout to mhd_assert: buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1; buf_size=29, old_value_len=0, norm_len=19\nmhd_assert executed (no-op macro expected)\ninserted 'close' token; pos=5\nabout to mhd_assert: check pos consistency; value_has_close=1, already_has_close=0, pos=7, old_value_len=0, MHD_STATICSTR_LEN_(\"close, \")=7\nmhd_assert executed (no-op macro expected)\nadded new norm tokens; pos=26\nabout to mhd_assert: buf_size > pos; buf_size=29, pos=26\nmhd_assert executed (no-op macro expected)\nnull-terminated buf at pos=26; buf='close, i, k, l, m, n, o, p'\ninserted new header; response->flags_auto=0x3, new_hdr=0x55dda3dc06f0, new_hdr->value='close, i, k, l, m, n, o, p'\nenter add_response_header_connection: value='1,2,3,4,5,6,7,close', response=0x55dda3dc02a0\nbranch: no existing Connection header; response->flags_auto=0x0\nabout to mhd_assert: MHD_get_response_element_n_(...) == NULL\nmhd_assert executed (no-op macro expected)\nabout to mhd_assert: flags_auto has no HAS_CONNECTION_CLOSE\nmhd_assert executed (no-op macro expected)\ncomputed lengths: value_len=19, old_value_len=0\nnorm_len tentative=29\nbuf_size=29\nafter MHD_str_remove_token_caseless_: value_has_close=1, norm_len_s=19\nabout to mhd_assert: 0 <= norm_len_s\nmhd_assert executed (no-op macro expected)\nabout to mhd_assert: buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1; buf_size=29, old_value_len=0, norm_len=19\nmhd_assert executed (no-op macro expected)\ninserted 'close' token; pos=5\nabout to mhd_assert: check pos consistency; value_has_close=1, already_has_close=0, pos=7, old_value_len=0, MHD_STATICSTR_LEN_(\"close, \")=7\nmhd_assert executed (no-op macro expected)\nadded new norm tokens; pos=26\nabout to mhd_assert: buf_size > pos; buf_size=29, pos=26\nmhd_assert executed (no-op macro expected)\nnull-terminated buf at pos=26; buf='close, 1, 2, 3, 4, 5, 6, 7'\ninserted new header; response->flags_auto=0x3, new_hdr=0x55dda3dc0730, new_hdr->value='close, 1, 2, 3, 4, 5, 6, 7'\nenter add_response_header_connection: value='8,9,close', response=0x55dda3dc02a0\nbranch: existing Connection header present; response->flags_auto=0x3, hdr=0x55dda3dc0730, already_has_close=1, hdr->value='close, 1, 2, 3, 4, 5, 6, 7', hdr->value_size=26\nabout to mhd_assert: already_has_close == (0 == memcmp (hdr->value, \"close\", 5))\nmhd_assert executed (no-op macro expected)\nabout to mhd_assert: hdr != NULL\nmhd_assert executed (no-op macro expecte"
}