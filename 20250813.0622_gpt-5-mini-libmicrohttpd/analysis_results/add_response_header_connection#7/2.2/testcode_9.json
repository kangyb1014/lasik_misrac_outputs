{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call mhd_assert(0 != key_len); is dead code because mhd_assert is defined as ((void)0) in the provided code. That means the assertion expands to a no-op; removing that statement would not change program behaviour, so it violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_header_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/58.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_header_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_header_connection:\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified add_response_header_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Lightweight probe logger used only to emit evidence to /tmp/logs/58.txt.\n   Implemented as a set of static functions so it does not change the\n   external interface of the translation unit. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/58.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n/* The original function with inserted probes that log control flow and\n   state at key points. The original logic is preserved; probes only\n   read state and do not alter program behaviour. */\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  /* Probe: function entry and key information */\n  mhd_probe_log(\"ENTER add_response_header_connection: response=%p value=%s key=%s key_len=%zu\",\n                (void *) response,\n                (value != NULL) ? value : \"(null)\",\n                (key != NULL) ? key : \"(null)\",\n                key_len);\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n  {\n    mhd_probe_log(\"REJECT: value contains CR or LF -> return MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n\n    /* Probe: report presence of hdr and whether we can safely inspect its value */\n    if (hdr != NULL)\n    {\n      /* Safe to examine hdr->value only if hdr != NULL */\n      int cmp_close = 0;\n      if (hdr->value != NULL)\n      {\n        /* limit memcmp to avoid reading beyond expected area; original\n           mhd_assert evaluated memcmp(\"close\", 5) - we replicate that\n           check only when hdr and hdr->value are non-NULL to avoid UB */\n        cmp_close = (0 == memcmp (hdr->value, \"close\", 5));\n      }\n      mhd_probe_log(\"HDR found: hdr=%p hdr->value=%p memcmp_close=%d already_has_close=%d\",\n                    (void *) hdr, (void *) hdr->value, cmp_close, (int) already_has_close);\n\n      /* Probe: report the assertion text and a safe boolean result\n         (do not evaluate expressions that may dereference NULL) */\n      mhd_probe_log(\"ASSERTION_CHECK: already_has_close == (0 == memcmp(hdr->value, \\\"close\\\", 5)) -> %s\",\n                    (hdr->value != NULL) ? ((already_has_close == (0 == memcmp(hdr->value, \"close\", 5))) ? \"true\" : \"false\") : \"skipped(due_to_null_value)\");\n    }\n    else\n    {\n      mhd_probe_log(\"HDR missing: hdr=NULL already_has_close=%d\",\n                    (int) already_has_close);\n\n      mhd_probe_log(\"ASSERTION_CHECK: already_has_close == (0 == memcmp(hdr->value, \\\"close\\\", 5)) -> skipped(due_to_null_hdr)\");\n    }\n\n    /* Original assertion: mhd_assert (NULL != hdr); Safe to evaluate and log */\n    mhd_probe_log(\"ASSERTION_CHECK: NULL != hdr -> %s\", (hdr != NULL) ? \"true\" : \"false\");\n    /* Keep original mhd_assert invocation (unchanged) to preserve logic flow */\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    /* Probe: verify that no header exists and flags state */\n    mhd_probe_log(\"NO existing Connection header: hdr=%p flags_auto=0x%08x\",\n                  (void *) hdr, (unsigned int) response->flags_auto);\n\n    /* Original assertions kept; we log safe evaluations only */\n    {\n      struct MHD_HTTP_Res_Header *tmp = MHD_get_response_element_n_ (response,\n                                                                    MHD_HEADER_KIND,\n                                                                    key, key_len);\n      mhd_probe_log(\"ASSERTION_CHECK: MHD_get_response_element_n_(...) == NULL -> %s\",\n                    (tmp == NULL) ? \"true\" : \"false\");\n    }\n    mhd_probe_log(\"ASSERTION_CHECK: 0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE) -> %s\",\n                  (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE)) ? \"true\" : \"false\");\n\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  mhd_probe_log(\"old_value_len=%zu\", old_value_len);\n\n  value_len = strlen (value);\n  mhd_probe_log(\"value_len=%zu\", value_len);\n  if (value_len >= SSIZE_MAX)\n  {\n    mhd_probe_log(\"REJECT: value_len >= SSIZE_MAX -> return MHD_NO\");\n    return MHD_NO;\n  }\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  mhd_probe_log(\"norm_len=%zu\", norm_len);\n  if (norm_len >= SSIZE_MAX)\n  {\n    mhd_probe_log(\"REJECT: norm_len >= SSIZE_MAX -> return MHD_NO\");\n    return MHD_NO;\n  }\n  buf_size = old_value_len + (size_t) norm_len;\n  mhd_probe_log(\"buf_size=%zu\", buf_size);\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n  {\n    mhd_probe_log(\"malloc failed for buf_size=%zu -> return MHD_NO\", buf_size);\n    return MHD_NO;\n  }\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    /* Probe: norm_len_s and value_has_close */\n    mhd_probe_log(\"After token removal: value_has_close=%d norm_len_s=%zd\",\n                  (int) value_has_close, norm_len_s);\n\n    /* Original assertion preserved; we log its safe evaluation first */\n    mhd_probe_log(\"ASSERTION_CHECK: 0 <= norm_len_s -> %s\", (norm_len_s >= 0) ? \"true\" : \"false\");\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      mhd_probe_log(\"ERROR: norm_len_s < 0 -> free(buf) and return MHD_NO\");\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    mhd_probe_log(\"REJECT: upgrade_handler present and value_has_close -> return MHD_NO\");\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      mhd_probe_log(\"REJECT: new value empty after normalisation and no close token -> return MHD_NO\");\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      mhd_probe_log(\"NOOP: already_has_close true and new norm empty -> free(buf) and return MHD_YES\");\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_probe_log(\"Will insert 'close' token: value_has_close=%d already_has_close=%d buf_size=%zu old_value_len=%zu norm_len=%zu\",\n                  (int) value_has_close, (int) already_has_close, buf_size, old_value_len, norm_len);\n\n    /* Probe safe evaluation of the original assertion */\n    {\n      size_t required = old_value_len + norm_len + MHD_STATICSTR_LEN_ (\"close, \") + 1;\n      mhd_probe_log(\"ASSERTION_CHECK: buf_size >= required(%zu) -> %s\", required,\n                    (buf_size >= required) ? \"true\" : \"false\");\n    }\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n\n    /* Probe: report the positional assertion condition in a safe manner */\n    if (value_has_close && ! already_has_close)\n    {\n      size_t expected = MHD_STATICSTR_LEN_ (\"close, \") + old_value_len;\n      mhd_probe_log(\"ASSERTION_CHECK: (value_has_close && !already_has_close) => expected pos=%zu actual pos=%zu -> %s\",\n                    expected, pos,\n                    (expected == pos) ? \"true\" : \"false\");\n    }\n    else\n    {\n      mhd_probe_log(\"ASSERTION_CHECK: (! (value_has_close && !already_has_close)) => expected pos=%zu actual pos=%zu -> %s\",\n                    old_value_len, pos,\n                    (old_value_len == pos) ? \"true\" : \"false\");\n    }\n\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_probe_log(\"Final pos=%zu buf_size=%zu\", pos, buf_size);\n  mhd_probe_log(\"ASSERTION_CHECK: buf_size > pos -> %s\", (buf_size > pos) ? \"true\" : \"false\");\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        mhd_probe_log(\"Inserted new header: new_hdr=%p header_size=%zu value_size=%zu flags_auto=0x%08x\",\n                      (void *) new_hdr, new_hdr->header_size, new_hdr->value_size,\n                      (unsigned int) response->flags_auto);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    mhd_probe_log(\"Failed to allocate new_hdr->header -> return MHD_NO\");\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  mhd_probe_log(\"Updating existing header: hdr=%p old_value_size=%zu new_value_size=%zu\",\n                (void *) hdr, (size_t) hdr->value_size, pos);\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  mhd_probe_log(\"UPDATE_DONE: hdr=%p flags_auto=0x%08x -> return MHD_YES\",\n                (void *) hdr, (unsigned int) response->flags_auto);\n  return MHD_YES;\n}\n"
}