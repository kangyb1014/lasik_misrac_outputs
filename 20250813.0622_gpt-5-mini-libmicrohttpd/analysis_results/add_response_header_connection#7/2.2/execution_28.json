{
  "result": "success",
  "message": "add_response_header_connection: entry: response=0x55926d9a92a0, value='a,b,c,d,e'\nassert#3: expecting no existing header: hdr set to NULL, not calling MHD_get_response_element_n_\nassert#4: expecting flags_auto has no CONNECTION_CLOSE flag: flags_auto=0x0\nvalue_len=9, old_value_len=0\nafter remove_token: value_has_close=0, norm_len_s=13\nafter normalisation: norm_len=13, value_has_close=0\nbefore assert#7: value_has_close=0, already_has_close=0, MHD_STATICSTR_LEN(close, )=7, old_value_len=0, pos=0, norm_len=13\nbefore final assert: buf_size=14, pos=13\ninserted new header: header='Connection', value='a, b, c, d, e', flags_auto=0x1\nadd_response_header_connection: entry: response=0x55926d9a92a0, value='i,k,l,m,n,o,p,close'\nassert#3: expecting no existing header: hdr set to NULL, not calling MHD_get_response_element_n_\nassert#4: expecting flags_auto has no CONNECTION_CLOSE flag: flags_auto=0x0\nvalue_len=19, old_value_len=0\nafter remove_token: value_has_close=1, norm_len_s=19\nafter normalisation: norm_len=19, value_has_close=1\nabout to assert buffer size for inserting close: buf_size=29, old_value_len=0, norm_len=19\ninserted 'close' at front: pos=5\nbefore assert#7: value_has_close=1, already_has_close=0, MHD_STATICSTR_LEN(close, )=7, old_value_len=0, pos=7, norm_len=19\nbefore final assert: buf_size=29, pos=26\ninserted new header: header='Connection', value='close, i, k, l, m, n, o, p', flags_auto=0x3\nadd_response_header_connection: entry: response=0x55926d9a92a0, value='1,2,3,4,5,6,7,close'\nassert#3: expecting no existing header: hdr set to NULL, not calling MHD_get_response_element_n_\nassert#4: expecting flags_auto has no CONNECTION_CLOSE flag: flags_auto=0x0\nvalue_len=19, old_value_len=0\nafter remove_token: value_has_close=1, norm_len_s=19\nafter normalisation: norm_len=19, value_has_close=1\nabout to assert buffer size for inserting close: buf_size=29, old_value_len=0, norm_len=19\ninserted 'close' at front: pos=5\nbefore assert#7: value_has_close=1, already_has_close=0, MHD_STATICSTR_LEN(close, )=7, old_value_len=0, pos=7, norm_len=19\nbefore final assert: buf_size=29, pos=26\ninserted new header: header='Connection', value='close, 1, 2, 3, 4, 5, 6, 7', flags_auto=0x3\nadd_response_header_connection: entry: response=0x55926d9a92a0, value='8,9,close'\nassert#1: already_has_close=1, hdr=0x55926d9a9730, hdr->value='close, 1, 2, 3, 4, 5, 6, 7', cmp_is_close=1\nassert#2: checking hdr != NULL (hdr=0x55926d9a9730)\nvalue_len=9, old_value_len=28\nafter remove_token: value_has_close=1, norm_len_s=4\nafter normalisation: norm_len=4, value_has_close=1\nappended old header value, new pos=26\nbefore assert#7: value_has_close=1, already_has_close=1, MHD_STATICSTR_LEN(close, )=7, old_value_len=28, pos=28, norm_len=4\nbefore final assert: buf_size=42, pos=32\nupdating existing header (hdr=0x55926d9a9730): old_value='close, 1, 2, 3, 4, 5, 6, 7' -> new_value='close, 1, 2, 3, 4, 5, 6, 7, 8, 9'\nupdate done: hdr=0x55926d9a9730, value_size=32, flags_auto=0x3\nadd_response_header_connection: entry: response=0x55926d9a92a0, value='10,12'\nassert#1: already_has_close=1, hdr=0x55926d9a9730, hdr->value='close, 2, 4, 6, 8', cmp_is_close=1\nassert#2: checking hdr != NULL (hdr=0x55926d9a9730)\nvalue_len=5, old_value_len=19\nafter remove_token: value_has_close=0, norm_len_s=6\nafter normalisation: norm_len=6, value_has_close=0\nappended old header value, new pos=17\nbefore assert#7: value_has_close=0, already_has_close=1, MHD_STATICSTR_LEN(close, )=7, old_value_len=19, pos=19, norm_len=6\nbefore final assert: buf_size=27, pos=25\nupdating existing header (hdr=0x55926d9a9730): old_value='close, 2, 4, 6, 8' -> new_value='close, 2, 4, 6, 8, 10, 12'\nupdate done: hdr=0x55926d9a9730, value_size=25, flags_auto=0x3\nadd_response_header_connection: entry: response=0x55926d9a92a0, value='close'\nassert#1: already_has_close=0, hdr=0x55926d9a9730, hdr->value='2, 4, 6', cmp_is_close=0\nassert#2: checking hdr != NULL (hdr=0x55926d9a9730)\nvalue_len=5, old_value_len=9\nafter remove_token: value_has_close=1, norm_len_s=0\nafter normalisation: norm_len=0, value_has_close=1\nabout to assert buffer size for "
}