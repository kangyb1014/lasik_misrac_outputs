{
  "user_message": "An agent A claimed that the following add_response_header_connection code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of add_response_header_connection.\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro mhd_assert is defined as ((void)0). Therefore the statement mhd_assert(0 != tkn_len); becomes a no-op expression-statement ((void)0) that is executed but has no effect \u2014 removing it would not change program behaviour. This constitutes dead code in the sense of MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/58.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  /* Log entry and initial arguments */\n  probe_log(\"ENTER add_response_header_connection: response=%p value='%s' flags_auto=0x%zx\",\n            (void *) response, (NULL != value) ? value : \"(null)\", (size_t) response->flags_auto);\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n  {\n    probe_log(\"REJECT: value contains CR or LF\");\n    return MHD_NO;\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n\n    /* Log state that the assertions would check. Do not call the mhd_assert here. */\n    if (hdr != NULL)\n    {\n      probe_log(\"BRANCH: existing header present: hdr=%p value_size=%zu value='%s' already_has_close=%d\",\n                (void *) hdr, (size_t) hdr->value_size,\n                (hdr->value != NULL) ? hdr->value : \"(null)\", (int) already_has_close);\n      /* Safe to compute memcmp for logging since hdr != NULL */\n      probe_log(\"ASSERTION-CHECK: memcmp(hdr->value, 'close',5) == 0 -> %d\",\n                (int) (0 == memcmp (hdr->value, \"close\", 5)));\n    }\n    else\n    {\n      probe_log(\"BRANCH: expected existing header but hdr == NULL; already_has_close=%d\",\n                (int) already_has_close);\n    }\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    /* Instead of calling MHD_get_response_element_n_ (which the original mhd_assert would have\n       done inside a no-op assertion), we log the already-known state to avoid side-effects. */\n    probe_log(\"BRANCH: no existing Connection header: hdr=%p already_has_close=false\",\n              (void *) hdr);\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  probe_log(\"STATE: old_value_len=%zu\", old_value_len);\n\n  value_len = strlen (value);\n  probe_log(\"STATE: value_len=%zu\", value_len);\n  if (value_len >= SSIZE_MAX)\n  {\n    probe_log(\"REJECT: value_len >= SSIZE_MAX\");\n    return MHD_NO;\n  }\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  probe_log(\"STATE: norm_len(initial)=%zu\", norm_len);\n  if (norm_len >= SSIZE_MAX)\n  {\n    probe_log(\"REJECT: norm_len >= SSIZE_MAX\");\n    return MHD_NO;\n  }\n  buf_size = old_value_len + (size_t) norm_len;\n\n  probe_log(\"STATE: buf_size=%zu (old_value_len=%zu norm_len=%zu)\", buf_size, old_value_len, norm_len);\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n  {\n    probe_log(\"ERROR: malloc(buf_size=%zu) failed\", buf_size);\n    return MHD_NO;\n  }\n  probe_log(\"ALLOC: buf=%p buf_size=%zu\", (void *) buf, buf_size);\n\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    probe_log(\"AFTER_REMOVE_TOKEN: value_has_close=%d norm_len_s=%zd\",\n              (int) value_has_close, (ssize_t) norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      probe_log(\"ERROR: norm_len_s < 0 -> %zd; freeing buf=%p\", (ssize_t) norm_len_s, (void *) buf);\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n    probe_log(\"STATE: norm_len(after removal)=%zu\", norm_len);\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    probe_log(\"REJECT: upgrade_handler present and value_has_close=true; free buf=%p\", (void *) buf);\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  probe_log(\"STATE: norm_len(after keep-alive removal)=%zu\", norm_len);\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    probe_log(\"BRANCH: norm_len == 0 (empty after normalization); value_has_close=%d already_has_close=%d\",\n              (int) value_has_close, (int) already_has_close);\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      probe_log(\"REJECT: new value had no tokens -> freeing buf=%p\", (void *) buf);\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      probe_log(\"NOOP: already_has_close=true -> freeing buf=%p and returning MHD_YES\", (void *) buf);\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    probe_log(\"ACTION: inserting 'close' token: buf_size=%zu old_value_len=%zu norm_len=%zu\",\n              buf_size, old_value_len, norm_len);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n    probe_log(\"STATE: after inserting 'close' pos=%zu\", pos);\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n    probe_log(\"ACTION: copied old header value; new pos=%zu\", pos);\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n    probe_log(\"ACTION: accounted for new normalized value; pos after adding new tokens=%zu\", pos);\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n  probe_log(\"STATE: final buf pos=%zu buf[0..]=%s\", pos, buf);\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        probe_log(\"ACTION: inserting new header new_hdr=%p header=%p value=%p value_size=%zu flags_auto=0x%zx\",\n                  (void *) new_hdr, (void *) new_hdr->header, (void *) new_hdr->value,\n                  (size_t) new_hdr->value_size, (size_t) response->flags_auto);\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      probe_log(\"ERROR: malloc for new_hdr->header failed; freeing new_hdr=%p\", (void *) new_hdr);\n      free (new_hdr);\n    }\n    probe_log(\"ERROR: creating new header failed; freeing buf=%p and returning MHD_NO\", (void *) buf);\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  probe_log(\"ACTION: updating existing header hdr=%p old_value=%p old_value_size=%zu -> new buf=%p new_size=%zu\",\n            (void *) hdr, (void *) hdr->value, (size_t) hdr->value_size, (void *) buf, pos);\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  probe_log(\"EXIT: returning MHD_YES response->flags_auto=0x%zx\", (size_t) response->flags_auto);\n  return MHD_YES;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER add_response_header_connection: response=0x55573016a2a0 value='a,b,c,d,e' flags_auto=0x0\nBRANCH: no existing Connection header: hdr=(nil) already_has_close=false\nSTATE: old_value_len=0\nSTATE: value_len=9\nSTATE: norm_len(initial)=14\nSTATE: buf_size=14 (old_value_len=0 norm_len=14)\nALLOC: buf=0x55573016a360 buf_size=14\nAFTER_REMOVE_TOKEN: value_has_close=0 norm_len_s=13\nSTATE: norm_len(after removal)=13\nSTATE: norm_len(after keep-alive removal)=13\nACTION: accounted for new normalized value; pos after adding new tokens=13\nSTATE: final buf pos=13 buf[0..]=a, b, c, d, e\nACTION: inserting new header new_hdr=0x55573016a680 header=0x55573016a380 value=0x55573016a360 value_size=13 flags_auto=0x1\nENTER add_response_header_connection: response=0x55573016a2a0 value='i,k,l,m,n,o,p,close' flags_auto=0x0\nBRANCH: no existing Connection header: hdr=(nil) already_has_close=false\nSTATE: old_value_len=0\nSTATE: value_len=19\nSTATE: norm_len(initial)=29\nSTATE: buf_size=29 (old_value_len=0 norm_len=29)\nALLOC: buf=0x55573016a6c0 buf_size=29\nAFTER_REMOVE_TOKEN: value_has_close=1 norm_len_s=19\nSTATE: norm_len(after removal)=19\nSTATE: norm_len(after keep-alive removal)=19\nACTION: inserting 'close' token: buf_size=29 old_value_len=0 norm_len=19\nSTATE: after inserting 'close' pos=5\nACTION: accounted for new normalized value; pos after adding new tokens=26\nSTATE: final buf pos=26 buf[0..]=close, i, k, l, m, n, o, p\nACTION: inserting new header new_hdr=0x55573016a6f0 header=0x55573016a380 value=0x55573016a6c0 value_size=26 flags_auto=0x3\nENTER add_response_header_connection: response=0x55573016a2a0 value='1,2,3,4,5,6,7,close' flags_auto=0x0\nBRANCH: no existing Connection header: hdr=(nil) already_has_close=false\nSTATE: old_value_len=0\nSTATE: value_len=19\nSTATE: norm_len(initial)=29\nSTATE: buf_size=29 (old_value_len=0 norm_len=29)\nALLOC: buf=0x55573016a6c0 buf_size=29\nAFTER_REMOVE_TOKEN: value_has_close=1 norm_len_s=19\nSTATE: norm_len(after removal)=19\nSTATE: norm_len(after keep-alive removal)=19\nACTION: inserting 'close' token: buf_size=29 old_value_len=0 norm_len=19\nSTATE: after inserting 'close' pos=5\nACTION: accounted for new normalized value; pos after adding new tokens=26\nSTATE: final buf pos=26 buf[0..]=close, 1, 2, 3, 4, 5, 6, 7\nACTION: inserting new header new_hdr=0x55573016a730 header=0x55573016a380 value=0x55573016a6c0 value_size=26 flags_auto=0x3\nENTER add_response_header_connection: response=0x55573016a2a0 value='8,9,close' flags_auto=0x3\nBRANCH: existing header present: hdr=0x55573016a730 value_size=26 value='close, 1, 2, 3, 4, 5, 6, 7' already_has_close=1\nASSERTION-CHECK: memcmp(hdr->value, 'close',5) == 0 -> 1\nSTATE: old_value_len=28\nSTATE: value_len=9\nSTATE: norm_len(initial)=14\nSTATE: buf_size=42 (old_value_len=28 norm_len=14)\nALLOC: buf=0x55573016a6f0 buf_size=42\nAFTER_REMOVE_TOKEN: value_has_close=1 norm_len_s=4\nSTATE: norm_len(after removal)=4\nSTATE: norm_len(after keep-alive removal)=4\nACTION: copied old header value; new pos=26\nACTION: accounted for new normalized value; pos after adding new tokens=32\nSTATE: final buf pos=32 buf[0..]=close, 1, 2, 3, 4, 5, 6, 7, 8, 9\nACTION: updating existing header hdr=0x55573016a730 old_value=0x55573016a6c0 old_value_size=26 -> new buf=0x55573016a6f0 new_size=32\nEXIT: returning MHD_YES response->flags_auto=0x3\nENTER add_response_header_connection: response=0x55573016a2a0 value='10,12' flags_auto=0x3\nBRANCH: existing header present: hdr=0x55573016a730 value_size=17 value='close, 2, 4, 6, 8' already_has_close=1\nASSERTION-CHECK: memcmp(hdr->value, 'close',5) == 0 -> 1\nSTATE: old_value_len=19\nSTATE: value_len=5\nSTATE: norm_len(initial)=8\nSTATE: buf_size=27 (old_value_len=19 norm_len=8)\nALLOC: buf=0x55573016a6c0 buf_size=27\nAFTER_REMOVE_TOKEN: value_has_close=0 norm_len_s=6\nSTATE: norm_len(after removal)=6\nSTATE: norm_len(after keep-alive removal)=6\nACTION: copied old header value; new pos=17\nACTION: accounted for new normalized value; pos after adding new tokens=25\nSTATE: final buf pos=25 buf[0..]=close, 2, 4, 6, 8, 10, 12\nACTION: updating existing header hdr=0x55573016a730 old_value=0x55573016\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. Given the premise that mhd_assert is defined as ((void)0), every mhd_assert(...) invocation in this function expands to an expression-statement that does nothing. By MISRA C 2023 Rule 2.2\u2019s definition \u2014 \u201cAny operation that is executed but whose removal would not affect program behaviour constitutes dead code\u201d \u2014 those no-op assertion statements are dead code: they are executed (a no-op) and removing them would not change program behaviour. The provided test code (which logs the same checks instead of exercising mhd_assert) and its output demonstrate that behaviour is unchanged when the assertions are not used for runtime checking, supporting the conclusion that the mhd_assert occurrences are dead code under the stated macro definition. Therefore the reported violation of Rule 2.2 is correct."
}