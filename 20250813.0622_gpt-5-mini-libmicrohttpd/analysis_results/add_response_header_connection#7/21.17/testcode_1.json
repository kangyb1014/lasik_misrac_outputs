{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The memmove/memcpy in the branch can write/read past the malloc'd buffer because the code relies only on an mhd_assert to check that the allocated buf_size is large enough. buf_size is allocated as old_value_len + initial_norm_len (initial_norm_len = value_len + value_len/2 + 1). Later the code may reduce norm_len (the actual normalized string length) and then does memmove(buf + MHD_STATICSTR_LEN_(\"close, \") + old_value_len, buf + old_value_len, norm_len + 1). The memmove moves norm_len+1 bytes (including the NUL) into a destination starting at an offset of MHD_STATICSTR_LEN_(\"close, \") bytes, so it is safe only if initial_norm_len >= norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1. That condition is checked only with mhd_assert (not enforced in production), so for some realistic inputs (e.g. small value lengths and/or combinations of tokens) initial_norm_len may be too small and the memmove will access beyond the allocated buffer and overflow. Therefore MISRA C 2023 Rule 21.17 is violated (potential out-of-bounds access).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_header_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/63.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_header_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_header_connection:\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified add_response_header_connection code.\n",
  "test_code": "static enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  /* Logging helper: attempt to open log file. If it fails, proceed silently. */\n  FILE *mhd_log = fopen(\"/tmp/logs/63.txt\", \"a\");\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"--- add_response_header_connection called: value=%p\\n\", (void *)value);\n    if (value)\n      fprintf(mhd_log, \"    value (start) = '%.*s'\\n\", 64, value);\n    fprintf(mhd_log, \"    response=%p, flags_auto=0x%zx\\n\", (void *)response, (size_t)response->flags_auto);\n    fflush(mhd_log);\n  }\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n  {\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    Rejecting value: contains CR or LF\\n\");\n      fclose(mhd_log);\n    }\n    return MHD_NO;\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    Existing header found: hdr=%p, hdr->value=%p, hdr->value_size=%zu\\n\",\n              (void *)hdr, (void *)hdr->value, hdr ? hdr->value_size : 0);\n      if (hdr && hdr->value)\n        fprintf(mhd_log, \"    hdr->value (start up to 64): '%.*s'\\n\", (int) (hdr->value_size < 64 ? hdr->value_size : 64), hdr->value);\n      fprintf(mhd_log, \"    already_has_close=%d\\n\", already_has_close ? 1 : 0);\n      fflush(mhd_log);\n    }\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    No existing Connection header.\\n\");\n      fflush(mhd_log);\n    }\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"    Computed lengths: value_len=%zu, old_value_len=%zu\\n\",\n            value_len, old_value_len);\n    fflush(mhd_log);\n  }\n\n  if (value_len >= SSIZE_MAX)\n  {\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    Rejecting value: value_len >= SSIZE_MAX\\n\");\n      fclose(mhd_log);\n    }\n    return MHD_NO;\n  }\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"    Initial norm_len=%zu\\n\", norm_len);\n    fflush(mhd_log);\n  }\n  if (norm_len >= SSIZE_MAX)\n  {\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    Rejecting value: norm_len >= SSIZE_MAX\\n\");\n      fclose(mhd_log);\n    }\n    return MHD_NO;\n  }\n  buf_size = old_value_len + (size_t) norm_len;\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"    buf_size to allocate = %zu\\n\", buf_size);\n    fflush(mhd_log);\n  }\n\n  buf = malloc (buf_size);\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"    malloc returned buf=%p\\n\", (void *)buf);\n    fflush(mhd_log);\n  }\n  if (NULL == buf)\n  {\n    if (mhd_log) fclose(mhd_log);\n    return MHD_NO;\n  }\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    After MHD_str_remove_token_caseless_: value_has_close=%d, norm_len_s=%zd\\n\",\n              value_has_close ? 1 : 0, norm_len_s);\n      if (buf + old_value_len)\n        fprintf(mhd_log, \"    buf (after remove, start up to 64) = '%.*s'\\n\",\n                (int) (norm_len_s < 64 ? norm_len_s : 64), buf + old_value_len);\n      fflush(mhd_log);\n    }\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"    Unexpected negative norm_len_s (%zd), freeing buf and returning MHD_NO\\n\", norm_len_s);\n        fclose(mhd_log);\n      }\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    upgrade_handler present and value_has_close -> rejecting\\n\");\n      fclose(mhd_log);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"    After removing keep-alive: norm_len=%zu, value_has_close=%d\\n\",\n            norm_len, value_has_close ? 1 : 0);\n    if (norm_len && (buf + old_value_len))\n      fprintf(mhd_log, \"    buf (normalized, up to 128)='%.*s'\\n\",\n              (int) (norm_len < 128 ? norm_len : 128), buf + old_value_len);\n    fflush(mhd_log);\n  }\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"    New value empty and no close token -> returning MHD_NO\\n\");\n        fclose(mhd_log);\n      }\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"    New value empty but already had close -> returning MHD_YES\\n\");\n        fclose(mhd_log);\n      }\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    Preparing to add 'close' token: buf_size=%zu, old_value_len=%zu, norm_len=%zu, need_space=%zu\\n\",\n              buf_size, old_value_len, norm_len,\n              old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1);\n      fprintf(mhd_log, \"    memmove will be called (if norm_len != 0) with dest=buf+%zu, src=buf+%zu, bytes=%zu\\n\",\n              MHD_STATICSTR_LEN_(\"close, \") + old_value_len, old_value_len, norm_len + 1);\n      fflush(mhd_log);\n    }\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    After memmove (if any). buf start up to 128 = '%.*s'\\n\",\n              (int) ((norm_len + MHD_STATICSTR_LEN_(\"close, \") + old_value_len) < 128 ?\n                     (norm_len + MHD_STATICSTR_LEN_(\"close, \") + old_value_len) : 128), buf);\n      fflush(mhd_log);\n    }\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    Wrote 'close' at buf, pos now=%zu\\n\", pos);\n      fflush(mhd_log);\n    }\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    Copying old header value into buf at pos=%zu, hdr->value_size=%zu\\n\",\n              pos, hdr->value_size);\n      fflush(mhd_log);\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    After copying old header: pos=%zu\\n\", pos);\n      fflush(mhd_log);\n    }\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    After accounting for new tokens: pos=%zu (norm_len=%zu)\\n\", pos, norm_len);\n      fflush(mhd_log);\n    }\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"    Final buf (len=%zu, pos=%zu): '%.*s'\\n\", buf_size, pos, (int)(pos < 256 ? pos : 256), buf);\n    fflush(mhd_log);\n  }\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        if (mhd_log)\n        {\n          fprintf(mhd_log, \"    Inserted new header: new_hdr=%p, new_hdr->value=%p, new_hdr->value_size=%zu\\n\",\n                  (void *)new_hdr, (void *)new_hdr->value, new_hdr->value_size);\n          fclose(mhd_log);\n        }\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"    Failed to create new header, freeing buf and returning MHD_NO\\n\");\n      fclose(mhd_log);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"    Updating existing header: old hdr->value=%p, old hdr->value_size=%zu -> new buf=%p, pos=%zu\\n\",\n            (void *)hdr->value, hdr->value_size, (void *)buf, pos);\n    fflush(mhd_log);\n  }\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"    Update complete: hdr=%p, hdr->value=%p, hdr->value_size=%zu, flags_auto=0x%zx -> returning MHD_YES\\n\",\n            (void *)hdr, (void *)hdr->value, hdr->value_size, (size_t)response->flags_auto);\n    fclose(mhd_log);\n  }\n  return MHD_YES;\n}\n"
}