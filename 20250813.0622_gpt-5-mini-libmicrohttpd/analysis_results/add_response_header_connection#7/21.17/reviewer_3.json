{
  "user_message": "An agent A claimed that the following add_response_header_connection code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of add_response_header_connection.\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Calling strchr(value, ...) without first validating that 'value' is non-NULL and points to a NUL-terminated array can cause strchr to read past the bounds of the object. For example, if the caller passes NULL or a buffer that is not NUL-terminated (only a pointer+length), strchr will scan past the valid memory until a '\\0' is found or cause a crash \u2014 this violates MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nlog_msg (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/63.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fflush (f);\n  fclose (f);\n}\nstatic void\nlog_ptr_state (const char *label, const void *p)\n{\n  log_msg (\"%s: pointer=%p, is_null=%s\", label, p, (p == NULL) ? \"true\" : \"false\");\n}\n\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  /* Logging: entry and basic state */\n  log_msg (\"ENTER add_response_header_connection: response=%p\", (void *) response);\n  log_ptr_state (\"value (input)\", value);\n\n  /* Probe before calling strchr: log and then call, preserving original logic */\n  log_msg (\"about to scan value for '\\\\r' and '\\\\n' using strchr\");\n  {\n    const char *res_cr = strchr (value, '\\r');\n    log_msg (\"strchr(value, '\\\\r') returned %p\", (const void *) res_cr);\n    if (NULL != res_cr)\n    {\n      log_msg (\"early return: found '\\\\r' in value -> MHD_NO\");\n      return MHD_NO;\n    }\n    const char *res_nl = strchr (value, '\\n');\n    log_msg (\"strchr(value, '\\\\n') returned %p\", (const void *) res_nl);\n    if (NULL != res_nl)\n    {\n      log_msg (\"early return: found '\\\\n' in value -> MHD_NO\");\n      return MHD_NO;\n    }\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  /* Log before strlen: potentially unsafe if value is NULL or not NUL-terminated */\n  log_msg (\"about to call strlen on value=%p\", (const void *) value);\n  value_len = strlen (value);\n  log_msg (\"strlen(value) = %zu\", value_len);\n\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  /* Log the produced header value and lengths */\n  log_msg (\"constructed header buf=%p pos=%zu buf_size=%zu old_value_len=%zu norm_len=%zu value_has_close=%s already_has_close=%s\",\n           (void *) buf, pos, buf_size, old_value_len, norm_len,\n           value_has_close ? \"true\" : \"false\",\n           already_has_close ? \"true\" : \"false\");\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        log_msg (\"inserted new header: header=%p value=%p value_size=%zu\",\n                 (void *) new_hdr->header, (void *) new_hdr->value, new_hdr->value_size);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  log_msg (\"updated existing header: hdr=%p new_value=%p new_value_size=%zu\",\n           (void *) hdr, (void *) hdr->value, hdr->value_size);\n  return MHD_YES;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER add_response_header_connection: response=0x55586eb1f2a0\nvalue (input): pointer=0x55586c49c18c, is_null=false\nabout to scan value for '\\r' and '\\n' using strchr\nstrchr(value, '\\r') returned (nil)\nstrchr(value, '\\n') returned (nil)\nabout to call strlen on value=0x55586c49c18c\nstrlen(value) = 9\nconstructed header buf=0x55586eb1f360 pos=13 buf_size=14 old_value_len=0 norm_len=13 value_has_close=false already_has_close=false\ninserted new header: header=0x55586eb1f380 value=0x55586eb1f360 value_size=13\nENTER add_response_header_connection: response=0x55586eb1f2a0\nvalue (input): pointer=0x55586c49c22f, is_null=false\nabout to scan value for '\\r' and '\\n' using strchr\nstrchr(value, '\\r') returned (nil)\nstrchr(value, '\\n') returned (nil)\nabout to call strlen on value=0x55586c49c22f\nstrlen(value) = 19\nconstructed header buf=0x55586eb1f6c0 pos=26 buf_size=29 old_value_len=0 norm_len=19 value_has_close=true already_has_close=false\ninserted new header: header=0x55586eb1f380 value=0x55586eb1f6c0 value_size=26\nENTER add_response_header_connection: response=0x55586eb1f2a0\nvalue (input): pointer=0x55586c49c2eb, is_null=false\nabout to scan value for '\\r' and '\\n' using strchr\nstrchr(value, '\\r') returned (nil)\nstrchr(value, '\\n') returned (nil)\nabout to call strlen on value=0x55586c49c2eb\nstrlen(value) = 19\nconstructed header buf=0x55586eb1f6c0 pos=26 buf_size=29 old_value_len=0 norm_len=19 value_has_close=true already_has_close=false\ninserted new header: header=0x55586eb1f380 value=0x55586eb1f6c0 value_size=26\nENTER add_response_header_connection: response=0x55586eb1f2a0\nvalue (input): pointer=0x55586c49c31a, is_null=false\nabout to scan value for '\\r' and '\\n' using strchr\nstrchr(value, '\\r') returned (nil)\nstrchr(value, '\\n') returned (nil)\nabout to call strlen on value=0x55586c49c31a\nstrlen(value) = 9\nconstructed header buf=0x55586eb1f6f0 pos=32 buf_size=42 old_value_len=28 norm_len=4 value_has_close=true already_has_close=true\nupdated existing header: hdr=0x55586eb1f730 new_value=0x55586eb1f6f0 new_value_size=32\nENTER add_response_header_connection: response=0x55586eb1f2a0\nvalue (input): pointer=0x55586c49c3f1, is_null=false\nabout to scan value for '\\r' and '\\n' using strchr\nstrchr(value, '\\r') returned (nil)\nstrchr(value, '\\n') returned (nil)\nabout to call strlen on value=0x55586c49c3f1\nstrlen(value) = 5\nconstructed header buf=0x55586eb1f6c0 pos=25 buf_size=27 old_value_len=19 norm_len=6 value_has_close=false already_has_close=true\nupdated existing header: hdr=0x55586eb1f730 new_value=0x55586eb1f6c0 new_value_size=25\nENTER add_response_header_connection: response=0x55586eb1f2a0\nvalue (input): pointer=0x55586c49c4b3, is_null=false\nabout to scan value for '\\r' and '\\n' using strchr\nstrchr(value, '\\r') returned (nil)\nstrchr(value, '\\n') returned (nil)\nabout to call strlen on value=0x55586c49c4b3\nstrlen(value) = 5\nconstructed header buf=0x55586eb1f360 pos=14 buf_size=17 old_value_len=9 norm_len=0 value_has_close=true already_has_close=false\nupdated existing header: hdr=0x55586eb1f730 new_value=0x55586eb1f360 new_value_size=14\nENTER add_response_header_connection: response=0x55586eb1f2a0\nvalue (input): pointer=0x55586c49c4b3, is_null=false\nabout to scan value for '\\r' and '\\n' using strchr\nstrchr(value, '\\r') returned (nil)\nstrchr(value, '\\n') returned (nil)\nabout to call strlen on value=0x55586c49c4b3\nstrlen(value) = 5\nENTER add_response_header_connection: response=0x55586eb1f2a0\nvalue (input): pointer=0x55586c49c4b3, is_null=false\nabout to scan value for '\\r' and '\\n' using strchr\nstrchr(value, '\\r') returned (nil)\nstrchr(value, '\\n') returned (nil)\nabout to call strlen on value=0x55586c49c4b3\nstrlen(value) = 5\nconstructed header buf=0x55586eb1f380 pos=5 buf_size=8 old_value_len=0 norm_len=0 value_has_close=true already_has_close=false\ninserted new header: header=0x55586eb1f360 value=0x55586eb1f380 value_size=5\nENTER add_response_header_connection: response=0x55586eb1f2a0\nvalue (input): pointer=0x55586c49c4b3, is_null=false\nabout to scan value for '\\r' and '\\n' using strchr\nstrchr(value, '\\r') returned (nil)\nstrchr(value, '\\n') ret\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A asserted that calling strchr/strlen on the parameter 'value' without validation can read past the bounds and thus violates MISRA C 2023 Rule 21.17. The provided exhaustive test log shows that for every invocation 'value' was non-NULL, strchr returned either NULL or a pointer within the string, and strlen returned valid lengths; the code completed normally and constructed buffers with sizes consistent with the reported lengths. Under the assumption that the test suite is exhaustive and there are no missing scenarios, there is no observed case where the string.h calls accessed beyond the bounds of the objects referenced by their pointer parameters. Therefore the reported violation is not supported by the test evidence."
}