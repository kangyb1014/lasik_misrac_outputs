{
  "user_message": "An agent A claimed that the following get_rq_extended_uname_copy_z code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_extended_uname_copy_z.\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call mhd_assert(0) is dead code because the macro is defined as ((void)0). In this configuration the statement expands to a no-op expression statement that is executed but has no effect; removing it would not change program behaviour. The occurrence in the else branch of get_rq_uname (the mhd_assert(0); line) therefore violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* Try to create the directory and reopen. Ignore errors if we cannot. */\n    (void) mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/74.txt\", \"a\");\n    if (f == NULL)\n      return;\n  }\n\n  va_list ap;\n  va_start (ap, fmt);\n  (void) vfprintf (f, fmt, ap);\n  va_end (ap);\n  (void) fputc('\\n', f);\n  (void) fclose (f);\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  /* Log entry and key parameters */\n  mhd_log_probe (\"ENTRY: get_rq_extended_uname_copy_z uname_ext=%p len=%zu buf=%p buf_size=%zu\",\n                 (void *) uname_ext, uname_ext_len, (void *) buf, buf_size);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n  {\n    mhd_log_probe (\"RETURN: Too long input string: uname_ext_len=%zu SSIZE_MAX=%zu\",\n                   uname_ext_len, (size_t) SSIZE_MAX);\n    return -1; /* Too long input string */\n  }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n  {\n    mhd_log_probe (\"RETURN: Required prefix missing: uname_ext_len=%zu min_len=%d\",\n                   uname_ext_len, MHD_DAUTH_EXT_PARAM_MIN_LEN);\n    return -1; /* Required prefix is missing */\n  }\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n  {\n    mhd_log_probe (\"RETURN: Prefix mismatch (not UTF-8 / wrong prefix)\");\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n  }\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  mhd_log_probe (\"AFTER_PREFIX: r=%zu uname_ext_len=%zu\", r, uname_ext_len);\n\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    mhd_log_probe (\"LANG_TAG_SCAN: r=%zu chr=0x%02x ('%c')\", r, (unsigned char) chr,\n                   ((chr >= 32 && chr < 127) ? chr : '?'));\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n    {\n      mhd_log_probe (\"RETURN: Wrong char in language tag at r=%zu chr=0x%02x\", r,\n                     (unsigned char) chr);\n      return -1; /* Wrong char in language tag */\n    }\n    r++;\n  }\n  if (r >= uname_ext_len)\n  {\n    mhd_log_probe (\"RETURN: End of language tag not found r=%zu uname_ext_len=%zu\",\n                   r, uname_ext_len);\n    return -1; /* The end of the language tag was not found */\n  }\n  r++; /* Advance to the next char */\n  mhd_log_probe (\"AFTER_LANG_TAG: r=%zu remaining=%zu\", r, (uname_ext_len - r));\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  mhd_log_probe (\"PCT_DECODE: r=%zu decoded_len=%zu buf_size=%zu\", r, w, buf_size);\n\n  if ((0 == w) && (0 != uname_ext_len - r))\n  {\n    mhd_log_probe (\"RETURN: Broken percent encoding: remaining=%zu w=%zu\",\n                   (uname_ext_len - r), w);\n    return -1; /* Broken percent encoding */\n  }\n\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_log_probe (\"AFTER_TERMINATE: w=%zu buf[0]=0x%02x\", w, (unsigned char) buf[0]);\n\n  /* Record the assert condition and result so that if mhd_assert expands to no-op\n     we still have evidence of the intended runtime check. */\n  mhd_log_probe (\"ASSERT_CHECK: SSIZE_MAX=%zu w=%zu condition=SSIZE_MAX> w is %s\",\n                 (size_t) SSIZE_MAX, w, ((SSIZE_MAX > (ssize_t) w) ? \"true\" : \"false\"));\n\n  mhd_assert (SSIZE_MAX > w);\n  mhd_log_probe (\"RETURN_OK: returning %zd\", (ssize_t) w);\n  return (ssize_t) w;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_extended_uname_copy_z. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is correct for the reported configuration. In the shown function the statement is mhd_assert(SSIZE_MAX > w); if, in the project build, the mhd_assert macro expands to a no-op such as ((void)0) then that expression statement is executed but has no effect \u2014 removing it would not change program behaviour \u2014 and therefore meets the definition of dead code in MISRA C:2023 Rule 2.2. \n\nThis conclusion is conditional on the macro expansion: if mhd_assert is instead implemented to perform a runtime check (e.g. abort/log on failure) then the statement is not dead and there is no violation. The empty test log shown only indicates the test did not exercise the function and does not invalidate the dead-code assessment when the macro is a no-op."
}