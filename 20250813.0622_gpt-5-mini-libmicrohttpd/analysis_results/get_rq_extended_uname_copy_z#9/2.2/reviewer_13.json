{
  "user_message": "An agent A claimed that the following get_rq_extended_uname_copy_z code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_extended_uname_copy_z.\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The mhd_assert macro is defined as ((void)0) in the provided project. Therefore the statement mhd_assert(buf_size >= buf_used); expands to a no-op expression-statement with no side effects. Removing that statement would not change program behaviour in this build configuration, so it constitutes dead code under MISRA C 2023 Rule 2.2. (If the macro is non-empty in some other build configurations, the assertion would not be dead in those builds; but given the provided definition the project contains dead code.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nlog_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fputc('\\n', f);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  /* Log entry and initial state */\n  log_probe(\"ENTER get_rq_extended_uname_copy_z: uname_ext=%p uname_ext_len=%zu buf=%p buf_size=%zu\",\n            (const void *) uname_ext, uname_ext_len, (const void *) buf, buf_size);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len) {\n    log_probe(\"EARLY RETURN: input too long: SSIZE_MAX=%zu uname_ext_len=%zu\", (size_t) SSIZE_MAX, uname_ext_len);\n    return -1; /* Too long input string */\n  }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len) {\n    log_probe(\"EARLY RETURN: missing required prefix: MHD_DAUTH_EXT_PARAM_MIN_LEN=%zu uname_ext_len=%zu\",\n              (size_t) MHD_DAUTH_EXT_PARAM_MIN_LEN, uname_ext_len);\n    return -1; /* Required prefix is missing */\n  }\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n  {\n    log_probe(\"EARLY RETURN: prefix mismatch: uname_ext first bytes=%p prefix=%p\",\n              (const void *) uname_ext, (const void *) MHD_DAUTH_EXT_PARAM_PREFIX);\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n  }\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  log_probe(\"AFTER PREFIX: r=%zu (prefix length)\", r);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n    {\n      log_probe(\"EARLY RETURN: wrong char in language tag at r=%zu chr=%d ('%c')\",\n                r, (int) chr, (chr >= ' ' && chr <= '~') ? chr : '?');\n      return -1; /* Wrong char in language tag */\n    }\n    r++;\n  }\n  if (r >= uname_ext_len) {\n    log_probe(\"EARLY RETURN: end of language tag not found: r=%zu uname_ext_len=%zu\", r, uname_ext_len);\n    return -1; /* The end of the language tag was not found */\n  }\n  r++; /* Advance to the next char */\n  log_probe(\"AFTER LANG TAG: r=%zu remaining_len=%zu\", r, (uname_ext_len > r) ? (uname_ext_len - r) : 0);\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  log_probe(\"AFTER PCT DECODE: w=%zu buf_size=%zu\", w, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r)) {\n    log_probe(\"EARLY RETURN: broken percent encoding: w=0 remaining=%zu\", (uname_ext_len - r));\n    return -1; /* Broken percent encoding */\n  }\n  buf[w] = 0; /* Zero terminate the result */\n\n  /* Log the intended assertion condition and its evaluation so that a reviewer\n     can see whether the assertion would ever fire. This records the values\n     even if mhd_assert is compiled out (e.g. to ((void)0)). */\n  {\n    int assert_condition = (SSIZE_MAX > w);\n    log_probe(\"ASSERTION CHECK: SSIZE_MAX=%zu w=%zu condition=(SSIZE_MAX > w)=%d\",\n              (size_t) SSIZE_MAX, w, assert_condition);\n  }\n\n  mhd_assert (SSIZE_MAX > w);\n  log_probe(\"RETURN OK: w=%zu (cast to ssize_t) returning=%zd\", w, (ssize_t) w);\n  return (ssize_t) w;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_extended_uname_copy_z. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 2.2 forbids code that is executed but whose removal would not affect program behaviour. In the provided project mhd_assert is defined as ((void)0), so the statement mhd_assert(SSIZE_MAX > w); expands to an expression-statement that has no side effects. Removing that statement would not change program behaviour in this build configuration, so it is dead code and thus violates Rule 2.2. The test harness being unable to log anything for this function does not invalidate the reasoning \u2014 it only shows the function was not exercised at test time. (A possible mitigation is to ensure assertions are either omitted from production sources, made active in diagnostic builds only via conditional compilation, or replaced with a construct that has observable effect or is otherwise justified/annotated to avoid a Rule 2.2 violation.)"
}