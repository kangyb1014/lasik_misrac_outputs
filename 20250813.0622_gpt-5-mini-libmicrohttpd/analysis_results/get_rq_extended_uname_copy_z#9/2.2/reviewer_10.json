{
  "user_message": "An agent A claimed that the following get_rq_extended_uname_copy_z code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_extended_uname_copy_z.\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The mhd_assert macro is defined as ((void)0) in the provided code. Therefore the statement mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type); compiles to a no-op; removing it would not affect program behaviour. This constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_log_state(const char *stage, size_t r, size_t w, size_t uname_ext_len,\n              size_t buf_size, const char *uname_ext)\n{\n  FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n  if (f)\n  {\n    char firstc = '.';\n    if ((uname_ext != NULL) && (uname_ext_len > 0))\n    {\n      unsigned char uc = (unsigned char) uname_ext[0];\n      if ((uc >= 32u) && (uc <= 126u))\n        firstc = (char) uc;\n      else\n        firstc = '?';\n    }\n    fprintf(f, \"%s: r=%zu w=%zu uname_ext_len=%zu buf_size=%zu uname_ext_first='%c'\\n\",\n            stage, r, w, uname_ext_len, buf_size, firstc);\n    fclose(f);\n  }\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  /* Log entry */\n  mhd_log_state(\"entry\", 0u, 0u, uname_ext_len, buf_size, uname_ext);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n  {\n    mhd_log_state(\"return_too_long_input\", 0u, 0u, uname_ext_len, buf_size, uname_ext);\n    return -1; /* Too long input string */\n  }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n  {\n    mhd_log_state(\"return_missing_prefix\", 0u, 0u, uname_ext_len, buf_size, uname_ext);\n    return -1; /* Required prefix is missing */\n  }\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n  {\n    mhd_log_state(\"return_prefix_mismatch\", 0u, 0u, uname_ext_len, buf_size, uname_ext);\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n  }\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  mhd_log_state(\"after_prefix_init\", r, 0u, uname_ext_len, buf_size, uname_ext);\n\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n    {\n      mhd_log_state(\"return_bad_char_in_lang_tag\", r, 0u, uname_ext_len, buf_size, uname_ext);\n      return -1; /* Wrong char in language tag */\n    }\n    r++;\n  }\n\n  if (r >= uname_ext_len)\n  {\n    mhd_log_state(\"return_lang_tag_not_found\", r, 0u, uname_ext_len, buf_size, uname_ext);\n    return -1; /* The end of the language tag was not found */\n  }\n  r++; /* Advance to the next char */\n  mhd_log_state(\"after_lang_tag\", r, 0u, uname_ext_len, buf_size, uname_ext);\n\n  mhd_log_state(\"before_pct_decode\", r, 0u, uname_ext_len, buf_size, uname_ext);\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  mhd_log_state(\"after_pct_decode\", r, w, uname_ext_len, buf_size, uname_ext);\n\n  if ((0 == w) && (0 != uname_ext_len - r))\n  {\n    mhd_log_state(\"return_broken_pct_encoding\", r, w, uname_ext_len, buf_size, uname_ext);\n    return -1; /* Broken percent encoding */\n  }\n  buf[w] = 0; /* Zero terminate the result */\n\n  /* Log right before the mhd_assert to capture the state at that point */\n  mhd_log_state(\"before_assert\", r, w, uname_ext_len, buf_size, uname_ext);\n\n  mhd_assert (SSIZE_MAX > w);\n\n  /* And immediately after the assert to show it had no observable effect at runtime */\n  mhd_log_state(\"after_assert\", r, w, uname_ext_len, buf_size, uname_ext);\n\n  return (ssize_t) w;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_extended_uname_copy_z. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct under the stated conditions. Rule 2.2 defines dead code as any operation that is executed but whose removal would not affect program behaviour. If mhd_assert is defined as ((void)0) in the delivered project, the statement\n\n  mhd_assert (SSIZE_MAX > w);\n\nbecomes a no-op statement that executes but has no observable effect; removing it would not change program behaviour, so it meets the Rule 2.2 definition of dead code. Note this conclusion depends on how mhd_assert is defined in the project configuration: if the macro expands to runtime checks (or other side effects) then the statement is not dead. To remediate, either remove the no-op assertion, conditionally compile the assertion only for builds where it has effect, or provide a documented justification/annotation for the otherwise-dead statement."
}