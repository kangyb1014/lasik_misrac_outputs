{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement mhd_assert (MHD_CHECK_NONCENC_OK == nonce_nc_check); invokes the mhd_assert macro which is defined as ((void)0). As written this produces a no-op statement that is executed but has no effect; removing the statement would not change program behaviour. Therefore this is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_extended_uname_copy_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/74.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_extended_uname_copy_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_extended_uname_copy_z:\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\nPlease provide the modified get_rq_extended_uname_copy_z code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <sys/types.h>\n#include <limits.h>\n\n/* Probe helper: log control flow and key state to /tmp/logs/74.txt */\nstatic void mhd_probe_log(const char *event,\n                          const char *uname_ext, size_t uname_ext_len,\n                          size_t r, size_t w, size_t buf_size)\n{\n  FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"event=%s uname_ext_len=%zu r=%zu w=%zu buf_size=%zu\\n\",\n            event, uname_ext_len, r, w, buf_size);\n    if (uname_ext != NULL && uname_ext_len > 0)\n    {\n      /* Print up to first 16 bytes in hex for context */\n      size_t i_max = uname_ext_len < 16 ? uname_ext_len : 16;\n      fprintf(f, \" uname_ext[0..%zu]=\", i_max ? i_max - 1 : 0);\n      for (size_t i = 0; i < i_max; ++i)\n        fprintf(f, \"%02x \", (unsigned char) uname_ext[i]);\n      fprintf(f, \"\\n\");\n    }\n    fclose(f);\n  }\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  mhd_probe_log(\"entry\", uname_ext, uname_ext_len, 0u, 0u, buf_size);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n  {\n    mhd_probe_log(\"too_long_input\", uname_ext, uname_ext_len, 0u, 0u, buf_size);\n    return -1; /* Too long input string */\n  }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n  {\n    mhd_probe_log(\"missing_required_prefix\", uname_ext, uname_ext_len, 0u, 0u, buf_size);\n    return -1; /* Required prefix is missing */\n  }\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n  {\n    mhd_probe_log(\"prefix_mismatch\", uname_ext, uname_ext_len, 0u, 0u, buf_size);\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n  }\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n    {\n      mhd_probe_log(\"wrong_char_in_language_tag\", uname_ext, uname_ext_len, r, 0u, buf_size);\n      return -1; /* Wrong char in language tag */\n    }\n    r++;\n  }\n  if (r >= uname_ext_len)\n  {\n    mhd_probe_log(\"lang_tag_end_not_found\", uname_ext, uname_ext_len, r, 0u, buf_size);\n    return -1; /* The end of the language tag was not found */\n  }\n  r++; /* Advance to the next char */\n\n  mhd_probe_log(\"before_pct_decode\", uname_ext, uname_ext_len, r, 0u, buf_size);\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n  {\n    mhd_probe_log(\"broken_percent_encoding\", uname_ext, uname_ext_len, r, w, buf_size);\n    return -1; /* Broken percent encoding */\n  }\n  buf[w] = 0; /* Zero terminate the result */\n\n  /* Log state immediately before the assertion so the value that would be\n     asserted (SSIZE_MAX > w) is captured for later analysis. */\n  mhd_probe_log(\"before_mhd_assert\", uname_ext, uname_ext_len, r, w, buf_size);\n\n  mhd_assert (SSIZE_MAX > w);\n\n  mhd_probe_log(\"success_return\", uname_ext, uname_ext_len, r, w, buf_size);\n  return (ssize_t) w;\n}\n"
}