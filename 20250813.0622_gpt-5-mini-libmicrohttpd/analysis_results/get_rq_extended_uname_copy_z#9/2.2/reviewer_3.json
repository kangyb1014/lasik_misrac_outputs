{
  "user_message": "An agent A claimed that the following get_rq_extended_uname_copy_z code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_extended_uname_copy_z.\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The mhd_assert macro is defined as ((void)0). Thus the statement mhd_assert (! ((NULL != userdigest) && (NULL != password))); expands to a no-op and the boolean expression is never evaluated or has any effect. Removing the statement would not change program behaviour, so this constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  mhd_probe_log (\"enter get_rq_extended_uname_copy_z: uname_ext_len=%zu buf_size=%zu\", uname_ext_len, buf_size);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n  {\n    mhd_probe_log (\"reject: input too long: uname_ext_len=%zu SSIZE_MAX=%zu\", uname_ext_len, (size_t) SSIZE_MAX);\n    return -1; /* Too long input string */\n  }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n  {\n    mhd_probe_log (\"reject: missing required prefix: uname_ext_len=%zu min_len=%d\", uname_ext_len, MHD_DAUTH_EXT_PARAM_MIN_LEN);\n    return -1; /* Required prefix is missing */\n  }\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n  {\n    mhd_probe_log (\"reject: prefix mismatch (UTF-8 requirement)\");\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n  }\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  mhd_probe_log (\"after prefix, r=%zu\", r);\n\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n    {\n      mhd_probe_log (\"reject: wrong char in language tag at pos %zu: 0x%02x ('%c')\", r, (unsigned char) chr, (chr >= 32 && chr < 127) ? chr : '?');\n      return -1; /* Wrong char in language tag */\n    }\n    r++;\n  }\n  if (r >= uname_ext_len)\n  {\n    mhd_probe_log (\"reject: end of language tag not found: r=%zu uname_ext_len=%zu\", r, uname_ext_len);\n    return -1; /* The end of the language tag was not found */\n  }\n  r++; /* Advance to the next char */\n  mhd_probe_log (\"language tag end found, start of value at r=%zu\", r);\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  mhd_probe_log (\"percent-decode returned w=%zu remaining=%zu\", w, uname_ext_len - r);\n\n  if ((0 == w) && (0 != uname_ext_len - r))\n  {\n    mhd_probe_log (\"reject: broken percent encoding (w=0 but remaining=%zu)\", uname_ext_len - r);\n    return -1; /* Broken percent encoding */\n  }\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_probe_log (\"buf after decode (len=%zu): first_bytes=[%02x %02x %02x ...]\", w,\n                 w > 0 ? (unsigned char) buf[0] : 0,\n                 w > 1 ? (unsigned char) buf[1] : 0,\n                 w > 2 ? (unsigned char) buf[2] : 0);\n\n  /* Capture state around the mhd_assert to provide evidence that the assert\n     statement has no observable effect at runtime. We log the values before\n     and after the call so a reviewer can see that nothing changed. */\n  mhd_probe_log (\"pre_assert: w=%zu SSIZE_MAX=%zu\", w, (size_t) SSIZE_MAX);\n  mhd_assert (SSIZE_MAX > w);\n  mhd_probe_log (\"post_assert: w=%zu SSIZE_MAX=%zu\", w, (size_t) SSIZE_MAX);\n\n  mhd_probe_log (\"returning success len=%zu\", w);\n  return (ssize_t) w;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_extended_uname_copy_z. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is correct under the stated assumption. Rule 2.2 forbids \u2018\u2018any operation that is executed but whose removal would not affect program behaviour\u2019\u2019. If in the project mhd_assert is defined as ((void)0) then the statement\n  mhd_assert (SSIZE_MAX > w);\nbecomes an expression statement that does nothing at runtime. Removing that statement would not change program behaviour, so it meets the definition of dead code and thus violates MISRA C 2023 Rule 2.2.\n\nCaveats/notes:\n- This conclusion depends on the project configuration: if mhd_assert expands to code that evaluates the expression (or performs other observable actions), then the statement is not dead and there is no violation. The agent explicitly assumed mhd_assert is ((void)0), so the reported violation is valid for that configuration.\n- If the asserted expression had side effects (it does not in this case), the situation could be different. Also, the lack of test log lines only shows the function may not have been called during the test \u2014 it does not affect the static/semantic reasoning about the assertion being dead code when mhd_assert is a no-op."
}