{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro GREETINGPAGE expands to a string literal that is not declared with a const-qualified type. Although a string literal has static storage, using the macro in an expression will decay to a pointer to char (non-const), which violates MISRA C 2023 Rule 8.13 that pointers should point to const-qualified types when possible. Example violating use: char *p = GREETINGPAGE; \u2014 to fix, declare the literal with const, e.g. static const char GREETINGPAGE[] = \"<html>...%s...</html>\".\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified iterate_post code that contains useful probe functions that print useful logs to a file \"/tmp/logs/427.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of iterate_post as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified iterate_post code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper to append logs for reproduction/evidence. */\nstatic void probe_log(const char *event,\n                      const char *key,\n                      const char *data,\n                      size_t size,\n                      size_t maxanswersize,\n                      const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/427.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"[iterate_post] event=%s key=%s size=%zu maxanswersize=%zu note=%s data_ptr=%p\\n\",\n          event, key ? key : \"(null)\", size, maxanswersize, note ? note : \"(null)\", (const void *)data);\n\n  if (data != NULL && size > 0u)\n  {\n    /* Limit how much of data we dump to avoid enormous logs. */\n    size_t dump = size;\n    if (dump > 256u)\n      dump = 256u;\n\n    fprintf(f, \"data (first %zu bytes): \", dump);\n    /* fwrite accepts void*, cast away const for the write only. */\n    fwrite((const void *)data, 1u, dump, f);\n    if (dump < size)\n      fprintf(f, \"...\");\n    fprintf(f, \"\\n\");\n  }\n\n  fclose(f);\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  /* Log initial entry state. */\n  probe_log(\"entry\", key, data, size, (size_t)MAXANSWERSIZE, \"function-enter\");\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    probe_log(\"matched_name_key\", key, data, size, (size_t)MAXANSWERSIZE, \"inside-name-branch\");\n\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        probe_log(\"malloc_failed\", key, data, size, (size_t)MAXANSWERSIZE, \"malloc-returned-null\");\n        return MHD_NO;\n      }\n\n      /* Log before performing snprintf that uses GREETINGPAGE. This helps\n         reproduce evidence that the macro (string literal) is used here. */\n      probe_log(\"before_snprintf\", key, data, size, (size_t)MAXANSWERSIZE, \"about-to-call-snprintf-with-GREETINGPAGE\");\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n\n      /* Log after snprintf to capture resulting pointer and a truncated preview\n         of the formatted result (if small). */\n      probe_log(\"after_snprintf\", key, answerstring, strnlen(answerstring, 256u), (size_t)MAXANSWERSIZE, \"snprintf-completed\");\n\n      con_info->answerstring = answerstring;\n\n      probe_log(\"assigned_answerstring\", key, con_info->answerstring, strnlen(con_info->answerstring, 256u), (size_t)MAXANSWERSIZE, \"assigned-to-connection-info\");\n    }\n    else\n    {\n      con_info->answerstring = NULL;\n      probe_log(\"size_out_of_range\", key, data, size, (size_t)MAXANSWERSIZE, \"set-answerstring-null\");\n    }\n\n    return MHD_NO;\n  }\n\n  probe_log(\"no_match\", key, data, size, (size_t)MAXANSWERSIZE, \"key-not-name-return-yes\");\n  return MHD_YES;\n}\n"
}