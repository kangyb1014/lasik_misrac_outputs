{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) content_type;' is an executed no-op that has no side-effects (content_type is a non-volatile parameter). Removing this expression statement would not change program behaviour, so it constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. (Remedies: use the parameter, remove the parameter from the function signature, or use a sanctioned compiler/attribute mechanism to mark it intentionally unused.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified iterate_post code that contains useful probe functions that print useful logs to a file \"/tmp/logs/426.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of iterate_post as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified iterate_post code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe: append a simple log entry describing control flow and state. */\nstatic void\niterate_post_log (const char *stage, const char *key,\n                  const char *content_type, const char *data,\n                  uint64_t off, size_t size)\n{\n  FILE *f = fopen(\"/tmp/logs/426.txt\", \"a\");\n  if (f)\n  {\n    /* Print pointer values and fall back to textual representation only if non-NULL. */\n    fprintf (f,\n             \"[iterate_post] stage=%s key=%s content_type_ptr=%p content_type=%s data_ptr=%p data_len=%zu off=%llu\\n\",\n             stage,\n             (key != NULL) ? key : \"(null)\",\n             (void *) content_type,\n             (content_type != NULL) ? content_type : \"(null)\",\n             (void *) data,\n             size,\n             (unsigned long long) off);\n    fclose (f);\n  }\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  iterate_post_log (\"entry\", key, content_type, data, off, size);\n\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  /* Log immediately after executing the no-op cast for content_type so that\n     the runtime log shows the point in the control flow where the executed\n     no-op occurred. This provides evidence that the '(void) content_type;' is\n     executed at runtime. */\n  iterate_post_log (\"after_void_content_type\", key, content_type, data, off, size);\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    iterate_post_log (\"branch_name_enter\", key, content_type, data, off, size);\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        iterate_post_log (\"malloc_failed\", key, content_type, data, off, size);\n        return MHD_NO;\n      }\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n      iterate_post_log (\"malloc_and_snprintf_ok\", key, content_type, data, off, size);\n    }\n    else\n    {\n      con_info->answerstring = NULL;\n      iterate_post_log (\"name_size_out_of_range\", key, content_type, data, off, size);\n    }\n\n    return MHD_NO;\n  }\n\n  iterate_post_log (\"exit_yes\", key, content_type, data, off, size);\n  return MHD_YES;\n}\n"
}