{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf 'key' is NULL or not NUL-terminated. For example, if the caller passes key == NULL (or a buffer lacking a terminating '\\0'), strcmp(key, \"name\") will dereference/read beyond the bounds of the object referenced by 'key', causing an out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified iterate_post code that contains useful probe functions that print useful logs to a file \"/tmp/logs/431.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of iterate_post as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified iterate_post code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe function: logs call site and parameter state to /tmp/logs/431.txt. */\nstatic void\nlog_iterate_post_probe(void *coninfo_cls, int kind_val, const char *key,\n                       const char *filename, const char *content_type,\n                       const char *transfer_encoding, const char *data,\n                       uint64_t off, size_t size)\n{\n  FILE *f = fopen(\"/tmp/logs/431.txt\", \"a\");\n  if (!f)\n    return;\n\n  time_t t = time(NULL);\n  char timebuf[64] = \"(no time)\";\n  if (t != (time_t)-1)\n  {\n    struct tm tm;\n    if (localtime_r(&t, &tm))\n      strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm);\n  }\n\n  fprintf(f, \"---- iterate_post probe: %s ----\\n\", timebuf);\n  fprintf(f, \"coninfo_cls=%p kind=%d key_ptr=%p\", coninfo_cls, kind_val, (const void *)key);\n  if (key == NULL)\n    fprintf(f, \" (KEY IS NULL)\");\n  fprintf(f, \"\\n\");\n\n  fprintf(f, \"filename=%p content_type=%p transfer_encoding=%p data_ptr=%p\\n\",\n          (const void *)filename, (const void *)content_type,\n          (const void *)transfer_encoding, (const void *)data);\n\n  fprintf(f, \"off=%\" PRIu64 \" size=%zu\\n\", off, size);\n\n  /* Do not dereference 'key' here \u2014 that could itself trigger the very\n     out-of-bounds/read issues we are trying to observe. We log only the\n     pointer value so that later post-mortem / reproducer can correlate. */\n\n  fprintf(f, \"(end probe)\\n\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  /* Probe logging: record parameters and pointer state prior to the\n     strcmp. We intentionally do not dereference 'key' here so the probe\n     itself does not introduce further undefined behavior. This allows a\n     downstream reproducer to observe the pointer value (including NULL)\n     and then hit the original strcmp-induced fault if present. */\n  log_iterate_post_probe(coninfo_cls, (int) kind, key, filename, content_type,\n                         transfer_encoding, data, off, size);\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n"
}