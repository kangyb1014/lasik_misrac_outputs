{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'struct MHD_Connection *connection' is not const-qualified even though the function only reads from the pointed object (it only accesses connection->rq.headers_received and traverses headers). According to MISRA C 2023 Rule 8.13 this should be declared as 'const struct MHD_Connection *connection'. (Note: iterator_cls could also be made const if the iterator callback accepts a const context pointer, but that depends on the MHD_KeyValueIterator prototype.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append simple messages to /tmp/logs/107.txt */\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  mhd_log_probe(\"MHD_get_connection_values: entry connection=%p kind=%d iterator=%p iterator_cls=%p\",\n                (void *)connection, (int)kind, (void *)iterator, iterator_cls);\n\n  if (NULL == connection)\n  {\n    mhd_log_probe(\"MHD_get_connection_values: connection is NULL -> returning -1\");\n    return -1;\n  }\n  ret = 0;\n  mhd_log_probe(\"MHD_get_connection_values: begin headers traversal, first_header=%p\", (void *)connection->rq.headers_received);\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    const char *h = (pos->header != NULL) ? pos->header : \"(null)\";\n    const char *v = (pos->value != NULL) ? pos->value : \"(null)\";\n    mhd_log_probe(\"MHD_get_connection_values: visiting header node %p kind=%d header=%s value=%s\",\n                  (void *)pos, (int)pos->kind, h, v);\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      mhd_log_probe(\"MHD_get_connection_values: header matched kind mask -> incremented ret=%d\", ret);\n      if (NULL != iterator)\n      {\n        mhd_log_probe(\"MHD_get_connection_values: calling iterator %p with iterator_cls=%p kind=%d header=%s value=%s\",\n                      (void *)iterator, iterator_cls, (int)pos->kind, h, v);\n        int rc = iterator (iterator_cls,\n                           pos->kind,\n                           pos->header,\n                           pos->value);\n        mhd_log_probe(\"MHD_get_connection_values: iterator returned %d\", rc);\n        if (MHD_NO == rc)\n        {\n          mhd_log_probe(\"MHD_get_connection_values: iterator requested stop -> returning ret=%d\", ret);\n          return ret;\n        }\n      }\n    }\n  }\n  mhd_log_probe(\"MHD_get_connection_values: end traversal -> returning ret=%d\", ret);\n  return ret;\n}\n"
}