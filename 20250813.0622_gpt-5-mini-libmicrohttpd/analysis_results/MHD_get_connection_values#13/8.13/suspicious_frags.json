{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "struct MHD_HTTP_Req_Header *pos;",
    "for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)",
    "if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )",
    "_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)"
  ],
  "explanation": "The rest of the code does not indicate additional opportunities for const-qualification of pointer types and therefore need not be investigated for Rule 8.13: - The NULL check and early return (if (NULL == connection) return -1;) are control-flow checks and do not imply a pointer should be const-qualified. - The local scalar variable ret and its initialization/increment/returns (ret = 0; ret++; return ret;) are non-pointer operations and not relevant to pointer const-qualification. - The header-kind test (if (0 != (pos->kind & kind))) operates on integer/enum fields, not pointer types. - The use of pos->next in the loop control is part of linked-list traversal; the candidate pointer for const-qualification in that context is covered by the reported for-loop and pos declaration fragments. - The identifier 'iterator' is a function pointer; Rule 8.13 concerns pointers to object types and whether those object types should be const-qualified. Function-pointer types and their signature constness are outside the scope of the investigated object-pointer const-qualification here. - No other pointer objects (e.g. return types, other local variables) appear in the function body that would be read-only candidates for const qualification beyond the fragments already reported."
}