{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe third clause uses pos->next (pos = pos->next) while the loop body calls a user-provided function (iterator). If that function (or any code in the body) modifies or frees the list nodes or the next pointer (for example it removes or frees the current header node or changes pos->next), then the third clause reads an object that was modified in the loop body -> violation of Rule 14.2. The loop is only compliant if it is guaranteed that the body (including the iterator callback) does not modify the linked-list nodes or their next pointers; otherwise the for statement is not well-formed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/108.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/108.txt\", \"a\");\n\n  if (log)\n    fprintf(log, \"MHD_get_connection_values ENTER connection=%p kind=%d iterator=%p iterator_cls=%p\\n\",\n            (void *)connection, (int)kind, (void *)iterator, iterator_cls);\n\n  if (NULL == connection)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_get_connection_values: connection is NULL -> returning -1\\n\");\n      fclose(log);\n    }\n    return -1;\n  }\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log the pointer values and state BEFORE invoking user callback.\n       It's important to log pos and pos->next before the iterator call because\n       the iterator (or functions it calls) may modify or free list nodes,\n       which would make dereferencing pos after the call unsafe. */\n    if (log)\n    {\n      /* Casts to void* for pointer printing; cast kind to unsigned for safe printing. */\n      fprintf(log, \"LOOP pre  pos=%p pos->next=%p pos->kind=%u header=%p value=%p\\n\",\n              (void *)pos, (void *)pos->next, (unsigned)pos->kind,\n              (void *)pos->header, (void *)pos->value);\n    }\n\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if (log)\n        fprintf(log, \"MATCHED   incremented ret=%d - about to call iterator at %p\\n\",\n                ret, (void *)iterator);\n\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n      {\n        if (log)\n        {\n          /* Do not dereference pos after the iterator call; just note the early return. */\n          fprintf(log, \"ITERATOR returned MHD_NO -> early return ret=%d\\n\", ret);\n          fclose(log);\n        }\n        return ret;\n      }\n\n      if (log)\n      {\n        /* After the iterator returned, do NOT dereference pos (it may have been freed).\n           We can, however, record that control returned from the iterator. */\n        fprintf(log, \"ITERATOR returned normally - control back in loop (pos still %p)\\n\", (void *)pos);\n      }\n    }\n    /* The loop increment (pos = pos->next) is performed by the for statement's third clause.\n       We intentionally do not read pos->next here after the iterator returned to avoid\n       dereferencing possibly-modified memory. */\n  }\n\n  if (log)\n  {\n    fprintf(log, \"MHD_get_connection_values EXIT ret=%d\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n"
}