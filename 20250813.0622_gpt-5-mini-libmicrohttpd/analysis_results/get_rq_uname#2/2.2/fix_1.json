{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstruct MHD_String\n{\n  const char *str;\n  size_t len;\n};\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/18.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  /* Probing: record that the following assertion exists in source. Do not\n     attempt to call get_rq_uname_type(params) here because the reported\n     violation stems from mhd_assert being defined as a no-op; calling the\n     function during logging would introduce behavior that does not occur in\n     the original compiled binary when the macro expands to ((void)0). */\n  log_probe (\"ASSERT_PRESENT: get_rq_uname_type(params) == uname_type; (uname_type=%d)\", (int) uname_type);\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n\n  log_probe (\"ASSERT_PRESENT: MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type; (uname_type=%d)\", (int) uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n\n  log_probe (\"ASSERT_PRESENT: MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type; (uname_type=%d)\", (int) uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    log_probe (\"BRANCH: STANDARD; buf=%p buf_used=%zu buf_size=%zu params->username.len=%zu\",\n               (void *) buf, buf_used, buf_size, params ? params->username.len : 0);\n\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n\n    log_probe (\"RESULT: STANDARD: username_len=%zu buf_used=%zu\",\n               uname_info->username_len, buf_used);\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    log_probe (\"BRANCH: USERHASH; buf=%p buf_used=%zu params->username.len=%zu\",\n               (void *) buf, buf_used, params ? params->username.len : 0);\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    log_probe (\"USERHASH: userhash_hex_len=%zu res=%zu\",\n               uname_info->userhash_hex_len, res);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n      log_probe (\"USERHASH: invalid hex length; marked INVALID\");\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n      log_probe (\"USERHASH: valid; buf_used=%zu uname_type=%d\",\n                 buf_used, (int) uname_info->uname_type);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    log_probe (\"BRANCH: EXTENDED; buf=%p buf_used=%zu buf_size=%zu ext_len=%zu\",\n               (void *) buf, buf_used, buf_size, params ? params->username_ext.value.len : 0);\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n      log_probe (\"EXTENDED: username_len=%zu buf_used=%zu\",\n                 uname_info->username_len, buf_used);\n    }\n  }\n  else\n  {\n    /* The original source contains mhd_assert (0); keep it, but also log its\n       presence and the value that caused fall-through into the default. */\n    log_probe (\"ASSERT_PRESENT: mhd_assert(0); reached default branch with uname_type=%d\", (int) uname_type);\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  log_probe (\"ASSERT_PRESENT: buf_size >= buf_used; buf_size=%zu buf_used=%zu\", buf_size, buf_used);\n  mhd_assert (buf_size >= buf_used);\n  log_probe (\"RETURN: buf_used=%zu uname_type=%d username_len=%zu userhash_hex_len=%zu\",\n             buf_used, (int) uname_info->uname_type, uname_info->username_len, uname_info->userhash_hex_len);\n  return buf_used;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\ndigestauth.c: In function 'get_rq_uname':\ndigestauth.c:1164:75: error: 'const struct MHD_RqDAuthParam' has no member named 'len'\n 1164 |                (void *) buf, buf_used, buf_size, params ? params->username.len : 0);\n      |                                                                           ^\ndigestauth.c:1181:65: error: 'const struct MHD_RqDAuthParam' has no member named 'len'\n 1181 |                (void *) buf, buf_used, params ? params->username.len : 0);\n      |                                                                 ^\nmake[3]: *** [Makefile:2224: libmicrohttpd_la-digestauth.lo] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <sys/types.h>\n\nstruct MHD_String\n{\n  const char *str;\n  size_t len;\n};\n\n/* Minimal type declarations to allow this translation unit to compile.\n   These mirror the members used by get_rq_uname; actual definitions exist\n   in the original project. */\nstruct MHD_RqDAuthParam { struct MHD_String value; };\nstruct MHD_RqDAuth {\n  struct MHD_RqDAuthParam username;\n  struct { struct MHD_String value; } username_ext;\n};\n\nenum MHD_DigestAuthUsernameType {\n  MHD_DIGEST_AUTH_UNAME_TYPE_INVALID = 0,\n  MHD_DIGEST_AUTH_UNAME_TYPE_MISSING,\n  MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD,\n  MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH,\n  MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED\n};\n\nstruct MHD_DigestAuthUsernameInfo {\n  char *username;\n  size_t username_len;\n  char *userhash_hex;\n  size_t userhash_hex_len;\n  uint8_t *userhash_bin;\n  enum MHD_DigestAuthUsernameType uname_type;\n};\n\n/* External functions (implemented elsewhere in the project). */\nextern enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params);\nextern void mhd_assert (int condition);\nextern size_t get_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *dest);\nextern size_t MHD_hex_to_bin (const char *hex, size_t hex_len, uint8_t *bin_out);\nextern ssize_t get_rq_extended_uname_copy_z (const char *str, size_t len, char *dest, size_t dest_len);\n\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/18.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  /* Probing: record that the following assertion exists in source. Do not\n     attempt to call get_rq_uname_type(params) here because the reported\n     violation stems from mhd_assert being defined as a no-op; calling the\n     function during logging would introduce behavior that does not occur in\n     the original compiled binary when the macro expands to ((void)0). */\n  log_probe (\"ASSERT_PRESENT: get_rq_uname_type(params) == uname_type; (uname_type=%d)\", (int) uname_type);\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n\n  log_probe (\"ASSERT_PRESENT: MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type; (uname_type=%d)\", (int) uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n\n  log_probe (\"ASSERT_PRESENT: MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type; (uname_type=%d)\", (int) uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    log_probe (\"BRANCH: STANDARD; buf=%p buf_used=%zu buf_size=%zu params->username.len=%zu\",\n               (void *) buf, buf_used, buf_size, params ? params->username.value.len : 0);\n\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n\n    log_probe (\"RESULT: STANDARD: username_len=%zu buf_used=%zu\",\n               uname_info->username_len, buf_used);\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    log_probe (\"BRANCH: USERHASH; buf=%p buf_used=%zu params->username.len=%zu\",\n               (void *) buf, buf_used, params ? params->username.value.len : 0);\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    log_probe (\"USERHASH: userhash_hex_len=%zu res=%zu\",\n               uname_info->userhash_hex_len, res);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n      log_probe (\"USERHASH: invalid hex length; marked INVALID\");\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n      log_probe (\"USERHASH: valid; buf_used=%zu uname_type=%d\",\n                 buf_used, (int) uname_info->uname_type);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    log_probe (\"BRANCH: EXTENDED; buf=%p buf_used=%zu buf_size=%zu ext_len=%zu\",\n               (void *) buf, buf_used, buf_size, params ? params->username_ext.value.len : 0);\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n      log_probe (\"EXTENDED: username_len=%zu buf_used=%zu\",\n                 uname_info->username_len, buf_used);\n    }\n  }\n  else\n  {\n    /* The original source contains mhd_assert (0); keep it, but also log its\n       presence and the value that caused fall-through into the default. */\n    log_probe (\"ASSERT_PRESENT: mhd_assert(0); reached default branch with uname_type=%d\", (int) uname_type);\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  log_probe (\"ASSERT_PRESENT: buf_size >= buf_used; buf_size=%zu buf_used=%zu\", buf_size, buf_used);\n  mhd_assert (buf_size >= buf_used);\n  log_probe (\"RETURN: buf_used=%zu uname_type=%d username_len=%zu userhash_hex_len=%zu\",\n             buf_used, (int) uname_info->uname_type, uname_info->username_len, uname_info->userhash_hex_len);\n  return buf_used;\n}\n",
  "explanation": "The compile errors were caused by accessing a non-existent member \"len\" on params->username; in this code username is a MHD_RqDAuthParam whose length lives in username.value.len. I replaced uses of params->username.len with params->username.value.len. I also added minimal type declarations (struct MHD_RqDAuthParam, struct MHD_RqDAuth, enum and the username info struct) and extern prototypes for functions referenced but defined elsewhere so this translation unit can compile. The original logic of get_rq_uname is preserved."
}