{
  "user_message": "An agent A claimed that the following get_rq_uname code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_uname.\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The mhd_assert macro is defined as ((void)0), so the statement mhd_assert(SSIZE_MAX > w); compiles to a no-op. That statement is executed (as an empty expression statement) but its removal would not affect program behaviour in this build, so it constitutes dead code under MISRA C 2023 Rule 2.2. (Note: if mhd_assert is enabled in other build configurations, the assert would not be dead there, but given the provided macro definition this occurrence is dead code.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_probe_log(const char *location,\n              const void *params_ptr,\n              int uname_type_val,\n              size_t buf_size_val,\n              size_t buf_used_val,\n              const void *uname_info_ptr,\n              size_t extra1,\n              size_t extra2)\n{\n  FILE *f = fopen(\"/tmp/logs/18.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Log a compact record: location, pointer values and numeric state. */\n  fprintf(f, \"[get_rq_uname] %s: params=%p uname_type=%d buf_size=%zu buf_used=%zu uname_info=%p extra1=%zu extra2=%zu\\n\",\n          location, params_ptr, uname_type_val, buf_size_val, buf_used_val, uname_info_ptr, extra1, extra2);\n  fclose(f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  /* Probe before the assertions so we can observe that these locations are reached\n     even when mhd_assert is a no-op in this build. */\n  mhd_probe_log(\"before_assert_1\", params, (int) uname_type, buf_size, buf_used, uname_info, (size_t) get_rq_uname_type(params), 0);\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_probe_log(\"before_assert_2\", params, (int) uname_type, buf_size, buf_used, uname_info, 0, 0);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_probe_log(\"before_assert_3\", params, (int) uname_type, buf_size, buf_used, uname_info, 0, 0);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    /* Log the result of copying the standard username */\n    mhd_probe_log(\"branch_standard_after_copy\", params, (int) uname_type, buf_size, buf_used, uname_info, uname_info->username_len, 0);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    /* Log hex copy length */\n    mhd_probe_log(\"branch_userhash_after_hex_copy\", params, (int) uname_type, buf_size, buf_used, uname_info, uname_info->userhash_hex_len, 0);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    /* Log the conversion result and expected binary length */\n    mhd_probe_log(\"branch_userhash_after_hex_to_bin\", params, (int) uname_type, buf_size, buf_used, uname_info, res, uname_info->userhash_hex_len);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n      mhd_probe_log(\"branch_userhash_invalid\", params, (int) uname_type, buf_size, buf_used, uname_info, res, uname_info->userhash_hex_len);\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n      mhd_probe_log(\"branch_userhash_valid\", params, (int) uname_type, buf_size, buf_used, uname_info, res, uname_info->userhash_hex_len);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    /* Log the extended copy result */\n    mhd_probe_log(\"branch_extended_after_copy\", params, (int) uname_type, buf_size, buf_used, uname_info, (size_t) res, (size_t) params->username_ext.value.len);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    /* Log reaching the final else where an assertion of 0 is present. */\n    mhd_probe_log(\"before_assert_0_in_else\", params, (int) uname_type, buf_size, buf_used, uname_info, 0, 0);\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  /* Log buffer size vs used before the final assertion and return */\n  mhd_probe_log(\"before_final_assert\", params, (int) uname_type, buf_size, buf_used, uname_info, 0, 0);\n  mhd_assert (buf_size >= buf_used);\n  mhd_probe_log(\"before_return\", params, (int) uname_type, buf_size, buf_used, uname_info, 0, 0);\n  return buf_used;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_uname. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA Rule 2.2 forbids executed operations that can be removed without affecting program behaviour. In the provided build the mhd_assert macro expands to ((void)0), so the source-level assertion does not generate an executed operation that changes program state: the assertion expression (and any function-call operands) is not evaluated in the compiled code. In other words, there is no executed operation remaining in the object code that could be removed to change behaviour, so there is no dead operation present in that build artifact.\n\nTwo additional points that clarify the situation:\n- Rule 2.2 applies to the actual project build/configuration being checked. If mhd_assert is defined differently in another configuration (so the asserts become active and evaluate their operands), those builds must be checked separately. The presence of an assertion in source that is enabled in some configurations does not by itself make the code \u201cdead\u201d in configurations where the macro disables it; the analysis is per project/configuration.\n- Care is still warranted: placing function calls or expressions with side effects inside an assertion that is disabled by ((void)0) can change behaviour between builds (because the calls are omitted when assertions are disabled). That is a maintainability and correctness concern (and relevant to other MISRA rules), but it is not a Rule 2.2 violation in the configuration where the macro expands to ((void)0).\n\nRecommendation: Ensure assertions do not contain required side-effecting code, or use explicit conditional compilation or annotation macros so intent and build-time behaviour are clear to reviewers and static checkers."
}