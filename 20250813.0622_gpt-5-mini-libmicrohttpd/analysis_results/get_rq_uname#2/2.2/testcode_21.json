{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert macro is defined as ((void)0). Thus the statement mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type); is an executed no-op \u2014 removing it would not change program behaviour. This constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/18.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append log lines to /tmp/logs/18.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/18.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  /* Log entry and pre-assert state */\n  mhd_probe_log (\"ENTER get_rq_uname: params=%p, uname_type=%d, uname_info=%p, buf=%p, buf_size=%lu\",\n                 (void *) params, (int) uname_type, (void *) uname_info,\n                 (void *) buf, (unsigned long) buf_size);\n\n  mhd_probe_log (\"About to mhd_assert: get_rq_uname_type(params) == uname_type\");\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_probe_log (\"After mhd_assert 1\");\n\n  mhd_probe_log (\"About to mhd_assert: MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type (uname_type=%d)\", (int) uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_probe_log (\"After mhd_assert 2\");\n\n  mhd_probe_log (\"About to mhd_assert: MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type (uname_type=%d)\", (int) uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n  mhd_probe_log (\"After mhd_assert 3\");\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  mhd_probe_log (\"Initialised uname_info and buf_used=%lu\", (unsigned long) buf_used);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    mhd_probe_log (\"Branch: STANDARD\");\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    mhd_probe_log (\"Copied username: username=%p, username_len=%lu\",\n                   (void *) uname_info->username, (unsigned long) uname_info->username_len);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n    mhd_probe_log (\"After STANDARD branch: buf_used=%lu, uname_type set to STANDARD\",\n                   (unsigned long) buf_used);\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    mhd_probe_log (\"Branch: USERHASH\");\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    mhd_probe_log (\"Copied userhash_hex: userhash_hex=%p, userhash_hex_len=%lu\",\n                   (void *) uname_info->userhash_hex, (unsigned long) uname_info->userhash_hex_len);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    mhd_probe_log (\"MHD_hex_to_bin returned res=%lu (expected=%lu)\",\n                   (unsigned long) res, (unsigned long) (uname_info->userhash_hex_len / 2));\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      mhd_probe_log (\"USERHASH: hex->bin size mismatch: marking INVALID\");\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n      mhd_probe_log (\"USERHASH success: userhash_bin=%p, buf_used=%lu, uname_type=USERHASH\",\n                     (void *) uname_info->userhash_bin, (unsigned long) buf_used);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    mhd_probe_log (\"Branch: EXTENDED\");\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    mhd_probe_log (\"get_rq_extended_uname_copy_z returned res=%ld\", (long) res);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n      mhd_probe_log (\"EXTENDED success: username=%p, username_len=%lu, buf_used=%lu\",\n                     (void *) uname_info->username, (unsigned long) uname_info->username_len,\n                     (unsigned long) buf_used);\n    }\n  }\n  else\n  {\n    mhd_probe_log (\"Branch: ELSE (unexpected uname_type=%d) -> asserting 0 and setting INVALID\", (int) uname_type);\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_probe_log (\"About to final mhd_assert: buf_size >= buf_used (buf_size=%lu, buf_used=%lu)\",\n                 (unsigned long) buf_size, (unsigned long) buf_used);\n  mhd_assert (buf_size >= buf_used);\n  mhd_probe_log (\"EXIT get_rq_uname: returning buf_used=%lu, final uname_type=%d, username=%p, username_len=%lu, userhash_hex=%p, userhash_hex_len=%lu, userhash_bin=%p\",\n                 (unsigned long) buf_used, (int) uname_info->uname_type,\n                 (void *) uname_info->username, (unsigned long) uname_info->username_len,\n                 (void *) uname_info->userhash_hex, (unsigned long) uname_info->userhash_hex_len,\n                 (void *) uname_info->userhash_bin);\n  return buf_used;\n}\n"
}