{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe final else branch in get_rq_uname (the block with mhd_assert(0) and uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID) is unreachable in the project: callers (MHD_digest_auth_get_request_info3, MHD_digest_auth_get_username3 and MHD_digest_auth_get_username) obtain uname_type via get_rq_uname_type() and explicitly return or avoid calling get_rq_uname when uname_type is MHD_DIGEST_AUTH_UNAME_TYPE_MISSING or MHD_DIGEST_AUTH_UNAME_TYPE_INVALID, and the only remaining enum values (STANDARD, USERHASH, EXTENDED) are handled by the preceding if/else-if branches. Because mhd_assert is a no-op in production, the code still compiles but the else branch cannot be reached by any call path in the provided project code \u2014 violating MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/17.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "static void\nmhd_probe_log_entry(const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type,\n                    size_t buf_size)\n{\n  FILE *f = fopen(\"/tmp/logs/17.txt\", \"a\");\n  if (f)\n  {\n    /* Log entry and the computed uname_type for the request. */\n    fprintf(f, \"get_rq_uname ENTRY: uname_type=%d, get_rq_uname_type(params)=%d, buf_size=%zu\\n\",\n            (int) uname_type,\n            (int) get_rq_uname_type (params),\n            buf_size);\n    fclose(f);\n  }\n}\n\nstatic void\nmhd_probe_log_branch(const char *branch, size_t buf_used, struct MHD_DigestAuthUsernameInfo *uname_info)\n{\n  FILE *f = fopen(\"/tmp/logs/17.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"get_rq_uname BRANCH: %s, buf_used=%zu, uname_type=%d, username_len=%zu, userhash_hex_len=%zu\\n\",\n            branch,\n            buf_used,\n            (int) uname_info->uname_type,\n            uname_info->username_len,\n            uname_info->userhash_hex_len);\n    fclose(f);\n  }\n}\n\nstatic void\nmhd_probe_log_userhash(size_t userhash_hex_len, size_t res, int invalid)\n{\n  FILE *f = fopen(\"/tmp/logs/17.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"get_rq_uname USERHASH: userhash_hex_len=%zu, hex_to_bin_res=%zu, invalid=%d\\n\",\n            userhash_hex_len, res, invalid);\n    fclose(f);\n  }\n}\n\nstatic void\nmhd_probe_log_extended(ssize_t res)\n{\n  FILE *f = fopen(\"/tmp/logs/17.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"get_rq_uname EXTENDED: get_rq_extended_uname_copy_z_res=%lld\\n\", (long long) res);\n    fclose(f);\n  }\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  /* Probe log: entry */\n  mhd_probe_log_entry (params, uname_type, buf_size);\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n\n    /* Probe log: standard branch */\n    mhd_probe_log_branch(\"STANDARD\", buf_used, uname_info);\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n      /* Probe log: invalid hex */\n      mhd_probe_log_userhash (uname_info->userhash_hex_len, res, 1);\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n\n      /* Probe log: valid userhash */\n      mhd_probe_log_userhash (uname_info->userhash_hex_len, res, 0);\n    }\n\n    /* Probe log: userhash branch */\n    mhd_probe_log_branch(\"USERHASH\", buf_used, uname_info);\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n\n    /* Probe log: extended branch and result */\n    mhd_probe_log_extended (res);\n    mhd_probe_log_branch(\"EXTENDED\", buf_used, uname_info);\n  }\n  else\n  {\n    /* This block is reported as unreachable in the project; log if reached. */\n    FILE *f = fopen(\"/tmp/logs/17.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"get_rq_uname ELSE: reached unreachable branch! uname_type=%d\\n\", (int) uname_type);\n      fclose(f);\n    }\n\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n\n  /* Probe log: exit */\n  {\n    FILE *f = fopen(\"/tmp/logs/17.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"get_rq_uname EXIT: buf_used=%zu, final_uname_type=%d\\n\", buf_used, (int) uname_info->uname_type);\n      fclose(f);\n    }\n  }\n\n  return buf_used;\n}\n"
}