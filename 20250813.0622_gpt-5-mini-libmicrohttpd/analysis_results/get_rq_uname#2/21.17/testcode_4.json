{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcpy(buf, param->value.str, param->value.len) in get_rq_param_unquoted_copy_z can write param->value.len bytes plus a terminating NUL into the caller-supplied buffer without any check of the remaining space. In get_rq_uname the caller sets buf = base_buf + buf_used but does not verify buf_size - buf_used >= param->value.len + 1 before calling this function. If buf_size is small (or param->value.len is large) the memcpy (and the subsequent buf[param->value.len] = 0) will write past the end of the object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/23.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  /* Log entry and initial state */\n  mhd_probe_log (\"ENTER get_rq_uname: params=%p uname_type=%d buf=%p buf_size=%zu\",\n                 (const void *) params, (int) uname_type,\n                 (const void *) buf, buf_size);\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    size_t rv;\n\n    mhd_probe_log (\"BRANCH STANDARD: buf_used=%zu remaining=%zu username.param.str=%p username.param.len=%zu\",\n                   buf_used, buf_size > buf_used ? buf_size - buf_used : 0,\n                   (const void *) params->username.value.str,\n                   (size_t) params->username.value.len);\n\n    uname_info->username = (char *) (buf + buf_used);\n    /* Capture return value so we can log it */\n    rv = get_rq_param_unquoted_copy_z (&params->username,\n                                       uname_info->username);\n    uname_info->username_len = rv;\n    mhd_probe_log (\"RETURN get_rq_param_unquoted_copy_z (STANDARD): returned=%zu new_buf_ptr=%p\",\n                   rv, (const void *) uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    mhd_probe_log (\"AFTER STANDARD: buf_used=%zu buf_size=%zu\",\n                   buf_used, buf_size);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n    size_t rv_hex;\n\n    mhd_probe_log (\"BRANCH USERHASH: buf_used=%zu remaining=%zu username.param.str=%p username.param.len=%zu\",\n                   buf_used, buf_size > buf_used ? buf_size - buf_used : 0,\n                   (const void *) params->username.value.str,\n                   (size_t) params->username.value.len);\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    rv_hex = get_rq_param_unquoted_copy_z (&params->username,\n                                           uname_info->userhash_hex);\n    uname_info->userhash_hex_len = rv_hex;\n    mhd_probe_log (\"RETURN get_rq_param_unquoted_copy_z (USERHASH): returned=%zu hex_ptr=%p\",\n                   rv_hex, (const void *) uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    mhd_probe_log (\"AFTER USERHASH hex copy: buf_used=%zu buf_size=%zu\",\n                   buf_used, buf_size);\n\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    mhd_probe_log (\"Calling MHD_hex_to_bin: hex=%p hex_len=%zu bin_dest=%p\",\n                   (const void *) uname_info->userhash_hex,\n                   uname_info->userhash_hex_len,\n                   (const void *) uname_info->userhash_bin);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    mhd_probe_log (\"RETURN MHD_hex_to_bin: bytes_written=%zu expected=%zu\",\n                   res, uname_info->userhash_hex_len / 2);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n      mhd_probe_log (\"USERHASH invalid: res mismatch, marking INVALID\");\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n      mhd_probe_log (\"USERHASH success: buf_used now=%zu buf_size=%zu\",\n                     buf_used, buf_size);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n\n    mhd_probe_log (\"BRANCH EXTENDED: buf_used=%zu remaining=%zu username_ext.str=%p username_ext.len=%zu\",\n                   buf_used, buf_size > buf_used ? buf_size - buf_used : 0,\n                   (const void *) params->username_ext.value.str,\n                   (size_t) params->username_ext.value.len);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    mhd_probe_log (\"RETURN get_rq_extended_uname_copy_z: returned=%zd\",\n                   (ssize_t) res);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n      mhd_probe_log (\"AFTER EXTENDED: username_len=%zu buf_used=%zu buf_size=%zu\",\n                     uname_info->username_len, buf_used, buf_size);\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    mhd_probe_log (\"BRANCH UNKNOWN: marked INVALID\");\n  }\n\n  mhd_probe_log (\"EXIT get_rq_uname: final buf_used=%zu buf_size=%zu assert_ok=%d\",\n                 buf_used, buf_size, (int) (buf_size >= buf_used));\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}