{
  "user_message": "An agent A claimed that the following get_rq_uname code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_uname.\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In get_rq_param_unquoted_copy_z when param->quoted is false the code does memcpy(buf, param->value.str, param->value.len); followed by buf[param->value.len] = 0; The function has no knowledge of the destination buffer size and the caller (get_rq_uname) does not check that (buf_size - buf_used) >= (param->value.len + 1) before calling. If, for example, get_rq_uname is called with buf_size == 5, buf_used == 0 and param->value.len == 5, the memcpy writes 5 bytes into buf[0..4] and the subsequent buf[5] = 0 writes one past the allocated area, causing an out\u2011of\u2011bounds access. Therefore the statement can lead to accesses beyond the bounds of the object and violates MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  probe_log (\"ENTER get_rq_uname: params=%p uname_type=%d buf=%p buf_size=%zu\",\n             (const void *) params, (int) uname_type, (const void *) buf,\n             buf_size);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    /* Log state before copying username */\n    size_t param_len = params->username.value.len;\n    size_t remaining = buf_size - buf_used;\n    probe_log (\"BRANCH STANDARD: param_len=%zu buf_used=%zu remaining=%zu needed=%zu\",\n               param_len, buf_used, remaining, param_len + 1);\n\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    probe_log (\"AFTER get_rq_param_unquoted_copy_z (STANDARD): copied_len=%zu buf_used(before)=%zu\",\n               uname_info->username_len, buf_used);\n\n    buf_used += uname_info->username_len + 1;\n    probe_log (\"UPDATED buf_used=%zu buf_size=%zu\",\n               buf_used, buf_size);\n\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    /* Log state before copying userhash hex */\n    size_t param_len = params->username.value.len;\n    size_t remaining = buf_size - buf_used;\n    probe_log (\"BRANCH USERHASH: param_len=%zu buf_used=%zu remaining=%zu needed=%zu\",\n               param_len, buf_used, remaining, param_len + 1);\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    probe_log (\"AFTER get_rq_param_unquoted_copy_z (USERHASH): hex_len=%zu buf_used(before)=%zu\",\n               uname_info->userhash_hex_len, buf_used);\n\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    probe_log (\"MHD_hex_to_bin returned %zu (expected %zu)\",\n               res, uname_info->userhash_hex_len / 2);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n      probe_log (\"USERHASH final buf_used=%zu buf_size=%zu\",\n                 buf_used, buf_size);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    /* Log state before calling extended copy */\n    size_t param_len = params->username_ext.value.len;\n    size_t remaining = buf_size - buf_used;\n    probe_log (\"BRANCH EXTENDED: param_len=%zu buf_used=%zu remaining=%zu needed=%zu str=%p\",\n               param_len, buf_used, remaining, param_len + 1,\n               (const void *) params->username_ext.value.str);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    probe_log (\"AFTER get_rq_extended_uname_copy_z: res=%zd buf_used(before)=%zu\",\n               res, buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n      probe_log (\"EXTENDED final buf_used=%zu buf_size=%zu\",\n                 buf_used, buf_size);\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  probe_log (\"BEFORE RETURN: buf_used=%zu buf_size=%zu\", buf_used, buf_size);\n  mhd_assert (buf_size >= buf_used);\n  probe_log (\"EXIT get_rq_uname: returning buf_used=%zu\", buf_used);\n  return buf_used;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_uname. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. get_rq_uname calls get_rq_param_unquoted_copy_z for the STANDARD and USERHASH branches without providing or checking the remaining destination buffer size. If get_rq_param_unquoted_copy_z (as described in the scenario) performs a memcpy(buf, param->value.str, param->value.len) followed by buf[param->value.len] = '\\0' when param->quoted is false, then a caller-supplied small buffer (e.g. buf_size == 5 and param->value.len == 5) will cause a one\u2011byte write past the end of the destination object. That is exactly the kind of out\u2011of\u2011bounds access Rule 21.17 forbids for string.h functions (including memcpy). Note that the EXTENDED branch correctly passes the remaining size to its helper, but STANDARD and USERHASH do not. To resolve the violation either ensure the caller checks remaining >= param_len+1 before calling, or change the helper to take the destination size and perform bounds\u2011checked copying internally."
}