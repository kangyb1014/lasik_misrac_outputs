{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. In the USERHASH branch uname_info->userhash_hex is set to (char *)(buf + buf_used) and then get_rq_param_unquoted_copy_z(...) is called without checking the remaining space in buf. get_rq_param_unquoted_copy_z either does memcpy(buf, param->value.str, param->value.len) and writes a NUL at buf[param->value.len] or calls MHD_str_unquote and writes len bytes plus a terminating NUL. If buf_size - buf_used <= param->value.len (or if the unquoted length >= buf_size - buf_used), these writes overflow the buffer and thus the use of memcpy/MHD_str_unquote can access beyond the object bounds. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "static void\nmhd_log_probe(const char *msg, const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              size_t buf_used, size_t buf_size,\n              size_t extra_len, ssize_t result)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"get_rq_uname: %s\\n\", msg);\n  fprintf(f, \"  uname_type=%d buf_size=%zu buf_used(before)=%zu remaining=%zu\\n\",\n          (int) uname_type, buf_size, buf_used, (buf_size > buf_used) ? buf_size - buf_used : 0);\n  /* extra_len is used to pass parameter lengths when available */\n  fprintf(f, \"  param_len=%zu result=%zd\\n\", extra_len, result);\n  if (params)\n  {\n    /* try to print some fields if present */\n    /* Note: these prints mirror the fields used in get_rq_uname; they assume\n       those members exist in the passed-in struct as in the original code. */\n    fprintf(f, \"  params pointer=%p\\n\", (const void *) params);\n  }\n  fclose(f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  /* Log entry state */\n  mhd_log_probe(\"enter\", params, uname_type, buf_used, buf_size, 0, 0);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    /* Log before handling standard username */\n    mhd_log_probe(\"STANDARD branch - before get_rq_param_unquoted_copy_z\",\n                  params, uname_type, buf_used, buf_size,\n                  params->username.value.len, 0);\n\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    /* Log after copy */\n    mhd_log_probe(\"STANDARD branch - after get_rq_param_unquoted_copy_z\",\n                  params, uname_type, buf_used, buf_size,\n                  params->username.value.len, (ssize_t) uname_info->username_len);\n\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    /* Log before handling userhash */\n    mhd_log_probe(\"USERHASH branch - before get_rq_param_unquoted_copy_z\",\n                  params, uname_type, buf_used, buf_size,\n                  params->username.value.len, 0);\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    /* Log after hex copy and show remaining space info */\n    mhd_log_probe(\"USERHASH branch - after get_rq_param_unquoted_copy_z\",\n                  params, uname_type, buf_used, buf_size,\n                  params->username.value.len, (ssize_t) uname_info->userhash_hex_len);\n\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n\n    /* Log hex-to-bin conversion result */\n    mhd_log_probe(\"USERHASH branch - after MHD_hex_to_bin\",\n                  params, uname_type, buf_used, buf_size,\n                  uname_info->userhash_hex_len, (ssize_t) res);\n\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n\n    /* Log before extended uname handling */\n    mhd_log_probe(\"EXTENDED branch - before get_rq_extended_uname_copy_z\",\n                  params, uname_type, buf_used, buf_size,\n                  params->username_ext.value.len, 0);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n\n    /* Log result of extended copy */\n    mhd_log_probe(\"EXTENDED branch - after get_rq_extended_uname_copy_z\",\n                  params, uname_type, buf_used, buf_size,\n                  params->username_ext.value.len, res);\n\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  /* Log final state and potential overflow detection */\n  mhd_log_probe(\"exit - final state\",\n                params, uname_type, buf_used, buf_size, 0, 0);\n\n  if (buf_size < buf_used)\n  {\n    /* Extra logging when an overflow situation would be detected by the\n       following assertion in the original code. We do not change behavior. */\n    FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"get_rq_uname: BUFFER_OVERFLOW_DETECTED buf_size=%zu buf_used=%zu\\n\",\n              buf_size, buf_used);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}