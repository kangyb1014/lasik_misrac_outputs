{
  "user_message": "An agent A claimed that the following parse_cookie_header code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n.\n</misra_rule>\n<target_code>\nHere is the original code of parse_cookie_header.\n```c\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n    return MHD_PARSE_COOKIE_OK;\n  if (0 == hdr_len)\n    return MHD_PARSE_COOKIE_OK;\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  default:\n    mhd_assert (0);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  return parse_res;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The default branch contains \"mhd_assert(0); break;\". If mhd_assert expands to a non\u2011returning action (for example it calls abort()/is a noreturn function, or assert(0) fires and does not return), the subsequent break statement is unreachable. In that case the code contains unreachable code (the break in the default case) and thus violates MISRA C 2023 Rule 2.1.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log_state(struct MHD_Connection *connection,\n                                enum _MHD_ParseCookie parse_res,\n                                const char *stage,\n                                const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/193.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Print basic control flow and a few state details useful to reproduce the\n     reported violation scenario. Casting pointers to void* for portability. */\n  fprintf(f, \"stage=%s parse_res=%d note=%s connection=%p\\n\",\n          stage, (int) parse_res, (note ? note : \"\"), (void *) connection);\n  if (connection != NULL)\n  {\n    /* Attempt to print rq.headers_received_tail pointer if available. */\n    fprintf(f, \"  rq.headers_received_tail=%p saved_tail=%p\\n\",\n            (void *) connection->rq.headers_received_tail, (void *) connection->rq.headers_received_tail);\n  }\n  fclose(f);\n}\n\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n  {\n    /* Log: no Cookie header found */\n    mhd_probe_log_state(connection, (enum _MHD_ParseCookie)0, \"no_header\", \"No Cookie header present\");\n    return MHD_PARSE_COOKIE_OK;\n  }\n  if (0 == hdr_len)\n  {\n    /* Log: empty Cookie header */\n    mhd_probe_log_state(connection, (enum _MHD_ParseCookie)0, \"empty_header\", \"Empty Cookie header\");\n    return MHD_PARSE_COOKIE_OK;\n  }\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    /* Log: about to parse cookies string, include trimmed length */\n    mhd_probe_log_state(connection, (enum _MHD_ParseCookie)0, \"about_to_parse\", \"Calling parse_cookies_string\");\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n\n    /* Log: parse result after parse_cookies_string */\n    mhd_probe_log_state(connection, parse_res, \"after_parse\", \"Result from parse_cookies_string\");\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  default:\n    /* Log: default branch reached with unexpected parse_res value. This\n       helps reproduce the scenario where mhd_assert is non-returning and the\n       subsequent break would be unreachable. */\n    mhd_probe_log_state(connection, parse_res, \"default_case\", \"About to call mhd_assert(0)\");\n    mhd_assert (0);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  return parse_res;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55b611cb9cf0\n  rq.headers_received_tail=0x55b611cc1e40 saved_tail=0x55b611cc1e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55ad462cccf0\n  rq.headers_received_tail=0x55ad462d4e40 saved_tail=0x55ad462d4e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55ad462cccf0\n  rq.headers_received_tail=0x55ad462d4e40 saved_tail=0x55ad462d4e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55ad462cccf0\n  rq.headers_received_tail=0x55ad462d4e40 saved_tail=0x55ad462d4e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55ad462cccf0\n  rq.headers_received_tail=0x55ad462d4e40 saved_tail=0x55ad462d4e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55ad462cccf0\n  rq.headers_received_tail=0x55ad462d4e40 saved_tail=0x55ad462d4e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55ad462cccf0\n  rq.headers_received_tail=0x55ad462d4e40 saved_tail=0x55ad462d4e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55ad462cccf0\n  rq.headers_received_tail=0x55ad462d4e40 saved_tail=0x55ad462d4e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55ad462cccf0\n  rq.headers_received_tail=0x55ad462d4e40 saved_tail=0x55ad462d4e40\nstage=no_header parse_res=0 note=No Cookie header present connection=0x55ad462cccf0\n  rq.headers_received_tail=0x55ad462d4e40 saved_tail=0x55ad4\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The default branch calls mhd_assert(0) and then has a subsequent break; if, in this project, mhd_assert expands to a non\u2011returning action (for example it calls abort() or is a noreturn function), the break statement is unreachable. MISRA C 2023 Rule 2.1 forbids unreachable code in the project, so the presence of that unreachable break constitutes a violation."
}