{
  "user_message": "An agent A claimed that the following parse_cookie_header code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of parse_cookie_header.\n```c\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n    return MHD_PARSE_COOKIE_OK;\n  if (0 == hdr_len)\n    return MHD_PARSE_COOKIE_OK;\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  default:\n    mhd_assert (0);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  return parse_res;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Yes. In the provided project mhd_assert is defined as a no-op macro (#define mhd_assert(ignore) ((void)0)). Therefore the statement mhd_assert(! val_quoted || ';' == str[i]); expands to ((void)0); \u2014 an operation that does nothing and whose removal would not affect program behaviour. That constitutes dead code under MISRA C 2023 Rule 2.2. (If mhd_assert were defined to evaluate its argument or otherwise have an effect, this would not be a violation.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log_event(const char *tag, struct MHD_Connection *connection, const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/194.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"[%s] conn=%p: %s\\n\", tag, (void *) connection, msg ? msg : \"(null)\");\n    fclose(f);\n  }\n}\nstatic void mhd_probe_log_parse_res(const char *tag, struct MHD_Connection *connection, enum _MHD_ParseCookie parse_res, const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/194.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"[%s] conn=%p: parse_res=%d %s\\n\", tag, (void *) connection, (int) parse_res, extra ? extra : \"\");\n    fclose(f);\n  }\n}\n\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n  {\n    mhd_probe_log_event(\"parse_cookie_header\", connection, \"no cookie header present -> returning MHD_PARSE_COOKIE_OK\");\n    return MHD_PARSE_COOKIE_OK;\n  }\n  if (0 == hdr_len)\n  {\n    mhd_probe_log_event(\"parse_cookie_header\", connection, \"cookie header length is zero -> returning MHD_PARSE_COOKIE_OK\");\n    return MHD_PARSE_COOKIE_OK;\n  }\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n  {\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n    mhd_probe_log_parse_res(\"parse_cookie_header\", connection, parse_res, \"allocation failed\");\n  }\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    {\n      char buf[128];\n      /* Log header trimming info (trim to 127 chars) */\n      size_t show_len = hdr_len - i;\n      if (show_len > 120) show_len = 120;\n      memcpy(buf, cpy + i, show_len);\n      buf[show_len] = '\\0';\n      mhd_probe_log_event(\"parse_cookie_header\", connection, buf);\n    }\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n    mhd_probe_log_parse_res(\"parse_cookie_header\", connection, parse_res, \"after parse_cookies_string\");\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    mhd_probe_log_event(\"parse_cookie_header\", connection, \"case: MHD_PARSE_COOKIE_OK\");\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    mhd_probe_log_event(\"parse_cookie_header\", connection, \"case: MHD_PARSE_COOKIE_OK_LAX\");\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    mhd_probe_log_event(\"parse_cookie_header\", connection, \"case: MHD_PARSE_COOKIE_MALFORMED\");\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    mhd_probe_log_event(\"parse_cookie_header\", connection, \"case: MHD_PARSE_COOKIE_NO_MEMORY\");\n    break;\n  default:\n    mhd_probe_log_event(\"parse_cookie_header\", connection, \"default case reached: about to call mhd_assert(0)\");\n    /* The presence of this mhd_assert is under scrutiny: if mhd_assert is a no-op macro it becomes dead code */\n    mhd_assert (0);\n    mhd_probe_log_event(\"parse_cookie_header\", connection, \"default case: returned from mhd_assert(0)\");\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  return parse_res;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x55dbec2e6cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x556e9c49ccf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x563f22c90cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x563f22c90cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x563f22c90cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x563f22c90cf0: no cookie header present -> returning MHD_PARSE_COOKIE_OK\n[parse_cookie_header] conn=0x563f22c90cf0: no cookie hea\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Incorrect. MISRA 2.2 defines dead code as an operation that is executed yet removable without changing behaviour. Note 2 explicitly distinguishes unreachable code (not dead code). In the provided project the mhd_assert macro may expand to a no-op, but the only occurrence under scrutiny sits in the switch default arm. The exhaustive test log shows that the default arm is never reached, so that statement is not executed (it is unreachable in the tested/exhaustive scenario) and therefore is not dead code under MISRA Rule 2.2. Consequently Agent A's report that this constitutes a Rule 2.2 violation is not correct."
}