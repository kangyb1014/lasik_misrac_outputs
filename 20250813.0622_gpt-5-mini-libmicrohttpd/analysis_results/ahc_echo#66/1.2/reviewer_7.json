{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function is prefixed by the macro _MHD_EXTERN. That macro is typically used to inject compiler-specific storage/visibility attributes (for example __attribute__((visibility(\"default\"))) or __declspec(dllexport)) which are compiler extensions. If _MHD_EXTERN expands to such compiler-specific attributes/keywords, this use violates MISRA C 2023 Rule 1.2 (language extensions must not be used).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nahc_echo_log_probe(const char *stage,\n                   const char *method,\n                   const char *url,\n                   const char *version,\n                   void **req_cls,\n                   void *aptr_addr)\n{\n  FILE *f = fopen(\"/tmp/logs/528.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"---- ahc_echo probe: %s ----\\n\", stage ? stage : \"(null)\");\n\n  /* Compile-time presence of the indicator macro reported by the other agent. */\n#ifdef _MHD_EXTERN\n  fprintf(f, \"_MHD_EXTERN: DEFINED\\n\");\n#else\n  fprintf(f, \"_MHD_EXTERN: NOT DEFINED\\n\");\n#endif\n\n  /* Some compiler-identifying macros for additional context (optional). */\n#ifdef __GNUC__\n  fprintf(f, \"__GNUC__: %d\\n\", __GNUC__);\n#endif\n#ifdef _MSC_VER\n  fprintf(f, \"_MSC_VER: %d\\n\", _MSC_VER);\n#endif\n\n  fprintf(f, \"method: %s\\n\", method ? method : \"(null)\");\n  fprintf(f, \"url ptr: %p, version ptr: %p\\n\", (void *) url, (void *) version);\n  fprintf(f, \"aptr addr: %p, req_cls ptr: %p\\n\", aptr_addr, (void *) req_cls);\n  if (NULL != req_cls)\n  {\n    void *req_cls_val = *req_cls;\n    fprintf(f, \"*req_cls (current value): %p\\n\", req_cls_val);\n  }\n  else\n    fprintf(f, \"req_cls is NULL\\n\");\n\n  fprintf(f, \"Comparing method to \\\"GET\\\" -> strcmp result: \");\n  if (NULL == method)\n    fprintf(f, \"(null method)\\n\");\n  else\n    fprintf(f, \"%d\\n\", strcmp(method, \"GET\"));\n\n  fprintf(f, \"-------------------------------\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and compile-time info (e.g. whether _MHD_EXTERN was defined at compile time). */\n  ahc_echo_log_probe(\"entry\", method, url, version, req_cls, &aptr);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    /* Log unexpected method before returning. */\n    ahc_echo_log_probe(\"unexpected_method\", method, url, version, req_cls, &aptr);\n    return MHD_NO;              /* unexpected method */\n  }\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    /* Log that we're registering the request context and returning early. */\n    ahc_echo_log_probe(\"first_call_set_req_cls\", method, url, version, req_cls, &aptr);\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n\n  /* For logging: safely capture some auth_info fields if present. */\n  int auth_username_len = -1;\n  int auth_password_len = -1;\n  const char *auth_username = NULL;\n  const char *auth_password = NULL;\n  if (NULL != auth_info)\n  {\n    auth_username_len = auth_info->username_len;\n    auth_password_len = auth_info->password_len;\n    auth_username = auth_info->username;\n    auth_password = auth_info->password;\n  }\n\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n\n  /* Log authentication details and decision. */\n  {\n    FILE *f = fopen(\"/tmp/logs/528.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"auth_info ptr: %p\\n\", (void *) auth_info);\n      fprintf(f, \"auth_username_len: %d, auth_password_len: %d\\n\",\n              auth_username_len, auth_password_len);\n      if (NULL != auth_username)\n        fprintf(f, \"auth_username (ptr): %p, prefix: '%.16s'\\n\", (void *) auth_username, auth_username);\n      else\n        fprintf(f, \"auth_username: NULL\\n\");\n      if (NULL != auth_password)\n        fprintf(f, \"auth_password (ptr): %p, prefix: '%.16s'\\n\", (void *) auth_password, auth_password);\n      else\n        fprintf(f, \"auth_password: NULL\\n\");\n      fprintf(f, \"computed fail value: %d\\n\", fail);\n      fprintf(f, \"-------------------------------\\n\");\n      fclose(f);\n    }\n  }\n\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n\n  /* Log final return value for traceability. */\n  {\n    FILE *f = fopen(\"/tmp/logs/528.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"ahc_echo returning ret: %d\\n\", (int) ret);\n      fprintf(f, \"===============================\\n\");\n      fclose(f);\n    }\n  }\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the evidence. The submitted ahc_echo implementation is declared as a static function (static enum MHD_Result ahc_echo ...) and is not prefixed by any _MHD_EXTERN macro in the provided source. MISRA C 2023 Rule 1.2 is only violated if the compilation unit actually uses a compiler-specific language extension (for example a macro that expands to __attribute__((...)) or __declspec(...)) and that expansion is present in the code. Agent A's claim is hypothetical: it assumes _MHD_EXTERN is applied and expands to a compiler extension, but there is no definition or use of that macro in the supplied target code, and the supplied probe/test did not show the macro defined at compile time. To demonstrate a true violation you must show the macro is present and how it expands (inspect the header that defines _MHD_EXTERN or the preprocessor output, e.g. gcc -E). If you find that _MHD_EXTERN expands to a compiler-specific extension, then the use would be non\u2011compliant with Rule 1.2; as presented, the report is incorrect."
}