{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(auth_info->username, \"Aladdin\", auth_info->username_len). auth_info->username is explicitly zero-terminated by MHD_basic_auth_get_username_password3 and \"Aladdin\" is a null-terminated literal, so memcmp is being used to compare null-terminated strings (even though the length is supplied). This violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/534.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "static void ahc_log_probe(const char *tag,\n                              struct MHD_BasicAuthInfo *auth_info,\n                              const char *method,\n                              const void *req_cls)\n{\n  FILE *f = fopen(\"/tmp/logs/534.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  fprintf(f, \"-- ahc_echo probe: %s --\\n\", tag);\n  fprintf(f, \"req_cls ptr=%p\\n\", req_cls);\n  if (method != NULL)\n  {\n    fprintf(f, \"method=%s\\n\", method);\n  }\n  if (auth_info == NULL)\n  {\n    fprintf(f, \"auth_info=NULL\\n\");\n  }\n  else\n  {\n    fprintf(f, \"auth_info: username_len=%zu password_len=%zu\\n\",\n            auth_info->username_len, auth_info->password_len);\n\n    fprintf(f, \"username bytes: \");\n    if ((auth_info->username != NULL) && (auth_info->username_len > 0u))\n    {\n      /* write raw bytes up to username_len so logs show exact content */\n      fwrite(auth_info->username, 1u, auth_info->username_len, f);\n    }\n    fprintf(f, \"\\n\");\n\n    fprintf(f, \"password bytes: \");\n    if ((auth_info->password != NULL) && (auth_info->password_len > 0u))\n    {\n      fwrite(auth_info->password, 1u, auth_info->password_len, f);\n    }\n    fprintf(f, \"\\n\");\n  }\n  fprintf(f, \"-- end probe --\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry to help reproduce the reported violation scenario */\n  ahc_log_probe(\"entry\", NULL, method, (const void *) *req_cls);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    ahc_log_probe(\"unexpected method\", NULL, method, (const void *) *req_cls);\n    return MHD_NO;              /* unexpected method */\n  }\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    ahc_log_probe(\"first call - defer response\", NULL, method, (const void *) *req_cls);\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n\n  /* Log auth info as obtained from the library */\n  ahc_log_probe(\"after MHD_basic_auth_get_username_password3\", auth_info, method, (const void *) *req_cls);\n\n  /* Preserve original logic while capturing intermediate comparison results for logging. */\n  {\n    size_t expected_user_len = strlen (\"Aladdin\");\n    size_t expected_pass_len = strlen (\"open sesame\");\n    int cmp_user = 1; /* non-zero means different */\n    int cmp_pass = 1; /* non-zero means different */\n\n    if ((NULL != auth_info) && (NULL != auth_info->username))\n    {\n      /* perform the same memcmp as original code but capture result for logging */\n      cmp_user = memcmp (auth_info->username, \"Aladdin\", auth_info->username_len);\n    }\n    if ((NULL != auth_info) && (NULL != auth_info->password))\n    {\n      cmp_pass = memcmp (auth_info->password, \"open sesame\", auth_info->password_len);\n    }\n\n    /* Log the computed intermediate values to help reproduce the violation evidence. */\n    {\n      FILE *f = fopen(\"/tmp/logs/534.txt\", \"a\");\n      if (f != NULL)\n      {\n        fprintf(f, \"comparison: expected_user_len=%zu expected_pass_len=%zu\\n\",\n                expected_user_len, expected_pass_len);\n        if (auth_info == NULL)\n        {\n          fprintf(f, \"comparison: auth_info=NULL\\n\");\n        }\n        else\n        {\n          fprintf(f, \"comparison: username_len=%zu cmp_user=%d\\n\",\n                  auth_info->username_len, cmp_user);\n          fprintf(f, \"comparison: password_len=%zu cmp_pass=%d\\n\",\n                  auth_info->password_len, cmp_pass);\n        }\n        fclose(f);\n      }\n    }\n\n    /* Reconstruct the original boolean expression using the captured results. */\n    fail = ( (NULL == auth_info) ||\n             (expected_user_len != auth_info->username_len) ||\n             (0 != cmp_user) ||\n             /* The next check against NULL is optional,\n              * if 'password' is NULL then 'password_len' is always zero. */\n             (NULL == auth_info->password) ||\n             (expected_pass_len != auth_info->password_len) ||\n             (0 != cmp_pass) );\n  }\n\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  ahc_log_probe(\"exit\", auth_info, method, (const void *) *req_cls);\n  return ret;\n}\n"
}