{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) version;' is an executed no\u2011op used only to silence an \"unused parameter\" warning. 'version' is not volatile and is never otherwise accessed in the function, so removing this cast statement would not affect program behaviour. Therefore this statement constitutes dead code under MISRA C 2023 Rule 2.2 (unless the parameter were volatile or its read had observable side\u2011effects, which is not the case here).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ahc_echo_logf(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/530.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log: function entry and explicit note that the '(void) version;' cast was executed. */\n  ahc_echo_logf(\"ahc_echo: called; executed '(void) version;' (version intentionally not dereferenced); method='%s'\", (method != NULL) ? method : \"(null)\");\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    ahc_echo_logf(\"ahc_echo: unexpected method '%s' -> returning MHD_NO\", method);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    ahc_echo_logf(\"ahc_echo: first invocation for this connection; setting req_cls to %p and returning MHD_YES\", (void *) &aptr);\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  ahc_echo_logf(\"ahc_echo: continuing after initial call; req_cls reset to NULL\");\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  ahc_echo_logf(\"ahc_echo: MHD_basic_auth_get_username_password3 returned %p\", (void *) auth_info);\n\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n\n  /* Log details useful to reproduce the auth behavior without changing program logic.\n     Avoid dereferencing auth_info unless non-NULL. */\n  if (NULL != auth_info)\n  {\n    ahc_echo_logf(\"ahc_echo: auth_info present: username_len=%zu, password_len=%zu\", (size_t) auth_info->username_len, (size_t) auth_info->password_len);\n  }\n  else\n  {\n    ahc_echo_logf(\"ahc_echo: auth_info is NULL\");\n  }\n\n  if (fail)\n  {\n    ahc_echo_logf(\"ahc_echo: authentication FAILED -> queuing basic auth required response\");\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    ahc_echo_logf(\"ahc_echo: authentication SUCCEEDED -> queuing PAGE response\");\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n\n  if (NULL != auth_info)\n  {\n    MHD_free (auth_info);\n    ahc_echo_logf(\"ahc_echo: freed auth_info\");\n  }\n  MHD_destroy_response (response);\n  ahc_echo_logf(\"ahc_echo: destroyed response; returning ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The single expression-statement \u201c(void) version;\u201d is the conventional, intended way to mark a parameter as intentionally unused and to silence compiler warnings. MISRA\u2019s prohibition of dead code is intended to catch operations that could be removed without changing program intent or that indicate leftover/unused functionality; it is not normally interpreted to forbid idioms that document intentional non\u2011use of a parameter or that may be required to satisfy an external callback signature. Moreover, the cast-to-void can be treated as a deliberate annotation of intent (and in corner cases the evaluation could be observable \u2014 e.g. volatile objects or timing considerations), so tools and reviewers typically do not treat it as a Rule 2.2 violation. If you want to avoid even the appearance of such a violation, use one of the standard alternatives: omit the parameter name in the function definition (if allowed by your coding rules), use a project-wide UNUSED_PARAM macro, or use a tool\u2011approved annotation/pragmas. In short, A\u2019s scenario (that this line is dead code under MISRA C:2023 Rule 2.2) is not a correct characterization."
}