{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf 'method' is NULL or not NUL-terminated, the call strcmp(method, \"GET\") will read beyond the bounds of the object referenced by 'method' (or dereference a NULL), causing undefined behaviour. The code does not validate that 'method' is non-NULL and NUL-terminated before calling strcmp, so this can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/535.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "static void ahc_echo_probe(const char *stage,\n                               const char *method,\n                               const void *aptr_addr,\n                               void **req_cls,\n                               struct MHD_Connection *connection)\n{\n  FILE *f = fopen(\"/tmp/logs/535.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Do not dereference 'method' (could be NULL or not NUL-terminated).\n     Only log the pointer value and a NULL check. */\n  fprintf(f, \"stage=%s method_ptr=%p method_is_null=%d aptr_addr=%p req_cls_ptr=%p req_cls_deref=%p conn_ptr=%p\\n\",\n          stage,\n          (void *) method,\n          (int) (method == NULL),\n          aptr_addr,\n          (void *) req_cls,\n          (void *) (*req_cls),\n          (void *) connection);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Probe entry state: do not dereference 'method' here. */\n  ahc_echo_probe(\"entry\", method, &aptr, req_cls, connection);\n\n  /* Log just before calling strcmp to capture the moment leading to the\n     potential violation. We intentionally do not change the original\n     strcmp call that may read beyond the bounds if 'method' is NULL or\n     not NUL-terminated; the probe only records the pointer state. */\n  ahc_echo_probe(\"pre_strcmp\", method, &aptr, req_cls, connection);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    /* Log unexpected method branch before returning. */\n    ahc_echo_probe(\"unexpected_method\", method, &aptr, req_cls, connection);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    /* Log first-call behavior and the assignment about to happen. */\n    ahc_echo_probe(\"first_call_before_set\", method, &aptr, req_cls, connection);\n    *req_cls = &aptr;\n    ahc_echo_probe(\"first_call_after_set\", method, &aptr, req_cls, connection);\n    return MHD_YES;\n  }\n  /* Log that we are proceeding past the first-call guard. */\n  ahc_echo_probe(\"proceeding\", method, &aptr, req_cls, connection);\n\n  *req_cls = NULL;                  /* reset when done */\n  ahc_echo_probe(\"reset_req_cls\", method, &aptr, req_cls, connection);\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  /* Log auth_info pointer and lengths (do not dereference username/password\n     buffers themselves \u2014 that could be unsafe). */\n  {\n    FILE *f = fopen(\"/tmp/logs/535.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"stage=auth_retrieved auth_info_ptr=%p username_len=%zu password_len=%zu password_ptr=%p username_ptr=%p\\n\",\n              (void *) auth_info,\n              auth_info ? auth_info->username_len : 0,\n              auth_info ? auth_info->password_len : 0,\n              (void *) (auth_info ? auth_info->password : NULL),\n              (void *) (auth_info ? auth_info->username : NULL));\n      fclose(f);\n    }\n  }\n\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n\n  if (fail)\n  {\n    ahc_echo_probe(\"auth_failed\", method, &aptr, req_cls, connection);\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    ahc_echo_probe(\"auth_succeeded\", method, &aptr, req_cls, connection);\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n\n  ahc_echo_probe(\"exit\", method, &aptr, req_cls, connection);\n  return ret;\n}\n"
}