{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter cls is treated as a read-only pointer: response only reads response->fd and response->fd_off and is never used to modify the pointed-to object. Therefore response should be declared as pointing to a const-qualified type (for example: const struct MHD_Response *response = (const struct MHD_Response *)cls) or the function parameter should be const void *cls. The current declaration 'struct MHD_Response *response = cls;' fails to const-qualify the pointee and thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified file_reader code that contains useful probe functions that print useful logs to a file \"/tmp/logs/619.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of file_reader as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of file_reader:\n```c\nstatic ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  ssize_t n;\n#else  /* _WIN32 && !__CYGWIN__ */\n  const HANDLE fh = (HANDLE) (uintptr_t) _get_osfhandle (response->fd);\n#endif /* _WIN32 && !__CYGWIN__ */\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  if (offset64 < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  if (max > SSIZE_MAX)\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n\n#if defined(HAVE_PREAD64)\n  n = pread64 (response->fd, buf, max, offset64);\n#elif defined(HAVE_PREAD)\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Read at required position is not possible. */\n\n  n = pread (response->fd, buf, max, (off_t) offset64);\n#else  /* ! HAVE_PREAD */\n#if defined(HAVE_LSEEK64)\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n#else  /* ! HAVE_LSEEK64 */\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n#endif /* ! HAVE_LSEEK64 */\n  n = read (response->fd,\n            buf,\n            max);\n\n#endif /* ! HAVE_PREAD */\n  if (0 == n)\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  if (n < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return n;\n#else /* _WIN32 && !__CYGWIN__ */\n  if (INVALID_HANDLE_VALUE == fh)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Value of 'response->fd' is not valid. */\n  else\n  {\n    OVERLAPPED f_ol = {0, 0, {{0, 0}}, 0};   /* Initialize to zero. */\n    ULARGE_INTEGER pos_uli;\n    DWORD toRead = (max > INT32_MAX) ? INT32_MAX : (DWORD) max;\n    DWORD resRead;\n\n    pos_uli.QuadPart = (uint64_t) offset64;   /* Simple transformation 64bit -> 2x32bit. */\n    f_ol.Offset = pos_uli.LowPart;\n    f_ol.OffsetHigh = pos_uli.HighPart;\n    if (! ReadFile (fh, (void *) buf, toRead, &resRead, &f_ol))\n      return MHD_CONTENT_READER_END_WITH_ERROR;   /* Read error. */\n    if (0 == resRead)\n      return MHD_CONTENT_READER_END_OF_STREAM;\n    return (ssize_t) resRead;\n  }\n#endif /* _WIN32 && !__CYGWIN__ */\n}\n```\n</target_code>\nPlease provide the modified file_reader code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/*\n * Probe logging helpers: append human-readable traces to /tmp/logs/619.txt.\n * These helpers are inserted to capture control flow and state for the\n * reported MISRA Rule 8.13 scenario. They preserve the original logic\n * of file_reader and do not change any return values or side effects\n * other than writing logs to the file.\n */\nstatic void\nlogf (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/619.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nlog_ptr_val (const char *name, void *p)\n{\n  logf (\"%s=%p\", name, p);\n}\n\nstatic void\nlog_int64 (const char *name, int64_t v)\n{\n  logf (\"%s=%\" PRId64, name, (int64_t) v);\n}\n\nstatic void\nlog_uint64 (const char *name, uint64_t v)\n{\n  logf (\"%s=%\" PRIu64, name, (uint64_t) v);\n}\n\nstatic ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n\n  /* Log entry and the raw cls value. */\n  logf (\"ENTRY file_reader: cls=%p pos=%\" PRIu64 \" max=%zu\", cls, pos, max);\n  log_ptr_val (\"response_ptr\", (void *) response);\n\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  ssize_t n;\n#else  /* _WIN32 && !__CYGWIN__ */\n  const HANDLE fh = (HANDLE) (uintptr_t) _get_osfhandle (response->fd);\n#endif /* _WIN32 && !__CYGWIN__ */\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  /* Log derived values from the response object that are used as read-only. */\n  /* We cast to long long for printing since underlying types of fd/fd_off\n     are not visible here; this provides a reasonable diagnostic view. */\n  logf (\"response->fd=(%lld) response->fd_off=(%lld)\",\n        (long long) response->fd,\n        (long long) response->fd_off);\n  log_int64 (\"computed_offset64\", offset64);\n\n  if (offset64 < 0)\n  {\n    logf (\"RETURN offset64 < 0 -> MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  if (max > SSIZE_MAX)\n  {\n    logf (\"clamping max from %zu to SSIZE_MAX\", max);\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n  }\n\n#if defined(HAVE_PREAD64)\n  logf (\"using pread64, fd=%d, offset=%\" PRId64 \", max=%zu\", (int) response->fd, offset64, max);\n  n = pread64 (response->fd, buf, max, offset64);\n#elif defined(HAVE_PREAD)\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    logf (\"RETURN pread: offset too large for off_t -> MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Read at required position is not possible. */\n  }\n\n  logf (\"using pread, fd=%d, offset=%\" PRId64 \", max=%zu\", (int) response->fd, offset64, max);\n  n = pread (response->fd, buf, max, (off_t) offset64);\n#else  /* ! HAVE_PREAD */\n#if defined(HAVE_LSEEK64)\n  logf (\"using lseek64 to seek fd=%d to offset=%\" PRId64, (int) response->fd, offset64);\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n  {\n    logf (\"RETURN lseek64 failed -> MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#else  /* ! HAVE_LSEEK64 */\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    logf (\"RETURN lseek: offset too large for off_t -> MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n  logf (\"using lseek to seek fd=%d to offset=%\" PRId64, (int) response->fd, offset64);\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n  {\n    logf (\"RETURN lseek failed -> MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#endif /* ! HAVE_LSEEK64 */\n  logf (\"performing read(fd=%d, max=%zu)\", (int) response->fd, max);\n  n = read (response->fd,\n            buf,\n            max);\n\n#endif /* ! HAVE_PREAD */\n  if (0 == n)\n  {\n    logf (\"RETURN read returned 0 -> MHD_CONTENT_READER_END_OF_STREAM\");\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n  if (n < 0)\n  {\n    logf (\"RETURN read returned <0 (n=%zd) -> MHD_CONTENT_READER_END_WITH_ERROR\", n);\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  }\n  logf (\"RETURN success n=%zd\", n);\n  return n;\n#else /* _WIN32 && !__CYGWIN__ */\n  if (INVALID_HANDLE_VALUE == fh)\n  {\n    logf (\"RETURN invalid handle (fh=%p) -> MHD_CONTENT_READER_END_WITH_ERROR\", (void *) (uintptr_t) fh); /* Value of 'response->fd' is not valid. */\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Value of 'response->fd' is not valid. */\n  }\n  else\n  {\n    OVERLAPPED f_ol = {0, 0, {{0, 0}}, 0};   /* Initialize to zero. */\n    ULARGE_INTEGER pos_uli;\n    DWORD toRead = (max > INT32_MAX) ? INT32_MAX : (DWORD) max;\n    DWORD resRead;\n\n    pos_uli.QuadPart = (uint64_t) offset64;   /* Simple transformation 64bit -> 2x32bit. */\n    f_ol.Offset = pos_uli.LowPart;\n    f_ol.OffsetHigh = pos_uli.HighPart;\n    logf (\"Windows ReadFile: fh=%p offset_low=%u offset_high=%u toRead=%u\",\n          (void *) (uintptr_t) fh, f_ol.Offset, f_ol.OffsetHigh, toRead);\n    if (! ReadFile (fh, (void *) buf, toRead, &resRead, &f_ol))\n    {\n      logf (\"RETURN ReadFile failed -> MHD_CONTENT_READER_END_WITH_ERROR\");\n      return MHD_CONTENT_READER_END_WITH_ERROR;   /* Read error. */\n    }\n    if (0 == resRead)\n    {\n      logf (\"RETURN ReadFile read 0 -> MHD_CONTENT_READER_END_OF_STREAM\");\n      return MHD_CONTENT_READER_END_OF_STREAM;\n    }\n    logf (\"RETURN ReadFile success resRead=%u\", resRead);\n    return (ssize_t) resRead;\n  }\n#endif /* _WIN32 && !__CYGWIN__ */\n}\n"
}