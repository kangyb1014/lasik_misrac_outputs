{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strcmp(key, \"category\") without first ensuring that key is a valid non-NULL, NUL-terminated string can cause out\u2011of\u2011bounds accesses. For example, if key == NULL (or points to a buffer that is not NUL-terminated), strcmp will dereference/read beyond the object\u2019s bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_upload_data code that contains useful probe functions that print useful logs to a file \"/tmp/logs/423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_upload_data as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_upload_data:\n```c\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"category\"))\n    return do_append (&uc->category, data, size);\n  if (0 == strcmp (key, \"language\"))\n    return do_append (&uc->language, data, size);\n  if (0 != strcmp (key, \"upload\"))\n  {\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n  if (NULL == filename)\n  {\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_upload_data code.\n",
  "test_code": "static enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  FILE *logf = NULL;\n\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  /* Probe: log entry state. We intentionally do NOT dereference `key` here,\n     to avoid introducing additional undefined behaviour beyond the original\n     code. We log pointer values and sizes so a reproducer can see what was\n     provided prior to any strcmp invocation. */\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"process_upload_data ENTRY: uc=%p key=%p filename=%p data=%p off=%llu size=%zu\\n\",\n            (void *) uc,\n            (void *) key,\n            (void *) filename,\n            (void *) data,\n            (unsigned long long) off,\n            size);\n    fclose(logf);\n  }\n\n  /* Log just before the first strcmp. Purposefully do not change the\n     subsequent strcmp call (even if key is NULL) so that a crash or other\n     misbehaviour observed corresponds to the original code path. */\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"About to call strcmp(key, \\\"category\\\"): key=%p\\n\", (void *) key);\n    fclose(logf);\n  }\n  if (0 == strcmp (key, \"category\"))\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Matched form field: category (key=%p)\\n\", (void *) key);\n      fclose(logf);\n    }\n    return do_append (&uc->category, data, size);\n  }\n\n  /* Log before second strcmp */\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"About to call strcmp(key, \\\"language\\\"): key=%p\\n\", (void *) key);\n    fclose(logf);\n  }\n  if (0 == strcmp (key, \"language\"))\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Matched form field: language (key=%p)\\n\", (void *) key);\n      fclose(logf);\n    }\n    return do_append (&uc->language, data, size);\n  }\n\n  /* Log before third strcmp */\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"About to call strcmp(key, \\\"upload\\\"): key=%p\\n\", (void *) key);\n    fclose(logf);\n  }\n  if (0 != strcmp (key, \"upload\"))\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      /* Note: avoid printing `key` as a string because it may be NULL or\n         not NUL-terminated; print only the pointer. */\n      fprintf (logf,\n               \"Ignoring unexpected form value: key=%p\\n\",\n               (void *) key);\n      fclose(logf);\n    }\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n\n  if (NULL == filename)\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"No filename provided for upload (key=%p). Aborting.\\n\", (void *) key);\n      fclose(logf);\n    }\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf,\n              \"Missing form data for upload: filename=%p uc->category=%p uc->language=%p\\n\",\n              (void *) filename, (void *) uc->category, (void *) uc->language);\n      fclose(logf);\n    }\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n      if (NULL != logf)\n      {\n        fprintf(logf, \"Error opening file for upload: path=%s errno=%d (%s)\\n\", fn, errno, strerror(errno));\n        fclose(logf);\n      }\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Error writing to file: filename=%p uc->filename=%p errno=%d (%s)\\n\",\n              (void *) filename,\n              (void *) uc->filename,\n              errno,\n              strerror(errno));\n      fclose(logf);\n    }\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"process_upload_data EXIT: returning MHD_YES for key=%p\\n\", (void *) key);\n    fclose(logf);\n  }\n  return MHD_YES;\n}\n"
}