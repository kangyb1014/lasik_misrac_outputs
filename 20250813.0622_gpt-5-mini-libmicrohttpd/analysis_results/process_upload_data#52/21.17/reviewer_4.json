{
  "user_message": "An agent A claimed that the following process_upload_data code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of process_upload_data.\n```c\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"category\"))\n    return do_append (&uc->category, data, size);\n  if (0 == strcmp (key, \"language\"))\n    return do_append (&uc->language, data, size);\n  if (0 != strcmp (key, \"upload\"))\n  {\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n  if (NULL == filename)\n  {\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Calling strcmp(key, \"upload\") without first ensuring that key points to a valid, NUL-terminated string can read out of bounds. For example, if key == NULL (or if key does not contain a terminating '\\0' within its allocated storage), strcmp will dereference an invalid pointer / scan past the object bounds, violating Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nlog_probe(const char *tag,\n          const void *key,\n          const void *filename,\n          const void *data,\n          const void *uc_ptr,\n          unsigned long long off,\n          size_t size,\n          const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (! f)\n    return;\n  /* Keep logs small and only print pointer values to avoid reading\n     pointed-to memory (which could cause out-of-bounds accesses). */\n  fprintf(f, \"[%s] tag=%s key=%p filename=%p data=%p uc=%p off=%llu size=%zu extra=%s\\n\",\n          __func__, tag, key, filename, data, uc_ptr, off, size, (extra ? extra : \"(null)\"));\n  fclose(f);\n}\n\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  /* Log entry state --- do not dereference key/file/uc to avoid causing\n     additional memory accesses. This will allow reproducing cases where\n     key is NULL or otherwise invalid without changing program behavior. */\n  log_probe(\"ENTRY\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"entry\");\n\n  /* We intentionally log immediately before each strcmp so the recorded\n     control flow shows whether the code attempted to compare `key` with\n     the constant strings. We do not read *key here to avoid creating a\n     new out-of-bounds access. */\n  log_probe(\"BEFORE_STRCMP_category\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"about to strcmp(key, \\\"category\\\")\");\n  if (0 == strcmp (key, \"category\"))\n    return do_append (&uc->category, data, size);\n\n  log_probe(\"BEFORE_STRCMP_language\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"about to strcmp(key, \\\"language\\\")\");\n  if (0 == strcmp (key, \"language\"))\n    return do_append (&uc->language, data, size);\n\n  log_probe(\"BEFORE_STRCMP_upload\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"about to strcmp(key, \\\"upload\\\")\");\n  if (0 != strcmp (key, \"upload\"))\n  {\n    /* Log unexpected key value (pointer only). */\n    log_probe(\"UNEXPECTED_KEY\", (const void *) key, (const void *) filename,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, \"Ignoring unexpected form value\");\n\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n  log_probe(\"AFTER_KEY_UPLOAD_MATCH\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"key == \\\"upload\\\"\");\n\n  if (NULL == filename)\n  {\n    log_probe(\"NO_FILENAME\", (const void *) key, NULL,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, \"filename is NULL\");\n\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    /* Safe to log pointers stored in uc here because uc is dereferenced\n       in the original code at this point; this mirrors original behavior. */\n    char extra_buf[256];\n    (void) snprintf(extra_buf, sizeof(extra_buf), \"uc->category=%p uc->language=%p\",\n                    (void *) uc->category, (void *) uc->language);\n    log_probe(\"MISSING_FORM_DATA\", (const void *) key, (const void *) filename,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, extra_buf);\n\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    log_probe(\"PREPARE_NEW_FILE\", (const void *) key, (const void *) filename,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, \"creating new file (uc->fd == -1)\");\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      /* Log the failure to open file including errno string pointer values. */\n      log_probe(\"OPEN_FAILED\", (const void *) key, (const void *) fn,\n                (const void *) data, (const void *) uc,\n                (unsigned long long) off, size, \"open() failed\");\n\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    log_probe(\"WRITE_FAILED\", (const void *) key, (const void *) uc->filename,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, \"write() returned less than size\");\n\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  log_probe(\"RETURN_YES\", (const void *) key, (const void *) uc->filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"returning MHD_YES\");\n  return MHD_YES;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for process_upload_data. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function calls strcmp(key, ...) three times near the top without first ensuring that key points to a valid, NUL-terminated char array. If key == NULL, strcmp will dereference a NULL pointer; if key does not contain a terminating '\\0' within its allocated storage, strcmp will scan past the object bounds. Both situations are out-of-bounds accesses of the pointer parameter to a <string.h> function and thus violate MISRA C:2023 Rule 21.17. \n\nNotes and remediation:\n- The strcmp calls are the immediate problem (the fprintf that prints key with %s is also unsafe if key can be NULL). \n- Fixes include validating key != NULL before calling strcmp/using %s, and/or ensuring the caller guarantees a NUL-terminated string (with that contract documented and enforced), or using bounded comparisons when a maximum length is known (e.g. compare lengths and use memcmp with verified bounds). The simplest MISRA-compliant change is to test key for NULL before any use and handle that case appropriately."
}