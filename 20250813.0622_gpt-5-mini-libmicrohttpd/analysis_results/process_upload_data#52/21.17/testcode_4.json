{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strcmp(key, \"upload\") without first ensuring that key points to a valid, NUL-terminated string can read out of bounds. For example, if key == NULL (or if key does not contain a terminating '\\0' within its allocated storage), strcmp will dereference an invalid pointer / scan past the object bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_upload_data code that contains useful probe functions that print useful logs to a file \"/tmp/logs/423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_upload_data as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_upload_data:\n```c\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"category\"))\n    return do_append (&uc->category, data, size);\n  if (0 == strcmp (key, \"language\"))\n    return do_append (&uc->language, data, size);\n  if (0 != strcmp (key, \"upload\"))\n  {\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n  if (NULL == filename)\n  {\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified process_upload_data code.\n",
  "test_code": "static void\nlog_probe(const char *tag,\n          const void *key,\n          const void *filename,\n          const void *data,\n          const void *uc_ptr,\n          unsigned long long off,\n          size_t size,\n          const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (! f)\n    return;\n  /* Keep logs small and only print pointer values to avoid reading\n     pointed-to memory (which could cause out-of-bounds accesses). */\n  fprintf(f, \"[%s] tag=%s key=%p filename=%p data=%p uc=%p off=%llu size=%zu extra=%s\\n\",\n          __func__, tag, key, filename, data, uc_ptr, off, size, (extra ? extra : \"(null)\"));\n  fclose(f);\n}\n\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  /* Log entry state --- do not dereference key/file/uc to avoid causing\n     additional memory accesses. This will allow reproducing cases where\n     key is NULL or otherwise invalid without changing program behavior. */\n  log_probe(\"ENTRY\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"entry\");\n\n  /* We intentionally log immediately before each strcmp so the recorded\n     control flow shows whether the code attempted to compare `key` with\n     the constant strings. We do not read *key here to avoid creating a\n     new out-of-bounds access. */\n  log_probe(\"BEFORE_STRCMP_category\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"about to strcmp(key, \\\"category\\\")\");\n  if (0 == strcmp (key, \"category\"))\n    return do_append (&uc->category, data, size);\n\n  log_probe(\"BEFORE_STRCMP_language\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"about to strcmp(key, \\\"language\\\")\");\n  if (0 == strcmp (key, \"language\"))\n    return do_append (&uc->language, data, size);\n\n  log_probe(\"BEFORE_STRCMP_upload\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"about to strcmp(key, \\\"upload\\\")\");\n  if (0 != strcmp (key, \"upload\"))\n  {\n    /* Log unexpected key value (pointer only). */\n    log_probe(\"UNEXPECTED_KEY\", (const void *) key, (const void *) filename,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, \"Ignoring unexpected form value\");\n\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n  log_probe(\"AFTER_KEY_UPLOAD_MATCH\", (const void *) key, (const void *) filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"key == \\\"upload\\\"\");\n\n  if (NULL == filename)\n  {\n    log_probe(\"NO_FILENAME\", (const void *) key, NULL,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, \"filename is NULL\");\n\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    /* Safe to log pointers stored in uc here because uc is dereferenced\n       in the original code at this point; this mirrors original behavior. */\n    char extra_buf[256];\n    (void) snprintf(extra_buf, sizeof(extra_buf), \"uc->category=%p uc->language=%p\",\n                    (void *) uc->category, (void *) uc->language);\n    log_probe(\"MISSING_FORM_DATA\", (const void *) key, (const void *) filename,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, extra_buf);\n\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    log_probe(\"PREPARE_NEW_FILE\", (const void *) key, (const void *) filename,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, \"creating new file (uc->fd == -1)\");\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      /* Log the failure to open file including errno string pointer values. */\n      log_probe(\"OPEN_FAILED\", (const void *) key, (const void *) fn,\n                (const void *) data, (const void *) uc,\n                (unsigned long long) off, size, \"open() failed\");\n\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    log_probe(\"WRITE_FAILED\", (const void *) key, (const void *) uc->filename,\n              (const void *) data, (const void *) uc,\n              (unsigned long long) off, size, \"write() returned less than size\");\n\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  log_probe(\"RETURN_YES\", (const void *) key, (const void *) uc->filename,\n            (const void *) data, (const void *) uc,\n            (unsigned long long) off, size, \"returning MHD_YES\");\n  return MHD_YES;\n}"
}