{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of compress_buf:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "strm->avail_out = CHUNK;",
    "strm->next_out = tmp;",
    "if (NULL == tmp_dest)\n    {\n      free (*dest);\n      *dest = NULL;\n      return MHD_NO;\n    }",
    "*dest = NULL;",
    "*dest_size = 0;",
    "*offset += strm->avail_in;",
    "*dest_size += have;",
    "tmp_dest = realloc (*dest, *dest_size);",
    "have = CHUNK - strm->avail_out;",
    "*dest = tmp_dest;",
    "else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }",
    "memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);",
    "if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }",
    "strm->next_in = (const Bytef *) src;",
    "ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;"
  ],
  "explanation": "I reported all places in the function that write to parameters or to objects reachable through pointer parameters so they can be reviewed for compliance with Rule 17.8. I did not include other fragments because they do not modify any function parameter or pointer: local variable declarations/initializations (unsigned int have; enum MHD_Result ret; int flush; void *tmp_dest;), loop/flow-control constructs (do/while), and the function return are not parameter modifications and thus are not relevant to this rule. Also, assignments that modify the objects pointed to by pointer parameters are included above for inspection; assignments that only modify local variables or use parameters read-only are not listed because they cannot violate the rule as written."
}