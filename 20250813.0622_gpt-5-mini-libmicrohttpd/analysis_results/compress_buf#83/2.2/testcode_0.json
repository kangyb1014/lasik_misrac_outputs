{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe write to *offset inside compress_buf increments the caller's offset but that updated value is never used by the caller in the provided project code. In read_cb the local variable offset is set from pos, passed as &offset to compress_buf, and after return it is not read or used; therefore '*offset += strm->avail_in;' is an executed operation whose removal would not affect program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified compress_buf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/666.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of compress_buf as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of compress_buf:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified compress_buf code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append formatted logs to /tmp/logs/666.txt */\nstatic void logf(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/666.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n\n  /* Log entry state */\n  logf(\"compress_buf: entry: src=%p src_size=%zu offset_ptr=%p dest_ptr_ptr=%p dest_size_ptr=%p tmp=%p strm=%p\",\n       src, src_size, (void *) offset, (void *) dest, (void *) dest_size, tmp, (void *) strm);\n\n  *dest = NULL;\n  *dest_size = 0;\n\n  logf(\"compress_buf: after init: *dest=%p *dest_size=%zu\", (void *) *dest, *dest_size);\n\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n      logf(\"compress_buf: chunk branch: set avail_in=%u src_size_remaining=%zu flush=Z_NO_FLUSH\", strm->avail_in, src_size);\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n      logf(\"compress_buf: final branch: set avail_in=%u flush=Z_SYNC_FLUSH\", strm->avail_in);\n    }\n\n    /* Log offset change: old and intended increment */\n    logf(\"compress_buf: offset before increment: offset_ptr=%p offset_val=%zu avail_in=%u\", (void *) offset, (offset ? *offset : 0), strm->avail_in);\n\n    /* Original operation that is under scrutiny */\n    *offset += strm->avail_in;\n\n    logf(\"compress_buf: offset after increment: offset_ptr=%p offset_val=%zu\", (void *) offset, *offset);\n\n    strm->next_in = (const Bytef *) src;\n    logf(\"compress_buf: set next_in=%p\", (const void *) strm->next_in);\n\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n\n      logf(\"compress_buf: before deflate: avail_in=%u avail_out=%u next_in=%p next_out=%p flush=%d\",\n           strm->avail_in, strm->avail_out, (const void *) strm->next_in, tmp, flush);\n\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n\n      logf(\"compress_buf: after deflate: ret=%d avail_in=%u avail_out=%u next_in=%p next_out=%p\",\n           (int) ret, strm->avail_in, strm->avail_out, (const void *) strm->next_in, tmp);\n\n      have = CHUNK - strm->avail_out;\n\n      logf(\"compress_buf: produced have=%u bytes\", have);\n\n      logf(\"compress_buf: dest_size before add=%zu\", *dest_size);\n      *dest_size += have;\n      logf(\"compress_buf: dest_size after add=%zu (added %u)\", *dest_size, have);\n\n      tmp_dest = realloc (*dest, *dest_size);\n      logf(\"compress_buf: realloc called: old_dest=%p new_alloc=%p new_size=%zu\", (void *) *dest, tmp_dest, *dest_size);\n\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        logf(\"compress_buf: realloc failed, freed old dest and returning MHD_NO\");\n        return MHD_NO;\n      }\n\n      *dest = tmp_dest;\n\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n      logf(\"compress_buf: memcpy to dest=%p offset=%zu copy_len=%u tmp=%p\", (void *) *dest, (*dest_size) - have, have, tmp);\n    }\n    while (0 == strm->avail_out);\n\n  }\n  while (flush != Z_SYNC_FLUSH);\n\n  logf(\"compress_buf: exit: ret=%d final_dest=%p final_dest_size=%zu final_offset=%zu\", (int) ret, (void *) *dest, *dest_size, *offset);\n  return ret;\n}\n"
}