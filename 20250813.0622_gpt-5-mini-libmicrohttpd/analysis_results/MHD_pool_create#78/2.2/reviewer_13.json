{
  "user_message": "An agent A claimed that the following MHD_pool_create code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_create.\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro mhd_assert is defined as ((void)0). Therefore the statement mhd_assert(connection->daemon == daemon); expands to a no-op ((void)0); its presence has no runtime effect and removing it would not alter program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\n/* Probe helpers to log control flow and state for the assertion/no-op scenario. */\nstatic void probe_log_initial(size_t max)\n{\n  FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"MHD_pool_create: entry max=%zu\\n\", max);\n    fprintf(f, \"MHD_pool_create: evaluated (max>0) = %d\\n\", (int)(max > 0));\n    fclose(f);\n  }\n}\n\nstatic void probe_log_memory_alignment(void *memory, size_t alloc_size, int is_mmap)\n{\n  FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n  if (f != NULL)\n  {\n    uintptr_t ptr = (uintptr_t) memory;\n    /* Print pointer, integer value of the pointer, allocation size and whether mmap was used */\n    fprintf(f, \"MHD_pool_create: pool->memory = %p, uintptr = %\n```\nThe test code failed to parse, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's claim is not correct as applied to the presented code. Two important points: (1) The scenario cited by Agent A mentions mhd_assert(connection->daemon == daemon) which does not appear in the posted MHD_pool_create function; the actual asserts in the target are of the form mhd_assert(max > 0). (2) Whether an assertion call constitutes \"dead code\" under MISRA C 2023 Rule 2.2 depends on the project-wide definition and build configurations of the mhd_assert macro. If mhd_assert is a no\u2011op ((void)0) in every build configuration in the project, then any statement that expands to a no\u2011op would indeed be an executed operation that has no effect and therefore meets the literal definition of dead code; that would be a valid Rule 2.2 concern. However, in typical projects assertion macros are intentionally conditional (they have effects in some builds and are no\u2011ops in others). In that normal situation the assertion statements are not considered dead code for the project as a whole because their removal could affect behavior in other configurations. The evidence provided by Agent A does not show that mhd_assert is defined as ((void)0) for the entire project or for all builds, and the example assertion text differs from the target code, so we cannot conclude a Rule 2.2 violation for MHD_pool_create. Therefore the report is not correct as presented."
}