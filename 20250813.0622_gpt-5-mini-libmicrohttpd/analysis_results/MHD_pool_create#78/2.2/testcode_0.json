{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro mhd_assert(ignore) expands to ((void)0), so every call mhd_assert(...) in the project (for example mhd_assert(max > 0) in MHD_pool_create and the other mhd_assert calls in MHD_pool_destroy and new_connection_process_) becomes an executed no-op. Removing those no-op assert statements would not affect program behaviour, therefore they constitute dead code and violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/626.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_create as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_create:\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_create code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\n/* Probe function to log control flow and state to /tmp/logs/626.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_probe_log (\"MHD_pool_create: enter, max=%zu\", max);\n  mhd_assert (max > 0);\n  mhd_probe_log (\"MHD_pool_create: after assert (no-op), max=%zu\", max);\n\n  alloc_size = 0;\n  mhd_probe_log (\"MHD_pool_create: initial alloc_size=%zu\", alloc_size);\n\n  pool = malloc (sizeof (struct MemoryPool));\n  mhd_probe_log (\"MHD_pool_create: malloc(sizeof MemoryPool) -> pool=%p\", (void *) pool);\n  if (NULL == pool)\n  {\n    mhd_probe_log (\"MHD_pool_create: pool allocation failed, returning NULL\");\n    return NULL;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n    mhd_probe_log (\"MHD_pool_create: chose MAP_FAILED path (small max=%zu), pool->memory=%p\", max, (void *) pool->memory);\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n    mhd_probe_log (\"MHD_pool_create: mmap path, rounded alloc_size=%zu\", alloc_size);\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n    mhd_probe_log (\"MHD_pool_create: called mmap -> pool->memory=%p\", (void *) pool->memory);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n    mhd_probe_log (\"MHD_pool_create: called VirtualAlloc -> pool->memory=%p\", (void *) pool->memory);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n  mhd_probe_log (\"MHD_pool_create: platform without MAP_ANONYMOUS/_WIN32, pool->memory=%p\", (void *) pool->memory);\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    mhd_probe_log (\"MHD_pool_create: fallback malloc path, alloc_size=%zu\", alloc_size);\n    pool->memory = malloc (alloc_size);\n    mhd_probe_log (\"MHD_pool_create: malloc(%zu) -> pool->memory=%p\", alloc_size, (void *) pool->memory);\n    if (NULL == pool->memory)\n    {\n      mhd_probe_log (\"MHD_pool_create: pool->memory allocation failed, freeing pool=%p and returning NULL\", (void *) pool);\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n    mhd_probe_log (\"MHD_pool_create: using malloc memory, is_mmap=false\");\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n    mhd_probe_log (\"MHD_pool_create: using mmap/VirtualAlloc memory, is_mmap=true, pool->memory=%p, alloc_size=%zu\", (void *) pool->memory, alloc_size);\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n\n  /* Log alignment information (original assert is a no-op in the analysis scenario) */\n  mhd_probe_log (\"MHD_pool_create: alignment check (computed mod) = %zu\",\n                 (size_t) (((uintptr_t) pool->memory) % (uintptr_t) ALIGN_SIZE));\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_probe_log (\"MHD_pool_create: pos=%zu, end=%zu, size=%zu\", pool->pos, pool->end, pool->size);\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  mhd_probe_log (\"MHD_pool_create: exiting, returning pool=%p\", (void *) pool);\n  return pool;\n}\n"
}