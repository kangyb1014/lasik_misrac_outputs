{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert macro is defined as #define mhd_assert(ignore) ((void)0). Thus the statement mhd_assert(0 == (((uintptr_t) pool->memory) % ALIGN_SIZE)); expands to a no-op ((void)0). It is an executed operation whose removal would not change program behaviour (the alignment check is never evaluated), so this is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/626.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_create as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_create:\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_create code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdlib.h>\n\n/* Probe helpers: do not modify program logic, only emit observations to a file. */\nstatic void\nmhd_log_basic (const char *stage, struct MemoryPool *pool, size_t alloc_size)\n{\n  FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf (f, \"[STAGE] %s\\n\", stage);\n  fprintf (f, \"  alloc_size=%zu\\n\", alloc_size);\n  fprintf (f, \"  pool_ptr=%p\\n\", (void *) pool);\n  if (pool != NULL)\n    fprintf (f, \"  pool->memory=%p\\n\", pool->memory);\n  if (pool != NULL && pool->memory != NULL)\n  {\n    uintptr_t rem = ((uintptr_t) pool->memory) % ALIGN_SIZE;\n    fprintf (f, \"  alignment_remainder=%llu\\n\", (unsigned long long) rem);\n  }\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nmhd_log_full (const char *stage, struct MemoryPool *pool, size_t alloc_size)\n{\n  FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf (f, \"[STAGE] %s (full)\\n\", stage);\n  fprintf (f, \"  alloc_size=%zu\\n\", alloc_size);\n  fprintf (f, \"  pool_ptr=%p\\n\", (void *) pool);\n  if (pool != NULL)\n  {\n    fprintf (f, \"  pool->memory=%p\\n\", pool->memory);\n    /* pool->is_mmap, pos, end, size are valid to read when this is called */\n    fprintf (f, \"  pool->is_mmap=%d\\n\", (int) pool->is_mmap);\n    fprintf (f, \"  pool->pos=%zu\\n\", pool->pos);\n    fprintf (f, \"  pool->end=%zu\\n\", pool->end);\n    fprintf (f, \"  pool->size=%zu\\n\", pool->size);\n    if (pool->memory != NULL)\n    {\n      uintptr_t rem = ((uintptr_t) pool->memory) % ALIGN_SIZE;\n      fprintf (f, \"  alignment_remainder=%llu\\n\", (unsigned long long) rem);\n    }\n  }\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n\n  /* Log right after allocating the pool structure. */\n  mhd_log_basic (\"after_pool_alloc\", pool, alloc_size);\n\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n    /* Log decision where mmap is skipped. */\n    mhd_log_basic (\"map_not_used_set_MAP_FAILED\", pool, alloc_size);\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n    /* Log result of mmap/VirtualAlloc attempt. */\n    mhd_log_basic (\"after_mmap_attempt\", pool, alloc_size);\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n    /* Log after fallback malloc for pool->memory. */\n    mhd_log_basic (\"after_malloc_memory_fallback\", pool, alloc_size);\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n    /* Log after successful mmap/VirtualAlloc path. */\n    mhd_log_basic (\"after_mmap_set_is_mmap_true\", pool, alloc_size);\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n\n  /* Log the value used in the alignment assertion just before the assertion. */\n  mhd_log_basic (\"pre_alignment_assert\", pool, alloc_size);\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n\n  /* Log final pool state after initialization. */\n  mhd_log_full (\"final_state\", pool, alloc_size);\n\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n"
}