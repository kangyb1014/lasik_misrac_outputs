{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe computed buf_size is old_value_len + norm_len but later code may memmove/memcpy more bytes than that. In add_response_header_connection, when value_has_close is true the code does memmove(buf + MHD_STATICSTR_LEN_(\"close, \") + old_value_len, buf + old_value_len, norm_len + 1) and then writes the \"close\" token and possibly \", \" and a terminating NUL. The earlier mhd_assert expects buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1, but buf_size was allocated as only old_value_len + norm_len. If assertions are disabled this leads to memmove/memcpy accessing/writing past the end of the allocated buffer (out-of-bounds), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\n/* Probe logging helpers. Writes append-only logs to /tmp/logs/399.txt. */\nstatic void probe_ensure_dir(void)\n{\n  /* Best-effort create directory; ignore errors. */\n  (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n  probe_ensure_dir();\n  f = fopen(\"/tmp/logs/399.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  probe_log(\"MHD_del_response_header: entry: response=%p, header=%p, content=%p\",\n            (void *)response, (const void *)header, (const void *)content);\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    probe_log(\"MHD_del_response_header: NULL parameter(s): header=%p content=%p\",\n              (const void *)header, (const void *)content);\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n  probe_log(\"MHD_del_response_header: header_len=%zu, header_text='%s'\", header_len, header);\n\n  probe_log(\"MHD_del_response_header: flags_auto=0x%08x\",\n            (unsigned int) response->flags_auto);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    probe_log(\"MHD_del_response_header: taking Connection special-case path (del_response_header_connection) for header='%s'\", header);\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n  probe_log(\"MHD_del_response_header: content_len=%zu, content_text='%s'\", content_len, content);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    probe_log(\"MHD_del_response_header: iter pos=%p header_size=%zu value_size=%zu pos->header=%p pos->value=%p\",\n              (void *)pos, pos->header_size, pos->value_size, (const void *)pos->header, (const void *)pos->value);\n\n    /* Evaluate comparisons once and log their intermediate results to help reproduce\n       potential out-of-bounds scenarios. */\n    int header_size_eq = (header_len == pos->header_size);\n    int value_size_eq = (content_len == pos->value_size);\n    int header_memcmp = 1;\n    int value_memcmp = 1;\n\n    if (header_size_eq)\n    {\n      /* Only compare if sizes match to avoid memcmp reading beyond buffers. */\n      header_memcmp = (0 == memcmp (header, pos->header, header_len));\n    }\n    else\n    {\n      probe_log(\"MHD_del_response_header: skipping header memcmp because sizes differ: header_len=%zu pos->header_size=%zu\",\n                header_len, pos->header_size);\n    }\n\n    if (value_size_eq)\n    {\n      /* Only compare if sizes match to avoid memcmp reading beyond buffers. */\n      value_memcmp = (0 == memcmp (content, pos->value, content_len));\n    }\n    else\n    {\n      probe_log(\"MHD_del_response_header: skipping value memcmp because sizes differ: content_len=%zu pos->value_size=%zu\",\n                content_len, pos->value_size);\n    }\n\n    probe_log(\"MHD_del_response_header: comparisons: header_size_eq=%d value_size_eq=%d header_memcmp=%d value_memcmp=%d\",\n              header_size_eq, value_size_eq, header_memcmp, value_memcmp);\n\n    if (header_size_eq && value_size_eq && header_memcmp && value_memcmp)\n    {\n      probe_log(\"MHD_del_response_header: match found at pos=%p; about to remove header. pos->header='%.*s' pos->value='%.*s'\",\n                (void *)pos,\n                (int)pos->header_size, pos->header,\n                (int)pos->value_size, pos->value);\n\n      _MHD_remove_header (response, pos);\n\n      /* Log the memory addresses and sizes before freeing to capture state. */\n      probe_log(\"MHD_del_response_header: freeing pos->header=%p (size=%zu) pos->value=%p (size=%zu) pos=%p\",\n                (const void *)pos->header, pos->header_size, (const void *)pos->value, pos->value_size, (void *)pos);\n\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n      {\n        probe_log(\"MHD_del_response_header: clearing MHD_RAF_HAS_TRANS_ENC_CHUNKED flag\");\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n      {\n        probe_log(\"MHD_del_response_header: clearing MHD_RAF_HAS_DATE_HDR flag\");\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        probe_log(\"MHD_del_response_header: header is Content-Length; checking for remaining content-length headers\");\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n        {\n          probe_log(\"MHD_del_response_header: no remaining Content-Length header found; clearing MHD_RAF_HAS_CONTENT_LENGTH flag\");\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n        }\n        else\n        {\n          probe_log(\"MHD_del_response_header: another Content-Length header remains; not clearing flag\");\n        }\n      }\n\n      probe_log(\"MHD_del_response_header: leaving with MHD_YES; flags_auto now=0x%08x\",\n                (unsigned int) response->flags_auto);\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  probe_log(\"MHD_del_response_header: no match found; returning MHD_NO\");\n  return MHD_NO;\n}\n"
}