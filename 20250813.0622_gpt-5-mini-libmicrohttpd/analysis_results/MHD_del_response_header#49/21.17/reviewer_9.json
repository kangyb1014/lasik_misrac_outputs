{
  "user_message": "An agent A claimed that the following MHD_del_response_header code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_del_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If a caller passes a pointer to a header buffer that is not NUL-terminated (for example a header provided as a pointer+length where the buffer has no '\\0' within its allocated size), the call to strlen(header) will read past the end of that object. This can access memory beyond the object's bounds and thus violates MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_log_probe(const char *stage,\n                                  const struct MHD_Response *response,\n                                  const char *header,\n                                  const char *content,\n                                  size_t header_len,\n                                  size_t content_len,\n                                  const struct MHD_HTTP_Res_Header *pos)\n{\n  FILE *f = fopen(\"/tmp/logs/399.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Log basic control and state information. Avoid dereferencing\n     the header/content buffers here to not introduce additional\n     out-of-bounds reads. */\n  fprintf(f,\n          \"[%s] response=%p header=%p content=%p header_len=%zu content_len=%zu pos=%p flags_auto=0x%lx\\n\",\n          stage,\n          (const void *) response,\n          (const void *) header,\n          (const void *) content,\n          header_len,\n          content_len,\n          (const void *) pos,\n          (unsigned long) response->flags_auto);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry with initial pointers; do not attempt to read the\n     header buffer here (it may not be NUL-terminated). */\n  mhd_log_probe(\"ENTER\", response, header, content, 0u, 0u, NULL);\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    mhd_log_probe(\"NULL_PARAM\", response, header, content, 0u, 0u, NULL);\n    return MHD_NO;\n  }\n\n  /* Record address before calling strlen to help reproduce scenarios\n     where strlen reads past the end of the provided object. */\n  mhd_log_probe(\"BEFORE_STRLEN_HEADER\", response, header, content, 0u, 0u, NULL);\n\n  header_len = strlen (header);\n\n  /* Log the result of strlen. If header was not NUL-terminated within\n     its allocated bounds, this length may reflect a read past the\n     object's end (undefined behavior) \u2014 this log captures that.\n     Note: we still avoid directly printing bytes from the header. */\n  mhd_log_probe(\"AFTER_STRLEN_HEADER\", response, header, content, header_len, 0u, NULL);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    mhd_log_probe(\"CONN_HEADER_MATCH\", response, header, content, header_len, 0u, NULL);\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n  mhd_log_probe(\"AFTER_STRLEN_CONTENT\", response, header, content, header_len, content_len, NULL);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    /* Log each iteration and the current position pointer and sizes. */\n    mhd_log_probe(\"LOOP_ITER\", response, header, content, header_len, content_len, pos);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      mhd_log_probe(\"MATCH_FOUND_BEFORE_REMOVE\", response, header, content, header_len, content_len, pos);\n\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      mhd_log_probe(\"AFTER_FREE\", response, header, content, header_len, content_len, NULL);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n      {\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        mhd_log_probe(\"CLEARED_TRANS_ENC_FLAG\", response, header, content, header_len, content_len, NULL);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n      {\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        mhd_log_probe(\"CLEARED_DATE_FLAG\", response, header, content, header_len, content_len, NULL);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n        {\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n          mhd_log_probe(\"CLEARED_CONTENT_LENGTH_FLAG\", response, header, content, header_len, content_len, NULL);\n        }\n      }\n      mhd_log_probe(\"RETURN_YES\", response, header, content, header_len, content_len, NULL);\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n\n  mhd_log_probe(\"RETURN_NO\", response, header, content, header_len, content_len, NULL);\n  return MHD_NO;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n[ENTER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f0b0 header_len=0 content_len=0 pos=(nil) flags_auto=0x0\n[BEFORE_STRLEN_HEADER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f0b0 header_len=0 content_len=0 pos=(nil) flags_auto=0x0\n[AFTER_STRLEN_HEADER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f0b0 header_len=13 content_len=0 pos=(nil) flags_auto=0x0\n[AFTER_STRLEN_CONTENT] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f0b0 header_len=13 content_len=8 pos=(nil) flags_auto=0x0\n[LOOP_ITER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f0b0 header_len=13 content_len=8 pos=0x55def585f3a0 flags_auto=0x0\n[MATCH_FOUND_BEFORE_REMOVE] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f0b0 header_len=13 content_len=8 pos=0x55def585f3a0 flags_auto=0x0\n[AFTER_FREE] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f0b0 header_len=13 content_len=8 pos=(nil) flags_auto=0x0\n[RETURN_YES] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f0b0 header_len=13 content_len=8 pos=(nil) flags_auto=0x0\n[ENTER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f118 header_len=0 content_len=0 pos=(nil) flags_auto=0x0\n[BEFORE_STRLEN_HEADER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f118 header_len=0 content_len=0 pos=(nil) flags_auto=0x0\n[AFTER_STRLEN_HEADER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f118 header_len=13 content_len=0 pos=(nil) flags_auto=0x0\n[AFTER_STRLEN_CONTENT] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f118 header_len=13 content_len=8 pos=(nil) flags_auto=0x0\n[LOOP_ITER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f118 header_len=13 content_len=8 pos=0x55def585f420 flags_auto=0x0\n[LOOP_ITER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f118 header_len=13 content_len=8 pos=0x55def585f640 flags_auto=0x0\n[MATCH_FOUND_BEFORE_REMOVE] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f118 header_len=13 content_len=8 pos=0x55def585f640 flags_auto=0x0\n[AFTER_FREE] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f118 header_len=13 content_len=8 pos=(nil) flags_auto=0x0\n[RETURN_YES] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f118 header_len=13 content_len=8 pos=(nil) flags_auto=0x0\n[ENTER] response=0x55def585f2a0 header=0x55deeb17f12f content=0x55deeb17f118 header_len=0 content_len=0 pos=(nil) flags_auto=0x0\n[BEFORE_STRLEN_HEADER] response=0x55def585f2a0 header=0x55deeb17f12f content=0x55deeb17f118 header_len=0 content_len=0 pos=(nil) flags_auto=0x0\n[AFTER_STRLEN_HEADER] response=0x55def585f2a0 header=0x55deeb17f12f content=0x55deeb17f118 header_len=13 content_len=0 pos=(nil) flags_auto=0x0\n[AFTER_STRLEN_CONTENT] response=0x55def585f2a0 header=0x55deeb17f12f content=0x55deeb17f118 header_len=13 content_len=8 pos=(nil) flags_auto=0x0\n[LOOP_ITER] response=0x55def585f2a0 header=0x55deeb17f12f content=0x55deeb17f118 header_len=13 content_len=8 pos=0x55def585f420 flags_auto=0x0\n[RETURN_NO] response=0x55def585f2a0 header=0x55deeb17f12f content=0x55deeb17f118 header_len=13 content_len=8 pos=(nil) flags_auto=0x0\n[ENTER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f15b header_len=0 content_len=0 pos=(nil) flags_auto=0x0\n[BEFORE_STRLEN_HEADER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f15b header_len=0 content_len=0 pos=(nil) flags_auto=0x0\n[AFTER_STRLEN_HEADER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f15b header_len=13 content_len=0 pos=(nil) flags_auto=0x0\n[AFTER_STRLEN_CONTENT] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f15b header_len=13 content_len=7 pos=(nil) flags_auto=0x0\n[LOOP_ITER] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f15b header_len=13 content_len=7 pos=0x55def585f420 flags_auto=0x0\n[RETURN_NO] response=0x55def585f2a0 header=0x55deeb17f0b9 content=0x55deeb17f15b header_len=13 content_len=7 pos=(nil) flags_auto=0x0\n[ENTER]\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MHD_del_response_header calls strlen(header) and strlen(content) without any guarantee the caller-provided buffers are NUL-terminated (the function only checks for NULL). If a caller supplies a pointer to a buffer that is not NUL-terminated within its allocated bounds, strlen will read past the end of the object (undefined behavior) and the subsequently computed header_len/content_len may cause memcmp(header, ..., header_len) / memcmp(content, ..., content_len) to access out-of-bounds memory. That use of <string.h> functions can therefore result in accesses beyond the bounds of the objects referenced by their pointer parameters, violating MISRA C 2023 Rule 21.17."
}