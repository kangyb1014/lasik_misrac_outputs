{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 calling strlen(content) with only a NULL check does not guarantee that 'content' points to a NUL\u2011terminated object. If a caller passes a non\u2011NUL\u2011terminated buffer (or a pointer into a region whose terminator lies beyond its allocated bounds), strlen(content) can read past the object boundary. In this function that can lead to content_len > pos->value_size and the subsequent memcmp(content, pos->value, content_len) will read beyond pos->value, causing an out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\nstatic void mhd_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/399.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  mhd_log(\"MHD_del_response_header: entry response=%p header=%p content=%p\",\n          (void *) response, (void *) header, (void *) content);\n\n  if ( (NULL == header) ||\n       (NULL == content) ) {\n    mhd_log(\"MHD_del_response_header: NULL parameter detected header=%p content=%p -> MHD_NO\",\n            (void *) header, (void *) content);\n    return MHD_NO;\n  }\n\n  header_len = strlen (header);\n  mhd_log(\"MHD_del_response_header: header_len=%zu header_ptr=%p\",\n          header_len, (void *) header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len)) {\n    mhd_log(\"MHD_del_response_header: matched Connection header, delegating to del_response_header_connection\");\n    enum MHD_Result r = del_response_header_connection (response, content);\n    mhd_log(\"MHD_del_response_header: del_response_header_connection returned %d\", (int) r);\n    return r;\n  }\n\n  content_len = strlen (content);\n  mhd_log(\"MHD_del_response_header: content_len=%zu content_ptr=%p\",\n          content_len, (void *) content);\n\n  pos = response->first_header;\n  mhd_log(\"MHD_del_response_header: starting scan first_header=%p\", (void *) pos);\n  while (NULL != pos)\n  {\n    mhd_log(\"MHD_del_response_header: visiting pos=%p header_size=%zu value_size=%zu header_addr=%p value_addr=%p\",\n            (void *) pos, pos->header_size, pos->value_size,\n            (void *) pos->header, (void *) pos->value);\n\n    if (header_len == pos->header_size)\n    {\n      if (content_len == pos->value_size)\n      {\n        /* safe to memcmp because lengths are equal */\n        int header_cmp = memcmp (header, pos->header, header_len);\n        int content_cmp = memcmp (content, pos->value, content_len);\n        mhd_log(\"MHD_del_response_header: lengths equal header_cmp=%d content_cmp=%d\",\n                header_cmp, content_cmp);\n        if ((0 == header_cmp) && (0 == content_cmp))\n        {\n          mhd_log(\"MHD_del_response_header: match found at pos=%p - removing header\", (void *) pos);\n          _MHD_remove_header (response, pos);\n          free (pos->header);\n          free (pos->value);\n          free (pos);\n          if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n                header_len) &&\n               MHD_str_equal_caseless_bin_n_ (header,\n                                              MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                              header_len) )\n          {\n            mhd_log(\"MHD_del_response_header: clearing RAF_HAS_TRANS_ENC_CHUNKED flag\");\n            response->flags_auto &=\n              ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n          }\n          else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                     header_len) &&\n                    MHD_str_equal_caseless_bin_n_ (header,\n                                                   MHD_HTTP_HEADER_DATE,\n                                                   header_len) )\n          {\n            mhd_log(\"MHD_del_response_header: clearing RAF_HAS_DATE_HDR flag\");\n            response->flags_auto &=\n              ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n          }\n          else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                     header_len) &&\n                    MHD_str_equal_caseless_bin_n_ (header,\n                                                   MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                   header_len) )\n          {\n            if (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                     header_len))\n            {\n              mhd_log(\"MHD_del_response_header: clearing RAF_HAS_CONTENT_LENGTH flag\");\n              response->flags_auto &=\n                ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n            }\n          }\n          mhd_log(\"MHD_del_response_header: removed header, returning MHD_YES\");\n          return MHD_YES;\n        }\n        else\n        {\n          mhd_log(\"MHD_del_response_header: lengths equal but memcmp not equal header_cmp=%d content_cmp=%d\",\n                  header_cmp, content_cmp);\n        }\n      }\n      else\n      {\n        mhd_log(\"MHD_del_response_header: header sizes equal but value sizes differ: content_len=%zu pos->value_size=%zu\",\n                content_len, pos->value_size);\n      }\n    }\n    else\n    {\n      mhd_log(\"MHD_del_response_header: header_len mismatch: header_len=%zu pos->header_size=%zu\",\n              header_len, pos->header_size);\n    }\n    pos = pos->next;\n  }\n  mhd_log(\"MHD_del_response_header: no match found -> MHD_NO\");\n  return MHD_NO;\n}\n"
}