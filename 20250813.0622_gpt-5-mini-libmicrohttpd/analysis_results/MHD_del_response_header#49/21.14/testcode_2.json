{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(hdr->value, \"close, \", MHD_STATICSTR_LEN_(\"close, \")). hdr->value is explicitly null-terminated earlier (hdr->value[hdr->value_size] = 0) and the RHS is a string literal, so memcmp is being used to compare null-terminated strings. According to MISRA C 2023 Rule 21.14 this use of memcmp for string comparison is forbidden (strcmp/strncmp or other string functions should be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/398.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n  FILE *fp = NULL;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  /* Open log file for probes. If the preferred path fails, fall back to /tmp/398.txt */\n  fp = fopen(\"/tmp/logs/398.txt\", \"a\");\n  if (NULL == fp)\n    fp = fopen(\"/tmp/398.txt\", \"a\");\n\n  if (fp)\n  {\n    fprintf(fp, \"ENTER: MHD_del_response_header header=%p len=%zu \\\"%.*s\\\"\\n\",\n            (void *)header, header_len, (int)header_len, header);\n    fflush(fp);\n  }\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    if (fp)\n    {\n      fprintf(fp, \"BRANCH: del_response_header_connection will be called for header=\\\"%.*s\\\"\\n\",\n              (int)header_len, header);\n      fclose(fp);\n      fp = NULL;\n    }\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n  if (fp)\n  {\n    fprintf(fp, \"PARAM: content=%p len=%zu \\\"%.*s\\\"\\n\",\n            (void *)content, content_len, (int)content_len, content);\n    fflush(fp);\n  }\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    /* Preserve original logic but capture memcmp results into temporaries\n       so we can log them without changing control flow. */\n    int header_cmp = 1;\n    int content_cmp = 1;\n\n    if (fp)\n    {\n      fprintf(fp, \"LOOP: pos=%p pos->header=%p pos->value=%p pos->header_size=%zu pos->value_size=%zu\\n\",\n              (void *)pos, (void *)pos->header, (void *)pos->value,\n              pos->header_size, pos->value_size);\n      /* Print header and value safely (not relying on NUL termination) */\n      if (pos->header && pos->header_size > 0)\n      {\n        fprintf(fp, \"LOOP: pos->header (as bytes, len=%zu): '%.*s'\\n\",\n                pos->header_size, (int)pos->header_size, pos->header);\n      }\n      if (pos->value && pos->value_size > 0)\n      {\n        fprintf(fp, \"LOOP: pos->value (as bytes, len=%zu): '%.*s'\\n\",\n                pos->value_size, (int)pos->value_size, pos->value);\n      }\n      fflush(fp);\n    }\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size))\n    {\n      /* memcmp is used in the original implementation; capture results here */\n      header_cmp = memcmp (header, pos->header, header_len);\n      content_cmp = memcmp (content, pos->value, content_len);\n\n      if (fp)\n      {\n        fprintf(fp, \"CMP: header_cmp=%d content_cmp=%d (header_len=%zu content_len=%zu)\\n\",\n                header_cmp, content_cmp, header_len, content_len);\n        /* Log whether the provided 'content' is NUL-terminated at content_len (it is, since content_len from strlen)\n           and report the pointer addresses to help reproduce the scenario. */\n        fprintf(fp, \"INFO: content pointer=%p content_len=%zu (strlen confirmed NUL termination)\\n\",\n                (void *)content, content_len);\n        fprintf(fp, \"INFO: pos->value pointer=%p pos->value_size=%zu\\n\",\n                (void *)pos->value, pos->value_size);\n        fflush(fp);\n      }\n    }\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == header_cmp) &&\n        (0 == content_cmp))\n    {\n      if (fp)\n      {\n        fprintf(fp, \"MATCH: header and content matched for pos=%p; removing header\\n\",\n                (void *)pos);\n        fflush(fp);\n      }\n\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n\n      if (fp)\n      {\n        fprintf(fp, \"EXIT: returning MHD_YES\\n\");\n        fclose(fp);\n        fp = NULL;\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n\n  if (fp)\n  {\n    fprintf(fp, \"EXIT: no matching header found; returning MHD_NO\\n\");\n    fclose(fp);\n    fp = NULL;\n  }\n  return MHD_NO;\n}\n"
}