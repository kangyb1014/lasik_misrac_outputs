{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes content_len = strlen(content) (so content is a null-terminated C string) and pos->value is used as a header value that is null-terminated elsewhere (e.g. buf[pos] = 0 and hdr->value[hdr->value_size] = 0). Then it calls memcmp(content, pos->value, content_len) to compare them. Using memcmp to compare these null-terminated strings violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/398.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/398.txt */\nstatic void mhd_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *fp;\n    /* try to create the directory; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    fp = fopen(\"/tmp/logs/398.txt\", \"a\");\n    if (NULL == fp)\n        return;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry into function and arguments */\n  mhd_log(\"MHD_del_response_header called: response=%p, header=%p, content=%p\", (void *)response, (const void *)header, (const void *)content);\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    mhd_log(\"Null argument detected: header=%p, content=%p - returning MHD_NO\", (const void *)header, (const void *)content);\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n  mhd_log(\"header: '%s' (len=%zu)\", header, header_len);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    mhd_log(\"Special-case Connection header branch taken for header '%s'\", header);\n    mhd_log(\"content: '%s' (will be passed to del_response_header_connection)\", content);\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n  mhd_log(\"content: '%s' (len=%zu)\", content, content_len);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    /* Log current header node state */\n    mhd_log(\"Inspecting header node: pos=%p, header_size=%zu, value_size=%zu, header_ptr=%p, value_ptr=%p\",\n            (void *)pos, pos->header_size, pos->value_size, (void *)pos->header, (void *)pos->value);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size))\n    {\n      /* Only perform memcmp when sizes match to preserve original logic and side-effects */\n      int header_cmp = memcmp (header, pos->header, header_len);\n      int content_cmp = memcmp (content, pos->value, content_len);\n\n      mhd_log(\"memcmp results: header_cmp=%d, content_cmp=%d\", header_cmp, content_cmp);\n      mhd_log(\"header (expected/actual): '%.*s' / '%.*s'\",\n              (int)header_len, header,\n              (int)pos->header_size, pos->header ? pos->header : \"\");\n      mhd_log(\"content (expected/actual): '%.*s' / '%.*s'\",\n              (int)content_len, content,\n              (int)pos->value_size, pos->value ? pos->value : \"\");\n\n      if ((0 == header_cmp) && (0 == content_cmp))\n      {\n        mhd_log(\"Match found: removing header node %p (header='%.*s', value='%.*s')\",\n                (void *)pos,\n                (int)pos->header_size, pos->header ? pos->header : \"\",\n                (int)pos->value_size, pos->value ? pos->value : \"\");\n\n        _MHD_remove_header (response, pos);\n        free (pos->header);\n        free (pos->value);\n        free (pos);\n\n        if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n              header_len) &&\n             MHD_str_equal_caseless_bin_n_ (header,\n                                            MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                            header_len) )\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                   header_len) &&\n                  MHD_str_equal_caseless_bin_n_ (header,\n                                                 MHD_HTTP_HEADER_DATE,\n                                                 header_len) )\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                   header_len) &&\n                  MHD_str_equal_caseless_bin_n_ (header,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len) )\n        {\n          if (NULL == MHD_get_response_element_n_ (response,\n                                                   MHD_HEADER_KIND,\n                                                   MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                   header_len))\n            response->flags_auto &=\n              ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n        }\n        mhd_log(\"Header removed and flags updated. Returning MHD_YES\");\n        return MHD_YES;\n      }\n      else\n      {\n        mhd_log(\"Size matched but contents differ for node %p: header_cmp=%d, content_cmp=%d\",\n                (void *)pos, header_cmp, content_cmp);\n      }\n    }\n    pos = pos->next;\n  }\n  mhd_log(\"No matching header found. Returning MHD_NO\");\n  return MHD_NO;\n}\n"
}