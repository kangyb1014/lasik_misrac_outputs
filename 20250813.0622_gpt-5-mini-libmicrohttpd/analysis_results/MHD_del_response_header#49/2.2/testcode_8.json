{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function del_response_header_connection is only called from MHD_del_response_header when response->flags_auto has MHD_RAF_HAS_CONNECTION_HDR set. The inner test if (0 != (response->flags_auto & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE))) therefore always evaluates to true in that call context (because the HAS_CONNECTION_HDR bit survives the mask), so the conditional check is redundant \u2014 an executed operation whose removal would not change program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/394.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "static void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/394.txt\", \"a\");\n  if (NULL == f)\n    return;\n  {\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n  }\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    mhd_probe_log(\"MHD_del_response_header: early return MHD_NO due to NULL header/content: header=%p content=%p\",\n                  (const void *) header, (const void *) content);\n    return MHD_NO;\n  }\n\n  header_len = strlen (header);\n\n  /* Log entry state: response pointer and flags_auto if available */\n  if (NULL != response)\n    mhd_probe_log(\"ENTER MHD_del_response_header: response=%p flags_auto=0x%llx header=\\\"%s\\\" header_len=%zu content=\\\"%s\\\"\",\n                  (const void *) response,\n                  (unsigned long long) response->flags_auto,\n                  header, header_len, content);\n  else\n    mhd_probe_log(\"ENTER MHD_del_response_header: response=NULL header=\\\"%s\\\" header_len=%zu content=\\\"%s\\\"\",\n                  header, header_len, content);\n\n  /* Evaluate the connection-header special case once and log components */\n  int has_conn_bit = 0;\n  int header_name_match = 0;\n  if (NULL != response)\n  {\n    has_conn_bit = (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR));\n  }\n  header_name_match = (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n                      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION, header_len);\n\n  mhd_probe_log(\"connection-special-case-check: has_conn_bit=%d header_name_match=%d\",\n                has_conn_bit, header_name_match);\n\n  if ((has_conn_bit) && (header_name_match))\n  {\n    mhd_probe_log(\"Invoking del_response_header_connection: response=%p content=\\\"%s\\\"\",\n                  (const void *) response, content);\n    enum MHD_Result r = del_response_header_connection (response, content);\n    mhd_probe_log(\"Returned from del_response_header_connection: result=%d response=%p flags_auto=0x%llx\",\n                  (int) r, (const void *) response,\n                  (NULL != response) ? (unsigned long long) response->flags_auto : 0ULL);\n    return r;\n  }\n\n  content_len = strlen (content);\n  mhd_probe_log(\"Proceeding to linear search: content_len=%zu\", content_len);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    mhd_probe_log(\"Inspecting header node: pos=%p header_size=%zu value_size=%zu\",\n                  (const void *) pos, pos->header_size, pos->value_size);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      mhd_probe_log(\"Match found: pos=%p; removing header. response->flags_auto before=0x%llx\",\n                    (const void *) pos,\n                    (unsigned long long) response->flags_auto);\n\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n      {\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        mhd_probe_log(\"Cleared HAS_TRANS_ENC_CHUNKED; flags_auto now=0x%llx\",\n                      (unsigned long long) response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n      {\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        mhd_probe_log(\"Cleared HAS_DATE_HDR; flags_auto now=0x%llx\",\n                      (unsigned long long) response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n        {\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n          mhd_probe_log(\"Cleared HAS_CONTENT_LENGTH; flags_auto now=0x%llx\",\n                        (unsigned long long) response->flags_auto);\n        }\n        else\n        {\n          mhd_probe_log(\"Content-Length element still present; flags_auto unchanged=0x%llx\",\n                        (unsigned long long) response->flags_auto);\n        }\n      }\n      mhd_probe_log(\"Header removed successfully; returning MHD_YES\");\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n\n  mhd_probe_log(\"No matching header found; returning MHD_NO\");\n  return MHD_NO;\n}\n"
}