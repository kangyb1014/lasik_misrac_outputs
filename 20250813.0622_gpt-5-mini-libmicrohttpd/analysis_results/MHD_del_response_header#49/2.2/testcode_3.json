{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe 'continue' statement inside the for-loop is dead code: when charsequalcaseless(c1,c2) is true the continue is executed but has no effect (it just proceeds to the next loop iteration at the end of the loop). Removing that continue does not change program behaviour, so this constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/394.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/394.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/394.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  probe_log(\"MHD_del_response_header: entry response=%p header=%p content=%p\", (void *)response, (const void *)header, (const void *)content);\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    probe_log(\"MHD_del_response_header: null parameter(s): header=%p content=%p -> return MHD_NO\", (const void *)header, (const void *)content);\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n  probe_log(\"MHD_del_response_header: header_len=%zu header=\\\"%s\\\"\", header_len, header);\n\n  /* Check for Connection header special case */\n  {\n    int has_conn_flag = (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR));\n    size_t conn_static_len = MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n    int eq_conn = MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION, header_len);\n    probe_log(\"MHD_del_response_header: connection-check has_conn_flag=%d conn_static_len=%zu header_len=%zu eq_conn=%d\",\n              has_conn_flag, conn_static_len, header_len, eq_conn);\n    if (has_conn_flag && (conn_static_len == header_len) && eq_conn)\n    {\n      probe_log(\"MHD_del_response_header: calling del_response_header_connection(response=%p, content=\\\"%s\\\")\", (void *)response, content);\n      enum MHD_Result r = del_response_header_connection (response, content);\n      probe_log(\"MHD_del_response_header: del_response_header_connection returned %d -> return\", (int)r);\n      return r;\n    }\n  }\n\n  content_len = strlen (content);\n  probe_log(\"MHD_del_response_header: content_len=%zu content=\\\"%s\\\"\", content_len, content);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    probe_log(\"MHD_del_response_header: loop pos=%p header_size=%zu value_size=%zu\", (void *)pos, pos->header_size, pos->value_size);\n\n    /* Log individual comparison components before performing removal */\n    int header_size_match = (header_len == pos->header_size);\n    int value_size_match = (content_len == pos->value_size);\n    int header_memcmp = 0;\n    int value_memcmp = 0;\n    if (header_size_match)\n      header_memcmp = (0 == memcmp (header, pos->header, header_len));\n    if (value_size_match)\n      value_memcmp = (0 == memcmp (content, pos->value, content_len));\n\n    probe_log(\"MHD_del_response_header: comparisons header_size_match=%d value_size_match=%d header_memcmp=%d value_memcmp=%d\",\n              header_size_match, value_size_match, header_memcmp, value_memcmp);\n\n    if (header_size_match && value_size_match && header_memcmp && value_memcmp)\n    {\n      probe_log(\"MHD_del_response_header: match found at pos=%p - removing header\", (void *)pos);\n\n      _MHD_remove_header (response, pos);\n      probe_log(\"MHD_del_response_header: removed header structure from list: about to free memory for pos=%p\", (void *)pos);\n\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      /* Log and update auto flags similarly to original logic */\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) == header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_TRANSFER_ENCODING, header_len) )\n      {\n        unsigned long before = (unsigned long) response->flags_auto;\n        response->flags_auto &= ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        probe_log(\"MHD_del_response_header: cleared RAF_HAS_TRANS_ENC_CHUNKED flag: before=0x%lx after=0x%lx\", before, (unsigned long) response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) == header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_DATE, header_len) )\n      {\n        unsigned long before = (unsigned long) response->flags_auto;\n        response->flags_auto &= ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        probe_log(\"MHD_del_response_header: cleared RAF_HAS_DATE_HDR flag: before=0x%lx after=0x%lx\", before, (unsigned long) response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) == header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONTENT_LENGTH, header_len) )\n      {\n        probe_log(\"MHD_del_response_header: content-length header removed - checking for other content-length entries\");\n        if (NULL == MHD_get_response_element_n_ (response, MHD_HEADER_KIND, MHD_HTTP_HEADER_CONTENT_LENGTH, header_len))\n        {\n          unsigned long before = (unsigned long) response->flags_auto;\n          response->flags_auto &= ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n          probe_log(\"MHD_del_response_header: cleared RAF_HAS_CONTENT_LENGTH flag: before=0x%lx after=0x%lx\", before, (unsigned long) response->flags_auto);\n        }\n        else\n        {\n          probe_log(\"MHD_del_response_header: another content-length entry still present - leaving HAS_CONTENT_LENGTH flag set\");\n        }\n      }\n\n      probe_log(\"MHD_del_response_header: returning MHD_YES\");\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  probe_log(\"MHD_del_response_header: no matching header found -> return MHD_NO\");\n  return MHD_NO;\n}\n"
}