{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member 'void *upgrade_handler_cls' is an opaque closure pointer passed to an upgrade handler and (per its documentation) used as a closure; it is not const-qualified even though it is apparently not meant to be modified via this pointer. It should be declared 'const void *upgrade_handler_cls' to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_response_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/307.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_response_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_response_options:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        return MHD_NO;\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n    return MHD_NO;\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_set_response_options code.\n",
  "test_code": "static void mhd_log_probe(const char *tag,\n                              struct MHD_Response *response,\n                              enum MHD_ResponseFlags flags,\n                              const char *detail)\n{\n  FILE *f = fopen(\"/tmp/logs/307.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"[%s] tag=%s response=%p flags_req=0x%lx response->flags=0x%lx response->flags_auto=0x%lx response->total_size=%lu detail=%s\\n\",\n          \"MHD_set_response_options\", tag,\n          (void *)response,\n          (unsigned long)flags,\n          (unsigned long)response->flags,\n          (unsigned long)response->flags_auto,\n          (unsigned long)response->total_size,\n          detail ? detail : \"(null)\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  /* Log entry and incoming state */\n  mhd_log_probe(\"entry\", response, flags, \"entered MHD_set_response_options\");\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    mhd_log_probe(\"check_has_content_length\", response, flags, \"response has custom Content-Length\");\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      mhd_log_probe(\"reject_remove_insanity_header\", response, flags, \"attempt to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH -> returning MHD_NO\");\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      mhd_log_probe(\"check_head_only\", response, flags, \"response had HEAD_ONLY and request attempts to remove it\");\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n      {\n        mhd_log_probe(\"reject_remove_head_only\", response, flags, \"attempt to remove MHD_RF_HEAD_ONLY_RESPONSE without insanity flag -> returning MHD_NO\");\n        return MHD_NO;\n      }\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n  {\n    mhd_log_probe(\"reject_head_only_with_total_size\", response, flags, \"MHD_RF_HEAD_ONLY_RESPONSE requested but response->total_size != 0 -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  ret = MHD_YES;\n  response->flags = flags;\n  mhd_log_probe(\"after_set_flags\", response, flags, \"flags set on response, proceeding to varargs processing\");\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    /* Log each response option value encountered */\n    {\n      char detailbuf[128];\n      /* Describe the option value numerically for reproducible evidence */\n      snprintf(detailbuf, sizeof(detailbuf), \"vararg option ro=%ld (0x%lx)\", (long)ro, (unsigned long)ro);\n      mhd_log_probe(\"vararg_option\", response, flags, detailbuf);\n    }\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      mhd_log_probe(\"case_ro_end\", response, flags, \"encountered MHD_RO_END inside loop (unexpected)\");\n      break;\n    default:\n      mhd_log_probe(\"case_default\", response, flags, \"unrecognized response option -> will set ret=MHD_NO\");\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n\n  {\n    if (ret == MHD_YES)\n      mhd_log_probe(\"exit_ok\", response, flags, \"returning MHD_YES\");\n    else\n      mhd_log_probe(\"exit_no\", response, flags, \"returning MHD_NO due to unrecognized option or earlier check\");\n  }\n\n  return ret;\n}\n"
}