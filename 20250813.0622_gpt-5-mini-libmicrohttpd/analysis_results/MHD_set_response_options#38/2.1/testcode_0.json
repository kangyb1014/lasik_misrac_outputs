{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nInside the while loop the condition is \"while (MHD_RO_END != (ro = va_arg(ap, enum MHD_ResponseOptions)))\" which guarantees the loop body is only entered when ro != MHD_RO_END. Therefore the switch case \"case MHD_RO_END:\" in the loop body can never be executed (it is unreachable). This is a violation of MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_response_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/305.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_response_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_response_options:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        return MHD_NO;\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n    return MHD_NO;\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_set_response_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n  FILE *logf = fopen(\"/tmp/logs/305.txt\", \"a\");\n\n  if (logf)\n    fprintf(logf, \"MHD_set_response_options ENTER: response=%p flags=0x%08x\\n\",\n            (void *)response, (unsigned)flags);\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      if (logf)\n        fprintf(logf, \"EARLY RETURN: has_content_length && remove insanity_header_content_length -> MHD_NO\\n\");\n      if (logf) fclose(logf);\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        {\n          if (logf)\n            fprintf(logf, \"EARLY RETURN: has_content_length && remove head_only_response without insanity flag -> MHD_NO\\n\");\n          if (logf) fclose(logf);\n          return MHD_NO;\n        }\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n  {\n    if (logf)\n      fprintf(logf, \"EARLY RETURN: head_only_response requested but total_size != 0 -> MHD_NO (total_size=%llu)\\n\",\n              (unsigned long long)response->total_size);\n    if (logf) fclose(logf);\n    return MHD_NO;\n  }\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  if (logf)\n    fprintf(logf, \"PROCEED: ret=MHD_YES, response->flags set to 0x%08x, flags_auto=0x%08x, total_size=%llu\\n\",\n            (unsigned)response->flags,\n            (unsigned)response->flags_auto,\n            (unsigned long long)response->total_size);\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    if (logf)\n      fprintf(logf, \"VA_ARG: got ro=%d\\n\", (int)ro);\n\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      if (logf)\n        fprintf(logf, \"UNREACHABLE CASE HIT: case MHD_RO_END inside loop body. ro=%d\\n\", (int)ro);\n      break;\n    default:\n      if (logf)\n        fprintf(logf, \"DEFAULT CASE: setting ret=MHD_NO for ro=%d\\n\", (int)ro);\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n\n  if (logf)\n    fprintf(logf, \"EXIT: returning %s\\n\", (ret == MHD_YES) ? \"MHD_YES\" : \"MHD_NO\");\n  if (logf) fclose(logf);\n  return ret;\n}\n"
}