{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro defines _MHD_EXTERN as __attribute__((visibility(\"default\")))extern, which uses the GCC/Clang __attribute__ extension (visibility attribute) documented as a compiler-specific extension. This is a language/compiler extension and therefore violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_response_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/304.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_response_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_response_options:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        return MHD_NO;\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n    return MHD_NO;\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_set_response_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends control flow and state info to /tmp/logs/304.txt */\nstatic void MHD_probe_log(const char *stage,\n                          struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          enum MHD_ResponseOptions ro,\n                          enum MHD_Result ret)\n{\n  FILE *f = fopen(\"/tmp/logs/304.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"Stage: %s\\n\", stage);\n  fprintf(f, \"response=%p\\n\", (void *)response);\n  if (response != NULL)\n  {\n    /* Print relevant response fields as integers to capture state */\n    fprintf(f, \" response->flags_auto=%llu\\n\",\n            (unsigned long long) response->flags_auto);\n    fprintf(f, \" response->flags=%llu\\n\",\n            (unsigned long long) response->flags);\n    fprintf(f, \" response->total_size=%llu\\n\",\n            (unsigned long long) response->total_size);\n  }\n  fprintf(f, \" flags(param)=%llu\\n\", (unsigned long long) flags);\n  fprintf(f, \" ro(current)=%llu\\n\", (unsigned long long) ro);\n  fprintf(f, \" ret(current)=%llu\\n\", (unsigned long long) ret);\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  /* Log entry into function with initial state */\n  MHD_probe_log(\"entry\", response, flags, (enum MHD_ResponseOptions)0, (enum MHD_Result)0);\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    MHD_probe_log(\"has_content_length_branch\", response, flags, (enum MHD_ResponseOptions)0, (enum MHD_Result)0);\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      MHD_probe_log(\"early_return_remove_insanity\", response, flags, (enum MHD_ResponseOptions)0, MHD_NO);\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      MHD_probe_log(\"has_head_only_branch\", response, flags, (enum MHD_ResponseOptions)0, (enum MHD_Result)0);\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n      {\n        MHD_probe_log(\"early_return_remove_head_only_requires_insanity\", response, flags, (enum MHD_ResponseOptions)0, MHD_NO);\n        return MHD_NO;\n      }\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n  {\n    MHD_probe_log(\"early_return_head_only_with_total_size\", response, flags, (enum MHD_ResponseOptions)0, MHD_NO);\n    return MHD_NO;\n  }\n\n  ret = MHD_YES;\n  response->flags = flags;\n  MHD_probe_log(\"after_set_flags\", response, flags, (enum MHD_ResponseOptions)0, ret);\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    /* Log each option read from varargs */\n    MHD_probe_log(\"vararg_option_read\", response, flags, ro, ret);\n\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      MHD_probe_log(\"vararg_unrecognized_option\", response, flags, ro, ret);\n      break;\n    }\n  }\n  va_end (ap);\n\n  MHD_probe_log(\"exit\", response, flags, (enum MHD_ResponseOptions)0, ret);\n  return ret;\n}\n"
}