{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns to the by-value parameter 'noncelen' (noncelen = strlen(nonce)) when noncelen == 0, thereby modifying a function parameter. This violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/589.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Prototype for external conversion function used in original code. */\nextern size_t MHD_strx_to_uint64_n_(const char *src, size_t len, uint64_t *dst);\n\n/*\n * Helper probe function: append a log line with current control state to\n * \"/tmp/logs/589.txt\". We avoid dereferencing ptimestamp to prevent\n * accidental side-effects; only the pointer value is logged.\n */\nstatic void\nlog_probe (const char *event,\n           const char *const nonce,\n           size_t noncelen,\n           const uint64_t *const ptimestamp,\n           size_t conv_res)\n{\n  FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n  if (f != NULL)\n    {\n      /* Basic state */\n      fprintf (f, \"%s: nonce=%p noncelen=%zu ptimestamp=%p conv_res=%zu\\n\",\n               event,\n               (const void *) nonce,\n               noncelen,\n               (const void *) ptimestamp,\n               conv_res);\n\n      /* Also attempt to log the nonce string (if available) to help\n         reproducing the scenario. Keep this separate so failures to\n         print it don't affect the primary state log. */\n      if (nonce != NULL)\n        {\n          /* Limit the printed nonce length to avoid excessive logs. */\n          const size_t max_print = 256u;\n          char buf[257];\n          size_t n = strlen (nonce);\n          if (n > max_print)\n            n = max_print;\n          memcpy (buf, nonce, n);\n          buf[n] = '\\0';\n          fprintf (f, \"%s: nonce_str=\\\"%s\\\" (truncated=%zu)\\n\",\n                   event, buf, n);\n        }\n\n      fclose (f);\n    }\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Log entry state. conv_res set to (size_t)-1 to indicate not-applicable. */\n  log_probe (\"entry\", nonce, noncelen, ptimestamp, (size_t) -1);\n\n  if (0 == noncelen)\n    {\n      /* Log before modifying the by-value parameter to capture the violation scenario. */\n      log_probe (\"pre_assign_noncelen_is_zero\", nonce, noncelen, ptimestamp, (size_t) -1);\n\n      noncelen = strlen (nonce);\n\n      /* Log after assignment so the trace shows the parameter modification. */\n      log_probe (\"post_assign_noncelen\", nonce, noncelen, ptimestamp, (size_t) -1);\n    }\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    {\n      log_probe (\"length_check_failed\", nonce, noncelen, ptimestamp, (size_t) -1);\n      return false;\n    }\n\n  /*\n   * Call the conversion once, store the result so we can log it and still\n   * preserve the original behavior.\n   */\n  size_t conv_res = MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                                           TIMESTAMP_CHARS_LEN,\n                                           ptimestamp);\n\n  /* Log the result of the conversion attempt. */\n  log_probe (\"after_timestamp_conversion\", nonce, noncelen, ptimestamp, conv_res);\n\n  if (TIMESTAMP_CHARS_LEN != conv_res)\n    {\n      log_probe (\"timestamp_conversion_failed\", nonce, noncelen, ptimestamp, conv_res);\n      return false;\n    }\n\n  log_probe (\"return_true\", nonce, noncelen, ptimestamp, conv_res);\n  return true;\n}\n"
}