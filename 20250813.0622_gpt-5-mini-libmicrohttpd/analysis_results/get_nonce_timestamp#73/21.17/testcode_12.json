{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(realm) has no preceding check that 'realm' is non-NULL or that it points to a null-terminated buffer. If the caller supplies realm == NULL this dereferences NULL; if realm is not properly NUL-terminated within its object bounds strlen can read past the object. Either case would cause access beyond the bounds of the object referenced by the pointer parameter to strlen, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/591.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <inttypes.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/591.txt. */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/591.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  probe_log (\"ENTER get_nonce_timestamp: nonce=%p noncelen=%zu ptimestamp=%p\",\n             (const void *) nonce, noncelen, (const void *) ptimestamp);\n\n  if (0 == noncelen)\n    {\n      /* Log state immediately before the strlen call that can trigger the violation. */\n      probe_log (\"noncelen==0: about to call strlen(nonce) with nonce=%p\",\n                 (const void *) nonce);\n\n      /* Preserve original logic: call strlen (this is the site described in the violation). */\n      noncelen = strlen (nonce);\n\n      probe_log (\"after strlen: nonce=%p noncelen=%zu\", (const void *) nonce, noncelen);\n    }\n\n  probe_log (\"checking expected nonce length: noncelen=%zu\", noncelen);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    {\n      probe_log (\"length check failed: noncelen=%zu -> returning false\", noncelen);\n      return false;\n    }\n\n  /* Compute pointer used for timestamp extraction and log it. */\n  const char *timestamp_ptr = nonce + noncelen - TIMESTAMP_CHARS_LEN;\n  probe_log (\"timestamp substring ptr=%p (nonce=%p noncelen=%zu TIMESTAMP_CHARS_LEN=%d)\",\n             (const void *) timestamp_ptr, (const void *) nonce, noncelen, (int) TIMESTAMP_CHARS_LEN);\n\n  /* Call the conversion function but capture the result to log it before making the boolean decision. */\n  size_t conv_count = MHD_strx_to_uint64_n_ (timestamp_ptr,\n                                             TIMESTAMP_CHARS_LEN,\n                                             ptimestamp);\n  probe_log (\"MHD_strx_to_uint64_n_ returned %zu for ptr=%p\", conv_count, (const void *) timestamp_ptr);\n  if (ptimestamp != NULL)\n    probe_log (\"ptimestamp (after call) = %llu\", (unsigned long long) *ptimestamp);\n\n  if (TIMESTAMP_CHARS_LEN != conv_count)\n    {\n      probe_log (\"timestamp conversion length mismatch: expected=%d got=%zu -> returning false\",\n                 (int) TIMESTAMP_CHARS_LEN, conv_count);\n      return false;\n    }\n\n  probe_log (\"EXIT get_nonce_timestamp: success noncelen=%zu ptimestamp=%p value=%llu\",\n             noncelen, (const void *) ptimestamp,\n             (unsigned long long) (ptimestamp ? *ptimestamp : 0ULL));\n  return true;\n}\n"
}