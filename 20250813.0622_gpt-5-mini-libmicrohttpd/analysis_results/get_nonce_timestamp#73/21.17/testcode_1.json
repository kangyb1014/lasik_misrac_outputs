{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmemcmp(hash1_bin, hash2_bin, digest_size) compares digest_size bytes but hash1_bin and hash2_bin are declared as uint8_t hash1_bin[MAX_DIGEST]; uint8_t hash2_bin[MAX_DIGEST]. There is no explicit check in this function that digest_size <= MAX_DIGEST, so if digest_get_size(da) returns a value greater than MAX_DIGEST (due to misinitialised/incorrect digest algorithm, corrupted state or API misuse), memcmp will read beyond the bounds of the hash buffers. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/591.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <inttypes.h>\n\n/* Probe logger: append diagnostic entries to /tmp/logs/591.txt. */\nstatic void\nprobe_log_nonce(const char *stage,\n                const char *nonce_ptr,\n                size_t noncelen_val,\n                size_t parsed_len,\n                uint64_t ptimestamp_val,\n                int have_timestamp)\n{\n  /* Try to create the directory if it does not exist. Ignore errors other than EEXIST. */\n  (void)mkdir(\"/tmp/logs\", 0777);\n\n  FILE *fp = fopen(\"/tmp/logs/591.txt\", \"a\");\n  if (NULL == fp)\n    return;\n\n  /* Log a compact single-line record describing the control point and state. */\n  fprintf(fp,\n          \"[get_nonce_timestamp] stage=%s nonce_ptr=%p noncelen=%zu parsed_len=%zu have_timestamp=%d ptimestamp=%\" PRIu64 \"\\n\",\n          stage,\n          (const void *)nonce_ptr,\n          noncelen_val,\n          parsed_len,\n          have_timestamp,\n          ptimestamp_val);\n\n  fclose(fp);\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Log entry with original inputs. */\n  probe_log_nonce(\"entry\", nonce, noncelen, 0u, 0u, 0);\n\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  /* Log after potential strlen() adjustment. */\n  probe_log_nonce(\"after_len\", nonce, noncelen, 0u, 0u, 0);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n  {\n    /* Log the algorithm/length mismatch before returning. */\n    probe_log_nonce(\"alg_len_mismatch\", nonce, noncelen, 0u, 0u, 0);\n    return false;\n  }\n\n  /* Parse the timestamp substring once and record the parse length. */\n  size_t parsed = MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                                        TIMESTAMP_CHARS_LEN,\n                                        ptimestamp);\n\n  /* Log the parse result (do not read *ptimestamp unless parse succeeded). */\n  if (TIMESTAMP_CHARS_LEN != parsed)\n  {\n    probe_log_nonce(\"timestamp_parse_failed\", nonce, noncelen, parsed, 0u, 0);\n    return false;\n  }\n\n  /* On success, log the parsed timestamp value. */\n  probe_log_nonce(\"success\", nonce, noncelen, parsed, *ptimestamp, 1);\n  return true;\n}\n"
}