{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/559.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\nextern const char NOT_FOUND_ERROR[];\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and parameters */\n  probe_log (\"not_found_page: enter; cls=%p, mime=%p, session=%p, connection=%p\",\n             cls, (const void *) mime, (const void *) session, (const void *) connection);\n  if (mime != NULL)\n    probe_log (\"not_found_page: mime string='%s'\", mime);\n\n  /* unsupported HTTP method */\n  size_t not_found_len = 0;\n  /* Protect against NOT_FOUND_ERROR being NULL in some build configurations. */\n  if (&NOT_FOUND_ERROR != NULL)\n    not_found_len = strlen (NOT_FOUND_ERROR);\n  probe_log (\"not_found_page: NOT_FOUND_ERROR length=%zu\", not_found_len);\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  probe_log (\"not_found_page: MHD_create_response_from_buffer_static returned %p\", (void *) response);\n  if (NULL == response)\n  {\n    probe_log (\"not_found_page: response is NULL -> returning MHD_NO\");\n    return (enum MHD_Result) 0; /* MHD_NO (value preserved as original return) */\n  }\n\n  ret = MHD_queue_response (connection,\n                            /* The original used MHD_HTTP_NOT_FOUND; we log the fact */\n                            /* value is passed through unchanged */\n                            /* Keep the original call as-is to preserve behavior */\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  probe_log (\"not_found_page: MHD_queue_response returned %d\", (int) ret);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    probe_log (\"not_found_page: MHD_add_response_header failed for mime='%s'\", mime ? mime : \"(null)\");\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  else\n  {\n    probe_log (\"not_found_page: MHD_add_response_header succeeded for mime='%s'\", mime ? mime : \"(null)\");\n  }\n\n  MHD_destroy_response (response);\n  probe_log (\"not_found_page: destroyed response, returning ret=%d\", (int) ret);\n  return ret;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\npost_example.c:53:3: error: expected identifier or '(' before string constant\n   53 |   \"<html><head><title>Not found</title></head><body>Go away.</body></html>\"\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\npost_example.c:53:3: note: in definition of macro 'NOT_FOUND_ERROR'\n   53 |   \"<html><head><title>Not found</title></head><body>Go away.</body></html>\"\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nmake[4]: *** [Makefile:1086: post_example.o] Error 1\nmake[3]: *** [Makefile:1234: all-recursive] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of not_found_page as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal declarations to allow this translation unit to compile. */\nstruct Session;\nstruct MHD_Connection;\nstruct MHD_Response;\n\n/* Minimal enum so code can compile and preserve original comparisons. */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\n\n/* Common HTTP constant used by the function. */\nstatic const int MHD_HTTP_NOT_FOUND = 404;\nstatic const char MHD_HTTP_HEADER_CONTENT_ENCODING[] = \"Content-Encoding\";\n\n/* Prototypes for libmicrohttpd-like functions used by the code.*/\nextern struct MHD_Response *\nMHD_create_response_from_buffer_static (size_t size, const void *buffer);\n\nextern enum MHD_Result\nMHD_queue_response (struct MHD_Connection *connection, int status_code, struct MHD_Response *response);\n\nextern enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response, const char *name, const char *value);\n\nextern void\nMHD_destroy_response (struct MHD_Response *response);\n\n/* A local string to use as the error body. We avoid the identifier NOT_FOUND_ERROR\n   to prevent collisions with build-system macros named the same. */\nstatic const char not_found_error_str[] =\n  \"<html><head><title>Not found</title></head><body>Go away.</body></html>\";\n\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/559.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and parameters */\n  probe_log (\"not_found_page: enter; cls=%p, mime=%p, session=%p, connection=%p\",\n             cls, (const void *) mime, (const void *) session, (const void *) connection);\n  if (mime != NULL)\n    probe_log (\"not_found_page: mime string='%s'\", mime);\n\n  /* unsupported HTTP method */\n  size_t not_found_len = 0;\n  /* Protect against not_found_error_str being NULL in some build configurations. */\n  if (&not_found_error_str != NULL)\n    not_found_len = strlen (not_found_error_str);\n  probe_log (\"not_found_page: NOT_FOUND_ERROR length=%zu\", not_found_len);\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (not_found_error_str),\n                                            (const void *) not_found_error_str);\n  probe_log (\"not_found_page: MHD_create_response_from_buffer_static returned %p\", (void *) response);\n  if (NULL == response)\n  {\n    probe_log (\"not_found_page: response is NULL -> returning MHD_NO\");\n    return (enum MHD_Result) 0; /* MHD_NO (value preserved as original return) */\n  }\n\n  ret = MHD_queue_response (connection,\n                            /* The original used MHD_HTTP_NOT_FOUND; we log the fact */\n                            /* value is passed through unchanged */\n                            /* Keep the original call as-is to preserve behavior */\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  probe_log (\"not_found_page: MHD_queue_response returned %d\", (int) ret);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    probe_log (\"not_found_page: MHD_add_response_header failed for mime='%s'\", mime ? mime : \"(null)\");\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  else\n  {\n    probe_log (\"not_found_page: MHD_add_response_header succeeded for mime='%s'\", mime ? mime : \"(null)\");\n  }\n\n  MHD_destroy_response (response);\n  probe_log (\"not_found_page: destroyed response, returning ret=%d\", (int) ret);\n  return ret;\n}\n",
  "explanation": "The compile error was caused by a macro named NOT_FOUND_ERROR colliding with an identifier in the original source. To avoid preprocessor macro expansion and preserve behavior, I replaced uses of NOT_FOUND_ERROR with a locally-scoped variable named not_found_error_str. I also added the minimal includes and forward declarations (enum, structs, and function prototypes) required for the unit to compile without providing any mock function implementations or defining macros. The original logic and flow of not_found_page are preserved as closely as possible."
}