{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If value_has_close is true and norm_len != 0, the code does memmove(buf + MHD_STATICSTR_LEN_(\"close, \") + old_value_len, buf + old_value_len, norm_len + 1) but buf was allocated with buf_size = old_value_len + (size_t)initial_norm_len. The code only asserts (via mhd_assert) that buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1, however buf_size is actually old_value_len + initial_norm_len so in normal builds the assertion may be disabled and the allocation does not account for the extra \"close, \" prefix. For a concrete example: value_len = 10 -> initial norm_len = 10 + 5 + 1 = 16, buf_size = 16; MHD_STATICSTR_LEN_(\"close, \") == 7, memmove will attempt to write 16+1 bytes starting at offset 7 which overruns the 16-byte buffer (writes up to offset 23). Therefore memmove (and subsequent memcpy) can access beyond the allocated buffer, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/559.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logger: appends logs to /tmp/logs/559.txt */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/559.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n/* Forward declarations / external symbols are assumed to exist in the\n   surrounding build. We keep the original function signature and logic\n   but add logging probes to capture control flow and key state. */\nextern const char NOT_FOUND_ERROR[];\n\n/* Keep original types opaque here (they are provided by the project). */\nenum MHD_Result;\nstruct MHD_Response;\nstruct MHD_Connection;\nstruct Session;\n\n/* External library functions used by the original code. */\nextern struct MHD_Response *\nMHD_create_response_from_buffer_static (size_t, const void *);\n\nextern enum MHD_Result\nMHD_queue_response (struct MHD_Connection *, int, struct MHD_Response *);\n\nextern enum MHD_Result\nMHD_add_response_header (struct MHD_Response *, const char *, const char *);\n\nextern void\nMHD_destroy_response (struct MHD_Response *);\n\n/* Original function with inserted probes. */\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and parameters */\n  probe_log (\"not_found_page: enter; cls=%p, mime=%p, session=%p, connection=%p\",\n             cls, (const void *) mime, (const void *) session, (const void *) connection);\n  if (mime != NULL)\n    probe_log (\"not_found_page: mime string='%s'\", mime);\n\n  /* unsupported HTTP method */\n  size_t not_found_len = 0;\n  /* Protect against NOT_FOUND_ERROR being NULL in some build configurations. */\n  if (&NOT_FOUND_ERROR != NULL)\n    not_found_len = strlen (NOT_FOUND_ERROR);\n  probe_log (\"not_found_page: NOT_FOUND_ERROR length=%zu\", not_found_len);\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  probe_log (\"not_found_page: MHD_create_response_from_buffer_static returned %p\", (void *) response);\n  if (NULL == response)\n  {\n    probe_log (\"not_found_page: response is NULL -> returning MHD_NO\");\n    return (enum MHD_Result) 0; /* MHD_NO (value preserved as original return) */\n  }\n\n  ret = MHD_queue_response (connection,\n                            /* The original used MHD_HTTP_NOT_FOUND; we log the fact */\n                            /* value is passed through unchanged */\n                            /* Keep the original call as-is to preserve behavior */\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  probe_log (\"not_found_page: MHD_queue_response returned %d\", (int) ret);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    probe_log (\"not_found_page: MHD_add_response_header failed for mime='%s'\", mime ? mime : \"(null)\");\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  else\n  {\n    probe_log (\"not_found_page: MHD_add_response_header succeeded for mime='%s'\", mime ? mime : \"(null)\");\n  }\n\n  MHD_destroy_response (response);\n  probe_log (\"not_found_page: destroyed response, returning ret=%d\", (int) ret);\n  return ret;\n}\n"
}