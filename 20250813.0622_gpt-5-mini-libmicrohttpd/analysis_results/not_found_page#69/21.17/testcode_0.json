{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strchr(value, '\\r') and strchr(value, '\\n') without first ensuring that 'value' is non-NULL and points to a NUL-terminated character array. If a caller passes a non-NUL-terminated buffer (e.g. a pointer to a length-delimited header value that lacks a terminating '\\0') or NULL as the content for a \"Connection\" header, strchr will scan past the object bounds (or dereference NULL), causing an out-of-bounds access/undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/559.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "static size_t\nsafe_strnlen (const char *s, size_t max)\n{\n  size_t i = 0;\n  if (NULL == s)\n    return 0u;\n  while (i < max && s[i])\n    ++i;\n  return i;\n}\n\nstatic void\nprobe_log_state (const char *stage,\n                 const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection,\n                 struct MHD_Response *response,\n                 enum MHD_Result ret)\n{\n  FILE *f = fopen (\"/tmp/logs/559.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[not_found_page] stage=%s cls=%p session=%p connection=%p\\n\",\n           stage, cls, session, connection);\n\n  if (mime)\n    {\n      size_t len = safe_strnlen (mime, 256);\n      fprintf (f, \"[not_found_page] mime_len=%zu mime='\", len);\n      if (len > 0)\n        fwrite (mime, 1, len, f);\n      fprintf (f, \"'\\n\");\n    }\n  else\n    fprintf (f, \"[not_found_page] mime=NULL\\n\");\n\n  fprintf (f, \"[not_found_page] response=%p ret=%d\\n\", response, (int) ret);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* log entry state */\n  probe_log_state (\"entry\", cls, mime, session, connection, NULL, 0);\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n\n  /* log after create */\n  probe_log_state (\"after_create_response\", cls, mime, session, connection, response, 0);\n\n  if (NULL == response)\n    {\n      probe_log_state (\"response_null_return\", cls, mime, session, connection, response, (enum MHD_Result) MHD_NO);\n      return MHD_NO;\n    }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n\n  /* log after queue */\n  probe_log_state (\"after_queue_response\", cls, mime, session, connection, response, ret);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    /* log header failure */\n    probe_log_state (\"add_header_failed\", cls, mime, session, connection, response, ret);\n  }\n  else\n    {\n      /* log header success */\n      probe_log_state (\"add_header_succeeded\", cls, mime, session, connection, response, ret);\n    }\n\n  MHD_destroy_response (response);\n\n  /* final return state */\n  probe_log_state (\"exit\", cls, mime, session, connection, NULL, ret);\n  return ret;\n}\n"
}