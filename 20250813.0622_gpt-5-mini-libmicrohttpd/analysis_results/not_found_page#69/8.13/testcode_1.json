{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct Session *session' is declared as a pointer to a non-const type but is unused (and not modified or passed to APIs that require a non-const pointer). It could and should be declared 'const struct Session *session' so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/555.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "static void probe_write_line(const char *line)\n{\n  FILE *f = fopen(\"/tmp/logs/555.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s\\n\", line);\n    fclose(f);\n  }\n}\n\nstatic void probe_log_params(const void *cls,\n                             const char *mime,\n                             struct Session *session,\n                             struct MHD_Connection *connection)\n{\n  FILE *f = fopen(\"/tmp/logs/555.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f,\n            \"not_found_page: enter - cls=%p mime=%s session=%p connection=%p\\n\",\n            cls,\n            (mime != NULL) ? mime : \"(null)\",\n            (void *) session,\n            (void *) connection);\n    fclose(f);\n  }\n}\n\nstatic void probe_log_response_creation(struct MHD_Response *response)\n{\n  FILE *f = fopen(\"/tmp/logs/555.txt\", \"a\");\n  if (f)\n  {\n    if (NULL == response)\n      fprintf(f, \"not_found_page: response creation FAILED (NULL)\\n\");\n    else\n      fprintf(f, \"not_found_page: response created at %p\\n\", (void *) response);\n    fclose(f);\n  }\n}\n\nstatic void probe_log_queue_and_header(enum MHD_Result ret,\n                                       int header_ok)\n{\n  FILE *f = fopen(\"/tmp/logs/555.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"not_found_page: MHD_queue_response returned %d\\n\", (int) ret);\n    if (header_ok)\n      fprintf(f, \"not_found_page: header add succeeded\\n\");\n    else\n      fprintf(f, \"not_found_page: header add FAILED\\n\");\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n\n  /* Probe: log entry and parameters */\n  probe_log_params(cls, mime, session, connection);\n\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Capture pointer value to show session is not modified by this function */\n  {\n    FILE *f = fopen(\"/tmp/logs/555.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"not_found_page: session pointer observed (should remain unchanged) = %p\\n\", (void *) session);\n      fclose(f);\n    }\n  }\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n\n  /* Probe: log whether response creation succeeded */\n  probe_log_response_creation(response);\n\n  if (NULL == response)\n    return MHD_NO;\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n\n  /* Preserve original logic but capture header add result for logging */\n  {\n    int header_ok = (MHD_YES ==\n                     MHD_add_response_header (response,\n                                              MHD_HTTP_HEADER_CONTENT_ENCODING,\n                                              mime));\n    if (!header_ok)\n    {\n      fprintf (stderr,\n               \"Failed to set content encoding header!\\n\");\n    }\n\n    /* Probe: log queue/header outcomes */\n    probe_log_queue_and_header(ret, header_ok);\n  }\n\n  MHD_destroy_response (response);\n\n  /* Probe: final state before return */\n  {\n    FILE *f = fopen(\"/tmp/logs/555.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"not_found_page: exit - returning %d; session still = %p\\n\", (int) ret, (void *) session);\n      fclose(f);\n    }\n  }\n\n  return ret;\n}\n"
}