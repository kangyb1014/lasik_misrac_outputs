{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement mhd_assert(NULL != hdr); is a pure assertion with no side-effects. If mhd_assert is defined as a no-op in production builds (for example via NDEBUG or as #define mhd_assert(x) ((void)0)), the call compiles away and therefore is dead code \u2014 removing it would not change program behaviour. (If, conversely, mhd_assert has observable side-effects such as logging or aborting, then this instance would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/554.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helpers. These functions log control flow and key state\n   information to /tmp/logs/554.txt so that other agents can reproduce\n   and gather evidence about behaviours (for example, whether an\n   assertion would be compiled out in production). */\nstatic void\nprobe_logf (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/554.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void\nprobe_log_ptrs (const void *cls, const char *mime, const void *session, const void *connection)\n{\n  probe_logf (\"not_found_page: entry: cls=%p mime=%p session=%p connection=%p\", cls, (const void *)mime, session, connection);\n  if (mime)\n    probe_logf (\"not_found_page: mime points to string of length=%zu content=\\\"%s\\\"\", strlen (mime), mime);\n  else\n    probe_logf (\"not_found_page: mime is NULL\");\n}\n\nstatic void\nprobe_log_response_creation (const void *response, size_t body_len)\n{\n  probe_logf (\"not_found_page: created response=%p body_len=%zu\", response, body_len);\n}\n\nstatic void\nprobe_log_queue_result (int ret)\n{\n  probe_logf (\"not_found_page: MHD_queue_response returned=%d\", ret);\n}\n\nstatic void\nprobe_log_add_header_result (int add_ret, const char *header_name, const char *mime)\n{\n  probe_logf (\"not_found_page: MHD_add_response_header('%s','%s') returned=%d\", header_name ? header_name : \"(null)\", mime ? mime : \"(null)\", add_ret);\n}\n\nstatic void\nprobe_log_destroy_response (const void *response)\n{\n  probe_logf (\"not_found_page: destroy response=%p\", response);\n}\n\n/* Original function with probes inserted. Logic preserved. */\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and inputs */\n  probe_log_ptrs (cls, mime, session, connection);\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  probe_log_response_creation (response, strlen (NOT_FOUND_ERROR));\n  if (NULL == response)\n  {\n    probe_logf (\"not_found_page: response == NULL -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  probe_log_queue_result (ret);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    /* Log the failed header addition for later analysis */\n    probe_log_add_header_result (MHD_NO, MHD_HTTP_HEADER_CONTENT_ENCODING, mime);\n\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  else\n  {\n    /* Log successful header addition */\n    probe_log_add_header_result (MHD_YES, MHD_HTTP_HEADER_CONTENT_ENCODING, mime);\n  }\n\n  MHD_destroy_response (response);\n  probe_log_destroy_response (response);\n  probe_logf (\"not_found_page: returning ret=%d\", ret);\n  return ret;\n}\n"
}