{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression-statement '(void) cls;' is a no-op: it evaluates the parameter and discards the result, producing no side effects. Removing this line does not change program behaviour, so it constitutes dead code (used only to silence an unused-parameter warning).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/554.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "static enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  FILE *log = fopen(\"/tmp/logs/554.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"ENTER not_found_page: mime=%s\\n\", mime ? mime : \"(null)\");\n    fprintf(log, \"About to execute '(void) cls;' to silence unused-parameter warning\\n\");\n  }\n\n  (void) cls;     /* Unused. Silent compiler warning. */\n  if (log) fprintf(log, \"Executed '(void) cls;'\\n\");\n  (void) session; /* Unused. Silent compiler warning. */\n  if (log) fprintf(log, \"Executed '(void) session;'\\n\");\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (log) {\n    fprintf(log, \"MHD_create_response_from_buffer_static returned %p\\n\", (void *) response);\n  }\n  if (NULL == response) {\n    if (log) { fprintf(log, \"response is NULL; returning MHD_NO\\n\"); fclose(log); }\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (log) fprintf(log, \"MHD_queue_response returned %d\\n\", (int) ret);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    if (log) fprintf(log, \"MHD_add_response_header failed\\n\");\n  } else {\n    if (log) fprintf(log, \"MHD_add_response_header succeeded\\n\");\n  }\n  MHD_destroy_response (response);\n  if (log) { fprintf(log, \"Destroy response done, returning ret=%d\\n\", (int) ret); fclose(log); }\n  return ret;\n}\n"
}