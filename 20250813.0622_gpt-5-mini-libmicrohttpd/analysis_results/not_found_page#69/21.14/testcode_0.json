{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp(hdr->value, \"close\", 5) to test equality against the string literal \"close\" where hdr->value is a null-terminated header value (buf[pos] = 0). Using memcmp to compare a null-terminated string against a string literal violates MISRA C 2023 Rule 21.14; a string comparison function such as strcmp/strncmp should be used instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/558.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "static void\nprobe_not_found(const char *phase,\n                const char *mime,\n                const void *connection,\n                const struct MHD_Response *response,\n                enum MHD_Result ret)\n{\n  FILE *f = fopen(\"/tmp/logs/558.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n\n  /* Log the probe entry with important state for reproducing control flow. */\n  fprintf(f, \"[not_found_page] phase=%s\\n\", phase);\n  fprintf(f, \"  mime pointer = %p\\n\", (const void *) mime);\n  fprintf(f, \"  mime string  = %s\\n\", (mime != NULL) ? mime : \"(null)\");\n  fprintf(f, \"  connection   = %p\\n\", connection);\n  fprintf(f, \"  response ptr = %p\\n\", (const void *) response);\n  fprintf(f, \"  ret value    = %d\\n\", (int) ret);\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Probe: function entry */\n  probe_not_found(\"entry\", mime, connection, NULL, 0);\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n\n  /* Probe: after create response */\n  probe_not_found(\"after_create_response\", mime, connection, response, 0);\n\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n\n  /* Probe: after queue response */\n  probe_not_found(\"after_queue_response\", mime, connection, response, ret);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    /* Probe: header add failed */\n    probe_not_found(\"header_add_failed\", mime, connection, response, ret);\n  }\n  else\n  {\n    /* Probe: header add succeeded */\n    probe_not_found(\"header_add_succeeded\", mime, connection, response, ret);\n  }\n  MHD_destroy_response (response);\n\n  /* Probe: function exit */\n  probe_not_found(\"exit\", mime, connection, NULL, ret);\n\n  return ret;\n}\n"
}