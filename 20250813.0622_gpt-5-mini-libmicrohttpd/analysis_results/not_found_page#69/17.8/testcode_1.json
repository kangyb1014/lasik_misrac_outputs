{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_queue_response(unsigned int status_code, ...), the statement 'status_code &= ~MHD_ICY_FLAG;' writes to the parameter 'status_code' (an incoming value parameter). This directly modifies a function parameter, violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/557.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: append logs to /tmp/logs/557.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/557.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* If logging fails, don't disturb original logic. */\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and parameters */\n  probe_log(\"ENTER not_found_page: cls=%p, mime=%p, session=%p, connection=%p\\n\",\n            cls, (const void *)mime, (void *)session, (void *)connection);\n\n  /* unsupported HTTP method */\n  probe_log(\"Calling MHD_create_response_from_buffer_static with NOT_FOUND_ERROR (addr=%p)\\n\",\n            (const void *)NOT_FOUND_ERROR);\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  probe_log(\"MHD_create_response_from_buffer_static returned response=%p\\n\",\n            (void *) response);\n\n  if (NULL == response)\n  {\n    probe_log(\"Response creation failed -> returning MHD_NO\\n\");\n    return MHD_NO;\n  }\n\n  /* Use a local status variable so we can log its address and value. */\n  unsigned int status = MHD_HTTP_NOT_FOUND;\n  probe_log(\"About to call MHD_queue_response: status addr=%p, status value=0x%08x, response=%p\\n\",\n            (void *)&status, (unsigned)status, (void *)response);\n\n  ret = MHD_queue_response (connection,\n                            status,\n                            response);\n\n  probe_log(\"Returned from MHD_queue_response: ret=%d, local status value=0x%08x\\n\",\n            (int) ret, (unsigned) status);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    probe_log(\"MHD_add_response_header failed for mime=%s\\n\",\n              (mime != NULL) ? mime : \"(null)\");\n  }\n  MHD_destroy_response (response);\n\n  probe_log(\"not_found_page returning ret=%d\\n\", (int) ret);\n  return ret;\n}\n"
}