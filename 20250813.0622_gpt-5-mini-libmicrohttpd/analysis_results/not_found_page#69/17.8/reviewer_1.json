{
  "user_message": "An agent A claimed that the following not_found_page code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of not_found_page.\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In MHD_queue_response(unsigned int status_code, ...), the statement 'status_code &= ~MHD_ICY_FLAG;' writes to the parameter 'status_code' (an incoming value parameter). This directly modifies a function parameter, violating MISRA C 2023 Rule 17.8.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/557.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* If logging fails, don't disturb original logic. */\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and parameters */\n  probe_log(\"ENTER not_found_page: cls=%p, mime=%p, session=%p, connection=%p\\n\",\n            cls, (const void *)mime, (void *)session, (void *)connection);\n\n  /* unsupported HTTP method */\n  probe_log(\"Calling MHD_create_response_from_buffer_static with NOT_FOUND_ERROR (addr=%p)\\n\",\n            (const void *)NOT_FOUND_ERROR);\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  probe_log(\"MHD_create_response_from_buffer_static returned response=%p\\n\",\n            (void *) response);\n\n  if (NULL == response)\n  {\n    probe_log(\"Response creation failed -> returning MHD_NO\\n\");\n    return MHD_NO;\n  }\n\n  /* Use a local status variable so we can log its address and value. */\n  unsigned int status = MHD_HTTP_NOT_FOUND;\n  probe_log(\"About to call MHD_queue_response: status addr=%p, status value=0x%08x, response=%p\\n\",\n            (void *)&status, (unsigned)status, (void *)response);\n\n  ret = MHD_queue_response (connection,\n                            status,\n                            response);\n\n  probe_log(\"Returned from MHD_queue_response: ret=%d, local status value=0x%08x\\n\",\n            (int) ret, (unsigned) status);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    probe_log(\"MHD_add_response_header failed for mime=%s\\n\",\n              (mime != NULL) ? mime : \"(null)\");\n  }\n  MHD_destroy_response (response);\n\n  probe_log(\"not_found_page returning ret=%d\\n\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for not_found_page. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The not_found_page function itself does not modify any of its formal parameters. It declares/uses a local variable 'status' and passes that by value to MHD_queue_response. Modifying a callee's formal parameter (inside MHD_queue_response) would be a violation of MISRA C 2023 Rule 17.8 in that callee's implementation, but it is not a violation of 17.8 in not_found_page. Therefore A's report that the provided not_found_page code violates Rule 17.8 is incorrect. (If the asserted statement 'status_code &= ~MHD_ICY_FLAG;' indeed exists inside MHD_queue_response, then that library function would itself contravene Rule 17.8, but that is separate from the not_found_page code under review.)"
}