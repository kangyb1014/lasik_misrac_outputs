{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe void* parameter 'data' is cast to 'struct MHD_named_helper_param_ *' even though the function only reads the structure members (param->name, param->arg, param->start_routine) and does not modify them. The pointer therefore could and should be to a const-qualified type (e.g. 'const struct MHD_named_helper_param_ *') to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_named_thread_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/251.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_named_thread_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_named_thread_:\n```c\nint\nMHD_create_named_thread_ (MHD_thread_handle_ID_ *handle_id,\n                          const char *thread_name,\n                          size_t stack_size,\n                          MHD_THREAD_START_ROUTINE_ start_routine,\n                          void *arg)\n{\n#if defined(MHD_USE_THREAD_ATTR_SETNAME)\n  int res;\n  pthread_attr_t attr;\n#if defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  pthread_t *const new_tid_ptr =\n    MHD_thread_handle_ID_get_native_handle_ptr_ (handle_id);\n#else  /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n  pthread_t new_tid;\n  pthread_t *const new_tid_ptr = &new_tid;\n#endif /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n\n  res = pthread_attr_init (&attr);\n  if (0 == res)\n  {\n#if defined(HAVE_PTHREAD_ATTR_SETNAME_NP_NETBSD)\n    /* NetBSD uses 3 arguments: second argument is string in printf-like format,\n     *                          third argument is single argument for printf;\n     * OSF1 uses 3 arguments too, but last one always must be zero (NULL).\n     * MHD doesn't use '%' in thread names, so both forms are used in same way.\n     */\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name,\n                                   0);\n#elif defined(HAVE_PTHREAD_ATTR_SETNAME_NP_IBMI)\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name);\n#else\n#error No pthread_attr_setname_np() function.\n#endif\n    if ((res == 0) && (0 != stack_size) )\n      res = pthread_attr_setstacksize (&attr,\n                                       stack_size);\n    if (0 == res)\n      res = pthread_create (new_tid_ptr,\n                            &attr,\n                            start_routine,\n                            arg);\n    pthread_attr_destroy (&attr);\n  }\n  if (0 != res)\n  {\n    errno = res;\n    MHD_thread_handle_ID_set_invalid_ (handle_id);\n  }\n#if ! defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  else\n    MHD_thread_handle_ID_set_native_handle_ (handle_id, new_tid);\n#endif /* ! MHD_thread_handle_ID_set_current_thread_ID_ */\n\n  return ! res;\n#else  /* ! MHD_USE_THREAD_ATTR_SETNAME */\n  struct MHD_named_helper_param_ *param;\n\n  if (NULL == thread_name)\n  {\n    errno = EINVAL;\n    return 0;\n  }\n\n  param = malloc (sizeof (struct MHD_named_helper_param_));\n  if (NULL == param)\n    return 0;\n\n  param->start_routine = start_routine;\n  param->arg = arg;\n  param->name = thread_name;\n\n  /* Set thread name in thread itself to avoid problems with\n   * threads which terminated before name is set in other thread.\n   */\n  if (! MHD_create_thread_ (handle_id,\n                            stack_size,\n                            &named_thread_starter,\n                            (void *) param))\n  {\n    int err_num;\n\n    err_num = errno;\n    free (param);\n    errno = err_num;\n    return 0;\n  }\n\n  return ! 0;\n#endif /* ! MHD_USE_THREAD_ATTR_SETNAME */\n}\n```\n</target_code>\nPlease provide the modified MHD_create_named_thread_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n\n/* Probe function to log the contents of the named helper param.\n * This takes a pointer-to-const to emphasize that the structure is only\n * being read for logging purposes (no modification performed).\n */\nstatic void\nMHD_log_named_param (const struct MHD_named_helper_param_ *p,\n                     const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/251.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[MHD_log_named_param] stage=%s param=%p\\n\",\n           (stage != NULL) ? stage : \"(null)\", (const void *) p);\n  if (p != NULL)\n  {\n    fprintf (f, \"  name pointer=%p, arg pointer=%p, start_routine pointer=%p\\n\",\n             (const void *) p->name,\n             (const void *) p->arg,\n             (const void *) p->start_routine);\n    if (p->name != NULL)\n      fprintf (f, \"  name string=\\\"%s\\\"\\n\", p->name);\n  }\n  fclose (f);\n}\n\nint\nMHD_create_named_thread_ (MHD_thread_handle_ID_ *handle_id,\n                          const char *thread_name,\n                          size_t stack_size,\n                          MHD_THREAD_START_ROUTINE_ start_routine,\n                          void *arg)\n{\n#if defined(MHD_USE_THREAD_ATTR_SETNAME)\n  int res;\n  pthread_attr_t attr;\n#if defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  pthread_t *const new_tid_ptr =\n    MHD_thread_handle_ID_get_native_handle_ptr_ (handle_id);\n#else  /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n  pthread_t new_tid;\n  pthread_t *const new_tid_ptr = &new_tid;\n#endif /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n\n  res = pthread_attr_init (&attr);\n  if (0 == res)\n  {\n#if defined(HAVE_PTHREAD_ATTR_SETNAME_NP_NETBSD)\n    /* NetBSD uses 3 arguments: second argument is string in printf-like format,\n     *                          third argument is single argument for printf;\n     * OSF1 uses 3 arguments too, but last one always must be zero (NULL).\n     * MHD doesn't use '%' in thread names, so both forms are used in same way.\n     */\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name,\n                                   0);\n#elif defined(HAVE_PTHREAD_ATTR_SETNAME_NP_IBMI)\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name);\n#else\n#error No pthread_attr_setname_np() function.\n#endif\n    if ((res == 0) && (0 != stack_size) )\n      res = pthread_attr_setstacksize (&attr,\n                                       stack_size);\n    if (0 == res)\n      res = pthread_create (new_tid_ptr,\n                            &attr,\n                            start_routine,\n                            arg);\n    pthread_attr_destroy (&attr);\n  }\n  if (0 != res)\n  {\n    errno = res;\n    MHD_thread_handle_ID_set_invalid_ (handle_id);\n  }\n#if ! defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  else\n    MHD_thread_handle_ID_set_native_handle_ (handle_id, new_tid);\n#endif /* ! MHD_thread_handle_ID_set_current_thread_ID_ */\n\n  return ! res;\n#else  /* ! MHD_USE_THREAD_ATTR_SETNAME */\n  struct MHD_named_helper_param_ *param;\n\n  if (NULL == thread_name)\n  {\n    /* Log invalid thread_name early */\n    FILE *f = fopen(\"/tmp/logs/251.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf (f, \"[MHD_create_named_thread_] thread_name is NULL -> EINVAL\\n\");\n      fclose (f);\n    }\n\n    errno = EINVAL;\n    return 0;\n  }\n\n  param = malloc (sizeof (struct MHD_named_helper_param_));\n  if (NULL == param)\n  {\n    FILE *f = fopen(\"/tmp/logs/251.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf (f, \"[MHD_create_named_thread_] malloc failed for param (size=%zu)\\n\", sizeof (struct MHD_named_helper_param_));\n      fclose (f);\n    }\n    return 0;\n  }\n\n  /* Populate the helper parameter structure as before. */\n  param->start_routine = start_routine;\n  param->arg = arg;\n  param->name = thread_name;\n\n  /* Log the initialized parameter contents. Use a const-qualified\n   * logging function to demonstrate that the structure is only read.\n   */\n  MHD_log_named_param (param, \"after_init\");\n\n  /* Set thread name in thread itself to avoid problems with\n   * threads which terminated before name is set in other thread.\n   */\n  {\n    /* Log that we are about to create the thread and pass (void *) param. */\n    FILE *f = fopen(\"/tmp/logs/251.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf (f, \"[MHD_create_named_thread_] calling MHD_create_thread_ with param=%p (as void*)\\n\", (void *) param);\n      fclose (f);\n    }\n  }\n\n  if (! MHD_create_thread_ (handle_id,\n                            stack_size,\n                            &named_thread_starter,\n                            (void *) param))\n  {\n    int err_num;\n\n    /* Log the failure before freeing param to capture state. */\n    FILE *f = fopen(\"/tmp/logs/251.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf (f, \"[MHD_create_named_thread_] MHD_create_thread_ failed, errno=%d\\n\", errno);\n      /* Also log param contents again to show what was passed. */\n      if (param != NULL)\n      {\n        fprintf (f, \"[MHD_create_named_thread_] freeing param=%p after failure\\n\", (void *) param);\n      }\n      fclose (f);\n    }\n\n    err_num = errno;\n    free (param);\n    errno = err_num;\n    return 0;\n  }\n\n  /* Successful creation: record that we passed the param to the new thread. */\n  {\n    FILE *f = fopen(\"/tmp/logs/251.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf (f, \"[MHD_create_named_thread_] thread creation succeeded, param=%p handed to thread starter\\n\", (void *) param);\n      fclose (f);\n    }\n  }\n\n  return ! 0;\n#endif /* ! MHD_USE_THREAD_ATTR_SETNAME */\n}\n"
}