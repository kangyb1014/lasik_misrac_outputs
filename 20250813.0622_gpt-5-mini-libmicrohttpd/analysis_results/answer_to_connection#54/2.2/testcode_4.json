{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) content_type;' is an executed no-op used solely to silence an unused-parameter warning. Its removal would not affect program behaviour, so it constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/434.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Helper probe function to log control flow and state to /tmp/logs/434.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/434.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  probe_log(\"ENTER answer_to_connection: cls=%p connection=%p url=%p method=%p version=%p upload_data=%p upload_data_size=%p req_cls=%p\",\n            cls, connection, (const void *)url, (const void *)method, (const void *)version,\n            (const void *)upload_data, (const void *)upload_data_size, (const void *)req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  probe_log(\"Executed no-op cast for parameter 'cls' (void) cls; value=%p\", cls);\n  (void) url;               /* Unused. Silent compiler warning. */\n  probe_log(\"Executed no-op cast for parameter 'url' (void) url; value=%p\", (const void *)url);\n  (void) version;           /* Unused. Silent compiler warning. */\n  probe_log(\"Executed no-op cast for parameter 'version' (void) version; value=%p\", (const void *)version);\n\n  /* Log current method string if available */\n  if (method != NULL)\n    probe_log(\"HTTP method at entry: '%s'\", method);\n  else\n    probe_log(\"HTTP method at entry: (null)\");\n\n  if (NULL == *req_cls)\n  {\n    probe_log(\"*req_cls is NULL: allocating connection_info_struct\");\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n    {\n      probe_log(\"malloc failed for connection_info_struct -> returning MHD_NO\");\n      return MHD_NO;\n    }\n    probe_log(\"Allocated con_info=%p\", con_info);\n\n    con_info->answerstring = NULL;\n    probe_log(\"Initialized con_info->answerstring = NULL\");\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      probe_log(\"Method is POST: creating post processor\");\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        probe_log(\"MHD_create_post_processor returned NULL -> freeing con_info and returning MHD_NO\");\n        free (con_info);\n        return MHD_NO;\n      }\n\n      probe_log(\"Post processor created: postprocessor=%p\", con_info->postprocessor);\n      con_info->connectiontype = POST;\n      probe_log(\"Set con_info->connectiontype = POST\");\n    }\n    else\n    {\n      con_info->connectiontype = GET;\n      probe_log(\"Set con_info->connectiontype = GET\");\n    }\n\n    *req_cls = (void *) con_info;\n    probe_log(\"Stored con_info in *req_cls -> req_cls=%p, *req_cls=%p\", (void *)req_cls, *req_cls);\n\n    probe_log(\"Returning MHD_YES after initial setup\");\n    return MHD_YES;\n  }\n\n  probe_log(\"*req_cls is not NULL: req_cls=%p *req_cls=%p\", (void *)req_cls, *req_cls);\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    probe_log(\"Handling GET: calling send_page with askpage\");\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n    probe_log(\"Handling POST: con_info=%p upload_data_size=%zu answerstring=%p\",\n              con_info, (upload_data_size != NULL) ? *upload_data_size : (size_t)0,\n              (const void *)con_info->answerstring);\n\n    if (*upload_data_size != 0)\n    {\n      probe_log(\"Received upload data of size %zu: calling MHD_post_process\", *upload_data_size);\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        probe_log(\"MHD_post_process returned failure -> returning MHD_NO\");\n        return MHD_NO;\n      }\n      *upload_data_size = 0;\n      probe_log(\"Processed upload data; set *upload_data_size to 0 -> returning MHD_YES\");\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      probe_log(\"No upload data remaining and con_info->answerstring is present -> sending answerstring\");\n      return send_page (connection, con_info->answerstring);\n    }\n    else\n    {\n      probe_log(\"POST with no upload data and no answerstring -> falling through to errorpage\");\n    }\n  }\n\n  probe_log(\"Falling back to send_page with errorpage\");\n  return send_page (connection, errorpage);\n}\n"
}