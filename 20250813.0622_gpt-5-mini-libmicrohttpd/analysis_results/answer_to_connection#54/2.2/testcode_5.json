{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression-statement \"(void) off;\" in iterate_post is an executed no-op whose removal would not affect program behaviour (it merely suppresses an \"unused parameter\" warning). According to Rule 2.2 any such operation executed but having no effect is dead code, so this line constitutes a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/434.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Helper probe function to append logs to /tmp/logs/434.txt */\nstatic void write_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/434.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t t = time(NULL);\n  if (t != (time_t)-1)\n  {\n    struct tm *tm = localtime(&t);\n    if (tm)\n    {\n      char timestr[64];\n      if (0 < strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm))\n        fprintf(f, \"[%s] \", timestr);\n    }\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log entry and basic parameters */\n  if (req_cls != NULL)\n    write_log(\"ENTRY: connection=%p method=%s url=%s version=%s req_cls_ptr=%p req_cls_val=%p upload_data_size=%zu\",\n              (void *) connection,\n              (method != NULL) ? method : \"(null)\",\n              (url != NULL) ? url : \"(null)\",\n              (version != NULL) ? version : \"(null)\",\n              (void *) req_cls,\n              (void *) *req_cls,\n              (upload_data_size != NULL) ? *upload_data_size : 0);\n  else\n    write_log(\"ENTRY: connection=%p method=%s url=%s version=%s req_cls=NULL\",\n              (void *) connection,\n              (method != NULL) ? method : \"(null)\",\n              (url != NULL) ? url : \"(null)\",\n              (version != NULL) ? version : \"(null)\");\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n    {\n      write_log(\"ALLOC FAIL: malloc returned NULL for connection_info_struct\");\n      return MHD_NO;\n    }\n    con_info->answerstring = NULL;\n\n    write_log(\"NEW REQ: allocated con_info=%p answerstring=%p\", (void *) con_info, (void *) con_info->answerstring);\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      write_log(\"POSTPROC CREATE: connection=%p con_info=%p postprocessor=%p\",\n                (void *) connection, (void *) con_info, (void *) con_info->postprocessor);\n\n      if (NULL == con_info->postprocessor)\n      {\n        write_log(\"POSTPROC FAIL: freeing con_info=%p and returning MHD_NO\", (void *) con_info);\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n      write_log(\"CONNECTION TYPE: con_info=%p set to POST\", (void *) con_info);\n    }\n    else\n    {\n      con_info->connectiontype = GET;\n      write_log(\"CONNECTION TYPE: con_info=%p set to GET\", (void *) con_info);\n    }\n\n    *req_cls = (void *) con_info;\n\n    write_log(\"REQ_CLS SET: req_cls_ptr=%p req_cls_val=%p returning MHD_YES\", (void *) req_cls, (void *) *req_cls);\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    write_log(\"HANDLING GET: connection=%p -> send_page(askpage)\", (void *) connection);\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    write_log(\"HANDLING POST: con_info=%p upload_data_size=%zu answerstring=%p\",\n              (void *) con_info,\n              (upload_data_size != NULL) ? *upload_data_size : 0,\n              (void *) con_info->answerstring);\n\n    if (*upload_data_size != 0)\n    {\n      write_log(\"POST DATA: invoking MHD_post_process with upload_data_size=%zu\",\n                (upload_data_size != NULL) ? *upload_data_size : 0);\n\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        write_log(\"POST PROCESS FAIL: con_info=%p postprocessor=%p returning MHD_NO\",\n                  (void *) con_info, (void *) con_info->postprocessor);\n        return MHD_NO;\n      }\n\n      *upload_data_size = 0;\n      write_log(\"POST PROCESSED: con_info=%p upload_data_size set to 0 returning MHD_YES\", (void *) con_info);\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      write_log(\"POST COMPLETED: con_info=%p answerstring=%p -> send_page(answerstring)\",\n                (void *) con_info, (void *) con_info->answerstring);\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  write_log(\"FALLTHROUGH: sending errorpage for connection=%p\", (void *) connection);\n  return send_page (connection, errorpage);\n}\n"
}