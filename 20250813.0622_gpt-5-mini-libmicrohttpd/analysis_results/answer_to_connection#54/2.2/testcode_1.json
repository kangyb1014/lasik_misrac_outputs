{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) filename;' is an expression statement with no side effects whose removal would not affect program behaviour (it only suppresses a compiler warning). As such it is an executed no-op and constitutes dead code under MISRA C 2023 Rule 2.2. (The same applies to the other '(void) ...;' unused-parameter casts in iterate_post.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/434.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "static void append_log(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/434.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n  }\n}\n\nstatic void log_params(const char *stage,\n                       struct MHD_Connection *connection,\n                       const char *url,\n                       const char *method,\n                       const char *version,\n                       const char *upload_data, size_t *upload_data_size,\n                       void **req_cls)\n{\n  FILE *f = fopen(\"/tmp/logs/434.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"STAGE=%s; conn=%p; url=%p; method=%s; version=%p; upload_data=%p; upload_data_size=%s; req_cls=%p; *req_cls=%p\\n\",\n            stage,\n            (void *) connection,\n            (void *) url,\n            (method != NULL) ? method : \"(null)\",\n            (void *) version,\n            (void *) upload_data,\n            (upload_data_size != NULL) ? \"present\" : \"(null)\",\n            (void *) req_cls,\n            (void *) ((req_cls != NULL) ? *req_cls : NULL));\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  /* Log entry and parameter snapshot before the (void) casts. */\n  log_params(\"entry_before_casts\", connection, url, method, version, upload_data, upload_data_size, req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  append_log(\"executed: (void) cls;\");\n  (void) url;               /* Unused. Silent compiler warning. */\n  append_log(\"executed: (void) url;\");\n  (void) version;           /* Unused. Silent compiler warning. */\n  append_log(\"executed: (void) version;\");\n\n  /* Log after the no-op casts so callers can see these statements were executed. */\n  log_params(\"after_casts\", connection, url, method, version, upload_data, upload_data_size, req_cls);\n\n  if (NULL == *req_cls)\n  {\n    append_log(\"branch: req_cls is NULL (initial request)\");\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n    {\n      append_log(\"malloc failed for con_info -> returning MHD_NO\");\n      return MHD_NO;\n    }\n    append_log(\"allocated con_info\");\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      append_log(\"method == POST: creating post processor\");\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        append_log(\"postprocessor creation failed -> freeing con_info and returning MHD_NO\");\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n      append_log(\"postprocessor created; connectiontype = POST\");\n    }\n    else\n    {\n      con_info->connectiontype = GET;\n      append_log(\"connectiontype = GET\");\n    }\n\n    *req_cls = (void *) con_info;\n    append_log(\"stored con_info in *req_cls and returning MHD_YES\");\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    append_log(\"handling GET: sending askpage\");\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    append_log(\"handling POST: entering POST branch\");\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      append_log(\"POST with upload data: calling MHD_post_process\");\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        append_log(\"MHD_post_process failed -> returning MHD_NO\");\n        return MHD_NO;\n      }\n      *upload_data_size = 0;\n\n      append_log(\"MHD_post_process succeeded; consumed upload data -> returning MHD_YES\");\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      append_log(\"POST completed and answerstring present: sending answerstring\");\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  append_log(\"fall-through: sending errorpage\");\n  return send_page (connection, errorpage);\n}\n"
}