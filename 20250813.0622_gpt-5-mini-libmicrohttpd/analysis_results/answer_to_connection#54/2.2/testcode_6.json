{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression statement '(void) cls;' inside answer_to_connection is a no-op used solely to suppress an \"unused parameter\" warning. It is executed but has no effect on program state or observable behaviour; removing it would not change the program. Therefore this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/434.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe helper: append formatted log messages to /tmp/logs/434.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/434.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  /* Log entry and initial parameter state */\n  probe_log(\"enter answer_to_connection: cls=%p connection=%p url=%p method=%p version=%p upload_data=%p upload_data_size=%p req_cls=%p *req_cls=%p\",\n            cls, connection, url, method, version, upload_data, (void *) upload_data_size, req_cls, (req_cls != NULL) ? *req_cls : NULL);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  probe_log(\"executed statement: (void) cls;\");\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  probe_log(\"executed statement: (void) url;\");\n\n  (void) version;           /* Unused. Silent compiler warning. */\n  probe_log(\"executed statement: (void) version;\");\n\n  if (NULL == *req_cls)\n  {\n    probe_log(\"branch: *req_cls == NULL => allocate connection_info_struct\");\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    probe_log(\"malloc returned con_info=%p\", con_info);\n    if (NULL == con_info)\n    {\n      probe_log(\"malloc failed: returning MHD_NO\");\n      return MHD_NO;\n    }\n    con_info->answerstring = NULL;\n    probe_log(\"initialized con_info->answerstring = NULL\");\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      probe_log(\"method == POST: creating post processor\");\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      probe_log(\"MHD_create_post_processor returned %p\", con_info->postprocessor);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        probe_log(\"postprocessor creation failed: freed con_info and returning MHD_NO\");\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n      probe_log(\"set con_info->connectiontype = POST\");\n    }\n    else\n    {\n      con_info->connectiontype = GET;\n      probe_log(\"set con_info->connectiontype = GET\");\n    }\n\n    *req_cls = (void *) con_info;\n    probe_log(\"stored *req_cls = %p\", *req_cls);\n\n    probe_log(\"returning MHD_YES (initial request handling)\");\n    return MHD_YES;\n  }\n\n  probe_log(\"continuing: *req_cls != NULL, method=%s\", method ? method : \"(null)\");\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    probe_log(\"method == GET: send_page(connection, askpage)\");\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n    probe_log(\"method == POST: con_info=%p upload_data_size=%p (value=%zu)\", con_info, (void *) upload_data_size, (upload_data_size != NULL) ? *upload_data_size : 0);\n\n    if (*upload_data_size != 0)\n    {\n      probe_log(\"upload_data_size != 0: calling MHD_post_process with size=%zu\", *upload_data_size);\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        probe_log(\"MHD_post_process failed: returning MHD_NO\");\n        return MHD_NO;\n      }\n      *upload_data_size = 0;\n\n      probe_log(\"processed upload data: set *upload_data_size = 0 and returning MHD_YES\");\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      probe_log(\"no upload_data remaining and con_info->answerstring != NULL: send_page with answerstring=%p\", con_info->answerstring);\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  probe_log(\"fall-through: returning send_page(connection, errorpage)\");\n  return send_page (connection, errorpage);\n}\n"
}