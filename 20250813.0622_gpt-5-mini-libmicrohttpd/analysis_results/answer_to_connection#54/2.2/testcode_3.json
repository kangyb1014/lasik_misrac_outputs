{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression-statement \"(void) url;\" is a no\u2011op used only to suppress an unused\u2011parameter warning. It performs no observable action and its removal would not affect program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/434.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Helper logging functions inserted to capture control flow and state. */\nstatic void log_message(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/434.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic void log_connection_state(const char *stage, const char *method,\n                                 void **req_cls, size_t *upload_data_size)\n{\n  size_t uds = (upload_data_size != NULL) ? *upload_data_size : (size_t)0u;\n  log_message(\"[434] %s: method=%s, req_cls=%p, *req_cls=%p, upload_data_size=%zu\",\n              stage,\n              (method != NULL) ? method : \"(null)\",\n              (void *) req_cls,\n              (void *) ((req_cls != NULL) ? *req_cls : NULL),\n              uds);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  /* Original no-op casts are preserved so static analysis can detect them. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log entry and note presence of the '(void) url;' no-op expression-statement. */\n  log_message(\"[434] answer_to_connection: entry; executed no-op casts: (void)cls, (void)url, (void)version\");\n  log_connection_state(\"entry\", method, req_cls, upload_data_size);\n\n  if (NULL == *req_cls)\n  {\n    log_message(\"[434] branch: NULL == *req_cls (new connection). Preparing connection_info_struct.\");\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n    {\n      log_message(\"[434] malloc failed for connection_info_struct; returning MHD_NO\");\n      return MHD_NO;\n    }\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      log_message(\"[434] detected POST on new connection; creating post processor\");\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        log_message(\"[434] MHD_create_post_processor returned NULL; cleaning up and returning MHD_NO\");\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n    {\n      log_message(\"[434] connection type is GET for new connection\");\n      con_info->connectiontype = GET;\n    }\n\n    *req_cls = (void *) con_info;\n\n    log_message(\"[434] new connection_info_struct assigned to *req_cls=%p; returning MHD_YES\", (void *) *req_cls);\n    return MHD_YES;\n  }\n\n  /* Existing connection: log state and branch decisions. */\n  log_message(\"[434] existing connection: evaluating method\");\n  log_connection_state(\"existing\", method, req_cls, upload_data_size);\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    log_message(\"[434] method == GET: sending askpage\");\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    log_message(\"[434] method == POST: upload_data_size=%zu\", (upload_data_size != NULL) ? *upload_data_size : (size_t)0u);\n\n    if (*upload_data_size != 0)\n    {\n      log_message(\"[434] POST: non-zero upload buffer; invoking MHD_post_process\");\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        log_message(\"[434] MHD_post_process failed; returning MHD_NO\");\n        return MHD_NO;\n      }\n      *upload_data_size = 0;\n\n      log_message(\"[434] POST: upload processed; returning MHD_YES to consume data chunk\");\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      log_message(\"[434] POST: upload complete and answerstring present; sending answerstring\");\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  log_message(\"[434] falling back to send errorpage\");\n  return send_page (connection, errorpage);\n}\n"
}