{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging helper. Keeps original logic intact and only records\n   control flow and state to /tmp/logs/707.txt for reproducing the\n   violation scenario. */\nstatic void\nlog_probe_state(struct MHD_Connection *connection,\n                struct MHD_Response *response,\n                const char *where)\n{\n  FILE *f = fopen(\"/tmp/logs/707.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"--- try_ready_normal_body probe: %s\\n\", where);\n  fprintf(f, \" connection=%p\\n\", (const void *) connection);\n  fprintf(f, \" response=%p\\n\", (const void *) response);\n  if (NULL != response)\n  {\n    fprintf(f, \"  total_size=%\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nFailed to parse the test code.\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of try_ready_normal_body as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Forward declarations so this file can compile without requiring the\n   full libmicrohttpd headers. The structures are intentionally left\n   incomplete because this probe only logs pointer values in this\n   test-friendly build. */\nstruct MHD_Connection;\nstruct MHD_Response;\n\n/* Probe logging helper. Keeps original logic intact and only records\n   control flow and state to /tmp/logs/707.txt for reproducing the\n   violation scenario. */\nstatic void\nlog_probe_state(struct MHD_Connection *connection,\n                struct MHD_Response *response,\n                const char *where)\n{\n  FILE *f = fopen(\"/tmp/logs/707.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"--- try_ready_normal_body probe: %s\\n\", where);\n  fprintf(f, \" connection=%p\\n\", (const void *) connection);\n  fprintf(f, \" response=%p\\n\", (const void *) response);\n  if (NULL != response)\n  {\n    /* The full MHD_Response definition is not available in this\n       compilation unit. In the original code this branch printed\n       response internals (like total size, offsets, etc.). To keep\n       behavior safe and compilable here we note presence of the\n       response but avoid dereferencing its fields. */\n    fprintf(f, \"  (response details omitted in this build)\\n\");\n  }\n\n  fclose(f);\n}\n",
  "explanation": "The original code was truncated at a fprintf call and referenced types from libmicrohttpd that weren't declared, causing a parse/compile failure. I: 1) Added forward declarations for struct MHD_Connection and struct MHD_Response so the function can compile without the full library headers. 2) Fixed the incomplete fprintf line and avoided dereferencing the incomplete response struct (printing a placeholder message instead). 3) Kept the file logging behavior and function signature intact. This preserves the probe's intent (logging control flow/state) while making the file compile successfully."
}