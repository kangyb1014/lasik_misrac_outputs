{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen crc() returns a negative value (ret < 0) the function assigns response->total_size = connection->rp.rsp_write_position and then immediately takes the connection-close/error branch. Both branches lead to closing the connection (MHD_connection_close_ or connection_close_error) which destroys the response, so the updated total_size is never observed afterwards. Thus the assignment is executed but its removal would not change program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_ready_normal_body code that contains useful probe functions that print useful logs to a file \"/tmp/logs/706.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of try_ready_normal_body as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of try_ready_normal_body:\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified try_ready_normal_body code.\n",
  "test_code": "static enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  /* Probe: log entry state */\n  {\n    FILE *f = fopen(\"/tmp/logs/706.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"ENTRY try_ready_normal_body: connection=%p response=%p\\n\",\n               (void *) connection, (void *) response);\n      fprintf (f, \"  response->total_size=%llu rsp_write_position=%llu\\n\",\n               (unsigned long long) response->total_size,\n               (unsigned long long) connection->rp.rsp_write_position);\n      fprintf (f, \"  response->data_iov=%p resp_iov.iov=%p\\n\",\n               (void *) response->data_iov, (void *) connection->rp.resp_iov.iov);\n      fprintf (f, \"  response->crc=%p resp_sender=%p data_start=%llu data_size=%zu data_buffer_size=%zu\\n\",\n               (void *) response->crc, (void *) connection->rp.resp_sender,\n               (unsigned long long) response->data_start,\n               response->data_size,\n               response->data_buffer_size);\n      fclose (f);\n    }\n  }\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  /* Probe: log arguments before crc() */\n  {\n    size_t probe_len = (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position);\n    FILE *f = fopen(\"/tmp/logs/706.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"BEFORE crc: crc_cls=%p rsp_write_position=%llu data=%p probe_len=%zu\\n\",\n               (void *) response->crc_cls,\n               (unsigned long long) connection->rp.rsp_write_position,\n               (void *) response->data,\n               probe_len);\n      fclose (f);\n    }\n  }\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n\n  /* Probe: log crc return */\n  {\n    FILE *f = fopen(\"/tmp/logs/706.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"AFTER crc: ret=%zd\\n\", (ssize_t) ret);\n      fclose (f);\n    }\n  }\n\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n\n    /* Probe: log old total size and rsp_write_position just before assignment */\n    {\n      FILE *f = fopen(\"/tmp/logs/706.txt\", \"a\");\n      if (f)\n      {\n        fprintf (f, \"BRANCH ret<0: old_total_size=%llu rsp_write_position=%llu\\n\",\n                 (unsigned long long) response->total_size,\n                 (unsigned long long) connection->rp.rsp_write_position);\n        fclose (f);\n      }\n    }\n\n    response->total_size = connection->rp.rsp_write_position;\n\n    /* Probe: log new total size after assignment */\n    {\n      FILE *f = fopen(\"/tmp/logs/706.txt\", \"a\");\n      if (f)\n      {\n        fprintf (f, \"AFTER assignment: new_total_size=%llu\\n\",\n                 (unsigned long long) response->total_size);\n        fclose (f);\n      }\n    }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n    {\n      /* Probe: log which close path is taken */\n      FILE *f = fopen(\"/tmp/logs/706.txt\", \"a\");\n      if (f)\n      {\n        fprintf (f, \"CALL: MHD_connection_close_ (MHD_REQUEST_TERMINATED_COMPLETED_OK)\\n\");\n        fclose (f);\n      }\n\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    }\n    else\n    {\n      /* Probe: log which close path is taken */\n      FILE *f = fopen(\"/tmp/logs/706.txt\", \"a\");\n      if (f)\n      {\n        fprintf (f, \"CALL: CONNECTION_CLOSE_ERROR (application reported error generating data)\\n\");\n        fclose (f);\n      }\n\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    }\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n\n  /* Probe: normal successful path */\n  {\n    FILE *f = fopen(\"/tmp/logs/706.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"RETURN YES: data_start=%llu data_size=%zu\\n\",\n               (unsigned long long) response->data_start,\n               response->data_size);\n      fclose (f);\n    }\n  }\n\n  return MHD_YES;\n}\n"
}