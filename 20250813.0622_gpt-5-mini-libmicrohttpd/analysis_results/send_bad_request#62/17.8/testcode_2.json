{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_queue_response(unsigned int status_code, ...), the parameter status_code is modified in-place via the statements:\nreply_icy = (0 != (status_code & MHD_ICY_FLAG));\nstatus_code &= ~MHD_ICY_FLAG;\nThis alters the function parameter variable (clearing the MHD_ICY_FLAG) rather than operating on a local copy, which violates MISRA C 2023 Rule 17.8. A local variable should be used if the value needs to be changed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified send_bad_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/501.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of send_bad_request as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of send_bad_request:\n```c\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified send_bad_request code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: write structured logs to /tmp/logs/501.txt */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/501.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n/* Wrapper around MHD_queue_response that logs the status_code and control flow.\n   This preserves the original behavior by forwarding to the real function but\n   records entry/exit state so other agents can reproduce and investigate any\n   parameter-modification issue inside MHD_queue_response. */\nstatic enum MHD_Result\nprobe_MHD_queue_response (struct MHD_Connection *con,\n                          unsigned int status_code,\n                          struct MHD_Response *res)\n{\n  enum MHD_Result ret;\n\n  /* Log the call site and the exact status code value passed. */\n  probe_log (\"probe: entering MHD_queue_response - status_code=0x%08X\", status_code);\n\n  /* Keep a local copy for additional state inspection (do not modify the\n     incoming parameter itself to avoid introducing new violations). */\n  unsigned int status_code_copy = status_code;\n  probe_log (\"probe: local copy before call - status_code_copy=0x%08X, &status_code_copy=%p\",\n             status_code_copy, (void *)&status_code_copy);\n\n  /* Call the real function (preserves original semantics). */\n  ret = MHD_queue_response (con, status_code, res);\n\n  /* Log after the call. Note: if MHD_queue_response internally modifies its\n     parameter variable, that modification is internal to that function and\n     will not be visible here. These logs provide evidence of what was\n     supplied to the function and the control flow around the call. */\n  probe_log (\"probe: returned from MHD_queue_response - ret=%d\", (int) ret);\n  probe_log (\"probe: local copy after call - status_code_copy=0x%08X, &status_code_copy=%p\",\n             status_code_copy, (void *)&status_code_copy);\n\n  return ret;\n}\n\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  /* Log entry into send_bad_request and intent to create response. */\n  probe_log (\"probe: enter send_bad_request\");\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n\n  /* Log the status code that will be passed to the queue function. */\n  probe_log (\"probe: about to queue response - status=MHD_HTTP_BAD_REQUEST (0x%08X)\",\n             (unsigned int) MHD_HTTP_BAD_REQUEST);\n\n  /* Use the probe wrapper to log call/return around MHD_queue_response. */\n  ret = probe_MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n\n  MHD_destroy_response (res);\n\n  probe_log (\"probe: exit send_bad_request - returning ret=%d\", (int) ret);\n  return ret;\n}\n"
}