{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) cls;' is an expression statement with no side effects whose removal would not affect program behaviour (it only suppresses an unused-parameter warning). Therefore it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/218.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_form:\n```c\nstatic enum MHD_Result\nfill_v1_form (const void *cls,\n              const char *mime,\n              struct Session *session,\n              struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1, session->value_1);\n  if (0 > reply_len)\n    return MHD_NO; /* Internal error */\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n    return MHD_NO; /* Out-of-memory error */\n\n  if (reply_len != snprintf (reply,\n                             (size_t) (((size_t) reply_len) + 1),\n                             FORM_V1,\n                             session->value_1))\n  {\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL != response)\n  {\n    add_session_cookie (session, response);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    free (reply);\n    ret = MHD_NO;\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_form code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helpers: append simple logs to /tmp/logs/218.txt */\nstatic void\nappend_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/218.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc ('\\n', f);\n  fclose (f);\n}\n\nstatic void\nlog_fill_v1_state (const char *stage,\n                    const void *cls,\n                    const char *mime,\n                    struct Session *session,\n                    struct MHD_Connection *connection,\n                    int reply_len,\n                    const char *reply,\n                    int ret)\n{\n  const char *sess_val = \"(null)\";\n  if (session != NULL && session->value_1 != NULL)\n    sess_val = session->value_1;\n\n  append_log (\"[fill_v1_form] %s: cls=%p mime=%p (%s) session=%p value_1=%s connection=%p reply_len=%d reply=%p ret=%d\",\n              stage,\n              cls,\n              (const void *) mime,\n              (mime != NULL) ? mime : \"(null)\",\n              (void *) session,\n              sess_val,\n              (void *) connection,\n              reply_len,\n              (const void *) reply,\n              ret);\n}\n\nstatic enum MHD_Result\nfill_v1_form (const void *cls,\n              const char *mime,\n              struct Session *session,\n              struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Log function entry and the fact that the (void) cls; statement executed. */\n  log_fill_v1_state (\"enter_after_unused_stmt\", cls, mime, session, connection, -1, NULL, -1);\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1, session->value_1);\n  log_fill_v1_state (\"after_snprintf_len\", cls, mime, session, connection, reply_len, NULL, -1);\n  if (0 > reply_len)\n  {\n    log_fill_v1_state (\"error_snprintf_len_negative\", cls, mime, session, connection, reply_len, NULL, (int) MHD_NO);\n    return MHD_NO; /* Internal error */\n  }\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  log_fill_v1_state (\"after_malloc\", cls, mime, session, connection, reply_len, reply, -1);\n  if (NULL == reply)\n  {\n    log_fill_v1_state (\"error_out_of_memory\", cls, mime, session, connection, reply_len, NULL, (int) MHD_NO);\n    return MHD_NO; /* Out-of-memory error */\n  }\n\n  if (reply_len != snprintf (reply,\n                             (size_t) (((size_t) reply_len) + 1),\n                             FORM_V1,\n                             session->value_1))\n  {\n    log_fill_v1_state (\"error_printf_mismatch\", cls, mime, session, connection, reply_len, reply, (int) MHD_NO);\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  log_fill_v1_state (\"after_create_response\", cls, mime, session, connection, reply_len, reply, -1);\n  if (NULL != response)\n  {\n    add_session_cookie (session, response);\n    log_fill_v1_state (\"after_add_session_cookie\", cls, mime, session, connection, reply_len, reply, -1);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n      append_log (\"[fill_v1_form] warning: failed to set content-type header\");\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    log_fill_v1_state (\"after_queue_response\", cls, mime, session, connection, reply_len, reply, (int) ret);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    free (reply);\n    ret = MHD_NO;\n    log_fill_v1_state (\"error_create_response_null\", cls, mime, session, connection, reply_len, NULL, (int) ret);\n  }\n  log_fill_v1_state (\"exit\", cls, mime, session, connection, reply_len, NULL, (int) ret);\n  return ret;\n}\n"
}