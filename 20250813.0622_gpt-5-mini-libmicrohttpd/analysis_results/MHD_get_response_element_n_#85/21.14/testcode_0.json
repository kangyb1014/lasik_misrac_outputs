{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp to compare a header value against the string literal \"close\": (0 == memcmp(hdr->value, \"close\", 5)). hdr->value is a null-terminated header string and \"close\" is a null-terminated string literal; using memcmp for string comparison (even with length 5) violates MISRA C 2023 Rule 21.14 which forbids using memcmp to compare null-terminated strings.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/686.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_element_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <ctype.h>\n\n/* Helper to safely print up to 'n' bytes of a possibly non-null-terminated\n * string into the log file. Limits output to avoid excessive logs. */\nstatic void mhd_log_print_bytes(FILE *f, const char *label, const char *s, size_t n)\n{\n  size_t i;\n  size_t cap = (n > 256U) ? 256U : n; /* limit bytes printed */\n  fprintf(f, \"%s (len=%zu): '\", label, n);\n  for (i = 0U; i < cap; ++i)\n  {\n    unsigned char c = (unsigned char)s[i];\n    if (isprint(c))\n      fputc(c, f);\n    else\n      fprintf(f, \"\\\\x%02x\", c);\n  }\n  if (n > cap)\n    fprintf(f, \"... (truncated)\");\n  fprintf(f, \"'\\n\");\n}\n\nstatic void mhd_log_iteration(const char *stage,\n                              const struct MHD_Response *response,\n                              const struct MHD_HTTP_Res_Header *pos,\n                              enum MHD_ValueKind kind,\n                              const char *key,\n                              size_t key_len,\n                              int header_size_equal,\n                              int kind_equal,\n                              int name_equal,\n                              int iter)\n{\n  FILE *f = fopen(\"/tmp/logs/686.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"-- MHD_get_response_element_n_ %s (iter=%d) --\\n\", stage, iter);\n  fprintf(f, \" response=%p\\n\", (const void *)response);\n  fprintf(f, \" pos=%p\\n\", (const void *)pos);\n  fprintf(f, \" kind=%d key_len=%zu\\n\", (int)kind, key_len);\n\n  if (key != NULL)\n    mhd_log_print_bytes(f, \" key\", key, key_len);\n  else\n    fprintf(f, \" key=(null)\\n\");\n\n  if (pos != NULL)\n  {\n    fprintf(f, \" pos->header_size=%zu pos->kind=%d pos->next=%p\\n\",\n            pos->header_size, (int)pos->kind, (const void *)pos->next);\n    if (pos->header != NULL)\n      mhd_log_print_bytes(f, \" pos->header\", pos->header, pos->header_size);\n    else\n      fprintf(f, \" pos->header=(null)\\n\");\n  }\n\n  fprintf(f, \" checks: header_size_equal=%d kind_equal=%d name_equal=%d\\n\",\n          header_size_equal, kind_equal, name_equal);\n  fprintf(f, \"-- end --\\n\\n\");\n  fclose(f);\n}\n\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  int iter = 0;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  /* Log entry to the function */\n  {\n    FILE *f = fopen(\"/tmp/logs/686.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"ENTER MHD_get_response_element_n_: response=%p kind=%d key_len=%zu key_ptr=%p\\n\",\n              (const void *)response, (int)kind, key_len, (const void *)key);\n      if (key)\n        mhd_log_print_bytes(f, \" key\", key, key_len);\n      fclose(f);\n    }\n  }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Preserve original short-circuiting semantics: only call the\n     * string-comparison helper when the first two checks succeed. */\n    int header_size_equal = (pos->header_size == key_len);\n    int kind_equal = (kind == pos->kind);\n    int name_equal = 0; /* only set if we actually compare */\n\n    if (header_size_equal && kind_equal)\n    {\n      /* Perform the actual comparison (this is part of original logic)\n       * and capture its result for logging. */\n      name_equal = MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size);\n\n      mhd_log_iteration(\"after-compare\", response, pos, kind, key, key_len,\n                        header_size_equal, kind_equal, name_equal, iter);\n\n      if (name_equal)\n        return pos;\n    }\n    else\n    {\n      /* Log the failed checks for this iteration. */\n      mhd_log_iteration(\"checks-failed\", response, pos, kind, key, key_len,\n                        header_size_equal, kind_equal, name_equal, iter);\n    }\n\n    ++iter;\n  }\n\n  /* Log that nothing matched */\n  {\n    FILE *f = fopen(\"/tmp/logs/686.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"EXIT MHD_get_response_element_n_: no match found (response=%p)\\n\\n\",\n              (const void *)response);\n      fclose(f);\n    }\n  }\n\n  return NULL;\n}\n"
}