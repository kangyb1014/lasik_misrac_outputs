{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_get_response_element_n_:\nbool\nMHD_str_equal_caseless_bin_n_ (const char *const str1,\n                               const char *const str2,\n                               size_t len)\n{\n  size_t i;\n\n  for (i = 0; i < len; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No language/compiler extensions are used in the provided code fragments. The items below justify why other parts need not be investigated for MISRA C 2023 Rule 1.2 (language extensions):\n\n- Function signatures and return types (struct pointer, enum parameter, size_t, const qualifiers, bool): all are standard C (C99 and later for bool/_Bool and stdint/size_t usage) and are not compiler-specific extensions.\n- For-loops and variable usage (pos, i): standard C syntax; no nested functions or block expressions are present.\n- Operators and expressions (comparisons, logical not as in `return ! 0;`): standard C operators, not extensions.\n- Function calls (MHD_str_equal_caseless_bin_n_, mhd_assert, charsequalcaseless): these are ordinary identifiers. Their declarations/definitions provided do not use compiler-specific extensions. The macros mhd_assert and charsequalcaseless are not expanded here; there is no evidence in the shown code that they rely on compiler-specific extensions (attributes, asm, statement expressions, typeof, nested functions, or other documented compiler extensions).\n- Return of NULL and integer constants: standard C.\n\nGiven the absence of tokens or constructs that are documented compiler extensions (for example: GCC/Clang __attribute__, __asm__, typeof, statement-expression ({ ... }), nested functions, __extension__, __builtin_*, or other vendor-specific keywords), there are no fragments to report for further investigation under MISRA C 2023 Rule 1.2."
}