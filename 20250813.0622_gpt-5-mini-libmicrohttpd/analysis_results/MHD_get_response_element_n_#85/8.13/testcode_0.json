{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member pos->header appears to be a non-const pointer (e.g. declared as \"char *header\" in struct MHD_HTTP_Res_Header) but is only used for read-only operations (case-insensitive comparisons) in the call MHD_str_equal_caseless_bin_n_(pos->header, key, pos->header_size). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified (\"const char *header\") whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_element_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Helper: append a formatted log message to /tmp/logs/683.txt */\nstatic void mhd_log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/683.txt\", \"a\");\n    if (NULL == f)\n    {\n        return; /* best-effort logging */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Helper: safely log up to a few bytes of a buffer in hex (non-destructive) */\nstatic void mhd_log_buf_hex(const char *label, const char *buf, size_t len)\n{\n    size_t to_print = len;\n    if (to_print > 32U)\n    {\n        to_print = 32U;\n    }\n\n    if (buf == NULL)\n    {\n        mhd_log_append(\"%s: (NULL), len=%zu\", label, len);\n        return;\n    }\n\n    /* Print pointer, length and first bytes as hex */\n    mhd_log_append(\"%s: ptr=%p, len=%zu, first-%zu-bytes=\", label, (const void *)buf, len, to_print);\n\n    FILE *f = fopen(\"/tmp/logs/683.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    size_t i;\n    for (i = 0U; i < to_print; ++i)\n    {\n        fprintf(f, \"%02x\", (unsigned char)buf[i]);\n        if (i + 1U < to_print)\n            fprintf(f, \" \");\n    }\n    if (len > to_print)\n    {\n        fprintf(f, \" ...\");\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function with added logging probes. */\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  mhd_log_append(\"MHD_get_response_element_n_: entry: response=%p, key=%p, key_len=%zu, kind=%d\",\n                 (const void *)response, (const void *)key, key_len, (int)kind);\n  mhd_log_buf_hex(\"search_key\", key, key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log current candidate header meta */\n    mhd_log_append(\"iter: pos=%p, header_ptr=%p, header_size=%zu, pos->kind=%d\",\n                   (const void *)pos, (const void *)pos->header,\n                   (size_t)pos->header_size, (int)pos->kind);\n    mhd_log_buf_hex(\"candidate_header\", pos->header, (size_t)pos->header_size);\n\n    if (pos->header_size == key_len)\n    {\n      mhd_log_append(\"iter: header_size matches (=%zu)\", pos->header_size);\n\n      if (kind == pos->kind)\n      {\n        mhd_log_append(\"iter: kind matches (=%d)\", (int)kind);\n\n        /* Call the comparison once and log its result. This preserves the\n           original semantics (call occurs only after prior checks). */\n        int eq = MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size);\n        mhd_log_append(\"iter: MHD_str_equal_caseless_bin_n_ returned %d for pos->header=%p and key=%p (len=%zu)\",\n                       eq, (const void *)pos->header, (const void *)key, pos->header_size);\n\n        if (eq)\n        {\n          mhd_log_append(\"MHD_get_response_element_n_: returning pos=%p (match)\", (const void *)pos);\n          return pos;\n        }\n        else\n        {\n          mhd_log_append(\"iter: comparison failed, continue\");\n        }\n      }\n      else\n      {\n        mhd_log_append(\"iter: kind mismatch (pos->kind=%d, wanted=%d)\", (int)pos->kind, (int)kind);\n      }\n    }\n    else\n    {\n      mhd_log_append(\"iter: header_size mismatch (pos=%zu, wanted=%zu)\", pos->header_size, key_len);\n    }\n  }\n\n  mhd_log_append(\"MHD_get_response_element_n_: no match found, returning NULL\");\n  return NULL;\n}\n"
}