{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe typedef uses the Windows calling-convention macro 'WINAPI' (expands to a compiler-specific specifier such as __stdcall). Calling-convention keywords like __stdcall are non-standard compiler extensions (documented as such by MSVC and other compilers), so this use violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_sys_cpu_count_special_api_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/296.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_sys_cpu_count_special_api_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_sys_cpu_count_special_api_:\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_special_api_ (void)\n{\n  int ret = -1;\n#ifdef HAVE_PSTAT_GETDYNAMIC\n  if (0 >= ret)\n  {\n    /* HP-UX things */\n    struct pst_dynamic psd_data;\n    memset ((void *) &psd_data, 0, sizeof (psd_data));\n    if (1 == pstat_getdynamic (&psd_data, sizeof (psd_data), (size_t) 1, 0))\n    {\n      if (0 < psd_data.psd_proc_cnt)\n        ret = (int) psd_data.psd_proc_cnt;\n    }\n  }\n#endif /* HAVE_PSTAT_GETDYNAMIC */\n#ifdef HAVE_VXCPUENABLEDGET\n  if (0 >= ret)\n  {\n    /* VxWorks */\n    cpuset_t enb_set;\n    enb_set = vxCpuEnabledGet ();\n    /* Count set bits */\n    for (ret = 0; 0 != enb_set; enb_set &= enb_set - 1)\n      ++ret;\n  }\n#endif /* HAVE_VXCPUENABLEDGET */\n#if defined(_WIN32) && ! defined (__CYGWIN__)\n  if (0 >= ret)\n  {\n    /* Native W32 */\n    HMODULE k32hndl;\n    k32hndl = LoadLibraryA (\"kernel32.dll\");\n    if (NULL != k32hndl)\n    {\n      typedef DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);\n      GAPC_PTR ptrGetActiveProcessorCount;\n      /* Available on W7 or later */\n      ptrGetActiveProcessorCount =\n        (GAPC_PTR) (void *) GetProcAddress (k32hndl, \"GetActiveProcessorCount\");\n      if (NULL != ptrGetActiveProcessorCount)\n      {\n        DWORD res;\n        res = ptrGetActiveProcessorCount (ALL_PROCESSOR_GROUPS);\n        ret = (int) res;\n        if (res != (DWORD) ret)\n          ret = -1; /* Overflow */\n      }\n    }\n    if ((0 >= ret) && (NULL != k32hndl))\n    {\n      typedef void (WINAPI *GNSI_PTR)(SYSTEM_INFO *pSysInfo);\n      GNSI_PTR ptrGetNativeSystemInfo;\n      /* May give incorrect (low) result on versions from W7 to W11\n         when more then 64 CPUs are available */\n      ptrGetNativeSystemInfo =\n        (GNSI_PTR) (void *) GetProcAddress (k32hndl, \"GetNativeSystemInfo\");\n      if (NULL != ptrGetNativeSystemInfo)\n      {\n        SYSTEM_INFO sysInfo;\n\n        memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n        ptrGetNativeSystemInfo (&sysInfo);\n        ret = (int) sysInfo.dwNumberOfProcessors;\n        if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n          ret = -1; /* Overflow */\n      }\n    }\n    if (NULL != k32hndl)\n      FreeLibrary (k32hndl);\n  }\n  if (0 >= ret)\n  {\n    /* May give incorrect (low) result on versions from W7 to W11\n       when more then 64 CPUs are available */\n    SYSTEM_INFO sysInfo;\n    memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n    GetSystemInfo (&sysInfo);\n    ret = (int) sysInfo.dwNumberOfProcessors;\n    if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n      ret = -1; /* Overflow */\n  }\n#endif /* _WIN32 && ! __CYGWIN__ */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_sys_cpu_count_special_api_ code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nstatic void mhd_tool_probe_log_simple(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/296.txt\", \"a\");\n  if (f != NULL)\n  {\n    fputs(msg, f);\n    fputc('\\n', f);\n    fclose(f);\n  }\n}\n\nstatic void mhd_tool_probe_log_fmt(const char *prefix, const void *ptr, int value)\n{\n  char buf[256];\n  if (ptr != NULL)\n    snprintf(buf, sizeof(buf), \"%s ptr=%p value=%d\", prefix, ptr, value);\n  else\n    snprintf(buf, sizeof(buf), \"%s ptr=NULL value=%d\", prefix, value);\n  mhd_tool_probe_log_simple(buf);\n}\n\nstatic int\nmhd_tool_get_sys_cpu_count_special_api_ (void)\n{\n  int ret = -1;\n  /* Log entry and initial state */\n  mhd_tool_probe_log_fmt(\"ENTER mhd_tool_get_sys_cpu_count_special_api_\", (void *)0, ret);\n\n#ifdef HAVE_PSTAT_GETDYNAMIC\n  if (0 >= ret)\n  {\n    mhd_tool_probe_log_simple(\"Entering HAVE_PSTAT_GETDYNAMIC branch\");\n    /* HP-UX things */\n    struct pst_dynamic psd_data;\n    memset ((void *) &psd_data, 0, sizeof (psd_data));\n    if (1 == pstat_getdynamic (&psd_data, sizeof (psd_data), (size_t) 1, 0))\n    {\n      mhd_tool_probe_log_fmt(\"pstat_getdynamic returned proc_cnt\", (void *)0, (int) psd_data.psd_proc_cnt);\n      if (0 < psd_data.psd_proc_cnt)\n        ret = (int) psd_data.psd_proc_cnt;\n    }\n  }\n#endif /* HAVE_PSTAT_GETDYNAMIC */\n#ifdef HAVE_VXCPUENABLEDGET\n  if (0 >= ret)\n  {\n    mhd_tool_probe_log_simple(\"Entering HAVE_VXCPUENABLEDGET branch\");\n    /* VxWorks */\n    cpuset_t enb_set;\n    enb_set = vxCpuEnabledGet ();\n    mhd_tool_probe_log_fmt(\"vxCpuEnabledGet returned (low 32bits)\", (void *)0, (int) enb_set);\n    /* Count set bits */\n    for (ret = 0; 0 != enb_set; enb_set &= enb_set - 1)\n      ++ret;\n    mhd_tool_probe_log_fmt(\"Counted enabled CPUs\", (void *)0, ret);\n  }\n#endif /* HAVE_VXCPUENABLEDGET */\n#if defined(_WIN32) && ! defined (__CYGWIN__)\n  if (0 >= ret)\n  {\n    mhd_tool_probe_log_simple(\"Entering Windows native W32 branch\");\n    /* Native W32 */\n    HMODULE k32hndl;\n    k32hndl = LoadLibraryA (\"kernel32.dll\");\n    mhd_tool_probe_log_fmt(\"LoadLibraryA(kernel32.dll)\", (void *) k32hndl, 0);\n    if (NULL != k32hndl)\n    {\n      /* Note: The following typedefs use WINAPI. Their presence is the\n         language-extension-related usage under investigation. We log that\n         these typedefs are instantiated at runtime by logging immediately\n         after their declaration. */\n      typedef DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);\n      mhd_tool_probe_log_simple(\"Defined typedef GAPC_PTR (uses WINAPI)\");\n\n      GAPC_PTR ptrGetActiveProcessorCount;\n      /* Available on W7 or later */\n      ptrGetActiveProcessorCount =\n        (GAPC_PTR) (void *) GetProcAddress (k32hndl, \"GetActiveProcessorCount\");\n      mhd_tool_probe_log_fmt(\"GetProcAddress(GetActiveProcessorCount)\", (void *) ptrGetActiveProcessorCount, 0);\n      if (NULL != ptrGetActiveProcessorCount)\n      {\n        DWORD res;\n        res = ptrGetActiveProcessorCount (ALL_PROCESSOR_GROUPS);\n        mhd_tool_probe_log_fmt(\"GetActiveProcessorCount returned\", (void *)0, (int) res);\n        ret = (int) res;\n        if (res != (DWORD) ret)\n          ret = -1; /* Overflow */\n        mhd_tool_probe_log_fmt(\"After GetActiveProcessorCount, ret=\", (void *)0, ret);\n      }\n    }\n    if ((0 >= ret) && (NULL != k32hndl))\n    {\n      typedef void (WINAPI *GNSI_PTR)(SYSTEM_INFO *pSysInfo);\n      mhd_tool_probe_log_simple(\"Defined typedef GNSI_PTR (uses WINAPI)\");\n      GNSI_PTR ptrGetNativeSystemInfo;\n      /* May give incorrect (low) result on versions from W7 to W11\n         when more then 64 CPUs are available */\n      ptrGetNativeSystemInfo =\n        (GNSI_PTR) (void *) GetProcAddress (k32hndl, \"GetNativeSystemInfo\");\n      mhd_tool_probe_log_fmt(\"GetProcAddress(GetNativeSystemInfo)\", (void *) ptrGetNativeSystemInfo, 0);\n      if (NULL != ptrGetNativeSystemInfo)\n      {\n        SYSTEM_INFO sysInfo;\n\n        memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n        ptrGetNativeSystemInfo (&sysInfo);\n        mhd_tool_probe_log_fmt(\"GetNativeSystemInfo dwNumberOfProcessors\", (void *)0, (int) sysInfo.dwNumberOfProcessors);\n        ret = (int) sysInfo.dwNumberOfProcessors;\n        if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n          ret = -1; /* Overflow */\n        mhd_tool_probe_log_fmt(\"After GetNativeSystemInfo, ret=\", (void *)0, ret);\n      }\n    }\n    if (NULL != k32hndl)\n      FreeLibrary (k32hndl);\n  }\n  if (0 >= ret)\n  {\n    mhd_tool_probe_log_simple(\"Falling back to GetSystemInfo path\");\n    /* May give incorrect (low) result on versions from W7 to W11\n       when more then 64 CPUs are available */\n    SYSTEM_INFO sysInfo;\n    memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n    GetSystemInfo (&sysInfo);\n    mhd_tool_probe_log_fmt(\"GetSystemInfo dwNumberOfProcessors\", (void *)0, (int) sysInfo.dwNumberOfProcessors);\n    ret = (int) sysInfo.dwNumberOfProcessors;\n    if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n      ret = -1; /* Overflow */\n    mhd_tool_probe_log_fmt(\"After GetSystemInfo, ret=\", (void *)0, ret);\n  }\n#endif /* _WIN32 && ! __CYGWIN__ */\n  if (0 >= ret)\n  {\n    mhd_tool_probe_log_fmt(\"EXIT mhd_tool_get_sys_cpu_count_special_api_ returning\", (void *)0, -1);\n    return -1;\n  }\n  mhd_tool_probe_log_fmt(\"EXIT mhd_tool_get_sys_cpu_count_special_api_ returning\", (void *)0, ret);\n  return ret;\n}\n"
}