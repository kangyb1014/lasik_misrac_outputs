{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses the WINAPI macro in the typedef. On common Windows toolchains WINAPI expands to a compiler-specific calling-convention specifier (e.g. __stdcall in MSVC), which is a compiler language extension per Microsoft documentation. Using such a calling-convention attribute is a language extension and therefore violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_sys_cpu_count_special_api_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/296.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_sys_cpu_count_special_api_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_sys_cpu_count_special_api_:\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_special_api_ (void)\n{\n  int ret = -1;\n#ifdef HAVE_PSTAT_GETDYNAMIC\n  if (0 >= ret)\n  {\n    /* HP-UX things */\n    struct pst_dynamic psd_data;\n    memset ((void *) &psd_data, 0, sizeof (psd_data));\n    if (1 == pstat_getdynamic (&psd_data, sizeof (psd_data), (size_t) 1, 0))\n    {\n      if (0 < psd_data.psd_proc_cnt)\n        ret = (int) psd_data.psd_proc_cnt;\n    }\n  }\n#endif /* HAVE_PSTAT_GETDYNAMIC */\n#ifdef HAVE_VXCPUENABLEDGET\n  if (0 >= ret)\n  {\n    /* VxWorks */\n    cpuset_t enb_set;\n    enb_set = vxCpuEnabledGet ();\n    /* Count set bits */\n    for (ret = 0; 0 != enb_set; enb_set &= enb_set - 1)\n      ++ret;\n  }\n#endif /* HAVE_VXCPUENABLEDGET */\n#if defined(_WIN32) && ! defined (__CYGWIN__)\n  if (0 >= ret)\n  {\n    /* Native W32 */\n    HMODULE k32hndl;\n    k32hndl = LoadLibraryA (\"kernel32.dll\");\n    if (NULL != k32hndl)\n    {\n      typedef DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);\n      GAPC_PTR ptrGetActiveProcessorCount;\n      /* Available on W7 or later */\n      ptrGetActiveProcessorCount =\n        (GAPC_PTR) (void *) GetProcAddress (k32hndl, \"GetActiveProcessorCount\");\n      if (NULL != ptrGetActiveProcessorCount)\n      {\n        DWORD res;\n        res = ptrGetActiveProcessorCount (ALL_PROCESSOR_GROUPS);\n        ret = (int) res;\n        if (res != (DWORD) ret)\n          ret = -1; /* Overflow */\n      }\n    }\n    if ((0 >= ret) && (NULL != k32hndl))\n    {\n      typedef void (WINAPI *GNSI_PTR)(SYSTEM_INFO *pSysInfo);\n      GNSI_PTR ptrGetNativeSystemInfo;\n      /* May give incorrect (low) result on versions from W7 to W11\n         when more then 64 CPUs are available */\n      ptrGetNativeSystemInfo =\n        (GNSI_PTR) (void *) GetProcAddress (k32hndl, \"GetNativeSystemInfo\");\n      if (NULL != ptrGetNativeSystemInfo)\n      {\n        SYSTEM_INFO sysInfo;\n\n        memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n        ptrGetNativeSystemInfo (&sysInfo);\n        ret = (int) sysInfo.dwNumberOfProcessors;\n        if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n          ret = -1; /* Overflow */\n      }\n    }\n    if (NULL != k32hndl)\n      FreeLibrary (k32hndl);\n  }\n  if (0 >= ret)\n  {\n    /* May give incorrect (low) result on versions from W7 to W11\n       when more then 64 CPUs are available */\n    SYSTEM_INFO sysInfo;\n    memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n    GetSystemInfo (&sysInfo);\n    ret = (int) sysInfo.dwNumberOfProcessors;\n    if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n      ret = -1; /* Overflow */\n  }\n#endif /* _WIN32 && ! __CYGWIN__ */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_sys_cpu_count_special_api_ code.\n",
  "test_code": "static void mhd_logf(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/296.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic void mhd_log_msg(const char *msg)\n{\n  mhd_logf(\"%s\\n\", msg);\n}\n\nstatic int\nmhd_tool_get_sys_cpu_count_special_api_ (void)\n{\n  int ret = -1;\n  mhd_logf(\"ENTER: mhd_tool_get_sys_cpu_count_special_api_, initial ret=%d\\n\", ret);\n#ifdef HAVE_PSTAT_GETDYNAMIC\n  if (0 >= ret)\n  {\n    /* HP-UX things */\n    mhd_log_msg(\"HAVE_PSTAT_GETDYNAMIC: entering HP-UX branch\");\n    struct pst_dynamic psd_data;\n    memset ((void *) &psd_data, 0, sizeof (psd_data));\n    if (1 == pstat_getdynamic (&psd_data, sizeof (psd_data), (size_t) 1, 0))\n    {\n      mhd_logf(\"pstat_getdynamic succeeded, psd_proc_cnt=%ld\\n\", (long) psd_data.psd_proc_cnt);\n      if (0 < psd_data.psd_proc_cnt)\n        ret = (int) psd_data.psd_proc_cnt;\n      mhd_logf(\"HP-UX branch: ret=%d\\n\", ret);\n    }\n    else\n    {\n      mhd_log_msg(\"pstat_getdynamic did not return 1\");\n    }\n  }\n#endif /* HAVE_PSTAT_GETDYNAMIC */\n#ifdef HAVE_VXCPUENABLEDGET\n  if (0 >= ret)\n  {\n    /* VxWorks */\n    mhd_log_msg(\"HAVE_VXCPUENABLEDGET: entering VxWorks branch\");\n    cpuset_t enb_set;\n    enb_set = vxCpuEnabledGet ();\n    mhd_logf(\"vxCpuEnabledGet returned enb_set=0x%llx\\n\", (unsigned long long) enb_set);\n    /* Count set bits */\n    for (ret = 0; 0 != enb_set; enb_set &= enb_set - 1)\n      ++ret;\n    mhd_logf(\"VxWorks branch: counted CPUs ret=%d\\n\", ret);\n  }\n#endif /* HAVE_VXCPUENABLEDGET */\n#if defined(_WIN32) && ! defined (__CYGWIN__)\n  if (0 >= ret)\n  {\n    /* Native W32 */\n    mhd_log_msg(\"WINDOWS: entering native Win32 branch\");\n    HMODULE k32hndl;\n    k32hndl = LoadLibraryA (\"kernel32.dll\");\n    mhd_logf(\"LoadLibraryA(\\\"kernel32.dll\\\") returned %p\\n\", (void *) k32hndl);\n    if (NULL != k32hndl)\n    {\n      /* Note: the typedefs below use the WINAPI macro. Logging this literal text\n         provides evidence of the use of the calling-convention specifier. */\n      mhd_log_msg(\"About to use typedef: DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);\");\n      typedef DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);\n      GAPC_PTR ptrGetActiveProcessorCount;\n      /* Available on W7 or later */\n      ptrGetActiveProcessorCount =\n        (GAPC_PTR) (void *) GetProcAddress (k32hndl, \"GetActiveProcessorCount\");\n      mhd_logf(\"GetProcAddress(\\\"GetActiveProcessorCount\\\") returned %p\\n\",\n               (void *) ptrGetActiveProcessorCount);\n      if (NULL != ptrGetActiveProcessorCount)\n      {\n        DWORD res;\n        res = ptrGetActiveProcessorCount (ALL_PROCESSOR_GROUPS);\n        mhd_logf(\"ptrGetActiveProcessorCount returned %u\\n\", (unsigned) res);\n        ret = (int) res;\n        if (res != (DWORD) ret)\n        {\n          ret = -1; /* Overflow */\n          mhd_log_msg(\"Overflow detected after ptrGetActiveProcessorCount: setting ret=-1\");\n        }\n        else\n        {\n          mhd_logf(\"After ptrGetActiveProcessorCount: ret=%d\\n\", ret);\n        }\n      }\n    }\n    if ((0 >= ret) && (NULL != k32hndl))\n    {\n      /* May give incorrect (low) result on versions from W7 to W11\n         when more then 64 CPUs are available */\n      mhd_log_msg(\"GetActiveProcessorCount not used or failed; trying GetNativeSystemInfo\");\n      mhd_log_msg(\"About to use typedef: void (WINAPI *GNSI_PTR)(SYSTEM_INFO *pSysInfo);\");\n      typedef void (WINAPI *GNSI_PTR)(SYSTEM_INFO *pSysInfo);\n      GNSI_PTR ptrGetNativeSystemInfo;\n      ptrGetNativeSystemInfo =\n        (GNSI_PTR) (void *) GetProcAddress (k32hndl, \"GetNativeSystemInfo\");\n      mhd_logf(\"GetProcAddress(\\\"GetNativeSystemInfo\\\") returned %p\\n\",\n               (void *) ptrGetNativeSystemInfo);\n      if (NULL != ptrGetNativeSystemInfo)\n      {\n        SYSTEM_INFO sysInfo;\n\n        memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n        ptrGetNativeSystemInfo (&sysInfo);\n        mhd_logf(\"GetNativeSystemInfo: dwNumberOfProcessors=%u\\n\",\n                 (unsigned) sysInfo.dwNumberOfProcessors);\n        ret = (int) sysInfo.dwNumberOfProcessors;\n        if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n        {\n          ret = -1; /* Overflow */\n          mhd_log_msg(\"Overflow detected after GetNativeSystemInfo: setting ret=-1\");\n        }\n        else\n        {\n          mhd_logf(\"After GetNativeSystemInfo: ret=%d\\n\", ret);\n        }\n      }\n    }\n    if (NULL != k32hndl)\n    {\n      FreeLibrary (k32hndl);\n      mhd_log_msg(\"Freed kernel32.dll handle\");\n    }\n  }\n  if (0 >= ret)\n  {\n    /* May give incorrect (low) result on versions from W7 to W11\n       when more then 64 CPUs are available */\n    mhd_log_msg(\"Falling back to GetSystemInfo\");\n    SYSTEM_INFO sysInfo;\n    memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n    GetSystemInfo (&sysInfo);\n    mhd_logf(\"GetSystemInfo: dwNumberOfProcessors=%u\\n\", (unsigned) sysInfo.dwNumberOfProcessors);\n    ret = (int) sysInfo.dwNumberOfProcessors;\n    if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n    {\n      ret = -1; /* Overflow */\n      mhd_log_msg(\"Overflow detected after GetSystemInfo: setting ret=-1\");\n    }\n    else\n    {\n      mhd_logf(\"After GetSystemInfo: ret=%d\\n\", ret);\n    }\n  }\n#endif /* _WIN32 && ! __CYGWIN__ */\n  if (0 >= ret)\n  {\n    mhd_logf(\"EXIT: returning -1 (ret=%d)\\n\", ret);\n    return -1;\n  }\n  mhd_logf(\"EXIT: returning ret=%d\\n\", ret);\n  return ret;\n}\n"
}