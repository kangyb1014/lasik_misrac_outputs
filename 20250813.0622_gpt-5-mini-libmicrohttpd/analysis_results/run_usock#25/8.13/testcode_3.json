{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'urh' is declared as a non-const pointer: 'struct MHD_UpgradeResponseHandle *urh = ws->urh;' and is then passed to MHD_upgrade_action. If MHD_upgrade_action does not modify the pointed-to object (i.e. its parameter could be declared as 'const struct MHD_UpgradeResponseHandle *'), then 'urh' should be declared const and the current code violates MISRA C 2023 Rule 8.13. If the API requires modification of the handle (the function prototype requires a non-const pointer), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified run_usock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of run_usock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of run_usock:\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n    if (0 >= got)\n    {\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n    if (NULL == msg)\n    {\n      break;\n    }\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock, msg);\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock, msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n          free (text);\n        }\n        else\n          sent = -1;\n      }\n      else\n        sent = -1;\n      free (msg);\n      if (-1 == sent)\n      {\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        free (msg);\n        break;\n      }\n    }\n  }\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (ws);\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified run_usock code.\n",
  "test_code": "static void\nprobe_log(const char *event, struct WsData *ws, struct MHD_UpgradeResponseHandle *urh, const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/203.txt\", \"a\");\n  if (NULL == fp)\n  {\n    /* If the log file cannot be opened, best-effort fallback to stderr. */\n    fp = stderr;\n  }\n\n  /* Timestamp */\n  {\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (NULL != localtime_r(&t, &tm_buf))\n    {\n      char ts[32];\n      if (0 < strftime(ts, (size_t) sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf))\n      {\n        fprintf(fp, \"%s - \", ts);\n      }\n    }\n  }\n\n  /* Basic context */\n  if (NULL != ws)\n  {\n    fprintf(fp, \"event=%s sock=%d urh=%p pid=%ld: \", event, (int) ws->sock, (void *) urh, (long) pthread_self());\n  }\n  else\n  {\n    fprintf(fp, \"event=%s ws=NULL urh=%p pid=%ld: \", event, (void *) urh, (long) pthread_self());\n  }\n\n  /* Formatted message */\n  {\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n  }\n\n  fprintf(fp, \"\\n\");\n\n  if (fp != stderr)\n  {\n    fclose(fp);\n  }\n}\n\nstatic void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n\n  /* Log entry and initial state: ws pointer and urh pointer */\n  probe_log(\"enter\", ws, urh, \"run_usock start, ws=%p urh=%p\", (void *) ws, (void *) urh);\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n    probe_log(\"recv\", ws, urh, \"recv returned %zd bytes\", got);\n    if (0 >= got)\n    {\n      probe_log(\"recv_break\", ws, urh, \"recv <= 0 -> breaking out (got=%zd)\", got);\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n    probe_log(\"ws_receive_frame\", ws, urh, \"ws_receive_frame returned msg=%p got=%zd type=%d\", (void *) msg, got, type);\n    if (NULL == msg)\n    {\n      probe_log(\"msg_null\", ws, urh, \"msg is NULL -> breaking out\");\n      break;\n    }\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock, msg);\n      probe_log(\"text_frame_build\", ws, urh, \"calculated buf_size=%d\", buf_size);\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock, msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n          probe_log(\"ws_send_frame\", ws, urh, \"ws_send_frame attempted text=%p sent=%zd\", (void *) text, sent);\n          free (text);\n        }\n        else\n        {\n          probe_log(\"malloc_fail\", ws, urh, \"malloc returned NULL for buf_size=%d\", buf_size);\n          sent = -1;\n        }\n      }\n      else\n      {\n        probe_log(\"buf_size_nonpos\", ws, urh, \"buf_size <= 0 (%d)\", buf_size);\n        sent = -1;\n      }\n      free (msg);\n      if (-1 == sent)\n      {\n        probe_log(\"send_fail_break\", ws, urh, \"send failed (sent=%zd) -> breaking out\", sent);\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        probe_log(\"close_frame\", ws, urh, \"received close frame, msg=%p -> freeing msg and breaking\", (void *) msg);\n        free (msg);\n        break;\n      }\n      else\n      {\n        probe_log(\"other_frame\", ws, urh, \"received non-text non-close frame type=%d, msg=%p -> freeing msg\", type, (void *) msg);\n        free (msg);\n      }\n    }\n  }\n\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n      probe_log(\"client_removed\", ws, urh, \"removed client at index=%d sock=%d\", i, (int) ws->sock);\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (ws);\n\n  /* Log just before calling MHD_upgrade_action so the state of 'urh' is captured. */\n  probe_log(\"before_upgrade_action\", NULL, urh, \"about to call MHD_upgrade_action with urh=%p\", (void *) urh);\n\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n\n  probe_log(\"after_upgrade_action\", NULL, urh, \"called MHD_upgrade_action with urh=%p\", (void *) urh);\n  return NULL;\n}"
}