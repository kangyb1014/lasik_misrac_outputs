{
  "user_message": "An agent A claimed that the following MHD_set_connection_value_n code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value_n.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function declaration uses the macro _MHD_EXTERN which expands to __attribute__((visibility(\"default\")))extern. The usage of __attribute__((...)) is a compiler-specific (GCC/Clang) language extension documented by those compilers, so this violates MISRA C 2023 Rule 1.2 (no language extensions).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Probe / logging: record parameters and branch decisions to a file\n     so other agents can reproduce and gather evidence for the reported\n     scenario. This preserves original logic; logging is best-effort and\n     does not affect return values. */\n  size_t computed_key_len = key ? strlen(key) : 0;\n  size_t computed_value_len = value ? strlen(value) : 0;\n\n  {\n    FILE *log = fopen(\"/tmp/logs/408.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_set_connection_value_n called\\n\");\n      fprintf(log, \"  connection=%p\\n\", (void *)connection);\n      fprintf(log, \"  kind=%d\\n\", (int) kind);\n      fprintf(log, \"  key=%p key_size=%zu computed_key_len=%zu\\n\",\n              (void *)key, key_size, computed_key_len);\n      fprintf(log, \"  value=%p value_size=%zu computed_value_len=%zu\\n\",\n              (void *)value, value_size, computed_value_len);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n  {\n    FILE *log = fopen(\"/tmp/logs/408.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Decision: return MHD_NO (binary zero allowed only in GET arguments)\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  {\n    FILE *log = fopen(\"/tmp/logs/408.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Decision: call MHD_set_connection_value_n_nocheck_\\n\");\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_set_connection_value_n. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s reasoning is correct provided the macro actually expands as claimed. The snippet as shown uses the macro _MHD_EXTERN, and if _MHD_EXTERN expands to a compiler-specific attribute form such as __attribute__((visibility(\"default\"))) extern, that use of __attribute__ is a documented GCC/Clang language extension and therefore falls under MISRA C 2023 Rule 1.2 (language extensions should not be used). The provided runtime logging/test evidence is irrelevant to the language-extension question. Caveat: you must inspect the macro definition in the build headers. If _MHD_EXTERN is defined as the claimed __attribute__ form (or any other compiler-specific attribute), then the report is correct; if it is defined as just \u2019extern\u2019 or empty on the target compiler, then there is no violation. Also note that projects sometimes allow such extensions via an explicit MISRA deviation \u2014 that is a separate compliance decision."
}