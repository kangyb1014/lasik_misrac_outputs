{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function declaration uses the macro _MHD_EXTERN which expands to __attribute__((visibility(\"default\")))extern. The usage of __attribute__((...)) is a compiler-specific (GCC/Clang) language extension documented by those compilers, so this violates MISRA C 2023 Rule 1.2 (no language extensions).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/408.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value_n code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Probe / logging: record parameters and branch decisions to a file\n     so other agents can reproduce and gather evidence for the reported\n     scenario. This preserves original logic; logging is best-effort and\n     does not affect return values. */\n  size_t computed_key_len = key ? strlen(key) : 0;\n  size_t computed_value_len = value ? strlen(value) : 0;\n\n  {\n    FILE *log = fopen(\"/tmp/logs/408.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_set_connection_value_n called\\n\");\n      fprintf(log, \"  connection=%p\\n\", (void *)connection);\n      fprintf(log, \"  kind=%d\\n\", (int) kind);\n      fprintf(log, \"  key=%p key_size=%zu computed_key_len=%zu\\n\",\n              (void *)key, key_size, computed_key_len);\n      fprintf(log, \"  value=%p value_size=%zu computed_value_len=%zu\\n\",\n              (void *)value, value_size, computed_value_len);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n  {\n    FILE *log = fopen(\"/tmp/logs/408.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Decision: return MHD_NO (binary zero allowed only in GET arguments)\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  {\n    FILE *log = fopen(\"/tmp/logs/408.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Decision: call MHD_set_connection_value_n_nocheck_\\n\");\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n"
}