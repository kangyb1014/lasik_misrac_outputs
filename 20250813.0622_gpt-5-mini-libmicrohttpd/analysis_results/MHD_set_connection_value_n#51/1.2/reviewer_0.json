{
  "user_message": "An agent A claimed that the following MHD_set_connection_value_n code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value_n.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro _MHD_EXTERN expands to the GCC/Clang-specific attribute syntax __attribute__((visibility(\"default\"))). This is a compiler language extension (GCC attribute syntax) and thus violates MISRA C 2023 Rule 1.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/408.txt\", \"a\");\n    if (NULL == f)\n    {\n        /* Try to create the directory then reopen. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/408.txt\", \"a\");\n    }\n    if (NULL == f)\n    {\n        /* If still failing, give up silently to avoid changing program logic. */\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nenum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                    enum MHD_ValueKind kind,\n                                    const char *key,\n                                    size_t key_size,\n                                    const char *value,\n                                    size_t value_size)\n{\n    probe_log(\"MHD_set_connection_value_n_nocheck_ called: connection=%p, kind=%d, key=%p, key_size=%zu, value=%p, value_size=%zu\",\n              (void *)connection, (int)kind, (void *)key, key_size, (void *)value, value_size);\n    /* For test purposes return success. */\n    probe_log(\"MHD_set_connection_value_n_nocheck_: returning %d\", (int)MHD_YES);\n    return MHD_YES;\n}\nenum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n    /* Capture initial state */\n    probe_log(\"ENTER MHD_set_connection_value_n: connection=%p, kind=%d, key=%p, key_size=%zu, value=%p, value_size=%zu\",\n              (void *)connection, (int)kind, (void *)key, key_size, (void *)value, value_size);\n\n    size_t actual_key_len = key ? strlen(key) : 0;\n    size_t actual_value_len = value ? strlen(value) : 0;\n\n    probe_log(\"Computed lengths: actual_key_len=%zu, actual_value_len=%zu\",\n              actual_key_len, actual_value_len);\n\n    int is_get_kind = (MHD_GET_ARGUMENT_KIND == kind);\n    probe_log(\"Kind check: MHD_GET_ARGUMENT_KIND == kind -> %d\", is_get_kind);\n\n    int size_mismatch = (actual_key_len != key_size) || (actual_value_len != value_size);\n    probe_log(\"Size comparison: (actual_key_len != key_size) -> %d, (actual_value_len != value_size) -> %d, overall_size_mismatch=%d\",\n              (int)(actual_key_len != key_size), (int)(actual_value_len != value_size), size_mismatch);\n\n    if ((MHD_GET_ARGUMENT_KIND != kind) && (size_mismatch))\n    {\n        probe_log(\"Branch: early return MHD_NO (binary zero allowed only in GET arguments)\");\n        probe_log(\"EXIT MHD_set_connection_value_n: returning %d\", (int)MHD_NO);\n        return MHD_NO; /* binary zero is allowed only in GET arguments */\n    }\n\n    probe_log(\"Branch: calling MHD_set_connection_value_n_nocheck_\");\n    enum MHD_Result res = MHD_set_connection_value_n_nocheck_(connection,\n                                                              kind,\n                                                              key,\n                                                              key_size,\n                                                              value,\n                                                              value_size);\n    probe_log(\"Returned from MHD_set_connection_value_n_nocheck_: result=%d\", (int)res);\n    probe_log(\"EXIT MHD_set_connection_value_n: returning %d\", (int)res);\n    return res;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nMHD_set_connection_value_n_nocheck_ called: connection=0x5640b6b96cf0, kind=1, key=0x5640b6b96f51, key_size=4, value=0x5640b6b96f57, value_size=9\nMHD_set_connection_value_n_nocheck_: returning 1\nM\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A claims _MHD_EXTERN expands to the GCC/Clang __attribute__((visibility(\"default\"))) and thus violates MISRA C:2023 Rule 1.2. The provided test code and exhaustive test output show the functions compiled and executed without any evidence of compiler-specific attribute syntax being used. The test harness replaced/compiled the functions as ordinary definitions (no visible attribute usage), and you were instructed to treat the test suite as exhaustive. Because there is no demonstrated/preprocessed expansion or other evidence that _MHD_EXTERN actually expands to a compiler-specific __attribute__ in this build, the claim that the code uses a language extension is not supported by the supplied artifacts. Therefore the report is not correct."
}