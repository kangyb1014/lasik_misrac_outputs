{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_set_connection_value_n:\nstatic enum MHD_Result\nconnection_add_header (void *cls,\n                       const char *key,\n                       size_t key_size,\n                       const char *value,\n                       size_t value_size,\n                       enum MHD_ValueKind kind)\n{\n  struct MHD_Connection *connection = (struct MHD_Connection *) cls;\n  if (MHD_NO ==\n      MHD_set_connection_value_n (connection,\n                                  kind,\n                                  key,\n                                  key_size,\n                                  value,\n                                  value_size))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in pool to allocate header record!\\n\"));\n#endif\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                    ERR_MSG_REQUEST_TOO_BIG);\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (MHD_NO ==\n    MHD_set_connection_value_n (connection,\n                                kind,\n                                key,\n                                key_size,\n                                value,\n                                value_size))\n{\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Not enough memory in pool to allocate header record!\\n\"));\n#endif\n  transmit_error_response_static (connection,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_TOO_BIG);\n  return MHD_NO;\n}",
    "if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n     ( ((key ? strlen (key) : 0) != key_size) ||\n       ((value ? strlen (value) : 0) != value_size) ) )\n  return MHD_NO; /* binary zero is allowed only in GET arguments */",
    "return MHD_YES;",
    "return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);"
  ],
  "explanation": "I flagged the conditional-return in MHD_set_connection_value_n, the subsequent unconditional return of MHD_set_connection_value_n_nocheck_, the entire error-handling if-block in connection_add_header (including the conditional debug log and the call to transmit_error_response_static), and the final return MHD_YES. These are the program points where control-flow decisions produce alternate paths; if any of those conditions or return values are constant (due to macros, build configuration, or functions that always return a fixed value), one of the branches could become statically unreachable and thus must be investigated.\n\nOther fragments in the provided code were not marked because they do not themselves create alternate control-flow paths that could be statically unreachable: function signatures and parameter lists, the local cast/assignment (struct MHD_Connection *connection = (struct MHD_Connection *) cls;), comments, and isolated tokens/brace placements are straightforward and cannot by themselves produce unreachable code. The selected fragments cover the only points where a change in reachability could occur given different macro definitions or return behaviors; therefore further investigation can focus on those fragments."
}