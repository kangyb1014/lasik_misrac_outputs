{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_connection_value_n:\nstatic enum MHD_Result\nconnection_add_header (void *cls,\n                       const char *key,\n                       size_t key_size,\n                       const char *value,\n                       size_t value_size,\n                       enum MHD_ValueKind kind)\n{\n  struct MHD_Connection *connection = (struct MHD_Connection *) cls;\n  if (MHD_NO ==\n      MHD_set_connection_value_n (connection,\n                                  kind,\n                                  key,\n                                  key_size,\n                                  value,\n                                  value_size))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in pool to allocate header record!\\n\"));\n#endif\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                    ERR_MSG_REQUEST_TOO_BIG);\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (MHD_NO ==\n    MHD_set_connection_value_n (connection,\n                                kind,\n                                key,\n                                key_size,\n                                value,\n                                value_size))\n{\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Not enough memory in pool to allocate header record!\\n\"));\n#endif\n  transmit_error_response_static (connection,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_TOO_BIG);\n  return MHD_NO;\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The if-body is reachable. MHD_set_connection_value_n explicitly returns MHD_NO when (a) kind != MHD_GET_ARGUMENT_KIND and the provided key/value lengths disagree with strlen (e.g. an embedded binary zero in a non-GET header), or (b) the downstream call MHD_set_connection_value_n_nocheck_ fails (e.g. out-of-memory). In those situations the condition is true and the error-handling block is executed, so there is no unreachable code in this fragment."
}