{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrlen is called only guarded by (key ? ... : 0) but not by any bound on the buffer length. If key points to a non-NULL buffer that is not NUL-terminated within its allocated/key_size bytes (e.g. binary data or a buffer of key_size bytes without a terminating '\\0'), strlen(key) will scan past the intended object and can read out-of-bounds. Example: key points to a 4-byte buffer {'a','b','c','d'} with key_size == 4; the expression calls strlen(key) and will continue reading beyond the 4 bytes until a NUL is found, causing an out-of-bounds access and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/415.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value_n code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nstatic void mhd_log_probe(const char *stage,\n                          struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          size_t key_size,\n                          const char *value,\n                          size_t value_size,\n                          size_t len_key,\n                          size_t len_value)\n{\n  FILE *f = fopen(\"/tmp/logs/415.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"stage=%s conn=%p kind=%d key=%p key_size=%zu value=%p value_size=%zu len_key=%zu len_value=%zu\\n\",\n          stage, (void *)connection, (int)kind,\n          (void *)key, key_size,\n          (void *)value, value_size,\n          len_key, len_value);\n\n  /* Dump up to the first 16 bytes of key/value within the provided sizes to help reproduce the scenario. */\n  if (key && key_size > 0) {\n    size_t n = key_size < 16 ? key_size : 16;\n    fprintf(f, \"key_bytes=\");\n    for (size_t i = 0; i < n; ++i)\n      fprintf(f, \"%02x%s\", (unsigned char)key[i], (i + 1 < n) ? \" \" : \"\\n\");\n  }\n  if (value && value_size > 0) {\n    size_t n = value_size < 16 ? value_size : 16;\n    fprintf(f, \"value_bytes=\");\n    for (size_t i = 0; i < n; ++i)\n      fprintf(f, \"%02x%s\", (unsigned char)value[i], (i + 1 < n) ? \" \" : \"\\n\");\n  }\n\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Compute the strlen results once (preserving the original behavior which may read beyond key_size/value_size\n     if the buffers are not NUL-terminated). This mirrors the original control flow while allowing us to log the\n     computed lengths and other state for reproducing the violation scenario. */\n  size_t len_key = key ? strlen(key) : 0;\n  size_t len_value = value ? strlen(value) : 0;\n\n  mhd_log_probe(\"entry\", connection, kind, key, key_size, value, value_size, len_key, len_value);\n\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((len_key) != key_size) || ((len_value) != value_size) ) ) {\n    mhd_log_probe(\"return_MHD_NO\", connection, kind, key, key_size, value, value_size, len_key, len_value);\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  mhd_log_probe(\"call_nocheck\", connection, kind, key, key_size, value, value_size, len_key, len_value);\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n"
}