{
  "user_message": "An agent A claimed that the following ahc_cb code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_cb.\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) extra_in;' in uh_cb is an executed no-op used only to silence an \"unused parameter\" warning. Removing that statement would not change program behaviour, so it qualifies as dead code under MISRA C 2023 Rule 2.2. (Location: uh_cb, the cast-to-void expression has no side effects and only documents the parameter as unused.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic const char *ahc_safe_str (const char *s)\n{\n  return (s != NULL) ? s : \"(null)\";\n}\nstatic void ahc_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  ahc_log (\"ahc_cb ENTRY: cls=%p con=%p url=%s method=%s version=%s upload_data=%p upload_data_size=%p req_cls=%p *req_cls=%p\",\n           cls, (void *) con, ahc_safe_str (url), ahc_safe_str (method), ahc_safe_str (version), (void *) upload_data, (void *) upload_data_size, (void *) req_cls, (void *) (req_cls ? *req_cls : NULL));\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    ahc_log (\"ahc_cb: initial request observation, setting *req_cls and returning MHD_YES (expect more callbacks)\");\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n\n  ahc_log (\"ahc_cb: proceeding to handle request, clearing *req_cls (was %p)\", (void *) *req_cls);\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n\n  ahc_log (\"ahc_cb: headers: Upgrade=%s Connection=%s\",\n           ahc_safe_str (upg_header), ahc_safe_str (con_header));\n\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    ahc_log (\"ahc_cb: not a websocket request -> send_chat_page\");\n    return send_chat_page (con);\n  }\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    ahc_log (\"ahc_cb: method/version mismatch: method=%s version=%s -> send_bad_request\",\n             ahc_safe_str (method), ahc_safe_str (version));\n    return send_bad_request (con);\n  }\n\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    ahc_log (\"ahc_cb: websocket version header missing or invalid: received=%s expected=%s -> send_upgrade_required\",\n             ahc_safe_str (ws_version_header), ahc_safe_str (WS_SEC_WEBSOCKET_VERSION));\n    return send_upgrade_required (con);\n  }\n\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  ahc_log (\"ahc_cb: lookup websocket key returned ret=%d ws_key_header=%s key_size=%zu\",\n           (int) ret, ahc_safe_str (ws_key_header), key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    ahc_log (\"ahc_cb: websocket key lookup failed or wrong size -> send_bad_request\");\n    return send_bad_request (con);\n  }\n\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  ahc_log (\"ahc_cb: ws_get_accept_value returned %d ws_ac_value=%p (string=%s)\", (int) ret, (void *) ws_ac_value, ahc_safe_str (ws_ac_value));\n  if (MHD_NO == ret)\n  {\n    ahc_log (\"ahc_cb: ws_get_accept_value failed -> returning %d\", (int) ret);\n    return ret;\n  }\n\n  ahc_log (\"ahc_cb: creating upgrade response (uh_cb will be used for upgrade connection handling)\");\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    ahc_log (\"ahc_cb: failed to add Sec-WebSocket-Accept header -> cleaning up and returning MHD_NO (ws_ac_value=%s)\", ahc_safe_str (ws_ac_value));\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    ahc_log (\"ahc_cb: failed to add Upgrade header -> destroying response and returning MHD_NO\");\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  ahc_log (\"ahc_cb: MHD_queue_response returned %d, destroying response and returning this value\", (int) ret);\n  MHD_destroy_response (res);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_cb. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's claim is not correct as presented. The reported statement '(void) extra_in;' in uh_cb does not appear in the supplied ahc_cb source: the function shown contains (void) cls; (void) url; (void) upload_data; (void) upload_data_size; \u2014 not the named uh_cb/extra_in the agent referenced. Those cast-to-void expressions are indeed executed no\u2011ops whose removal would not change program behaviour, so under a literal reading of MISRA C 2023 Rule 2.2 they would qualify as dead code. However the agent pointed to the wrong function/identifier and supplied no evidence of a '(void) extra_in;' statement in the provided code. Therefore the specific report (location and statement) is incorrect. (If the project authors wish to address the general issue, they should either remove unused parameter names where allowed or document a deviation; the cast\u2011to\u2011void idiom is a common way to silence compiler warnings but can be treated as dead code by Rule 2.2.)"
}