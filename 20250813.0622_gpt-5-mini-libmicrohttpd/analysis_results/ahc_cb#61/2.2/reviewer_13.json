{
  "user_message": "An agent A claimed that the following ahc_cb code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_cb.\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) cls;' is an executed expression statement with no side\u2011effects whose removal would not affect program behaviour. It is used only to suppress an 'unused parameter' warning, and thus constitutes dead code under Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ahc_log_msg(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (NULL != f)\n  {\n    fputs(msg, f);\n    fputc('\\n', f);\n    fclose(f);\n  }\n}\nstatic void ahc_log_state(const char *stage, const char *method,\n                          const char *version, void *req_cls_ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f, \"%s: method=%s version=%s req_cls=%p\\n\",\n            stage,\n            (method != NULL) ? method : \"(null)\",\n            (version != NULL) ? version : \"(null)\",\n            req_cls_ptr);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  ahc_log_msg(\"ahc_cb: entry\");\n  ahc_log_msg(\"ahc_cb: about to execute (void) cls; (probe)\");\n  (void) cls;               /* Unused. Silent compiler warning. */\n  ahc_log_msg(\"ahc_cb: executed (void) cls;\");\n\n  ahc_log_msg(\"ahc_cb: about to execute (void) url; (probe)\");\n  (void) url;               /* Unused. Silent compiler warning. */\n  ahc_log_msg(\"ahc_cb: executed (void) url;\");\n\n  ahc_log_msg(\"ahc_cb: about to execute (void) upload_data; (probe)\");\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  ahc_log_msg(\"ahc_cb: executed (void) upload_data;\");\n\n  ahc_log_msg(\"ahc_cb: about to execute (void) upload_data_size; (probe)\");\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  ahc_log_msg(\"ahc_cb: executed (void) upload_data_size;\");\n\n  /* Log initial req_cls state */\n  ahc_log_state(\"ahc_cb: initial state\", method, version,\n                (void *) (*req_cls));\n\n  if (NULL == *req_cls)\n  {\n    ahc_log_msg(\"ahc_cb: *req_cls is NULL; setting to (void *)1 and returning MHD_YES\");\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n\n  ahc_log_msg(\"ahc_cb: clearing *req_cls (set to NULL) and continuing\");\n  *req_cls = NULL;\n\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n\n  ahc_log_msg(\"ahc_cb: looked up headers (upgrade/connection)\");\n  {\n    FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ahc_cb: upg_header=%s con_header=%s\\n\",\n              upg_header ? upg_header : \"(null)\",\n              con_header ? con_header : \"(null)\");\n      fclose(f);\n    }\n  }\n\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    ahc_log_msg(\"ahc_cb: not a websocket request; sending chat page\");\n    return send_chat_page (con);\n  }\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    ahc_log_state(\"ahc_cb: method/version check failed\", method, version, (void *) *req_cls);\n    return send_bad_request (con);\n  }\n\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    ahc_log_msg(\"ahc_cb: websocket version header missing/invalid; sending upgrade required\");\n    return send_upgrade_required (con);\n  }\n\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    ahc_log_msg(\"ahc_cb: websocket key lookup failed or wrong size; sending bad request\");\n    return send_bad_request (con);\n  }\n\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    ahc_log_msg(\"ahc_cb: ws_get_accept_value failed; returning MHD_NO\");\n    return ret;\n  }\n\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    ahc_log_msg(\"ahc_cb: failed to add Sec-WebSocket-Accept header; cleaning up and returning MHD_NO\");\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    ahc_log_msg(\"ahc_cb: failed to add Upgrade header; destroying response and returning MHD_NO\");\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"ahc_cb: returning ret=%d\", (int) ret);\n    ahc_log_msg(buf);\n  }\n\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_cb. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The statement \u201c(void) cls;\u201d is an executed expression statement that has no side\u2011effects and whose removal would not affect program behaviour; therefore it meets the plain definition of dead code in MISRA C 2023 Rule 2.2. The fact that it is used only to suppress an \"unused parameter\" warning does not give it an observable effect at run time. (The lack of test log activity is unrelated\u2014the callback may simply not have been exercised by the test harness.) To address the issue in a standards\u2011compliant way, either remove the unused parameter where the interface permits, use a compiler/implementation mechanism to mark the parameter as intentionally unused, or document/record a formal MISRA deviation if the cast is retained purposely."
}