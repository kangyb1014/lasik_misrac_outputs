{
  "user_message": "An agent A claimed that the following ahc_cb code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_cb.\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The cast-to-void expression statement '(void) con;' in ahc_cb is an executed no-op used to silence an \"unused parameter\" warning. Removing this statement would not change program behaviour, so it is dead code per MISRA C 2023 Rule 2.2. (The same applies to the other '(void) ...;' lines for unused parameters.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  /* Log entry and pointer parameter values (not dereferencing req_cls or upload_data_size) */\n  probe_log(\"ahc_cb ENTRY: cls=%p, con=%p, url=%p, method=%p, version=%p, upload_data=%p, upload_data_size=%p, req_cls=%p\",\n            (void *) cls, (void *) con, (const void *) url, (const void *) method,\n            (const void *) version, (const void *) upload_data,\n            (const void *) upload_data_size, (const void *) req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  probe_log(\"executed no-op: (void) cls; (value was %p)\", (void *) cls);\n  (void) url;               /* Unused. Silent compiler warning. */\n  probe_log(\"executed no-op: (void) url; (value was %p)\", (const void *) url);\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  probe_log(\"executed no-op: (void) upload_data; (value was %p)\", (const void *) upload_data);\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  probe_log(\"executed no-op: (void) upload_data_size; (value was %p)\", (const void *) upload_data_size);\n\n  if (NULL == *req_cls)\n  {\n    probe_log(\"req_cls dereferenced: *req_cls was NULL -> setting to (void*)1 and returning MHD_YES\");\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  probe_log(\"req_cls dereferenced: *req_cls was non-NULL -> clearing and continuing\");\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  probe_log(\"upg_header lookup: %p%s\", (const void *) upg_header,\n            (upg_header ? (\" -> value present\") : (\" -> NULL\")));\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  probe_log(\"con_header lookup: %p%s\", (const void *) con_header,\n            (con_header ? (\" -> value present\") : (\" -> NULL\")));\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    probe_log(\"Decision: not a websocket request -> send_chat_page\");\n    return send_chat_page (con);\n  }\n  probe_log(\"Decision: websocket request -> check method/version\");\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    probe_log(\"Bad method/version: method=%s, version=%s -> send_bad_request\", method ? method : \"(null)\", version ? version : \"(null)\");\n    return send_bad_request (con);\n  }\n  probe_log(\"Method/version OK: method=%s, version=%s\", method ? method : \"(null)\", version ? version : \"(null)\");\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  probe_log(\"ws_version_header lookup: %p%s\", (const void *) ws_version_header,\n            (ws_version_header ? (\" -> value present\") : (\" -> NULL\")));\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    probe_log(\"Websocket version missing or mismatch -> send_upgrade_required\");\n    return send_upgrade_required (con);\n  }\n  probe_log(\"Websocket version OK -> fetch Sec-WebSocket-Key header\");\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  probe_log(\"MHD_lookup_connection_value_n returned %d, key_size=%zu, ws_key_header=%p\",\n            (int) ret, key_size, (const void *) ws_key_header);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    probe_log(\"Bad websocket key -> send_bad_request\");\n    return send_bad_request (con);\n  }\n  probe_log(\"ws_get_accept_value start\");\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  probe_log(\"ws_get_accept_value returned %d, ws_ac_value=%p\", (int) ret, (void *) ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    probe_log(\"ws_get_accept_value failed -> returning %d\", (int) ret);\n    return ret;\n  }\n  probe_log(\"Creating upgrade response and adding headers\");\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    probe_log(\"Failed to add Sec-WebSocket-Accept header -> cleaning up and returning MHD_NO\");\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  probe_log(\"Added Sec-WebSocket-Accept header (value ptr=%p)\", (void *) ws_ac_value);\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    probe_log(\"Failed to add Upgrade header -> destroying response and returning MHD_NO\");\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  probe_log(\"Added Upgrade header -> queueing response\");\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  probe_log(\"MHD_queue_response returned %d\", (int) ret);\n  MHD_destroy_response (res);\n  probe_log(\"ahc_cb EXIT -> returning %d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_cb. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The core of A\u2019s claim is correct: the (void) parameter-cast expression-statements in ahc_cb (e.g. (void) cls; (void) url; (void) upload_data; (void) upload_data_size;) are executed no-ops whose removal would not change program behaviour. By the literal wording of MISRA C 2023 Rule 2.2 (\u201cAny operation that is executed but whose removal would not affect program behaviour constitutes dead code\u201d), those statements meet the definition of dead code unless an explicit justification or permitted suppression is provided. \n\nTwo qualifications: (1) A small factual error in A\u2019s scenario \u2014 the original source does not contain a '(void) con;' line; the no-op casts are for cls, url, upload_data and upload_data_size. (2) In practice, projects commonly use such casts to suppress \u201cunused parameter\u201d diagnostics; that is a pragmatic workaround but, unless the project records a rationale or uses an allowed mechanism (e.g. compiler attribute, documented deviation), it doesn\u2019t remove the mismatch with Rule 2.2.\n\nConclusion: the report is essentially correct (the code contains executed no-op casts that qualify as dead code per Rule 2.2), although A misstated the exact parameter name in their example."
}