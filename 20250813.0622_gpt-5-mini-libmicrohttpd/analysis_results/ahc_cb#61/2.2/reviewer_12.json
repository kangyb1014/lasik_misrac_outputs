{
  "user_message": "An agent A claimed that the following ahc_cb code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_cb.\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) cls;' is an executed expression statement that has no effect on program behaviour (it only suppresses an 'unused parameter' compiler warning). Removing it would not change the program behaviour, so it constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nahc_cb_log_entry (const char *stage, void *cls, const char *url,\n                  const char *upload_data, size_t *upload_data_size,\n                  void *con, const char *method, const char *version)\n{\n  FILE *f = fopen (\"/tmp/logs/490.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  fprintf (f, \"ahc_cb: %s; cls=%p url=%p upload_data=%p upload_data_size=%p con=%p method=%s version=%s\\n\",\n           stage,\n           cls,\n           (void *) url,\n           (void *) upload_data,\n           (void *) upload_data_size,\n           con,\n           (NULL == method) ? \"(null)\" : method,\n           (NULL == version) ? \"(null)\" : version);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  /* Log entry with initial parameters */\n  ahc_cb_log_entry (\"entry\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log that the void-cast statements were executed (evidence of executed, effect-free operations) */\n  ahc_cb_log_entry (\"after_void_casts (evidence for executed void-casts)\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n\n  if (NULL == *req_cls)\n  {\n    /* Log the control path and state before returning */\n    ahc_cb_log_entry (\"initial_req_cls_set_and_return_yes\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n\n  /* Log that we progressed past initial request-class handling */\n  ahc_cb_log_entry (\"proceeding_after_initial_req_cls\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n\n  /* Log headers observed */\n  ahc_cb_log_entry (\"headers_obtained\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    ahc_cb_log_entry (\"not_websocket_request_return_chat_page\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n    return send_chat_page (con);\n  }\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    ahc_cb_log_entry (\"method_or_version_mismatch_return_bad_request\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n    return send_bad_request (con);\n  }\n\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    ahc_cb_log_entry (\"missing_or_bad_ws_version_return_upgrade_required\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n    return send_upgrade_required (con);\n  }\n\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    ahc_cb_log_entry (\"missing_or_bad_ws_key_return_bad_request\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n    return send_bad_request (con);\n  }\n\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    ahc_cb_log_entry (\"ws_get_accept_value_failed_return_ret\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n    return ret;\n  }\n\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    ahc_cb_log_entry (\"add_response_header_accept_failed_return_no\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n    return MHD_NO;\n  }\n\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    ahc_cb_log_entry (\"add_response_header_upgrade_failed_return_no\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n    return MHD_NO;\n  }\n\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n\n  ahc_cb_log_entry (\"final_return\", cls, url, upload_data, upload_data_size, (void *) con, method, version);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_cb. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The (void) cls; (and the similar (void) url; etc.) statements are the conventional way to mark parameters as intentionally unused and to suppress compiler warnings. They are not \u201cdead code\u201d in the sense that MISRA intends to prohibit (unreachable or obsolete operations that should be removed because they serve no purpose). These void-cast statements are documentation/annotation for intent and for diagnostics; their presence does not change program semantics, but their purpose is legitimate and they are an accepted idiom for handling unused parameters. The empty test log does not demonstrate that the void-casts are dead code \u2014 it only shows the function was not exercised by the test harness. Therefore agent A\u2019s claim that those statements violate MISRA C:2023 Rule 2.2 is not correct."
}