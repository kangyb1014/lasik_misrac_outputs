{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_create_response_for_upgrade the response object is allocated with MHD_calloc_(1, sizeof(...)), which zero-initialises the structure. The explicit assignment response->total_size = 0 therefore has no effect \u2014 removing that statement would not change program behaviour. This assignment is a redundant operation and thus constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_cb code that contains useful probe functions that print useful logs to a file \"/tmp/logs/490.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_cb as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_cb:\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_cb code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Helper: append a formatted log line to /tmp/logs/490.txt */\nstatic void\nahc_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/490.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\n/* Helper: dump first `len` bytes of memory at p as hex to the log file */\nstatic void\nahc_dump_hex (const void *p, size_t len)\n{\n  const unsigned char *b = (const unsigned char *) p;\n  size_t i;\n  FILE *f = fopen (\"/tmp/logs/490.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf (f, \"memory dump %p, %zu bytes:\\n\", p, len);\n  for (i = 0; i < len; ++i)\n  {\n    fprintf (f, \"%02X\", b[i]);\n    if ((i + 1) % 16 == 0)\n      fprintf (f, \"\\n\");\n    else if ((i + 1) % 2 == 0)\n      fprintf (f, \" \");\n  }\n  if (len % 16 != 0)\n    fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and some state */\n  ahc_log (\"ahc_cb: entry con=%p method=%s version=%s req_cls=%p *req_cls=%p\",\n           (void *) con, method ? method : \"(null)\", version ? version : \"(null)\",\n           (void *) req_cls, (void *) (req_cls ? *req_cls : NULL));\n\n  if (NULL == *req_cls)\n  {\n    ahc_log (\"ahc_cb: initial req_cls NULL -> set to 1 and return MHD_YES\");\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  ahc_log (\"ahc_cb: second call for request; clearing req_cls and continuing\");\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  ahc_log (\"ahc_cb: upgrade header=%s connection header=%s\",\n           upg_header ? upg_header : \"(null)\", con_header ? con_header : \"(null)\");\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    ahc_log (\"ahc_cb: not a websocket request -> send_chat_page\");\n    return send_chat_page (con);\n  }\n  ahc_log (\"ahc_cb: websocket request detected\");\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    ahc_log (\"ahc_cb: method/version mismatch method=%s version=%s -> bad request\",\n             method, version);\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  ahc_log (\"ahc_cb: ws_version_header=%s\",\n           ws_version_header ? ws_version_header : \"(null)\");\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    ahc_log (\"ahc_cb: websocket version unsupported -> send_upgrade_required\");\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  ahc_log (\"ahc_cb: lookup key ret=%d key_size=%zu ws_key_header=%p\",\n           (int) ret, key_size, (void *) ws_key_header);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    ahc_log (\"ahc_cb: invalid websocket key -> send_bad_request\");\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  ahc_log (\"ahc_cb: ws_get_accept_value returned %d ws_ac_value=%p\",\n           (int) ret, (void *) ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    ahc_log (\"ahc_cb: ws_get_accept_value failed -> returning %d\", (int) ret);\n    return ret;\n  }\n\n  /* Create the upgrade response and log internal bytes to show zero-init */\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  ahc_log (\"ahc_cb: MHD_create_response_for_upgrade returned res=%p\", (void *) res);\n\n  /* If res is non-NULL, dump the first bytes of the structure to illustrate\n     whether it was zero-initialised (as would be the case if calloc was used).\n     This allows other agents to reproduce evidence that fields such as\n     total_size are zero prior to any explicit assignment. */\n  if (res != NULL)\n  {\n    /* Dump first 64 bytes (or less) to the log. */\n    ahc_dump_hex (res, 64);\n  }\n\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    ahc_log (\"ahc_cb: failed to add Sec-WebSocket-Accept header -> cleanup\");\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ahc_log (\"ahc_cb: added Sec-WebSocket-Accept header, freeing accept value\");\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    ahc_log (\"ahc_cb: failed to add Upgrade header -> destroy response and return MHD_NO\");\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ahc_log (\"ahc_cb: queueing response (101 Switching Protocols)\");\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  ahc_log (\"ahc_cb: MHD_queue_response returned %d\", (int) ret);\n  MHD_destroy_response (res);\n  ahc_log (\"ahc_cb: response destroyed, returning %d\", (int) ret);\n  return ret;\n}\n"
}