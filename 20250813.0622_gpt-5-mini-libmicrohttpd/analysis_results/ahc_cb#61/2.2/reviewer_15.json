{
  "user_message": "An agent A claimed that the following ahc_cb code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_cb.\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) upload_data;' is an executed no-op whose removal would not change program behaviour (its only purpose is to silence an 'unused variable' warning). According to Rule 2.2 any executed operation whose removal does not affect behaviour is dead code, so this line constitutes dead code.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ahc_probe_log(const char *stage,\n                          const void *con,\n                          const char *url,\n                          const char *method,\n                          const char *version,\n                          const char *upload_data,\n                          const void *upload_data_size_ptr,\n                          void **req_cls)\n{\n  FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"[ahc_cb] %s: con=%p url=%s method=%s version=%s upload_data_ptr=%p upload_data_str=%s upload_data_size_ptr=%p req_cls_ptr=%p req_cls_pointed=%p\\n\",\n          stage,\n          con,\n          (url != NULL) ? url : \"(null)\",\n          (method != NULL) ? method : \"(null)\",\n          (version != NULL) ? version : \"(null)\",\n          (const void *) upload_data,\n          (upload_data != NULL) ? upload_data : \"(null)\",\n          upload_data_size_ptr,\n          (void *) req_cls,\n          (req_cls != NULL) ? *req_cls : NULL);\n  fclose(f);\n}\nstatic void ahc_probe_log_msg(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"[ahc_cb] %s\\n\", msg);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  /* Original no-op casts retained to preserve logic and intent. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry state after the explicit no-op casts. This captures the\n     presence and pointer value of upload_data so other agents can see\n     that the variable exists but is not otherwise used. */\n  ahc_probe_log(\"ENTRY_POST_NOOPS\", (void *) con, url, method, version,\n                upload_data, (void *) upload_data_size, req_cls);\n  if (NULL == *req_cls)\n  {\n    ahc_probe_log_msg(\"REQ_CLS_NULL: initializing request context and returning MHD_YES\");\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  ahc_probe_log_msg(\"REQ_CLS_PRESENT: proceeding with request, clearing request context\");\n  *req_cls = NULL;\n\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n\n  /* Log upgrade/connection header values for debugging the websocket decision. */\n  {\n    FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"[ahc_cb] headers: Upgrade=%s Connection=%s\\n\",\n              (upg_header != NULL) ? upg_header : \"(null)\",\n              (con_header != NULL) ? con_header : \"(null)\");\n      fclose(f);\n    }\n  }\n\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    ahc_probe_log_msg(\"NOT_WEBSOCKET: sending chat page\");\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    ahc_probe_log_msg(\"BAD_METHOD_OR_VERSION: sending bad request\");\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    ahc_probe_log_msg(\"MISSING_OR_WRONG_WS_VERSION: sending upgrade required\");\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  /* Log the result of key lookup and the reported key size. */\n  {\n    FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"[ahc_cb] ws_key_lookup: ret=%d ws_key_header=%s key_size=%zu\\n\",\n              (int) ret,\n              (ws_key_header != NULL) ? ws_key_header : \"(null)\",\n              key_size);\n      fclose(f);\n    }\n  }\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    ahc_probe_log_msg(\"INVALID_WS_KEY: sending bad request\");\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  /* Log ws_get_accept_value result and pointer returned. */\n  {\n    FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"[ahc_cb] ws_get_accept_value: ret=%d ws_ac_value_ptr=%p ws_ac_value_str=%s\\n\",\n              (int) ret,\n              (void *) ws_ac_value,\n              (ws_ac_value != NULL) ? ws_ac_value : \"(null)\");\n      fclose(f);\n    }\n  }\n  if (MHD_NO == ret)\n  {\n    ahc_probe_log_msg(\"WS_ACCEPT_COMPUTE_FAILED: returning failure result\");\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    ahc_probe_log_msg(\"ADD_ACCEPT_HEADER_FAILED: cleaned up and returning MHD_NO\");\n    return MHD_NO;\n  }\n  /* Log successful addition of accept header. */\n  ahc_probe_log_msg(\"ADDED_ACCEPT_HEADER: proceeding\");\n\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    ahc_probe_log_msg(\"ADD_UPGRADE_HEADER_FAILED: cleaned up and returning MHD_NO\");\n    return MHD_NO;\n  }\n  ahc_probe_log_msg(\"ADDED_UPGRADE_HEADER: queuing response\");\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n\n  /* Final log before returning. */\n  {\n    FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"[ahc_cb] RETURN ret=%d\\n\", (int) ret);\n      fclose(f);\n    }\n  }\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_cb. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The lines such as (void) upload_data; are deliberate no-op casts used to document and suppress \"unused parameter\" warnings. MISRA C's Rule 2.2 targets truly dead code \u2014 operations which are executed but whose removal would not affect program behaviour in the sense of redundant, removable runtime logic. The explicit (void) cast has no runtime effect for non-volatile objects and is a widely accepted idiom to indicate an unused parameter; it does not constitute the kind of dead code the rule aims to prohibit. (As an aside, if the parameter were volatile, evaluation could have side effects and removing such a cast might change behaviour, which shows such casts cannot be blanket-classified as dead in all contexts.) The empty test log only shows the function was not exercised by the test harness and is unrelated to whether the (void) casts are a Rule 2.2 violation."
}