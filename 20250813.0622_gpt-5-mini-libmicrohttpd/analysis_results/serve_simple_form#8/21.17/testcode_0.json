{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(value) can dereference a NULL or non-null-terminated pointer. For example, if a caller invokes MHD_add_response_header(response, MHD_HTTP_HEADER_CONNECTION, NULL) (or otherwise passes a non\u2011terminated buffer) then add_response_header_connection will reach value_len = strlen(value) and read beyond the object bounds (NULL dereference or scanning past the buffer). The function does not validate value for NULL or ensure termination before calling strlen.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified serve_simple_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/71.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of serve_simple_form:\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified serve_simple_form code.\n",
  "test_code": "static void probe_log_basic(const char *stage,\n                                const char *form,\n                                const char *mime,\n                                struct Session *session,\n                                struct MHD_Connection *connection)\n{\n  FILE *f = fopen(\"/tmp/logs/71.txt\", \"a\");\n  if (!f)\n    return;\n\n  /* Log the control point and pointer values only. Do not dereference\n     pointers to avoid introducing further UB or changing program behavior. */\n  fprintf(f, \"serve_simple_form: stage=%s\\n\", stage);\n  fprintf(f, \"  form ptr=%p\\n\", (const void *) form);\n  fprintf(f, \"  mime ptr=%p\\n\", (const void *) mime);\n  fprintf(f, \"  session ptr=%p\\n\", (const void *) session);\n  fprintf(f, \"  connection ptr=%p\\n\", (const void *) connection);\n  fflush(f);\n  fclose(f);\n}\n\nstatic void probe_log_after_strlen(const char *stage,\n                                   const char *form,\n                                   size_t form_len,\n                                   const char *mime,\n                                   struct Session *session,\n                                   struct MHD_Connection *connection)\n{\n  FILE *f = fopen(\"/tmp/logs/71.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"serve_simple_form: stage=%s\\n\", stage);\n  fprintf(f, \"  form ptr=%p, form_len=%zu\\n\", (const void *) form, form_len);\n  fprintf(f, \"  mime ptr=%p\\n\", (const void *) mime);\n  fprintf(f, \"  session ptr=%p\\n\", (const void *) session);\n  fprintf(f, \"  connection ptr=%p\\n\", (const void *) connection);\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* Log entry and the pointer values. This captures the state right before\n     any string operations that may dereference the 'form' pointer. */\n  probe_log_basic(\"entry\", form, mime, session, connection);\n\n  /* return static form */\n  /* Log just before calling strlen(form). We intentionally log the pointer\n     (not its contents) so that if strlen() dereferences a NULL or\n     non-terminated pointer and crashes, the log contains evidence of the\n     pointer value and the control flow up to the risky call. */\n  probe_log_basic(\"before_strlen\", form, mime, session, connection);\n\n  /* Preserve original behavior: compute length with strlen as before. */\n  size_t form_len = strlen (form);\n\n  /* Log the observed length after strlen returns (if it returns). */\n  probe_log_after_strlen(\"after_strlen\", form, form_len, mime, session, connection);\n\n  response = MHD_create_response_from_buffer_static (form_len,\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n"
}