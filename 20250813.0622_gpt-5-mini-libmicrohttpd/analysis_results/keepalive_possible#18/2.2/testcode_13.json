{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided code mhd_assert is defined as ((void)0). Therefore the statement mhd_assert(! c->stop_with_error); compiles to a no-op (an executed statement that has no effect). Removing that statement would not change program behaviour in the current build configuration, so it constitutes dead code and thus violates MISRA C 2023 Rule 2.2. (If mhd_assert were implemented to perform runtime checks in other build configurations, it would not be dead in those builds; but as shown here it is.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "static void mhd_probe_log(const char *location,\n                              struct MHD_Connection *c,\n                              struct MHD_Response *r)\n{\n  /* Attempt to log to the specified file. Logging is best-effort and\n     must not change program logic beyond producing side-effectful I/O. */\n  FILE *f = fopen(\"/tmp/logs/146.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"PROBE: %s\\n\", location);\n  if (c)\n  {\n    /* Print integer-cast values for possibly enum/bitfield members. */\n    fprintf(f, \"  conn=%p keepalive=%d stop_with_error=%d discard_request=%d read_closed=%d\\n\",\n            (void *)c,\n            (int)(c->keepalive),\n            (int)(c->stop_with_error),\n            (int)(c->discard_request),\n            (int)(c->read_closed));\n    /* rq and rp are nested structs; print http_ver and pointer to response */\n    fprintf(f, \"  rq.http_ver=%d rp.response=%p\\n\",\n            (int)(c->rq.http_ver),\n            (void *)(c->rp.response));\n  }\n  else\n  {\n    fprintf(f, \"  conn=NULL\\n\");\n  }\n\n  if (r)\n  {\n    fprintf(f, \"  resp=%p flags=0x%08x flags_auto=0x%08x upgrade_handler=%p\\n\",\n            (void *)r,\n            (unsigned int)(r->flags),\n            (unsigned int)(r->flags_auto),\n            (void *)(r->upgrade_handler));\n  }\n  else\n  {\n    fprintf(f, \"  resp=NULL\\n\");\n  }\n\n  fclose(f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log state immediately before the NULL check assertion. This records\n     that the assert site is reached even if mhd_assert is a no-op. */\n  mhd_probe_log(\"before_assert_null_r\", c, r);\n  mhd_assert (NULL != r);\n\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_probe_log(\"decision_must_close_keepalive_flag\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_probe_log(\"upgrade_handler_present_before_asserts\", c, r);\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    /* This is the assertion reported as dead code when mhd_assert is ((void)0). */\n    mhd_probe_log(\"upgrade_before_assert_stop_with_error\", c, r);\n    mhd_assert (! c->stop_with_error);\n    mhd_probe_log(\"upgrade_decision_upgrade\", c, r);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_probe_log(\"after_upgrade_block_before_stop_with_error_check\", c, r);\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_probe_log(\"decision_must_close_read_closed_or_discard\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_probe_log(\"decision_must_close_http_1_0_strict\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_probe_log(\"decision_must_close_flags_auto_has_connection_close\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    mhd_probe_log(\"decision_must_close_http_ver_not_supported\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    mhd_probe_log(\"decision_must_close_connection_header_close\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      mhd_probe_log(\"decision_use_keepalive_http_1_0_with_keepalive_header\", c, r);\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_probe_log(\"decision_must_close_http_1_0_no_keepalive\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_probe_log(\"decision_use_keepalive_http_1_1_compat\", c, r);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_probe_log(\"decision_default_must_close\", c, r);\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}