{
  "user_message": "An agent A claimed that the following keepalive_possible code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of keepalive_possible.\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The mhd_assert macro is defined as ((void)0). The statement mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver)); therefore expands to a no-op at compile time and has no runtime effect. Because this operation is executed but its removal would not affect program behaviour, it constitutes dead code and thus violates MISRA C 2023 Rule 2.2. (If mhd_assert were implemented to perform real checks or have side effects, this would not be a violation.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_fmt(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/146.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Probe: entry state */\n  mhd_probe_fmt(\"ENTER keepalive_possible: c=%p, r=%p, keepalive=%d, rq.http_ver=%d, read_closed=%d, discard_request=%d, stop_with_error=%d\",\n                (void *)c,\n                (void *)r,\n                (int)c->keepalive,\n                (int)c->rq.http_ver,\n                (int)c->read_closed,\n                (int)c->discard_request,\n                (int)c->stop_with_error);\n\n  mhd_assert (NULL != r);\n  /* Probe the assertion condition even though mhd_assert may be a no-op. */\n  mhd_probe_fmt(\"ASSERT NULL != r : %s\", (NULL != r) ? \"true\" : \"false\");\n\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_probe_fmt(\"DECISION: keepalive == MHD_CONN_MUST_CLOSE -> return MHD_CONN_MUST_CLOSE\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_probe_fmt(\"ASSERT (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE) == 0 : %s\",\n                  (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE)) ? \"true\" : \"false\");\n\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_probe_fmt(\"ASSERT MHD_IS_HTTP_VER_SUPPORTED(rq.http_ver) : %s\",\n                  MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver) ? \"true\" : \"false\");\n\n    mhd_assert (! c->stop_with_error);\n    mhd_probe_fmt(\"ASSERT !c->stop_with_error : %s\", (! c->stop_with_error) ? \"true\" : \"false\");\n\n    mhd_probe_fmt(\"DECISION: r->upgrade_handler != NULL -> return MHD_CONN_MUST_UPGRADE (c=%p, r=%p)\", (void *)c, (void *)r);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  mhd_probe_fmt(\"ASSERT ((!c->stop_with_error) || c->discard_request) : %s\",\n                (((! c->stop_with_error) || (c->discard_request)) ? \"true\" : \"false\"));\n\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_probe_fmt(\"DECISION: read_closed || discard_request -> return MHD_CONN_MUST_CLOSE (read_closed=%d, discard_request=%d)\",\n                  (int)c->read_closed, (int)c->discard_request);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_probe_fmt(\"DECISION: r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT -> return MHD_CONN_MUST_CLOSE (r->flags=0x%08x)\", (unsigned int)r->flags);\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_probe_fmt(\"DECISION: r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE -> return MHD_CONN_MUST_CLOSE (r->flags_auto=0x%08x)\", (unsigned int)r->flags_auto);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Probe HTTP version supported check before using it */\n  {\n    int http_ver_supported = MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver) ? 1 : 0;\n    mhd_probe_fmt(\"CHECK: MHD_IS_HTTP_VER_SUPPORTED(rq.http_ver) -> %s\", http_ver_supported ? \"true\" : \"false\");\n    if (! http_ver_supported)\n    {\n      mhd_probe_fmt(\"DECISION: HTTP version not supported -> return MHD_CONN_MUST_CLOSE (http_ver=%d)\", (int)c->rq.http_ver);\n      return MHD_CONN_MUST_CLOSE;\n    }\n  }\n\n  /* Evaluate connection: close header once, log and reuse result */\n  {\n    int has_conn_close = MHD_lookup_header_s_token_ci (c,\n                                                       MHD_HTTP_HEADER_CONNECTION,\n                                                       \"close\");\n    mhd_probe_fmt(\"CHECK: MHD_lookup_header_s_token_ci(..., \\\"close\\\") -> %s\", has_conn_close ? \"true\" : \"false\");\n    if (has_conn_close)\n    {\n      mhd_probe_fmt(\"DECISION: Connection: close header present -> return MHD_CONN_MUST_CLOSE\");\n      return MHD_CONN_MUST_CLOSE;\n    }\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    /* Evaluate Keep-Alive token once and reuse */\n    int has_keep_alive = MHD_lookup_header_s_token_ci (connection,\n                                                       MHD_HTTP_HEADER_CONNECTION,\n                                                       \"Keep-Alive\");\n    mhd_probe_fmt(\"BRANCH: HTTP/1.0 path: rq.http_ver=%d, response->flags=0x%08x, has_keep_alive=%s\",\n                  (int)connection->rq.http_ver,\n                  (unsigned int)connection->rp.response->flags,\n                  has_keep_alive ? \"true\" : \"false\");\n\n    if (has_keep_alive)\n    {\n      mhd_probe_fmt(\"DECISION: Keep-Alive header present on HTTP/1.0 -> return MHD_CONN_USE_KEEPALIVE\");\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_probe_fmt(\"DECISION: HTTP/1.0 without Keep-Alive -> return MHD_CONN_MUST_CLOSE\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_probe_fmt(\"DECISION: HTTP/1.1 compatible -> return MHD_CONN_USE_KEEPALIVE (http_ver=%d)\", (int)c->rq.http_ver);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_probe_fmt(\"DEFAULT DECISION: return MHD_CONN_MUST_CLOSE\");\n  return MHD_CONN_MUST_CLOSE;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for keepalive_possible. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. With mhd_assert defined as ((void)0) the assertion macro expands to a no-op and the expression inside the mhd_assert invocation is not evaluated or executed at runtime. MISRA Rule 2.2 concerns code that is executed but could be removed without changing program behaviour. In this case there is no executed operation to remove (the macro expands away), so there is no dead code according to the rule. \n\nNote: if mhd_assert were defined differently (for example as ((void)(expr)) so that expr is evaluated but the result ignored), then the evaluation could be an executed operation; whether that constitutes dead code would depend on whether removing that evaluation changes behaviour (e.g. if expr has side effects). But under the given scenario (mhd_assert -> ((void)0)) the agent A's claim is incorrect."
}