{
  "user_message": "An agent A claimed that the following keepalive_possible code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of keepalive_possible.\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro mhd_assert is defined as ((void)0) in the provided code, so the statement mhd_assert(NULL != r); expands to a no-op. This statement is executed but has no effect; removing it would not change program behaviour in this build. Therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2. (Note: if in some other build configuration mhd_assert expands to an active check, then it would not be dead in that configuration; given the provided definition, however, it is dead.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log_state(const char *tag,\n                                struct MHD_Connection *c,\n                                struct MHD_Response *r,\n                                const char *extra)\n{\n    FILE *f = fopen(\"/tmp/logs/146.txt\", \"a\");\n    if (f == NULL)\n        return; /* best-effort logging; do not change program behaviour */\n\n    fprintf(f, \"[%s] tag=%s c=%p r=%p keepalive=%d stop_with_error=%d discard_request=%d read_closed=%d rq.http_ver=%d rp.response.flags=0x%08x rp.response.flags_auto=0x%08x upgrade_handler=%p extra=%s\\n\",\n            __func__, tag, (void *)c, (void *)r,\n            (int)c->keepalive,\n            (int)c->stop_with_error,\n            (int)c->discard_request,\n            (int)c->read_closed,\n            (int)c->rq.http_ver,\n            (r ? (unsigned int)r->flags : 0u),\n            (r ? (unsigned int)r->flags_auto : 0u),\n            (r ? (void *)r->upgrade_handler : NULL),\n            (extra ? extra : \"\"));\n    fclose(f);\n}\nstatic const char *mhd_probe_reason(enum MHD_ConnKeepAlive v)\n{\n    if (v == MHD_CONN_MUST_CLOSE) return \"MUST_CLOSE\";\n    if (v == MHD_CONN_USE_KEEPALIVE) return \"USE_KEEPALIVE\";\n    if (v == MHD_CONN_MUST_UPGRADE) return \"MUST_UPGRADE\";\n    return \"UNKNOWN\";\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log state before the assertion so callers can observe the value(s). */\n  mhd_probe_log_state(\"before_assert\", c, r, \"assert about to be evaluated\");\n\n  mhd_assert (NULL != r);\n\n  /* Log state after the assertion to capture that the assertion did not\n     mutate state in this build. This provides evidence that the statement\n     is effectively a no-op here (it doesn't change the recorded state). */\n  mhd_probe_log_state(\"after_assert\", c, r, \"assert executed\");\n\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_probe_log_state(\"return\", c, r, \"early MUST_CLOSE due to keepalive flag\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    mhd_probe_log_state(\"return\", c, r, \"MUST_UPGRADE due to upgrade_handler\");\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  mhd_probe_log_state(\"post_upgrade_check\", c, r, \"checked stop_with_error/discard_request\");\n\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_probe_log_state(\"return\", c, r, \"MUST_CLOSE due to read_closed or discard_request\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_probe_log_state(\"return\", c, r, \"MUST_CLOSE due to HTTP_1_0_COMPATIBLE_STRICT flag\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_probe_log_state(\"return\", c, r, \"MUST_CLOSE due to RAF_HAS_CONNECTION_CLOSE flag\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    mhd_probe_log_state(\"return\", c, r, \"MUST_CLOSE due to unsupported HTTP version\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Preserve original single-call semantics: evaluate once and log result. */\n  {\n    int found = MHD_lookup_header_s_token_ci (c,\n                                              MHD_HTTP_HEADER_CONNECTION,\n                                              \"close\");\n    mhd_probe_log_state(\"header_check_connection_close\", c, r, found ? \"found 'close'\" : \"no 'close'\");\n    if (found)\n    {\n      mhd_probe_log_state(\"return\", c, r, \"MUST_CLOSE due to Connection: close header\");\n      return MHD_CONN_MUST_CLOSE;\n    }\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    int found = MHD_lookup_header_s_token_ci (connection,\n                                              MHD_HTTP_HEADER_CONNECTION,\n                                              \"Keep-Alive\");\n    mhd_probe_log_state(\"http1.0_keepalive_check\", c, r, found ? \"found Keep-Alive\" : \"no Keep-Alive\");\n    if (found)\n    {\n      mhd_probe_log_state(\"return\", c, r, \"USE_KEEPALIVE for HTTP/1.0\");\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_probe_log_state(\"return\", c, r, \"MUST_CLOSE for HTTP/1.0 (no Keep-Alive)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_probe_log_state(\"return\", c, r, \"USE_KEEPALIVE due to HTTP/1.1 compatibility\");\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_probe_log_state(\"return\", c, r, \"default MUST_CLOSE\");\n  return MHD_CONN_MUST_CLOSE;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for keepalive_possible. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. With the provided definition mhd_assert -> ((void)0) the statement mhd_assert(NULL != r); expands to a no-op expression statement that has no effect at runtime; removing it would not change program behaviour in that build, so it meets the definition of \"dead code\" in MISRA C 2023 Rule 2.2. Caveats: this conclusion depends on the concrete project configuration \u2014 if mhd_assert is defined differently in some builds (i.e. expands to an active runtime check) then the statement would not be dead in those builds. Also note that if the asserted expression had side-effects the statement would not be dead; in this case it does not. The empty test log is unrelated to the reasoning about the assertion being a no-op."
}