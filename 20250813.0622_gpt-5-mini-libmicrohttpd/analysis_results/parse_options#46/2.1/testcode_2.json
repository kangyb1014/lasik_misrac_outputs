{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe switch contains a case for MHD_OPTION_END that can never be executed because the surrounding loop tests while (MHD_OPTION_END != (opt = ...)) and therefore never enters the switch with opt == MHD_OPTION_END. For example the fragment inside the MHD_OPTION_ARRAY handling (and similarly the final outer switch default) has \u2018case MHD_OPTION_END: /* Not possible */\u2019 which is unreachable. This violates MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/369.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/369.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/369.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    {\n        time_t t = time(NULL);\n        struct tm tm;\n        if (localtime_r(&t, &tm) != NULL)\n        {\n            fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                    tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n                    tm.tm_hour, tm.tm_min, tm.tm_sec);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  probe_log(\"parse_options ENTRY: daemon=%p params=%p\", (void *)daemon, (void *)params);\n  va_start (ap, params);\n  probe_log(\"parse_options: va_list started\");\n\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  probe_log(\"parse_options: parse_options_va returned ret=%d\", (int)ret);\n  va_end (ap);\n  probe_log(\"parse_options EXIT\");\n  return ret;\n}\n"
}