{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts oa[i].value to (void *) and passes it to parse_options, which can result in dropping a const qualifier. If oa[i].value (or oa[i].ptr_value) actually holds a pointer to a const-qualified object (e.g. const char * or const struct sockaddr *), the explicit cast to (void *) and the subsequent use as a non-const parameter discards const qualification \u2014 violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper logging routine that appends a single formatted line to the log file. */\nstatic void log_append(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/371.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fputc('\\n', f);\n  va_end(ap);\n\n  fclose(f);\n}\n\nstatic void probe_before(void *daemon, void *params, int has_first, void *first)\n{\n  /* Log entry with pointers and an indication whether we successfully read a first vararg. */\n  log_append(\"parse_options: enter daemon=%p params=%p has_first=%d first=%p\",\n             daemon, params, has_first, first);\n}\n\nstatic void probe_after(int ret)\n{\n  log_append(\"parse_options: exit ret=%d\", ret);\n}\n\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n\n  /*\n   * Best-effort probe of the first variadic argument (if any).\n   * We copy the va_list so we do not disturb the original list passed\n   * to parse_options_va; this preserves original logic.\n   * Note: attempting to read a variadic argument when none were passed\n   * is undefined behavior in C. This probe is a best-effort diagnostic\n   * intended for use in the specific scenario where callers pass at\n   * least one pointer argument (as in the reported violation path).\n   */\n  {\n    va_list ap_copy;\n    void *first_ptr = NULL;\n    int has_first = 0;\n\n    va_copy (ap_copy, ap);\n    /* try to read one pointer argument (best-effort). */\n    first_ptr = va_arg (ap_copy, void *);\n    has_first = 1;\n    va_end (ap_copy);\n\n    probe_before ((void *)daemon, (void *)params, has_first, first_ptr);\n  }\n\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  probe_after ((int) ret);\n\n  va_end (ap);\n  return ret;\n}\n"
}