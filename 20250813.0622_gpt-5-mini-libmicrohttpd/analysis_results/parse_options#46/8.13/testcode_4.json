{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes oa[i].ptr_value (used for options that are const pointers, e.g. MHD_OPTION_HTTPS_MEM_KEY expects a const char *) through the variadic parse_options call. If MHD_OptionItem::ptr_value is declared as a non-const pointer (e.g. void *), the const qualification is effectively lost when the pointer is stored/propagated and then read with va_arg as a const pointer. This drops const on a pointer that should be const-qualified and therefore violates MISRA C 2023 Rule 8.13. The correct fix is to declare the option-item pointer as a const-qualified pointer (e.g. const void * or the appropriate const type) so const is preserved.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "static enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Attempt to open a log file for probes. If logging fails we still\n     preserve original behavior. */\n  FILE *logf = fopen(\"/tmp/logs/371.txt\", \"a\");\n\n  if (logf != NULL)\n  {\n    /* Log entry and key pointers so callers can see control flow. */\n    fprintf(logf, \"parse_options: entry daemon=%p params=%p\\n\",\n            (void *) daemon, (void *) params);\n\n    /* Start varargs and take a copy so we can inspect the raw va_list\n       representation without consuming the original. This preserves\n       the va_list passed to parse_options_va. */\n    va_start (ap, params);\n    {\n      va_list ap_copy;\n\n      va_copy (ap_copy, ap);\n\n      /* Dump raw bytes of the copied va_list to help reproduce how\n         pointer values are propagated through the variadic call.\n         The representation of va_list is implementation-defined; this\n         dump is intended for debugging on the target system. */\n      {\n        unsigned char *p = (unsigned char *) &ap_copy;\n        unsigned int n = (unsigned int) sizeof (ap_copy);\n\n        fprintf(logf, \"parse_options: va_list raw (%u bytes) =\", n);\n        for (unsigned int i = 0U; i < n; ++i)\n        {\n          fprintf(logf, \" %02x\", (unsigned int) p[i]);\n        }\n        fprintf(logf, \"\\n\");\n      }\n\n      va_end (ap_copy);\n    }\n\n    /* Call the original va_list-taking implementation. */\n    ret = parse_options_va (daemon,\n                            params,\n                            ap);\n\n    /* Log returned result. */\n    fprintf(logf, \"parse_options: parse_options_va returned %d\\n\", (int) ret);\n\n    va_end (ap);\n    fclose (logf);\n\n    return ret;\n  }\n\n  /* Fallback: if logging not available, preserve original behavior. */\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n"
}