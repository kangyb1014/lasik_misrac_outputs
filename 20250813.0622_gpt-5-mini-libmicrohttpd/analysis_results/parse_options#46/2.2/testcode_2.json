{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe 'if (1)' test is an always-true conditional, so the conditional evaluation is an executed operation that can be removed without changing program behaviour. The 'if (1)' wrapper around the variable declaration/block is therefore dead code (a redundant executed operation).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Minimal stand-ins so this snippet is self-contained and compilable.\n   In the real project these types and parse_options_va will be provided\n   by the build; these stand-ins are only for local testing. */\n\nenum MHD_Result { MHD_RESULT_OK = 0, MHD_RESULT_ERROR = 1 };\nstruct MHD_Daemon { int dummy; };\nstruct MHD_InterimParams_ { int dummy; };\n\n/* Probe helpers: write control-flow/state logs to /tmp/logs/370.txt */\nstatic void probe_log_open_and_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm)) {\n        char buf[64];\n        if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n            fprintf(f, \"%s - \", buf);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* A minimal stub for parse_options_va so this snippet links and can run\n   standalone. In the real program the real parse_options_va will be used.\n   The stub logs its invocation and returns a simple result. */\nstatic enum MHD_Result\nparse_options_va (struct MHD_Daemon *daemon,\n                  struct MHD_InterimParams_ *params,\n                  va_list ap)\n{\n    (void) ap; /* we do not inspect the varargs in the stub */\n\n    probe_log_open_and_write(\"parse_options_va: entered. daemon=%p params=%p\",\n                             (void *)daemon, (void *)params);\n\n    /* Simulate doing some work and returning a result. */\n    probe_log_open_and_write(\"parse_options_va: returning %d\", (int)MHD_RESULT_OK);\n    return MHD_RESULT_OK;\n}\n\n/* Modified parse_options with probes around its control flow and state. */\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Log entry and pointer/state information */\n  probe_log_open_and_write(\"parse_options: entered. daemon=%p params=%p\",\n                           (void *)daemon, (void *)params);\n\n  va_start (ap, params);\n  probe_log_open_and_write(\"parse_options: after va_start\");\n\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  probe_log_open_and_write(\"parse_options: parse_options_va returned %d\", (int)ret);\n  va_end (ap);\n  probe_log_open_and_write(\"parse_options: after va_end, returning %d\", (int)ret);\n  return ret;\n}\n"
}