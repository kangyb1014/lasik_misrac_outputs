{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) 0;' in the branch 'if (0 == daemon->worker_pool_size)' (inside parse_options_va handling MHD_OPTION_THREAD_POOL_SIZE) is an executed no-op. Removing this statement would not affect program behaviour, so it constitutes dead code according to MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helpers: write control-flow and state info to /tmp/logs/370.txt.\n   These functions are static and used by parse_options so they are not dead code.\n*/\nstatic void probe_log_entry(const struct MHD_Daemon *daemon,\n                            const struct MHD_InterimParams_ *params)\n{\n  FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log entry and pointer values for daemon and params. */\n    (void) fprintf(f, \"parse_options: ENTRY daemon=%p params=%p\\n\",\n                   (const void *) daemon,\n                   (const void *) params);\n    (void) fclose(f);\n  }\n}\n\nstatic void probe_log_va_started(const struct MHD_Daemon *daemon)\n{\n  FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n  if (f != NULL)\n  {\n    (void) fprintf(f, \"parse_options: va_list started for daemon=%p\\n\",\n                   (const void *) daemon);\n    (void) fclose(f);\n  }\n}\n\nstatic void probe_log_exit(const struct MHD_Daemon *daemon, int ret_val)\n{\n  FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n  if (f != NULL)\n  {\n    (void) fprintf(f, \"parse_options: EXIT daemon=%p ret=%d\\n\",\n                   (const void *) daemon,\n                   ret_val);\n    (void) fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Log entry and context before processing the variable args. */\n  probe_log_entry(daemon, params);\n\n  va_start (ap, params);\n  /* Log that va_list processing has started. */\n  probe_log_va_started(daemon);\n\n  /* Preserve original logic: call the va_list-based parser. */\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  va_end (ap);\n\n  /* Log the result before returning so callers can trace the control flow. */\n  probe_log_exit(daemon, (int) ret);\n  return ret;\n}\n"
}