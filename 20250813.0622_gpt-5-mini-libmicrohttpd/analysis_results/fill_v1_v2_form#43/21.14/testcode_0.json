{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nIn add_response_header_connection the assertion mhd_assert(already_has_close == (0 == memcmp(hdr->value, \"close\", 5)))); uses memcmp to compare hdr->value (a null-terminated header string) with the literal \"close\". Using memcmp to compare null-terminated strings violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_v2_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/350.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_v2_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_v2_form:\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1_V2, session->value_1,\n                        session->value_2);\n  if (0 > reply_len)\n    return MHD_NO; /* Internal error */\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n    return MHD_NO; /* Out-of-memory error */\n\n  if (reply_len != snprintf (reply,\n                             (size_t) ((size_t) reply_len + 1),\n                             FORM_V1_V2,\n                             session->value_1,\n                             session->value_2))\n  {\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL != response)\n  {\n    add_session_cookie (session, response);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    free (reply);\n    ret = MHD_NO;\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_v2_form code.\n",
  "test_code": "#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  va_list ap;\n  char buf[1024];\n  FILE *f;\n\n  va_start (ap, fmt);\n  (void) vsnprintf (buf, sizeof (buf), fmt, ap);\n  va_end (ap);\n\n  f = fopen (\"/tmp/logs/350.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf (f, \"%s\\n\", buf);\n    fclose (f);\n  }\n}\n\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  probe_log (\"ENTER fill_v1_v2_form: cls=%p mime=%s session=%p connection=%p\", cls, (mime != NULL) ? mime : \"(null)\", session, connection);\n  if (session != NULL)\n  {\n    probe_log (\"session->value_1=%s session->value_2=%s\",\n               (session->value_1 != NULL) ? session->value_1 : \"(null)\",\n               (session->value_2 != NULL) ? session->value_2 : \"(null)\");\n  }\n  else\n  {\n    probe_log (\"session is NULL\");\n  }\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1_V2, session->value_1,\n                        session->value_2);\n  probe_log (\"computed reply_len=%d\", reply_len);\n  if (0 > reply_len)\n  {\n    probe_log (\"snprintf for length failed: reply_len=%d -> returning MHD_NO\", reply_len);\n    return MHD_NO; /* Internal error */\n  }\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  probe_log (\"malloc reply=%p (size=%zu)\", reply, (size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n  {\n    probe_log (\"malloc returned NULL -> returning MHD_NO\");\n    return MHD_NO; /* Out-of-memory error */\n  }\n\n  if (reply_len != snprintf (reply,\n                             (size_t) ((size_t) reply_len + 1),\n                             FORM_V1_V2,\n                             session->value_1,\n                             session->value_2))\n  {\n    probe_log (\"snprintf into reply failed or wrote unexpected length. reply buffer=%p\", reply);\n    probe_log (\"reply (partial or invalid)='%s'\", (reply != NULL) ? reply : \"(null)\");\n    free (reply);\n    probe_log (\"freed reply and returning MHD_NO\");\n    return MHD_NO; /* printf error */\n  }\n\n  probe_log (\"reply formatted successfully. reply='%s'\", reply);\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  probe_log (\"MHD_create_response_from_buffer_with_free_callback returned response=%p\", response);\n  if (NULL != response)\n  {\n    probe_log (\"calling add_session_cookie(session=%p, response=%p)\", session, response);\n    add_session_cookie (session, response);\n\n    probe_log (\"calling MHD_add_response_header(response=%p, header=%s, mime=%s)\", response,\n               MHD_HTTP_HEADER_CONTENT_TYPE, (mime != NULL) ? mime : \"(null)\");\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      probe_log (\"MHD_add_response_header failed for response=%p\", response);\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n    }\n    else\n    {\n      probe_log (\"MHD_add_response_header succeeded for response=%p\", response);\n    }\n\n    probe_log (\"calling MHD_queue_response(connection=%p, MHD_HTTP_OK, response=%p)\", connection, response);\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    probe_log (\"MHD_queue_response returned %d\", (int) ret);\n    MHD_destroy_response (response);\n    probe_log (\"MHD_destroy_response called for response=%p\", response);\n  }\n  else\n  {\n    probe_log (\"response == NULL, freeing reply=%p and setting ret=MHD_NO\", reply);\n    free (reply);\n    ret = MHD_NO;\n  }\n\n  probe_log (\"EXIT fill_v1_v2_form ret=%d\", (int) ret);\n  return ret;\n}\n"
}