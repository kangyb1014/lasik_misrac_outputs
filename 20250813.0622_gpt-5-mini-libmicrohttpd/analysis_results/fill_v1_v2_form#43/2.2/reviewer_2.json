{
  "user_message": "An agent A claimed that the following fill_v1_v2_form code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of fill_v1_v2_form.\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1_V2, session->value_1,\n                        session->value_2);\n  if (0 > reply_len)\n    return MHD_NO; /* Internal error */\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n    return MHD_NO; /* Out-of-memory error */\n\n  if (reply_len != snprintf (reply,\n                             (size_t) ((size_t) reply_len + 1),\n                             FORM_V1_V2,\n                             session->value_1,\n                             session->value_2))\n  {\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL != response)\n  {\n    add_session_cookie (session, response);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    free (reply);\n    ret = MHD_NO;\n  }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement \u201c(void) cls;\u201d is a discarded-value expression with no side-effects. Removing this line would not change program behaviour, so it constitutes dead code under Rule 2.2 (the unused-parameter cast is executed but has no effect).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen (\"/tmp/logs/346.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n\n  /* Log entry and key state */\n  probe_log (\"enter fill_v1_v2_form: cls=%p, mime=%s, session=%p, connection=%p\",\n             cls,\n             (mime ? mime : \"(null)\"),\n             session,\n             connection);\n\n  if (session)\n  {\n    const char *v1 = session->value_1 ? session->value_1 : \"(null)\";\n    const char *v2 = session->value_2 ? session->value_2 : \"(null)\";\n    probe_log (\"session contents: value_1=%s, value_2=%s\", v1, v2);\n  }\n  else\n  {\n    probe_log (\"session is NULL\");\n  }\n\n  probe_log (\"about to execute discarded-value cast (void) cls; cls=%p\", cls);\n  (void) cls; /* Unused */\n  probe_log (\"after discarded-value cast (void) cls; cls still=%p\", cls);\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1_V2, session->value_1,\n                        session->value_2);\n  probe_log (\"computed reply_len=%d\", reply_len);\n\n  if (0 > reply_len)\n  {\n    probe_log (\"reply_len < 0: returning MHD_NO (internal error)\");\n    return MHD_NO; /* Internal error */\n  }\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n  {\n    probe_log (\"malloc failed: returning MHD_NO (out-of-memory)\");\n    return MHD_NO; /* Out-of-memory error */\n  }\n\n  if (reply_len != snprintf (reply,\n                             (size_t) ((size_t) reply_len + 1),\n                             FORM_V1_V2,\n                             session->value_1,\n                             session->value_2))\n  {\n    probe_log (\"snprintf wrote unexpected number of bytes: freeing reply and returning MHD_NO\");\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  probe_log (\"formatted reply successfully, reply_len=%d\", reply_len);\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL != response)\n  {\n    probe_log (\"created response object %p\", response);\n    add_session_cookie (session, response);\n    probe_log (\"added session cookie\");\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      probe_log (\"MHD_add_response_header failed for mime=%s; returning response without content type\",\n                 (mime ? mime : \"(null)\"));\n      /* return response without content type anyway ... */\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    probe_log (\"MHD_queue_response returned %d\", (int) ret);\n    MHD_destroy_response (response);\n    probe_log (\"destroyed response object\");\n  }\n  else\n  {\n    probe_log (\"MHD_create_response_from_buffer_with_free_callback returned NULL: freeing reply and setting ret=MHD_NO\");\n    free (reply);\n    ret = MHD_NO;\n  }\n\n  probe_log (\"exiting fill_v1_v2_form with ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for fill_v1_v2_form. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The statement \u201c(void) cls;\u201d is an executed, side-effect-free discarded-value expression: evaluating the pointer parameter produces no observable effect and removing the statement would not change the program's behaviour. That matches the wording of MISRA C 2023 Rule 2.2 (\u201cAny operation that is executed but whose removal would not affect program behaviour constitutes dead code\u201d), so the line is dead code under that rule.\n\nCaveats: if the expression had side-effects (e.g. involved a volatile object or a function call) it would not be dead; that is not the case here because cls is a plain pointer parameter. Also note that programmers commonly write (void)cls; to suppress compiler warnings about unused parameters \u2014 this is a compile-time concern and does not alter runtime behaviour, so it does not exempt the statement from Rule 2.2. If the line must be kept for documentation/API reasons, a documented MISRA deviation or an allowed annotation (e.g. compiler-specific unused attribute or an explanatory comment or using an unnamed parameter in the prototype/definition) should be used instead of leaving the no-op at runtime."
}