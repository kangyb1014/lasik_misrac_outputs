{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'const char *header' and 'const char *content' to add_response_entry. If add_response_entry is declared to take non-const pointer parameters (e.g. char *header, char *content), then the call discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. To fix: declare add_response_entry to accept const char * for these parameters (or otherwise avoid passing const data to non-const pointers).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/51.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe logging helper: write a concise trace to /tmp/logs/51.txt */\nstatic void mhd_log_probe(const char *stage,\n                          const struct MHD_Response *response,\n                          const char *header,\n                          const char *content,\n                          long extra)\n{\n  FILE *f = fopen(\"/tmp/logs/51.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"%s: response=%p header=%p(%s) content=%p(%s) extra=%ld flags_auto=0x%lx flags=0x%lx\\n\",\n            stage,\n            (const void *)response,\n            (const void *)header, (header != NULL) ? header : \"(null)\",\n            (const void *)content, (content != NULL) ? content : \"(null)\",\n            extra,\n            (unsigned long)((response != NULL) ? response->flags_auto : 0UL),\n            (unsigned long)((response != NULL) ? response->flags : 0UL));\n    fclose(f);\n  }\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Log entry */\n  mhd_log_probe(\"ENTRY\", response, header, content, 0);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    mhd_log_probe(\"BRANCH: CONNECTION\", response, header, content, 0);\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_log_probe(\"BRANCH: TRANSFER_ENCODING_ENTER\", response, header, content, 0);\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      mhd_log_probe(\"REJECT: TRANSFER_ENCODING_NOT_CHUNKED\", response, header, content, 0);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      mhd_log_probe(\"ALREADY_HAS_CHUNKED\", response, header, content, 0);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      mhd_log_probe(\"REJECT: HAS_CONTENT_LENGTH_NO_INSANITY\", response, header, content, 0);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n\n    /* Probe before calling add_response_entry: record pointers and flags. */\n    mhd_log_probe(\"CALL: add_response_entry (TRANSFER_ENCODING)\", response, header, content, 0);\n    enum MHD_Result _res_te = add_response_entry (response,\n                                                  MHD_HEADER_KIND,\n                                                  header,\n                                                  content);\n    mhd_log_probe(\"RET: add_response_entry (TRANSFER_ENCODING)\", response, header, content, (long)_res_te);\n    if (MHD_NO != _res_te)\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_log_probe(\"SUCCESS: TRANSFER_ENCODING_ADDED\", response, header, content, (long)_res_te);\n      return MHD_YES;\n    }\n    mhd_log_probe(\"FAIL: add_response_entry (TRANSFER_ENCODING)\", response, header, content, (long)_res_te);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_log_probe(\"BRANCH: DATE_ENTER\", response, header, content, 0);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ (\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      mhd_log_probe(\"DATE: removed existing date header\", response, header, content, 0);\n    }\n\n    mhd_log_probe(\"CALL: add_response_entry (DATE)\", response, header, content, 0);\n    enum MHD_Result _res_date = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n    mhd_log_probe(\"RET: add_response_entry (DATE)\", response, header, content, (long)_res_date);\n    if (MHD_NO != _res_date)\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_log_probe(\"SUCCESS: DATE_ADDED\", response, header, content, (long)_res_date);\n      return MHD_YES;\n    }\n    mhd_log_probe(\"FAIL: add_response_entry (DATE)\", response, header, content, (long)_res_date);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_log_probe(\"BRANCH: CONTENT_LENGTH_ENTER\", response, header, content, 0);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      mhd_log_probe(\"CALL: add_response_entry (CONTENT_LENGTH)\", response, header, content, 0);\n      enum MHD_Result _res_cl = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n      mhd_log_probe(\"RET: add_response_entry (CONTENT_LENGTH)\", response, header, content, (long)_res_cl);\n      if (MHD_NO != _res_cl)\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_log_probe(\"SUCCESS: CONTENT_LENGTH_ADDED\", response, header, content, (long)_res_cl);\n        return MHD_YES;\n      }\n    }\n    mhd_log_probe(\"EXIT: CONTENT_LENGTH_NOT_ADDED\", response, header, content, 0);\n    return MHD_NO;\n  }\n\n  /* Default case: log the call and result of add_response_entry */\n  mhd_log_probe(\"CALL: add_response_entry (DEFAULT)\", response, header, content, 0);\n  enum MHD_Result _res_def = add_response_entry (response,\n                                                 MHD_HEADER_KIND,\n                                                 header,\n                                                 content);\n  mhd_log_probe(\"RET: add_response_entry (DEFAULT)\", response, header, content, (long)_res_def);\n  return _res_def;\n}\n"
}