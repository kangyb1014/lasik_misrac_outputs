{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The mhd_assert macro is defined as ((void)0). The statement mhd_assert(NULL != key); therefore expands to a no-op (a void expression statement) that has no effect at runtime; removing that statement would not change program behaviour, so it constitutes dead code (e.g. assertions compiled out in production).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/50.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  mhd_log_probe(\"ENTER: MHD_add_response_header response=%p header='%s' content='%s'\",\n                (void *) response,\n                (header != NULL) ? header : \"(null)\",\n                (content != NULL) ? content : \"(null)\");\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION)) {\n    mhd_log_probe(\"BRANCH: Connection header -> delegating to add_response_header_connection\");\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_log_probe(\"BRANCH: Transfer-Encoding header with content='%s'\",\n                  (content != NULL) ? content : \"(null)\");\n    if (! MHD_str_equal_caseless_ (content, \"chunked\")) {\n      mhd_log_probe(\"REJECT: Transfer-Encoding not 'chunked'\");\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)) {\n      mhd_log_probe(\"ALREADY_HAS: Transfer-Encoding 'chunked' present -> return YES\");\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ) {\n      mhd_log_probe(\"REJECT: Has Content-Length and no Insanity flag -> return NO\");\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_log_probe(\"ADDED: Transfer-Encoding 'chunked' -> set flag and return YES\");\n      return MHD_YES;\n    }\n    mhd_log_probe(\"FAILED: add_response_entry failed for Transfer-Encoding -> return NO\");\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_log_probe(\"BRANCH: Date header processing start\");\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      mhd_log_probe(\"INFO: response already has Date header -> attempt to fetch existing header\");\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_log_probe(\"PROBE: fetched hdr pointer = %p\", (void *) hdr);\n\n      /* Log state before assertion to capture scenario where assertion is a no-op */\n      mhd_log_probe(\"PROBE_STATE: response=%p flags=0x%08x flags_auto=0x%08x\",\n                    (void *) response,\n                    (unsigned) response->flags,\n                    (unsigned) response->flags_auto);\n\n      /* Original assertion kept to preserve behavior; it may be a no-op in some builds */\n      mhd_assert (NULL != hdr);\n\n      /* Log whether hdr is NULL after assertion (useful to evidence assertions compiled out) */\n      mhd_log_probe(\"POST_ASSERT: hdr is %s\", (hdr == NULL) ? \"NULL\" : \"non-NULL\");\n\n      /* The following operations are the original logic; we log just before each one. */\n      mhd_log_probe(\"ACTION: calling _MHD_remove_header with hdr=%p\", (void *) hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      mhd_log_probe(\"ACTION: removed and freed previous Date header\");\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_log_probe(\"ADDED: Date header added -> set flag and return YES\");\n      return MHD_YES;\n    }\n    mhd_log_probe(\"FAILED: add_response_entry failed for Date header -> return NO\");\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_log_probe(\"BRANCH: Content-Length header processing start\");\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      mhd_log_probe(\"INFO: conditions met for allowing custom Content-Length header\");\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_log_probe(\"ADDED: Content-Length header added -> set flag and return YES\");\n        return MHD_YES;\n      }\n      mhd_log_probe(\"FAILED: add_response_entry failed for Content-Length -> will return NO\");\n    }\n    return MHD_NO;\n  }\n\n  mhd_log_probe(\"FALLBACK: delegating to add_response_entry for header='%s'\",\n                (header != NULL) ? header : \"(null)\");\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Header-Type-A' content='value-a1'\nFALLBACK: delegating to add_response_entry for header='Header-Type-A'\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Header-Type-A' content='value-a2'\nFALLBACK: delegating to add_response_entry for header='Header-Type-A'\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Header-Type-A' content='value-a3'\nFALLBACK: delegating to add_response_entry for header='Header-Type-A'\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='a,b,c,d,e'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='i,k,l,m,n,o,p,close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='1,2,3,4,5,6,7,close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='8,9,close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='10,12'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close,other-token'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close, new-token'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close, one-long-token'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close, additional-token'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='token-1,token-2'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='token-3'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close, token-4'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: MHD_add_response_header response=0x55e78daba2a0 header='Connection' content='close, token-5'\nBRANCH: Connection header -> delegating to add_response_header_connection\nENTER: \n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The call mhd_assert(NULL != hdr); expands to ((void)0) under the described configuration, which is an executed void-expression statement that has no effect at runtime; removing that statement would not change program behaviour. Per MISRA C 2023 Rule 2.2 (no dead code), that constitutes dead code and thus the project violates the rule."
}