{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to mhd_assert is effectively a no-op because mhd_assert is defined as #define mhd_assert(ignore) ((void)0). Therefore the statement mhd_assert(already_has_close == (0 == memcmp(hdr->value, \"close\", 5))); executes no observable action (the memcmp/condition are not evaluated) and its removal would not change program behaviour in this build. This is an executed operation whose removal would not affect behaviour, i.e. dead code, so Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/50.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append logs to /tmp/logs/50.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  mhd_probe_log(\"MHD_add_response_header: entry header='%s' content='%s' response=%p\",\n                header ? header : \"(null)\", content ? content : \"(null)\", (void *)response);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION)) {\n    mhd_probe_log(\"branch: CONNECTION -> add_response_header_connection\");\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_probe_log(\"branch: TRANSFER-ENCODING content='%s'\", content ? content : \"(null)\");\n    if (! MHD_str_equal_caseless_ (content, \"chunked\")) {\n      mhd_probe_log(\"reject: transfer-encoding not 'chunked'\");\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    mhd_probe_log(\"transfer-encoding is 'chunked'\");\n    mhd_probe_log(\"flags_auto=0x%08x has_trans_enc_chunked=%d\",\n                  (unsigned)response->flags_auto,\n                  (int)!!(response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED));\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)) {\n      mhd_probe_log(\"already has chunked encoding -> MHD_YES\");\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    mhd_probe_log(\"flags_auto & HAS_CONTENT_LENGTH = %d, flags & INSANITY_HEADER_CONTENT_LENGTH = %d\",\n                  (int)!!(response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH),\n                  (int)!!(MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags));\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ) {\n      mhd_probe_log(\"reject: has Content-Length and no Insanity flag -> MHD_NO\");\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_probe_log(\"added transfer-encoding 'chunked', set HAS_TRANS_ENC_CHUNKED, return MHD_YES\");\n      return MHD_YES;\n    }\n    mhd_probe_log(\"failed to add transfer-encoding entry -> MHD_NO\");\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_probe_log(\"branch: DATE header, flags_auto=0x%08x\", (unsigned)response->flags_auto);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_probe_log(\"existing DATE hdr pointer=%p\", (void *)hdr);\n      mhd_probe_log(\"(probe) about to assert NULL != hdr (assert may be disabled in this build)\");\n      mhd_assert (NULL != hdr);\n      mhd_probe_log(\"(probe) after assert; hdr=%p value=%s\",\n                    (void *)hdr, hdr && hdr->value ? hdr->value : \"(null)\");\n      _MHD_remove_header (response, hdr);\n      mhd_probe_log(\"removed existing DATE header\");\n      if (NULL != hdr->value) {\n        mhd_probe_log(\"freeing hdr->value %p\", (void *)hdr->value);\n        free (hdr->value);\n      }\n      if (NULL != hdr->header) {\n        mhd_probe_log(\"freeing hdr->header %p\", (void *)hdr->header);\n        free (hdr->header);\n      }\n      mhd_probe_log(\"freeing hdr %p\", (void *)hdr);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_probe_log(\"added DATE header, set HAS_DATE_HDR -> MHD_YES\");\n      return MHD_YES;\n    }\n    mhd_probe_log(\"failed to add DATE header -> MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_probe_log(\"branch: CONTENT-LENGTH header flags=0x%08x flags_auto=0x%08x\",\n                  (unsigned)response->flags, (unsigned)response->flags_auto);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      mhd_probe_log(\"allowed: insanity or head-only response conditions met\");\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_probe_log(\"added CONTENT-LENGTH header, set HAS_CONTENT_LENGTH -> MHD_YES\");\n        return MHD_YES;\n      }\n      mhd_probe_log(\"failed to add CONTENT-LENGTH entry -> MHD_NO\");\n    }\n    else {\n      mhd_probe_log(\"not allowed to add custom Content-Length -> MHD_NO\");\n    }\n    return MHD_NO;\n  }\n\n  mhd_probe_log(\"default: add_response_entry for header='%s'\", header ? header : \"(null)\");\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}