{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to mhd_assert is dead code. mhd_assert is defined as #define mhd_assert(ignore) ((void)0), so the statement mhd_assert (buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1); compiles to a no-op. The operation is executed but its removal would not affect program behaviour, therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/50.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Probe: log entry and basic parameters */\n  {\n    FILE *log = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_add_response_header: entry response=%p header=\\\"%s\\\" content=\\\"%s\\\" flags_auto=0x%lx flags=0x%lx\\n\",\n              (void *)response,\n              (header != NULL) ? header : \"(null)\",\n              (content != NULL) ? content : \"(null)\",\n              (unsigned long)response->flags_auto,\n              (unsigned long)response->flags);\n      fclose(log);\n    }\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    FILE *log = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_add_response_header: path=CONNECTION -> add_response_header_connection\\n\");\n      fclose(log);\n    }\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    FILE *log = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_add_response_header: path=TRANSFER_ENCODING content=\\\"%s\\\" flags_auto=0x%lx flags=0x%lx\\n\",\n              (content != NULL) ? content : \"(null)\",\n              (unsigned long)response->flags_auto,\n              (unsigned long)response->flags);\n      fclose(log);\n    }\n\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n\n      /* Probe: log the retrieved hdr pointer and related state before the\n       * assertion (which may be a no-op in some builds). This records whether\n       * hdr is NULL, which demonstrates the state the (potentially removed)\n       * assertion would have checked. */\n      {\n        FILE *log = fopen(\"/tmp/logs/50.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"MHD_add_response_header: DATE branch found existing header hdr=%p response=%p flags_auto=0x%lx flags=0x%lx\\n\",\n                  (void *)hdr,\n                  (void *)response,\n                  (unsigned long)response->flags_auto,\n                  (unsigned long)response->flags);\n          if (hdr == NULL)\n            fprintf(log, \"MHD_add_response_header: NOTE: hdr is NULL (would trigger assertion if enabled)\\n\");\n          else\n          {\n            fprintf(log, \"MHD_add_response_header: hdr->header=%p hdr->value=%p\\n\",\n                    (void *)hdr->header, (void *)hdr->value);\n            if (hdr->value)\n              fprintf(log, \"MHD_add_response_header: hdr->value=\\\"%s\\\"\\n\", hdr->value);\n          }\n          fclose(log);\n        }\n      }\n\n      mhd_assert (NULL != hdr);\n\n      /* Probe: log just after the assertion to show control continues into\n       * removal code even if the assertion was a no-op in the build. */\n      {\n        FILE *log = fopen(\"/tmp/logs/50.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"MHD_add_response_header: after mhd_assert hdr=%p\\n\", (void *)hdr);\n          fclose(log);\n        }\n      }\n\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n      {\n        FILE *log = fopen(\"/tmp/logs/50.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"MHD_add_response_header: freeing hdr->value=%p\\n\", (void *)hdr->value);\n          fclose(log);\n        }\n        free (hdr->value);\n      }\n      FILE *log2 = fopen(\"/tmp/logs/50.txt\", \"a\");\n      if (log2)\n      {\n        fprintf(log2, \"MHD_add_response_header: freeing hdr->header=%p and hdr=%p\\n\",\n                (void *)hdr->header, (void *)hdr);\n        fclose(log2);\n      }\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    FILE *log = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_add_response_header: path=CONTENT_LENGTH flags_auto=0x%lx flags=0x%lx\\n\",\n              (unsigned long)response->flags_auto,\n              (unsigned long)response->flags);\n      fclose(log);\n    }\n\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  FILE *log_default = fopen(\"/tmp/logs/50.txt\", \"a\");\n  if (log_default)\n  {\n    fprintf(log_default, \"MHD_add_response_header: path=DEFAULT -> add_response_entry header=\\\"%s\\\" content=\\\"%s\\\"\\n\",\n            (header != NULL) ? header : \"(null)\",\n            (content != NULL) ? content : \"(null)\");\n    fclose(log_default);\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}