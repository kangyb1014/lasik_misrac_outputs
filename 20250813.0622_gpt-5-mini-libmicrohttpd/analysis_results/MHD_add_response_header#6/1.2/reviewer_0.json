{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro defines _MHD_EXTERN using GCC/Clang attribute syntax: '__attribute__((visibility(\"default\")))extern'. The use of '__attribute__((...))' is a compiler-specific language extension (documented in GCC/Clang), so this violates MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *log = fopen(\"/tmp/logs/48.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_add_response_header header='%s' content='%s' header_ptr=%p content_ptr=%p response_ptr=%p\\n\",\n            header ? header : \"(null)\", content ? content : \"(null)\", (void *)header, (void *)content, (void *)response);\n    if (response)\n      fprintf(log, \"  initial flags_auto=0x%08x flags=0x%08x\\n\",\n              (unsigned int)response->flags_auto, (unsigned int)response->flags);\n    fflush(log);\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    if (log) fprintf(log, \"BRANCH: CONNECTION header matched\\n\"), fflush(log);\n    enum MHD_Result _res = add_response_header_connection (response, content);\n    if (log) fprintf(log, \"RETURN (connection): %d\\n\", (int)_res), fclose(log);\n    return _res;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (log) fprintf(log, \"BRANCH: TRANSFER-ENCODING header matched\\n\"), fflush(log);\n\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      if (log) fprintf(log, \"  content != 'chunked' -> reject\\n\"), fclose(log);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      if (log) fprintf(log, \"  already has chunked encoding flag -> YES\\n\"), fclose(log);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (log) fprintf(log, \"  has Content-Length and no Insanity flag -> reject\\n\"), fclose(log);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n\n    if (log) fprintf(log, \"  attempting add_response_entry for chunked\\n\"), fflush(log);\n    enum MHD_Result _add_ret = add_response_entry (response,\n                                                   MHD_HEADER_KIND,\n                                                   header,\n                                                   content);\n    if (log) fprintf(log, \"  add_response_entry returned %d\\n\", (int)_add_ret), fflush(log);\n    if (MHD_NO != _add_ret)\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (log) fprintf(log, \"  set RAF_HAS_TRANS_ENC_CHUNKED flag -> RETURN YES\\n\"), fclose(log);\n      return MHD_YES;\n    }\n    if (log) fprintf(log, \"  add_response_entry failed -> RETURN NO\\n\"), fclose(log);\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (log) fprintf(log, \"BRANCH: DATE header matched\\n\"), fflush(log);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      if (log) fprintf(log, \"  existing date header present -> locating and removing\\n\"), fflush(log);\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      if (log) fprintf(log, \"  located existing date header at %p (value=%p)\\n\", (void *)hdr, (void *)hdr->value), fflush(log);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n      {\n        if (log) fprintf(log, \"  freeing hdr->value %p\\n\", (void *)hdr->value), fflush(log);\n        free (hdr->value);\n      }\n      if (log) fprintf(log, \"  freeing hdr->header %p and hdr %p\\n\", (void *)hdr->header, (void *)hdr), fflush(log);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (log) fprintf(log, \"  attempting add_response_entry for DATE\\n\"), fflush(log);\n    enum MHD_Result _add_ret2 = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n    if (log) fprintf(log, \"  add_response_entry returned %d\\n\", (int)_add_ret2), fflush(log);\n    if (MHD_NO != _add_ret2)\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (log) fprintf(log, \"  set RAF_HAS_DATE_HDR flag -> RETURN YES\\n\"), fclose(log);\n      return MHD_YES;\n    }\n    if (log) fprintf(log, \"  add_response_entry failed for DATE -> RETURN NO\\n\"), fclose(log);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if (log) fprintf(log, \"BRANCH: CONTENT-LENGTH header matched\\n\"), fflush(log);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (log) fprintf(log, \"  special-case allowed -> attempting add_response_entry for Content-Length\\n\"), fflush(log);\n      enum MHD_Result _add_ret3 = add_response_entry (response,\n                                                      MHD_HEADER_KIND,\n                                                      header,\n                                                      content);\n      if (log) fprintf(log, \"  add_response_entry returned %d\\n\", (int)_add_ret3), fflush(log);\n      if (MHD_NO != _add_ret3)\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (log) fprintf(log, \"  set RAF_HAS_CONTENT_LENGTH flag -> RETURN YES\\n\"), fclose(log);\n        return MHD_YES;\n      }\n    }\n    if (log) fprintf(log, \"  not allowed or add_response_entry failed -> RETURN NO\\n\"), fclose(log);\n    return MHD_NO;\n  }\n\n  if (log) fprintf(log, \"FALLTHROUGH: calling add_response_entry for general header\\n\"), fflush(log);\n  enum MHD_Result _final_ret = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n  if (log) fprintf(log, \"RETURN (final): %d\\n\", (int)_final_ret), fclose(log);\n  return _final_ret;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER: MHD_add_response_header header='Header-Type-A' content='value-a1' header_ptr=0x55afdec650b9 content_ptr=0x55afdec650b0 response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000000 flags=0x00000000\nFALLTHROUGH: calling add_response_entry for general header\nRETURN (final): 1\nENTER: MHD_add_response_header header='Header-Type-A' content='value-a2' header_ptr=0x55afdec650b9 content_ptr=0x55afdec650de response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000000 flags=0x00000000\nFALLTHROUGH: calling add_response_entry for general header\nRETURN (final): 1\nENTER: MHD_add_response_header header='Header-Type-A' content='value-a3' header_ptr=0x55afdec650b9 content_ptr=0x55afdec65118 response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000000 flags=0x00000000\nFALLTHROUGH: calling add_response_entry for general header\nRETURN (final): 1\nENTER: MHD_add_response_header header='Connection' content='a,b,c,d,e' header_ptr=0x55afdec65196 content_ptr=0x55afdec6518c response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000000 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='i,k,l,m,n,o,p,close' header_ptr=0x55afdec65196 content_ptr=0x55afdec6522f response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000000 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='1,2,3,4,5,6,7,close' header_ptr=0x55afdec65196 content_ptr=0x55afdec652eb response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000000 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='8,9,close' header_ptr=0x55afdec65196 content_ptr=0x55afdec6531a response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000003 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='10,12' header_ptr=0x55afdec65196 content_ptr=0x55afdec653f1 response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000003 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='close' header_ptr=0x55afdec65196 content_ptr=0x55afdec654b3 response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000001 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='close' header_ptr=0x55afdec65196 content_ptr=0x55afdec654b3 response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000003 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='close' header_ptr=0x55afdec65196 content_ptr=0x55afdec654b3 response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000000 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='close' header_ptr=0x55afdec65196 content_ptr=0x55afdec654b3 response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000003 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='close,other-token' header_ptr=0x55afdec65196 content_ptr=0x55afdec65649 response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000000 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='close, new-token' header_ptr=0x55afdec65196 content_ptr=0x55afdec6566e response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000003 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='close, one-long-token' header_ptr=0x55afdec65196 content_ptr=0x55afdec656d5 response_ptr=0x55b01a3442a0\n  initial flags_auto=0x00000000 flags=0x00000000\nBRANCH: CONNECTION header matched\nRETURN (connection): 1\nENTER: MHD_add_response_header header='Connection' content='close' header_ptr=0x55afdec65196 content_ptr=0x55afdec654b3 response_ptr=\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The code uses the macro _MHD_EXTERN at the start of the function definition; Agent A states that this macro expands to '__attribute__((visibility(\"default\"))) extern'. The GCC/Clang __attribute__((...)) syntax is a documented compiler-specific language extension. MISRA C:2023 Rule 1.2 prohibits use of language extensions that are documented as extensions by the compiler. Therefore the presence of the __attribute__ usage (via the _MHD_EXTERN macro) constitutes a violation of Rule 1.2."
}