{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strchr(value, '\\r') / strchr(value, '\\n') without proving that 'value' is a valid, null\u2011terminated string (or non\u2011NULL). In MHD_add_response_header the 'content' pointer comes from the caller and is passed directly to add_response_header_connection, so if the caller supplies a non\u2011NULL pointer that is not NUL\u2011terminated (or supplies NULL), strchr will read beyond the object bounds (or dereference NULL). This can result in out\u2011of\u2011bounds accesses, so Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/55.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Logging helper: append textual information to /tmp/logs/55.txt. */\n  /* Keep minimal and safe: do not dereference content/header pointers. */\n  {\n    FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (NULL != ___mhd_log_f)\n    {\n      fprintf (___mhd_log_f,\n               \"MHD_add_response_header ENTRY: response=%p header=%p content=%p flags=%llu flags_auto=%llu\\n\",\n               (void *) response,\n               (void *) header,\n               (void *) content,\n               (unsigned long long) response->flags,\n               (unsigned long long) response->flags_auto);\n      fclose (___mhd_log_f);\n    }\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    /* Log the decision to take the CONNECTION branch. */\n    {\n      FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n      if (NULL != ___mhd_log_f)\n      {\n        fprintf (___mhd_log_f,\n                 \"BRANCH: CONNECTION chosen. content_ptr=%p content_is_null=%d\\n\",\n                 (void *) content,\n                 (content == NULL));\n        fclose (___mhd_log_f);\n      }\n    }\n\n    /* Preserve original behavior: forward to add_response_header_connection. */\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    /* Log entering TRANSFER_ENCODING branch and relevant flags */\n    {\n      FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n      if (NULL != ___mhd_log_f)\n      {\n        fprintf (___mhd_log_f,\n                 \"BRANCH: TRANSFER_ENCODING. content_ptr=%p content_is_null=%d flags=0x%llx flags_auto=0x%llx\\n\",\n                 (void *) content,\n                 (content == NULL),\n                 (unsigned long long) response->flags,\n                 (unsigned long long) response->flags_auto);\n        fclose (___mhd_log_f);\n      }\n    }\n\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n      if (NULL != ___mhd_log_f)\n      {\n        fprintf (___mhd_log_f,\n                 \"DECISION: TRANSFER_ENCODING denied: content != 'chunked' (content_ptr=%p)\\n\",\n                 (void *) content);\n        fclose (___mhd_log_f);\n      }\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n      if (NULL != ___mhd_log_f)\n      {\n        fprintf (___mhd_log_f,\n                 \"DECISION: Already has chunked encoding header.\\n\");\n        fclose (___mhd_log_f);\n      }\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n      if (NULL != ___mhd_log_f)\n      {\n        fprintf (___mhd_log_f,\n                 \"DECISION: Has Content-Length and no Insanity flag: deny TRANSFER_ENCODING. flags=0x%llx flags_auto=0x%llx\\n\",\n                 (unsigned long long) response->flags,\n                 (unsigned long long) response->flags_auto);\n        fclose (___mhd_log_f);\n      }\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n      if (NULL != ___mhd_log_f)\n      {\n        fprintf (___mhd_log_f,\n                 \"ACTION: Added TRANSFER_ENCODING 'chunked'. flags_auto now=0x%llx\\n\",\n                 (unsigned long long) response->flags_auto);\n        fclose (___mhd_log_f);\n      }\n      return MHD_YES;\n    }\n    FILE *___mhd_log_f2 = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (NULL != ___mhd_log_f2)\n    {\n      fprintf (___mhd_log_f2,\n               \"ACTION: Failed to add TRANSFER_ENCODING header (add_response_entry returned MHD_NO).\\n\");\n      fclose (___mhd_log_f2);\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n\n      /* Log that we are removing an existing DATE header and pointer values */\n      {\n        FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n        if (NULL != ___mhd_log_f)\n        {\n          fprintf (___mhd_log_f,\n                   \"ACTION: Removing existing DATE header: hdr=%p hdr->header=%p hdr->value=%p\\n\",\n                   (void *) hdr,\n                   (void *) hdr->header,\n                   (void *) hdr->value);\n          fclose (___mhd_log_f);\n        }\n      }\n\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n\n      /* Log completion of removal */\n      {\n        FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n        if (NULL != ___mhd_log_f)\n        {\n          fprintf (___mhd_log_f,\n                   \"ACTION: DATE header removed. flags_auto=%llu\\n\",\n                   (unsigned long long) response->flags_auto);\n          fclose (___mhd_log_f);\n        }\n      }\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n\n      FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n      if (NULL != ___mhd_log_f)\n      {\n        fprintf (___mhd_log_f,\n                 \"ACTION: Added DATE header. flags_auto now=0x%llx\\n\",\n                 (unsigned long long) response->flags_auto);\n        fclose (___mhd_log_f);\n      }\n      return MHD_YES;\n    }\n    FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (NULL != ___mhd_log_f)\n    {\n      fprintf (___mhd_log_f,\n               \"ACTION: Failed to add DATE header (add_response_entry returned MHD_NO).\\n\");\n      fclose (___mhd_log_f);\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Log entering CONTENT_LENGTH branch with flags */\n    {\n      FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n      if (NULL != ___mhd_log_f)\n      {\n        fprintf (___mhd_log_f,\n                 \"BRANCH: CONTENT_LENGTH. content_ptr=%p content_is_null=%d flags=0x%llx flags_auto=0x%llx\\n\",\n                 (void *) content,\n                 (content == NULL),\n                 (unsigned long long) response->flags,\n                 (unsigned long long) response->flags_auto);\n        fclose (___mhd_log_f);\n      }\n    }\n\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n\n        FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n        if (NULL != ___mhd_log_f)\n        {\n          fprintf (___mhd_log_f,\n                   \"ACTION: Added CONTENT_LENGTH header. flags_auto now=0x%llx\\n\",\n                   (unsigned long long) response->flags_auto);\n          fclose (___mhd_log_f);\n        }\n        return MHD_YES;\n      }\n    }\n    FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (NULL != ___mhd_log_f)\n    {\n      fprintf (___mhd_log_f,\n               \"ACTION: CONTENT_LENGTH branch exiting with MHD_NO.\\n\");\n      fclose (___mhd_log_f);\n    }\n    return MHD_NO;\n  }\n\n  /* Default case: log the fall-through and call add_response_entry as normal */\n  {\n    FILE *___mhd_log_f = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (NULL != ___mhd_log_f)\n    {\n      fprintf (___mhd_log_f,\n               \"FALLTHROUGH: calling add_response_entry for header=%p content=%p\\n\",\n               (void *) header,\n               (void *) content);\n      fclose (___mhd_log_f);\n    }\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}