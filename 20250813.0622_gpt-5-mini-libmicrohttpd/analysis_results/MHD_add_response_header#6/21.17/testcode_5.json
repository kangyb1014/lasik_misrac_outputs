{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call content_len = strlen(content); only checks content != NULL (in add_response_entry) but does not ensure the pointed object is NUL\u2011terminated or that strlen will not scan past the valid storage. If a caller provides a non\u2011terminated buffer (or a pointer into a buffer where no '\\0' occurs within the object bounds), strlen will read beyond the object and thus violate MISRA C 2023 Rule 21.17. For example, if content points to a char array of known length that is not NUL-terminated (or to a slice inside a larger buffer without a terminating '\\0'), strlen(content) can overrun the buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/55.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper to log control flow and state without changing logic. */\nstatic void mhd_log_probe(const char *stage,\n                          struct MHD_Response *response,\n                          const char *header,\n                          const char *content)\n{\n  FILE *fp = fopen(\"/tmp/logs/55.txt\", \"a\");\n  if (NULL == fp)\n    return;\n  fprintf(fp, \"STAGE: %s\\n\", stage);\n  fprintf(fp, \"  response=%p\\n\", (void *) response);\n  fprintf(fp, \"  header_ptr=%p\\n\", (void *) header);\n  fprintf(fp, \"  header_str=%s\\n\", (header != NULL) ? header : \"(null)\");\n  fprintf(fp, \"  content_ptr=%p\\n\", (void *) content);\n  if (NULL != response)\n  {\n    fprintf(fp, \"  flags=0x%llx\\n\", (unsigned long long) response->flags);\n    fprintf(fp, \"  flags_auto=0x%llx\\n\", (unsigned long long) response->flags_auto);\n  }\n  fprintf(fp, \"\\n\");\n  fclose(fp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  mhd_log_probe(\"entry\", response, header, content);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    mhd_log_probe(\"branch_connection\", response, header, content);\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_log_probe(\"branch_transfer_encoding_enter\", response, header, content);\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      mhd_log_probe(\"transfer_encoding_not_chunked\", response, header, content);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      mhd_log_probe(\"transfer_encoding_already_has_chunked\", response, header, content);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      mhd_log_probe(\"transfer_encoding_conflict_with_content_length\", response, header, content);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    {\n      enum MHD_Result _rv;\n      mhd_log_probe(\"transfer_encoding_before_add_entry\", response, header, content);\n      _rv = add_response_entry (response,\n                                MHD_HEADER_KIND,\n                                header,\n                                content);\n      mhd_log_probe(\"transfer_encoding_after_add_entry\", response, header, content);\n      if (MHD_NO != _rv)\n      {\n        response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n        mhd_log_probe(\"transfer_encoding_added_chunked\", response, header, content);\n        return MHD_YES;\n      }\n      mhd_log_probe(\"transfer_encoding_failed_add_entry\", response, header, content);\n      return MHD_NO;\n    }\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_log_probe(\"branch_date_enter\", response, header, content);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      mhd_log_probe(\"branch_date_removed_existing\", response, header, content);\n    }\n    {\n      enum MHD_Result _rv;\n      mhd_log_probe(\"date_before_add_entry\", response, header, content);\n      _rv = add_response_entry (response,\n                                MHD_HEADER_KIND,\n                                header,\n                                content);\n      mhd_log_probe(\"date_after_add_entry\", response, header, content);\n      if (MHD_NO != _rv)\n      {\n        response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n        mhd_log_probe(\"date_added\", response, header, content);\n        return MHD_YES;\n      }\n      mhd_log_probe(\"date_failed_add_entry\", response, header, content);\n      return MHD_NO;\n    }\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_log_probe(\"branch_content_length_enter\", response, header, content);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      enum MHD_Result _rv;\n      mhd_log_probe(\"content_length_before_add_entry\", response, header, content);\n      _rv = add_response_entry (response,\n                                MHD_HEADER_KIND,\n                                header,\n                                content);\n      mhd_log_probe(\"content_length_after_add_entry\", response, header, content);\n      if (MHD_NO != _rv)\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_log_probe(\"content_length_added\", response, header, content);\n        return MHD_YES;\n      }\n    }\n    mhd_log_probe(\"content_length_not_allowed_or_failed\", response, header, content);\n    return MHD_NO;\n  }\n\n  /* Default path */\n  {\n    enum MHD_Result _rv;\n    mhd_log_probe(\"default_before_add_entry\", response, header, content);\n    _rv = add_response_entry (response,\n                              MHD_HEADER_KIND,\n                              header,\n                              content);\n    mhd_log_probe(\"default_after_add_entry\", response, header, content);\n    return _rv;\n  }\n}\n"
}