{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes username and realm directly to strlen() without any runtime validation. If the caller supplies a NULL pointer or a char buffer that is not NUL-terminated, strlen(username) or strlen(realm) will read past the object bounds (or dereference NULL), causing undefined behavior. The function does not perform checks (and any mhd_assert in helper code is a debug-only check), so this use can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_new_user_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_new_user_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_new_user_entry:\n```c\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n    return 0; /* No more space to add new entry */\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n  if (MHD_NO != res)\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n\n  if (MHD_NO == res)\n    return 0; /* Failure exit point */\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified add_new_user_entry code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append useful runtime information to /tmp/logs/335.txt */\nstatic void\nlog_probe(const char *stage,\n          const char *const username,\n          const char *const password,\n          const char *const realm,\n          int allow_area_1,\n          int allow_area_2,\n          int local_user_ids_used,\n          int res_val)\n{\n  FILE *f = fopen(\"/tmp/logs/335.txt\", \"a\");\n  if (f == NULL)\n    return; /* best-effort logging, do not change program behavior */\n\n  /* Log the stage and basic pointers/state. Do NOT dereference pointers here\n     except to check for NULL. This keeps the probe from introducing extra\n     out-of-bounds accesses. */\n  fprintf(f, \"[add_new_user_entry] stage=%s\\n\", stage);\n  fprintf(f, \"  user_ids_used=%d allow_area_1=%d allow_area_2=%d\\n\",\n          local_user_ids_used, allow_area_1, allow_area_2);\n  fprintf(f, \"  username_ptr=%p realm_ptr=%p password_ptr=%p\\n\",\n          (const void *) username, (const void *) realm, (const void *) password);\n\n  if (username == NULL)\n    fprintf(f, \"  username: NULL\\n\");\n  else\n    fprintf(f, \"  username: non-NULL (content not inspected by probe)\\n\");\n\n  if (realm == NULL)\n    fprintf(f, \"  realm: NULL\\n\");\n  else\n    fprintf(f, \"  realm: non-NULL (content not inspected by probe)\\n\");\n\n  if (password == NULL)\n    fprintf(f, \"  password: NULL\\n\");\n  else\n    fprintf(f, \"  password: non-NULL (content not inspected by probe)\\n\");\n\n  /* Log the numeric result code if available (use -1 when unknown). */\n  fprintf(f, \"  res=%d\\n\", res_val);\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n\n  /* Log entry to function with initial state. Use -1 for res (not set yet). */\n  log_probe(\"entry\", username, password, realm,\n            allow_area_1, allow_area_2, (int) user_ids_used, -1);\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used) {\n    log_probe(\"no_space\", username, password, realm,\n              allow_area_1, allow_area_2, (int) user_ids_used, -1);\n    return 0; /* No more space to add new entry */\n  }\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  /* Before invoking digest calculation, record the fact that the code is\n     about to call into functions that will consume username/realm/password.\n     The probe deliberately does not attempt to read the strings themselves\n     (only logs pointer presence) to avoid causing additional out-of-bounds\n     behavior. */\n  log_probe(\"before_MD5_userhash\", username, password, realm,\n            allow_area_1, allow_area_2, (int) user_ids_used, (int) res);\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n\n  log_probe(\"after_MD5_userhash\", username, password, realm,\n            allow_area_1, allow_area_2, (int) user_ids_used, (int) res);\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n  log_probe(\"after_MD5_userdigest\", username, password, realm,\n            allow_area_1, allow_area_2, (int) user_ids_used, (int) res);\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n\n  log_probe(\"after_SHA256_userhash\", username, password, realm,\n            allow_area_1, allow_area_2, (int) user_ids_used, (int) res);\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n  log_probe(\"after_SHA256_userdigest\", username, password, realm,\n            allow_area_1, allow_area_2, (int) user_ids_used, (int) res);\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n\n  log_probe(\"after_SHA512_256_userhash\", username, password, realm,\n            allow_area_1, allow_area_2, (int) user_ids_used, (int) res);\n\n  if (MHD_NO != res)\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n\n  log_probe(\"after_SHA512_256_userdigest\", username, password, realm,\n            allow_area_1, allow_area_2, (int) user_ids_used, (int) res);\n\n  if (MHD_NO == res) {\n    log_probe(\"failure_return\", username, password, realm,\n              allow_area_1, allow_area_2, (int) user_ids_used, (int) res);\n    return 0; /* Failure exit point */\n  }\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  log_probe(\"success_return\", username, password, realm,\n            allow_area_1, allow_area_2, (int) user_ids_used, (int) res);\n\n  return ! 0;\n}\n"
}