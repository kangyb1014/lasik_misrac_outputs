{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe helper digest_update_str(da, password) likely uses string.h functions (e.g. strlen or memcpy on a NUL-terminated C string) but calc_userdigest and callers do not validate the password pointer or its termination. In add_new_user_entry the password parameter is passed straight through to MHD_digest_auth_calc_userdigest -> calc_userdigest -> digest_update_str without a NULL check or explicit length. If password is NULL or points to a non NUL-terminated buffer, digest_update_str will call string functions (e.g. strlen) and thus access memory beyond the bounds of the referenced object (undefined behavior).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_new_user_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_new_user_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_new_user_entry:\n```c\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n    return 0; /* No more space to add new entry */\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n  if (MHD_NO != res)\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n\n  if (MHD_NO == res)\n    return 0; /* Failure exit point */\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified add_new_user_entry code.\n",
  "test_code": "static void\nlog_probe(const char *stage,\n          const char *const username,\n          const char *const password,\n          const char *const realm,\n          const void *buf,\n          size_t bufsiz,\n          enum MHD_Result res,\n          int allow1,\n          int allow2)\n{\n  FILE *f = fopen(\"/tmp/logs/335.txt\", \"a\");\n  if (!f)\n    return;\n\n  /*\n   * Do NOT attempt to print the strings themselves (e.g. with %s) because\n   * that could dereference invalid or non-NUL-terminated pointers and\n   * introduce undefined behavior. Log only pointer values and sizes/state.\n   */\n  fprintf(f,\n          \"add_new_user_entry: stage=%s username_ptr=%p realm_ptr=%p password_ptr=%p buf_ptr=%p buf_size=%zu res=%d allow1=%d allow2=%d\\n\",\n          stage,\n          (const void *) username,\n          (const void *) realm,\n          (const void *) password,\n          buf,\n          bufsiz,\n          (int) res,\n          allow1,\n          allow2);\n\n  fclose(f);\n}\n\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n\n  log_probe(\"entry\", username, password, realm, NULL, 0, (enum MHD_Result)0, allow_area_1, allow_area_2);\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used) {\n    log_probe(\"no_space\", username, password, realm, NULL, 0, (enum MHD_Result)0, allow_area_1, allow_area_2);\n    return 0; /* No more space to add new entry */\n  }\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  if (MHD_NO != res) {\n    log_probe(\"before_hash_md5\", username, password, realm, entry->userhash_md5, sizeof(entry->userhash_md5), res, allow_area_1, allow_area_2);\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n    log_probe(\"after_hash_md5\", username, password, realm, entry->userhash_md5, sizeof(entry->userhash_md5), res, allow_area_1, allow_area_2);\n  }\n  if (MHD_NO != res) {\n    log_probe(\"before_digest_md5\", username, password, realm, entry->userdigest_md5, sizeof(entry->userdigest_md5), res, allow_area_1, allow_area_2);\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n    log_probe(\"after_digest_md5\", username, password, realm, entry->userdigest_md5, sizeof(entry->userdigest_md5), res, allow_area_1, allow_area_2);\n  }\n\n  if (MHD_NO != res) {\n    log_probe(\"before_hash_sha256\", username, password, realm, entry->userhash_sha256, sizeof(entry->userhash_sha256), res, allow_area_1, allow_area_2);\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n    log_probe(\"after_hash_sha256\", username, password, realm, entry->userhash_sha256, sizeof(entry->userhash_sha256), res, allow_area_1, allow_area_2);\n  }\n  if (MHD_NO != res) {\n    log_probe(\"before_digest_sha256\", username, password, realm, entry->userdigest_sha256, sizeof(entry->userdigest_sha256), res, allow_area_1, allow_area_2);\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n    log_probe(\"after_digest_sha256\", username, password, realm, entry->userdigest_sha256, sizeof(entry->userdigest_sha256), res, allow_area_1, allow_area_2);\n  }\n\n  if (MHD_NO != res) {\n    log_probe(\"before_hash_sha512_256\", username, password, realm, entry->userhash_sha512_256, sizeof(entry->userhash_sha512_256), res, allow_area_1, allow_area_2);\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n    log_probe(\"after_hash_sha512_256\", username, password, realm, entry->userhash_sha512_256, sizeof(entry->userhash_sha512_256), res, allow_area_1, allow_area_2);\n  }\n  if (MHD_NO != res) {\n    log_probe(\"before_digest_sha512_256\", username, password, realm, entry->userdigest_sha512_256, sizeof(entry->userdigest_sha512_256), res, allow_area_1, allow_area_2);\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n    log_probe(\"after_digest_sha512_256\", username, password, realm, entry->userdigest_sha512_256, sizeof(entry->userdigest_sha512_256), res, allow_area_1, allow_area_2);\n  }\n\n  if (MHD_NO == res) {\n    log_probe(\"failure_exit\", username, password, realm, NULL, 0, res, allow_area_1, allow_area_2);\n    return 0; /* Failure exit point */\n  }\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  log_probe(\"success_exit\", username, password, realm, NULL, 0, res, allow_area_1, allow_area_2);\n\n  return ! 0;\n}\n"
}