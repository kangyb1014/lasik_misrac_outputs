{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf a caller passes a non\u2011NULL but non\u2011NUL\u2011terminated buffer as content (for example: char buf[4] = {'a','b','c','d'}; MHD_add_response_header(resp, \"X\", buf);), the call content_len = strlen(content) will scan past the buffer looking for a '\\0' and can read beyond the object's bounds, violating MISRA C 2023 Rule 21.17. (The code only checks content != NULL, not that the object is NUL-terminated or bounded.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified add_response_entry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Helper probe function: append human-readable events to /tmp/logs/527.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n    if (NULL == f)\n    {\n        /* If logging is not available, silently continue to preserve original behavior */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry and pointer values to help reproduce the violation scenario */\n  probe_log(\"enter add_response_entry: response=%p kind=%d header=%p content=%p\",\n            (void *) response, (int) kind, (const void *) header, (const void *) content);\n\n  if (NULL == content)\n  {\n    probe_log(\"content is NULL -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  /* Record that we are about to compute header length (preserve original logic) */\n  probe_log(\"calling strlen(header): header=%p\", (const void *) header);\n  header_len = strlen (header);\n  probe_log(\"header_len=%zu\", header_len);\n\n  /* Record that we are about to compute content length (this is where the reported violation may occur) */\n  probe_log(\"calling strlen(content): content=%p (this may read past the provided buffer if not NUL-terminated)\", (const void *) content);\n  content_len = strlen (content);\n  probe_log(\"content_len=%zu\", content_len);\n\n  /* Call the original helper and log result; preserve original return semantics */\n  enum MHD_Result result = add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n  probe_log(\"add_response_entry_n returned %d\", (int) result);\n  return result;\n}\n"
}