{
  "user_message": "An agent A claimed that the following serve_simple_form code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of serve_simple_form.\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form), form);\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n    /* return response without content type anyway ... */\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In MHD_queue_response the value parameter 'status_code' is modified in-place via 'status_code &= ~MHD_ICY_FLAG;'. Modifying a function parameter (even a value parameter) violates MISRA C 2023 Rule 17.8. A compliant fix is to copy the parameter to a local variable (e.g. 'unsigned int sc = status_code;') and modify that instead.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nlog_to_file (const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  /* Ensure directory exists. Ignore errors as this is only diagnostic. */\n  (void)mkdir(\"/tmp/logs\", 0755);\n\n  f = fopen(\"/tmp/logs/85.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  /* timestamp */\n  {\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n      char timestr[64];\n      (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n      fprintf(f, \"%s \", timestr);\n    }\n  }\n\n  /* pid for additional context */\n  fprintf(f, \"pid=%ld \", (long)getpid());\n\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\nstatic enum MHD_Result\nprobe_queue_response_wrapper (struct MHD_Connection *connection,\n                              unsigned int status_code,\n                              struct MHD_Response *response)\n{\n  enum MHD_Result r;\n  unsigned int sc = status_code; /* local copy to avoid modifying parameter */\n\n  log_to_file(\"Calling MHD_queue_response: connection=%p, response=%p, status_code=0x%X\",\n              (void *)connection, (void *)response, (unsigned)sc);\n\n  r = MHD_queue_response (connection, sc, response);\n\n  log_to_file(\"Returned from MHD_queue_response: result=%d (0x%X), status_code_local_after_call=0x%X\",\n              (int)r, (unsigned)r, (unsigned)sc);\n\n  return r;\n}\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* Log entry and key input state */\n  log_to_file(\"enter serve_simple_form: cls=%p, mime=%s, session=%p, connection=%p, form_len=%zu\",\n              cls, mime ? mime : \"(null)\", (void *)session, (void *)connection,\n              (form != NULL) ? strlen(form) : 0U);\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form), form);\n  log_to_file(\"MHD_create_response_from_buffer_static returned response=%p\", (void *)response);\n\n  add_session_cookie (session, response);\n  log_to_file(\"add_session_cookie called: session=%p, response=%p\", (void *)session, (void *)response);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n    log_to_file(\"MHD_add_response_header failed: response=%p, mime=%s\", (void *)response,\n                mime ? mime : \"(null)\");\n    /* return response without content type anyway ... */\n  }\n  else\n  {\n    log_to_file(\"MHD_add_response_header succeeded: response=%p, mime=%s\", (void *)response,\n                mime ? mime : \"(null)\");\n  }\n\n  /* Use the wrapper so the call site is well-instrumented. We pass the\n     original MHD_HTTP_OK constant; the wrapper copies it to a local\n     variable before invoking the library function. This preserves the\n     original behaviour while recording the status code value in the\n     log. */\n  ret = probe_queue_response_wrapper (connection,\n                                     MHD_HTTP_OK,\n                                     response);\n\n  log_to_file(\"MHD_queue_response returned ret=%d (0x%X)\", (int)ret, (unsigned)ret);\n\n  MHD_destroy_response (response);\n  log_to_file(\"MHD_destroy_response called on %p, exiting serve_simple_form with ret=%d\",\n              (void *)response, (int)ret);\n\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for serve_simple_form. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 17.8 prohibits a function from modifying its own parameters (the pointer object may be modified but the pointer itself shall not be). The provided serve_simple_form does not modify any of its parameters; it only passes a value (MHD_HTTP_OK) to MHD_queue_response. If MHD_queue_response modifies its own value parameter (e.g. status_code &= ~MHD_ICY_FLAG;), that would be a violation in MHD_queue_response itself, not in serve_simple_form. Copying the status_code to a local variable before calling the library (as the probe wrapper does) prevents the library from changing the caller's local variable, but it is not required to make serve_simple_form compliant with Rule 17.8\u2014the callee would need to be fixed instead. Therefore the claim that serve_simple_form violates Rule 17.8 is incorrect."
}